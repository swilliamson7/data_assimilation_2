┌ Warning: Using fallback BLAS replacements, performance may be degraded
└ @ Enzyme.Compiler ~/.julia/packages/GPUCompiler/U36Ed/src/utils.jl:59
after simplification :
; Function Attrs: mustprogress willreturn
define void @preprocess_julia_integrate1_1957({} addrspace(10)* noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #54 !dbg !2390 {
top:
  %newstruct23 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct62 = alloca [1 x [1 x i64]], align 8
  %1 = alloca [3 x double], align 8
  %newstruct102 = alloca [1 x [1 x i64]], align 8
  %newstruct103 = alloca { [1 x [1 x i64]], i64 }, align 8
  %2 = alloca { i64, {} addrspace(10)* }, align 8
  %newstruct309 = alloca [2 x [1 x i64]], align 8
  %newstruct396 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct402 = alloca [1 x [1 x i64]], align 8
  %newstruct450 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct506 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct512 = alloca [1 x [1 x i64]], align 8
  %newstruct568 = alloca [1 x [1 x i64]], align 8
  %3 = alloca [1 x {} addrspace(10)*], align 8
  %4 = alloca [3 x double], align 8
  %newstruct624 = alloca [1 x [1 x i64]], align 8
  %newstruct625 = alloca { [1 x [1 x i64]], i64 }, align 8
  %5 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %6 = alloca [1 x {} addrspace(10)*], align 8
  %7 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %newstruct740 = alloca [2 x [1 x i64]], align 8
  %8 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %9 = alloca [1 x {} addrspace(10)*], align 8
  %10 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %11 = call {}*** @julia.get_pgcstack() #55
  %ptls_field798 = getelementptr inbounds {}**, {}*** %11, i64 2
  %12 = bitcast {}*** %ptls_field798 to i64***
  %ptls_load799800 = load i64**, i64*** %12, align 8, !tbaa !68
  %13 = getelementptr inbounds i64*, i64** %ptls_load799800, i64 2
  %safepoint = load i64*, i64** %13, align 8, !tbaa !72, !invariant.load !67
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #55, !dbg !2391
  fence syncscope("singlethread") seq_cst
  %14 = bitcast {} addrspace(10)* %0 to i8 addrspace(10)*, !dbg !2392
  %getfield_addr801 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 120, !dbg !2392
  %15 = bitcast i8 addrspace(10)* %getfield_addr801 to {} addrspace(10)* addrspace(10)*, !dbg !2392
  %16 = addrspacecast {} addrspace(10)* addrspace(10)* %15 to {} addrspace(10)* addrspace(11)*, !dbg !2392
  %getfield = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %16 unordered, align 8, !dbg !2392, !tbaa !865, !alias.scope !116, !noalias !270, !nonnull !67, !dereferenceable !867, !align !868
  %getfield_addr2802 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 128, !dbg !2392
  %17 = bitcast i8 addrspace(10)* %getfield_addr2802 to {} addrspace(10)* addrspace(10)*, !dbg !2392
  %18 = addrspacecast {} addrspace(10)* addrspace(10)* %17 to {} addrspace(10)* addrspace(11)*, !dbg !2392
  %getfield3 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %18 unordered, align 8, !dbg !2392, !tbaa !865, !alias.scope !116, !noalias !270, !nonnull !67, !dereferenceable !867, !align !868
  %getfield_addr4803 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 136, !dbg !2392
  %19 = bitcast i8 addrspace(10)* %getfield_addr4803 to {} addrspace(10)* addrspace(10)*, !dbg !2392
  %20 = addrspacecast {} addrspace(10)* addrspace(10)* %19 to {} addrspace(10)* addrspace(11)*, !dbg !2392
  %getfield5 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %20 unordered, align 8, !dbg !2392, !tbaa !865, !alias.scope !116, !noalias !270, !nonnull !67, !dereferenceable !867, !align !868
  %getfield_addr6804 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 168, !dbg !2392
  %21 = bitcast i8 addrspace(10)* %getfield_addr6804 to {} addrspace(10)* addrspace(10)*, !dbg !2392
  %22 = addrspacecast {} addrspace(10)* addrspace(10)* %21 to {} addrspace(10)* addrspace(11)*, !dbg !2392
  %getfield7 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %22 unordered, align 8, !dbg !2392, !tbaa !865, !alias.scope !116, !noalias !270, !nonnull !67, !dereferenceable !867, !align !868
  %getfield_addr8805 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 184, !dbg !2392
  %23 = bitcast i8 addrspace(10)* %getfield_addr8805 to {} addrspace(10)* addrspace(10)*, !dbg !2392
  %24 = addrspacecast {} addrspace(10)* addrspace(10)* %23 to {} addrspace(10)* addrspace(11)*, !dbg !2392
  %getfield9 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %24 unordered, align 8, !dbg !2392, !tbaa !865, !alias.scope !116, !noalias !270, !nonnull !67, !dereferenceable !867, !align !868
  %25 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 56, !dbg !2396
  %26 = bitcast i8 addrspace(10)* %25 to double addrspace(10)*, !dbg !2396
  %27 = addrspacecast double addrspace(10)* %26 to double addrspace(11)*, !dbg !2396
  %28 = load double, double addrspace(11)* %27, align 8, !dbg !2396, !tbaa !865, !alias.scope !116, !noalias !270
  %29 = bitcast {} addrspace(10)* %0 to i64 addrspace(10)*, !dbg !2400
  %30 = addrspacecast i64 addrspace(10)* %29 to i64 addrspace(11)*, !dbg !2400
  %31 = load i64, i64 addrspace(11)* %30, align 8, !dbg !2400, !tbaa !865, !alias.scope !116, !noalias !270
  %getfield_addr10806 = getelementptr inbounds i64, i64 addrspace(10)* %29, i64 3, !dbg !2400
  %32 = bitcast i64 addrspace(10)* %getfield_addr10806 to {} addrspace(10)* addrspace(10)*, !dbg !2400
  %33 = addrspacecast {} addrspace(10)* addrspace(10)* %32 to {} addrspace(10)* addrspace(11)*, !dbg !2400
  %getfield11 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %33 unordered, align 8, !dbg !2400, !tbaa !865, !alias.scope !116, !noalias !270, !nonnull !67, !dereferenceable !867, !align !868
  %getfield_addr12807 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 32, !dbg !2400
  %34 = bitcast i8 addrspace(10)* %getfield_addr12807 to {} addrspace(10)* addrspace(10)*, !dbg !2400
  %35 = addrspacecast {} addrspace(10)* addrspace(10)* %34 to {} addrspace(10)* addrspace(11)*, !dbg !2400
  %getfield13 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %35 unordered, align 8, !dbg !2400, !tbaa !865, !alias.scope !116, !noalias !270, !nonnull !67, !dereferenceable !867, !align !868
  %36 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 16, !dbg !2400
  %37 = bitcast i8 addrspace(10)* %36 to double addrspace(10)*, !dbg !2400
  %38 = addrspacecast double addrspace(10)* %37 to double addrspace(11)*, !dbg !2400
  %39 = load double, double addrspace(11)* %38, align 8, !dbg !2400, !tbaa !865, !alias.scope !116, !noalias !270
  %getfield_addr14808 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 96, !dbg !2400
  %40 = bitcast i8 addrspace(10)* %getfield_addr14808 to {} addrspace(10)* addrspace(10)*, !dbg !2400
  %41 = addrspacecast {} addrspace(10)* addrspace(10)* %40 to {} addrspace(10)* addrspace(11)*, !dbg !2400
  %getfield15 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %41 unordered, align 8, !dbg !2400, !tbaa !865, !alias.scope !116, !noalias !270, !nonnull !67, !dereferenceable !867, !align !868
  %getfield_addr16809 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 88, !dbg !2400
  %42 = bitcast i8 addrspace(10)* %getfield_addr16809 to {} addrspace(10)* addrspace(10)*, !dbg !2400
  %43 = addrspacecast {} addrspace(10)* addrspace(10)* %42 to {} addrspace(10)* addrspace(11)*, !dbg !2400
  %getfield17 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %43 unordered, align 8, !dbg !2400, !tbaa !865, !alias.scope !116, !noalias !270, !nonnull !67, !dereferenceable !867, !align !868
  %getfield_addr18810 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 104, !dbg !2400
  %44 = bitcast i8 addrspace(10)* %getfield_addr18810 to {} addrspace(10)* addrspace(10)*, !dbg !2400
  %45 = addrspacecast {} addrspace(10)* addrspace(10)* %44 to {} addrspace(10)* addrspace(11)*, !dbg !2400
  %getfield19 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %45 unordered, align 8, !dbg !2400, !tbaa !865, !alias.scope !116, !noalias !270, !nonnull !67, !dereferenceable !867, !align !868
  %46 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 64, !dbg !2400
  %47 = bitcast i8 addrspace(10)* %46 to {} addrspace(10)* addrspace(10)* addrspace(10)*, !dbg !2400
  %48 = addrspacecast {} addrspace(10)* addrspace(10)* addrspace(10)* %47 to {} addrspace(10)* addrspace(10)* addrspace(11)*, !dbg !2400
  %.unpack.unpack995 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)* addrspace(11)* %48, align 8, !dbg !2400, !tbaa !865, !alias.scope !116, !noalias !270
  %getfield_addr20812 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 80, !dbg !2404
  %49 = bitcast i8 addrspace(10)* %getfield_addr20812 to {} addrspace(10)* addrspace(10)*, !dbg !2404
  %50 = addrspacecast {} addrspace(10)* addrspace(10)* %49 to {} addrspace(10)* addrspace(11)*, !dbg !2404
  %getfield21 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %50 unordered, align 8, !dbg !2404, !tbaa !865, !alias.scope !116, !noalias !270, !nonnull !67, !dereferenceable !867, !align !868
  %51 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 48, !dbg !2408
  %52 = bitcast i8 addrspace(10)* %51 to double addrspace(10)*, !dbg !2408
  %53 = addrspacecast double addrspace(10)* %52 to double addrspace(11)*, !dbg !2408
  %54 = load double, double addrspace(11)* %53, align 8, !dbg !2408, !tbaa !865, !alias.scope !116, !noalias !270
  %55 = bitcast {} addrspace(10)* %getfield15 to {} addrspace(10)* addrspace(10)*, !dbg !2410
  %56 = addrspacecast {} addrspace(10)* addrspace(10)* %55 to {} addrspace(10)* addrspace(11)*, !dbg !2410
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %56, i64 3, !dbg !2410
  %57 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*, !dbg !2410
  %arraysize = load i64, i64 addrspace(11)* %57, align 8, !dbg !2410, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %memcpy_refined_dst25 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct23, i64 0, i32 0, i64 0, i64 0, !dbg !2417
  store i64 %arraysize, i64* %memcpy_refined_dst25, align 8, !dbg !2417, !tbaa !132, !alias.scope !134, !noalias !2419
  %memcpy_refined_dst26 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct23, i64 0, i32 1, !dbg !2417
  store i64 1, i64* %memcpy_refined_dst26, align 8, !dbg !2417, !tbaa !132, !alias.scope !134, !noalias !2419
  %arraysize_ptr27 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %56, i64 4, !dbg !2422
  %58 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr27 to i64 addrspace(11)*, !dbg !2422
  %arraysize28 = load i64, i64 addrspace(11)* %58, align 16, !dbg !2422, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %.not = icmp eq i64 %arraysize28, 0, !dbg !2426
  br i1 %.not, label %L33, label %L36, !dbg !2425

L33:                                              ; preds = %top
  %59 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct23 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !2425
  call fastcc void @julia_throw_boundserror_1991({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield15, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %59) #56, !dbg !2425
  unreachable, !dbg !2425

L36:                                              ; preds = %top
  %60 = bitcast {} addrspace(10)* %getfield11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2430
  %61 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %60 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2430
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %61, i64 0, i32 1, !dbg !2430
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !2430, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %62 = icmp eq i64 %arraysize, %arraylen, !dbg !2436
  %63 = icmp eq i64 %arraylen, 1, !dbg !2438
  %value_phi.in = or i1 %62, %63, !dbg !2438
  br i1 %value_phi.in, label %L75, label %L60, !dbg !2439

L60:                                              ; preds = %L36
  %64 = call fastcc [1 x {} addrspace(10)*] @julia_DimensionMismatch_1978() #55, !dbg !2439
  %current_task792957 = getelementptr inbounds {}**, {}*** %11, i64 -14, !dbg !2439
  %current_task792 = bitcast {}*** %current_task792957 to {}**, !dbg !2439
  %box793 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task792, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #57, !dbg !2439
  %65 = bitcast {} addrspace(10)* %box793 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !2439
  %66 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %65, i64 0, i64 0, !dbg !2439
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857078480 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %66, align 8, !dbg !2439, !tbaa !112, !alias.scope !116, !noalias !2440
  %67 = addrspacecast {} addrspace(10)* %box793 to {} addrspace(12)*, !dbg !2439
  call void @ijl_throw({} addrspace(12)* %67) #56, !dbg !2439
  unreachable, !dbg !2439

L75:                                              ; preds = %L36
  br i1 %62, label %L86, label %L105, !dbg !2441

L86:                                              ; preds = %L75
  %.not819 = icmp eq i64 %arraysize, 0, !dbg !2443
  br i1 %.not819, label %L209, label %L90, !dbg !2445

L90:                                              ; preds = %L86
  %68 = addrspacecast {} addrspace(10)* %getfield15 to {} addrspace(11)*, !dbg !2447
  %69 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %68) #58, !dbg !2447
  %70 = bitcast {}* %69 to i8**, !dbg !2447
  %arrayptr761 = load i8*, i8** %70, align 8, !dbg !2447, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67
  %71 = addrspacecast {} addrspace(10)* %getfield11 to {} addrspace(11)*, !dbg !2454
  %72 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %71) #58, !dbg !2454
  %73 = bitcast {}* %72 to i8**, !dbg !2454
  %arrayptr763 = load i8*, i8** %73, align 8, !dbg !2454, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %.not941.not = icmp eq i8* %arrayptr761, %arrayptr763, !dbg !2457
  br i1 %.not941.not, label %L98, label %L101, !dbg !2452

L98:                                              ; preds = %L90
  %74 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %getfield11) #55, !dbg !2460
  br label %L101, !dbg !2462

L101:                                             ; preds = %L98, %L90
  %value_phi764 = phi {} addrspace(10)* [ %74, %L98 ], [ %getfield11, %L90 ]
  %.repack942 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %10, i64 0, i32 0, !dbg !2470
  store {} addrspace(10)* %getfield15, {} addrspace(10)** %.repack942, align 8, !dbg !2470, !noalias !2471
  %75 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %10, i64 0, i32 1, i32 0, i64 0, i64 0, !dbg !2470
  store i64 %arraysize, i64* %75, align 8, !dbg !2470, !noalias !2471
  %.repack943.repack949 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %10, i64 0, i32 1, i32 1, !dbg !2470
  store i64 1, i64* %.repack943.repack949, align 8, !dbg !2470, !noalias !2471
  %.repack945 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %10, i64 0, i32 2, !dbg !2470
  store i64 0, i64* %.repack945, align 8, !dbg !2470, !noalias !2471
  %.repack947 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %10, i64 0, i32 3, !dbg !2470
  store i64 1, i64* %.repack947, align 8, !dbg !2470, !noalias !2471
  %76 = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %10 to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !2470
  call fastcc void @julia_copyto_unaliased__1986({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree noundef nonnull writeonly sret({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }) align 8 dereferenceable(40) %8, [1 x {} addrspace(10)*]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) "enzymejl_returnRoots" %9, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(40) %76, {} addrspace(10)* nocapture noundef nonnull readonly align 16 dereferenceable(40) %value_phi764) #55, !dbg !2470
  br label %L209, !dbg !2470

L105:                                             ; preds = %L75
  %77 = addrspacecast {} addrspace(10)* %getfield15 to {} addrspace(11)*, !dbg !2472
  %78 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %77) #58, !dbg !2472
  %79 = bitcast {}* %78 to i8**, !dbg !2472
  %arrayptr766 = load i8*, i8** %79, align 8, !dbg !2472, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67
  %80 = addrspacecast {} addrspace(10)* %getfield11 to {} addrspace(11)*, !dbg !2483
  %81 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %80) #58, !dbg !2483
  %82 = bitcast {}* %81 to i8**, !dbg !2483
  %arrayptr768 = load i8*, i8** %82, align 8, !dbg !2483, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %.not951.not = icmp eq i8* %arrayptr766, %arrayptr768, !dbg !2486
  br i1 %.not951.not, label %L113, label %L118, !dbg !2477

L113:                                             ; preds = %L105
  %83 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %getfield11) #55, !dbg !2489
  %.phi.trans.insert = bitcast {} addrspace(10)* %83 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert969 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr770.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert969, i64 0, i32 1
  %arraylen771.pre = load i64, i64 addrspace(11)* %arraylen_ptr770.phi.trans.insert, align 8, !dbg !2491, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  br label %L118, !dbg !2462

L118:                                             ; preds = %L113, %L105
  %arraylen771 = phi i64 [ %arraylen771.pre, %L113 ], [ %arraylen, %L105 ], !dbg !2491
  %value_phi769 = phi {} addrspace(10)* [ %83, %L113 ], [ %getfield11, %L105 ]
  %.not954 = icmp eq i64 %arraylen771, 1, !dbg !2495
  %.not952 = icmp eq i64 %arraysize, 0, !dbg !2499
  br i1 %.not952, label %L209, label %L160.lr.ph, !dbg !2500

L160.lr.ph:                                       ; preds = %L118
  %84 = bitcast {} addrspace(10)* %value_phi769 to double addrspace(13)* addrspace(10)*
  %85 = addrspacecast double addrspace(13)* addrspace(10)* %84 to double addrspace(13)* addrspace(11)*
  %arrayptr779955 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %85, align 8, !tbaa !382, !alias.scope !2502, !noalias !319, !nonnull !67
  %86 = bitcast {} addrspace(10)* %getfield15 to double addrspace(13)* addrspace(10)*
  %87 = addrspacecast double addrspace(13)* addrspace(10)* %86 to double addrspace(13)* addrspace(11)*
  %arrayptr783956 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %87, align 16, !tbaa !72, !invariant.load !67, !alias.scope !2503, !noalias !96, !nonnull !67
  br label %L160, !dbg !2504

L160:                                             ; preds = %L160, %L160.lr.ph
  %iv = phi i64 [ %iv.next, %L160 ], [ 0, %L160.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !2505
  %88 = select i1 %.not954, i64 0, i64 %iv, !dbg !2505
  %89 = getelementptr inbounds double, double addrspace(13)* %arrayptr779955, i64 %88, !dbg !2505
  %arrayref780 = load double, double addrspace(13)* %89, align 8, !dbg !2505, !tbaa !268, !alias.scope !116, !noalias !270
  %90 = getelementptr inbounds double, double addrspace(13)* %arrayptr783956, i64 %iv, !dbg !2512
  store double %arrayref780, double addrspace(13)* %90, align 8, !dbg !2512, !tbaa !268, !alias.scope !116, !noalias !2440
  %exitcond1062.not = icmp eq i64 %iv.next, %arraysize, !dbg !2514
  br i1 %exitcond1062.not, label %L209.loopexit, label %L160, !dbg !2504, !llvm.loop !2515

L209.loopexit:                                    ; preds = %L160
  br label %L209, !dbg !2516

L209:                                             ; preds = %L209.loopexit, %L118, %L101, %L86
  %memcpy_refined_dst64 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct62, i64 0, i64 0, i64 0, !dbg !2516
  store i64 %arraysize, i64* %memcpy_refined_dst64, align 8, !dbg !2516, !tbaa !132, !alias.scope !134, !noalias !2419
  %91 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize) #59, !dbg !2519
  %92 = bitcast {} addrspace(10)* %91 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2524
  %93 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %92 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2524
  %arraylen_ptr65 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %93, i64 0, i32 1, !dbg !2524
  %arraylen66 = load i64, i64 addrspace(11)* %arraylen_ptr65, align 8, !dbg !2524, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not821 = icmp eq i64 %arraylen66, %arraysize, !dbg !2527
  br i1 %.not821, label %L222, label %L275, !dbg !2526

L222:                                             ; preds = %L209
  %.not822 = icmp eq i64 %arraysize, 0, !dbg !2530
  br i1 %.not822, label %pass.2, label %L243.preheader, !dbg !2535

L243.preheader:                                   ; preds = %L222
  %94 = bitcast {} addrspace(10)* %getfield15 to double addrspace(13)* addrspace(10)*
  %95 = addrspacecast double addrspace(13)* addrspace(10)* %94 to double addrspace(13)* addrspace(11)*
  %arrayptr748938 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %95, align 16
  %96 = bitcast {} addrspace(10)* %91 to double addrspace(13)* addrspace(10)*
  %97 = addrspacecast double addrspace(13)* addrspace(10)* %96 to double addrspace(13)* addrspace(11)*
  br label %L243, !dbg !2536

L243:                                             ; preds = %L250, %L243.preheader
  %iv1 = phi i64 [ %iv.next2, %L250 ], [ 0, %L243.preheader ]
  %value_phi78.off0 = phi i1 [ %102, %L250 ], [ false, %L243.preheader ]
  %value_phi79 = phi i64 [ %value_phi754, %L250 ], [ 1, %L243.preheader ]
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !2536
  br i1 %value_phi78.off0, label %pass.2.loopexit, label %L250, !dbg !2536

L250:                                             ; preds = %L243
  %98 = add nsw i64 %iv.next2, -1, !dbg !2538
  %99 = getelementptr inbounds double, double addrspace(13)* %arrayptr748938, i64 %98, !dbg !2538
  %arrayref749 = load double, double addrspace(13)* %99, align 8, !dbg !2538, !tbaa !268, !alias.scope !116, !noalias !270
  %100 = add i64 %value_phi79, -1, !dbg !2540
  %arrayptr751939 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %97, align 8, !dbg !2540, !tbaa !382, !alias.scope !2502, !noalias !319, !nonnull !67
  %101 = getelementptr inbounds double, double addrspace(13)* %arrayptr751939, i64 %100, !dbg !2540
  store double %arrayref749, double addrspace(13)* %101, align 8, !dbg !2540, !tbaa !268, !alias.scope !116, !noalias !2440
  %102 = icmp eq i64 %value_phi79, %arraysize, !dbg !2541
  %103 = add i64 %value_phi79, 1, !dbg !2542
  %value_phi754 = select i1 %102, i64 undef, i64 %103, !dbg !2542
  %.not940 = icmp eq i64 %iv.next2, %arraysize, !dbg !2544
  %104 = add nuw nsw i64 %iv.next2, 1, !dbg !2462
  br i1 %.not940, label %pass.2.loopexit, label %L243, !dbg !2464

L275:                                             ; preds = %L209
  %105 = addrspacecast [1 x [1 x i64]]* %newstruct62 to [1 x [1 x i64]] addrspace(11)*, !dbg !2526
  call fastcc void @julia_throw_checksize_error_1989({} addrspace(10)* nocapture noundef nonnull readonly align 16 dereferenceable(40) %91, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %105) #56, !dbg !2526
  unreachable, !dbg !2526

L322:                                             ; preds = %pass.2
  %106 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct103 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !2545
  call fastcc void @julia_throw_boundserror_1991({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield19, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %106) #56, !dbg !2545
  unreachable, !dbg !2545

L325:                                             ; preds = %pass.2
  %107 = addrspacecast [1 x [1 x i64]]* %newstruct102 to [1 x [1 x i64]] addrspace(11)*, !dbg !2549
  call fastcc void @julia__unsafe_setindex__2077({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield19, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %328, [1 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %107, i64 noundef signext 1) #55, !dbg !2549
  %108 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 6199626896 to {}*) to {} addrspace(10)*), i64 noundef 6, i64 noundef 6) #59, !dbg !2550
  %109 = bitcast {} addrspace(10)* %108 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2556
  %110 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %109 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2556
  %arraylen_ptr110 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %110, i64 0, i32 1, !dbg !2556
  %arraylen111 = load i64, i64 addrspace(11)* %arraylen_ptr110, align 8, !dbg !2556, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %.not828 = icmp eq i64 %arraylen111, 0, !dbg !2561
  br i1 %.not828, label %L359, label %L325.L341_crit_edge, !dbg !2559

L325.L341_crit_edge:                              ; preds = %L325
  %111 = bitcast {} addrspace(10)* %108 to i8 addrspace(13)* addrspace(10)*, !dbg !2565
  %112 = addrspacecast i8 addrspace(13)* addrspace(10)* %111 to i8 addrspace(13)* addrspace(11)*, !dbg !2565
  %arrayptr119829.pre1043 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %112, align 8, !dbg !2565, !tbaa !72, !invariant.load !67, !alias.scope !2503, !noalias !96
  %113 = shl nuw i64 %arraylen111, 3, !dbg !2559
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr119829.pre1043, i8 0, i64 %113, i1 false) #55, !dbg !2565, !tbaa !268, !alias.scope !116, !noalias !2440
  br label %L359, !dbg !2567

L359:                                             ; preds = %L325.L341_crit_edge, %L325
  %114 = bitcast {} addrspace(10)* %108 to {} addrspace(10)* addrspace(10)*, !dbg !2567
  %115 = addrspacecast {} addrspace(10)* addrspace(10)* %114 to {} addrspace(10)* addrspace(11)*, !dbg !2567
  %arraysize_ptr124 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %115, i64 3, !dbg !2567
  %116 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr124 to i64 addrspace(11)*, !dbg !2567
  %arraysize125 = load i64, i64 addrspace(11)* %116, align 8, !dbg !2567, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %inbounds.not = icmp eq i64 %arraysize125, 0, !dbg !2567
  br i1 %inbounds.not, label %oob, label %ib, !dbg !2567

L394:                                             ; preds = %idxend284.L394_crit_edge, %L394
  %iv3 = phi i64 [ 0, %idxend284.L394_crit_edge ], [ %iv.next4, %L394 ]
  %iv.next4 = add nuw nsw i64 %iv3, 1, !dbg !2569
  %117 = add nsw i64 %iv.next4, -1, !dbg !2569
  %memcpy_refined_dst297 = getelementptr inbounds double, double addrspace(13)* %arrayptr296858.pre, i64 %117, !dbg !2569
  store double 1.000000e+00, double addrspace(13)* %memcpy_refined_dst297, align 8, !dbg !2569, !tbaa !268, !alias.scope !116, !noalias !2440
  %.not859 = icmp eq i64 %iv.next4, %arraylen288, !dbg !2575
  %118 = add nuw nsw i64 %iv.next4, 1, !dbg !2576
  br i1 %.not859, label %L412.loopexit, label %L394, !dbg !2577

L412.loopexit:                                    ; preds = %L394
  br label %L412, !dbg !2578

L412:                                             ; preds = %L412.loopexit, %idxend258
  %.repack = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* }* %2, i64 0, i32 0, !dbg !2578
  store i64 0, i64* %.repack, align 8, !dbg !2578, !noalias !2471
  %.repack860 = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* }* %2, i64 0, i32 1, !dbg !2578
  store {} addrspace(10)* %381, {} addrspace(10)** %.repack860, align 8, !dbg !2578, !noalias !2471
  %119 = addrspacecast { i64, {} addrspace(10)* }* %2 to { i64, {} addrspace(10)* } addrspace(11)*, !dbg !2578
  %120 = call fastcc nonnull {} addrspace(10)* @julia__diagm_2062({ i64, {} addrspace(10)* } addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %119) #55, !dbg !2578
  %121 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct309, i64 0, i64 1, i64 0, !dbg !2580
  store i64 %arraysize127, i64* %121, align 8, !dbg !2580, !tbaa !132, !alias.scope !134, !noalias !2419
  %memcpy_refined_dst311 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct309, i64 0, i64 0, i64 0, !dbg !2588
  store i64 %arraysize125, i64* %memcpy_refined_dst311, align 8, !dbg !2588, !tbaa !132, !alias.scope !134, !noalias !2419
  %122 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6199626896 to {}*) to {} addrspace(10)*), i64 %arraysize125, i64 %arraysize127) #59, !dbg !2590
  %123 = bitcast {} addrspace(10)* %122 to {} addrspace(10)* addrspace(10)*, !dbg !2598
  %124 = addrspacecast {} addrspace(10)* addrspace(10)* %123 to {} addrspace(10)* addrspace(11)*, !dbg !2598
  %arraysize_ptr320 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %124, i64 3, !dbg !2598
  %125 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr320 to i64 addrspace(11)*, !dbg !2598
  %arraysize321 = load i64, i64 addrspace(11)* %125, align 8, !dbg !2598, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %.not862 = icmp eq i64 %arraysize321, %arraysize125, !dbg !2602
  br i1 %.not862, label %L457, label %L446.L584_crit_edge, !dbg !2606

L446.L584_crit_edge:                              ; preds = %L412
  %arraysize_ptr734.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %124, i64 4
  %.phi.trans.insert975 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr734.phi.trans.insert to i64 addrspace(11)*
  %arraysize735.pre = load i64, i64 addrspace(11)* %.phi.trans.insert975, align 8, !dbg !2598, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  br label %L584, !dbg !2606

L457:                                             ; preds = %L412
  %arraysize_ptr322 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %124, i64 4, !dbg !2598
  %126 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr322 to i64 addrspace(11)*, !dbg !2598
  %arraysize323 = load i64, i64 addrspace(11)* %126, align 8, !dbg !2598, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %.not937 = icmp eq i64 %arraysize323, %arraysize127, !dbg !2607
  br i1 %.not937, label %L467, label %L584, !dbg !2600

L467:                                             ; preds = %L457
  %127 = addrspacecast {} addrspace(10)* %122 to {} addrspace(11)*, !dbg !2611
  %128 = addrspacecast {} addrspace(10)* %108 to {} addrspace(11)*, !dbg !2611
  %.not863 = icmp eq {} addrspace(11)* %127, %128, !dbg !2611
  %129 = bitcast double addrspace(13)* addrspace(10)* %340 to {} addrspace(10)*, !dbg !2611
  br i1 %.not863, label %L483, label %L470, !dbg !2611

L470:                                             ; preds = %L467
  %130 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %127) #58, !dbg !2617
  %131 = bitcast {}* %130 to i8**, !dbg !2617
  %arrayptr728 = load i8*, i8** %131, align 8, !dbg !2617, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67
  %132 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %128) #58, !dbg !2617
  %133 = bitcast {}* %132 to i8**, !dbg !2617
  %arrayptr730 = load i8*, i8** %133, align 8, !dbg !2617, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67
  %.not936.not = icmp eq i8* %arrayptr728, %arrayptr730, !dbg !2622
  %134 = bitcast double addrspace(13)* addrspace(10)* %340 to {} addrspace(10)*, !dbg !2621
  br i1 %.not936.not, label %L478, label %L483, !dbg !2621

L478:                                             ; preds = %L470
  %135 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %108) #55, !dbg !2625
  %.phi.trans.insert977 = bitcast {} addrspace(10)* %135 to {} addrspace(10)* addrspace(10)*
  %.phi.trans.insert978 = addrspacecast {} addrspace(10)* addrspace(10)* %.phi.trans.insert977 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr328.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert978, i64 3
  %.phi.trans.insert979 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr328.phi.trans.insert to i64 addrspace(11)*
  %arraysize329.pre = load i64, i64 addrspace(11)* %.phi.trans.insert979, align 8, !dbg !2627, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %arraysize_ptr330.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert978, i64 4
  %.phi.trans.insert981 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr330.phi.trans.insert to i64 addrspace(11)*
  %arraysize331.pre = load i64, i64 addrspace(11)* %.phi.trans.insert981, align 8, !dbg !2627, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %.pre = bitcast {} addrspace(10)* %135 to double addrspace(13)* addrspace(10)*
  %.pre1063 = addrspacecast double addrspace(13)* addrspace(10)* %.pre to double addrspace(13)* addrspace(11)*
  %arrayptr353869.pre.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.pre1063, align 8, !tbaa !72, !invariant.load !67, !alias.scope !2503, !noalias !96
  %136 = bitcast double addrspace(13)* addrspace(10)* %.pre to {} addrspace(10)*, !dbg !2631
  br label %L483, !dbg !2631

L483:                                             ; preds = %L478, %L470, %L467
  %nodecayed.arrayptr353869.pre = phi {} addrspace(10)* [ %136, %L478 ], [ %134, %L470 ], [ %129, %L467 ]
  %arraysize331 = phi i64 [ %arraysize331.pre, %L478 ], [ %arraysize127, %L470 ], [ %arraysize127, %L467 ], !dbg !2627
  %arraysize350 = phi i64 [ %arraysize329.pre, %L478 ], [ %arraysize125, %L470 ], [ %arraysize125, %L467 ], !dbg !2627
  %137 = bitcast {} addrspace(10)* %nodecayed.arrayptr353869.pre to double addrspace(13)* addrspace(10)*, !dbg !2639
  %138 = addrspacecast double addrspace(13)* addrspace(10)* %137 to double addrspace(13)* addrspace(11)*, !dbg !2639
  %139 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %138, align 8, !dbg !2639
  %.not868 = icmp eq i64 %arraysize331, 1, !dbg !2639
  %.not867 = icmp eq i64 %arraysize350, 1, !dbg !2644
  %140 = bitcast {} addrspace(10)* %122 to double addrspace(13)* addrspace(10)*
  %141 = addrspacecast double addrspace(13)* addrspace(10)* %140 to double addrspace(13)* addrspace(11)*
  %umax1060 = call i64 @llvm.umax.i64(i64 %arraysize125, i64 1) #55, !dbg !2647
  %arrayptr358870.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %141, align 8, !tbaa !72, !invariant.load !67, !alias.scope !2503, !noalias !96
  %umax1096 = call i64 @llvm.umax.i64(i64 %arraysize127, i64 1) #55, !dbg !2647
  br label %L558.lr.ph, !dbg !2647

L558.lr.ph:                                       ; preds = %L562, %L483
  %iv5 = phi i64 [ %iv.next6, %L562 ], [ 0, %L483 ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  %value_phi341.op = add nsw i64 %iv.next6, -1
  %142 = select i1 %.not868, i64 0, i64 %value_phi341.op
  %143 = mul i64 %142, %arraysize350
  %144 = mul i64 %value_phi341.op, %arraysize125
  br label %L558, !dbg !2649

L558:                                             ; preds = %L558, %L558.lr.ph
  %iv7 = phi i64 [ %iv.next8, %L558 ], [ 0, %L558.lr.ph ]
  %iv.next8 = add nuw nsw i64 %iv7, 1, !dbg !2650
  %145 = select i1 %.not867, i64 0, i64 %iv7, !dbg !2650
  %146 = add i64 %145, %143, !dbg !2650
  %147 = getelementptr inbounds double, double addrspace(13)* %139, i64 %146, !dbg !2650
  %arrayref = load double, double addrspace(13)* %147, align 8, !dbg !2650, !tbaa !268, !alias.scope !116, !noalias !270
  %148 = fmul double %39, %arrayref, !dbg !2659
  %149 = add i64 %iv7, %144, !dbg !2662
  %150 = getelementptr inbounds double, double addrspace(13)* %arrayptr358870.pre, i64 %149, !dbg !2662
  store double %148, double addrspace(13)* %150, align 8, !dbg !2662, !tbaa !268, !alias.scope !116, !noalias !2440
  %exitcond1061.not = icmp eq i64 %iv.next8, %umax1060, !dbg !2664
  br i1 %exitcond1061.not, label %L562, label %L558, !dbg !2649, !llvm.loop !2665

L562:                                             ; preds = %L558
  %151 = add nuw nsw i64 %iv.next6, 1, !dbg !2666
  %exitcond.not1097 = icmp eq i64 %iv.next6, %umax1096, !dbg !2670
  br i1 %exitcond.not1097, label %L598, label %L558.lr.ph, !dbg !2669

L584:                                             ; preds = %L457, %L446.L584_crit_edge
  %arraysize735 = phi i64 [ %arraysize735.pre, %L446.L584_crit_edge ], [ %arraysize323, %L457 ], !dbg !2598
  %152 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct740, i64 0, i64 0, i64 0, !dbg !2674
  store i64 %arraysize321, i64* %152, align 8, !dbg !2674, !tbaa !132, !alias.scope !134, !noalias !2419
  %153 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct740, i64 0, i64 1, i64 0, !dbg !2674
  store i64 %arraysize735, i64* %153, align 8, !dbg !2674, !tbaa !132, !alias.scope !134, !noalias !2419
  %154 = addrspacecast [2 x [1 x i64]]* %newstruct740 to [2 x [1 x i64]] addrspace(11)*, !dbg !2600
  %155 = addrspacecast [2 x [1 x i64]]* %newstruct309 to [2 x [1 x i64]] addrspace(11)*, !dbg !2600
  call fastcc void @julia_throwdm_1976([2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %154, [2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %155) #56, !dbg !2600
  unreachable, !dbg !2600

L598:                                             ; preds = %L562
  %156 = call fastcc nonnull {} addrspace(10)* @julia___2053({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %120, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %122) #55, !dbg !2574
  %157 = add i64 %31, 1, !dbg !2678
  %158 = call i64 @llvm.smax.i64(i64 %157, i64 1) #55, !dbg !2680
  %159 = icmp ugt i64 %158, 1, !dbg !2681
  br i1 %159, label %L616.preheader, label %L1366, !dbg !2679

L616.preheader:                                   ; preds = %L598
  %160 = bitcast {} addrspace(10)* %156 to {} addrspace(10)* addrspace(10)*
  %161 = addrspacecast {} addrspace(10)* addrspace(10)* %160 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr382 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %161, i64 3
  %162 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr382 to i64 addrspace(11)*
  %arraysize383 = load i64, i64 addrspace(11)* %162, align 8, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %163 = addrspacecast {} addrspace(10)* addrspace(10)* %.unpack.unpack995 to {} addrspace(10)* addrspace(11)*
  %current_task388872 = getelementptr inbounds {}**, {}*** %11, i64 -14
  %current_task388 = bitcast {}*** %current_task388872 to {}**
  %164 = bitcast {} addrspace(10)* %getfield13 to {} addrspace(10)* addrspace(10)*
  %165 = addrspacecast {} addrspace(10)* addrspace(10)* %164 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr389 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %165, i64 3
  %166 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr389 to i64 addrspace(11)*
  %arraysize390 = load i64, i64 addrspace(11)* %166, align 8
  %memcpy_refined_dst398 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct396, i64 0, i32 0, i64 0, i64 0
  %167 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct396, i64 0, i32 1
  %arraysize_ptr399 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %165, i64 4
  %168 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr399 to i64 addrspace(11)*
  %arraysize400 = load i64, i64 addrspace(11)* %168, align 8
  %memcpy_refined_dst404 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct402, i64 0, i64 0, i64 0
  %.not875 = icmp eq i64 %arraysize390, 0
  %169 = bitcast {} addrspace(10)* %getfield13 to double addrspace(13)* addrspace(10)*
  %170 = addrspacecast double addrspace(13)* addrspace(10)* %169 to double addrspace(13)* addrspace(11)*
  %171 = bitcast {} addrspace(10)* %getfield3 to {} addrspace(10)* addrspace(10)*
  %172 = addrspacecast {} addrspace(10)* addrspace(10)* %171 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr432 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %172, i64 3
  %173 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr432 to i64 addrspace(11)*
  %arraysize433 = load i64, i64 addrspace(11)* %173, align 8
  %memcpy_refined_dst452 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct450, i64 0, i32 0, i64 0, i64 0
  %174 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct450, i64 0, i32 1
  %175 = addrspacecast {} addrspace(10)* %getfield15 to {} addrspace(11)*
  %176 = bitcast {} addrspace(10)* %getfield15 to double addrspace(13)* addrspace(10)*
  %177 = addrspacecast double addrspace(13)* addrspace(10)* %176 to double addrspace(13)* addrspace(11)*
  %arrayptr698931 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %177, align 16
  %.repack917 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %7, i64 0, i32 0
  %178 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %7, i64 0, i32 1, i32 0, i64 0, i64 0
  %.repack918.repack924 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %7, i64 0, i32 1, i32 1
  %.repack920 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %7, i64 0, i32 2
  %.repack922 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %7, i64 0, i32 3
  %179 = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %7 to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*
  %180 = bitcast {} addrspace(10)* %getfield21 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %181 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %180 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr477 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %181, i64 0, i32 1
  %182 = bitcast {} addrspace(10)* %getfield21 to i64 addrspace(13)* addrspace(10)*
  %183 = addrspacecast i64 addrspace(13)* addrspace(10)* %182 to i64 addrspace(13)* addrspace(11)*
  %184 = getelementptr inbounds i8, i8 addrspace(10)* %14, i64 72
  %185 = bitcast i8 addrspace(10)* %184 to double addrspace(10)*
  %186 = addrspacecast double addrspace(10)* %185 to double addrspace(11)*
  %187 = bitcast {} addrspace(10)* %getfield5 to {} addrspace(10)* addrspace(10)*
  %188 = addrspacecast {} addrspace(10)* addrspace(10)* %187 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr497 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %188, i64 3
  %189 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr497 to i64 addrspace(11)*
  %arraysize498 = load i64, i64 addrspace(11)* %189, align 8
  %190 = bitcast {} addrspace(10)* %getfield17 to {} addrspace(10)* addrspace(10)*
  %191 = addrspacecast {} addrspace(10)* addrspace(10)* %190 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr499 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %191, i64 3
  %192 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr499 to i64 addrspace(11)*
  %arraysize500 = load i64, i64 addrspace(11)* %192, align 8
  %memcpy_refined_dst508 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct506, i64 0, i32 0, i64 0, i64 0
  %193 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct506, i64 0, i32 1
  %arraysize_ptr509 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %191, i64 4
  %194 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr509 to i64 addrspace(11)*
  %arraysize510 = load i64, i64 addrspace(11)* %194, align 8
  %memcpy_refined_dst514 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct512, i64 0, i64 0, i64 0
  %.not896 = icmp eq i64 %arraysize500, 0
  %195 = bitcast {} addrspace(10)* %getfield17 to double addrspace(13)* addrspace(10)*
  %196 = addrspacecast double addrspace(13)* addrspace(10)* %195 to double addrspace(13)* addrspace(11)*
  %memcpy_refined_dst570 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct568, i64 0, i64 0, i64 0
  %197 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %3, i64 0, i64 0
  %198 = addrspacecast [1 x {} addrspace(10)*]* %3 to [1 x {} addrspace(10)*] addrspace(11)*
  %memcpy_refined_src601 = getelementptr inbounds [3 x double], [3 x double]* %4, i64 0, i64 0
  %memcpy_refined_src603 = getelementptr inbounds [3 x double], [3 x double]* %4, i64 0, i64 1
  %memcpy_refined_src605 = getelementptr inbounds [3 x double], [3 x double]* %4, i64 0, i64 2
  %199 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct624, i64 0, i64 0, i64 0
  %memcpy_refined_dst627 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct625, i64 0, i32 0, i64 0, i64 0
  %200 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct625, i64 0, i32 1
  %201 = addrspacecast [1 x [1 x i64]]* %newstruct624 to [1 x [1 x i64]] addrspace(11)*
  %202 = add i64 %arraysize400, 2, !dbg !2680
  %umax = call i64 @llvm.umax.i64(i64 %arraysize28, i64 1) #55, !dbg !2680
  %203 = add nuw nsw i64 %umax, 1, !dbg !2680
  %umax1058 = call i64 @llvm.umax.i64(i64 %arraysize108, i64 1) #55, !dbg !2680
  %204 = add nuw nsw i64 %umax1058, 1, !dbg !2680
  br label %L616, !dbg !2680

L616:                                             ; preds = %L1352, %L616.preheader
  %iv9 = phi i64 [ %iv.next10, %L1352 ], [ 0, %L616.preheader ]
  %value_phi372 = phi double [ %273, %L1352 ], [ 0.000000e+00, %L616.preheader ]
  %205 = add i64 %iv9, 2, !dbg !2685
  %iv.next10 = add nuw nsw i64 %iv9, 1, !dbg !2685
  %206 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize383) #59, !dbg !2685
  %207 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1996({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %206, i32 noundef zeroext 1308622848, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %156, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield11) #55, !dbg !2690
  %208 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %163 unordered, align 8, !dbg !2693, !tbaa !865, !alias.scope !116, !noalias !270
  %isdefined.not = icmp eq {} addrspace(10)* %208, null, !dbg !2693
  br i1 %isdefined.not, label %err, label %pass387, !dbg !2693

L680:                                             ; preds = %pass387
  %209 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct396 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !2695
  call fastcc void @julia_throw_boundserror_1991({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield13, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %209) #56, !dbg !2695
  unreachable, !dbg !2695

L683:                                             ; preds = %pass387
  store i64 %arraysize390, i64* %memcpy_refined_dst404, align 8, !dbg !2697, !tbaa !132, !alias.scope !134, !noalias !2419
  %210 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize390) #59, !dbg !2700
  %211 = bitcast {} addrspace(10)* %210 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2705
  %212 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %211 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2705
  %arraylen_ptr405 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %212, i64 0, i32 1, !dbg !2705
  %arraylen406 = load i64, i64 addrspace(11)* %arraylen_ptr405, align 8, !dbg !2705, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not874 = icmp eq i64 %arraylen406, %arraysize390, !dbg !2708
  br i1 %.not874, label %L696, label %L749, !dbg !2707

L696:                                             ; preds = %L683
  br i1 %.not875, label %L753.L754_crit_edge, label %L717.preheader, !dbg !2711

L717.preheader:                                   ; preds = %L696
  %213 = mul i64 %393, %arraysize390, !dbg !2712
  %214 = add i64 %213, -1, !dbg !2712
  %arrayptr715933 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %170, align 16
  %215 = bitcast {} addrspace(10)* %210 to double addrspace(13)* addrspace(10)*
  %216 = addrspacecast double addrspace(13)* addrspace(10)* %215 to double addrspace(13)* addrspace(11)*
  br label %L717, !dbg !2715

L717:                                             ; preds = %L724, %L717.preheader
  %iv11 = phi i64 [ %iv.next12, %L724 ], [ 0, %L717.preheader ]
  %value_phi418.off0 = phi i1 [ %221, %L724 ], [ false, %L717.preheader ]
  %value_phi419 = phi i64 [ %value_phi721, %L724 ], [ 1, %L717.preheader ]
  %iv.next12 = add nuw nsw i64 %iv11, 1, !dbg !2715
  br i1 %value_phi418.off0, label %L753.L754_crit_edge.loopexit, label %L724, !dbg !2715

L724:                                             ; preds = %L717
  %217 = add i64 %214, %iv.next12, !dbg !2712
  %218 = getelementptr inbounds double, double addrspace(13)* %arrayptr715933, i64 %217, !dbg !2712
  %arrayref716 = load double, double addrspace(13)* %218, align 8, !dbg !2712, !tbaa !268, !alias.scope !116, !noalias !270
  %219 = add i64 %value_phi419, -1, !dbg !2716
  %arrayptr718934 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %216, align 8, !dbg !2716, !tbaa !382, !alias.scope !2502, !noalias !319, !nonnull !67
  %220 = getelementptr inbounds double, double addrspace(13)* %arrayptr718934, i64 %219, !dbg !2716
  store double %arrayref716, double addrspace(13)* %220, align 8, !dbg !2716, !tbaa !268, !alias.scope !116, !noalias !2440
  %221 = icmp eq i64 %value_phi419, %arraysize390, !dbg !2717
  %222 = add i64 %value_phi419, 1, !dbg !2718
  %value_phi721 = select i1 %221, i64 undef, i64 %222, !dbg !2718
  %.not935 = icmp eq i64 %iv.next12, %arraysize390, !dbg !2720
  %223 = add i64 %iv.next12, 1, !dbg !2631
  br i1 %.not935, label %L753.L754_crit_edge.loopexit, label %L717, !dbg !2633

L749:                                             ; preds = %L683
  %224 = addrspacecast [1 x [1 x i64]]* %newstruct402 to [1 x [1 x i64]] addrspace(11)*, !dbg !2707
  call fastcc void @julia_throw_checksize_error_1989({} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %210, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %224) #56, !dbg !2707
  unreachable, !dbg !2707

L753.L754_crit_edge.loopexit:                     ; preds = %L717, %L724
  br label %L753.L754_crit_edge, !dbg !2685

L753.L754_crit_edge:                              ; preds = %L753.L754_crit_edge.loopexit, %L696
  %225 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize433) #59, !dbg !2685
  %226 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1996({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %225, i32 noundef zeroext 1308622848, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield3, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %210) #55, !dbg !2690
  %227 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4730741840 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %207, {} addrspace(10)* nonnull %391, {} addrspace(10)* nonnull %226) #60, !dbg !2638
  %228 = call {} addrspace(10)* @julia.typeof({} addrspace(10)* nonnull %227) #58, !dbg !2638
  %229 = addrspacecast {} addrspace(10)* %228 to {} addrspace(11)*, !dbg !2638
  %230 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %229) #58, !dbg !2638
  %exactly_isa.not = icmp eq {}* %230, inttoptr (i64 11191270976 to {}*), !dbg !2638
  br i1 %exactly_isa.not, label %L782, label %L789, !dbg !2638

L782:                                             ; preds = %L753.L754_crit_edge
  %231 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4796496848 to {}*) to {} addrspace(10)*), i64 32) #59, !dbg !2721
  %newstruct435 = call noalias nonnull dereferenceable(24) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task388, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724184560 to {}*) to {} addrspace(10)*)) #57, !dbg !2722
  %232 = bitcast {} addrspace(10)* %newstruct435 to {} addrspace(10)* addrspace(10)*, !dbg !2722
  %233 = addrspacecast {} addrspace(10)* addrspace(10)* %232 to {} addrspace(10)* addrspace(11)*, !dbg !2722
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %233, align 8, !dbg !2722, !tbaa !865, !alias.scope !116, !noalias !2440
  store atomic {} addrspace(10)* %231, {} addrspace(10)* addrspace(11)* %233 release, align 8, !dbg !2722, !tbaa !865, !alias.scope !116, !noalias !2440
  %234 = bitcast {} addrspace(10)* %newstruct435 to i8 addrspace(10)*, !dbg !2722
  %235 = addrspacecast i8 addrspace(10)* %234 to i8 addrspace(11)*, !dbg !2722
  %236 = getelementptr inbounds i8, i8 addrspace(11)* %235, i64 8, !dbg !2722
  %237 = bitcast {} addrspace(10)* %227 to [2 x {} addrspace(10)*] addrspace(10)*, !dbg !2725
  %238 = addrspacecast [2 x {} addrspace(10)*] addrspace(10)* %237 to [2 x {} addrspace(10)*] addrspace(11)*, !dbg !2725
  %getfield_addr438 = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(11)* %238, i64 0, i64 1, !dbg !2725
  call void @llvm.memset.p11i8.i64(i8 addrspace(11)* noundef align 8 dereferenceable(16) %236, i8 0, i64 16, i1 false) #55, !dbg !2722
  %getfield439 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %getfield_addr438 unordered, align 8, !dbg !2725, !tbaa !1298, !alias.scope !116, !noalias !270, !nonnull !67
  %box441 = call noalias nonnull dereferenceable(16) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task388, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11191270976 to {}*) to {} addrspace(10)*)) #57, !dbg !2726
  %239 = bitcast {} addrspace(10)* %box441 to [2 x {} addrspace(10)*] addrspace(10)*, !dbg !2726
  %.repack880 = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(10)* %239, i64 0, i64 0, !dbg !2726
  store {} addrspace(10)* %newstruct435, {} addrspace(10)* addrspace(10)* %.repack880, align 8, !dbg !2726, !tbaa !112, !alias.scope !116, !noalias !2440
  %.repack881 = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(10)* %239, i64 0, i64 1, !dbg !2726
  store {} addrspace(10)* %getfield439, {} addrspace(10)* addrspace(10)* %.repack881, align 8, !dbg !2726, !tbaa !112, !alias.scope !116, !noalias !2440
  %240 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11193784000 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726248928 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724564752 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box441, {} addrspace(10)* nonnull %227) #60, !dbg !2726
  br label %L791, !dbg !2727

L789:                                             ; preds = %L753.L754_crit_edge
  %241 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4730329808 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724564752 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %227) #60, !dbg !2638
  br label %L791, !dbg !2727

L791:                                             ; preds = %L789, %L782
  %value_phi442 = phi {} addrspace(10)* [ %240, %L782 ], [ %241, %L789 ]
  %242 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728516352 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %getfield11, {} addrspace(10)* nonnull %value_phi442) #60, !dbg !2638
  store i64 %arraysize, i64* %memcpy_refined_dst452, align 8, !dbg !2733, !tbaa !132, !alias.scope !134, !noalias !2419
  store i64 %205, i64* %174, align 8, !dbg !2733, !tbaa !132, !alias.scope !134, !noalias !2419
  %exitcond1057.not = icmp eq i64 %205, %203, !dbg !2738
  br i1 %exitcond1057.not, label %L811, label %L814, !dbg !2743

L811:                                             ; preds = %L791
  %243 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct450 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !2743
  call fastcc void @julia_throw_boundserror_1991({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield15, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %243) #56, !dbg !2743
  unreachable, !dbg !2743

L814:                                             ; preds = %L791
  %244 = mul i64 %392, %arraysize, !dbg !2744
  %245 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %getfield11) #55, !dbg !2754
  %246 = bitcast {} addrspace(10)* %245 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2755
  %247 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %246 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2755
  %arraylen_ptr466 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %247, i64 0, i32 1, !dbg !2755
  %arraylen467 = load i64, i64 addrspace(11)* %arraylen_ptr466, align 8, !dbg !2755, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %248 = icmp eq i64 %arraysize, %arraylen467, !dbg !2761
  %249 = icmp eq i64 %arraylen467, 1, !dbg !2763
  %value_phi469.in = or i1 %248, %249, !dbg !2763
  br i1 %value_phi469.in, label %L855, label %L840, !dbg !2764

L840:                                             ; preds = %L814
  %250 = call fastcc [1 x {} addrspace(10)*] @julia_DimensionMismatch_1978() #55, !dbg !2764
  %box708 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task388, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #57, !dbg !2764
  %251 = bitcast {} addrspace(10)* %box708 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !2764
  %252 = extractvalue [1 x {} addrspace(10)*] %250, 0, !dbg !2764
  %253 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %251, i64 0, i64 0, !dbg !2764
  store {} addrspace(10)* %252, {} addrspace(10)* addrspace(10)* %253, align 8, !dbg !2764, !tbaa !112, !alias.scope !116, !noalias !2440
  %254 = addrspacecast {} addrspace(10)* %box708 to {} addrspace(12)*, !dbg !2764
  call void @ijl_throw({} addrspace(12)* %254) #55, !dbg !2764
  unreachable, !dbg !2764

L855:                                             ; preds = %L814
  br i1 %248, label %L866, label %L885, !dbg !2765

L866:                                             ; preds = %L855
  br i1 %.not822, label %L968, label %L870, !dbg !2767

L870:                                             ; preds = %L866
  %255 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %175) #58, !dbg !2769
  %256 = bitcast {}* %255 to i8**, !dbg !2769
  %arrayptr676 = load i8*, i8** %256, align 8, !dbg !2769, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67
  %257 = addrspacecast {} addrspace(10)* %245 to {} addrspace(11)*, !dbg !2776
  %258 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %257) #58, !dbg !2776
  %259 = bitcast {}* %258 to i8**, !dbg !2776
  %arrayptr678 = load i8*, i8** %259, align 8, !dbg !2776, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %.not916.not = icmp eq i8* %arrayptr676, %arrayptr678, !dbg !2779
  br i1 %.not916.not, label %L878, label %L881, !dbg !2774

L878:                                             ; preds = %L870
  %260 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %245) #55, !dbg !2782
  br label %L881, !dbg !2784

L881:                                             ; preds = %L878, %L870
  %value_phi679 = phi {} addrspace(10)* [ %260, %L878 ], [ %245, %L870 ]
  store {} addrspace(10)* %getfield15, {} addrspace(10)** %.repack917, align 8, !dbg !2787, !noalias !2471
  store i64 %arraysize, i64* %178, align 8, !dbg !2787, !noalias !2471
  store i64 %205, i64* %.repack918.repack924, align 8, !dbg !2787, !noalias !2471
  store i64 %244, i64* %.repack920, align 8, !dbg !2787, !noalias !2471
  store i64 1, i64* %.repack922, align 8, !dbg !2787, !noalias !2471
  call fastcc void @julia_copyto_unaliased__1986({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree noundef nonnull writeonly sret({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }) align 8 dereferenceable(40) %5, [1 x {} addrspace(10)*]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) "enzymejl_returnRoots" %6, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(40) %179, {} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %value_phi679) #55, !dbg !2787
  br label %L968, !dbg !2787

L885:                                             ; preds = %L855
  %261 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %175) #58, !dbg !2788
  %262 = bitcast {}* %261 to i8**, !dbg !2788
  %arrayptr681 = load i8*, i8** %262, align 8, !dbg !2788, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67
  %263 = addrspacecast {} addrspace(10)* %245 to {} addrspace(11)*, !dbg !2799
  %264 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %263) #58, !dbg !2799
  %265 = bitcast {}* %264 to i8**, !dbg !2799
  %arrayptr683 = load i8*, i8** %265, align 8, !dbg !2799, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %.not926.not = icmp eq i8* %arrayptr681, %arrayptr683, !dbg !2802
  br i1 %.not926.not, label %L893, label %L898, !dbg !2793

L893:                                             ; preds = %L885
  %266 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %245) #55, !dbg !2805
  %.phi.trans.insert984 = bitcast {} addrspace(10)* %266 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert985 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert984 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr685.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert985, i64 0, i32 1
  %arraylen686.pre = load i64, i64 addrspace(11)* %arraylen_ptr685.phi.trans.insert, align 8, !dbg !2807, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  br label %L898, !dbg !2784

L898:                                             ; preds = %L893, %L885
  %arraylen686 = phi i64 [ %arraylen686.pre, %L893 ], [ %arraylen467, %L885 ], !dbg !2807
  %value_phi684 = phi {} addrspace(10)* [ %266, %L893 ], [ %245, %L885 ]
  %.not929 = icmp eq i64 %arraylen686, 1, !dbg !2811
  br i1 %.not822, label %L968, label %L940.lr.ph, !dbg !2815

L940.lr.ph:                                       ; preds = %L898
  %267 = bitcast {} addrspace(10)* %value_phi684 to double addrspace(13)* addrspace(10)*
  %268 = addrspacecast double addrspace(13)* addrspace(10)* %267 to double addrspace(13)* addrspace(11)*
  %arrayptr694930 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %268, align 8, !tbaa !382, !alias.scope !2502, !noalias !319, !nonnull !67
  br label %L940, !dbg !2817

L940:                                             ; preds = %L940, %L940.lr.ph
  %iv13 = phi i64 [ %iv.next14, %L940 ], [ 0, %L940.lr.ph ]
  %iv.next14 = add nuw nsw i64 %iv13, 1, !dbg !2818
  %269 = select i1 %.not929, i64 0, i64 %iv13, !dbg !2818
  %270 = getelementptr inbounds double, double addrspace(13)* %arrayptr694930, i64 %269, !dbg !2818
  %arrayref695 = load double, double addrspace(13)* %270, align 8, !dbg !2818, !tbaa !268, !alias.scope !116, !noalias !270
  %271 = add i64 %iv13, %244, !dbg !2825
  %272 = getelementptr inbounds double, double addrspace(13)* %arrayptr698931, i64 %271, !dbg !2825
  store double %arrayref695, double addrspace(13)* %272, align 8, !dbg !2825, !tbaa !268, !alias.scope !116, !noalias !2440
  %exitcond.not = icmp eq i64 %iv.next14, %arraysize, !dbg !2827
  br i1 %exitcond.not, label %L968.loopexit, label %L940, !dbg !2817, !llvm.loop !2828

L968.loopexit:                                    ; preds = %L940
  br label %L968, !dbg !2829

L968:                                             ; preds = %L968.loopexit, %L898, %L881, %L866
  %273 = fadd double %39, %value_phi372, !dbg !2829
  %arraylen478 = load i64, i64 addrspace(11)* %arraylen_ptr477, align 8, !dbg !2831, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not891 = icmp eq i64 %arraylen478, 0, !dbg !2835
  br i1 %.not891, label %pass612.2, label %L985, !dbg !2832

L985:                                             ; preds = %L968
  %arrayptr480892 = load i64 addrspace(13)*, i64 addrspace(13)* addrspace(11)* %183, align 16, !dbg !2837, !tbaa !382, !alias.scope !2502, !noalias !319, !nonnull !67
  %value_phi4851035 = load i64, i64 addrspace(13)* %arrayptr480892, align 8, !dbg !2838, !tbaa !268, !alias.scope !116, !noalias !270
  %.not8931036 = icmp eq i64 %value_phi4851035, %205, !dbg !2839
  br i1 %.not8931036, label %L1013.critedge, label %L992.lr.ph, !dbg !2841

L992.lr.ph:                                       ; preds = %L985
  %274 = add nuw nsw i64 %arraylen478, 1, !dbg !2841
  br label %L992, !dbg !2841

L992:                                             ; preds = %L1004, %L992.lr.ph
  %iv15 = phi i64 [ %iv.next16, %L1004 ], [ 0, %L992.lr.ph ]
  %275 = add i64 %iv15, 2, !dbg !2842
  %iv.next16 = add nuw nsw i64 %iv15, 1, !dbg !2842
  %exitcond1055.not = icmp eq i64 %275, %274, !dbg !2842
  br i1 %exitcond1055.not, label %pass612.2.loopexit, label %L1004, !dbg !2784

L1004:                                            ; preds = %L992
  %276 = add nsw i64 %275, -1, !dbg !2844
  %277 = getelementptr inbounds i64, i64 addrspace(13)* %arrayptr480892, i64 %276, !dbg !2846
  %278 = add nuw i64 %275, 1, !dbg !2847
  %value_phi485 = load i64, i64 addrspace(13)* %277, align 8, !dbg !2838, !tbaa !268, !alias.scope !116, !noalias !270
  %.not893 = icmp eq i64 %value_phi485, %205, !dbg !2839
  br i1 %.not893, label %L1013.critedge.loopexit, label %L992, !dbg !2841

L1013.critedge.loopexit:                          ; preds = %L1004
  br label %L1013.critedge, !dbg !2848

L1013.critedge:                                   ; preds = %L1013.critedge.loopexit, %L985
  %279 = load double, double addrspace(11)* %186, align 8, !dbg !2848, !tbaa !865, !alias.scope !116, !noalias !270
  %280 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize498) #59, !dbg !2850
  %281 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1996({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %280, i32 noundef zeroext 1308622848, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield5, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield11) #55, !dbg !2855
  store i64 %arraysize500, i64* %memcpy_refined_dst508, align 8, !dbg !2858, !tbaa !132, !alias.scope !134, !noalias !2419
  store i64 %205, i64* %193, align 8, !dbg !2858, !tbaa !132, !alias.scope !134, !noalias !2419
  %.not894 = icmp ult i64 %392, %arraysize510, !dbg !2861
  br i1 %.not894, label %L1061, label %L1058, !dbg !2866

L1058:                                            ; preds = %L1013.critedge
  %282 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct506 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !2866
  call fastcc void @julia_throw_boundserror_1991({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield17, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %282) #56, !dbg !2866
  unreachable, !dbg !2866

L1061:                                            ; preds = %L1013.critedge
  store i64 %arraysize500, i64* %memcpy_refined_dst514, align 8, !dbg !2867, !tbaa !132, !alias.scope !134, !noalias !2419
  %283 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize500) #59, !dbg !2871
  %284 = bitcast {} addrspace(10)* %283 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2876
  %285 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %284 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2876
  %arraylen_ptr515 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %285, i64 0, i32 1, !dbg !2876
  %arraylen516 = load i64, i64 addrspace(11)* %arraylen_ptr515, align 8, !dbg !2876, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not895 = icmp eq i64 %arraylen516, %arraysize500, !dbg !2879
  br i1 %.not895, label %L1074, label %L1127, !dbg !2878

L1074:                                            ; preds = %L1061
  br i1 %.not896, label %L1131.L1132_crit_edge, label %L1095.preheader, !dbg !2882

L1095.preheader:                                  ; preds = %L1074
  %286 = mul i64 %392, %arraysize500, !dbg !2885
  %287 = add i64 %286, -1, !dbg !2885
  %arrayptr655911 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %196, align 16
  %288 = bitcast {} addrspace(10)* %283 to double addrspace(13)* addrspace(10)*
  %289 = addrspacecast double addrspace(13)* addrspace(10)* %288 to double addrspace(13)* addrspace(11)*
  br label %L1095, !dbg !2888

L1095:                                            ; preds = %L1102, %L1095.preheader
  %iv17 = phi i64 [ %iv.next18, %L1102 ], [ 0, %L1095.preheader ]
  %value_phi528.off0 = phi i1 [ %294, %L1102 ], [ false, %L1095.preheader ]
  %value_phi529 = phi i64 [ %value_phi661, %L1102 ], [ 1, %L1095.preheader ]
  %iv.next18 = add nuw nsw i64 %iv17, 1, !dbg !2888
  br i1 %value_phi528.off0, label %L1131.L1132_crit_edge.loopexit, label %L1102, !dbg !2888

L1102:                                            ; preds = %L1095
  %290 = add i64 %287, %iv.next18, !dbg !2885
  %291 = getelementptr inbounds double, double addrspace(13)* %arrayptr655911, i64 %290, !dbg !2885
  %arrayref656 = load double, double addrspace(13)* %291, align 8, !dbg !2885, !tbaa !268, !alias.scope !116, !noalias !270
  %292 = add i64 %value_phi529, -1, !dbg !2889
  %arrayptr658912 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %289, align 8, !dbg !2889, !tbaa !382, !alias.scope !2502, !noalias !319, !nonnull !67
  %293 = getelementptr inbounds double, double addrspace(13)* %arrayptr658912, i64 %292, !dbg !2889
  store double %arrayref656, double addrspace(13)* %293, align 8, !dbg !2889, !tbaa !268, !alias.scope !116, !noalias !2440
  %294 = icmp eq i64 %value_phi529, %arraysize500, !dbg !2890
  %295 = add i64 %value_phi529, 1, !dbg !2891
  %value_phi661 = select i1 %294, i64 undef, i64 %295, !dbg !2891
  %.not913 = icmp eq i64 %iv.next18, %arraysize500, !dbg !2893
  %296 = add i64 %iv.next18, 1, !dbg !2894
  br i1 %.not913, label %L1131.L1132_crit_edge.loopexit, label %L1095, !dbg !2896

L1127:                                            ; preds = %L1061
  %297 = addrspacecast [1 x [1 x i64]]* %newstruct512 to [1 x [1 x i64]] addrspace(11)*, !dbg !2878
  call fastcc void @julia_throw_checksize_error_1989({} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %283, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %297) #56, !dbg !2878
  unreachable, !dbg !2878

L1131.L1132_crit_edge.loopexit:                   ; preds = %L1095, %L1102
  br label %L1131.L1132_crit_edge, !dbg !2850

L1131.L1132_crit_edge:                            ; preds = %L1131.L1132_crit_edge.loopexit, %L1074
  %298 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize498) #59, !dbg !2850
  %299 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1996({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %298, i32 noundef zeroext 1308622848, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield5, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %283) #55, !dbg !2855
  %300 = call fastcc nonnull {} addrspace(10)* @julia___2046({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %281, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %299) #55, !dbg !2849
  %301 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize498) #59, !dbg !2850
  %302 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1996({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %301, i32 noundef zeroext 1308622848, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield5, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield11) #55, !dbg !2855
  store i64 %arraysize500, i64* %memcpy_refined_dst570, align 8, !dbg !2867, !tbaa !132, !alias.scope !134, !noalias !2419
  %303 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize500) #59, !dbg !2871
  %304 = bitcast {} addrspace(10)* %303 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2876
  %305 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %304 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2876
  %arraylen_ptr571 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %305, i64 0, i32 1, !dbg !2876
  %arraylen572 = load i64, i64 addrspace(11)* %arraylen_ptr571, align 8, !dbg !2876, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not900 = icmp eq i64 %arraylen572, %arraysize500, !dbg !2879
  br i1 %.not900, label %L1219, label %L1272, !dbg !2878

L1219:                                            ; preds = %L1131.L1132_crit_edge
  br i1 %.not896, label %L1276.L1277_crit_edge, label %L1240.preheader, !dbg !2882

L1240.preheader:                                  ; preds = %L1219
  %306 = mul i64 %392, %arraysize500, !dbg !2885
  %307 = add i64 %306, -1, !dbg !2885
  %arrayptr639908 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %196, align 16
  %308 = bitcast {} addrspace(10)* %303 to double addrspace(13)* addrspace(10)*
  %309 = addrspacecast double addrspace(13)* addrspace(10)* %308 to double addrspace(13)* addrspace(11)*
  br label %L1240, !dbg !2888

L1240:                                            ; preds = %L1247, %L1240.preheader
  %iv19 = phi i64 [ %iv.next20, %L1247 ], [ 0, %L1240.preheader ]
  %value_phi584.off0 = phi i1 [ %314, %L1247 ], [ false, %L1240.preheader ]
  %value_phi585 = phi i64 [ %value_phi645, %L1247 ], [ 1, %L1240.preheader ]
  %iv.next20 = add nuw nsw i64 %iv19, 1, !dbg !2888
  br i1 %value_phi584.off0, label %L1276.L1277_crit_edge.loopexit, label %L1247, !dbg !2888

L1247:                                            ; preds = %L1240
  %310 = add i64 %307, %iv.next20, !dbg !2885
  %311 = getelementptr inbounds double, double addrspace(13)* %arrayptr639908, i64 %310, !dbg !2885
  %arrayref640 = load double, double addrspace(13)* %311, align 8, !dbg !2885, !tbaa !268, !alias.scope !116, !noalias !270
  %312 = add i64 %value_phi585, -1, !dbg !2889
  %arrayptr642909 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %309, align 8, !dbg !2889, !tbaa !382, !alias.scope !2502, !noalias !319, !nonnull !67
  %313 = getelementptr inbounds double, double addrspace(13)* %arrayptr642909, i64 %312, !dbg !2889
  store double %arrayref640, double addrspace(13)* %313, align 8, !dbg !2889, !tbaa !268, !alias.scope !116, !noalias !2440
  %314 = icmp eq i64 %value_phi585, %arraysize500, !dbg !2890
  %315 = add i64 %value_phi585, 1, !dbg !2891
  %value_phi645 = select i1 %314, i64 undef, i64 %315, !dbg !2891
  %.not910 = icmp eq i64 %iv.next20, %arraysize500, !dbg !2893
  %316 = add i64 %iv.next20, 1, !dbg !2894
  br i1 %.not910, label %L1276.L1277_crit_edge.loopexit, label %L1240, !dbg !2896

L1272:                                            ; preds = %L1131.L1132_crit_edge
  %317 = addrspacecast [1 x [1 x i64]]* %newstruct568 to [1 x [1 x i64]] addrspace(11)*, !dbg !2878
  call fastcc void @julia_throw_checksize_error_1989({} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %303, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %317) #56, !dbg !2878
  unreachable, !dbg !2878

L1276.L1277_crit_edge.loopexit:                   ; preds = %L1240, %L1247
  br label %L1276.L1277_crit_edge, !dbg !2850

L1276.L1277_crit_edge:                            ; preds = %L1276.L1277_crit_edge.loopexit, %L1219
  %318 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize498) #59, !dbg !2850
  %319 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1996({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %318, i32 noundef zeroext 1308622848, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield5, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %303) #55, !dbg !2855
  %320 = call fastcc nonnull {} addrspace(10)* @julia___2046({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %302, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %319) #55, !dbg !2849
  store {} addrspace(10)* %300, {} addrspace(10)** %197, align 8, !dbg !2849, !noalias !2471
  %321 = call fastcc double @julia___1993([1 x {} addrspace(10)*] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %198, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield7, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %320) #55, !dbg !2849
  %322 = fadd double %279, %321, !dbg !2897
  store double %322, double addrspace(11)* %186, align 8, !dbg !2898, !tbaa !865, !alias.scope !116, !noalias !2440
  br label %pass612.2, !dbg !2898

L1349:                                            ; preds = %pass612.2
  %323 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct625 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !2899
  call fastcc void @julia_throw_boundserror_1991({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield19, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %323) #56, !dbg !2899
  unreachable, !dbg !2899

L1352:                                            ; preds = %pass612.2
  call fastcc void @julia__unsafe_setindex__2077({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield19, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %397, [1 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %201, i64 signext %205) #55, !dbg !2903
  %.not907 = icmp eq i64 %205, %158, !dbg !2904
  %324 = add nuw i64 %205, 1, !dbg !2905
  br i1 %.not907, label %L1366.loopexit, label %L616, !dbg !2906

L1366.loopexit:                                   ; preds = %L1352
  br label %L1366, !dbg !2907

L1366:                                            ; preds = %L1366.loopexit, %L598
  ret void, !dbg !2907

pass.2.loopexit:                                  ; preds = %L243, %L250
  br label %pass.2, !dbg !2469

pass.2:                                           ; preds = %pass.2.loopexit, %L222
  call fastcc void @julia_compute_energy_2128([3 x double]* noalias nocapture nofree noundef nonnull writeonly sret([3 x double]) align 8 dereferenceable(24) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %91, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield9) #55, !dbg !2469
  %memcpy_refined_src84 = getelementptr inbounds [3 x double], [3 x double]* %1, i64 0, i64 0, !dbg !2908
  %memcpy_refined_src86 = getelementptr inbounds [3 x double], [3 x double]* %1, i64 0, i64 1, !dbg !2909
  %memcpy_refined_src88 = getelementptr inbounds [3 x double], [3 x double]* %1, i64 0, i64 2, !dbg !2909
  %325 = load double, double* %memcpy_refined_src84, align 8, !dbg !2910, !tbaa !132, !alias.scope !134, !noalias !641
  %326 = load double, double* %memcpy_refined_src86, align 8, !dbg !2910, !tbaa !132, !alias.scope !134, !noalias !641
  %327 = load double, double* %memcpy_refined_src88, align 8, !dbg !2910, !tbaa !132, !alias.scope !134, !noalias !641
  %328 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #59, !dbg !2911
  %329 = bitcast {} addrspace(10)* %328 to double addrspace(13)* addrspace(10)*
  %330 = addrspacecast double addrspace(13)* addrspace(10)* %329 to double addrspace(13)* addrspace(11)*
  %arrayptr825 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %330, align 8, !tbaa !382, !alias.scope !2502, !noalias !319, !nonnull !67
  store double %325, double addrspace(13)* %arrayptr825, align 8, !dbg !2917, !tbaa !268, !alias.scope !116, !noalias !2440
  %memcpy_refined_dst94.1 = getelementptr inbounds double, double addrspace(13)* %arrayptr825, i64 1, !dbg !2917
  store double %326, double addrspace(13)* %memcpy_refined_dst94.1, align 8, !dbg !2917, !tbaa !268, !alias.scope !116, !noalias !2440
  %memcpy_refined_dst94.2 = getelementptr inbounds double, double addrspace(13)* %arrayptr825, i64 2, !dbg !2917
  store double %327, double addrspace(13)* %memcpy_refined_dst94.2, align 8, !dbg !2917, !tbaa !268, !alias.scope !116, !noalias !2440
  %331 = bitcast {} addrspace(10)* %getfield19 to {} addrspace(10)* addrspace(10)*, !dbg !2918
  %332 = addrspacecast {} addrspace(10)* addrspace(10)* %331 to {} addrspace(10)* addrspace(11)*, !dbg !2918
  %arraysize_ptr98 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %332, i64 3, !dbg !2918
  %333 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr98 to i64 addrspace(11)*, !dbg !2918
  %arraysize99 = load i64, i64 addrspace(11)* %333, align 8, !dbg !2918, !tbaa !85, !range !86, !alias.scope !87, !noalias !91
  %334 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct102, i64 0, i64 0, i64 0, !dbg !2921
  store i64 %arraysize99, i64* %334, align 8, !dbg !2921, !tbaa !132, !alias.scope !134, !noalias !2419
  %memcpy_refined_dst105 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct103, i64 0, i32 0, i64 0, i64 0, !dbg !2925
  store i64 %arraysize99, i64* %memcpy_refined_dst105, align 8, !dbg !2925, !tbaa !132, !alias.scope !134, !noalias !2419
  %memcpy_refined_dst106 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct103, i64 0, i32 1, !dbg !2925
  store i64 1, i64* %memcpy_refined_dst106, align 8, !dbg !2925, !tbaa !132, !alias.scope !134, !noalias !2419
  %arraysize_ptr107 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %332, i64 4, !dbg !2926
  %335 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr107 to i64 addrspace(11)*, !dbg !2926
  %arraysize108 = load i64, i64 addrspace(11)* %335, align 16, !dbg !2926, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %.not827 = icmp eq i64 %arraysize108, 0, !dbg !2929
  br i1 %.not827, label %L322, label %L325, !dbg !2545

ib:                                               ; preds = %L359
  %arraysize_ptr126 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %115, i64 4, !dbg !2567
  %336 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr126 to i64 addrspace(11)*, !dbg !2567
  %arraysize127 = load i64, i64 addrspace(11)* %336, align 8, !dbg !2567, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %inbounds128 = icmp ugt i64 %arraysize127, 3, !dbg !2567
  br i1 %inbounds128, label %idxend, label %oob, !dbg !2567

oob:                                              ; preds = %ib, %L359
  %errorbox831 = alloca [2 x i64], align 8, !dbg !2567
  %errorbox831.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox831, i64 0, i64 0
  store i64 1, i64* %errorbox831.sub, align 8, !dbg !2567, !noalias !2471
  %337 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox831, i64 0, i64 1, !dbg !2567
  store i64 4, i64* %337, align 8, !dbg !2567, !noalias !2471
  %338 = addrspacecast {} addrspace(10)* %108 to {} addrspace(12)*, !dbg !2567
  call void @ijl_bounds_error_ints({} addrspace(12)* %338, i64* nonnull align 8 %errorbox831.sub, i64 2) #55, !dbg !2567
  unreachable, !dbg !2567

idxend:                                           ; preds = %ib
  %339 = mul i64 %arraysize125, 3, !dbg !2567
  %340 = bitcast {} addrspace(10)* %108 to double addrspace(13)* addrspace(10)*, !dbg !2567
  %341 = addrspacecast double addrspace(13)* addrspace(10)* %340 to double addrspace(13)* addrspace(11)*, !dbg !2567
  %arrayptr130832 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %341, align 8, !dbg !2567, !tbaa !72, !invariant.load !67, !alias.scope !2503, !noalias !96, !nonnull !67
  %342 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %339, !dbg !2567
  store double 1.000000e+00, double addrspace(13)* %342, align 8, !dbg !2567, !tbaa !268, !alias.scope !116, !noalias !2440
  %inbounds133 = icmp ugt i64 %arraysize125, 1, !dbg !2933
  %inbounds138 = icmp ne i64 %arraysize127, 4, !dbg !2933
  %or.cond = select i1 %inbounds133, i1 %inbounds138, i1 false, !dbg !2933
  br i1 %or.cond, label %idxend141, label %oob139, !dbg !2933

oob139:                                           ; preds = %idxend
  %errorbox140833 = alloca [2 x i64], align 8, !dbg !2933
  %errorbox140833.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox140833, i64 0, i64 0
  store i64 2, i64* %errorbox140833.sub, align 8, !dbg !2933, !noalias !2471
  %343 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox140833, i64 0, i64 1, !dbg !2933
  store i64 5, i64* %343, align 8, !dbg !2933, !noalias !2471
  %344 = addrspacecast {} addrspace(10)* %108 to {} addrspace(12)*, !dbg !2933
  call void @ijl_bounds_error_ints({} addrspace(12)* %344, i64* nonnull align 8 %errorbox140833.sub, i64 2) #55, !dbg !2933
  unreachable, !dbg !2933

idxend141:                                        ; preds = %idxend
  %345 = shl i64 %arraysize125, 2, !dbg !2933
  %346 = or i64 %345, 1, !dbg !2933
  %347 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %346, !dbg !2933
  store double 1.000000e+00, double addrspace(13)* %347, align 8, !dbg !2933, !tbaa !268, !alias.scope !116, !noalias !2440
  %inbounds146 = icmp ugt i64 %arraysize125, 2, !dbg !2935
  %inbounds151 = icmp ugt i64 %arraysize127, 5, !dbg !2935
  %or.cond1002 = select i1 %inbounds146, i1 %inbounds151, i1 false, !dbg !2935
  br i1 %or.cond1002, label %idxend154, label %oob152, !dbg !2935

oob152:                                           ; preds = %idxend141
  %errorbox153835 = alloca [2 x i64], align 8, !dbg !2935
  %errorbox153835.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox153835, i64 0, i64 0
  store i64 3, i64* %errorbox153835.sub, align 8, !dbg !2935, !noalias !2471
  %348 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox153835, i64 0, i64 1, !dbg !2935
  store i64 6, i64* %348, align 8, !dbg !2935, !noalias !2471
  %349 = addrspacecast {} addrspace(10)* %108 to {} addrspace(12)*, !dbg !2935
  call void @ijl_bounds_error_ints({} addrspace(12)* %349, i64* nonnull align 8 %errorbox153835.sub, i64 2) #55, !dbg !2935
  unreachable, !dbg !2935

idxend154:                                        ; preds = %idxend141
  %350 = mul i64 %arraysize125, 5, !dbg !2935
  %351 = add i64 %350, 2, !dbg !2935
  %352 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %351, !dbg !2935
  store double 1.000000e+00, double addrspace(13)* %352, align 8, !dbg !2935, !tbaa !268, !alias.scope !116, !noalias !2440
  %353 = fmul double %54, -2.000000e+00, !dbg !2937
  %inbounds159 = icmp ugt i64 %arraysize125, 3, !dbg !2940
  br i1 %inbounds159, label %idxend180, label %oob165, !dbg !2940

oob165:                                           ; preds = %idxend154
  %errorbox166837 = alloca [2 x i64], align 8, !dbg !2940
  %errorbox166837.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox166837, i64 0, i64 0
  store i64 4, i64* %errorbox166837.sub, align 8, !dbg !2940, !noalias !2471
  %354 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox166837, i64 0, i64 1, !dbg !2940
  store i64 1, i64* %354, align 8, !dbg !2940, !noalias !2471
  %355 = addrspacecast {} addrspace(10)* %108 to {} addrspace(12)*, !dbg !2940
  call void @ijl_bounds_error_ints({} addrspace(12)* %355, i64* nonnull align 8 %errorbox166837.sub, i64 2) #55, !dbg !2940
  unreachable, !dbg !2940

idxend180:                                        ; preds = %idxend154
  %356 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 3, !dbg !2940
  store double %353, double addrspace(13)* %356, align 8, !dbg !2940, !tbaa !268, !alias.scope !116, !noalias !2440
  %357 = add nuw i64 %arraysize125, 3, !dbg !2941
  %358 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %357, !dbg !2941
  store double %54, double addrspace(13)* %358, align 8, !dbg !2941, !tbaa !268, !alias.scope !116, !noalias !2440
  %359 = fneg double %28, !dbg !2943
  %360 = add i64 %339, 3, !dbg !2945
  %361 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %360, !dbg !2945
  store double %359, double addrspace(13)* %361, align 8, !dbg !2945, !tbaa !268, !alias.scope !116, !noalias !2440
  %inbounds198.not = icmp eq i64 %arraysize125, 4, !dbg !2946
  br i1 %inbounds198.not, label %oob204, label %idxend232, !dbg !2946

oob204:                                           ; preds = %idxend180
  %errorbox205843 = alloca [2 x i64], align 8, !dbg !2946
  %errorbox205843.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox205843, i64 0, i64 0
  store i64 5, i64* %errorbox205843.sub, align 8, !dbg !2946, !noalias !2471
  %362 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox205843, i64 0, i64 1, !dbg !2946
  store i64 1, i64* %362, align 8, !dbg !2946, !noalias !2471
  %363 = addrspacecast {} addrspace(10)* %108 to {} addrspace(12)*, !dbg !2946
  call void @ijl_bounds_error_ints({} addrspace(12)* %363, i64* nonnull align 8 %errorbox205843.sub, i64 2) #55, !dbg !2946
  unreachable, !dbg !2946

idxend232:                                        ; preds = %idxend180
  %364 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 4, !dbg !2946
  store double %54, double addrspace(13)* %364, align 8, !dbg !2946, !tbaa !268, !alias.scope !116, !noalias !2440
  %365 = fmul double %54, -3.000000e+00, !dbg !2948
  %366 = add nuw i64 %arraysize125, 4, !dbg !2951
  %367 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %366, !dbg !2951
  store double %365, double addrspace(13)* %367, align 8, !dbg !2951, !tbaa !268, !alias.scope !116, !noalias !2440
  %368 = shl nuw i64 %arraysize125, 1, !dbg !2952
  %369 = add i64 %368, 4, !dbg !2952
  %370 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %369, !dbg !2952
  store double %54, double addrspace(13)* %370, align 8, !dbg !2952, !tbaa !268, !alias.scope !116, !noalias !2440
  %371 = add i64 %345, 4, !dbg !2954
  %372 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %371, !dbg !2954
  store double %359, double addrspace(13)* %372, align 8, !dbg !2954, !tbaa !268, !alias.scope !116, !noalias !2440
  %inbounds250 = icmp ugt i64 %arraysize125, 5, !dbg !2956
  br i1 %inbounds250, label %idxend258, label %oob256, !dbg !2956

oob256:                                           ; preds = %idxend232
  %errorbox257851 = alloca [2 x i64], align 8, !dbg !2956
  %errorbox257851.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox257851, i64 0, i64 0
  store i64 6, i64* %errorbox257851.sub, align 8, !dbg !2956, !noalias !2471
  %373 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox257851, i64 0, i64 1, !dbg !2956
  store i64 2, i64* %373, align 8, !dbg !2956, !noalias !2471
  %374 = addrspacecast {} addrspace(10)* %108 to {} addrspace(12)*, !dbg !2956
  call void @ijl_bounds_error_ints({} addrspace(12)* %374, i64* nonnull align 8 %errorbox257851.sub, i64 2) #55, !dbg !2956
  unreachable, !dbg !2956

idxend258:                                        ; preds = %idxend232
  %375 = add nuw i64 %arraysize125, 5, !dbg !2956
  %376 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %375, !dbg !2956
  store double %54, double addrspace(13)* %376, align 8, !dbg !2956, !tbaa !268, !alias.scope !116, !noalias !2440
  %377 = add i64 %368, 5, !dbg !2958
  %378 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %377, !dbg !2958
  store double %353, double addrspace(13)* %378, align 8, !dbg !2958, !tbaa !268, !alias.scope !116, !noalias !2440
  %379 = add i64 %350, 5, !dbg !2960
  %380 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %379, !dbg !2960
  store double %359, double addrspace(13)* %380, align 8, !dbg !2960, !tbaa !268, !alias.scope !116, !noalias !2440
  %381 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 6) #59, !dbg !2962
  %382 = bitcast {} addrspace(10)* %381 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2965
  %383 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %382 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2965
  %arraylen_ptr287 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %383, i64 0, i32 1, !dbg !2965
  %arraylen288 = load i64, i64 addrspace(11)* %arraylen_ptr287, align 8, !dbg !2965, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not857 = icmp eq i64 %arraylen288, 0, !dbg !2970
  br i1 %.not857, label %L412, label %idxend284.L394_crit_edge, !dbg !2969

idxend284.L394_crit_edge:                         ; preds = %idxend258
  %.phi.trans.insert973 = bitcast {} addrspace(10)* %381 to double addrspace(13)* addrspace(10)*
  %.phi.trans.insert974 = addrspacecast double addrspace(13)* addrspace(10)* %.phi.trans.insert973 to double addrspace(13)* addrspace(11)*
  %arrayptr296858.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert974, align 8, !dbg !2569, !tbaa !382, !alias.scope !2502, !noalias !319
  br label %L394, !dbg !2969

pass387:                                          ; preds = %L616
  %384 = fmul double %value_phi372, 0x401921FB54442D18, !dbg !2974
  %385 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4730270640 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11240416960 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %208) #60, !dbg !2693
  %box = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task388, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4796493856 to {}*) to {} addrspace(10)*)) #57, !dbg !2693
  %386 = bitcast {} addrspace(10)* %box to double addrspace(10)*, !dbg !2693
  store double %384, double addrspace(10)* %386, align 8, !dbg !2693, !tbaa !112, !alias.scope !116, !noalias !2440
  %387 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4730270640 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* nonnull %385) #60, !dbg !2693
  %388 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4760305232 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %387) #60, !dbg !2693
  %389 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728400336 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4784535424 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %388) #60, !dbg !2693
  %390 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4729228528 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %389, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*)) #60, !dbg !2638
  %391 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728400336 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %getfield, {} addrspace(10)* nonnull %390) #60, !dbg !2638
  %392 = add nsw i64 %205, -1, !dbg !2976
  store i64 %arraysize390, i64* %memcpy_refined_dst398, align 8, !dbg !2977, !tbaa !132, !alias.scope !134, !noalias !2419
  store i64 %392, i64* %167, align 8, !dbg !2977, !tbaa !132, !alias.scope !134, !noalias !2419
  %393 = add nsw i64 %205, -2, !dbg !2978
  %exitcond1056.not = icmp eq i64 %205, %202, !dbg !2983
  br i1 %exitcond1056.not, label %L680, label %L683, !dbg !2695

pass612.2.loopexit:                               ; preds = %L992
  br label %pass612.2, !dbg !2984

pass612.2:                                        ; preds = %pass612.2.loopexit, %L1276.L1277_crit_edge, %L968
  call fastcc void @julia_compute_energy_2128([3 x double]* noalias nocapture nofree noundef nonnull writeonly sret([3 x double]) align 8 dereferenceable(24) %4, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield11, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield9) #55, !dbg !2984
  %394 = load double, double* %memcpy_refined_src601, align 8, !dbg !2985, !tbaa !132, !alias.scope !134, !noalias !641
  %395 = load double, double* %memcpy_refined_src603, align 8, !dbg !2985, !tbaa !132, !alias.scope !134, !noalias !641
  %396 = load double, double* %memcpy_refined_src605, align 8, !dbg !2985, !tbaa !132, !alias.scope !134, !noalias !641
  %397 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 3) #59, !dbg !2986
  %398 = bitcast {} addrspace(10)* %397 to double addrspace(13)* addrspace(10)*
  %399 = addrspacecast double addrspace(13)* addrspace(10)* %398 to double addrspace(13)* addrspace(11)*
  %arrayptr614904 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %399, align 8, !tbaa !382, !alias.scope !2502, !noalias !319, !nonnull !67
  store double %394, double addrspace(13)* %arrayptr614904, align 8, !dbg !2992, !tbaa !268, !alias.scope !116, !noalias !2440
  %memcpy_refined_dst616.1 = getelementptr inbounds double, double addrspace(13)* %arrayptr614904, i64 1, !dbg !2992
  store double %395, double addrspace(13)* %memcpy_refined_dst616.1, align 8, !dbg !2992, !tbaa !268, !alias.scope !116, !noalias !2440
  %memcpy_refined_dst616.2 = getelementptr inbounds double, double addrspace(13)* %arrayptr614904, i64 2, !dbg !2992
  store double %396, double addrspace(13)* %memcpy_refined_dst616.2, align 8, !dbg !2992, !tbaa !268, !alias.scope !116, !noalias !2440
  store i64 %arraysize99, i64* %199, align 8, !dbg !2993, !tbaa !132, !alias.scope !134, !noalias !2419
  store i64 %arraysize99, i64* %memcpy_refined_dst627, align 8, !dbg !2999, !tbaa !132, !alias.scope !134, !noalias !2419
  store i64 %205, i64* %200, align 8, !dbg !2999, !tbaa !132, !alias.scope !134, !noalias !2419
  %exitcond1059.not = icmp eq i64 %205, %204, !dbg !3000
  br i1 %exitcond1059.not, label %L1349, label %L1352, !dbg !2899

err:                                              ; preds = %L616
  call void @ijl_undefined_var_error({} addrspace(12)* addrspacecast ({}* inttoptr (i64 4337190312 to {}*) to {} addrspace(12)*)) #55, !dbg !2693
  unreachable, !dbg !2693
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia_copyto_unaliased__1986({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree noundef nonnull writeonly sret({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }) align 8 dereferenceable(40) %0, [1 x {} addrspace(10)*]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) "enzyme_inactive" "enzymejl_returnRoots" %1, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(40) %2, {} addrspace(10)* nocapture noundef nonnull readonly align 16 dereferenceable(40) %3) unnamed_addr #56 !dbg !3666 {
top:
  %4 = call {}*** @julia.get_pgcstack() #57
  %ptls_field29 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field29 to i64***
  %ptls_load3031 = load i64**, i64*** %5, align 8, !tbaa !68
  %6 = getelementptr inbounds i64*, i64** %ptls_load3031, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !72, !invariant.load !67
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #57, !dbg !3667
  fence syncscope("singlethread") seq_cst
  %7 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3668
  %8 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %7 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3668
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %8, i64 0, i32 1, !dbg !3668
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !3668, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not = icmp eq i64 %arraylen, 0, !dbg !3671
  br i1 %.not, label %L4, label %L5, !dbg !3670

common.ret:                                       ; preds = %L82, %L4
  ret void, !dbg !3672

L4:                                               ; preds = %top
  %9 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 0, !dbg !3670
  %10 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %9, align 8, !dbg !3670
  %11 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %1, i64 0, i64 0, !dbg !3670
  store {} addrspace(10)* %10, {} addrspace(10)** %11, align 8, !dbg !3670, !noalias !3673
  %12 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %0 to i8*, !dbg !3670
  %13 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !3670
  call void @llvm.memcpy.p0i8.p11i8.i64(i8* nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) %12, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %13, i64 noundef 40, i1 noundef false) #57, !dbg !3670, !noalias !3673
  br label %common.ret

L5:                                               ; preds = %top
  %14 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 1, i32 0, i64 0, i64 0, !dbg !3676
  %unbox = load i64, i64 addrspace(11)* %14, align 8, !dbg !3686, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96
  %15 = icmp slt i64 %unbox, 1, !dbg !3691
  %16 = call i64 @llvm.smax.i64(i64 %unbox, i64 noundef 0) #57, !dbg !3693
  %17 = add nsw i64 %arraylen, -1, !dbg !3694
  %18 = icmp uge i64 %17, %16, !dbg !3691
  %19 = or i1 %15, %18, !dbg !3685
  br i1 %19, label %L85, label %L31.L44_crit_edge, !dbg !3685

L31.L44_crit_edge:                                ; preds = %L5
  %.phi.trans.insert = bitcast {} addrspace(10)* %3 to double addrspace(13)* addrspace(10)*
  %.phi.trans.insert42 = addrspacecast double addrspace(13)* addrspace(10)* %.phi.trans.insert to double addrspace(13)* addrspace(11)*
  %arrayptr33.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert42, align 16, !dbg !3695, !tbaa !382, !alias.scope !3697, !noalias !319
  %.phi.trans.insert43 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to double addrspace(13)* addrspace(10)* addrspace(11)*
  %getfield3436.pre = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %.phi.trans.insert43 unordered, align 8, !dbg !3698, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96
  %.phi.trans.insert44 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 2
  %unbox17.pre = load i64, i64 addrspace(11)* %.phi.trans.insert44, align 8, !dbg !3700, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96
  %.phi.trans.insert45 = addrspacecast double addrspace(13)* addrspace(10)* %getfield3436.pre to double addrspace(13)* addrspace(11)*
  %arrayptr1935.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert45, align 8, !dbg !3701, !tbaa !72, !invariant.load !67, !alias.scope !3702, !noalias !96
  br label %L44, !dbg !3703

L44:                                              ; preds = %L44, %L31.L44_crit_edge
  %iv = phi i64 [ %iv.next, %L44 ], [ 0, %L31.L44_crit_edge ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !3695
  %20 = add nsw i64 %iv.next, -1, !dbg !3695
  %21 = getelementptr inbounds double, double addrspace(13)* %arrayptr33.pre, i64 %20, !dbg !3695
  %arrayref = load double, double addrspace(13)* %21, align 8, !dbg !3695, !tbaa !268, !alias.scope !116, !noalias !270
  %22 = add i64 %20, %unbox17.pre, !dbg !3701
  %23 = getelementptr inbounds double, double addrspace(13)* %arrayptr1935.pre, i64 %22, !dbg !3701
  store double %arrayref, double addrspace(13)* %23, align 8, !dbg !3701, !tbaa !268, !alias.scope !116, !noalias !3704
  %.not37 = icmp eq i64 %iv.next, %arraylen, !dbg !3705
  %24 = add nuw nsw i64 %iv.next, 1, !dbg !3706
  br i1 %.not37, label %L82, label %L44, !dbg !3708

L82:                                              ; preds = %L44
  %25 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 0, !dbg !3709
  %26 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, align 8, !dbg !3709
  %27 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %1, i64 0, i64 0, !dbg !3709
  store {} addrspace(10)* %26, {} addrspace(10)** %27, align 8, !dbg !3709, !noalias !3673
  %28 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %0 to i8*, !dbg !3709
  %29 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !3709
  call void @llvm.memcpy.p0i8.p11i8.i64(i8* nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) %28, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %29, i64 noundef 40, i1 noundef false) #57, !dbg !3709, !noalias !3673
  br label %common.ret

L85:                                              ; preds = %L5
  %current_task2438 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !3685
  %current_task24 = bitcast {}*** %current_task2438 to {}**, !dbg !3685
  %box = call noalias nonnull dereferenceable(40) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 noundef 40, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5301231888 to {}*) to {} addrspace(10)*)) #58, !dbg !3685
  %30 = bitcast {} addrspace(10)* %box to i8 addrspace(10)*, !dbg !3685
  %31 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !3685
  call void @llvm.memcpy.p10i8.p11i8.i64(i8 addrspace(10)* nocapture nofree noundef nonnull align 8 dereferenceable(40) %30, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %31, i64 noundef 40, i1 noundef false) #57, !dbg !3685, !tbaa !85, !alias.scope !304, !noalias !3710
  %box26 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4769681168 to {}*) to {} addrspace(10)*)) #58, !dbg !3685
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box26 to i64 addrspace(10)*, !dbg !3685
  store i64 %arraylen, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !3685, !tbaa !112, !alias.scope !116, !noalias !3704
  %32 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4756495008 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4795339392 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* nonnull %box26) #59, !dbg !3685
  %33 = addrspacecast {} addrspace(10)* %32 to {} addrspace(12)*, !dbg !3685
  call void @ijl_throw({} addrspace(12)* %33) #60, !dbg !3685
  unreachable, !dbg !3685
}

; Function Attrs: mustprogress willreturn
define internal fastcc i64 @augmented_julia_copyto_unaliased__1986({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) "enzyme_sret" %0, [1 x {} addrspace(10)*]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) "enzyme_inactive" "enzymejl_returnRoots" %1, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(40) %2, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'", {} addrspace(10)* nocapture noundef nonnull readonly align 16 dereferenceable(40) %3, {} addrspace(10)* nocapture align 16 %"'1") unnamed_addr #56 !dbg !3711 {
top:
  %4 = alloca i64, align 8
  %"iv'ac" = alloca i64, align 8
  %5 = call {}*** @julia.get_pgcstack() #57
  %ptls_field29 = getelementptr inbounds {}**, {}*** %5, i64 2
  %6 = bitcast {}*** %ptls_field29 to i64***
  %ptls_load3031 = load i64**, i64*** %6, align 8, !tbaa !68, !alias.scope !3712, !noalias !3715
  %7 = getelementptr inbounds i64*, i64** %ptls_load3031, i64 2
  %safepoint = load i64*, i64** %7, align 8, !tbaa !72, !invariant.load !67, !alias.scope !3717, !noalias !3720
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #57, !dbg !3722
  fence syncscope("singlethread") seq_cst
  %8 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3723
  %9 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %8 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3723
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %9, i64 0, i32 1, !dbg !3723
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !3723, !tbaa !315, !range !86, !alias.scope !3726, !noalias !3729
  store i64 %arraylen, i64* %4, align 8, !dbg !3731
  %.not = icmp eq i64 %arraylen, 0, !dbg !3731
  br i1 %.not, label %L4, label %L5, !dbg !3725

common.ret:                                       ; preds = %L82, %L4
  %10 = load i64, i64* %4, align 8, !dbg !3732
  ret i64 %10, !dbg !3732

L4:                                               ; preds = %top
  %11 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 0, !dbg !3725
  %12 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %11, align 8, !dbg !3725, !alias.scope !3733, !noalias !3736
  %13 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %1, i64 0, i64 0, !dbg !3725
  store {} addrspace(10)* %12, {} addrspace(10)** %13, align 8, !dbg !3725, !noalias !3738
  %14 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %0 to i8*, !dbg !3725
  %15 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !3725
  call void @llvm.memcpy.p0i8.p11i8.i64(i8* nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) %14, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %15, i64 noundef 40, i1 noundef false) #57, !dbg !3725, !noalias !3738
  br label %common.ret

L5:                                               ; preds = %top
  %16 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 1, i32 0, i64 0, i64 0, !dbg !3741
  %unbox = load i64, i64 addrspace(11)* %16, align 8, !dbg !3751, !tbaa !72, !invariant.load !67, !alias.scope !3756, !noalias !3757
  %17 = icmp slt i64 %unbox, 1, !dbg !3758
  %18 = call i64 @llvm.smax.i64(i64 %unbox, i64 noundef 0) #57, !dbg !3760
  %19 = add nsw i64 %arraylen, -1, !dbg !3761
  %20 = icmp uge i64 %19, %18, !dbg !3758
  %21 = or i1 %17, %20, !dbg !3750
  br i1 %21, label %L85, label %L31.L44_crit_edge, !dbg !3750

L31.L44_crit_edge:                                ; preds = %L5
  %".phi.trans.insert'ipc" = bitcast {} addrspace(10)* %"'1" to double addrspace(13)* addrspace(10)*
  %.phi.trans.insert = bitcast {} addrspace(10)* %3 to double addrspace(13)* addrspace(10)*
  %".phi.trans.insert42'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert'ipc" to double addrspace(13)* addrspace(11)*
  %.phi.trans.insert42 = addrspacecast double addrspace(13)* addrspace(10)* %.phi.trans.insert to double addrspace(13)* addrspace(11)*
  %"arrayptr33.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert42'ipc", align 16, !dbg !3762, !tbaa !382, !alias.scope !3764, !noalias !3767
  %arrayptr33.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert42, align 16, !dbg !3762, !tbaa !382, !alias.scope !3768, !noalias !3729
  %".phi.trans.insert43'ipc" = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %"'" to double addrspace(13)* addrspace(10)* addrspace(11)*
  %.phi.trans.insert43 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to double addrspace(13)* addrspace(10)* addrspace(11)*
  %"getfield3436.pre'ipl" = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %".phi.trans.insert43'ipc" unordered, align 8, !dbg !3769, !tbaa !72, !alias.scope !3771, !noalias !3772
  %getfield3436.pre = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %.phi.trans.insert43 unordered, align 8, !dbg !3769, !tbaa !72, !invariant.load !67, !alias.scope !3756, !noalias !3757
  %.phi.trans.insert44 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 2
  %unbox17.pre = load i64, i64 addrspace(11)* %.phi.trans.insert44, align 8, !dbg !3773, !tbaa !72, !invariant.load !67, !alias.scope !3756, !noalias !3757
  %".phi.trans.insert45'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %"getfield3436.pre'ipl" to double addrspace(13)* addrspace(11)*
  %.phi.trans.insert45 = addrspacecast double addrspace(13)* addrspace(10)* %getfield3436.pre to double addrspace(13)* addrspace(11)*
  %"arrayptr1935.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert45'ipc", align 8, !dbg !3774, !tbaa !72, !alias.scope !3775, !noalias !3778
  %arrayptr1935.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert45, align 8, !dbg !3774, !tbaa !72, !invariant.load !67, !alias.scope !3780, !noalias !3781
  br label %L44, !dbg !3782

L44:                                              ; preds = %L44, %L31.L44_crit_edge
  %iv = phi i64 [ %iv.next, %L44 ], [ 0, %L31.L44_crit_edge ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !3762
  %22 = add nsw i64 %iv.next, -1, !dbg !3762
  %23 = getelementptr inbounds double, double addrspace(13)* %arrayptr33.pre, i64 %22, !dbg !3762
  %arrayref = load double, double addrspace(13)* %23, align 8, !dbg !3762, !tbaa !268, !alias.scope !3783, !noalias !3786
  %24 = add i64 %22, %unbox17.pre, !dbg !3774
  %25 = getelementptr inbounds double, double addrspace(13)* %arrayptr1935.pre, i64 %24, !dbg !3774
  store double %arrayref, double addrspace(13)* %25, align 8, !dbg !3774, !tbaa !268, !alias.scope !3788, !noalias !3791
  %.not37 = icmp eq i64 %iv.next, %arraylen, !dbg !3793
  br i1 %.not37, label %L82, label %L44, !dbg !3796

L82:                                              ; preds = %L44
  %26 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 0, !dbg !3797
  %27 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %26, align 8, !dbg !3797, !alias.scope !3733, !noalias !3736
  %28 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %1, i64 0, i64 0, !dbg !3797
  store {} addrspace(10)* %27, {} addrspace(10)** %28, align 8, !dbg !3797, !noalias !3738
  %29 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %0 to i8*, !dbg !3797
  %30 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !3797
  call void @llvm.memcpy.p0i8.p11i8.i64(i8* nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) %29, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %30, i64 noundef 40, i1 noundef false) #57, !dbg !3797, !noalias !3738
  br label %common.ret

L85:                                              ; preds = %L5
  %current_task2438 = getelementptr inbounds {}**, {}*** %5, i64 -14, !dbg !3750
  %current_task24 = bitcast {}*** %current_task2438 to {}**, !dbg !3750
  %box = call noalias nonnull dereferenceable(40) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 noundef 40, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5301231888 to {}*) to {} addrspace(10)*)) #58, !dbg !3750
  %31 = bitcast {} addrspace(10)* %box to i8 addrspace(10)*, !dbg !3750
  %32 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !3750
  call void @llvm.memcpy.p10i8.p11i8.i64(i8 addrspace(10)* nocapture nofree noundef nonnull align 8 dereferenceable(40) %31, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %32, i64 noundef 40, i1 noundef false) #57, !dbg !3750, !tbaa !85, !alias.scope !304, !noalias !3798
  %box26 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4769681168 to {}*) to {} addrspace(10)*)) #58, !dbg !3750
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box26 to i64 addrspace(10)*, !dbg !3750
  store i64 %arraylen, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !3750, !tbaa !112, !alias.scope !116, !noalias !3799
  %33 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4756495008 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4795339392 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* nonnull %box26) #59, !dbg !3750
  %34 = addrspacecast {} addrspace(10)* %33 to {} addrspace(12)*, !dbg !3750
  call void @ijl_throw({} addrspace(12)* %34) #60, !dbg !3750
  unreachable, !dbg !3750
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_copyto_unaliased__1986({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree writeonly align 8 dereferenceable(40) "enzyme_sret" %0, [1 x {} addrspace(10)*]* noalias nocapture nofree writeonly align 8 dereferenceable(8) "enzyme_inactive" "enzymejl_returnRoots" %1, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree readonly align 8 dereferenceable(40) %2, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'", {} addrspace(10)* nocapture readonly align 16 dereferenceable(40) %3, {} addrspace(10)* nocapture align 16 %"'1", i64 %arraylen) unnamed_addr #56 !dbg !3800 {
top:
  %"iv'ac" = alloca i64, align 8
  %"arrayref'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %5 = call {}*** @julia.get_pgcstack() #57
  %.not = icmp eq i64 %arraylen, 0, !dbg !3801
  br i1 %.not, label %L4, label %L5, !dbg !3803

common.ret:                                       ; preds = %L82, %L4
  br label %invertcommon.ret, !dbg !3804

L4:                                               ; preds = %top
  br label %common.ret

L5:                                               ; preds = %top
  %6 = add nsw i64 %arraylen, -1, !dbg !3805
  br i1 false, label %L85, label %L31.L44_crit_edge, !dbg !3808

L31.L44_crit_edge:                                ; preds = %L5
  %".phi.trans.insert'ipc" = bitcast {} addrspace(10)* %"'1" to double addrspace(13)* addrspace(10)*
  %".phi.trans.insert42'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr33.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert42'ipc", align 16, !dbg !3809, !tbaa !382, !alias.scope !3811, !noalias !3814, !invariant.group !3816
  %".phi.trans.insert43'ipc" = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %"'" to double addrspace(13)* addrspace(10)* addrspace(11)*
  %"getfield3436.pre'ipl" = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %".phi.trans.insert43'ipc" unordered, align 8, !dbg !3817, !tbaa !72, !alias.scope !3819, !noalias !3822, !invariant.group !3824
  %.phi.trans.insert44 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 2
  %unbox17.pre = load i64, i64 addrspace(11)* %.phi.trans.insert44, align 8, !dbg !3825, !tbaa !72, !invariant.load !67, !alias.scope !3826, !noalias !3827, !invariant.group !3828
  %".phi.trans.insert45'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %"getfield3436.pre'ipl" to double addrspace(13)* addrspace(11)*
  %"arrayptr1935.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert45'ipc", align 8, !dbg !3829, !tbaa !72, !alias.scope !3830, !noalias !3833, !invariant.group !3835
  br label %L44, !dbg !3836

L44:                                              ; preds = %L44, %L31.L44_crit_edge
  %iv = phi i64 [ %iv.next, %L44 ], [ 0, %L31.L44_crit_edge ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !3809
  %7 = add nsw i64 %iv.next, -1, !dbg !3809
  %"'ipg19" = getelementptr inbounds double, double addrspace(13)* %"arrayptr33.pre'ipl", i64 %7, !dbg !3809
  %8 = add i64 %7, %unbox17.pre, !dbg !3829
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr1935.pre'ipl", i64 %8, !dbg !3829
  %.not37 = icmp eq i64 %iv.next, %arraylen, !dbg !3837
  br i1 %.not37, label %L82, label %L44, !dbg !3840

L82:                                              ; preds = %L44
  br label %common.ret

L85:                                              ; preds = %L5
  unreachable

inverttop:                                        ; preds = %invertL5, %invertL4
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertcommon.ret:                                 ; preds = %common.ret
  br i1 %.not, label %invertL4, label %invertL82

invertL4:                                         ; preds = %invertcommon.ret
  br label %inverttop

invertL5:                                         ; preds = %invertL31.L44_crit_edge
  br label %inverttop

invertL31.L44_crit_edge:                          ; preds = %invertL44
  br label %invertL5

invertL44:                                        ; preds = %mergeinvertL44_L82, %incinvertL44
  %9 = load i64, i64* %"iv'ac", align 8, !dbg !3829
  %".phi.trans.insert43'ipc_unwrap" = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %"'" to double addrspace(13)* addrspace(10)* addrspace(11)*, !dbg !3829
  %"getfield3436.pre'ipl_unwrap" = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %".phi.trans.insert43'ipc_unwrap" unordered, align 8, !dbg !3817, !tbaa !72, !alias.scope !3819, !noalias !3822, !invariant.group !3824
  %".phi.trans.insert45'ipc_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"getfield3436.pre'ipl_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3829
  %"arrayptr1935.pre'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert45'ipc_unwrap", align 8, !dbg !3829, !tbaa !72, !alias.scope !3830, !noalias !3833, !invariant.group !3835
  %iv.next_unwrap = add nuw nsw i64 %9, 1, !dbg !3829
  %_unwrap = add nsw i64 %iv.next_unwrap, -1, !dbg !3829
  %.phi.trans.insert44_unwrap = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 2, !dbg !3829
  %unbox17.pre_unwrap = load i64, i64 addrspace(11)* %.phi.trans.insert44_unwrap, align 8, !dbg !3825, !tbaa !72, !alias.scope !3826, !noalias !3827, !invariant.group !3828
  %_unwrap17 = add i64 %_unwrap, %unbox17.pre_unwrap, !dbg !3829
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr1935.pre'ipl_unwrap", i64 %_unwrap17, !dbg !3829
  %10 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !3829, !tbaa !268, !alias.scope !3841, !noalias !3844
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !3829, !tbaa !268, !alias.scope !3841, !noalias !3844
  %11 = load double, double* %"arrayref'de", align 8, !dbg !3829
  %12 = fadd fast double %11, %10, !dbg !3829
  store double %12, double* %"arrayref'de", align 8, !dbg !3829
  %13 = load double, double* %"arrayref'de", align 8, !dbg !3809
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !3809
  %14 = load i64, i64* %"iv'ac", align 8, !dbg !3809
  %".phi.trans.insert'ipc_unwrap" = bitcast {} addrspace(10)* %"'1" to double addrspace(13)* addrspace(10)*, !dbg !3809
  %".phi.trans.insert42'ipc_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3809
  %"arrayptr33.pre'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert42'ipc_unwrap", align 16, !dbg !3809, !tbaa !382, !alias.scope !3811, !noalias !3814, !invariant.group !3816
  %"'ipg19_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr33.pre'ipl_unwrap", i64 %_unwrap, !dbg !3809
  %15 = load double, double addrspace(13)* %"'ipg19_unwrap", align 8, !dbg !3809, !tbaa !268, !alias.scope !3846, !noalias !3849
  %16 = fadd fast double %15, %13, !dbg !3809
  store double %16, double addrspace(13)* %"'ipg19_unwrap", align 8, !dbg !3809, !tbaa !268, !alias.scope !3846, !noalias !3849
  %17 = load i64, i64* %"iv'ac", align 8
  %18 = icmp eq i64 %17, 0
  %19 = xor i1 %18, true
  br i1 %18, label %invertL31.L44_crit_edge, label %incinvertL44

incinvertL44:                                     ; preds = %invertL44
  %20 = load i64, i64* %"iv'ac", align 8
  %21 = add nsw i64 %20, -1
  store i64 %21, i64* %"iv'ac", align 8
  br label %invertL44

invertL82:                                        ; preds = %invertcommon.ret
  %_unwrap26 = add nsw i64 %arraylen, -1
  br label %mergeinvertL44_L82

mergeinvertL44_L82:                               ; preds = %invertL82
  store i64 %_unwrap26, i64* %"iv'ac", align 8
  br label %invertL44
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia__unsafe_setindex__2077({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) "enzyme_inactive" %2, i64 signext "enzyme_inactive" %3) unnamed_addr #58 !dbg !3927 {
top:
  %4 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !3229
  %newstruct35 = bitcast i8* %4 to [2 x i64]*, !enzyme_caststack !67
  %5 = call {}*** @julia.get_pgcstack() #59
  %memcpy_refined_src = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]] addrspace(11)* %2, i64 0, i64 0, i64 0
  %6 = load i64, i64 addrspace(11)* %memcpy_refined_src, align 8, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96
  %ptls_field40 = getelementptr inbounds {}**, {}*** %5, i64 2
  %7 = bitcast {}*** %ptls_field40 to i64***
  %ptls_load4142 = load i64**, i64*** %7, align 8, !tbaa !68
  %8 = getelementptr inbounds i64*, i64** %ptls_load4142, i64 2
  %safepoint = load i64*, i64** %8, align 8, !tbaa !72, !invariant.load !67
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #59, !dbg !3928
  fence syncscope("singlethread") seq_cst
  %9 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !3929
  %10 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %9) #60, !dbg !3929
  %11 = bitcast {}* %10 to i8**, !dbg !3929
  %arrayptr = load i8*, i8** %11, align 8, !dbg !3929, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67
  %12 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !3929
  %13 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %12) #60, !dbg !3929
  %14 = bitcast {}* %13 to i8**, !dbg !3929
  %arrayptr3 = load i8*, i8** %14, align 8, !dbg !3929, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %.not.not = icmp eq i8* %arrayptr, %arrayptr3, !dbg !3935
  br i1 %.not.not, label %L9, label %L12, !dbg !3933

L9:                                               ; preds = %top
  %15 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %1) #59, !dbg !3938
  br label %L12, !dbg !3933

L12:                                              ; preds = %L9, %top
  %value_phi = phi {} addrspace(10)* [ %15, %L9 ], [ %1, %top ]
  %16 = bitcast {} addrspace(10)* %value_phi to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3940
  %17 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %16 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3940
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %17, i64 0, i32 1, !dbg !3940
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !3940, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not = icmp eq i64 %arraylen, %6, !dbg !3943
  br i1 %.not, label %L25, label %L22, !dbg !3941

L22:                                              ; preds = %L12
  %memcpy_refined_dst37 = getelementptr inbounds [2 x i64], [2 x i64]* %newstruct35, i64 0, i64 0, !dbg !3941
  store i64 %6, i64* %memcpy_refined_dst37, align 8, !dbg !3941, !tbaa !132, !alias.scope !134, !noalias !3944
  %memcpy_refined_dst38 = getelementptr inbounds [2 x i64], [2 x i64]* %newstruct35, i64 0, i64 1, !dbg !3941
  store i64 1, i64* %memcpy_refined_dst38, align 8, !dbg !3941, !tbaa !132, !alias.scope !134, !noalias !3944
  %18 = addrspacecast [2 x i64]* %newstruct35 to [2 x i64] addrspace(11)*, !dbg !3941
  call fastcc void @julia_throw_setindex_mismatch_2080({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %value_phi, [2 x i64] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %18) #61, !dbg !3941
  unreachable, !dbg !3941

L25:                                              ; preds = %L12
  %.not43 = icmp eq i64 %6, 0, !dbg !3947
  br i1 %.not43, label %L92, label %L42, !dbg !3949

L42:                                              ; preds = %L25
  %19 = bitcast {} addrspace(10)* %value_phi to double addrspace(13)* addrspace(10)*, !dbg !3952
  %20 = addrspacecast double addrspace(13)* addrspace(10)* %19 to double addrspace(13)* addrspace(11)*, !dbg !3952
  %arrayptr744 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %20, align 8, !dbg !3952, !tbaa !382, !alias.scope !3953, !noalias !319, !nonnull !67
  %arrayref = load double, double addrspace(13)* %arrayptr744, align 8, !dbg !3952, !tbaa !268, !alias.scope !116, !noalias !270
  %21 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*
  %22 = addrspacecast {} addrspace(10)* addrspace(10)* %21 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %22, i64 3
  %23 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*
  %arraysize = load i64, i64 addrspace(11)* %23, align 8
  %24 = add i64 %3, -1
  %25 = mul i64 %arraysize, %24
  %26 = bitcast {} addrspace(10)* %0 to double addrspace(13)* addrspace(10)*
  %27 = addrspacecast double addrspace(13)* addrspace(10)* %26 to double addrspace(13)* addrspace(11)*
  %arrayptr2246 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %27, align 16
  %28 = add i64 %25, -1
  br label %L54, !dbg !3954

L54:                                              ; preds = %L74, %L42
  %iv = phi i64 [ %iv.next, %L74 ], [ 0, %L42 ]
  %value_phi15.off0 = phi i1 [ false, %L42 ], [ %32, %L74 ]
  %value_phi16 = phi double [ %arrayref, %L42 ], [ %value_phi30, %L74 ]
  %value_phi17 = phi i64 [ 2, %L42 ], [ %value_phi29, %L74 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !3956
  br i1 %value_phi15.off0, label %L92.loopexit, label %L61, !dbg !3956

L61:                                              ; preds = %L54
  %29 = add i64 %28, %iv.next, !dbg !3958
  %30 = getelementptr inbounds double, double addrspace(13)* %arrayptr2246, i64 %29, !dbg !3958
  store double %value_phi16, double addrspace(13)* %30, align 8, !dbg !3958, !tbaa !268, !alias.scope !116, !noalias !3960
  %31 = add i64 %value_phi17, -1, !dbg !3961
  %32 = icmp uge i64 %31, %6, !dbg !3965
  br i1 %32, label %L74, label %L70, !dbg !3963

L70:                                              ; preds = %L61
  %33 = getelementptr inbounds double, double addrspace(13)* %arrayptr744, i64 %31, !dbg !3967
  %arrayref27 = load double, double addrspace(13)* %33, align 8, !dbg !3967, !tbaa !268, !alias.scope !116, !noalias !270
  %34 = add i64 %value_phi17, 1, !dbg !3968
  br label %L74, !dbg !3949

L74:                                              ; preds = %L70, %L61
  %value_phi29 = phi i64 [ %34, %L70 ], [ undef, %L61 ]
  %value_phi30 = phi double [ %arrayref27, %L70 ], [ undef, %L61 ]
  %.not48 = icmp eq i64 %iv.next, %6, !dbg !3969
  %35 = add i64 %iv.next, 1, !dbg !3970
  br i1 %.not48, label %L92.loopexit, label %L54, !dbg !3972

L92.loopexit:                                     ; preds = %L54, %L74
  br label %L92, !dbg !3973

L92:                                              ; preds = %L92.loopexit, %L25
  ret void, !dbg !3973
}

; Function Attrs: mustprogress willreturn
define internal fastcc { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } @augmented_julia__unsafe_setindex__2077({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", [1 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) "enzyme_inactive" %2, i64 signext "enzyme_inactive" %3) unnamed_addr #58 !dbg !3974 {
top:
  %4 = alloca { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, align 8
  %5 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %"iv'ac" = alloca i64, align 8
  %loopLimit_cache = alloca i64, align 8
  %newstruct35 = alloca [2 x i64], i64 1, align 8
  %7 = bitcast [2 x i64]* %newstruct35 to i8*
  %_cache = alloca i64*, align 8
  %8 = bitcast i8* %7 to [2 x i64]*, !enzyme_caststack !67
  %9 = call {}*** @julia.get_pgcstack() #59
  %memcpy_refined_src = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]] addrspace(11)* %2, i64 0, i64 0, i64 0
  %10 = load i64, i64 addrspace(11)* %memcpy_refined_src, align 8, !tbaa !72, !invariant.load !67, !alias.scope !3975, !noalias !3978
  %ptls_field40 = getelementptr inbounds {}**, {}*** %9, i64 2
  %11 = bitcast {}*** %ptls_field40 to i64***
  %ptls_load4142 = load i64**, i64*** %11, align 8, !tbaa !68, !alias.scope !3980, !noalias !3983
  %12 = getelementptr inbounds i64*, i64** %ptls_load4142, i64 2
  %safepoint = load i64*, i64** %12, align 8, !tbaa !72, !invariant.load !67, !alias.scope !3985, !noalias !3988
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #59, !dbg !3990
  fence syncscope("singlethread") seq_cst
  %13 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !3991
  %14 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %13) #60, !dbg !3991
  %15 = bitcast {}* %14 to i8**, !dbg !3991
  %arrayptr = load i8*, i8** %15, align 8, !dbg !3991, !tbaa !72, !invariant.load !67, !alias.scope !3997, !noalias !4000, !nonnull !67
  %16 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !3991
  %17 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %16) #60, !dbg !3991
  %18 = bitcast {}* %17 to i8**, !dbg !3991
  %arrayptr3 = load i8*, i8** %18, align 8, !dbg !3991, !tbaa !382, !alias.scope !4002, !noalias !4005, !nonnull !67
  %.not.not = icmp eq i8* %arrayptr, %arrayptr3, !dbg !4007
  %19 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i32 0, i32 2, !dbg !3995
  store i1 %.not.not, i1* %19, align 1, !dbg !3995
  br i1 %.not.not, label %L9, label %L12, !dbg !3995

L9:                                               ; preds = %top
  %20 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'1"), !dbg !4010
  %21 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i32 0, i32 0, !dbg !4010
  store {} addrspace(10)* %20, {} addrspace(10)** %21, align 8, !dbg !4010
  %22 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4010
  %23 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %22, i32 0, i32 3, !dbg !4010
  %24 = load i16, i16 addrspace(10)* %23, align 2, !dbg !4010
  %25 = zext i16 %24 to i64, !dbg !4010
  %26 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4010
  %27 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %26, i32 0, i32 1, !dbg !4010
  %28 = load i64, i64 addrspace(10)* %27, align 8, !dbg !4010
  %29 = mul i64 %28, %25, !dbg !4010
  %30 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !4010
  %31 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %30, align 8, !dbg !4010
  %32 = bitcast {} addrspace(10)* %20 to i8 addrspace(13)* addrspace(10)*, !dbg !4010
  %33 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %32, align 8, !dbg !4010
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %33, i8 0, i64 %29, i1 false), !dbg !4010
  %34 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %1) #59, !dbg !4010
  %35 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i32 0, i32 1, !dbg !3995
  store {} addrspace(10)* %34, {} addrspace(10)** %35, align 8, !dbg !3995
  br label %L12, !dbg !3995

L12:                                              ; preds = %L9, %top
  %36 = phi {} addrspace(10)* [ %20, %L9 ], [ %"'1", %top ]
  %value_phi = phi {} addrspace(10)* [ %34, %L9 ], [ %1, %top ]
  %37 = bitcast {} addrspace(10)* %value_phi to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !4012
  %38 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %37 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !4012
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %38, i64 0, i32 1, !dbg !4012
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !4012, !tbaa !315, !range !86, !alias.scope !4015, !noalias !4018
  %.not = icmp eq i64 %arraylen, %10, !dbg !4020
  br i1 %.not, label %L25, label %L22, !dbg !4013

L22:                                              ; preds = %L12
  %memcpy_refined_dst37 = getelementptr inbounds [2 x i64], [2 x i64]* %8, i64 0, i64 0, !dbg !4013
  store i64 %10, i64* %memcpy_refined_dst37, align 8, !dbg !4013, !tbaa !132, !alias.scope !134, !noalias !4021
  %memcpy_refined_dst38 = getelementptr inbounds [2 x i64], [2 x i64]* %8, i64 0, i64 1, !dbg !4013
  store i64 1, i64* %memcpy_refined_dst38, align 8, !dbg !4013, !tbaa !132, !alias.scope !134, !noalias !4021
  %39 = addrspacecast [2 x i64]* %8 to [2 x i64] addrspace(11)*, !dbg !4013
  call fastcc void @julia_throw_setindex_mismatch_2080({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %value_phi, [2 x i64] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %39) #61, !dbg !4013
  unreachable, !dbg !4013

L25:                                              ; preds = %L12
  %.not43 = icmp eq i64 %10, 0, !dbg !4024
  br i1 %.not43, label %L92, label %L42, !dbg !4026

L42:                                              ; preds = %L25
  %"'ipc5" = bitcast {} addrspace(10)* %36 to double addrspace(13)* addrspace(10)*, !dbg !4029
  %40 = bitcast {} addrspace(10)* %value_phi to double addrspace(13)* addrspace(10)*, !dbg !4029
  %"'ipc6" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc5" to double addrspace(13)* addrspace(11)*, !dbg !4029
  %41 = addrspacecast double addrspace(13)* addrspace(10)* %40 to double addrspace(13)* addrspace(11)*, !dbg !4029
  %"arrayptr744'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc6", align 8, !dbg !4029, !tbaa !382, !alias.scope !4030, !noalias !4033, !nonnull !67
  %arrayptr744 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %41, align 8, !dbg !4029, !tbaa !382, !alias.scope !4034, !noalias !4018, !nonnull !67
  %arrayref = load double, double addrspace(13)* %arrayptr744, align 8, !dbg !4029, !tbaa !268, !alias.scope !4035, !noalias !4038
  %42 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*
  %43 = addrspacecast {} addrspace(10)* addrspace(10)* %42 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %43, i64 3
  %44 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*
  %arraysize = load i64, i64 addrspace(11)* %44, align 8, !alias.scope !4040, !noalias !4041
  %45 = add i64 %3, -1
  %46 = mul i64 %arraysize, %45
  %"'ipc" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*
  %47 = bitcast {} addrspace(10)* %0 to double addrspace(13)* addrspace(10)*
  %"'ipc4" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %48 = addrspacecast double addrspace(13)* addrspace(10)* %47 to double addrspace(13)* addrspace(11)*
  %"arrayptr2246'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc4", align 16, !alias.scope !4041, !noalias !4040
  %arrayptr2246 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %48, align 16, !alias.scope !4040, !noalias !4041
  %49 = add i64 %46, -1
  %50 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i32 0, i32 3, !dbg !4042
  store i64 %49, i64* %50, align 8, !dbg !4042
  store i64* null, i64** %_cache, align 8, !dbg !4042
  br label %L54, !dbg !4042

L54:                                              ; preds = %L74, %L42
  %iv = phi i64 [ %iv.next, %L74 ], [ 0, %L42 ]
  %value_phi15.off0 = phi i1 [ false, %L42 ], [ %75, %L74 ]
  %value_phi16 = phi double [ %arrayref, %L42 ], [ %value_phi30, %L74 ]
  %value_phi17 = phi i64 [ 2, %L42 ], [ %value_phi29, %L74 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4044
  %51 = load i64*, i64** %_cache, align 8, !dbg !4044
  %52 = bitcast i64* %51 to i8*, !dbg !4044
  %53 = and i64 %iv.next, 1, !dbg !4044
  %54 = icmp ne i64 %53, 0, !dbg !4044
  %55 = call i64 @llvm.ctpop.i64(i64 %iv.next), !dbg !4044
  %56 = icmp ult i64 %55, 3, !dbg !4044
  %57 = and i1 %56, %54, !dbg !4044
  br i1 %57, label %grow.i, label %__enzyme_exponentialallocationzero.exit, !dbg !4044

grow.i:                                           ; preds = %L54
  %58 = call i64 @llvm.ctlz.i64(i64 %iv.next, i1 true), !dbg !4044
  %59 = sub nuw nsw i64 64, %58, !dbg !4044
  %60 = shl i64 8, %59, !dbg !4044
  %61 = icmp eq i64 %iv.next, 1, !dbg !4044
  %62 = lshr i64 %60, 1, !dbg !4044
  %63 = select i1 %61, i64 0, i64 %62, !dbg !4044
  %64 = call i8* @realloc(i8* %52, i64 %60) #62, !dbg !4044
  %65 = sub i64 %60, %63, !dbg !4044
  %66 = getelementptr inbounds i8, i8* %64, i64 %63, !dbg !4044
  call void @llvm.memset.p0i8.i64(i8* %66, i8 0, i64 %65, i1 false), !dbg !4044
  br label %__enzyme_exponentialallocationzero.exit, !dbg !4044

__enzyme_exponentialallocationzero.exit:          ; preds = %L54, %grow.i
  %67 = phi i8* [ %64, %grow.i ], [ %52, %L54 ], !dbg !4044
  %68 = bitcast i8* %67 to i64*, !dbg !4044
  %69 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i32 0, i32 4, !dbg !4044
  store i64* %68, i64** %69, align 8, !dbg !4044
  store i64* %68, i64** %_cache, align 8, !dbg !4044
  br i1 %value_phi15.off0, label %L92.loopexit, label %L61, !dbg !4044

L61:                                              ; preds = %__enzyme_exponentialallocationzero.exit
  %70 = add i64 %49, %iv.next, !dbg !4046
  %71 = getelementptr inbounds double, double addrspace(13)* %arrayptr2246, i64 %70, !dbg !4046
  store double %value_phi16, double addrspace(13)* %71, align 8, !dbg !4046, !tbaa !268, !alias.scope !4048, !noalias !4051
  %72 = add i64 %value_phi17, -1, !dbg !4053
  %73 = load i64*, i64** %_cache, align 8, !dbg !4057, !dereferenceable !3229, !invariant.group !4059
  %74 = getelementptr inbounds i64, i64* %73, i64 %iv, !dbg !4057
  store i64 %72, i64* %74, align 8, !dbg !4057, !invariant.group !4060
  %75 = icmp uge i64 %72, %10, !dbg !4057
  br i1 %75, label %L74, label %L70, !dbg !4055

L70:                                              ; preds = %L61
  %76 = getelementptr inbounds double, double addrspace(13)* %arrayptr744, i64 %72, !dbg !4061
  %arrayref27 = load double, double addrspace(13)* %76, align 8, !dbg !4061, !tbaa !268, !alias.scope !4035, !noalias !4038
  %77 = add i64 %value_phi17, 1, !dbg !4062
  br label %L74, !dbg !4026

L74:                                              ; preds = %L70, %L61
  %value_phi29 = phi i64 [ %77, %L70 ], [ undef, %L61 ]
  %value_phi30 = phi double [ %arrayref27, %L70 ], [ undef, %L61 ]
  %.not48 = icmp eq i64 %iv.next, %10, !dbg !4063
  br i1 %.not48, label %L92.loopexit, label %L54, !dbg !4066

L92.loopexit:                                     ; preds = %L74, %__enzyme_exponentialallocationzero.exit
  %78 = phi i64 [ %iv, %L74 ], [ %iv, %__enzyme_exponentialallocationzero.exit ], !dbg !4067
  store i64 %78, i64* %loopLimit_cache, align 8, !dbg !4067, !invariant.group !4068
  br label %L92, !dbg !4067

L92:                                              ; preds = %L92.loopexit, %L25
  %79 = load { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, align 8, !dbg !4067
  ret { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %79, !dbg !4067
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia__unsafe_setindex__2077({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", [1 x [1 x i64]] addrspace(11)* nocapture readonly align 8 dereferenceable(8) "enzyme_inactive" %2, i64 signext "enzyme_inactive" %3, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg) unnamed_addr #58 !dbg !4069 {
top:
  %"iv'ac" = alloca i64, align 8
  %loopLimit_cache = alloca i64, align 8
  %"arrayref'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %"value_phi16'de" = alloca double, align 8
  %5 = getelementptr double, double* %"value_phi16'de", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"value_phi30'de" = alloca double, align 8
  %6 = getelementptr double, double* %"value_phi30'de", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"arrayref27'de" = alloca double, align 8
  %7 = getelementptr double, double* %"arrayref27'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %_cache33 = alloca i64*, align 8
  %8 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 4
  %mdyncache_fromtape_cache = alloca i64*, align 8
  store i64* %8, i64** %mdyncache_fromtape_cache, align 8
  %9 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %10 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %9, i32 0, i32 3
  %11 = load i16, i16 addrspace(10)* %10, align 2
  %12 = zext i16 %11 to i64
  %13 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %14 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %13, i32 0, i32 1
  %15 = load i64, i64 addrspace(10)* %14, align 8
  %16 = mul i64 %15, %12
  %17 = call {}*** @julia.get_pgcstack() #59
  %memcpy_refined_src = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]] addrspace(11)* %2, i64 0, i64 0, i64 0
  %18 = load i64, i64 addrspace(11)* %memcpy_refined_src, align 8, !tbaa !72, !invariant.load !67, !alias.scope !4070, !noalias !4073
  %.not.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 2, !dbg !4075
  br i1 %.not.not, label %L9, label %L12, !dbg !4075

L9:                                               ; preds = %top
  %"'ip_phi3" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 0, !dbg !4077
  %19 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 1, !dbg !4077
  br label %L12, !dbg !4075

L12:                                              ; preds = %L9, %top
  %20 = phi {} addrspace(10)* [ %"'ip_phi3", %L9 ], [ %"'1", %top ]
  br i1 true, label %L25, label %L22, !dbg !4079

L22:                                              ; preds = %L12
  unreachable

L25:                                              ; preds = %L12
  %.not43 = icmp eq i64 %18, 0, !dbg !4081
  br i1 %.not43, label %L92, label %L42, !dbg !4083

L42:                                              ; preds = %L25
  %"'ipc23" = bitcast {} addrspace(10)* %20 to double addrspace(13)* addrspace(10)*, !dbg !4086
  %"'ipc24" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc23" to double addrspace(13)* addrspace(11)*, !dbg !4086
  %"arrayptr744'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc24", align 8, !dbg !4086, !tbaa !382, !alias.scope !4087, !noalias !4090, !nonnull !67, !invariant.group !4092
  %"'ipc" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*
  %"'ipc15" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr2246'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc15", align 16, !alias.scope !4093, !noalias !4096, !invariant.group !4098
  %21 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 3, !dbg !4099
  br label %L54, !dbg !4099

L54:                                              ; preds = %L74, %L42
  %iv = phi i64 [ %iv.next, %L74 ], [ 0, %L42 ]
  %value_phi15.off0 = phi i1 [ false, %L42 ], [ %27, %L74 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4101
  %22 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 4, !dbg !4101
  br i1 %value_phi15.off0, label %L92.loopexit, label %L61, !dbg !4101

L61:                                              ; preds = %L54
  %23 = add i64 %21, %iv.next, !dbg !4103
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr2246'ipl", i64 %23, !dbg !4103
  %24 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dbg !4105, !dereferenceable !3229, !invariant.group !4109
  %25 = getelementptr inbounds i64, i64* %24, i64 %iv, !dbg !4105
  %26 = load i64, i64* %25, align 8, !dbg !4105, !invariant.group !4110
  %27 = icmp uge i64 %26, %18, !dbg !4105
  br i1 %27, label %L74, label %L70, !dbg !4107

L70:                                              ; preds = %L61
  %"'ipg30" = getelementptr inbounds double, double addrspace(13)* %"arrayptr744'ipl", i64 %26, !dbg !4111
  br label %L74, !dbg !4083

L74:                                              ; preds = %L70, %L61
  %.not48 = icmp eq i64 %iv.next, %18, !dbg !4112
  br i1 %.not48, label %L92.loopexit, label %L54, !dbg !4115

L92.loopexit:                                     ; preds = %L74, %L54
  %"value_phi15.off0!manual_lcssa" = phi i1 [ %value_phi15.off0, %L74 ], [ %value_phi15.off0, %L54 ], !dbg !4116
  %28 = phi i64 [ %iv, %L74 ], [ %iv, %L54 ], !dbg !4116
  store i64 %28, i64* %loopLimit_cache, align 8, !dbg !4116, !invariant.group !4117
  br label %L92, !dbg !4116

L92:                                              ; preds = %L92.loopexit, %L25
  br label %invertL92, !dbg !4116

inverttop:                                        ; preds = %invertL12, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL9:                                         ; preds = %invertL12
  %29 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 0, !dbg !4077
  %30 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !4077
  %31 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %30, align 8, !dbg !4077
  %32 = bitcast {} addrspace(10)* %29 to i8 addrspace(13)* addrspace(10)*, !dbg !4077
  %33 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %32, align 8, !dbg !4077
  %34 = bitcast i8 addrspace(13)* %33 to double addrspace(13)*, !dbg !4077
  %35 = bitcast i8 addrspace(13)* %31 to double addrspace(13)*, !dbg !4077
  %36 = udiv i64 %16, 8, !dbg !4077
  %37 = icmp eq i64 %36, 0, !dbg !4077
  br i1 %37, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !4077

for.body.i:                                       ; preds = %for.body.i, %invertL9
  %idx.i = phi i64 [ 0, %invertL9 ], [ %idx.next.i, %for.body.i ], !dbg !4077
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %34, i64 %idx.i, !dbg !4077
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !4077
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !4077
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %35, i64 %idx.i, !dbg !4077
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !4077
  %38 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !4077
  store double %38, double addrspace(13)* %src.i.i, align 1, !dbg !4077
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !4077
  %39 = icmp eq i64 %36, %idx.next.i, !dbg !4077
  br i1 %39, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !4077

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL9, %for.body.i
  br label %inverttop

invertL12:                                        ; preds = %invertL25
  br i1 %.not.not, label %invertL9, label %inverttop

invertL25:                                        ; preds = %invertL92, %invertL42
  br label %invertL12

invertL42:                                        ; preds = %invertL54
  %40 = load double, double* %"arrayref'de", align 8, !dbg !4086
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !4086
  %"'ipc23_unwrap" = bitcast {} addrspace(10)* %20 to double addrspace(13)* addrspace(10)*, !dbg !4086
  %"'ipc24_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc23_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4086
  %"arrayptr744'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc24_unwrap", align 8, !dbg !4086, !tbaa !382, !alias.scope !4087, !noalias !4090, !nonnull !67
  %41 = load double, double addrspace(13)* %"arrayptr744'il_phi_unwrap", align 8, !dbg !4086, !tbaa !268, !alias.scope !4118, !noalias !4121
  %42 = fadd fast double %41, %40, !dbg !4086
  store double %42, double addrspace(13)* %"arrayptr744'il_phi_unwrap", align 8, !dbg !4086, !tbaa !268, !alias.scope !4118, !noalias !4121
  %43 = load i64, i64* %"iv'ac", align 8
  %44 = load i64, i64* %"iv'ac", align 8
  %forfree40 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dereferenceable !3229, !invariant.group !4109
  %45 = bitcast i64* %forfree40 to i8*
  call void @free(i8* nonnull %45), !dbg !4123
  br label %invertL25

invertL54:                                        ; preds = %mergeinvertL54_L92.loopexit37, %invertL61
  %46 = load double, double* %"value_phi16'de", align 8
  store double 0.000000e+00, double* %"value_phi16'de", align 8
  %47 = load i64, i64* %"iv'ac", align 8
  %48 = icmp eq i64 %47, 0
  %49 = xor i1 %48, true
  %50 = select fast i1 %49, double %46, double 0.000000e+00
  %51 = load double, double* %"value_phi30'de", align 8
  %52 = fadd fast double %51, %46
  %53 = select fast i1 %48, double %51, double %52
  store double %53, double* %"value_phi30'de", align 8
  %54 = select fast i1 %48, double %46, double 0.000000e+00
  %55 = load double, double* %"arrayref'de", align 8
  %56 = fadd fast double %55, %46
  %57 = select fast i1 %48, double %56, double %55
  store double %57, double* %"arrayref'de", align 8
  br i1 %48, label %invertL42, label %incinvertL54

incinvertL54:                                     ; preds = %invertL54
  %58 = load i64, i64* %"iv'ac", align 8
  %59 = add nsw i64 %58, -1
  store i64 %59, i64* %"iv'ac", align 8
  br label %invertL74

invertL61:                                        ; preds = %invertL74, %invertL70
  %60 = load i64, i64* %"iv'ac", align 8, !dbg !4103
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*, !dbg !4103
  %"'ipc15_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4103
  %"arrayptr2246'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc15_unwrap", align 16, !alias.scope !4093, !noalias !4096, !invariant.group !4098
  %_unwrap41 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 3, !dbg !4103
  %iv.next_unwrap = add nuw nsw i64 %60, 1, !dbg !4103
  %_unwrap = add i64 %_unwrap41, %iv.next_unwrap, !dbg !4103
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr2246'ipl_unwrap", i64 %_unwrap, !dbg !4103
  %61 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4103, !tbaa !268, !alias.scope !4124, !noalias !4127
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4103, !tbaa !268, !alias.scope !4124, !noalias !4127
  %62 = load double, double* %"value_phi16'de", align 8, !dbg !4103
  %63 = fadd fast double %62, %61, !dbg !4103
  store double %63, double* %"value_phi16'de", align 8, !dbg !4103
  br label %invertL54

invertL70:                                        ; preds = %invertL74
  %64 = load double, double* %"arrayref27'de", align 8, !dbg !4111
  store double 0.000000e+00, double* %"arrayref27'de", align 8, !dbg !4111
  %65 = load i64, i64* %"iv'ac", align 8, !dbg !4111
  %"'ipc23_unwrap31" = bitcast {} addrspace(10)* %20 to double addrspace(13)* addrspace(10)*, !dbg !4111
  %"'ipc24_unwrap32" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc23_unwrap31" to double addrspace(13)* addrspace(11)*, !dbg !4111
  %"arrayptr744'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc24_unwrap32", align 8, !dbg !4086, !tbaa !382, !alias.scope !4087, !noalias !4090, !nonnull !67, !invariant.group !4092
  %66 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 4, !dbg !4111
  %67 = getelementptr inbounds i64, i64* %66, i64 %65, !dbg !4111
  %68 = load i64, i64* %67, align 8, !dbg !4111, !invariant.group !4129
  %"'ipg30_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr744'ipl_unwrap", i64 %68, !dbg !4111
  %69 = load double, double addrspace(13)* %"'ipg30_unwrap", align 8, !dbg !4111, !tbaa !268, !alias.scope !4118, !noalias !4121
  %70 = fadd fast double %69, %64, !dbg !4111
  store double %70, double addrspace(13)* %"'ipg30_unwrap", align 8, !dbg !4111, !tbaa !268, !alias.scope !4118, !noalias !4121
  br label %invertL61

invertL74:                                        ; preds = %mergeinvertL54_L92.loopexit, %incinvertL54
  %71 = load double, double* %"value_phi30'de", align 8
  store double 0.000000e+00, double* %"value_phi30'de", align 8
  %72 = load i64, i64* %"iv'ac", align 8
  %73 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 4
  %74 = getelementptr inbounds i64, i64* %73, i64 %72
  %75 = load i64, i64* %74, align 8, !invariant.group !4129
  %_unwrap36 = icmp uge i64 %75, %18
  %76 = xor i1 %_unwrap36, true
  %77 = select fast i1 %76, double %71, double 0.000000e+00
  %78 = load double, double* %"arrayref27'de", align 8
  %79 = fadd fast double %78, %71
  %80 = select fast i1 %_unwrap36, double %78, double %79
  store double %80, double* %"arrayref27'de", align 8
  br i1 %_unwrap36, label %invertL61, label %invertL70

invertL92.loopexit:                               ; preds = %invertL92
  %81 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !4117
  %82 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !4117
  %83 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !4117
  %84 = icmp ne i64 %83, 0
  br i1 %84, label %invertL92.loopexit_phirc, label %invertL92.loopexit_phirc39

invertL92.loopexit_phirc:                         ; preds = %invertL92.loopexit
  %85 = sub nuw i64 %83, 1
  %86 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 4
  %87 = getelementptr inbounds i64, i64* %86, i64 %85
  %88 = load i64, i64* %87, align 8, !invariant.group !4129
  %_unwrap38 = icmp uge i64 %88, %18
  br label %invertL92.loopexit_phimerge

invertL92.loopexit_phirc39:                       ; preds = %invertL92.loopexit
  br label %invertL92.loopexit_phimerge

invertL92.loopexit_phimerge:                      ; preds = %invertL92.loopexit_phirc39, %invertL92.loopexit_phirc
  %89 = phi i1 [ %_unwrap38, %invertL92.loopexit_phirc ], [ false, %invertL92.loopexit_phirc39 ]
  br i1 %89, label %mergeinvertL54_L92.loopexit37, label %mergeinvertL54_L92.loopexit

mergeinvertL54_L92.loopexit37:                    ; preds = %invertL92.loopexit_phimerge
  store i64 %82, i64* %"iv'ac", align 8
  br label %invertL54

mergeinvertL54_L92.loopexit:                      ; preds = %invertL92.loopexit_phimerge
  store i64 %81, i64* %"iv'ac", align 8
  br label %invertL74

invertL92:                                        ; preds = %L92
  br i1 %.not43, label %invertL25, label %invertL92.loopexit
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia__diagm_2062({ i64, {} addrspace(10)* } addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %0) unnamed_addr #59 !dbg !4150 {
top:
  %1 = call noalias nonnull dereferenceable(24) dereferenceable_or_null(24) i8* @malloc(i64 24), !enzyme_fromstack !3229
  %2 = bitcast i8* %1 to [3 x i64]*, !enzyme_caststack !67
  %3 = call noalias nonnull dereferenceable(24) dereferenceable_or_null(24) i8* @malloc(i64 24), !enzyme_fromstack !3229
  %4 = bitcast i8* %3 to [3 x i64]*, !enzyme_caststack !67
  %5 = call noalias nonnull dereferenceable(24) dereferenceable_or_null(24) i8* @malloc(i64 24), !enzyme_fromstack !3229
  %6 = bitcast i8* %5 to [3 x i64]*, !enzyme_caststack !67
  %7 = call noalias nonnull dereferenceable(24) dereferenceable_or_null(24) i8* @malloc(i64 24), !enzyme_fromstack !3229
  %8 = bitcast i8* %7 to [3 x i64]*, !enzyme_caststack !67
  %9 = call {}*** @julia.get_pgcstack() #60
  %unbox.elt = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %0, i64 0, i32 0
  %unbox.unpack = load i64, i64 addrspace(11)* %unbox.elt, align 8, !tbaa !72, !alias.scope !95, !noalias !96
  %unbox.elt85 = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %0, i64 0, i32 1
  %unbox.unpack86 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %unbox.elt85, align 8, !tbaa !72, !alias.scope !95, !noalias !96
  %ptls_field92 = getelementptr inbounds {}**, {}*** %9, i64 2
  %10 = bitcast {}*** %ptls_field92 to i64***
  %ptls_load9394 = load i64**, i64*** %10, align 8, !tbaa !68
  %11 = getelementptr inbounds i64*, i64** %ptls_load9394, i64 2
  %safepoint = load i64*, i64** %11, align 8, !tbaa !72, !invariant.load !67
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #60, !dbg !4151
  fence syncscope("singlethread") seq_cst
  %12 = icmp ne {} addrspace(10)* %unbox.unpack86, null
  call void @llvm.assume(i1 noundef %12) #60
  %13 = bitcast {} addrspace(10)* %unbox.unpack86 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !4152
  %14 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %13 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !4166
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %14, i64 0, i32 1, !dbg !4166
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !4166, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %15 = call i64 @llvm.abs.i64(i64 %unbox.unpack, i1 false) #60, !dbg !4167
  %16 = add nuw i64 %arraylen, %15, !dbg !4169
  %17 = call i64 @llvm.smax.i64(i64 %16, i64 noundef 0) #60, !dbg !4170
  %18 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 6199626896 to {}*) to {} addrspace(10)*), i64 %17, i64 %17) #61, !dbg !4173
  %19 = bitcast {} addrspace(10)* %18 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !4177
  %20 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %19 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !4177
  %arraylen_ptr4 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %20, i64 0, i32 1, !dbg !4177
  %arraylen5 = load i64, i64 addrspace(11)* %arraylen_ptr4, align 8, !dbg !4177, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %.not = icmp eq i64 %arraylen5, 0, !dbg !4182
  br i1 %.not, label %L47, label %top.L22_crit_edge, !dbg !4180

top.L22_crit_edge:                                ; preds = %top
  %21 = bitcast {} addrspace(10)* %18 to i8 addrspace(13)* addrspace(10)*, !dbg !4186
  %22 = addrspacecast i8 addrspace(13)* addrspace(10)* %21 to i8 addrspace(13)* addrspace(11)*, !dbg !4186
  %arrayptr96.pre134 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %22, align 8, !dbg !4186, !tbaa !72, !invariant.load !67, !alias.scope !4188, !noalias !96
  %23 = shl nuw i64 %arraylen5, 3, !dbg !4180
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr96.pre134, i8 noundef 0, i64 %23, i1 noundef false) #60, !dbg !4186, !tbaa !268, !alias.scope !116, !noalias !4191
  br label %L47, !dbg !4192

L47:                                              ; preds = %top.L22_crit_edge, %top
  %24 = bitcast {} addrspace(10)* %18 to {} addrspace(10)* addrspace(10)*, !dbg !4192
  %25 = addrspacecast {} addrspace(10)* addrspace(10)* %24 to {} addrspace(10)* addrspace(11)*, !dbg !4192
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 3, !dbg !4192
  %26 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*, !dbg !4192
  %arraysize = load i64, i64 addrspace(11)* %26, align 8, !dbg !4192, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %arraysize_ptr14 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 4, !dbg !4192
  %27 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr14 to i64 addrspace(11)*, !dbg !4192
  %arraysize15 = load i64, i64 addrspace(11)* %27, align 8, !dbg !4192, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %28 = icmp sgt i64 %unbox.unpack, 0, !dbg !4195
  br i1 %28, label %L59, label %L52, !dbg !4196

L52:                                              ; preds = %L47
  %29 = sub i64 1, %unbox.unpack, !dbg !4197
  %30 = add nuw nsw i64 %arraysize, 1, !dbg !4198
  %31 = add nsw i64 %arraysize, %unbox.unpack, !dbg !4198
  %32 = call i64 @llvm.smin.i64(i64 %arraysize15, i64 %31) #60, !dbg !4199
  call fastcc void @julia_range_start_step_length_2068([3 x i64]* noalias nocapture noundef nonnull sret([3 x i64]) align 8 dereferenceable(24) %6, i64 signext %29, i64 signext %30, i64 signext %32) #60, !dbg !4201
  %.0.sroa_cast106 = bitcast [3 x i64]* %2 to i8*, !dbg !4204
  %.0.sroa_cast3 = bitcast [3 x i64]* %2 to i8*, !dbg !4204
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %.0.sroa_cast3), !dbg !4204
  %33 = bitcast [3 x i64]* %6 to i8*, !dbg !4204
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %.0.sroa_cast106, i8* noundef nonnull align 8 dereferenceable(24) %33, i64 24, i1 false) #60, !dbg !4204, !tbaa !132, !alias.scope !134, !noalias !4206
  br label %L67, !dbg !4204

L59:                                              ; preds = %L47
  %34 = mul i64 %arraysize, %unbox.unpack, !dbg !4207
  %35 = add i64 %34, 1, !dbg !4198
  %36 = add nuw nsw i64 %arraysize, 1, !dbg !4198
  %37 = sub nsw i64 %arraysize15, %unbox.unpack, !dbg !4197
  %38 = call i64 @llvm.smin.i64(i64 %37, i64 %arraysize) #60, !dbg !4199
  call fastcc void @julia_range_start_step_length_2068([3 x i64]* noalias nocapture noundef nonnull sret([3 x i64]) align 8 dereferenceable(24) %8, i64 signext %35, i64 signext %36, i64 signext %38) #60, !dbg !4201
  %.0.sroa_cast107 = bitcast [3 x i64]* %2 to i8*, !dbg !4204
  %.0.sroa_cast4 = bitcast [3 x i64]* %2 to i8*, !dbg !4204
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %.0.sroa_cast4), !dbg !4204
  %39 = bitcast [3 x i64]* %8 to i8*, !dbg !4204
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %.0.sroa_cast107, i8* noundef nonnull align 8 dereferenceable(24) %39, i64 24, i1 false) #60, !dbg !4204, !tbaa !132, !alias.scope !134, !noalias !4206
  br label %L67, !dbg !4204

L67:                                              ; preds = %L59, %L52
  %.pre-phi.pre-phi.pre-phi.pre-phi.pre-phi = bitcast [3 x i64]* %2 to i8*, !dbg !4193
  %40 = bitcast [3 x i64]* %4 to i8*, !dbg !4193
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %40, i8* noundef nonnull align 8 dereferenceable(24) %.pre-phi.pre-phi.pre-phi.pre-phi.pre-phi, i64 24, i1 false) #60, !dbg !4193, !noalias !4208
  %.0.sroa_cast5 = bitcast [3 x i64]* %2 to i8*, !dbg !4193
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %.0.sroa_cast5), !dbg !4193
  %arraylen23 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !4209, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not99 = icmp eq i64 %arraylen23, 0, !dbg !4215
  br i1 %.not99, label %L160, label %L87.L98_crit_edge, !dbg !4210

L87.L98_crit_edge:                                ; preds = %L67
  %.phi.trans.insert112 = getelementptr inbounds [3 x i64], [3 x i64]* %4, i64 0, i64 1
  %unbox39.pre = load i64, i64* %.phi.trans.insert112, align 8, !dbg !4217, !tbaa !132, !alias.scope !134, !noalias !641
  %.phi.trans.insert113 = getelementptr inbounds [3 x i64], [3 x i64]* %4, i64 0, i64 0
  %unbox40.pre = load i64, i64* %.phi.trans.insert113, align 8, !dbg !4220, !tbaa !132, !alias.scope !134, !noalias !641
  %.phi.trans.insert115 = getelementptr inbounds [3 x i64], [3 x i64]* %4, i64 0, i64 2
  %unbox42.pre = load i64, i64* %.phi.trans.insert115, align 8, !dbg !4221, !tbaa !132, !alias.scope !134, !noalias !641
  %41 = icmp slt i64 %unbox39.pre, 1, !dbg !4223
  %42 = icmp sle i64 %unbox40.pre, %unbox42.pre, !dbg !4221
  %43 = icmp sle i64 %unbox42.pre, %unbox40.pre, !dbg !4225
  %.v129 = select i1 %41, i1 %43, i1 %42, !dbg !4227
  br i1 %.v129, label %L128.lr.ph, label %L125, !dbg !4228

L128.lr.ph:                                       ; preds = %L87.L98_crit_edge
  %44 = bitcast {} addrspace(10)* %unbox.unpack86 to double addrspace(13)* addrspace(10)*, !dbg !4229
  %45 = addrspacecast double addrspace(13)* addrspace(10)* %44 to double addrspace(13)* addrspace(11)*, !dbg !4229
  %arrayptr25100 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %45, align 8, !dbg !4229, !tbaa !382, !alias.scope !4230, !noalias !319, !nonnull !67
  %46 = bitcast {} addrspace(10)* %18 to double addrspace(13)* addrspace(10)*
  %47 = addrspacecast double addrspace(13)* addrspace(10)* %46 to double addrspace(13)* addrspace(11)*
  %48 = add nuw nsw i64 %arraylen23, 1, !dbg !4228
  %49 = bitcast double addrspace(13)* addrspace(10)* %44 to {} addrspace(10)*, !dbg !4228
  br label %L128, !dbg !4228

L125.loopexit:                                    ; preds = %L143
  br label %L125, !dbg !4228

L125:                                             ; preds = %L125.loopexit, %L87.L98_crit_edge
  %value_phi35.lcssa = phi i64 [ 1, %L87.L98_crit_edge ], [ %51, %L125.loopexit ]
  %50 = addrspacecast [3 x i64]* %4 to [3 x i64] addrspace(11)*, !dbg !4228
  call fastcc void @julia_throw_boundserror_2066([3 x i64] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(24) %50, i64 signext %value_phi35.lcssa) #62, !dbg !4228
  unreachable, !dbg !4228

L128:                                             ; preds = %L143, %L128.lr.ph
  %iv = phi i64 [ %iv.next, %L143 ], [ 0, %L128.lr.ph ]
  %nodecayed.value_phi36132.in = phi {} addrspace(10)* [ %49, %L128.lr.ph ], [ %77, %L143 ]
  %51 = add i64 %iv, 2, !dbg !4231
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4231
  %52 = shl i64 %iv, 3, !dbg !4231
  %53 = mul i64 %unbox39.pre, %iv, !dbg !4231
  %54 = add i64 %unbox40.pre, %53, !dbg !4231
  %55 = bitcast {} addrspace(10)* %nodecayed.value_phi36132.in to double addrspace(13)* addrspace(10)*, !dbg !4231
  %56 = addrspacecast double addrspace(13)* addrspace(10)* %55 to double addrspace(13)* addrspace(11)*, !dbg !4231
  %57 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %56, align 8, !dbg !4231
  %58 = bitcast double addrspace(13)* %57 to i8 addrspace(13)*, !dbg !4231
  %59 = getelementptr i8, i8 addrspace(13)* %58, i64 %52, !dbg !4231
  %60 = bitcast i8 addrspace(13)* %59 to double addrspace(13)*, !dbg !4231
  %61 = add i64 %54, -1, !dbg !4231
  %inbounds = icmp ult i64 %61, %arraylen5, !dbg !4231
  br i1 %inbounds, label %idxend57, label %oob, !dbg !4231

L143:                                             ; preds = %idxend57
  %62 = add nsw i64 %51, -1, !dbg !4232
  %63 = getelementptr inbounds double, double addrspace(13)* %arrayptr25100, i64 %62, !dbg !4237
  %64 = add nuw i64 %51, 1, !dbg !4238
  %65 = mul i64 %62, %unbox39.pre, !dbg !4217
  %66 = add i64 %65, %unbox40.pre, !dbg !4220
  %67 = icmp sle i64 %66, %unbox42.pre, !dbg !4221
  %68 = icmp sle i64 %unbox40.pre, %66, !dbg !4225
  %69 = and i1 %67, %68, !dbg !4239
  %70 = icmp sle i64 %66, %unbox40.pre, !dbg !4221
  %71 = icmp sle i64 %unbox42.pre, %66, !dbg !4225
  %72 = and i1 %70, %71, !dbg !4239
  %.v = select i1 %41, i1 %72, i1 %69, !dbg !4227
  %73 = mul i64 %62, 8, !dbg !4228
  %74 = add i64 0, %73, !dbg !4228
  %75 = add nuw i64 0, %74, !dbg !4228
  %76 = bitcast double addrspace(13)* addrspace(10)* %44 to double addrspace(10)*, !dbg !4228
  %77 = bitcast double addrspace(10)* %76 to {} addrspace(10)*, !dbg !4228
  br i1 %.v, label %L128, label %L125.loopexit, !dbg !4228

L160.loopexit:                                    ; preds = %idxend57
  br label %L160, !dbg !4240

L160:                                             ; preds = %L160.loopexit, %L67
  ret {} addrspace(10)* %18, !dbg !4240

oob:                                              ; preds = %L128
  %errorbox = alloca i64, align 8, !dbg !4231
  store i64 %54, i64* %errorbox, align 8, !dbg !4231, !noalias !4208
  %78 = addrspacecast {} addrspace(10)* %18 to {} addrspace(12)*, !dbg !4231
  call void @ijl_bounds_error_ints({} addrspace(12)* %78, i64* nonnull align 8 %errorbox, i64 1) #60, !dbg !4231
  unreachable, !dbg !4231

idxend57:                                         ; preds = %L128
  %value_phi36132 = load double, double addrspace(13)* %60, align 8, !dbg !4241, !tbaa !268, !alias.scope !116, !noalias !270
  %arrayptr50101 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %47, align 8, !dbg !4231, !tbaa !72, !invariant.load !67, !alias.scope !4188, !noalias !96, !nonnull !67
  %79 = getelementptr inbounds double, double addrspace(13)* %arrayptr50101, i64 %61, !dbg !4231
  %arrayref51 = load double, double addrspace(13)* %79, align 8, !dbg !4231, !tbaa !268, !alias.scope !116, !noalias !270
  %80 = fadd double %value_phi36132, %arrayref51, !dbg !4242
  store double %80, double addrspace(13)* %79, align 8, !dbg !4243, !tbaa !268, !alias.scope !116, !noalias !4191
  %exitcond.not = icmp eq i64 %51, %48, !dbg !4244
  br i1 %exitcond.not, label %L160.loopexit, label %L143, !dbg !4234
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia__diagm_2062({ i64, {} addrspace(10)* } addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %0, { i64, {} addrspace(10)* } addrspace(11)* nocapture align 8 %"'") unnamed_addr #59 !dbg !4246 {
top:
  %1 = alloca { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %2 = getelementptr inbounds { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %1, i32 0, i32 0
  %3 = getelementptr { {} addrspace(10)*, i64, i8*, i64, i64 }, { {} addrspace(10)*, i64, i8*, i64, i64 }* %2, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %3, align 8
  %"iv'ac" = alloca i64, align 8
  %4 = alloca [3 x i64], i64 1, align 8
  %5 = bitcast [3 x i64]* %4 to i8*
  %6 = alloca [3 x i64], i64 1, align 8
  %7 = bitcast [3 x i64]* %6 to i8*
  %8 = alloca [3 x i64], i64 1, align 8
  %9 = bitcast [3 x i64]* %8 to i8*
  %10 = bitcast i8* %9 to [3 x i64]*, !enzyme_caststack !67
  %11 = call noalias nonnull dereferenceable(24) dereferenceable_or_null(24) i8* @malloc(i64 24), !enzyme_fromstack !3229
  %12 = getelementptr inbounds { {} addrspace(10)*, i64, i8*, i64, i64 }, { {} addrspace(10)*, i64, i8*, i64, i64 }* %2, i32 0, i32 2
  store i8* %11, i8** %12, align 8
  %13 = bitcast i8* %11 to [3 x i64]*, !enzyme_caststack !67
  %14 = bitcast i8* %7 to [3 x i64]*, !enzyme_caststack !67
  %15 = bitcast i8* %5 to [3 x i64]*, !enzyme_caststack !67
  %16 = call {}*** @julia.get_pgcstack() #60
  %unbox.elt = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %0, i64 0, i32 0
  %unbox.unpack = load i64, i64 addrspace(11)* %unbox.elt, align 8, !tbaa !72, !alias.scope !4247, !noalias !4250
  %"unbox.elt85'ipg" = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %"'", i64 0, i32 1
  %unbox.elt85 = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %0, i64 0, i32 1
  %"unbox.unpack86'ipl" = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"unbox.elt85'ipg", align 8, !tbaa !72, !alias.scope !4252, !noalias !4253
  %unbox.unpack86 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %unbox.elt85, align 8, !tbaa !72, !alias.scope !4247, !noalias !4250
  %ptls_field92 = getelementptr inbounds {}**, {}*** %16, i64 2
  %17 = bitcast {}*** %ptls_field92 to i64***
  %ptls_load9394 = load i64**, i64*** %17, align 8, !tbaa !68, !alias.scope !4254, !noalias !4257
  %18 = getelementptr inbounds i64*, i64** %ptls_load9394, i64 2
  %safepoint = load i64*, i64** %18, align 8, !tbaa !72, !invariant.load !67, !alias.scope !4259, !noalias !4262
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #60, !dbg !4264
  fence syncscope("singlethread") seq_cst
  %19 = icmp ne {} addrspace(10)* %unbox.unpack86, null
  call void @llvm.assume(i1 noundef %19) #60
  %20 = bitcast {} addrspace(10)* %unbox.unpack86 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !4265
  %21 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %20 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !4279
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %21, i64 0, i32 1, !dbg !4279
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !4279, !tbaa !315, !range !86, !alias.scope !4280, !noalias !4283
  %22 = call i64 @llvm.abs.i64(i64 %unbox.unpack, i1 false) #60, !dbg !4285
  %23 = add nuw i64 %arraylen, %22, !dbg !4287
  %24 = call i64 @llvm.smax.i64(i64 %23, i64 noundef 0) #60, !dbg !4288
  %25 = getelementptr inbounds { {} addrspace(10)*, i64, i8*, i64, i64 }, { {} addrspace(10)*, i64, i8*, i64, i64 }* %2, i32 0, i32 1, !dbg !4291
  store i64 %24, i64* %25, align 8, !dbg !4291
  %26 = call {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6199626896 to {}*) to {} addrspace(10)*), i64 %24, i64 %24), !dbg !4291
  %27 = getelementptr inbounds { {} addrspace(10)*, i64, i8*, i64, i64 }, { {} addrspace(10)*, i64, i8*, i64, i64 }* %2, i32 0, i32 0, !dbg !4291
  store {} addrspace(10)* %26, {} addrspace(10)** %27, align 8, !dbg !4291
  %28 = bitcast {} addrspace(10)* %26 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4291
  %29 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %28, i32 0, i32 1, !dbg !4291
  %30 = load i64, i64 addrspace(10)* %29, align 8, !dbg !4291
  %31 = mul i64 %30, 8, !dbg !4291
  %32 = bitcast {} addrspace(10)* %26 to i8 addrspace(13)* addrspace(10)*, !dbg !4291
  %33 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %32, align 8, !dbg !4291
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %33, i8 0, i64 %31, i1 false), !dbg !4291
  %34 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 6199626896 to {}*) to {} addrspace(10)*), i64 %24, i64 %24) #61, !dbg !4291
  %35 = bitcast {} addrspace(10)* %34 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !4295
  %36 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %35 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !4295
  %arraylen_ptr4 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %36, i64 0, i32 1, !dbg !4295
  %arraylen5 = load i64, i64 addrspace(11)* %arraylen_ptr4, align 8, !dbg !4295, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !4300, !noalias !4303
  %37 = getelementptr inbounds { {} addrspace(10)*, i64, i8*, i64, i64 }, { {} addrspace(10)*, i64, i8*, i64, i64 }* %2, i32 0, i32 3, !dbg !4305
  store i64 %arraylen5, i64* %37, align 8, !dbg !4305
  %.not = icmp eq i64 %arraylen5, 0, !dbg !4305
  br i1 %.not, label %L47, label %top.L22_crit_edge, !dbg !4298

top.L22_crit_edge:                                ; preds = %top
  %"'ipc" = bitcast {} addrspace(10)* %26 to i8 addrspace(13)* addrspace(10)*, !dbg !4309
  %38 = bitcast {} addrspace(10)* %34 to i8 addrspace(13)* addrspace(10)*, !dbg !4309
  %"'ipc1" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc" to i8 addrspace(13)* addrspace(11)*, !dbg !4309
  %39 = addrspacecast i8 addrspace(13)* addrspace(10)* %38 to i8 addrspace(13)* addrspace(11)*, !dbg !4309
  %"arrayptr96.pre134'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc1", align 8, !dbg !4309, !tbaa !72, !alias.scope !4311, !noalias !4314
  %arrayptr96.pre134 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %39, align 8, !dbg !4309, !tbaa !72, !invariant.load !67, !alias.scope !4315, !noalias !4303
  %40 = shl nuw i64 %arraylen5, 3, !dbg !4298
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr96.pre134, i8 noundef 0, i64 %40, i1 noundef false) #60, !dbg !4309, !tbaa !268, !alias.scope !116, !noalias !4316
  br label %L47, !dbg !4319

L47:                                              ; preds = %top.L22_crit_edge, %top
  %41 = bitcast {} addrspace(10)* %34 to {} addrspace(10)* addrspace(10)*, !dbg !4319
  %42 = addrspacecast {} addrspace(10)* addrspace(10)* %41 to {} addrspace(10)* addrspace(11)*, !dbg !4319
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %42, i64 3, !dbg !4319
  %43 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*, !dbg !4319
  %arraysize = load i64, i64 addrspace(11)* %43, align 8, !dbg !4319, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !4300, !noalias !4303
  %arraysize_ptr14 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %42, i64 4, !dbg !4319
  %44 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr14 to i64 addrspace(11)*, !dbg !4319
  %arraysize15 = load i64, i64 addrspace(11)* %44, align 8, !dbg !4319, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !4300, !noalias !4303
  %45 = icmp sgt i64 %unbox.unpack, 0, !dbg !4322
  br i1 %45, label %L59, label %L52, !dbg !4323

L52:                                              ; preds = %L47
  %46 = sub i64 1, %unbox.unpack, !dbg !4324
  %47 = add nuw nsw i64 %arraysize, 1, !dbg !4325
  %48 = add nsw i64 %arraysize, %unbox.unpack, !dbg !4325
  %49 = call i64 @llvm.smin.i64(i64 %arraysize15, i64 %48) #60, !dbg !4326
  call fastcc void @julia_range_start_step_length_2068([3 x i64]* noalias nocapture noundef nonnull sret([3 x i64]) align 8 dereferenceable(24) %14, i64 signext %46, i64 signext %47, i64 signext %49) #60, !dbg !4328
  %.0.sroa_cast106 = bitcast [3 x i64]* %10 to i8*, !dbg !4331
  %50 = bitcast [3 x i64]* %14 to i8*, !dbg !4331
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %.0.sroa_cast106, i8* noundef nonnull align 8 dereferenceable(24) %50, i64 24, i1 false) #60, !dbg !4331, !tbaa !132, !alias.scope !134, !noalias !4333
  br label %L67, !dbg !4331

L59:                                              ; preds = %L47
  %51 = mul i64 %arraysize, %unbox.unpack, !dbg !4334
  %52 = add i64 %51, 1, !dbg !4325
  %53 = add nuw nsw i64 %arraysize, 1, !dbg !4325
  %54 = sub nsw i64 %arraysize15, %unbox.unpack, !dbg !4324
  %55 = call i64 @llvm.smin.i64(i64 %54, i64 %arraysize) #60, !dbg !4326
  call fastcc void @julia_range_start_step_length_2068([3 x i64]* noalias nocapture noundef nonnull sret([3 x i64]) align 8 dereferenceable(24) %15, i64 signext %52, i64 signext %53, i64 signext %55) #60, !dbg !4328
  %.0.sroa_cast107 = bitcast [3 x i64]* %10 to i8*, !dbg !4331
  %56 = bitcast [3 x i64]* %15 to i8*, !dbg !4331
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %.0.sroa_cast107, i8* noundef nonnull align 8 dereferenceable(24) %56, i64 24, i1 false) #60, !dbg !4331, !tbaa !132, !alias.scope !134, !noalias !4333
  br label %L67, !dbg !4331

L67:                                              ; preds = %L59, %L52
  %.pre-phi.pre-phi.pre-phi.pre-phi.pre-phi = bitcast [3 x i64]* %10 to i8*, !dbg !4320
  %57 = bitcast [3 x i64]* %13 to i8*, !dbg !4320
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %57, i8* noundef nonnull align 8 dereferenceable(24) %.pre-phi.pre-phi.pre-phi.pre-phi.pre-phi, i64 24, i1 false) #60, !dbg !4320, !noalias !4335
  %arraylen23 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !4336, !tbaa !315, !range !86, !alias.scope !4280, !noalias !4283
  %58 = getelementptr inbounds { {} addrspace(10)*, i64, i8*, i64, i64 }, { {} addrspace(10)*, i64, i8*, i64, i64 }* %2, i32 0, i32 4, !dbg !4342
  store i64 %arraylen23, i64* %58, align 8, !dbg !4342
  %.not99 = icmp eq i64 %arraylen23, 0, !dbg !4342
  br i1 %.not99, label %L160, label %L87.L98_crit_edge, !dbg !4337

L87.L98_crit_edge:                                ; preds = %L67
  %.phi.trans.insert112 = getelementptr inbounds [3 x i64], [3 x i64]* %13, i64 0, i64 1
  %unbox39.pre = load i64, i64* %.phi.trans.insert112, align 8, !dbg !4344, !tbaa !132, !alias.scope !4347, !noalias !4350
  %.phi.trans.insert113 = getelementptr inbounds [3 x i64], [3 x i64]* %13, i64 0, i64 0
  %unbox40.pre = load i64, i64* %.phi.trans.insert113, align 8, !dbg !4352, !tbaa !132, !alias.scope !4347, !noalias !4350
  %.phi.trans.insert115 = getelementptr inbounds [3 x i64], [3 x i64]* %13, i64 0, i64 2
  %unbox42.pre = load i64, i64* %.phi.trans.insert115, align 8, !dbg !4353, !tbaa !132, !alias.scope !4347, !noalias !4350
  %59 = icmp slt i64 %unbox39.pre, 1, !dbg !4355
  %60 = icmp sle i64 %unbox40.pre, %unbox42.pre, !dbg !4353
  %61 = icmp sle i64 %unbox42.pre, %unbox40.pre, !dbg !4357
  %.v129 = select i1 %59, i1 %61, i1 %60, !dbg !4359
  br i1 %.v129, label %L128.lr.ph, label %L125, !dbg !4360

L128.lr.ph:                                       ; preds = %L87.L98_crit_edge
  %"'ipc2" = bitcast {} addrspace(10)* %"unbox.unpack86'ipl" to double addrspace(13)* addrspace(10)*, !dbg !4361
  %62 = bitcast {} addrspace(10)* %unbox.unpack86 to double addrspace(13)* addrspace(10)*, !dbg !4361
  %"'ipc13" = bitcast {} addrspace(10)* %26 to double addrspace(13)* addrspace(10)*
  %63 = bitcast {} addrspace(10)* %34 to double addrspace(13)* addrspace(10)*
  %"'ipc14" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc13" to double addrspace(13)* addrspace(11)*
  %64 = addrspacecast double addrspace(13)* addrspace(10)* %63 to double addrspace(13)* addrspace(11)*
  %65 = add nuw nsw i64 %arraylen23, 1, !dbg !4360
  %"'ipc3" = bitcast double addrspace(13)* addrspace(10)* %"'ipc2" to {} addrspace(10)*, !dbg !4360
  %66 = bitcast double addrspace(13)* addrspace(10)* %62 to {} addrspace(10)*, !dbg !4360
  %67 = add nsw i64 %arraylen23, -1, !dbg !4360
  br label %L128, !dbg !4360

L125.loopexit:                                    ; preds = %L143
  br label %L125, !dbg !4360

L125:                                             ; preds = %L125.loopexit, %L87.L98_crit_edge
  %value_phi35.lcssa = phi i64 [ 1, %L87.L98_crit_edge ], [ %70, %L125.loopexit ]
  %68 = addrspacecast [3 x i64]* %13 to [3 x i64] addrspace(11)*, !dbg !4360
  call fastcc void @julia_throw_boundserror_2066([3 x i64] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(24) %68, i64 signext %value_phi35.lcssa) #62, !dbg !4360
  unreachable, !dbg !4360

L128:                                             ; preds = %L143, %L128.lr.ph
  %iv = phi i64 [ %iv.next, %L143 ], [ 0, %L128.lr.ph ]
  %69 = phi {} addrspace(10)* [ %"'ipc3", %L128.lr.ph ], [ %"'ipc5", %L143 ]
  %nodecayed.value_phi36132.in = phi {} addrspace(10)* [ %66, %L128.lr.ph ], [ %91, %L143 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4362
  %70 = add i64 %iv, 2, !dbg !4362
  %71 = shl i64 %iv, 3, !dbg !4362
  %72 = mul i64 %unbox39.pre, %iv, !dbg !4362
  %73 = add i64 %unbox40.pre, %72, !dbg !4362
  %"'ipc6" = bitcast {} addrspace(10)* %69 to double addrspace(13)* addrspace(10)*, !dbg !4362
  %74 = bitcast {} addrspace(10)* %nodecayed.value_phi36132.in to double addrspace(13)* addrspace(10)*, !dbg !4362
  %"'ipc7" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc6" to double addrspace(13)* addrspace(11)*, !dbg !4362
  %75 = addrspacecast double addrspace(13)* addrspace(10)* %74 to double addrspace(13)* addrspace(11)*, !dbg !4362
  %"'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc7", align 8, !dbg !4362, !alias.scope !4363, !noalias !4366
  %76 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %75, align 8, !dbg !4362, !alias.scope !4366, !noalias !4363
  %77 = bitcast double addrspace(13)* %76 to i8 addrspace(13)*, !dbg !4362
  %78 = getelementptr i8, i8 addrspace(13)* %77, i64 %71, !dbg !4362
  %79 = bitcast i8 addrspace(13)* %78 to double addrspace(13)*, !dbg !4362
  %80 = add i64 %73, -1, !dbg !4362
  %inbounds = icmp ult i64 %80, %arraylen5, !dbg !4362
  br i1 %inbounds, label %idxend57, label %oob, !dbg !4362

L143:                                             ; preds = %idxend57
  %81 = add nsw i64 %70, -1, !dbg !4368
  %82 = mul i64 %81, %unbox39.pre, !dbg !4344
  %83 = add i64 %82, %unbox40.pre, !dbg !4352
  %84 = icmp sle i64 %83, %unbox42.pre, !dbg !4353
  %85 = icmp sle i64 %unbox40.pre, %83, !dbg !4357
  %86 = and i1 %84, %85, !dbg !4373
  %87 = icmp sle i64 %83, %unbox40.pre, !dbg !4353
  %88 = icmp sle i64 %unbox42.pre, %83, !dbg !4357
  %89 = and i1 %87, %88, !dbg !4373
  %.v = select i1 %59, i1 %89, i1 %86, !dbg !4359
  %"'ipc4" = bitcast double addrspace(13)* addrspace(10)* %"'ipc2" to double addrspace(10)*, !dbg !4360
  %90 = bitcast double addrspace(13)* addrspace(10)* %62 to double addrspace(10)*, !dbg !4360
  %"'ipc5" = bitcast double addrspace(10)* %"'ipc4" to {} addrspace(10)*, !dbg !4360
  %91 = bitcast double addrspace(10)* %90 to {} addrspace(10)*, !dbg !4360
  br i1 %.v, label %L128, label %L125.loopexit, !dbg !4360

L160.loopexit:                                    ; preds = %idxend57
  br label %L160, !dbg !4374

L160:                                             ; preds = %L160.loopexit, %L67
  %92 = getelementptr inbounds { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %1, i32 0, i32 1, !dbg !4374
  store {} addrspace(10)* %34, {} addrspace(10)** %92, align 8, !dbg !4374
  %93 = getelementptr inbounds { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %1, i32 0, i32 2, !dbg !4374
  store {} addrspace(10)* %26, {} addrspace(10)** %93, align 8, !dbg !4374
  %94 = load { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %1, align 8, !dbg !4374
  ret { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* } %94, !dbg !4374

oob:                                              ; preds = %L128
  %errorbox = alloca i64, align 8, !dbg !4362
  store i64 %73, i64* %errorbox, align 8, !dbg !4362, !noalias !4335
  %95 = addrspacecast {} addrspace(10)* %34 to {} addrspace(12)*, !dbg !4362
  call void @ijl_bounds_error_ints({} addrspace(12)* %95, i64* nonnull align 8 %errorbox, i64 1) #60, !dbg !4362
  unreachable, !dbg !4362

idxend57:                                         ; preds = %L128
  %value_phi36132 = load double, double addrspace(13)* %79, align 8, !dbg !4375, !tbaa !268, !alias.scope !4376, !noalias !4379
  %"arrayptr50101'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc14", align 8, !dbg !4362, !tbaa !72, !alias.scope !4311, !noalias !4314, !nonnull !67
  %arrayptr50101 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %64, align 8, !dbg !4362, !tbaa !72, !invariant.load !67, !alias.scope !4315, !noalias !4303, !nonnull !67
  %96 = getelementptr inbounds double, double addrspace(13)* %arrayptr50101, i64 %80, !dbg !4362
  %arrayref51 = load double, double addrspace(13)* %96, align 8, !dbg !4362, !tbaa !268, !alias.scope !4381, !noalias !4384
  %97 = fadd double %value_phi36132, %arrayref51, !dbg !4386
  store double %97, double addrspace(13)* %96, align 8, !dbg !4387, !tbaa !268, !alias.scope !4381, !noalias !4388
  %exitcond.not = icmp eq i64 %70, %65, !dbg !4389
  br i1 %exitcond.not, label %L160.loopexit, label %L143, !dbg !4370
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia__diagm_2062({ i64, {} addrspace(10)* } addrspace(11)* nocapture readonly align 8 dereferenceable(16) %0, { i64, {} addrspace(10)* } addrspace(11)* nocapture align 8 %"'", { {} addrspace(10)*, i64, i8*, i64, i64 } %tapeArg) unnamed_addr #59 !dbg !4391 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %1 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %1, align 8
  %"value_phi36132'de" = alloca double, align 8
  %2 = getelementptr double, double* %"value_phi36132'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"arrayref51'de" = alloca double, align 8
  %3 = getelementptr double, double* %"arrayref51'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %4 = extractvalue { {} addrspace(10)*, i64, i8*, i64, i64 } %tapeArg, 2
  %5 = bitcast i8* %4 to [3 x i64]*, !enzyme_caststack !67
  %6 = call {}*** @julia.get_pgcstack() #60
  %unbox.elt = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %0, i64 0, i32 0
  %unbox.unpack = load i64, i64 addrspace(11)* %unbox.elt, align 8, !tbaa !72, !alias.scope !4392, !noalias !4395
  %"unbox.elt85'ipg" = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %"'", i64 0, i32 1
  %unbox.elt85 = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %0, i64 0, i32 1
  %"unbox.unpack86'ipl" = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"unbox.elt85'ipg", align 8, !tbaa !72, !alias.scope !4397, !noalias !4398
  %unbox.unpack86 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %unbox.elt85, align 8, !tbaa !72, !alias.scope !4392, !noalias !4395
  %7 = extractvalue { {} addrspace(10)*, i64, i8*, i64, i64 } %tapeArg, 1, !dbg !4399
  %8 = extractvalue { {} addrspace(10)*, i64, i8*, i64, i64 } %tapeArg, 0, !dbg !4414
  %arraylen5 = extractvalue { {} addrspace(10)*, i64, i8*, i64, i64 } %tapeArg, 3, !dbg !4418
  %.not = icmp eq i64 %arraylen5, 0, !dbg !4418
  br i1 %.not, label %L47, label %top.L22_crit_edge, !dbg !4422

top.L22_crit_edge:                                ; preds = %top
  %"'ipc" = bitcast {} addrspace(10)* %8 to i8 addrspace(13)* addrspace(10)*, !dbg !4424
  %"'ipc16" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc" to i8 addrspace(13)* addrspace(11)*, !dbg !4424
  %"arrayptr96.pre134'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc16", align 8, !dbg !4424, !tbaa !72, !alias.scope !4426, !noalias !4429
  %9 = shl nuw i64 %arraylen5, 3, !dbg !4422
  br label %L47, !dbg !4431

L47:                                              ; preds = %top.L22_crit_edge, %top
  %10 = icmp sgt i64 %unbox.unpack, 0, !dbg !4434
  br i1 %10, label %L59, label %L52, !dbg !4435

L52:                                              ; preds = %L47
  br label %L67, !dbg !4436

L59:                                              ; preds = %L47
  br label %L67, !dbg !4436

L67:                                              ; preds = %L59, %L52
  %arraylen23 = extractvalue { {} addrspace(10)*, i64, i8*, i64, i64 } %tapeArg, 4, !dbg !4438
  %.not99 = icmp eq i64 %arraylen23, 0, !dbg !4438
  br i1 %.not99, label %L160, label %L87.L98_crit_edge, !dbg !4440

L87.L98_crit_edge:                                ; preds = %L67
  %.phi.trans.insert112 = getelementptr inbounds [3 x i64], [3 x i64]* %5, i64 0, i64 1
  %unbox39.pre = load i64, i64* %.phi.trans.insert112, align 8, !dbg !4445, !tbaa !132, !alias.scope !4448, !noalias !4451, !invariant.group !4453
  %.phi.trans.insert113 = getelementptr inbounds [3 x i64], [3 x i64]* %5, i64 0, i64 0
  %unbox40.pre = load i64, i64* %.phi.trans.insert113, align 8, !dbg !4454, !tbaa !132, !alias.scope !4448, !noalias !4451, !invariant.group !4455
  br i1 true, label %L128.lr.ph, label %L125, !dbg !4456

L128.lr.ph:                                       ; preds = %L87.L98_crit_edge
  %"'ipc45" = bitcast {} addrspace(10)* %"unbox.unpack86'ipl" to double addrspace(13)* addrspace(10)*, !dbg !4457
  %11 = bitcast {} addrspace(10)* %unbox.unpack86 to double addrspace(13)* addrspace(10)*, !dbg !4457
  %"'ipc70" = bitcast {} addrspace(10)* %8 to double addrspace(13)* addrspace(10)*
  %"'ipc71" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc70" to double addrspace(13)* addrspace(11)*
  %12 = add nuw nsw i64 %arraylen23, 1, !dbg !4456
  %"'ipc46" = bitcast double addrspace(13)* addrspace(10)* %"'ipc45" to {} addrspace(10)*, !dbg !4456
  %13 = bitcast double addrspace(13)* addrspace(10)* %11 to {} addrspace(10)*, !dbg !4456
  %14 = add nsw i64 %arraylen23, -1, !dbg !4456
  br label %L128, !dbg !4456

L125.loopexit:                                    ; preds = %L143
  unreachable

L125:                                             ; preds = %L87.L98_crit_edge
  unreachable

L128:                                             ; preds = %L143, %L128.lr.ph
  %iv = phi i64 [ %iv.next, %L143 ], [ 0, %L128.lr.ph ]
  %15 = phi {} addrspace(10)* [ %"'ipc46", %L128.lr.ph ], [ %"'ipc48", %L143 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4458
  %16 = add i64 %iv, 2, !dbg !4458
  %17 = shl i64 %iv, 3, !dbg !4458
  %18 = mul i64 %unbox39.pre, %iv, !dbg !4458
  %19 = add i64 %unbox40.pre, %18, !dbg !4458
  %"'ipc49" = bitcast {} addrspace(10)* %15 to double addrspace(13)* addrspace(10)*, !dbg !4458
  %"'ipc50" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc49" to double addrspace(13)* addrspace(11)*, !dbg !4458
  %"'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc50", align 8, !dbg !4458, !alias.scope !4459, !noalias !4462, !invariant.group !4464
  %"'ipc77" = bitcast double addrspace(13)* %"'ipl" to i8 addrspace(13)*, !dbg !4458
  %"'ipg78" = getelementptr i8, i8 addrspace(13)* %"'ipc77", i64 %17, !dbg !4458
  %"'ipc79" = bitcast i8 addrspace(13)* %"'ipg78" to double addrspace(13)*, !dbg !4458
  %20 = add i64 %19, -1, !dbg !4458
  br i1 true, label %idxend57, label %oob, !dbg !4458

L143:                                             ; preds = %idxend57
  %"'ipc47" = bitcast double addrspace(13)* addrspace(10)* %"'ipc45" to double addrspace(10)*, !dbg !4456
  %21 = bitcast double addrspace(13)* addrspace(10)* %11 to double addrspace(10)*, !dbg !4456
  %"'ipc48" = bitcast double addrspace(10)* %"'ipc47" to {} addrspace(10)*, !dbg !4456
  %22 = bitcast double addrspace(10)* %21 to {} addrspace(10)*, !dbg !4456
  br i1 true, label %L128, label %L125.loopexit, !dbg !4456

L160.loopexit:                                    ; preds = %idxend57
  br label %L160, !dbg !4465

L160:                                             ; preds = %L160.loopexit, %L67
  br label %invertL160, !dbg !4465

oob:                                              ; preds = %L128
  unreachable

idxend57:                                         ; preds = %L128
  %"arrayptr50101'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc71", align 8, !dbg !4458, !tbaa !72, !alias.scope !4426, !noalias !4429, !nonnull !67
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr50101'ipl", i64 %20, !dbg !4458
  %exitcond.not = icmp eq i64 %16, %12, !dbg !4466
  br i1 %exitcond.not, label %L160.loopexit, label %L143, !dbg !4468

inverttop:                                        ; preds = %invertL47, %inverttop.L22_crit_edge
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  call void @free(i8* %4)
  ret void

inverttop.L22_crit_edge:                          ; preds = %invertL47
  %_unwrap = shl nuw i64 %arraylen5, 3, !dbg !4424
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %8 to i8 addrspace(13)* addrspace(10)*, !dbg !4424
  %"'ipc16_unwrap" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc_unwrap" to i8 addrspace(13)* addrspace(11)*, !dbg !4424
  %"arrayptr96.pre134'il_phi_unwrap" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc16_unwrap", align 8, !dbg !4424, !tbaa !72, !alias.scope !4426, !noalias !4429
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %"arrayptr96.pre134'il_phi_unwrap", i8 noundef 0, i64 %_unwrap, i1 noundef false) #60, !dbg !4424, !tbaa !268, !noalias !4191
  br label %inverttop

invertL47:                                        ; preds = %invertL59, %invertL52
  br i1 %.not, label %inverttop, label %inverttop.L22_crit_edge

invertL52:                                        ; preds = %invertL67
  br label %invertL47

invertL59:                                        ; preds = %invertL67
  br label %invertL47

invertL67:                                        ; preds = %invertL160, %invertL87.L98_crit_edge
  br i1 %10, label %invertL59, label %invertL52

invertL87.L98_crit_edge:                          ; preds = %invertL128.lr.ph
  br label %invertL67

invertL128.lr.ph:                                 ; preds = %invertL128
  br label %invertL87.L98_crit_edge

invertL128:                                       ; preds = %invertidxend57_phimerge
  %23 = load i64, i64* %"iv'ac", align 8
  %24 = icmp eq i64 %23, 0
  %25 = xor i1 %24, true
  br i1 %24, label %invertL128.lr.ph, label %incinvertL128

incinvertL128:                                    ; preds = %invertL128
  %26 = load i64, i64* %"iv'ac", align 8
  %27 = add nsw i64 %26, -1
  store i64 %27, i64* %"iv'ac", align 8
  br label %invertL143

invertL143:                                       ; preds = %incinvertL128
  br label %invertidxend57

invertL160.loopexit:                              ; preds = %invertL160
  %_unwrap68 = add nsw i64 %arraylen23, -1
  br label %mergeinvertL128_L160.loopexit

mergeinvertL128_L160.loopexit:                    ; preds = %invertL160.loopexit
  store i64 %_unwrap68, i64* %"iv'ac", align 8
  br label %invertidxend57

invertL160:                                       ; preds = %L160
  br i1 %.not99, label %invertL67, label %invertL160.loopexit

invertidxend57:                                   ; preds = %mergeinvertL128_L160.loopexit, %invertL143
  %28 = load i64, i64* %"iv'ac", align 8, !dbg !4471
  %"'ipc70_unwrap" = bitcast {} addrspace(10)* %8 to double addrspace(13)* addrspace(10)*, !dbg !4471
  %"'ipc71_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc70_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4471
  %"arrayptr50101'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc71_unwrap", align 8, !dbg !4458, !tbaa !72, !alias.scope !4426, !noalias !4429, !nonnull !67
  %.phi.trans.insert113_unwrap = getelementptr inbounds [3 x i64], [3 x i64]* %5, i64 0, i64 0, !dbg !4471
  %unbox40.pre_unwrap = load i64, i64* %.phi.trans.insert113_unwrap, align 8, !dbg !4454, !tbaa !132, !alias.scope !4448, !noalias !4451, !invariant.group !4455
  %.phi.trans.insert112_unwrap = getelementptr inbounds [3 x i64], [3 x i64]* %5, i64 0, i64 1, !dbg !4471
  %unbox39.pre_unwrap = load i64, i64* %.phi.trans.insert112_unwrap, align 8, !dbg !4445, !tbaa !132, !alias.scope !4448, !noalias !4451, !invariant.group !4453
  %_unwrap72 = mul i64 %unbox39.pre_unwrap, %28, !dbg !4471
  %_unwrap73 = add i64 %unbox40.pre_unwrap, %_unwrap72, !dbg !4471
  %_unwrap74 = add i64 %_unwrap73, -1, !dbg !4471
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr50101'il_phi_unwrap", i64 %_unwrap74, !dbg !4471
  %29 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4471, !tbaa !268, !alias.scope !4472, !noalias !4475
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4471, !tbaa !268, !alias.scope !4472, !noalias !4475
  %30 = load double, double* %"'de", align 8, !dbg !4471
  %31 = fadd fast double %30, %29, !dbg !4471
  store double %31, double* %"'de", align 8, !dbg !4471
  %32 = load double, double* %"'de", align 8, !dbg !4477
  store double 0.000000e+00, double* %"'de", align 8, !dbg !4477
  %33 = load double, double* %"value_phi36132'de", align 8, !dbg !4477
  %34 = fadd fast double %33, %32, !dbg !4477
  store double %34, double* %"value_phi36132'de", align 8, !dbg !4477
  %35 = load double, double* %"arrayref51'de", align 8, !dbg !4477
  %36 = fadd fast double %35, %32, !dbg !4477
  store double %36, double* %"arrayref51'de", align 8, !dbg !4477
  %37 = load double, double* %"arrayref51'de", align 8, !dbg !4458
  store double 0.000000e+00, double* %"arrayref51'de", align 8, !dbg !4458
  %38 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4458, !tbaa !268, !alias.scope !4472, !noalias !4478
  %39 = fadd fast double %38, %37, !dbg !4458
  store double %39, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4458, !tbaa !268, !alias.scope !4472, !noalias !4478
  %40 = load double, double* %"value_phi36132'de", align 8, !dbg !4479
  store double 0.000000e+00, double* %"value_phi36132'de", align 8, !dbg !4479
  %41 = load i64, i64* %"iv'ac", align 8, !dbg !4479
  %"'ipc45_unwrap81" = bitcast {} addrspace(10)* %"unbox.unpack86'ipl" to double addrspace(13)* addrspace(10)*, !dbg !4479
  %"'ipc46_unwrap" = bitcast double addrspace(13)* addrspace(10)* %"'ipc45_unwrap81" to {} addrspace(10)*, !dbg !4479
  %42 = icmp ne i64 %41, 0, !dbg !4479
  br i1 %42, label %invertidxend57_phirc, label %invertidxend57_phirc80, !dbg !4479

invertidxend57_phirc:                             ; preds = %invertidxend57
  %43 = sub nuw i64 %41, 1
  %"'ipc45_unwrap" = bitcast {} addrspace(10)* %"unbox.unpack86'ipl" to double addrspace(13)* addrspace(10)*
  %"'ipc47_unwrap" = bitcast double addrspace(13)* addrspace(10)* %"'ipc45_unwrap" to double addrspace(10)*
  %"'ipc48_unwrap" = bitcast double addrspace(10)* %"'ipc47_unwrap" to {} addrspace(10)*
  br label %invertidxend57_phimerge

invertidxend57_phirc80:                           ; preds = %invertidxend57
  br label %invertidxend57_phimerge

invertidxend57_phimerge:                          ; preds = %invertidxend57_phirc80, %invertidxend57_phirc
  %44 = phi {} addrspace(10)* [ %"'ipc48_unwrap", %invertidxend57_phirc ], [ %"'ipc46_unwrap", %invertidxend57_phirc80 ], !dbg !4479
  %"'ipc49_unwrap" = bitcast {} addrspace(10)* %44 to double addrspace(13)* addrspace(10)*, !dbg !4479
  %"'ipc50_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc49_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4479
  %"'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc50_unwrap", align 8, !dbg !4458, !alias.scope !4459, !noalias !4462, !invariant.group !4464
  %"'ipc77_unwrap" = bitcast double addrspace(13)* %"'ipl_unwrap" to i8 addrspace(13)*, !dbg !4479
  %_unwrap82 = shl i64 %41, 3, !dbg !4479
  %"'ipg78_unwrap" = getelementptr i8, i8 addrspace(13)* %"'ipc77_unwrap", i64 %_unwrap82, !dbg !4479
  %"'ipc79_unwrap" = bitcast i8 addrspace(13)* %"'ipg78_unwrap" to double addrspace(13)*, !dbg !4479
  %45 = load double, double addrspace(13)* %"'ipc79_unwrap", align 8, !dbg !4479, !tbaa !268, !alias.scope !4480, !noalias !4483
  %46 = fadd fast double %45, %40, !dbg !4479
  store double %46, double addrspace(13)* %"'ipc79_unwrap", align 8, !dbg !4479, !tbaa !268, !alias.scope !4480, !noalias !4483
  br label %invertL128
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia___2053({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1) unnamed_addr #60 !dbg !4528 {
top:
  %2 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !3229
  %newstruct58 = bitcast i8* %2 to [2 x [1 x i64]]*, !enzyme_caststack !67
  %3 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !3229
  %newstruct172 = bitcast i8* %3 to [2 x [1 x i64]]*, !enzyme_caststack !67
  %4 = call {}*** @julia.get_pgcstack() #61
  %ptls_field211 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field211 to i64***
  %ptls_load212213 = load i64**, i64*** %5, align 8, !tbaa !68
  %6 = getelementptr inbounds i64*, i64** %ptls_load212213, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !72, !invariant.load !67
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #61, !dbg !4529
  fence syncscope("singlethread") seq_cst
  %7 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*, !dbg !4530
  %arraysize_ptr214 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 3, !dbg !4530
  %8 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr214 to i64 addrspace(10)*, !dbg !4530
  %9 = addrspacecast i64 addrspace(10)* %8 to i64 addrspace(11)*, !dbg !4530
  %arraysize = load i64, i64 addrspace(11)* %9, align 8, !dbg !4530, !tbaa !85, !range !86, !alias.scope !87, !noalias !91
  %arraysize_ptr2215 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 4, !dbg !4530
  %10 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr2215 to i64 addrspace(10)*, !dbg !4530
  %11 = addrspacecast i64 addrspace(10)* %10 to i64 addrspace(11)*, !dbg !4530
  %arraysize3 = load i64, i64 addrspace(11)* %11, align 16, !dbg !4530, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %12 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !4530
  %13 = addrspacecast {} addrspace(10)* addrspace(10)* %12 to {} addrspace(10)* addrspace(11)*, !dbg !4530
  %arraysize_ptr7 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %13, i64 3, !dbg !4530
  %14 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr7 to i64 addrspace(11)*, !dbg !4530
  %arraysize8 = load i64, i64 addrspace(11)* %14, align 8, !dbg !4530, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %arraysize_ptr9 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %13, i64 4, !dbg !4530
  %15 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr9 to i64 addrspace(11)*, !dbg !4530
  %arraysize10 = load i64, i64 addrspace(11)* %15, align 8, !dbg !4530, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %.not = icmp eq i64 %arraysize, %arraysize8, !dbg !4534
  br i1 %.not, label %pass18.1, label %L36, !dbg !4537

L36:                                              ; preds = %pass18.1, %top
  %value_phi15.lcssa279 = phi i64 [ 1, %top ], [ 2, %pass18.1 ]
  %current_task20216 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !4538
  %current_task20 = bitcast {}*** %current_task20216 to {}**, !dbg !4538
  %box = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task20, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4774641744 to {}*) to {} addrspace(10)*)) #62, !dbg !4538
  %16 = bitcast {} addrspace(10)* %box to i8 addrspace(10)*, !dbg !4538
  %newstruct6.sroa.0.0..sroa_cast = bitcast {} addrspace(10)* %box to i64 addrspace(10)*, !dbg !4538
  store i64 %arraysize, i64 addrspace(10)* %newstruct6.sroa.0.0..sroa_cast, align 8, !dbg !4538, !tbaa !85, !alias.scope !108, !noalias !4539
  %newstruct6.sroa.2.0..sroa_idx = getelementptr inbounds i8, i8 addrspace(10)* %16, i64 8, !dbg !4538
  %newstruct6.sroa.2.0..sroa_cast = bitcast i8 addrspace(10)* %newstruct6.sroa.2.0..sroa_idx to i64 addrspace(10)*, !dbg !4538
  store i64 %arraysize3, i64 addrspace(10)* %newstruct6.sroa.2.0..sroa_cast, align 8, !dbg !4538, !tbaa !85, !alias.scope !108, !noalias !4539
  %box22 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task20, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4774641744 to {}*) to {} addrspace(10)*)) #62, !dbg !4538
  %17 = bitcast {} addrspace(10)* %box22 to i8 addrspace(10)*, !dbg !4538
  %newstruct14.sroa.0.0..sroa_cast = bitcast {} addrspace(10)* %box22 to i64 addrspace(10)*, !dbg !4538
  store i64 %arraysize8, i64 addrspace(10)* %newstruct14.sroa.0.0..sroa_cast, align 8, !dbg !4538, !tbaa !85, !alias.scope !108, !noalias !4539
  %newstruct14.sroa.3.0..sroa_idx = getelementptr inbounds i8, i8 addrspace(10)* %17, i64 8, !dbg !4538
  %newstruct14.sroa.3.0..sroa_cast = bitcast i8 addrspace(10)* %newstruct14.sroa.3.0..sroa_idx to i64 addrspace(10)*, !dbg !4538
  store i64 %arraysize10, i64 addrspace(10)* %newstruct14.sroa.3.0..sroa_cast, align 8, !dbg !4538, !tbaa !85, !alias.scope !108, !noalias !4539
  %18 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %value_phi15.lcssa279) #63, !dbg !4538
  %19 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4774659952 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4729112992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733824 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733792 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box22, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733760 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %18) #64, !dbg !4538
  %box24 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task20, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #62, !dbg !4538
  %20 = bitcast {} addrspace(10)* %box24 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !4538
  %21 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %20, i64 0, i64 0, !dbg !4538
  store {} addrspace(10)* %19, {} addrspace(10)* addrspace(10)* %21, align 8, !dbg !4538, !tbaa !112, !alias.scope !116, !noalias !4542
  %22 = addrspacecast {} addrspace(10)* %box24 to {} addrspace(12)*, !dbg !4538
  call void @ijl_throw({} addrspace(12)* %22) #61, !dbg !4538
  unreachable, !dbg !4538

pass18.1:                                         ; preds = %top
  %.not.1 = icmp eq i64 %arraysize3, %arraysize10, !dbg !4534
  br i1 %.not.1, label %L117, label %L36, !dbg !4537

L117:                                             ; preds = %pass18.1
  %memcpy_refined_dst = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct58, i64 0, i64 0, i64 0, !dbg !4543
  store i64 %arraysize, i64* %memcpy_refined_dst, align 8, !dbg !4543, !tbaa !132, !alias.scope !134, !noalias !4550
  %memcpy_refined_dst60 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct58, i64 0, i64 1, i64 0, !dbg !4543
  store i64 %arraysize3, i64* %memcpy_refined_dst60, align 8, !dbg !4543, !tbaa !132, !alias.scope !134, !noalias !4550
  %23 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6199626896 to {}*) to {} addrspace(10)*), i64 %arraysize, i64 %arraysize3) #63, !dbg !4551
  %24 = bitcast {} addrspace(10)* %23 to {} addrspace(10)* addrspace(10)*, !dbg !4559
  %25 = addrspacecast {} addrspace(10)* addrspace(10)* %24 to {} addrspace(10)* addrspace(11)*, !dbg !4559
  %arraysize_ptr69 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 3, !dbg !4559
  %26 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr69 to i64 addrspace(11)*, !dbg !4559
  %arraysize70 = load i64, i64 addrspace(11)* %26, align 8, !dbg !4559, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %.not222 = icmp eq i64 %arraysize70, %arraysize, !dbg !4563
  br i1 %.not222, label %L164, label %L153.L324_crit_edge, !dbg !4567

L153.L324_crit_edge:                              ; preds = %L117
  %arraysize_ptr166.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 4
  %.phi.trans.insert = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr166.phi.trans.insert to i64 addrspace(11)*
  %arraysize167.pre = load i64, i64 addrspace(11)* %.phi.trans.insert, align 8, !dbg !4559, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  br label %L324, !dbg !4567

L164:                                             ; preds = %L117
  %arraysize_ptr71 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 4, !dbg !4559
  %27 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr71 to i64 addrspace(11)*, !dbg !4559
  %arraysize72 = load i64, i64 addrspace(11)* %27, align 8, !dbg !4559, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %.not242 = icmp eq i64 %arraysize72, %arraysize3, !dbg !4568
  br i1 %.not242, label %L174, label %L324, !dbg !4561

L174:                                             ; preds = %L164
  %28 = addrspacecast {} addrspace(10)* %23 to {} addrspace(11)*, !dbg !4572
  %29 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !4572
  %.not223 = icmp eq {} addrspace(11)* %28, %29, !dbg !4572
  br i1 %.not223, label %L190, label %L177, !dbg !4572

L177:                                             ; preds = %L174
  %30 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %28) #65, !dbg !4577
  %31 = bitcast {}* %30 to i8**, !dbg !4577
  %arrayptr160 = load i8*, i8** %31, align 8, !dbg !4577, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67
  %32 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %29) #65, !dbg !4577
  %33 = bitcast {}* %32 to i8**, !dbg !4577
  %arrayptr162 = load i8*, i8** %33, align 8, !dbg !4577, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67
  %.not241.not = icmp eq i8* %arrayptr160, %arrayptr162, !dbg !4582
  br i1 %.not241.not, label %L185, label %L190, !dbg !4581

L185:                                             ; preds = %L177
  %34 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %0) #61, !dbg !4585
  %.pre = bitcast {} addrspace(10)* %34 to {} addrspace(10)* addrspace(10)*, !dbg !4587
  %arraysize_ptr77271.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %.pre, i64 3
  %.phi.trans.insert282 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr77271.phi.trans.insert to i64 addrspace(10)*
  %.phi.trans.insert283 = addrspacecast i64 addrspace(10)* %.phi.trans.insert282 to i64 addrspace(11)*
  %arraysize78.pre = load i64, i64 addrspace(11)* %.phi.trans.insert283, align 8, !dbg !4587, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %arraysize_ptr79272.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %.pre, i64 4
  %.phi.trans.insert285 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr79272.phi.trans.insert to i64 addrspace(10)*
  %.phi.trans.insert286 = addrspacecast i64 addrspace(10)* %.phi.trans.insert285 to i64 addrspace(11)*
  %arraysize80.pre = load i64, i64 addrspace(11)* %.phi.trans.insert286, align 8, !dbg !4587, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  br label %L190, !dbg !4591

L190:                                             ; preds = %L185, %L177, %L174
  %arraysize80 = phi i64 [ %arraysize80.pre, %L185 ], [ %arraysize3, %L174 ], [ %arraysize3, %L177 ], !dbg !4587
  %arraysize78 = phi i64 [ %arraysize78.pre, %L185 ], [ %arraysize, %L174 ], [ %arraysize, %L177 ], !dbg !4587
  %value_phi76 = phi {} addrspace(10)* [ %34, %L185 ], [ %0, %L174 ], [ %0, %L177 ]
  %.not229 = icmp eq i64 %arraysize80, 1, !dbg !4594
  %.not228 = icmp eq i64 %arraysize78, 1, !dbg !4599
  %35 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !4602
  %.not224 = icmp eq {} addrspace(11)* %28, %35, !dbg !4602
  br i1 %.not224, label %L220, label %L207, !dbg !4602

L207:                                             ; preds = %L190
  %36 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %28) #65, !dbg !4605
  %37 = bitcast {}* %36 to i8**, !dbg !4605
  %arrayptr155 = load i8*, i8** %37, align 8, !dbg !4605, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67
  %38 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %35) #65, !dbg !4605
  %39 = bitcast {}* %38 to i8**, !dbg !4605
  %arrayptr157 = load i8*, i8** %39, align 8, !dbg !4605, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67
  %.not240.not = icmp eq i8* %arrayptr155, %arrayptr157, !dbg !4610
  br i1 %.not240.not, label %L215, label %L220, !dbg !4609

L215:                                             ; preds = %L207
  %40 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %1) #61, !dbg !4613
  %.phi.trans.insert260 = bitcast {} addrspace(10)* %40 to {} addrspace(10)* addrspace(10)*
  %.phi.trans.insert261 = addrspacecast {} addrspace(10)* addrspace(10)* %.phi.trans.insert260 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr88.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert261, i64 4
  %.phi.trans.insert262 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr88.phi.trans.insert to i64 addrspace(11)*
  %arraysize89.pre = load i64, i64 addrspace(11)* %.phi.trans.insert262, align 8, !dbg !4615, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %arraysize_ptr86.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert261, i64 3
  %.phi.trans.insert264 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr86.phi.trans.insert to i64 addrspace(11)*
  %arraysize87.pre = load i64, i64 addrspace(11)* %.phi.trans.insert264, align 8, !dbg !4615, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  br label %L220, !dbg !4591

L220:                                             ; preds = %L215, %L207, %L190
  %arraysize87 = phi i64 [ %arraysize, %L190 ], [ %arraysize87.pre, %L215 ], [ %arraysize, %L207 ], !dbg !4615
  %arraysize89 = phi i64 [ %arraysize3, %L190 ], [ %arraysize89.pre, %L215 ], [ %arraysize3, %L207 ], !dbg !4615
  %value_phi85 = phi {} addrspace(10)* [ %1, %L190 ], [ %40, %L215 ], [ %1, %L207 ]
  %.not232 = icmp eq i64 %arraysize89, 1, !dbg !4619
  %.not231 = icmp eq i64 %arraysize87, 1, !dbg !4624
  %.not225.not = icmp eq i64 %arraysize3, 0, !dbg !4627
  br i1 %.not225.not, label %L397, label %L251.preheader, !dbg !4631

L251.preheader:                                   ; preds = %L220
  %.not226 = icmp eq i64 %arraysize, 0
  %41 = bitcast {} addrspace(10)* %value_phi76 to double addrspace(13)* addrspace(10)*
  %42 = addrspacecast double addrspace(13)* addrspace(10)* %41 to double addrspace(13)* addrspace(11)*
  %43 = bitcast {} addrspace(10)* %value_phi85 to double addrspace(13)* addrspace(10)*
  %44 = addrspacecast double addrspace(13)* addrspace(10)* %43 to double addrspace(13)* addrspace(11)*
  %45 = bitcast {} addrspace(10)* %23 to double addrspace(13)* addrspace(10)*
  %46 = addrspacecast double addrspace(13)* addrspace(10)* %45 to double addrspace(13)* addrspace(11)*
  br label %L251, !dbg !4632

L251:                                             ; preds = %L302, %L251.preheader
  %iv = phi i64 [ %iv.next, %L302 ], [ 0, %L251.preheader ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4632
  br i1 %.not226, label %L302, label %L298.lr.ph, !dbg !4632

L298.lr.ph:                                       ; preds = %L251
  %arrayptr230 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %42, align 8, !tbaa !72, !invariant.load !67, !alias.scope !4633, !noalias !96, !nonnull !67
  %value_phi99.op = add nsw i64 %iv.next, -1
  %47 = select i1 %.not229, i64 0, i64 %value_phi99.op
  %48 = mul i64 %47, %arraysize78
  %arrayptr115234 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %44, align 8, !tbaa !72, !invariant.load !67, !alias.scope !4633, !noalias !96, !nonnull !67
  %49 = select i1 %.not232, i64 0, i64 %value_phi99.op
  %50 = mul i64 %49, %arraysize87
  %51 = mul i64 %value_phi99.op, %arraysize
  %arrayptr121235 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %46, align 8, !tbaa !72, !invariant.load !67, !alias.scope !4633, !noalias !96, !nonnull !67
  br label %L298, !dbg !4634

L298:                                             ; preds = %L298, %L298.lr.ph
  %iv1 = phi i64 [ %iv.next2, %L298 ], [ 0, %L298.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !4635
  %52 = select i1 %.not228, i64 0, i64 %iv1, !dbg !4635
  %53 = add i64 %52, %48, !dbg !4635
  %54 = getelementptr inbounds double, double addrspace(13)* %arrayptr230, i64 %53, !dbg !4635
  %arrayref = load double, double addrspace(13)* %54, align 8, !dbg !4635, !tbaa !268, !alias.scope !116, !noalias !270
  %55 = select i1 %.not231, i64 0, i64 %iv1, !dbg !4643
  %56 = add i64 %55, %50, !dbg !4643
  %57 = getelementptr inbounds double, double addrspace(13)* %arrayptr115234, i64 %56, !dbg !4643
  %arrayref116 = load double, double addrspace(13)* %57, align 8, !dbg !4643, !tbaa !268, !alias.scope !116, !noalias !270
  %58 = fadd double %arrayref, %arrayref116, !dbg !4647
  %59 = add i64 %iv1, %51, !dbg !4650
  %60 = getelementptr inbounds double, double addrspace(13)* %arrayptr121235, i64 %59, !dbg !4650
  store double %58, double addrspace(13)* %60, align 8, !dbg !4650, !tbaa !268, !alias.scope !116, !noalias !4542
  %exitcond.not = icmp eq i64 %iv.next2, %arraysize, !dbg !4652
  br i1 %exitcond.not, label %L302.loopexit, label %L298, !dbg !4634, !llvm.loop !4653

L302.loopexit:                                    ; preds = %L298
  br label %L302, !dbg !4654

L302:                                             ; preds = %L302.loopexit, %L251
  %61 = add nuw nsw i64 %iv.next, 1, !dbg !4654
  %exitcond281.not = icmp eq i64 %iv.next, %arraysize3, !dbg !4657
  br i1 %exitcond281.not, label %L397.loopexit, label %L251, !dbg !4592

L324:                                             ; preds = %L164, %L153.L324_crit_edge
  %arraysize167 = phi i64 [ %arraysize167.pre, %L153.L324_crit_edge ], [ %arraysize72, %L164 ], !dbg !4559
  %62 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct172, i64 0, i64 0, i64 0, !dbg !4658
  store i64 %arraysize70, i64* %62, align 8, !dbg !4658, !tbaa !132, !alias.scope !134, !noalias !4550
  %63 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct172, i64 0, i64 1, i64 0, !dbg !4658
  store i64 %arraysize167, i64* %63, align 8, !dbg !4658, !tbaa !132, !alias.scope !134, !noalias !4550
  %64 = addrspacecast [2 x [1 x i64]]* %newstruct172 to [2 x [1 x i64]] addrspace(11)*, !dbg !4561
  %65 = addrspacecast [2 x [1 x i64]]* %newstruct58 to [2 x [1 x i64]] addrspace(11)*, !dbg !4561
  call fastcc void @julia_throwdm_1976([2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %64, [2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %65) #66, !dbg !4561
  unreachable, !dbg !4561

L397.loopexit:                                    ; preds = %L302
  br label %L397, !dbg !4549

L397:                                             ; preds = %L397.loopexit, %L220
  ret {} addrspace(10)* %23, !dbg !4549
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2053({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1") unnamed_addr #60 !dbg !4662 {
top:
  %2 = alloca { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %3 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 0
  %4 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i64 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i64 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %newstruct172 = alloca [2 x [1 x i64]], i64 1, align 8
  %10 = bitcast [2 x [1 x i64]]* %newstruct172 to i8*
  %newstruct58 = alloca [2 x [1 x i64]], i64 1, align 8
  %11 = bitcast [2 x [1 x i64]]* %newstruct58 to i8*
  %_cache = alloca i64*, align 8
  %_cache12 = alloca i64*, align 8
  %12 = bitcast i8* %11 to [2 x [1 x i64]]*, !enzyme_caststack !67
  %13 = bitcast i8* %10 to [2 x [1 x i64]]*, !enzyme_caststack !67
  %14 = call {}*** @julia.get_pgcstack() #61
  %ptls_field211 = getelementptr inbounds {}**, {}*** %14, i64 2
  %15 = bitcast {}*** %ptls_field211 to i64***
  %ptls_load212213 = load i64**, i64*** %15, align 8, !tbaa !68, !alias.scope !4663, !noalias !4666
  %16 = getelementptr inbounds i64*, i64** %ptls_load212213, i64 2
  %safepoint = load i64*, i64** %16, align 8, !tbaa !72, !invariant.load !67, !alias.scope !4668, !noalias !4671
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #61, !dbg !4673
  fence syncscope("singlethread") seq_cst
  %17 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*, !dbg !4674
  %arraysize_ptr214 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %17, i64 3, !dbg !4674
  %18 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr214 to i64 addrspace(10)*, !dbg !4674
  %19 = addrspacecast i64 addrspace(10)* %18 to i64 addrspace(11)*, !dbg !4674
  %arraysize = load i64, i64 addrspace(11)* %19, align 8, !dbg !4674, !tbaa !85, !range !86, !alias.scope !4678, !noalias !4681
  %20 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 6, !dbg !4674
  store i64 %arraysize, i64* %20, align 8, !dbg !4674
  %arraysize_ptr2215 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %17, i64 4, !dbg !4674
  %21 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr2215 to i64 addrspace(10)*, !dbg !4674
  %22 = addrspacecast i64 addrspace(10)* %21 to i64 addrspace(11)*, !dbg !4674
  %arraysize3 = load i64, i64 addrspace(11)* %22, align 16, !dbg !4674, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !4683, !noalias !4684
  %23 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 7, !dbg !4674
  store i64 %arraysize3, i64* %23, align 8, !dbg !4674
  %24 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !4674
  %25 = addrspacecast {} addrspace(10)* addrspace(10)* %24 to {} addrspace(10)* addrspace(11)*, !dbg !4674
  %arraysize_ptr7 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 3, !dbg !4674
  %26 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr7 to i64 addrspace(11)*, !dbg !4674
  %arraysize8 = load i64, i64 addrspace(11)* %26, align 8, !dbg !4674, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !4685, !noalias !4688
  %arraysize_ptr9 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 4, !dbg !4674
  %27 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr9 to i64 addrspace(11)*, !dbg !4674
  %arraysize10 = load i64, i64 addrspace(11)* %27, align 8, !dbg !4674, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !4685, !noalias !4688
  %.not = icmp eq i64 %arraysize, %arraysize8, !dbg !4690
  br i1 %.not, label %pass18.1, label %L36, !dbg !4693

L36:                                              ; preds = %pass18.1, %top
  %value_phi15.lcssa279 = phi i64 [ 1, %top ], [ 2, %pass18.1 ]
  %current_task20216 = getelementptr inbounds {}**, {}*** %14, i64 -14, !dbg !4694
  %current_task20 = bitcast {}*** %current_task20216 to {}**, !dbg !4694
  %box = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task20, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4774641744 to {}*) to {} addrspace(10)*)) #62, !dbg !4694
  %28 = bitcast {} addrspace(10)* %box to i8 addrspace(10)*, !dbg !4694
  %newstruct6.sroa.0.0..sroa_cast = bitcast {} addrspace(10)* %box to i64 addrspace(10)*, !dbg !4694
  store i64 %arraysize, i64 addrspace(10)* %newstruct6.sroa.0.0..sroa_cast, align 8, !dbg !4694, !tbaa !85, !alias.scope !108, !noalias !4695
  %newstruct6.sroa.2.0..sroa_idx = getelementptr inbounds i8, i8 addrspace(10)* %28, i64 8, !dbg !4694
  %newstruct6.sroa.2.0..sroa_cast = bitcast i8 addrspace(10)* %newstruct6.sroa.2.0..sroa_idx to i64 addrspace(10)*, !dbg !4694
  store i64 %arraysize3, i64 addrspace(10)* %newstruct6.sroa.2.0..sroa_cast, align 8, !dbg !4694, !tbaa !85, !alias.scope !108, !noalias !4695
  %box22 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task20, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4774641744 to {}*) to {} addrspace(10)*)) #62, !dbg !4694
  %29 = bitcast {} addrspace(10)* %box22 to i8 addrspace(10)*, !dbg !4694
  %newstruct14.sroa.0.0..sroa_cast = bitcast {} addrspace(10)* %box22 to i64 addrspace(10)*, !dbg !4694
  store i64 %arraysize8, i64 addrspace(10)* %newstruct14.sroa.0.0..sroa_cast, align 8, !dbg !4694, !tbaa !85, !alias.scope !108, !noalias !4695
  %newstruct14.sroa.3.0..sroa_idx = getelementptr inbounds i8, i8 addrspace(10)* %29, i64 8, !dbg !4694
  %newstruct14.sroa.3.0..sroa_cast = bitcast i8 addrspace(10)* %newstruct14.sroa.3.0..sroa_idx to i64 addrspace(10)*, !dbg !4694
  store i64 %arraysize10, i64 addrspace(10)* %newstruct14.sroa.3.0..sroa_cast, align 8, !dbg !4694, !tbaa !85, !alias.scope !108, !noalias !4695
  %30 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %value_phi15.lcssa279) #63, !dbg !4694
  %31 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4774659952 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4729112992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733824 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733792 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box22, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733760 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %30) #64, !dbg !4694
  %box24 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task20, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #62, !dbg !4694
  %32 = bitcast {} addrspace(10)* %box24 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !4694
  %33 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %32, i64 0, i64 0, !dbg !4694
  store {} addrspace(10)* %31, {} addrspace(10)* addrspace(10)* %33, align 8, !dbg !4694, !tbaa !112, !alias.scope !116, !noalias !4698
  %34 = addrspacecast {} addrspace(10)* %box24 to {} addrspace(12)*, !dbg !4694
  call void @ijl_throw({} addrspace(12)* %34) #61, !dbg !4694
  unreachable, !dbg !4694

pass18.1:                                         ; preds = %top
  %.not.1 = icmp eq i64 %arraysize3, %arraysize10, !dbg !4690
  br i1 %.not.1, label %L117, label %L36, !dbg !4693

L117:                                             ; preds = %pass18.1
  %memcpy_refined_dst = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %12, i64 0, i64 0, i64 0, !dbg !4699
  store i64 %arraysize, i64* %memcpy_refined_dst, align 8, !dbg !4699, !tbaa !132, !alias.scope !134, !noalias !4706
  %memcpy_refined_dst60 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %12, i64 0, i64 1, i64 0, !dbg !4699
  store i64 %arraysize3, i64* %memcpy_refined_dst60, align 8, !dbg !4699, !tbaa !132, !alias.scope !134, !noalias !4706
  %35 = call {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6199626896 to {}*) to {} addrspace(10)*), i64 %arraysize, i64 %arraysize3), !dbg !4707
  %36 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 0, !dbg !4707
  store {} addrspace(10)* %35, {} addrspace(10)** %36, align 8, !dbg !4707
  %37 = bitcast {} addrspace(10)* %35 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4707
  %38 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %37, i32 0, i32 1, !dbg !4707
  %39 = load i64, i64 addrspace(10)* %38, align 8, !dbg !4707
  %40 = mul i64 %39, 8, !dbg !4707
  %41 = bitcast {} addrspace(10)* %35 to i8 addrspace(13)* addrspace(10)*, !dbg !4707
  %42 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %41, align 8, !dbg !4707
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %42, i8 0, i64 %40, i1 false), !dbg !4707
  %43 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6199626896 to {}*) to {} addrspace(10)*), i64 %arraysize, i64 %arraysize3) #63, !dbg !4707
  %44 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 1, !dbg !4715
  store {} addrspace(10)* %43, {} addrspace(10)** %44, align 8, !dbg !4715
  %45 = bitcast {} addrspace(10)* %43 to {} addrspace(10)* addrspace(10)*, !dbg !4715
  %46 = addrspacecast {} addrspace(10)* addrspace(10)* %45 to {} addrspace(10)* addrspace(11)*, !dbg !4715
  %arraysize_ptr69 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %46, i64 3, !dbg !4715
  %47 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr69 to i64 addrspace(11)*, !dbg !4715
  %arraysize70 = load i64, i64 addrspace(11)* %47, align 8, !dbg !4715, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !4719, !noalias !4722
  %.not222 = icmp eq i64 %arraysize70, %arraysize, !dbg !4724
  br i1 %.not222, label %L164, label %L153.L324_crit_edge, !dbg !4728

L153.L324_crit_edge:                              ; preds = %L117
  %arraysize_ptr166.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %46, i64 4
  %.phi.trans.insert = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr166.phi.trans.insert to i64 addrspace(11)*
  %arraysize167.pre = load i64, i64 addrspace(11)* %.phi.trans.insert, align 8, !dbg !4715, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  br label %L324, !dbg !4728

L164:                                             ; preds = %L117
  %arraysize_ptr71 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %46, i64 4, !dbg !4715
  %48 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr71 to i64 addrspace(11)*, !dbg !4715
  %arraysize72 = load i64, i64 addrspace(11)* %48, align 8, !dbg !4715, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !4719, !noalias !4722
  %.not242 = icmp eq i64 %arraysize72, %arraysize3, !dbg !4729
  br i1 %.not242, label %L174, label %L324, !dbg !4717

L174:                                             ; preds = %L164
  %49 = addrspacecast {} addrspace(10)* %43 to {} addrspace(11)*, !dbg !4733
  %50 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !4733
  %.not223 = icmp eq {} addrspace(11)* %49, %50, !dbg !4733
  br i1 %.not223, label %L190, label %L177, !dbg !4733

L177:                                             ; preds = %L174
  %51 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %49) #65, !dbg !4738
  %52 = bitcast {}* %51 to i8**, !dbg !4738
  %arrayptr160 = load i8*, i8** %52, align 8, !dbg !4738, !tbaa !72, !invariant.load !67, !alias.scope !4719, !noalias !4722, !nonnull !67
  %53 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %50) #65, !dbg !4738
  %54 = bitcast {}* %53 to i8**, !dbg !4738
  %arrayptr162 = load i8*, i8** %54, align 8, !dbg !4738, !tbaa !72, !invariant.load !67, !alias.scope !4683, !noalias !4684, !nonnull !67
  %.not241.not = icmp eq i8* %arrayptr160, %arrayptr162, !dbg !4743
  %55 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 8, !dbg !4742
  store i1 %.not241.not, i1* %55, align 1, !dbg !4742
  br i1 %.not241.not, label %L185, label %L190, !dbg !4742

L185:                                             ; preds = %L177
  %56 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'"), !dbg !4746
  %57 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 2, !dbg !4746
  store {} addrspace(10)* %56, {} addrspace(10)** %57, align 8, !dbg !4746
  %58 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4746
  %59 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %58, i32 0, i32 3, !dbg !4746
  %60 = load i16, i16 addrspace(10)* %59, align 2, !dbg !4746
  %61 = zext i16 %60 to i64, !dbg !4746
  %62 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4746
  %63 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %62, i32 0, i32 1, !dbg !4746
  %64 = load i64, i64 addrspace(10)* %63, align 8, !dbg !4746
  %65 = mul i64 %64, %61, !dbg !4746
  %66 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !4746
  %67 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %66, align 8, !dbg !4746
  %68 = bitcast {} addrspace(10)* %56 to i8 addrspace(13)* addrspace(10)*, !dbg !4746
  %69 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %68, align 8, !dbg !4746
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %69, i8 0, i64 %65, i1 false), !dbg !4746
  %70 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %0) #61, !dbg !4746
  %71 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 3, !dbg !4748
  store {} addrspace(10)* %70, {} addrspace(10)** %71, align 8, !dbg !4748
  %.pre = bitcast {} addrspace(10)* %70 to {} addrspace(10)* addrspace(10)*, !dbg !4748
  %arraysize_ptr77271.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %.pre, i64 3
  %.phi.trans.insert282 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr77271.phi.trans.insert to i64 addrspace(10)*
  %.phi.trans.insert283 = addrspacecast i64 addrspace(10)* %.phi.trans.insert282 to i64 addrspace(11)*
  %arraysize78.pre = load i64, i64 addrspace(11)* %.phi.trans.insert283, align 8, !dbg !4748, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !4752, !noalias !4755
  %arraysize_ptr79272.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %.pre, i64 4
  %.phi.trans.insert285 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr79272.phi.trans.insert to i64 addrspace(10)*
  %.phi.trans.insert286 = addrspacecast i64 addrspace(10)* %.phi.trans.insert285 to i64 addrspace(11)*
  %arraysize80.pre = load i64, i64 addrspace(11)* %.phi.trans.insert286, align 8, !dbg !4748, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !4752, !noalias !4755
  br label %L190, !dbg !4757

L190:                                             ; preds = %L185, %L177, %L174
  %arraysize80 = phi i64 [ %arraysize80.pre, %L185 ], [ %arraysize3, %L174 ], [ %arraysize3, %L177 ], !dbg !4748
  %arraysize78 = phi i64 [ %arraysize78.pre, %L185 ], [ %arraysize, %L174 ], [ %arraysize, %L177 ], !dbg !4748
  %72 = phi {} addrspace(10)* [ %56, %L185 ], [ %"'", %L174 ], [ %"'", %L177 ]
  %value_phi76 = phi {} addrspace(10)* [ %70, %L185 ], [ %0, %L174 ], [ %0, %L177 ]
  %.not229 = icmp eq i64 %arraysize80, 1, !dbg !4760
  %.not228 = icmp eq i64 %arraysize78, 1, !dbg !4765
  %73 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !4768
  %.not224 = icmp eq {} addrspace(11)* %49, %73, !dbg !4768
  br i1 %.not224, label %L220, label %L207, !dbg !4768

L207:                                             ; preds = %L190
  %74 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %49) #65, !dbg !4771
  %75 = bitcast {}* %74 to i8**, !dbg !4771
  %arrayptr155 = load i8*, i8** %75, align 8, !dbg !4771, !tbaa !72, !invariant.load !67, !alias.scope !4719, !noalias !4722, !nonnull !67
  %76 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %73) #65, !dbg !4771
  %77 = bitcast {}* %76 to i8**, !dbg !4771
  %arrayptr157 = load i8*, i8** %77, align 8, !dbg !4771, !tbaa !72, !invariant.load !67, !alias.scope !4685, !noalias !4688, !nonnull !67
  %.not240.not = icmp eq i8* %arrayptr155, %arrayptr157, !dbg !4776
  %78 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 9, !dbg !4775
  store i1 %.not240.not, i1* %78, align 1, !dbg !4775
  br i1 %.not240.not, label %L215, label %L220, !dbg !4775

L215:                                             ; preds = %L207
  %79 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'1"), !dbg !4779
  %80 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 4, !dbg !4779
  store {} addrspace(10)* %79, {} addrspace(10)** %80, align 8, !dbg !4779
  %81 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4779
  %82 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %81, i32 0, i32 3, !dbg !4779
  %83 = load i16, i16 addrspace(10)* %82, align 2, !dbg !4779
  %84 = zext i16 %83 to i64, !dbg !4779
  %85 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4779
  %86 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %85, i32 0, i32 1, !dbg !4779
  %87 = load i64, i64 addrspace(10)* %86, align 8, !dbg !4779
  %88 = mul i64 %87, %84, !dbg !4779
  %89 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !4779
  %90 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %89, align 8, !dbg !4779
  %91 = bitcast {} addrspace(10)* %79 to i8 addrspace(13)* addrspace(10)*, !dbg !4779
  %92 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %91, align 8, !dbg !4779
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %92, i8 0, i64 %88, i1 false), !dbg !4779
  %93 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %1) #61, !dbg !4779
  %94 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 5
  store {} addrspace(10)* %93, {} addrspace(10)** %94, align 8
  %.phi.trans.insert260 = bitcast {} addrspace(10)* %93 to {} addrspace(10)* addrspace(10)*
  %.phi.trans.insert261 = addrspacecast {} addrspace(10)* addrspace(10)* %.phi.trans.insert260 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr88.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert261, i64 4
  %.phi.trans.insert262 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr88.phi.trans.insert to i64 addrspace(11)*
  %arraysize89.pre = load i64, i64 addrspace(11)* %.phi.trans.insert262, align 8, !dbg !4781, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !4785, !noalias !4788
  %arraysize_ptr86.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert261, i64 3
  %.phi.trans.insert264 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr86.phi.trans.insert to i64 addrspace(11)*
  %arraysize87.pre = load i64, i64 addrspace(11)* %.phi.trans.insert264, align 8, !dbg !4781, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !4785, !noalias !4788
  br label %L220, !dbg !4757

L220:                                             ; preds = %L215, %L207, %L190
  %arraysize87 = phi i64 [ %arraysize, %L190 ], [ %arraysize87.pre, %L215 ], [ %arraysize, %L207 ], !dbg !4781
  %arraysize89 = phi i64 [ %arraysize3, %L190 ], [ %arraysize89.pre, %L215 ], [ %arraysize3, %L207 ], !dbg !4781
  %95 = phi {} addrspace(10)* [ %"'1", %L190 ], [ %79, %L215 ], [ %"'1", %L207 ]
  %value_phi85 = phi {} addrspace(10)* [ %1, %L190 ], [ %93, %L215 ], [ %1, %L207 ]
  %.not232 = icmp eq i64 %arraysize89, 1, !dbg !4790
  %.not231 = icmp eq i64 %arraysize87, 1, !dbg !4795
  %.not225.not = icmp eq i64 %arraysize3, 0, !dbg !4798
  br i1 %.not225.not, label %L397, label %L251.preheader, !dbg !4802

L251.preheader:                                   ; preds = %L220
  %.not226 = icmp eq i64 %arraysize, 0
  %"'ipc10" = bitcast {} addrspace(10)* %72 to double addrspace(13)* addrspace(10)*
  %96 = bitcast {} addrspace(10)* %value_phi76 to double addrspace(13)* addrspace(10)*
  %"'ipc11" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc10" to double addrspace(13)* addrspace(11)*
  %97 = addrspacecast double addrspace(13)* addrspace(10)* %96 to double addrspace(13)* addrspace(11)*
  %"'ipc8" = bitcast {} addrspace(10)* %95 to double addrspace(13)* addrspace(10)*
  %98 = bitcast {} addrspace(10)* %value_phi85 to double addrspace(13)* addrspace(10)*
  %"'ipc9" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc8" to double addrspace(13)* addrspace(11)*
  %99 = addrspacecast double addrspace(13)* addrspace(10)* %98 to double addrspace(13)* addrspace(11)*
  %"'ipc" = bitcast {} addrspace(10)* %35 to double addrspace(13)* addrspace(10)*
  %100 = bitcast {} addrspace(10)* %43 to double addrspace(13)* addrspace(10)*
  %"'ipc7" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %101 = addrspacecast double addrspace(13)* addrspace(10)* %100 to double addrspace(13)* addrspace(11)*
  %102 = add nsw i64 %arraysize3, -1, !dbg !4803
  %103 = add nsw i64 %arraysize, -1, !dbg !4803
  %104 = add nuw i64 %102, 1, !dbg !4803
  %105 = add nuw i64 %103, 1, !dbg !4803
  %106 = mul nuw nsw i64 %105, %104, !dbg !4803
  %107 = mul nuw i64 %106, 8, !dbg !4803
  %108 = call noalias nonnull i8* @malloc(i64 %107), !dbg !4803
  %_malloccache = bitcast i8* %108 to i64*, !dbg !4803
  %109 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 10, !dbg !4803
  store i64* %_malloccache, i64** %109, align 8, !dbg !4803
  store i64* %_malloccache, i64** %_cache, align 8, !dbg !4803, !invariant.group !4804
  %110 = mul nuw i64 %106, 8, !dbg !4803
  %111 = call noalias nonnull i8* @malloc(i64 %110), !dbg !4803
  %_malloccache13 = bitcast i8* %111 to i64*, !dbg !4803
  %112 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 11, !dbg !4803
  store i64* %_malloccache13, i64** %112, align 8, !dbg !4803
  store i64* %_malloccache13, i64** %_cache12, align 8, !dbg !4803, !invariant.group !4805
  br label %L251, !dbg !4803

L251:                                             ; preds = %L302, %L251.preheader
  %iv = phi i64 [ %iv.next, %L302 ], [ 0, %L251.preheader ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4803
  br i1 %.not226, label %L302, label %L298.lr.ph, !dbg !4803

L298.lr.ph:                                       ; preds = %L251
  %"arrayptr230'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc11", align 8, !tbaa !72, !alias.scope !4806, !noalias !4811, !nonnull !67
  %arrayptr230 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %97, align 8, !tbaa !72, !invariant.load !67, !alias.scope !4813, !noalias !4814, !nonnull !67
  %value_phi99.op = add nsw i64 %iv.next, -1
  %113 = select i1 %.not229, i64 0, i64 %value_phi99.op
  %114 = mul i64 %113, %arraysize78
  %"arrayptr115234'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc9", align 8, !tbaa !72, !alias.scope !4815, !noalias !4818, !nonnull !67
  %arrayptr115234 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %99, align 8, !tbaa !72, !invariant.load !67, !alias.scope !4820, !noalias !4821, !nonnull !67
  %115 = select i1 %.not232, i64 0, i64 %value_phi99.op
  %116 = mul i64 %115, %arraysize87
  %117 = mul i64 %value_phi99.op, %arraysize
  %"arrayptr121235'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc7", align 8, !tbaa !72, !alias.scope !4822, !noalias !4823, !nonnull !67
  %arrayptr121235 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %101, align 8, !tbaa !72, !invariant.load !67, !alias.scope !4824, !noalias !4722, !nonnull !67
  br label %L298, !dbg !4825

L298:                                             ; preds = %L298, %L298.lr.ph
  %iv1 = phi i64 [ %iv.next2, %L298 ], [ 0, %L298.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !4826
  %118 = select i1 %.not228, i64 0, i64 %iv1, !dbg !4826
  %119 = add i64 %118, %114, !dbg !4826
  %120 = getelementptr inbounds double, double addrspace(13)* %arrayptr230, i64 %119, !dbg !4826
  %arrayref = load double, double addrspace(13)* %120, align 8, !dbg !4826, !tbaa !268, !alias.scope !4834, !noalias !4837
  %121 = select i1 %.not231, i64 0, i64 %iv1, !dbg !4839
  %122 = add i64 %121, %116, !dbg !4839
  %123 = getelementptr inbounds double, double addrspace(13)* %arrayptr115234, i64 %122, !dbg !4839
  %arrayref116 = load double, double addrspace(13)* %123, align 8, !dbg !4839, !tbaa !268, !alias.scope !4843, !noalias !4846
  %124 = fadd double %arrayref, %arrayref116, !dbg !4848
  %125 = add i64 %iv1, %117, !dbg !4851
  %126 = getelementptr inbounds double, double addrspace(13)* %arrayptr121235, i64 %125, !dbg !4851
  store double %124, double addrspace(13)* %126, align 8, !dbg !4851, !tbaa !268, !alias.scope !4853, !noalias !4856
  %127 = load i64*, i64** %_cache12, align 8, !dbg !4858, !dereferenceable !3229, !invariant.group !4805
  %128 = mul nuw nsw i64 %105, %104, !dbg !4858
  %129 = mul nuw nsw i64 %iv, %105, !dbg !4858
  %130 = add nuw nsw i64 %iv1, %129, !dbg !4858
  %131 = getelementptr inbounds i64, i64* %127, i64 %130, !dbg !4858
  store i64 %122, i64* %131, align 8, !dbg !4858, !invariant.group !4859
  %132 = load i64*, i64** %_cache, align 8, !dbg !4858, !dereferenceable !3229, !invariant.group !4804
  %133 = mul nuw nsw i64 %105, %104, !dbg !4858
  %134 = mul nuw nsw i64 %iv, %105, !dbg !4858
  %135 = add nuw nsw i64 %iv1, %134, !dbg !4858
  %136 = getelementptr inbounds i64, i64* %132, i64 %135, !dbg !4858
  store i64 %119, i64* %136, align 8, !dbg !4858, !invariant.group !4860
  %exitcond.not = icmp eq i64 %iv.next2, %arraysize, !dbg !4858
  br i1 %exitcond.not, label %L302.loopexit, label %L298, !dbg !4825, !llvm.loop !4861

L302.loopexit:                                    ; preds = %L298
  br label %L302, !dbg !4862

L302:                                             ; preds = %L302.loopexit, %L251
  %exitcond281.not = icmp eq i64 %iv.next, %arraysize3, !dbg !4865
  br i1 %exitcond281.not, label %L397.loopexit, label %L251, !dbg !4758

L324:                                             ; preds = %L164, %L153.L324_crit_edge
  %arraysize167 = phi i64 [ %arraysize167.pre, %L153.L324_crit_edge ], [ %arraysize72, %L164 ], !dbg !4715
  %137 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %13, i64 0, i64 0, i64 0, !dbg !4866
  store i64 %arraysize70, i64* %137, align 8, !dbg !4866, !tbaa !132, !alias.scope !134, !noalias !4706
  %138 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %13, i64 0, i64 1, i64 0, !dbg !4866
  store i64 %arraysize167, i64* %138, align 8, !dbg !4866, !tbaa !132, !alias.scope !134, !noalias !4706
  %139 = addrspacecast [2 x [1 x i64]]* %13 to [2 x [1 x i64]] addrspace(11)*, !dbg !4717
  %140 = addrspacecast [2 x [1 x i64]]* %12 to [2 x [1 x i64]] addrspace(11)*, !dbg !4717
  call fastcc void @julia_throwdm_1976([2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %139, [2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %140) #66, !dbg !4717
  unreachable, !dbg !4717

L397.loopexit:                                    ; preds = %L302
  br label %L397, !dbg !4705

L397:                                             ; preds = %L397.loopexit, %L220
  %141 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 1, !dbg !4705
  store {} addrspace(10)* %43, {} addrspace(10)** %141, align 8, !dbg !4705
  %142 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 2, !dbg !4705
  store {} addrspace(10)* %35, {} addrspace(10)** %142, align 8, !dbg !4705
  %143 = load { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }* %2, align 8, !dbg !4705
  ret { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* } %143, !dbg !4705
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia___2053({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg) unnamed_addr #60 !dbg !4870 {
top:
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %2 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"arrayref'de" = alloca double, align 8
  %3 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"arrayref116'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref116'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache = alloca i64*, align 8
  %_cache63 = alloca i64*, align 8
  %5 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 10
  %mdyncache_fromtape_cache = alloca i64*, align 8
  store i64* %5, i64** %mdyncache_fromtape_cache, align 8
  %6 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 11
  %mdyncache_fromtape_cache76 = alloca i64*, align 8
  store i64* %6, i64** %mdyncache_fromtape_cache76, align 8
  %7 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %8 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %7, i32 0, i32 3
  %9 = load i16, i16 addrspace(10)* %8, align 2
  %10 = zext i16 %9 to i64
  %11 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %12 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %11, i32 0, i32 1
  %13 = load i64, i64 addrspace(10)* %12, align 8
  %14 = mul i64 %13, %10
  %15 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %16 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %15, i32 0, i32 3
  %17 = load i16, i16 addrspace(10)* %16, align 2
  %18 = zext i16 %17 to i64
  %19 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %20 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %19, i32 0, i32 1
  %21 = load i64, i64 addrspace(10)* %20, align 8
  %22 = mul i64 %21, %18
  %23 = call {}*** @julia.get_pgcstack() #61
  %arraysize = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 6, !dbg !4871
  %arraysize3 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 7, !dbg !4871
  br i1 true, label %pass18.1, label %L36, !dbg !4875

L36:                                              ; preds = %pass18.1, %top
  unreachable

pass18.1:                                         ; preds = %top
  br i1 true, label %L117, label %L36, !dbg !4875

L117:                                             ; preds = %pass18.1
  %24 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 0, !dbg !4876
  %25 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 1, !dbg !4876
  br i1 true, label %L164, label %L153.L324_crit_edge, !dbg !4887

L153.L324_crit_edge:                              ; preds = %L117
  unreachable

L164:                                             ; preds = %L117
  br i1 true, label %L174, label %L324, !dbg !4889

L174:                                             ; preds = %L164
  %26 = addrspacecast {} addrspace(10)* %25 to {} addrspace(11)*, !dbg !4891
  %27 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !4891
  %.not223 = icmp eq {} addrspace(11)* %26, %27, !dbg !4891
  br i1 %.not223, label %L190, label %L177, !dbg !4891

L177:                                             ; preds = %L174
  %.not241.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 8, !dbg !4896
  br i1 %.not241.not, label %L185, label %L190, !dbg !4896

L185:                                             ; preds = %L177
  %"'ip_phi3" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 2, !dbg !4897
  %28 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 3, !dbg !4897
  br label %L190, !dbg !4899

L190:                                             ; preds = %L185, %L177, %L174
  %29 = phi {} addrspace(10)* [ %"'ip_phi3", %L185 ], [ %"'", %L174 ], [ %"'", %L177 ]
  %30 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !4902
  %.not224 = icmp eq {} addrspace(11)* %26, %30, !dbg !4902
  br i1 %.not224, label %L220, label %L207, !dbg !4902

L207:                                             ; preds = %L190
  %.not240.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 9, !dbg !4905
  br i1 %.not240.not, label %L215, label %L220, !dbg !4905

L215:                                             ; preds = %L207
  %"'ip_phi6" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 4, !dbg !4906
  %31 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 5, !dbg !4906
  br label %L220, !dbg !4899

L220:                                             ; preds = %L215, %L207, %L190
  %32 = phi {} addrspace(10)* [ %"'1", %L190 ], [ %"'ip_phi6", %L215 ], [ %"'1", %L207 ]
  %.not225.not = icmp eq i64 %arraysize3, 0, !dbg !4908
  br i1 %.not225.not, label %L397, label %L251.preheader, !dbg !4912

L251.preheader:                                   ; preds = %L220
  %.not226 = icmp eq i64 %arraysize, 0
  %"'ipc52" = bitcast {} addrspace(10)* %29 to double addrspace(13)* addrspace(10)*
  %"'ipc53" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc52" to double addrspace(13)* addrspace(11)*
  %"'ipc48" = bitcast {} addrspace(10)* %32 to double addrspace(13)* addrspace(10)*
  %"'ipc49" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc48" to double addrspace(13)* addrspace(11)*
  %"'ipc" = bitcast {} addrspace(10)* %24 to double addrspace(13)* addrspace(10)*
  %"'ipc45" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %33 = add nsw i64 %arraysize3, -1, !dbg !4913
  %34 = add nsw i64 %arraysize, -1, !dbg !4913
  %35 = add nuw i64 %33, 1, !dbg !4913
  %36 = add nuw i64 %34, 1, !dbg !4913
  %37 = mul nuw nsw i64 %36, %35, !dbg !4913
  %38 = mul nuw i64 %37, 8, !dbg !4913
  %39 = mul nuw i64 %37, 8, !dbg !4913
  br label %L251, !dbg !4913

L251:                                             ; preds = %L302, %L251.preheader
  %iv = phi i64 [ %iv.next, %L302 ], [ 0, %L251.preheader ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4913
  br i1 %.not226, label %L302, label %L298.lr.ph, !dbg !4913

L298.lr.ph:                                       ; preds = %L251
  %"arrayptr230'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc53", align 8, !tbaa !72, !alias.scope !4914, !noalias !4917, !nonnull !67, !invariant.group !4919
  %value_phi99.op = add nsw i64 %iv.next, -1
  %"arrayptr115234'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc49", align 8, !tbaa !72, !alias.scope !4920, !noalias !4923, !nonnull !67, !invariant.group !4925
  %40 = mul i64 %value_phi99.op, %arraysize
  %"arrayptr121235'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc45", align 8, !tbaa !72, !alias.scope !4926, !noalias !4929, !nonnull !67, !invariant.group !4931
  br label %L298, !dbg !4932

L298:                                             ; preds = %L298, %L298.lr.ph
  %iv1 = phi i64 [ %iv.next2, %L298 ], [ 0, %L298.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !4933
  %41 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dbg !4933, !dereferenceable !3229, !invariant.group !4941
  %42 = mul nuw nsw i64 %36, %35, !dbg !4933
  %43 = mul nuw nsw i64 %iv, %36, !dbg !4933
  %44 = add nuw nsw i64 %iv1, %43, !dbg !4933
  %45 = getelementptr inbounds i64, i64* %41, i64 %44, !dbg !4933
  %46 = load i64, i64* %45, align 8, !dbg !4933, !invariant.group !4942
  %"'ipg62" = getelementptr inbounds double, double addrspace(13)* %"arrayptr230'ipl", i64 %46, !dbg !4933
  %47 = load i64*, i64** %mdyncache_fromtape_cache76, align 8, !dbg !4943, !dereferenceable !3229, !invariant.group !4947
  %48 = mul nuw nsw i64 %36, %35, !dbg !4943
  %49 = mul nuw nsw i64 %iv, %36, !dbg !4943
  %50 = add nuw nsw i64 %iv1, %49, !dbg !4943
  %51 = getelementptr inbounds i64, i64* %47, i64 %50, !dbg !4943
  %52 = load i64, i64* %51, align 8, !dbg !4943, !invariant.group !4948
  %53 = mul nuw nsw i64 %36, %35, !dbg !4943
  %54 = mul nuw nsw i64 %iv, %36, !dbg !4943
  %55 = add nuw nsw i64 %iv1, %54, !dbg !4943
  %56 = mul nuw nsw i64 %36, %35, !dbg !4943
  %57 = mul nuw nsw i64 %iv, %36, !dbg !4943
  %58 = add nuw nsw i64 %iv1, %57, !dbg !4943
  %"'ipg57" = getelementptr inbounds double, double addrspace(13)* %"arrayptr115234'ipl", i64 %52, !dbg !4943
  %59 = add i64 %iv1, %40, !dbg !4949
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr121235'ipl", i64 %59, !dbg !4949
  %exitcond.not = icmp eq i64 %iv.next2, %arraysize, !dbg !4951
  br i1 %exitcond.not, label %L302.loopexit, label %L298, !dbg !4932, !llvm.loop !4952

L302.loopexit:                                    ; preds = %L298
  br label %L302, !dbg !4953

L302:                                             ; preds = %L302.loopexit, %L251
  %exitcond281.not = icmp eq i64 %iv.next, %arraysize3, !dbg !4956
  br i1 %exitcond281.not, label %L397.loopexit, label %L251, !dbg !4900

L324:                                             ; preds = %L164
  unreachable

L397.loopexit:                                    ; preds = %L302
  br label %L397, !dbg !4886

L397:                                             ; preds = %L397.loopexit, %L220
  br label %invertL397, !dbg !4886

inverttop:                                        ; preds = %invertpass18.1
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertpass18.1:                                   ; preds = %invertL117
  br label %inverttop

invertL117:                                       ; preds = %invertL164
  br label %invertpass18.1

invertL164:                                       ; preds = %invertL174
  br label %invertL117

invertL174:                                       ; preds = %invertL190, %invertL177
  br label %invertL164

invertL177:                                       ; preds = %staging, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  br label %invertL174

invertL185:                                       ; preds = %staging
  %60 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 2, !dbg !4897
  %61 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !4897
  %62 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %61, align 8, !dbg !4897
  %63 = bitcast {} addrspace(10)* %60 to i8 addrspace(13)* addrspace(10)*, !dbg !4897
  %64 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %63, align 8, !dbg !4897
  %65 = bitcast i8 addrspace(13)* %64 to double addrspace(13)*, !dbg !4897
  %66 = bitcast i8 addrspace(13)* %62 to double addrspace(13)*, !dbg !4897
  %67 = udiv i64 %22, 8, !dbg !4897
  %68 = icmp eq i64 %67, 0, !dbg !4897
  br i1 %68, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !4897

for.body.i:                                       ; preds = %for.body.i, %invertL185
  %idx.i = phi i64 [ 0, %invertL185 ], [ %idx.next.i, %for.body.i ], !dbg !4897
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %65, i64 %idx.i, !dbg !4897
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !4897
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !4897
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %66, i64 %idx.i, !dbg !4897
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !4897
  %69 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !4897
  store double %69, double addrspace(13)* %src.i.i, align 1, !dbg !4897
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !4897
  %70 = icmp eq i64 %67, %idx.next.i, !dbg !4897
  br i1 %70, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !4897

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL185, %for.body.i
  br label %invertL177

invertL190:                                       ; preds = %invertL220, %invertL207
  %.not241.not_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 8
  br i1 %.not223, label %invertL174, label %staging

invertL207:                                       ; preds = %staging38, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit86
  br label %invertL190

invertL215:                                       ; preds = %staging38
  %71 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 4, !dbg !4906
  %72 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !4906
  %73 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %72, align 8, !dbg !4906
  %74 = bitcast {} addrspace(10)* %71 to i8 addrspace(13)* addrspace(10)*, !dbg !4906
  %75 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %74, align 8, !dbg !4906
  %76 = bitcast i8 addrspace(13)* %75 to double addrspace(13)*, !dbg !4906
  %77 = bitcast i8 addrspace(13)* %73 to double addrspace(13)*, !dbg !4906
  %78 = udiv i64 %14, 8, !dbg !4906
  %79 = icmp eq i64 %78, 0, !dbg !4906
  br i1 %79, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit86, label %for.body.i85, !dbg !4906

for.body.i85:                                     ; preds = %for.body.i85, %invertL215
  %idx.i79 = phi i64 [ 0, %invertL215 ], [ %idx.next.i84, %for.body.i85 ], !dbg !4906
  %dst.i.i80 = getelementptr inbounds double, double addrspace(13)* %76, i64 %idx.i79, !dbg !4906
  %dst.i.l.i81 = load double, double addrspace(13)* %dst.i.i80, align 1, !dbg !4906
  store double 0.000000e+00, double addrspace(13)* %dst.i.i80, align 1, !dbg !4906
  %src.i.i82 = getelementptr inbounds double, double addrspace(13)* %77, i64 %idx.i79, !dbg !4906
  %src.i.l.i83 = load double, double addrspace(13)* %src.i.i82, align 1, !dbg !4906
  %80 = fadd fast double %src.i.l.i83, %dst.i.l.i81, !dbg !4906
  store double %80, double addrspace(13)* %src.i.i82, align 1, !dbg !4906
  %idx.next.i84 = add nuw i64 %idx.i79, 1, !dbg !4906
  %81 = icmp eq i64 %78, %idx.next.i84, !dbg !4906
  br i1 %81, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit86, label %for.body.i85, !dbg !4906

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit86: ; preds = %invertL215, %for.body.i85
  br label %invertL207

invertL220:                                       ; preds = %invertL397, %invertL251.preheader
  %.not240.not_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 9
  br i1 %.not224, label %invertL190, label %staging38

invertL251.preheader:                             ; preds = %invertL251
  %82 = load i64, i64* %"iv'ac", align 8
  %83 = load i64, i64* %"iv1'ac", align 8
  %84 = load i64, i64* %"iv'ac", align 8
  %85 = load i64, i64* %"iv1'ac", align 8
  %86 = load i64, i64* %"iv'ac", align 8
  %87 = load i64, i64* %"iv1'ac", align 8
  %forfree75 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dereferenceable !3229, !invariant.group !4941
  %88 = bitcast i64* %forfree75 to i8*
  call void @free(i8* nonnull %88), !dbg !4957
  %89 = load i64, i64* %"iv'ac", align 8
  %90 = load i64, i64* %"iv1'ac", align 8
  %forfree77 = load i64*, i64** %mdyncache_fromtape_cache76, align 8, !dereferenceable !3229, !invariant.group !4947
  %91 = bitcast i64* %forfree77 to i8*
  call void @free(i8* nonnull %91), !dbg !4957
  br label %invertL220

invertL251:                                       ; preds = %invertL302, %invertL298.lr.ph
  %92 = load i64, i64* %"iv'ac", align 8
  %93 = icmp eq i64 %92, 0
  %94 = xor i1 %93, true
  br i1 %93, label %invertL251.preheader, label %incinvertL251

incinvertL251:                                    ; preds = %invertL251
  %95 = load i64, i64* %"iv'ac", align 8
  %96 = add nsw i64 %95, -1
  store i64 %96, i64* %"iv'ac", align 8
  br label %invertL302

invertL298.lr.ph:                                 ; preds = %invertL298
  br label %invertL251

invertL298:                                       ; preds = %mergeinvertL298_L302.loopexit, %incinvertL298
  %97 = load i64, i64* %"iv1'ac", align 8, !dbg !4949
  %98 = load i64, i64* %"iv'ac", align 8, !dbg !4949
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %24 to double addrspace(13)* addrspace(10)*, !dbg !4949
  %"'ipc45_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4949
  %"arrayptr121235'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc45_unwrap", align 8, !tbaa !72, !alias.scope !4926, !noalias !4929, !nonnull !67, !invariant.group !4931
  %iv.next_unwrap = add nuw nsw i64 %98, 1, !dbg !4949
  %value_phi99.op_unwrap = add nsw i64 %iv.next_unwrap, -1, !dbg !4949
  %_unwrap = mul i64 %value_phi99.op_unwrap, %arraysize, !dbg !4949
  %_unwrap54 = add i64 %97, %_unwrap, !dbg !4949
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr121235'ipl_unwrap", i64 %_unwrap54, !dbg !4949
  %99 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4949, !tbaa !268, !alias.scope !4958, !noalias !4961
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4949, !tbaa !268, !alias.scope !4958, !noalias !4961
  %100 = load double, double* %"'de", align 8, !dbg !4949
  %101 = fadd fast double %100, %99, !dbg !4949
  store double %101, double* %"'de", align 8, !dbg !4949
  %102 = load double, double* %"'de", align 8, !dbg !4963
  store double 0.000000e+00, double* %"'de", align 8, !dbg !4963
  %103 = load double, double* %"arrayref'de", align 8, !dbg !4963
  %104 = fadd fast double %103, %102, !dbg !4963
  store double %104, double* %"arrayref'de", align 8, !dbg !4963
  %105 = load double, double* %"arrayref116'de", align 8, !dbg !4963
  %106 = fadd fast double %105, %102, !dbg !4963
  store double %106, double* %"arrayref116'de", align 8, !dbg !4963
  %107 = load double, double* %"arrayref116'de", align 8, !dbg !4943
  store double 0.000000e+00, double* %"arrayref116'de", align 8, !dbg !4943
  %108 = load i64, i64* %"iv1'ac", align 8, !dbg !4943
  %109 = load i64, i64* %"iv'ac", align 8, !dbg !4943
  %"'ipc48_unwrap" = bitcast {} addrspace(10)* %32 to double addrspace(13)* addrspace(10)*, !dbg !4943
  %"'ipc49_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc48_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4943
  %"arrayptr115234'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc49_unwrap", align 8, !tbaa !72, !alias.scope !4920, !noalias !4923, !nonnull !67, !invariant.group !4925
  %arraysize3_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 7, !dbg !4943
  %_unwrap58 = add nsw i64 %arraysize3_unwrap, -1, !dbg !4943
  %110 = add nuw i64 %_unwrap58, 1, !dbg !4943
  %arraysize_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 6, !dbg !4943
  %_unwrap59 = add nsw i64 %arraysize_unwrap, -1, !dbg !4943
  %111 = add nuw i64 %_unwrap59, 1, !dbg !4943
  %112 = mul nuw nsw i64 %111, %110, !dbg !4943
  %113 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 11, !dbg !4943
  %114 = mul nuw nsw i64 %111, %110, !dbg !4943
  %115 = mul nuw nsw i64 %109, %111, !dbg !4943
  %116 = add nuw nsw i64 %108, %115, !dbg !4943
  %117 = getelementptr inbounds i64, i64* %113, i64 %116, !dbg !4943
  %118 = load i64, i64* %117, align 8, !dbg !4943, !invariant.group !4966
  %"'ipg57_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr115234'ipl_unwrap", i64 %118, !dbg !4943
  %119 = load double, double addrspace(13)* %"'ipg57_unwrap", align 8, !dbg !4943, !tbaa !268, !alias.scope !4967, !noalias !4970
  %120 = fadd fast double %119, %107, !dbg !4943
  store double %120, double addrspace(13)* %"'ipg57_unwrap", align 8, !dbg !4943, !tbaa !268, !alias.scope !4967, !noalias !4970
  %121 = load double, double* %"arrayref'de", align 8, !dbg !4933
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !4933
  %122 = load i64, i64* %"iv1'ac", align 8, !dbg !4933
  %123 = load i64, i64* %"iv'ac", align 8, !dbg !4933
  %"'ipc52_unwrap" = bitcast {} addrspace(10)* %29 to double addrspace(13)* addrspace(10)*, !dbg !4933
  %"'ipc53_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc52_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4933
  %"arrayptr230'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc53_unwrap", align 8, !tbaa !72, !alias.scope !4914, !noalias !4917, !nonnull !67, !invariant.group !4919
  %124 = add nuw i64 %_unwrap58, 1, !dbg !4933
  %125 = add nuw i64 %_unwrap59, 1, !dbg !4933
  %126 = mul nuw nsw i64 %125, %124, !dbg !4933
  %127 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 10, !dbg !4933
  %128 = mul nuw nsw i64 %125, %124, !dbg !4933
  %129 = mul nuw nsw i64 %123, %125, !dbg !4933
  %130 = add nuw nsw i64 %122, %129, !dbg !4933
  %131 = getelementptr inbounds i64, i64* %127, i64 %130, !dbg !4933
  %132 = load i64, i64* %131, align 8, !dbg !4933, !invariant.group !4972
  %"'ipg62_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr230'ipl_unwrap", i64 %132, !dbg !4933
  %133 = load double, double addrspace(13)* %"'ipg62_unwrap", align 8, !dbg !4933, !tbaa !268, !alias.scope !4973, !noalias !4976
  %134 = fadd fast double %133, %121, !dbg !4933
  store double %134, double addrspace(13)* %"'ipg62_unwrap", align 8, !dbg !4933, !tbaa !268, !alias.scope !4973, !noalias !4976
  %135 = load i64, i64* %"iv1'ac", align 8
  %136 = icmp eq i64 %135, 0
  %137 = xor i1 %136, true
  br i1 %136, label %invertL298.lr.ph, label %incinvertL298

incinvertL298:                                    ; preds = %invertL298
  %138 = load i64, i64* %"iv1'ac", align 8
  %139 = add nsw i64 %138, -1
  store i64 %139, i64* %"iv1'ac", align 8
  br label %invertL298

invertL302.loopexit:                              ; preds = %invertL302
  %140 = load i64, i64* %"iv'ac", align 8
  %_unwrap68 = add nsw i64 %arraysize, -1
  br label %mergeinvertL298_L302.loopexit

mergeinvertL298_L302.loopexit:                    ; preds = %invertL302.loopexit
  store i64 %_unwrap68, i64* %"iv1'ac", align 8
  br label %invertL298

invertL302:                                       ; preds = %mergeinvertL251_L397.loopexit, %incinvertL251
  %141 = load i64, i64* %"iv'ac", align 8
  %.not226_unwrap = icmp eq i64 %arraysize, 0
  br i1 %.not226_unwrap, label %invertL251, label %invertL302.loopexit

invertL397.loopexit:                              ; preds = %invertL397
  %_unwrap74 = add nsw i64 %arraysize3, -1
  br label %mergeinvertL251_L397.loopexit

mergeinvertL251_L397.loopexit:                    ; preds = %invertL397.loopexit
  store i64 %_unwrap74, i64* %"iv'ac", align 8
  br label %invertL302

invertL397:                                       ; preds = %L397
  br i1 %.not225.not, label %invertL220, label %invertL397.loopexit

staging:                                          ; preds = %invertL190
  br i1 %.not241.not_unwrap, label %invertL185, label %invertL177

staging38:                                        ; preds = %invertL220
  br i1 %.not240.not_unwrap, label %invertL215, label %invertL207
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia_gemv__1996({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, i32 zeroext "enzyme_inactive" %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3) unnamed_addr #62 !dbg !5014 {
top:
  %4 = call {}*** @julia.get_pgcstack() #63
  %ptls_field159 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field159 to i64***
  %ptls_load160161 = load i64**, i64*** %5, align 8, !tbaa !68
  %6 = getelementptr inbounds i64*, i64** %ptls_load160161, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !72, !invariant.load !67
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #63, !dbg !5015
  fence syncscope("singlethread") seq_cst
  %.not = icmp eq i32 %1, 1308622848, !dbg !5016
  %. = select i1 %.not, i64 3, i64 4, !dbg !5020
  %7 = bitcast {} addrspace(10)* %2 to {} addrspace(10)* addrspace(10)*, !dbg !5021
  %arraysize_ptr228 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 %., !dbg !5021
  %8 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr228 to i64 addrspace(10)*, !dbg !5021
  %9 = addrspacecast i64 addrspace(10)* %8 to i64 addrspace(11)*, !dbg !5021
  %arraysize = load i64, i64 addrspace(11)* %9, align 8, !dbg !5021, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %value_phi4 = select i1 %.not, i64 4, i64 3, !dbg !5018
  %arraysize_ptr11227 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 %value_phi4, !dbg !5021
  %10 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr11227 to i64 addrspace(10)*, !dbg !5021
  %11 = addrspacecast i64 addrspace(10)* %10 to i64 addrspace(11)*, !dbg !5021
  %arraysize12 = load i64, i64 addrspace(11)* %11, align 8, !dbg !5021, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %12 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5022
  %13 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %12 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5022
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %13, i64 0, i32 1, !dbg !5022
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5022, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not163 = icmp eq i64 %arraysize12, %arraylen, !dbg !5024
  br i1 %.not163, label %L28, label %L22, !dbg !5023

L22:                                              ; preds = %top
  %current_task17164 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5026
  %current_task17 = bitcast {}*** %current_task17164 to {}**, !dbg !5026
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #64, !dbg !5026
  %14 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !5026
  %15 = addrspacecast {} addrspace(10)* addrspace(10)* %14 to {} addrspace(10)* addrspace(11)*, !dbg !5026
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %15, align 8, !dbg !5026, !tbaa !865, !alias.scope !116, !noalias !5027
  %16 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %15, i64 1, !dbg !5026
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %16, align 8, !dbg !5026, !tbaa !865, !alias.scope !116, !noalias !5027
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #64, !dbg !5026
  %17 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5026
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %17, i64 0, i32 0, !dbg !5026
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838887040 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !5026, !tbaa !112, !alias.scope !116, !noalias !5027
  %.repack166 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %17, i64 0, i32 1, !dbg !5026
  store i64 %arraysize12, i64 addrspace(10)* %.repack166, align 8, !dbg !5026, !tbaa !112, !alias.scope !116, !noalias !5027
  %.repack168 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %17, i64 0, i32 2, !dbg !5026
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838886992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack168, align 8, !dbg !5026, !tbaa !112, !alias.scope !116, !noalias !5027
  %.repack170 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %17, i64 0, i32 3, !dbg !5026
  store i64 %arraylen, i64 addrspace(10)* %.repack170, align 8, !dbg !5026, !tbaa !112, !alias.scope !116, !noalias !5027
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %15 release, align 8, !dbg !5026, !tbaa !865, !alias.scope !116, !noalias !5027
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #65, !dbg !5026
  %18 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !5026
  %19 = addrspacecast i8 addrspace(10)* %18 to i8 addrspace(11)*, !dbg !5026
  %20 = getelementptr inbounds i8, i8 addrspace(11)* %19, i64 8, !dbg !5026
  %21 = bitcast i8 addrspace(11)* %20 to {} addrspace(10)* addrspace(11)*, !dbg !5026
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %21 release, align 8, !dbg !5026, !tbaa !865, !alias.scope !116, !noalias !5027
  %box20 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #64, !dbg !5023
  %22 = bitcast {} addrspace(10)* %box20 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5023
  %23 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %22, i64 0, i64 0, !dbg !5023
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %23, align 8, !dbg !5023, !tbaa !112, !alias.scope !116, !noalias !5027
  %24 = addrspacecast {} addrspace(10)* %box20 to {} addrspace(12)*, !dbg !5023
  call void @ijl_throw({} addrspace(12)* %24) #63, !dbg !5023
  unreachable, !dbg !5023

L28:                                              ; preds = %top
  %25 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5030
  %26 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %25 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5030
  %arraylen_ptr21 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %26, i64 0, i32 1, !dbg !5030
  %arraylen22 = load i64, i64 addrspace(11)* %arraylen_ptr21, align 8, !dbg !5030, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not173 = icmp eq i64 %arraysize, %arraylen22, !dbg !5032
  br i1 %.not173, label %L38, label %L32, !dbg !5031

L32:                                              ; preds = %L28
  %current_task25174 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5034
  %current_task25 = bitcast {}*** %current_task25174 to {}**, !dbg !5034
  %newstruct26 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #64, !dbg !5034
  %27 = bitcast {} addrspace(10)* %newstruct26 to {} addrspace(10)* addrspace(10)*, !dbg !5034
  %28 = addrspacecast {} addrspace(10)* addrspace(10)* %27 to {} addrspace(10)* addrspace(11)*, !dbg !5034
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %28, align 8, !dbg !5034, !tbaa !865, !alias.scope !116, !noalias !5027
  %29 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %28, i64 1, !dbg !5034
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %29, align 8, !dbg !5034, !tbaa !865, !alias.scope !116, !noalias !5027
  %box28 = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #64, !dbg !5034
  %30 = bitcast {} addrspace(10)* %box28 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5034
  %.repack176 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %30, i64 0, i32 0, !dbg !5034
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838886944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack176, align 8, !dbg !5034, !tbaa !112, !alias.scope !116, !noalias !5027
  %.repack177 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %30, i64 0, i32 1, !dbg !5034
  store i64 %arraysize, i64 addrspace(10)* %.repack177, align 8, !dbg !5034, !tbaa !112, !alias.scope !116, !noalias !5027
  %.repack179 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %30, i64 0, i32 2, !dbg !5034
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838886896 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack179, align 8, !dbg !5034, !tbaa !112, !alias.scope !116, !noalias !5027
  %.repack181 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %30, i64 0, i32 3, !dbg !5034
  store i64 %arraylen22, i64 addrspace(10)* %.repack181, align 8, !dbg !5034, !tbaa !112, !alias.scope !116, !noalias !5027
  store atomic {} addrspace(10)* %box28, {} addrspace(10)* addrspace(11)* %28 release, align 8, !dbg !5034, !tbaa !865, !alias.scope !116, !noalias !5027
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct26, {} addrspace(10)* nonnull %box28) #65, !dbg !5034
  %31 = bitcast {} addrspace(10)* %newstruct26 to i8 addrspace(10)*, !dbg !5034
  %32 = addrspacecast i8 addrspace(10)* %31 to i8 addrspace(11)*, !dbg !5034
  %33 = getelementptr inbounds i8, i8 addrspace(11)* %32, i64 8, !dbg !5034
  %34 = bitcast i8 addrspace(11)* %33 to {} addrspace(10)* addrspace(11)*, !dbg !5034
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %34 release, align 8, !dbg !5034, !tbaa !865, !alias.scope !116, !noalias !5027
  %box30 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #64, !dbg !5031
  %35 = bitcast {} addrspace(10)* %box30 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5031
  %36 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %35, i64 0, i64 0, !dbg !5031
  store {} addrspace(10)* %newstruct26, {} addrspace(10)* addrspace(10)* %36, align 8, !dbg !5031, !tbaa !112, !alias.scope !116, !noalias !5027
  %37 = addrspacecast {} addrspace(10)* %box30 to {} addrspace(12)*, !dbg !5031
  call void @ijl_throw({} addrspace(12)* %37) #63, !dbg !5031
  unreachable, !dbg !5031

L38:                                              ; preds = %L28
  %.not184 = icmp eq i64 %arraysize, 0, !dbg !5035
  br i1 %.not184, label %common.ret, label %L41, !dbg !5036

common.ret:                                       ; preds = %L182.critedge, %L152.critedge, %L49.L61_crit_edge, %L38
  %common.ret.op = phi {} addrspace(10)* [ %41, %L152.critedge ], [ %42, %L182.critedge ], [ %0, %L38 ], [ %0, %L49.L61_crit_edge ]
  ret {} addrspace(10)* %common.ret.op, !dbg !5020

L41:                                              ; preds = %L38
  %.not185 = icmp eq i64 %arraysize12, 0, !dbg !5037
  br i1 %.not185, label %L49.L61_crit_edge, label %L112, !dbg !5038

L49.L61_crit_edge:                                ; preds = %L41
  %38 = bitcast {} addrspace(10)* %0 to i8 addrspace(13)* addrspace(10)*, !dbg !5039
  %39 = addrspacecast i8 addrspace(13)* addrspace(10)* %38 to i8 addrspace(13)* addrspace(11)*, !dbg !5039
  %arrayptr189.pre257 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %39, align 16, !dbg !5039, !tbaa !382, !alias.scope !5042, !noalias !319
  %40 = shl nuw i64 %arraysize, 3, !dbg !5043
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr189.pre257, i8 0, i64 %40, i1 false) #63, !dbg !5039, !tbaa !268, !alias.scope !116, !noalias !5027
  br label %common.ret, !dbg !5020

L112:                                             ; preds = %L41
  switch i32 %1, label %L228 [
    i32 1409286144, label %L152.critedge
    i32 1308622848, label %L152.critedge
    i32 1124073472, label %L152.critedge
    i32 1392508928, label %L182.critedge
    i32 1929379840, label %L182.critedge.fold.split
    i32 1207959552, label %L219.critedge
    i32 1744830464, label %L219.critedge.fold.split
  ], !dbg !5044

L152.critedge:                                    ; preds = %L112, %L112, %L112
  %41 = call fastcc nonnull {} addrspace(10)* @julia_gemv__2037(i32 zeroext %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0) #63, !dbg !5046
  br label %common.ret

L182.critedge.fold.split:                         ; preds = %L112
  br label %L182.critedge, !dbg !5047

L182.critedge:                                    ; preds = %L182.critedge.fold.split, %L112
  %value_phi67 = phi i32 [ 1275068416, %L182.critedge.fold.split ], [ 1426063360, %L112 ], !dbg !5047
  %42 = call fastcc nonnull {} addrspace(10)* @julia_symv__2026(i32 noundef zeroext %value_phi67, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0) #63, !dbg !5047
  br label %common.ret

L219.critedge.fold.split:                         ; preds = %L112
  br label %L219.critedge, !dbg !5048

L219.critedge:                                    ; preds = %L219.critedge.fold.split, %L112
  %value_phi71 = phi i32 [ 1275068416, %L219.critedge.fold.split ], [ 1426063360, %L112 ], !dbg !5048
  %43 = call nonnull {} addrspace(10)* @ijl_box_char(i32 zeroext %value_phi71) #63, !dbg !5048
  %current_task72203 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5048
  %current_task72 = bitcast {}*** %current_task72203 to {}**, !dbg !5048
  %box73 = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task72, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4796493856 to {}*) to {} addrspace(10)*)) #64, !dbg !5048
  %44 = bitcast {} addrspace(10)* %box73 to double addrspace(10)*, !dbg !5048
  store double 1.000000e+00, double addrspace(10)* %44, align 8, !dbg !5048, !tbaa !112, !alias.scope !116, !noalias !5027
  %box75 = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task72, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4796493856 to {}*) to {} addrspace(10)*)) #64, !dbg !5048
  %45 = bitcast {} addrspace(10)* %box75 to double addrspace(10)*, !dbg !5048
  store double 0.000000e+00, double addrspace(10)* %45, align 8, !dbg !5048, !tbaa !112, !alias.scope !116, !noalias !5027
  %46 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780615872 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %43, {} addrspace(10)* nonnull %box73, {} addrspace(10)* nonnull %2, {} addrspace(10)* nonnull %3, {} addrspace(10)* nonnull %box75, {} addrspace(10)* nonnull %0) #66, !dbg !5048
  unreachable, !dbg !5048

L228:                                             ; preds = %L112
  call void @ijl_type_error(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_j_str6, i64 0, i64 0), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4796494592 to {}*) to {} addrspace(10)*), {} addrspace(12)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(12)*)) #63, !dbg !5048
  unreachable, !dbg !5048
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia_gemv__2037(i32 zeroext "enzyme_inactive" %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3) unnamed_addr #63 !dbg !5111 {
top:
  %4 = call {}*** @julia.get_pgcstack() #64
  %ptls_field134 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field134 to i64***
  %ptls_load135136 = load i64**, i64*** %5, align 8, !tbaa !68
  %6 = getelementptr inbounds i64*, i64** %ptls_load135136, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !72, !invariant.load !67
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #64, !dbg !5112
  fence syncscope("singlethread") seq_cst
  %7 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !5113
  %arraysize_ptr137 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 3, !dbg !5113
  %8 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr137 to i64 addrspace(10)*, !dbg !5113
  %9 = addrspacecast i64 addrspace(10)* %8 to i64 addrspace(11)*, !dbg !5113
  %arraysize = load i64, i64 addrspace(11)* %9, align 8, !dbg !5113, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %arraysize_ptr2138 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 4, !dbg !5113
  %10 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr2138 to i64 addrspace(10)*, !dbg !5113
  %11 = addrspacecast i64 addrspace(10)* %10 to i64 addrspace(11)*, !dbg !5113
  %arraysize3 = load i64, i64 addrspace(11)* %11, align 8, !dbg !5113, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  switch i32 %0, label %L69 [
    i32 1308622848, label %L7
    i32 1124073472, label %top.L31_crit_edge
    i32 1409286144, label %L52
  ], !dbg !5115

top.L31_crit_edge:                                ; preds = %top
  %.phi.trans.insert = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert243 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr17.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert243, i64 0, i32 1
  %arraylen18.pre = load i64, i64 addrspace(11)* %arraylen_ptr17.phi.trans.insert, align 8, !dbg !5116, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.phi.trans.insert245 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert246 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert245 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr129.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert246, i64 0, i32 1
  %arraylen130.pre = load i64, i64 addrspace(11)* %arraylen_ptr129.phi.trans.insert, align 8, !dbg !5117
  %12 = icmp ne i64 %arraylen18.pre, %arraysize, !dbg !5118
  %13 = icmp ne i64 %arraylen130.pre, %arraysize3, !dbg !5117
  %value_phi19.in = select i1 %12, i1 true, i1 %13, !dbg !5117
  br i1 %value_phi19.in, label %L41, label %L69, !dbg !5117

L7:                                               ; preds = %top
  %14 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5120
  %15 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %14 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5120
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %15, i64 0, i32 1, !dbg !5120
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5120, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %16 = icmp ne i64 %arraylen, %arraysize3, !dbg !5121
  %17 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5115
  %18 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5115
  %arraylen_ptr131 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %18, i64 0, i32 1, !dbg !5115
  %arraylen132 = load i64, i64 addrspace(11)* %arraylen_ptr131, align 8, !dbg !5115
  %19 = icmp ne i64 %arraylen132, %arraysize, !dbg !5115
  %value_phi.in = select i1 %16, i1 true, i1 %19, !dbg !5115
  br i1 %value_phi.in, label %L17, label %L69, !dbg !5115

L17:                                              ; preds = %L7
  %current_task12144 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5123
  %current_task12 = bitcast {}*** %current_task12144 to {}**, !dbg !5123
  %newstruct13 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #65, !dbg !5123
  %20 = bitcast {} addrspace(10)* %newstruct13 to {} addrspace(10)* addrspace(10)*, !dbg !5123
  %21 = addrspacecast {} addrspace(10)* addrspace(10)* %20 to {} addrspace(10)* addrspace(11)*, !dbg !5123
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %21, align 8, !dbg !5123, !tbaa !865, !alias.scope !116, !noalias !5125
  %22 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %21, i64 1, !dbg !5123
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %22, align 8, !dbg !5123, !tbaa !865, !alias.scope !116, !noalias !5125
  %box = call noalias nonnull dereferenceable(56) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 56, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4362917456 to {}*) to {} addrspace(10)*)) #65, !dbg !5123
  %23 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5123
  %.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 0, !dbg !5123
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274512 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !5123, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack146.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 1, i64 0, !dbg !5123
  store i64 %arraysize, i64 addrspace(10)* %.repack146.repack, align 8, !dbg !5123, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack146.repack156 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 1, i64 1, !dbg !5123
  store i64 %arraysize3, i64 addrspace(10)* %.repack146.repack156, align 8, !dbg !5123, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack148 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 2, !dbg !5123
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274480 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack148, align 8, !dbg !5123, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack150 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 3, !dbg !5123
  store i64 %arraylen, i64 addrspace(10)* %.repack150, align 8, !dbg !5123, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack152 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 4, !dbg !5123
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274432 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack152, align 8, !dbg !5123, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack154 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 5, !dbg !5123
  store i64 %arraylen132, i64 addrspace(10)* %.repack154, align 8, !dbg !5123, !tbaa !112, !alias.scope !116, !noalias !5125
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %21 release, align 8, !dbg !5123, !tbaa !865, !alias.scope !116, !noalias !5125
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct13, {} addrspace(10)* nonnull %box) #66, !dbg !5123
  %24 = bitcast {} addrspace(10)* %newstruct13 to i8 addrspace(10)*, !dbg !5123
  %25 = addrspacecast i8 addrspace(10)* %24 to i8 addrspace(11)*, !dbg !5123
  %26 = getelementptr inbounds i8, i8 addrspace(11)* %25, i64 8, !dbg !5123
  %27 = bitcast i8 addrspace(11)* %26 to {} addrspace(10)* addrspace(11)*, !dbg !5123
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %27 release, align 8, !dbg !5123, !tbaa !865, !alias.scope !116, !noalias !5125
  %box16 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #65, !dbg !5124
  %28 = bitcast {} addrspace(10)* %box16 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5124
  %29 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %28, i64 0, i64 0, !dbg !5124
  store {} addrspace(10)* %newstruct13, {} addrspace(10)* addrspace(10)* %29, align 8, !dbg !5124, !tbaa !112, !alias.scope !116, !noalias !5125
  %30 = addrspacecast {} addrspace(10)* %box16 to {} addrspace(12)*, !dbg !5124
  call void @ijl_throw({} addrspace(12)* %30) #64, !dbg !5124
  unreachable, !dbg !5124

L41:                                              ; preds = %top.L31_crit_edge
  %current_task24160 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5128
  %current_task24 = bitcast {}*** %current_task24160 to {}**, !dbg !5128
  %newstruct25 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #65, !dbg !5128
  %31 = bitcast {} addrspace(10)* %newstruct25 to {} addrspace(10)* addrspace(10)*, !dbg !5128
  %32 = addrspacecast {} addrspace(10)* addrspace(10)* %31 to {} addrspace(10)* addrspace(11)*, !dbg !5128
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %32, align 8, !dbg !5128, !tbaa !865, !alias.scope !116, !noalias !5125
  %33 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %32, i64 1, !dbg !5128
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %33, align 8, !dbg !5128, !tbaa !865, !alias.scope !116, !noalias !5125
  %box27 = call noalias nonnull dereferenceable(64) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 64, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4363380112 to {}*) to {} addrspace(10)*)) #65, !dbg !5128
  %34 = bitcast {} addrspace(10)* %box27 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5128
  %.repack162 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 0, !dbg !5128
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274368 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack162, align 8, !dbg !5128, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack163 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 1, !dbg !5128
  store i64 %arraysize3, i64 addrspace(10)* %.repack163, align 8, !dbg !5128, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack165 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 2, !dbg !5128
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274336 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack165, align 8, !dbg !5128, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack167 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 3, !dbg !5128
  store i64 %arraysize, i64 addrspace(10)* %.repack167, align 8, !dbg !5128, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack169 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 4, !dbg !5128
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274480 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack169, align 8, !dbg !5128, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack171 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 5, !dbg !5128
  store i64 %arraylen18.pre, i64 addrspace(10)* %.repack171, align 8, !dbg !5128, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack173 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 6, !dbg !5128
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274432 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack173, align 8, !dbg !5128, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack175 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 7, !dbg !5128
  store i64 %arraylen130.pre, i64 addrspace(10)* %.repack175, align 8, !dbg !5128, !tbaa !112, !alias.scope !116, !noalias !5125
  store atomic {} addrspace(10)* %box27, {} addrspace(10)* addrspace(11)* %32 release, align 8, !dbg !5128, !tbaa !865, !alias.scope !116, !noalias !5125
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct25, {} addrspace(10)* nonnull %box27) #66, !dbg !5128
  %35 = bitcast {} addrspace(10)* %newstruct25 to i8 addrspace(10)*, !dbg !5128
  %36 = addrspacecast i8 addrspace(10)* %35 to i8 addrspace(11)*, !dbg !5128
  %37 = getelementptr inbounds i8, i8 addrspace(11)* %36, i64 8, !dbg !5128
  %38 = bitcast i8 addrspace(11)* %37 to {} addrspace(10)* addrspace(11)*, !dbg !5128
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %38 release, align 8, !dbg !5128, !tbaa !865, !alias.scope !116, !noalias !5125
  %box29 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #65, !dbg !5129
  %39 = bitcast {} addrspace(10)* %box29 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5129
  %40 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %39, i64 0, i64 0, !dbg !5129
  store {} addrspace(10)* %newstruct25, {} addrspace(10)* addrspace(10)* %40, align 8, !dbg !5129, !tbaa !112, !alias.scope !116, !noalias !5125
  %41 = addrspacecast {} addrspace(10)* %box29 to {} addrspace(12)*, !dbg !5129
  call void @ijl_throw({} addrspace(12)* %41) #64, !dbg !5129
  unreachable, !dbg !5129

L52:                                              ; preds = %top
  %.phi.trans.insert248 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert249 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert248 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr32.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert249, i64 0, i32 1
  %arraylen33.pre = load i64, i64 addrspace(11)* %arraylen_ptr32.phi.trans.insert, align 8, !dbg !5130, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.phi.trans.insert251 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert252 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert251 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr127.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert252, i64 0, i32 1
  %arraylen128.pre = load i64, i64 addrspace(11)* %arraylen_ptr127.phi.trans.insert, align 8, !dbg !5131
  %42 = icmp ne i64 %arraylen33.pre, %arraysize, !dbg !5132
  %43 = icmp ne i64 %arraylen128.pre, %arraysize3, !dbg !5131
  %value_phi34.in = select i1 %42, i1 true, i1 %43, !dbg !5131
  br i1 %value_phi34.in, label %L62, label %L69, !dbg !5131

L62:                                              ; preds = %L52
  %current_task39179 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5134
  %current_task39 = bitcast {}*** %current_task39179 to {}**, !dbg !5134
  %newstruct40 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task39, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #65, !dbg !5134
  %44 = bitcast {} addrspace(10)* %newstruct40 to {} addrspace(10)* addrspace(10)*, !dbg !5134
  %45 = addrspacecast {} addrspace(10)* addrspace(10)* %44 to {} addrspace(10)* addrspace(11)*, !dbg !5134
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %45, align 8, !dbg !5134, !tbaa !865, !alias.scope !116, !noalias !5125
  %46 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %45, i64 1, !dbg !5134
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %46, align 8, !dbg !5134, !tbaa !865, !alias.scope !116, !noalias !5125
  %box42 = call noalias nonnull dereferenceable(64) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task39, i64 64, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4363380112 to {}*) to {} addrspace(10)*)) #65, !dbg !5134
  %47 = bitcast {} addrspace(10)* %box42 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5134
  %.repack181 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 0, !dbg !5134
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack181, align 8, !dbg !5134, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack182 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 1, !dbg !5134
  store i64 %arraysize3, i64 addrspace(10)* %.repack182, align 8, !dbg !5134, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack184 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 2, !dbg !5134
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274336 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack184, align 8, !dbg !5134, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack186 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 3, !dbg !5134
  store i64 %arraysize, i64 addrspace(10)* %.repack186, align 8, !dbg !5134, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack188 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 4, !dbg !5134
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274480 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack188, align 8, !dbg !5134, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack190 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 5, !dbg !5134
  store i64 %arraylen33.pre, i64 addrspace(10)* %.repack190, align 8, !dbg !5134, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack192 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 6, !dbg !5134
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274432 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack192, align 8, !dbg !5134, !tbaa !112, !alias.scope !116, !noalias !5125
  %.repack194 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 7, !dbg !5134
  store i64 %arraylen128.pre, i64 addrspace(10)* %.repack194, align 8, !dbg !5134, !tbaa !112, !alias.scope !116, !noalias !5125
  store atomic {} addrspace(10)* %box42, {} addrspace(10)* addrspace(11)* %45 release, align 8, !dbg !5134, !tbaa !865, !alias.scope !116, !noalias !5125
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct40, {} addrspace(10)* nonnull %box42) #66, !dbg !5134
  %48 = bitcast {} addrspace(10)* %newstruct40 to i8 addrspace(10)*, !dbg !5134
  %49 = addrspacecast i8 addrspace(10)* %48 to i8 addrspace(11)*, !dbg !5134
  %50 = getelementptr inbounds i8, i8 addrspace(11)* %49, i64 8, !dbg !5134
  %51 = bitcast i8 addrspace(11)* %50 to {} addrspace(10)* addrspace(11)*, !dbg !5134
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %51 release, align 8, !dbg !5134, !tbaa !865, !alias.scope !116, !noalias !5125
  %box44 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task39, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #65, !dbg !5135
  %52 = bitcast {} addrspace(10)* %box44 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5135
  %53 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %52, i64 0, i64 0, !dbg !5135
  store {} addrspace(10)* %newstruct40, {} addrspace(10)* addrspace(10)* %53, align 8, !dbg !5135, !tbaa !112, !alias.scope !116, !noalias !5125
  %54 = addrspacecast {} addrspace(10)* %box44 to {} addrspace(12)*, !dbg !5135
  call void @ijl_throw({} addrspace(12)* %54) #64, !dbg !5135
  unreachable, !dbg !5135

L69:                                              ; preds = %L52, %L7, %top.L31_crit_edge, %top
  %55 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !5136
  %56 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %55) #67, !dbg !5136
  %57 = bitcast {}* %56 to double**, !dbg !5136
  %arrayptr215 = load double*, double** %57, align 8, !dbg !5136, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %58 = addrspacecast {} addrspace(10)* %3 to {} addrspace(11)*, !dbg !5140
  %59 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %58) #67, !dbg !5140
  %60 = bitcast {}* %59 to double**, !dbg !5140
  %arrayptr50216 = load double*, double** %60, align 8, !dbg !5140, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %arrayptr50216274 = bitcast double* %arrayptr50216 to i8*, !dbg !5144
  %61 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !5144
  %62 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %61) #67, !dbg !5144
  %63 = bitcast {}* %62 to double**, !dbg !5144
  %arrayptr52218 = load double*, double** %63, align 8, !dbg !5144, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67
  %.not203 = icmp eq i64 %arraysize, 0, !dbg !5147
  %64 = select i1 %.not203, i64 1, i64 %arraysize, !dbg !5151
  %65 = call i64 @llvm.smax.i64(i64 %arraysize, i64 %64) #64, !dbg !5151
  %66 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %1, {} addrspace(10)* nonnull %2, {} addrspace(10)* nonnull %3) #64, !dbg !5152
  %67 = icmp slt i32 %0, 0, !dbg !5153
  br i1 %67, label %L120, label %L115, !dbg !5156

L115:                                             ; preds = %L69
  %68 = lshr i32 %0, 24, !dbg !5161
  br label %L133, !dbg !5156

L120:                                             ; preds = %L69
  %69 = call fastcc i32 @julia_UInt32_cold_2032(i32 zeroext %0) #64, !dbg !5156
  %70 = icmp ugt i32 %69, 255, !dbg !5163
  br i1 %70, label %L126, label %L133, !dbg !5163

L126:                                             ; preds = %L120
  call fastcc void @julia_throw_inexacterror_2030(i32 zeroext %69) #68, !dbg !5163
  unreachable, !dbg !5163

L133:                                             ; preds = %L120, %L115
  %value_phi64.in = phi i32 [ %68, %L115 ], [ %69, %L120 ]
  %value_phi64 = trunc i32 %value_phi64.in to i8, !dbg !5166
  switch i8 %value_phi64, label %.thread.fold.split [
    i8 78, label %.thread
    i8 110, label %.thread
    i8 84, label %71
    i8 116, label %72
    i8 67, label %select.unfold
    i8 99, label %select.unfold
  ], !dbg !5152

71:                                               ; preds = %L133
  br label %.thread, !dbg !5152

72:                                               ; preds = %L133
  br label %.thread, !dbg !5152

select.unfold:                                    ; preds = %L133, %L133
  br label %.thread, !dbg !5152

.thread.fold.split:                               ; preds = %L133
  br label %.thread, !dbg !5152

.thread:                                          ; preds = %.thread.fold.split, %select.unfold, %72, %71, %L133, %L133
  %73 = phi i32 [ 0, %L133 ], [ 0, %L133 ], [ 2, %.thread.fold.split ], [ 0, %72 ], [ 0, %71 ], [ 0, %select.unfold ]
  %74 = phi i1 [ true, %L133 ], [ true, %L133 ], [ false, %.thread.fold.split ], [ false, %72 ], [ false, %71 ], [ false, %select.unfold ]
  %75 = phi i1 [ false, %L133 ], [ false, %L133 ], [ false, %.thread.fold.split ], [ true, %72 ], [ true, %71 ], [ true, %select.unfold ]
  %76 = trunc i64 %arraysize to i32, !dbg !5152
  %77 = trunc i64 %arraysize3 to i32, !dbg !5152
  %78 = trunc i64 %65 to i32, !dbg !5152
  %79 = icmp slt i32 %76, 0, !dbg !5152
  %80 = select i1 %79, i32 3, i32 %73, !dbg !5152
  %81 = icmp slt i32 %77, 0, !dbg !5152
  %82 = select i1 %81, i32 4, i32 %80, !dbg !5152
  %83 = call i32 @llvm.smax.i32(i32 %76, i32 1) #64, !dbg !5152
  %84 = icmp sgt i32 %83, %78, !dbg !5152
  %85 = select i1 %84, i32 7, i32 %82, !dbg !5152
  %86 = icmp eq i32 %85, 0, !dbg !5152
  call void @llvm.assume(i1 %86), !dbg !5152
  %87 = icmp eq i32 %76, 0, !dbg !5152
  %88 = icmp eq i32 %77, 0, !dbg !5152
  %89 = or i1 %87, %88, !dbg !5152
  br i1 %89, label %dgemv_64_.exit, label %90, !dbg !5152

90:                                               ; preds = %.thread
  %91 = select i1 %74, i32 %77, i32 %76, !dbg !5152
  %92 = select i1 %74, i32 %76, i32 %77, !dbg !5152
  %93 = icmp sgt i32 %92, 0, !dbg !5152
  br i1 %93, label %.preheader, label %.loopexit273, !dbg !5152

.preheader:                                       ; preds = %90
  %94 = zext i32 %92 to i64, !dbg !5152
  %95 = shl nuw nsw i64 %94, 3, !dbg !5152
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %arrayptr50216274, i8 0, i64 %95, i1 false) #64, !dbg !5152, !tbaa !1662, !noalias !5167
  br label %.loopexit273, !dbg !5152

.loopexit273:                                     ; preds = %90, %.preheader
  br i1 %75, label %96, label %120, !dbg !5152

96:                                               ; preds = %.loopexit273
  %97 = icmp sgt i32 %92, 0, !dbg !5152
  br i1 %97, label %98, label %dgemv_64_.exit, !dbg !5152

98:                                               ; preds = %96
  %99 = icmp sgt i32 %91, 0, !dbg !5152
  %sext264 = shl i64 %65, 32, !dbg !5152
  %100 = ashr exact i64 %sext264, 32, !dbg !5152
  %101 = zext i32 %92 to i64, !dbg !5152
  %102 = zext i32 %91 to i64, !dbg !5152
  br label %103, !dbg !5152

103:                                              ; preds = %.loopexit, %98
  %iv4 = phi i64 [ %iv.next5, %.loopexit ], [ 0, %98 ], !dbg !5152
  %iv.next5 = add nuw nsw i64 %iv4, 1, !dbg !5152
  br i1 %99, label %104, label %.loopexit, !dbg !5152

104:                                              ; preds = %103
  %105 = mul nsw i64 %iv4, %100, !dbg !5152
  br label %106, !dbg !5152

106:                                              ; preds = %106, %104
  %iv6 = phi i64 [ %iv.next7, %106 ], [ 0, %104 ], !dbg !5152
  %107 = phi double [ 0.000000e+00, %104 ], [ %113, %106 ], !dbg !5152
  %iv.next7 = add nuw nsw i64 %iv6, 1, !dbg !5152
  %108 = getelementptr inbounds double, double* %arrayptr215, i64 %iv6, !dbg !5152
  %109 = load double, double* %108, align 8, !dbg !5152, !tbaa !1662
  %110 = add nsw i64 %iv6, %105, !dbg !5152
  %111 = getelementptr inbounds double, double* %arrayptr52218, i64 %110, !dbg !5152
  %112 = load double, double* %111, align 8, !dbg !5152, !tbaa !1662
  %113 = call double @llvm.fmuladd.f64(double %109, double %112, double %107) #64, !dbg !5152
  %114 = icmp eq i64 %iv.next7, %102, !dbg !5152
  br i1 %114, label %.loopexit.loopexit, label %106, !dbg !5152, !llvm.loop !5168

.loopexit.loopexit:                               ; preds = %106
  br label %.loopexit, !dbg !5152

.loopexit:                                        ; preds = %.loopexit.loopexit, %103
  %115 = phi double [ 0.000000e+00, %103 ], [ %113, %.loopexit.loopexit ], !dbg !5152
  %116 = getelementptr inbounds double, double* %arrayptr50216, i64 %iv4, !dbg !5152
  %117 = load double, double* %116, align 8, !dbg !5152, !tbaa !1662
  %118 = fadd double %115, %117, !dbg !5152
  store double %118, double* %116, align 8, !dbg !5152, !tbaa !1662, !noalias !5167
  %119 = icmp eq i64 %iv.next5, %101, !dbg !5152
  br i1 %119, label %dgemv_64_.exit.loopexit, label %103, !dbg !5152, !llvm.loop !5169

120:                                              ; preds = %.loopexit273
  call void @llvm.assume(i1 %74), !dbg !5152
  %121 = icmp sgt i32 %91, 0, !dbg !5152
  br i1 %121, label %122, label %dgemv_64_.exit, !dbg !5152

122:                                              ; preds = %120
  %123 = icmp sgt i32 %92, 0, !dbg !5152
  %sext = shl i64 %65, 32, !dbg !5152
  %124 = ashr exact i64 %sext, 32, !dbg !5152
  %125 = zext i32 %91 to i64, !dbg !5152
  %126 = zext i32 %92 to i64, !dbg !5152
  br label %127, !dbg !5152

127:                                              ; preds = %.loopexit269, %122
  %iv = phi i64 [ %iv.next, %.loopexit269 ], [ 0, %122 ], !dbg !5152
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5152
  %128 = getelementptr inbounds double, double* %arrayptr215, i64 %iv, !dbg !5152
  %129 = load double, double* %128, align 8, !dbg !5152, !tbaa !1662
  br i1 %123, label %130, label %.loopexit269, !dbg !5152

130:                                              ; preds = %127
  %131 = mul nsw i64 %iv, %124, !dbg !5152
  br label %132, !dbg !5152

132:                                              ; preds = %132, %130
  %iv2 = phi i64 [ %iv.next3, %132 ], [ 0, %130 ], !dbg !5152
  %iv.next3 = add nuw nsw i64 %iv2, 1, !dbg !5152
  %133 = add nsw i64 %iv2, %131, !dbg !5152
  %134 = getelementptr inbounds double, double* %arrayptr52218, i64 %133, !dbg !5152
  %135 = load double, double* %134, align 8, !dbg !5152, !tbaa !1662
  %136 = getelementptr inbounds double, double* %arrayptr50216, i64 %iv2, !dbg !5152
  %137 = load double, double* %136, align 8, !dbg !5152, !tbaa !1662
  %138 = call double @llvm.fmuladd.f64(double %129, double %135, double %137) #64, !dbg !5152
  store double %138, double* %136, align 8, !dbg !5152, !tbaa !1662, !noalias !5167
  %139 = icmp eq i64 %iv.next3, %126, !dbg !5152
  br i1 %139, label %.loopexit269.loopexit, label %132, !dbg !5152, !llvm.loop !5170

.loopexit269.loopexit:                            ; preds = %132
  br label %.loopexit269, !dbg !5152

.loopexit269:                                     ; preds = %.loopexit269.loopexit, %127
  %140 = icmp eq i64 %iv.next, %125, !dbg !5152
  br i1 %140, label %dgemv_64_.exit.loopexit1, label %127, !dbg !5152, !llvm.loop !5171

dgemv_64_.exit.loopexit:                          ; preds = %.loopexit
  br label %dgemv_64_.exit, !dbg !5152

dgemv_64_.exit.loopexit1:                         ; preds = %.loopexit269
  br label %dgemv_64_.exit, !dbg !5152

dgemv_64_.exit:                                   ; preds = %dgemv_64_.exit.loopexit1, %dgemv_64_.exit.loopexit, %120, %96, %.thread
  call void @llvm.julia.gc_preserve_end(token %66) #64, !dbg !5152
  ret {} addrspace(10)* %3, !dbg !5172
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__2037(i32 zeroext "enzyme_inactive" %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3, {} addrspace(10)* align 16 %"'2") unnamed_addr #63 !dbg !5173 {
top:
  %4 = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %5 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 0
  %"iv4'ac" = alloca i64, align 8
  %"iv6'ac" = alloca i64, align 8
  %"iv'ac" = alloca i64, align 8
  %"iv2'ac" = alloca i64, align 8
  %_cache = alloca double*, align 8
  %_cache10 = alloca double*, align 8
  %_cache12 = alloca double*, align 8
  %_cache14 = alloca double*, align 8
  %6 = call {}*** @julia.get_pgcstack() #64
  %ptls_field134 = getelementptr inbounds {}**, {}*** %6, i64 2
  %7 = bitcast {}*** %ptls_field134 to i64***
  %ptls_load135136 = load i64**, i64*** %7, align 8, !tbaa !68, !alias.scope !5174, !noalias !5177
  %8 = getelementptr inbounds i64*, i64** %ptls_load135136, i64 2
  %safepoint = load i64*, i64** %8, align 8, !tbaa !72, !invariant.load !67, !alias.scope !5179, !noalias !5182
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #64, !dbg !5184
  fence syncscope("singlethread") seq_cst
  %9 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !5185
  %arraysize_ptr137 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %9, i64 3, !dbg !5185
  %10 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr137 to i64 addrspace(10)*, !dbg !5185
  %11 = addrspacecast i64 addrspace(10)* %10 to i64 addrspace(11)*, !dbg !5185
  %arraysize = load i64, i64 addrspace(11)* %11, align 8, !dbg !5185, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !5187, !noalias !5190
  %12 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 3, !dbg !5185
  store i64 %arraysize, i64* %12, align 8, !dbg !5185
  %arraysize_ptr2138 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %9, i64 4, !dbg !5185
  %13 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr2138 to i64 addrspace(10)*, !dbg !5185
  %14 = addrspacecast i64 addrspace(10)* %13 to i64 addrspace(11)*, !dbg !5185
  %arraysize3 = load i64, i64 addrspace(11)* %14, align 8, !dbg !5185, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !5187, !noalias !5190
  switch i32 %0, label %L69 [
    i32 1308622848, label %L7
    i32 1124073472, label %top.L31_crit_edge
    i32 1409286144, label %L52
  ], !dbg !5192

top.L31_crit_edge:                                ; preds = %top
  %.phi.trans.insert = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert243 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr17.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert243, i64 0, i32 1
  %arraylen18.pre = load i64, i64 addrspace(11)* %arraylen_ptr17.phi.trans.insert, align 8, !dbg !5193, !tbaa !315, !range !86, !alias.scope !5195, !noalias !5198
  %.phi.trans.insert245 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert246 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert245 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr129.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert246, i64 0, i32 1
  %arraylen130.pre = load i64, i64 addrspace(11)* %arraylen_ptr129.phi.trans.insert, align 8, !dbg !5194, !alias.scope !5200, !noalias !5203
  %15 = icmp ne i64 %arraylen18.pre, %arraysize, !dbg !5205
  %16 = icmp ne i64 %arraylen130.pre, %arraysize3, !dbg !5194
  %value_phi19.in = select i1 %15, i1 true, i1 %16, !dbg !5194
  br i1 %value_phi19.in, label %L41, label %L69, !dbg !5194

L7:                                               ; preds = %top
  %17 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5207
  %18 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5207
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %18, i64 0, i32 1, !dbg !5207
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5207, !tbaa !315, !range !86, !alias.scope !5195, !noalias !5198
  %19 = icmp ne i64 %arraylen, %arraysize3, !dbg !5208
  %20 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5192
  %21 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %20 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5192
  %arraylen_ptr131 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %21, i64 0, i32 1, !dbg !5192
  %arraylen132 = load i64, i64 addrspace(11)* %arraylen_ptr131, align 8, !dbg !5192, !alias.scope !5200, !noalias !5203
  %22 = icmp ne i64 %arraylen132, %arraysize, !dbg !5192
  %value_phi.in = select i1 %19, i1 true, i1 %22, !dbg !5192
  br i1 %value_phi.in, label %L17, label %L69, !dbg !5192

L17:                                              ; preds = %L7
  %current_task12144 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5210
  %current_task12 = bitcast {}*** %current_task12144 to {}**, !dbg !5210
  %newstruct13 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #65, !dbg !5210
  %23 = bitcast {} addrspace(10)* %newstruct13 to {} addrspace(10)* addrspace(10)*, !dbg !5210
  %24 = addrspacecast {} addrspace(10)* addrspace(10)* %23 to {} addrspace(10)* addrspace(11)*, !dbg !5210
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %24, align 8, !dbg !5210, !tbaa !865, !alias.scope !116, !noalias !5212
  %25 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %24, i64 1, !dbg !5210
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %25, align 8, !dbg !5210, !tbaa !865, !alias.scope !116, !noalias !5212
  %box = call noalias nonnull dereferenceable(56) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 56, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4362917456 to {}*) to {} addrspace(10)*)) #65, !dbg !5210
  %26 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5210
  %.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 0, !dbg !5210
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274512 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !5210, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack146.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 1, i64 0, !dbg !5210
  store i64 %arraysize, i64 addrspace(10)* %.repack146.repack, align 8, !dbg !5210, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack146.repack156 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 1, i64 1, !dbg !5210
  store i64 %arraysize3, i64 addrspace(10)* %.repack146.repack156, align 8, !dbg !5210, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack148 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 2, !dbg !5210
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274480 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack148, align 8, !dbg !5210, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack150 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 3, !dbg !5210
  store i64 %arraylen, i64 addrspace(10)* %.repack150, align 8, !dbg !5210, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack152 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 4, !dbg !5210
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274432 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack152, align 8, !dbg !5210, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack154 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 5, !dbg !5210
  store i64 %arraylen132, i64 addrspace(10)* %.repack154, align 8, !dbg !5210, !tbaa !112, !alias.scope !116, !noalias !5212
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %24 release, align 8, !dbg !5210, !tbaa !865, !alias.scope !116, !noalias !5212
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct13, {} addrspace(10)* nonnull %box) #66, !dbg !5210
  %27 = bitcast {} addrspace(10)* %newstruct13 to i8 addrspace(10)*, !dbg !5210
  %28 = addrspacecast i8 addrspace(10)* %27 to i8 addrspace(11)*, !dbg !5210
  %29 = getelementptr inbounds i8, i8 addrspace(11)* %28, i64 8, !dbg !5210
  %30 = bitcast i8 addrspace(11)* %29 to {} addrspace(10)* addrspace(11)*, !dbg !5210
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %30 release, align 8, !dbg !5210, !tbaa !865, !alias.scope !116, !noalias !5212
  %box16 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #65, !dbg !5211
  %31 = bitcast {} addrspace(10)* %box16 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5211
  %32 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %31, i64 0, i64 0, !dbg !5211
  store {} addrspace(10)* %newstruct13, {} addrspace(10)* addrspace(10)* %32, align 8, !dbg !5211, !tbaa !112, !alias.scope !116, !noalias !5212
  %33 = addrspacecast {} addrspace(10)* %box16 to {} addrspace(12)*, !dbg !5211
  call void @ijl_throw({} addrspace(12)* %33) #64, !dbg !5211
  unreachable, !dbg !5211

L41:                                              ; preds = %top.L31_crit_edge
  %current_task24160 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5215
  %current_task24 = bitcast {}*** %current_task24160 to {}**, !dbg !5215
  %newstruct25 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #65, !dbg !5215
  %34 = bitcast {} addrspace(10)* %newstruct25 to {} addrspace(10)* addrspace(10)*, !dbg !5215
  %35 = addrspacecast {} addrspace(10)* addrspace(10)* %34 to {} addrspace(10)* addrspace(11)*, !dbg !5215
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %35, align 8, !dbg !5215, !tbaa !865, !alias.scope !116, !noalias !5212
  %36 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %35, i64 1, !dbg !5215
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %36, align 8, !dbg !5215, !tbaa !865, !alias.scope !116, !noalias !5212
  %box27 = call noalias nonnull dereferenceable(64) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 64, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4363380112 to {}*) to {} addrspace(10)*)) #65, !dbg !5215
  %37 = bitcast {} addrspace(10)* %box27 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5215
  %.repack162 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 0, !dbg !5215
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274368 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack162, align 8, !dbg !5215, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack163 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 1, !dbg !5215
  store i64 %arraysize3, i64 addrspace(10)* %.repack163, align 8, !dbg !5215, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack165 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 2, !dbg !5215
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274336 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack165, align 8, !dbg !5215, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack167 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 3, !dbg !5215
  store i64 %arraysize, i64 addrspace(10)* %.repack167, align 8, !dbg !5215, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack169 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 4, !dbg !5215
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274480 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack169, align 8, !dbg !5215, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack171 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 5, !dbg !5215
  store i64 %arraylen18.pre, i64 addrspace(10)* %.repack171, align 8, !dbg !5215, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack173 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 6, !dbg !5215
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274432 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack173, align 8, !dbg !5215, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack175 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 7, !dbg !5215
  store i64 %arraylen130.pre, i64 addrspace(10)* %.repack175, align 8, !dbg !5215, !tbaa !112, !alias.scope !116, !noalias !5212
  store atomic {} addrspace(10)* %box27, {} addrspace(10)* addrspace(11)* %35 release, align 8, !dbg !5215, !tbaa !865, !alias.scope !116, !noalias !5212
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct25, {} addrspace(10)* nonnull %box27) #66, !dbg !5215
  %38 = bitcast {} addrspace(10)* %newstruct25 to i8 addrspace(10)*, !dbg !5215
  %39 = addrspacecast i8 addrspace(10)* %38 to i8 addrspace(11)*, !dbg !5215
  %40 = getelementptr inbounds i8, i8 addrspace(11)* %39, i64 8, !dbg !5215
  %41 = bitcast i8 addrspace(11)* %40 to {} addrspace(10)* addrspace(11)*, !dbg !5215
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %41 release, align 8, !dbg !5215, !tbaa !865, !alias.scope !116, !noalias !5212
  %box29 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #65, !dbg !5216
  %42 = bitcast {} addrspace(10)* %box29 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5216
  %43 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %42, i64 0, i64 0, !dbg !5216
  store {} addrspace(10)* %newstruct25, {} addrspace(10)* addrspace(10)* %43, align 8, !dbg !5216, !tbaa !112, !alias.scope !116, !noalias !5212
  %44 = addrspacecast {} addrspace(10)* %box29 to {} addrspace(12)*, !dbg !5216
  call void @ijl_throw({} addrspace(12)* %44) #64, !dbg !5216
  unreachable, !dbg !5216

L52:                                              ; preds = %top
  %.phi.trans.insert248 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert249 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert248 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr32.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert249, i64 0, i32 1
  %arraylen33.pre = load i64, i64 addrspace(11)* %arraylen_ptr32.phi.trans.insert, align 8, !dbg !5217, !tbaa !315, !range !86, !alias.scope !5195, !noalias !5198
  %.phi.trans.insert251 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert252 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert251 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr127.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert252, i64 0, i32 1
  %arraylen128.pre = load i64, i64 addrspace(11)* %arraylen_ptr127.phi.trans.insert, align 8, !dbg !5218, !alias.scope !5200, !noalias !5203
  %45 = icmp ne i64 %arraylen33.pre, %arraysize, !dbg !5219
  %46 = icmp ne i64 %arraylen128.pre, %arraysize3, !dbg !5218
  %value_phi34.in = select i1 %45, i1 true, i1 %46, !dbg !5218
  br i1 %value_phi34.in, label %L62, label %L69, !dbg !5218

L62:                                              ; preds = %L52
  %current_task39179 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5221
  %current_task39 = bitcast {}*** %current_task39179 to {}**, !dbg !5221
  %newstruct40 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task39, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #65, !dbg !5221
  %47 = bitcast {} addrspace(10)* %newstruct40 to {} addrspace(10)* addrspace(10)*, !dbg !5221
  %48 = addrspacecast {} addrspace(10)* addrspace(10)* %47 to {} addrspace(10)* addrspace(11)*, !dbg !5221
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %48, align 8, !dbg !5221, !tbaa !865, !alias.scope !116, !noalias !5212
  %49 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %48, i64 1, !dbg !5221
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %49, align 8, !dbg !5221, !tbaa !865, !alias.scope !116, !noalias !5212
  %box42 = call noalias nonnull dereferenceable(64) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task39, i64 64, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4363380112 to {}*) to {} addrspace(10)*)) #65, !dbg !5221
  %50 = bitcast {} addrspace(10)* %box42 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5221
  %.repack181 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 0, !dbg !5221
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack181, align 8, !dbg !5221, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack182 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 1, !dbg !5221
  store i64 %arraysize3, i64 addrspace(10)* %.repack182, align 8, !dbg !5221, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack184 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 2, !dbg !5221
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274336 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack184, align 8, !dbg !5221, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack186 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 3, !dbg !5221
  store i64 %arraysize, i64 addrspace(10)* %.repack186, align 8, !dbg !5221, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack188 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 4, !dbg !5221
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274480 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack188, align 8, !dbg !5221, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack190 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 5, !dbg !5221
  store i64 %arraylen33.pre, i64 addrspace(10)* %.repack190, align 8, !dbg !5221, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack192 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 6, !dbg !5221
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274432 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack192, align 8, !dbg !5221, !tbaa !112, !alias.scope !116, !noalias !5212
  %.repack194 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 7, !dbg !5221
  store i64 %arraylen128.pre, i64 addrspace(10)* %.repack194, align 8, !dbg !5221, !tbaa !112, !alias.scope !116, !noalias !5212
  store atomic {} addrspace(10)* %box42, {} addrspace(10)* addrspace(11)* %48 release, align 8, !dbg !5221, !tbaa !865, !alias.scope !116, !noalias !5212
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct40, {} addrspace(10)* nonnull %box42) #66, !dbg !5221
  %51 = bitcast {} addrspace(10)* %newstruct40 to i8 addrspace(10)*, !dbg !5221
  %52 = addrspacecast i8 addrspace(10)* %51 to i8 addrspace(11)*, !dbg !5221
  %53 = getelementptr inbounds i8, i8 addrspace(11)* %52, i64 8, !dbg !5221
  %54 = bitcast i8 addrspace(11)* %53 to {} addrspace(10)* addrspace(11)*, !dbg !5221
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %54 release, align 8, !dbg !5221, !tbaa !865, !alias.scope !116, !noalias !5212
  %box44 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task39, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #65, !dbg !5222
  %55 = bitcast {} addrspace(10)* %box44 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5222
  %56 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %55, i64 0, i64 0, !dbg !5222
  store {} addrspace(10)* %newstruct40, {} addrspace(10)* addrspace(10)* %56, align 8, !dbg !5222, !tbaa !112, !alias.scope !116, !noalias !5212
  %57 = addrspacecast {} addrspace(10)* %box44 to {} addrspace(12)*, !dbg !5222
  call void @ijl_throw({} addrspace(12)* %57) #64, !dbg !5222
  unreachable, !dbg !5222

L69:                                              ; preds = %L52, %L7, %top.L31_crit_edge, %top
  %"'ipc9" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !5223
  %58 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !5223
  %59 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc9"), !dbg !5223
  %60 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %58) #67, !dbg !5223
  %"'ipc8" = bitcast {}* %59 to double**, !dbg !5223
  %61 = bitcast {}* %60 to double**, !dbg !5223
  %"arrayptr215'ipl" = load double*, double** %"'ipc8", align 8, !dbg !5223, !tbaa !382, !alias.scope !5227, !noalias !5228, !nonnull !67
  %62 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 2, !dbg !5223
  store double* %"arrayptr215'ipl", double** %62, align 8, !dbg !5223
  %arrayptr215 = load double*, double** %61, align 8, !dbg !5223, !tbaa !382, !alias.scope !5195, !noalias !5198, !nonnull !67
  %"'ipc7" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !5229
  %63 = addrspacecast {} addrspace(10)* %3 to {} addrspace(11)*, !dbg !5229
  %64 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc7"), !dbg !5229
  %65 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %63) #67, !dbg !5229
  %"'ipc6" = bitcast {}* %64 to double**, !dbg !5229
  %66 = bitcast {}* %65 to double**, !dbg !5229
  %"arrayptr50216'ipl" = load double*, double** %"'ipc6", align 8, !dbg !5229, !tbaa !382, !alias.scope !5233, !noalias !5234, !nonnull !67
  %67 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 1, !dbg !5229
  store double* %"arrayptr50216'ipl", double** %67, align 8, !dbg !5229
  %arrayptr50216 = load double*, double** %66, align 8, !dbg !5229, !tbaa !382, !alias.scope !5235, !noalias !5236, !nonnull !67
  %"arrayptr50216274'ipc" = bitcast double* %"arrayptr50216'ipl" to i8*, !dbg !5237
  %arrayptr50216274 = bitcast double* %arrayptr50216 to i8*, !dbg !5237
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !5237
  %68 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !5237
  %69 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !5237
  %70 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %68) #67, !dbg !5237
  %"'ipc" = bitcast {}* %69 to double**, !dbg !5237
  %71 = bitcast {}* %70 to double**, !dbg !5237
  %"arrayptr52218'ipl" = load double*, double** %"'ipc", align 8, !dbg !5237, !tbaa !72, !alias.scope !5240, !noalias !5241, !nonnull !67
  %72 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 0, !dbg !5237
  store double* %"arrayptr52218'ipl", double** %72, align 8, !dbg !5237
  %arrayptr52218 = load double*, double** %71, align 8, !dbg !5237, !tbaa !72, !invariant.load !67, !alias.scope !5187, !noalias !5190, !nonnull !67
  %.not203 = icmp eq i64 %arraysize, 0, !dbg !5242
  %73 = select i1 %.not203, i64 1, i64 %arraysize, !dbg !5246
  %74 = call i64 @llvm.smax.i64(i64 %arraysize, i64 %73) #64, !dbg !5246
  %75 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'", {} addrspace(10)* %2, {} addrspace(10)* %"'1", {} addrspace(10)* %3, {} addrspace(10)* %"'2"), !dbg !5247
  %76 = icmp slt i32 %0, 0, !dbg !5248
  br i1 %76, label %L120, label %L115, !dbg !5251

L115:                                             ; preds = %L69
  %77 = lshr i32 %0, 24, !dbg !5256
  br label %L133, !dbg !5251

L120:                                             ; preds = %L69
  %78 = call fastcc i32 @julia_UInt32_cold_2032(i32 zeroext %0) #64, !dbg !5251
  %79 = icmp ugt i32 %78, 255, !dbg !5258
  br i1 %79, label %L126, label %L133, !dbg !5258

L126:                                             ; preds = %L120
  call fastcc void @julia_throw_inexacterror_2030(i32 zeroext %78) #68, !dbg !5258
  unreachable, !dbg !5258

L133:                                             ; preds = %L120, %L115
  %value_phi64.in = phi i32 [ %77, %L115 ], [ %78, %L120 ]
  %value_phi64 = trunc i32 %value_phi64.in to i8, !dbg !5261
  %80 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 4, !dbg !5247
  store i8 %value_phi64, i8* %80, align 1, !dbg !5247
  switch i8 %value_phi64, label %.thread.fold.split [
    i8 78, label %.thread
    i8 110, label %.thread
    i8 84, label %81
    i8 116, label %82
    i8 67, label %select.unfold
    i8 99, label %select.unfold
  ], !dbg !5247

81:                                               ; preds = %L133
  br label %.thread, !dbg !5247

82:                                               ; preds = %L133
  br label %.thread, !dbg !5247

select.unfold:                                    ; preds = %L133, %L133
  br label %.thread, !dbg !5247

.thread.fold.split:                               ; preds = %L133
  br label %.thread, !dbg !5247

.thread:                                          ; preds = %.thread.fold.split, %select.unfold, %82, %81, %L133, %L133
  %83 = phi i32 [ 0, %L133 ], [ 0, %L133 ], [ 2, %.thread.fold.split ], [ 0, %82 ], [ 0, %81 ], [ 0, %select.unfold ]
  %84 = phi i1 [ true, %L133 ], [ true, %L133 ], [ false, %.thread.fold.split ], [ false, %82 ], [ false, %81 ], [ false, %select.unfold ]
  %85 = phi i1 [ false, %L133 ], [ false, %L133 ], [ false, %.thread.fold.split ], [ true, %82 ], [ true, %81 ], [ true, %select.unfold ]
  %86 = trunc i64 %arraysize to i32, !dbg !5247
  %87 = trunc i64 %arraysize3 to i32, !dbg !5247
  %88 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 5, !dbg !5247
  store i32 %87, i32* %88, align 4, !dbg !5247
  %89 = trunc i64 %74 to i32, !dbg !5247
  %90 = icmp slt i32 %86, 0, !dbg !5247
  %91 = select i1 %90, i32 3, i32 %83, !dbg !5247
  %92 = icmp slt i32 %87, 0, !dbg !5247
  %93 = select i1 %92, i32 4, i32 %91, !dbg !5247
  %94 = call i32 @llvm.smax.i32(i32 %86, i32 1) #64, !dbg !5247
  %95 = icmp sgt i32 %94, %89, !dbg !5247
  %96 = select i1 %95, i32 7, i32 %93, !dbg !5247
  %97 = icmp eq i32 %96, 0, !dbg !5247
  call void @llvm.assume(i1 %97), !dbg !5247
  %98 = icmp eq i32 %86, 0, !dbg !5247
  %99 = icmp eq i32 %87, 0, !dbg !5247
  %100 = or i1 %98, %99, !dbg !5247
  br i1 %100, label %dgemv_64_.exit, label %101, !dbg !5247

101:                                              ; preds = %.thread
  %102 = select i1 %84, i32 %87, i32 %86, !dbg !5247
  %103 = select i1 %84, i32 %86, i32 %87, !dbg !5247
  %104 = icmp sgt i32 %103, 0, !dbg !5247
  br i1 %104, label %.preheader, label %.loopexit273, !dbg !5247

.preheader:                                       ; preds = %101
  %105 = zext i32 %103 to i64, !dbg !5247
  %106 = shl nuw nsw i64 %105, 3, !dbg !5247
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %arrayptr50216274, i8 0, i64 %106, i1 false) #64, !dbg !5247, !tbaa !1662, !noalias !5262
  br label %.loopexit273, !dbg !5247

.loopexit273:                                     ; preds = %.preheader, %101
  br i1 %85, label %107, label %152, !dbg !5247

107:                                              ; preds = %.loopexit273
  %108 = icmp sgt i32 %103, 0, !dbg !5247
  br i1 %108, label %109, label %dgemv_64_.exit, !dbg !5247

109:                                              ; preds = %107
  %110 = icmp sgt i32 %102, 0, !dbg !5247
  %sext264 = shl i64 %74, 32, !dbg !5247
  %111 = ashr exact i64 %sext264, 32, !dbg !5247
  %112 = zext i32 %103 to i64, !dbg !5247
  %113 = zext i32 %102 to i64, !dbg !5247
  %114 = add nsw i64 %112, -1, !dbg !5247
  %115 = add nsw i64 %113, -1, !dbg !5247
  %116 = add nuw i64 %114, 1, !dbg !5247
  %117 = add nuw i64 %115, 1, !dbg !5247
  %118 = mul nuw nsw i64 %117, %116, !dbg !5247
  %119 = mul nuw i64 %118, 8, !dbg !5247
  %120 = call noalias nonnull i8* @malloc(i64 %119), !dbg !5247
  %_malloccache = bitcast i8* %120 to double*, !dbg !5247
  %121 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 6, !dbg !5247
  store double* %_malloccache, double** %121, align 8, !dbg !5247
  store double* %_malloccache, double** %_cache, align 8, !dbg !5247, !invariant.group !5263
  %122 = mul nuw i64 %118, 8, !dbg !5247
  %123 = call noalias nonnull i8* @malloc(i64 %122), !dbg !5247
  %_malloccache11 = bitcast i8* %123 to double*, !dbg !5247
  %124 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 7, !dbg !5247
  store double* %_malloccache11, double** %124, align 8, !dbg !5247
  store double* %_malloccache11, double** %_cache10, align 8, !dbg !5247, !invariant.group !5264
  br label %125, !dbg !5247

125:                                              ; preds = %.loopexit, %109
  %iv4 = phi i64 [ %iv.next5, %.loopexit ], [ 0, %109 ], !dbg !5247
  %iv.next5 = add nuw nsw i64 %iv4, 1, !dbg !5247
  br i1 %110, label %126, label %.loopexit, !dbg !5247

126:                                              ; preds = %125
  %127 = mul nsw i64 %iv4, %111, !dbg !5247
  br label %128, !dbg !5247

128:                                              ; preds = %128, %126
  %iv6 = phi i64 [ %iv.next7, %128 ], [ 0, %126 ], !dbg !5247
  %129 = phi double [ 0.000000e+00, %126 ], [ %145, %128 ], !dbg !5247
  %iv.next7 = add nuw nsw i64 %iv6, 1, !dbg !5247
  %130 = getelementptr inbounds double, double* %arrayptr215, i64 %iv6, !dbg !5247
  %131 = load double, double* %130, align 8, !dbg !5247, !tbaa !1662, !alias.scope !5265, !noalias !5268
  %132 = load double*, double** %_cache, align 8, !dbg !5247, !dereferenceable !3229, !invariant.group !5263
  %133 = mul nuw nsw i64 %117, %116, !dbg !5247
  %134 = mul nuw nsw i64 %iv4, %117, !dbg !5247
  %135 = add nuw nsw i64 %iv6, %134, !dbg !5247
  %136 = getelementptr inbounds double, double* %132, i64 %135, !dbg !5247
  store double %131, double* %136, align 8, !dbg !5247, !tbaa !1662, !invariant.group !5270
  %137 = add nsw i64 %iv6, %127, !dbg !5247
  %138 = getelementptr inbounds double, double* %arrayptr52218, i64 %137, !dbg !5247
  %139 = load double, double* %138, align 8, !dbg !5247, !tbaa !1662, !alias.scope !5271, !noalias !5274
  %140 = load double*, double** %_cache10, align 8, !dbg !5247, !dereferenceable !3229, !invariant.group !5264
  %141 = mul nuw nsw i64 %117, %116, !dbg !5247
  %142 = mul nuw nsw i64 %iv4, %117, !dbg !5247
  %143 = add nuw nsw i64 %iv6, %142, !dbg !5247
  %144 = getelementptr inbounds double, double* %140, i64 %143, !dbg !5247
  store double %139, double* %144, align 8, !dbg !5247, !tbaa !1662, !invariant.group !5276
  %145 = call double @llvm.fmuladd.f64(double %131, double %139, double %129) #64, !dbg !5247
  %146 = icmp eq i64 %iv.next7, %113, !dbg !5247
  br i1 %146, label %.loopexit.loopexit, label %128, !dbg !5247, !llvm.loop !5277

.loopexit.loopexit:                               ; preds = %128
  br label %.loopexit, !dbg !5247

.loopexit:                                        ; preds = %.loopexit.loopexit, %125
  %147 = phi double [ 0.000000e+00, %125 ], [ %145, %.loopexit.loopexit ], !dbg !5247
  %148 = getelementptr inbounds double, double* %arrayptr50216, i64 %iv4, !dbg !5247
  %149 = load double, double* %148, align 8, !dbg !5247, !tbaa !1662, !alias.scope !5278, !noalias !5281
  %150 = fadd double %147, %149, !dbg !5247
  store double %150, double* %148, align 8, !dbg !5247, !tbaa !1662, !alias.scope !5278, !noalias !5283
  %151 = icmp eq i64 %iv.next5, %112, !dbg !5247
  br i1 %151, label %dgemv_64_.exit.loopexit, label %125, !dbg !5247, !llvm.loop !5286

152:                                              ; preds = %.loopexit273
  call void @llvm.assume(i1 %84), !dbg !5247
  %153 = icmp sgt i32 %102, 0, !dbg !5247
  br i1 %153, label %154, label %dgemv_64_.exit, !dbg !5247

154:                                              ; preds = %152
  %155 = icmp sgt i32 %103, 0, !dbg !5247
  %sext = shl i64 %74, 32, !dbg !5247
  %156 = ashr exact i64 %sext, 32, !dbg !5247
  %157 = zext i32 %102 to i64, !dbg !5247
  %158 = zext i32 %103 to i64, !dbg !5247
  %159 = add nsw i64 %157, -1, !dbg !5247
  %160 = add nsw i64 %158, -1, !dbg !5247
  %161 = add nuw i64 %159, 1, !dbg !5247
  %162 = mul nuw i64 %161, 8, !dbg !5247
  %163 = call noalias nonnull i8* @malloc(i64 %162), !dbg !5247
  %_malloccache13 = bitcast i8* %163 to double*, !dbg !5247
  %164 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 8, !dbg !5247
  store double* %_malloccache13, double** %164, align 8, !dbg !5247
  store double* %_malloccache13, double** %_cache12, align 8, !dbg !5247, !invariant.group !5287
  %165 = add nuw i64 %160, 1, !dbg !5247
  %166 = mul nuw nsw i64 %165, %161, !dbg !5247
  %167 = mul nuw i64 %166, 8, !dbg !5247
  %168 = call noalias nonnull i8* @malloc(i64 %167), !dbg !5247
  %_malloccache15 = bitcast i8* %168 to double*, !dbg !5247
  %169 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 9, !dbg !5247
  store double* %_malloccache15, double** %169, align 8, !dbg !5247
  store double* %_malloccache15, double** %_cache14, align 8, !dbg !5247, !invariant.group !5288
  br label %170, !dbg !5247

170:                                              ; preds = %.loopexit269, %154
  %iv = phi i64 [ %iv.next, %.loopexit269 ], [ 0, %154 ], !dbg !5247
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5247
  %171 = getelementptr inbounds double, double* %arrayptr215, i64 %iv, !dbg !5247
  %172 = load double, double* %171, align 8, !dbg !5247, !tbaa !1662, !alias.scope !5265, !noalias !5268
  %173 = load double*, double** %_cache12, align 8, !dbg !5247, !dereferenceable !3229, !invariant.group !5287
  %174 = getelementptr inbounds double, double* %173, i64 %iv, !dbg !5247
  store double %172, double* %174, align 8, !dbg !5247, !tbaa !1662, !invariant.group !5289
  br i1 %155, label %175, label %.loopexit269, !dbg !5247

175:                                              ; preds = %170
  %176 = mul nsw i64 %iv, %156, !dbg !5247
  br label %177, !dbg !5247

177:                                              ; preds = %177, %175
  %iv2 = phi i64 [ %iv.next3, %177 ], [ 0, %175 ], !dbg !5247
  %iv.next3 = add nuw nsw i64 %iv2, 1, !dbg !5247
  %178 = add nsw i64 %iv2, %176, !dbg !5247
  %179 = getelementptr inbounds double, double* %arrayptr52218, i64 %178, !dbg !5247
  %180 = load double, double* %179, align 8, !dbg !5247, !tbaa !1662, !alias.scope !5271, !noalias !5274
  %181 = getelementptr inbounds double, double* %arrayptr50216, i64 %iv2, !dbg !5247
  %182 = load double, double* %181, align 8, !dbg !5247, !tbaa !1662, !alias.scope !5278, !noalias !5281
  %183 = call double @llvm.fmuladd.f64(double %172, double %180, double %182) #64, !dbg !5247
  store double %183, double* %181, align 8, !dbg !5247, !tbaa !1662, !alias.scope !5278, !noalias !5283
  %184 = load double*, double** %_cache14, align 8, !dbg !5247, !dereferenceable !3229, !invariant.group !5288
  %185 = mul nuw nsw i64 %165, %161, !dbg !5247
  %186 = mul nuw nsw i64 %iv, %165, !dbg !5247
  %187 = add nuw nsw i64 %iv2, %186, !dbg !5247
  %188 = getelementptr inbounds double, double* %184, i64 %187, !dbg !5247
  store double %180, double* %188, align 8, !dbg !5247, !tbaa !1662, !invariant.group !5290
  %189 = icmp eq i64 %iv.next3, %158, !dbg !5247
  br i1 %189, label %.loopexit269.loopexit, label %177, !dbg !5247, !llvm.loop !5291

.loopexit269.loopexit:                            ; preds = %177
  br label %.loopexit269, !dbg !5247

.loopexit269:                                     ; preds = %.loopexit269.loopexit, %170
  %190 = icmp eq i64 %iv.next, %157, !dbg !5247
  br i1 %190, label %dgemv_64_.exit.loopexit1, label %170, !dbg !5247, !llvm.loop !5292

dgemv_64_.exit.loopexit:                          ; preds = %.loopexit
  br label %dgemv_64_.exit, !dbg !5247

dgemv_64_.exit.loopexit1:                         ; preds = %.loopexit269
  br label %dgemv_64_.exit, !dbg !5247

dgemv_64_.exit:                                   ; preds = %dgemv_64_.exit.loopexit1, %dgemv_64_.exit.loopexit, %152, %107, %.thread
  call void @llvm.julia.gc_preserve_end(token %75) #64, !dbg !5247
  %191 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 1, !dbg !5293
  store {} addrspace(10)* %3, {} addrspace(10)** %191, align 8, !dbg !5293
  %192 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 2, !dbg !5293
  store {} addrspace(10)* %"'2", {} addrspace(10)** %192, align 8, !dbg !5293
  %193 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, align 8, !dbg !5293
  ret { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %193, !dbg !5293
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia_symv__2026(i32 zeroext "enzyme_inactive" %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3) unnamed_addr #64 !dbg !5294 {
top:
  %4 = call {}*** @julia.get_pgcstack() #65
  %ptls_field106 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field106 to i64***
  %ptls_load107108 = load i64**, i64*** %5, align 8, !tbaa !68
  %6 = getelementptr inbounds i64*, i64** %ptls_load107108, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !72, !invariant.load !67
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #65, !dbg !5295
  fence syncscope("singlethread") seq_cst
  switch i32 %0, label %L12 [
    i32 1426063360, label %L18
    i32 1275068416, label %L18
  ], !dbg !5296

L12:                                              ; preds = %top
  %7 = insertvalue { {} addrspace(10)*, i32 } { {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4824882096 to {}*) to {} addrspace(10)*), i32 0 }, i32 %0, 1, !dbg !5298
  %current_task2109 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5298
  %current_task2 = bitcast {}*** %current_task2109 to {}**, !dbg !5298
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task2, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #66, !dbg !5298
  %8 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !5298
  %9 = addrspacecast {} addrspace(10)* addrspace(10)* %8 to {} addrspace(10)* addrspace(11)*, !dbg !5298
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %9, align 8, !dbg !5298, !tbaa !865, !alias.scope !116, !noalias !5300
  %10 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %9, i64 1, !dbg !5298
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %10, align 8, !dbg !5298, !tbaa !865, !alias.scope !116, !noalias !5300
  %box = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task2, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724570128 to {}*) to {} addrspace(10)*)) #66, !dbg !5298
  %11 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i32 } addrspace(10)*, !dbg !5298
  store { {} addrspace(10)*, i32 } %7, { {} addrspace(10)*, i32 } addrspace(10)* %11, align 8, !dbg !5298, !tbaa !112, !alias.scope !116, !noalias !5300
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %9 release, align 8, !dbg !5298, !tbaa !865, !alias.scope !116, !noalias !5300
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #67, !dbg !5298
  %12 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !5298
  %13 = addrspacecast i8 addrspace(10)* %12 to i8 addrspace(11)*, !dbg !5298
  %14 = getelementptr inbounds i8, i8 addrspace(11)* %13, i64 8, !dbg !5298
  %15 = bitcast i8 addrspace(11)* %14 to {} addrspace(10)* addrspace(11)*, !dbg !5298
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %15 release, align 8, !dbg !5298, !tbaa !865, !alias.scope !116, !noalias !5300
  %box5 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task2, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4795340096 to {}*) to {} addrspace(10)*)) #66, !dbg !5299
  %16 = bitcast {} addrspace(10)* %box5 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5299
  %17 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %16, i64 0, i64 0, !dbg !5299
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %17, align 8, !dbg !5299, !tbaa !112, !alias.scope !116, !noalias !5300
  %18 = addrspacecast {} addrspace(10)* %box5 to {} addrspace(12)*, !dbg !5299
  call void @ijl_throw({} addrspace(12)* %18) #65, !dbg !5299
  unreachable, !dbg !5299

L18:                                              ; preds = %top, %top
  %19 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !5303
  %arraysize_ptr112 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %19, i64 3, !dbg !5303
  %20 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr112 to i64 addrspace(10)*, !dbg !5303
  %21 = addrspacecast i64 addrspace(10)* %20 to i64 addrspace(11)*, !dbg !5303
  %arraysize = load i64, i64 addrspace(11)* %21, align 8, !dbg !5303, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %arraysize_ptr6113 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %19, i64 4, !dbg !5303
  %22 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr6113 to i64 addrspace(10)*, !dbg !5303
  %23 = addrspacecast i64 addrspace(10)* %22 to i64 addrspace(11)*, !dbg !5303
  %arraysize7 = load i64, i64 addrspace(11)* %23, align 8, !dbg !5303, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %.not = icmp eq i64 %arraysize, %arraysize7, !dbg !5305
  br i1 %.not, label %L28, label %L23, !dbg !5307

L23:                                              ; preds = %L18
  %current_task8114 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5308
  %current_task8 = bitcast {}*** %current_task8114 to {}**, !dbg !5308
  %newstruct9 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task8, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #66, !dbg !5308
  %24 = bitcast {} addrspace(10)* %newstruct9 to {} addrspace(10)* addrspace(10)*, !dbg !5308
  %25 = addrspacecast {} addrspace(10)* addrspace(10)* %24 to {} addrspace(10)* addrspace(11)*, !dbg !5308
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %25, align 8, !dbg !5308, !tbaa !865, !alias.scope !116, !noalias !5300
  %26 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 1, !dbg !5308
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %26, align 8, !dbg !5308, !tbaa !865, !alias.scope !116, !noalias !5300
  %box11 = call noalias nonnull dereferenceable(40) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task8, i64 40, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4739960416 to {}*) to {} addrspace(10)*)) #66, !dbg !5308
  %27 = bitcast {} addrspace(10)* %box11 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)*, !dbg !5308
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %27, i64 0, i32 0, !dbg !5308
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !5308, !tbaa !112, !alias.scope !116, !noalias !5300
  %.repack116 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %27, i64 0, i32 1, !dbg !5308
  store i64 %arraysize, i64 addrspace(10)* %.repack116, align 8, !dbg !5308, !tbaa !112, !alias.scope !116, !noalias !5300
  %.repack118 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %27, i64 0, i32 2, !dbg !5308
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256640 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack118, align 8, !dbg !5308, !tbaa !112, !alias.scope !116, !noalias !5300
  %.repack120 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %27, i64 0, i32 3, !dbg !5308
  store i64 %arraysize7, i64 addrspace(10)* %.repack120, align 8, !dbg !5308, !tbaa !112, !alias.scope !116, !noalias !5300
  %.repack122 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %27, i64 0, i32 4, !dbg !5308
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256592 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack122, align 8, !dbg !5308, !tbaa !112, !alias.scope !116, !noalias !5300
  store atomic {} addrspace(10)* %box11, {} addrspace(10)* addrspace(11)* %25 release, align 8, !dbg !5308, !tbaa !865, !alias.scope !116, !noalias !5300
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct9, {} addrspace(10)* nonnull %box11) #67, !dbg !5308
  %28 = bitcast {} addrspace(10)* %newstruct9 to i8 addrspace(10)*, !dbg !5308
  %29 = addrspacecast i8 addrspace(10)* %28 to i8 addrspace(11)*, !dbg !5308
  %30 = getelementptr inbounds i8, i8 addrspace(11)* %29, i64 8, !dbg !5308
  %31 = bitcast i8 addrspace(11)* %30 to {} addrspace(10)* addrspace(11)*, !dbg !5308
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %31 release, align 8, !dbg !5308, !tbaa !865, !alias.scope !116, !noalias !5300
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task8, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #66, !dbg !5309
  %32 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5309
  %33 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %32, i64 0, i64 0, !dbg !5309
  store {} addrspace(10)* %newstruct9, {} addrspace(10)* addrspace(10)* %33, align 8, !dbg !5309, !tbaa !112, !alias.scope !116, !noalias !5300
  %34 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !5309
  call void @ijl_throw({} addrspace(12)* %34) #65, !dbg !5309
  unreachable, !dbg !5309

L28:                                              ; preds = %L18
  %35 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5310
  %36 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %35 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5310
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %36, i64 0, i32 1, !dbg !5310
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5310, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not125 = icmp eq i64 %arraysize, %arraylen, !dbg !5312
  br i1 %.not125, label %L41, label %L32, !dbg !5311

L32:                                              ; preds = %L28
  %current_task23131 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5314
  %current_task23 = bitcast {}*** %current_task23131 to {}**, !dbg !5314
  %newstruct24 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task23, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #66, !dbg !5314
  %37 = bitcast {} addrspace(10)* %newstruct24 to {} addrspace(10)* addrspace(10)*, !dbg !5314
  %38 = addrspacecast {} addrspace(10)* addrspace(10)* %37 to {} addrspace(10)* addrspace(11)*, !dbg !5314
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %38, align 8, !dbg !5314, !tbaa !865, !alias.scope !116, !noalias !5300
  %39 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %38, i64 1, !dbg !5314
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %39, align 8, !dbg !5314, !tbaa !865, !alias.scope !116, !noalias !5300
  %box26 = call noalias nonnull dereferenceable(40) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task23, i64 40, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4751476240 to {}*) to {} addrspace(10)*)) #66, !dbg !5314
  %40 = bitcast {} addrspace(10)* %box26 to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5314
  %.repack133 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %40, i64 0, i32 0, !dbg !5314
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256560 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack133, align 8, !dbg !5314, !tbaa !112, !alias.scope !116, !noalias !5300
  %.repack134.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %40, i64 0, i32 1, i64 0, !dbg !5314
  store i64 %arraysize, i64 addrspace(10)* %.repack134.repack, align 8, !dbg !5314, !tbaa !112, !alias.scope !116, !noalias !5300
  %.repack134.repack140 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %40, i64 0, i32 1, i64 1, !dbg !5314
  store i64 %arraysize, i64 addrspace(10)* %.repack134.repack140, align 8, !dbg !5314, !tbaa !112, !alias.scope !116, !noalias !5300
  %.repack136 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %40, i64 0, i32 2, !dbg !5314
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256512 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack136, align 8, !dbg !5314, !tbaa !112, !alias.scope !116, !noalias !5300
  %.repack138 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %40, i64 0, i32 3, !dbg !5314
  store i64 %arraylen, i64 addrspace(10)* %.repack138, align 8, !dbg !5314, !tbaa !112, !alias.scope !116, !noalias !5300
  store atomic {} addrspace(10)* %box26, {} addrspace(10)* addrspace(11)* %38 release, align 8, !dbg !5314, !tbaa !865, !alias.scope !116, !noalias !5300
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct24, {} addrspace(10)* nonnull %box26) #67, !dbg !5314
  %41 = bitcast {} addrspace(10)* %newstruct24 to i8 addrspace(10)*, !dbg !5314
  %42 = addrspacecast i8 addrspace(10)* %41 to i8 addrspace(11)*, !dbg !5314
  %43 = getelementptr inbounds i8, i8 addrspace(11)* %42, i64 8, !dbg !5314
  %44 = bitcast i8 addrspace(11)* %43 to {} addrspace(10)* addrspace(11)*, !dbg !5314
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %44 release, align 8, !dbg !5314, !tbaa !865, !alias.scope !116, !noalias !5300
  %box28 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task23, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #66, !dbg !5315
  %45 = bitcast {} addrspace(10)* %box28 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5315
  %46 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %45, i64 0, i64 0, !dbg !5315
  store {} addrspace(10)* %newstruct24, {} addrspace(10)* addrspace(10)* %46, align 8, !dbg !5315, !tbaa !112, !alias.scope !116, !noalias !5300
  %47 = addrspacecast {} addrspace(10)* %box28 to {} addrspace(12)*, !dbg !5315
  call void @ijl_throw({} addrspace(12)* %47) #65, !dbg !5315
  unreachable, !dbg !5315

L41:                                              ; preds = %L28
  %48 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5316
  %49 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %48 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5316
  %arraylen_ptr31 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %49, i64 0, i32 1, !dbg !5316
  %arraylen32 = load i64, i64 addrspace(11)* %arraylen_ptr31, align 8, !dbg !5316, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not143 = icmp eq i64 %arraysize, %arraylen32, !dbg !5318
  br i1 %.not143, label %L79, label %L45, !dbg !5317

L45:                                              ; preds = %L41
  %current_task41149 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5320
  %current_task41 = bitcast {}*** %current_task41149 to {}**, !dbg !5320
  %newstruct42 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task41, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #66, !dbg !5320
  %50 = bitcast {} addrspace(10)* %newstruct42 to {} addrspace(10)* addrspace(10)*, !dbg !5320
  %51 = addrspacecast {} addrspace(10)* addrspace(10)* %50 to {} addrspace(10)* addrspace(11)*, !dbg !5320
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %51, align 8, !dbg !5320, !tbaa !865, !alias.scope !116, !noalias !5300
  %52 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %51, i64 1, !dbg !5320
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %52, align 8, !dbg !5320, !tbaa !865, !alias.scope !116, !noalias !5300
  %box44 = call noalias nonnull dereferenceable(40) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task41, i64 40, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4751476240 to {}*) to {} addrspace(10)*)) #66, !dbg !5320
  %53 = bitcast {} addrspace(10)* %box44 to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5320
  %.repack151 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %53, i64 0, i32 0, !dbg !5320
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256560 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack151, align 8, !dbg !5320, !tbaa !112, !alias.scope !116, !noalias !5300
  %.repack152.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %53, i64 0, i32 1, i64 0, !dbg !5320
  store i64 %arraysize, i64 addrspace(10)* %.repack152.repack, align 8, !dbg !5320, !tbaa !112, !alias.scope !116, !noalias !5300
  %.repack152.repack158 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %53, i64 0, i32 1, i64 1, !dbg !5320
  store i64 %arraysize, i64 addrspace(10)* %.repack152.repack158, align 8, !dbg !5320, !tbaa !112, !alias.scope !116, !noalias !5300
  %.repack154 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %53, i64 0, i32 2, !dbg !5320
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256464 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack154, align 8, !dbg !5320, !tbaa !112, !alias.scope !116, !noalias !5300
  %.repack156 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %53, i64 0, i32 3, !dbg !5320
  store i64 %arraylen32, i64 addrspace(10)* %.repack156, align 8, !dbg !5320, !tbaa !112, !alias.scope !116, !noalias !5300
  store atomic {} addrspace(10)* %box44, {} addrspace(10)* addrspace(11)* %51 release, align 8, !dbg !5320, !tbaa !865, !alias.scope !116, !noalias !5300
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct42, {} addrspace(10)* nonnull %box44) #67, !dbg !5320
  %54 = bitcast {} addrspace(10)* %newstruct42 to i8 addrspace(10)*, !dbg !5320
  %55 = addrspacecast i8 addrspace(10)* %54 to i8 addrspace(11)*, !dbg !5320
  %56 = getelementptr inbounds i8, i8 addrspace(11)* %55, i64 8, !dbg !5320
  %57 = bitcast i8 addrspace(11)* %56 to {} addrspace(10)* addrspace(11)*, !dbg !5320
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %57 release, align 8, !dbg !5320, !tbaa !865, !alias.scope !116, !noalias !5300
  %box46 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task41, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #66, !dbg !5321
  %58 = bitcast {} addrspace(10)* %box46 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5321
  %59 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %58, i64 0, i64 0, !dbg !5321
  store {} addrspace(10)* %newstruct42, {} addrspace(10)* addrspace(10)* %59, align 8, !dbg !5321, !tbaa !112, !alias.scope !116, !noalias !5300
  %60 = addrspacecast {} addrspace(10)* %box46 to {} addrspace(12)*, !dbg !5321
  call void @ijl_throw({} addrspace(12)* %60) #65, !dbg !5321
  unreachable, !dbg !5321

L79:                                              ; preds = %L41
  %61 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !5322
  %62 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %61) #68, !dbg !5322
  %63 = bitcast {}* %62 to double**, !dbg !5322
  %arrayptr171 = load double*, double** %63, align 8, !dbg !5322, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %64 = addrspacecast {} addrspace(10)* %3 to {} addrspace(11)*, !dbg !5326
  %65 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %64) #68, !dbg !5326
  %66 = bitcast {}* %65 to double**, !dbg !5326
  %arrayptr50172 = load double*, double** %66, align 8, !dbg !5326, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %arrayptr50172195 = bitcast double* %arrayptr50172 to i8*, !dbg !5330
  %67 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %2, {} addrspace(10)* nonnull %3) #65, !dbg !5330
  %68 = lshr i32 %0, 24, !dbg !5331
  %value_phi51 = trunc i32 %68 to i8, !dbg !5338
  %.not165 = icmp eq i64 %arraysize, 0, !dbg !5339
  %69 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !5341
  %70 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %69) #68, !dbg !5341
  %71 = bitcast {}* %70 to double**, !dbg !5341
  %arrayptr81170 = load double*, double** %71, align 8, !dbg !5341, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67
  switch i8 %value_phi51, label %72 [
    i8 85, label %75
    i8 76, label %73
  ], !dbg !5330

72:                                               ; preds = %L79
  br label %73, !dbg !5330

73:                                               ; preds = %72, %L79
  %74 = phi i32 [ -1, %72 ], [ 122, %L79 ], !dbg !5330
  br label %75, !dbg !5330

75:                                               ; preds = %73, %L79
  %76 = phi i32 [ %74, %73 ], [ 121, %L79 ], !dbg !5330
  %77 = trunc i64 %arraysize to i32, !dbg !5330
  %78 = select i1 %.not165, i32 1, i32 %77, !dbg !5330
  %79 = add nsw i32 %76, -123, !dbg !5330
  %80 = icmp ult i32 %79, -2, !dbg !5330
  %81 = select i1 %80, i32 2, i32 0, !dbg !5330
  %82 = icmp slt i32 %77, 0, !dbg !5330
  %83 = select i1 %82, i32 3, i32 %81, !dbg !5330
  %84 = call i32 @llvm.smax.i32(i32 %77, i32 1) #65, !dbg !5330
  %85 = icmp sgt i32 %84, %78, !dbg !5330
  %86 = select i1 %85, i32 6, i32 %83, !dbg !5330
  %87 = icmp eq i32 %86, 0, !dbg !5330
  call void @llvm.assume(i1 %87), !dbg !5330
  %88 = icmp sgt i32 %77, 0, !dbg !5330
  br i1 %88, label %.preheader187, label %.loopexit189, !dbg !5330

.preheader187:                                    ; preds = %75
  %89 = shl i64 %arraysize, 3, !dbg !5330
  %90 = and i64 %89, 34359738360, !dbg !5330
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %arrayptr50172195, i8 0, i64 %90, i1 false) #65, !dbg !5330, !tbaa !1662, !noalias !5342
  br label %.loopexit189, !dbg !5330

.loopexit189:                                     ; preds = %75, %.preheader187
  switch i32 %76, label %191 [
    i32 122, label %91
    i32 121, label %137
  ], !dbg !5330

91:                                               ; preds = %.loopexit189
  %92 = icmp sgt i32 %77, 0, !dbg !5330
  br i1 %92, label %93, label %dsymv_64_.exit, !dbg !5330

93:                                               ; preds = %91
  %sext185 = shl i64 %arraysize, 32, !dbg !5330
  %94 = ashr exact i64 %sext185, 32, !dbg !5330
  %95 = sext i32 %78 to i64, !dbg !5330
  %96 = and i64 %arraysize, 4294967295, !dbg !5330
  br label %97, !dbg !5330

97:                                               ; preds = %131, %93
  %iv3 = phi i64 [ %iv.next4, %131 ], [ 0, %93 ], !dbg !5330
  %98 = add i64 %iv3, 1, !dbg !5330
  %99 = add i64 %iv3, 1, !dbg !5330
  %100 = trunc i64 %99 to i32, !dbg !5330
  %101 = sext i32 %100 to i64, !dbg !5330
  %iv.next4 = add nuw nsw i64 %iv3, 1, !dbg !5330
  %102 = getelementptr inbounds double, double* %arrayptr171, i64 %iv3, !dbg !5330
  %103 = load double, double* %102, align 8, !dbg !5330, !tbaa !1662
  %104 = mul nsw i64 %iv3, %95, !dbg !5330
  %105 = add nsw i64 %104, %iv3, !dbg !5330
  %106 = getelementptr inbounds double, double* %arrayptr81170, i64 %105, !dbg !5330
  %107 = load double, double* %106, align 8, !dbg !5330, !tbaa !1662
  %108 = getelementptr inbounds double, double* %arrayptr50172, i64 %iv3, !dbg !5330
  %109 = load double, double* %108, align 8, !dbg !5330, !tbaa !1662
  %110 = call double @llvm.fmuladd.f64(double %103, double %107, double %109) #65, !dbg !5330
  store double %110, double* %108, align 8, !dbg !5330, !tbaa !1662, !noalias !5342
  %111 = icmp slt i64 %iv.next4, %94, !dbg !5330
  br i1 %111, label %112, label %131, !dbg !5330

112:                                              ; preds = %97
  %sext212 = shl i64 %iv.next4, 32, !dbg !5330
  %113 = ashr exact i64 %sext212, 32, !dbg !5330
  br label %114, !dbg !5330

114:                                              ; preds = %114, %112
  %iv5 = phi i64 [ %iv.next6, %114 ], [ 0, %112 ], !dbg !5330
  %115 = phi double [ 0.000000e+00, %112 ], [ %127, %114 ], !dbg !5330
  %116 = add i64 %98, %iv5, !dbg !5330
  %iv.next6 = add nuw nsw i64 %iv5, 1, !dbg !5330
  %117 = add i64 %101, %iv5, !dbg !5330
  %118 = add nsw i64 %116, %104, !dbg !5330
  %119 = getelementptr inbounds double, double* %arrayptr81170, i64 %118, !dbg !5330
  %120 = load double, double* %119, align 8, !dbg !5330, !tbaa !1662
  %121 = getelementptr inbounds double, double* %arrayptr50172, i64 %117, !dbg !5330
  %122 = load double, double* %121, align 8, !dbg !5330, !tbaa !1662
  %123 = call double @llvm.fmuladd.f64(double %103, double %120, double %122) #65, !dbg !5330
  store double %123, double* %121, align 8, !dbg !5330, !tbaa !1662, !noalias !5342
  %124 = getelementptr inbounds double, double* %arrayptr171, i64 %117, !dbg !5330
  %125 = load double, double* %124, align 8, !dbg !5330, !tbaa !1662
  %126 = load double, double* %119, align 8, !dbg !5330, !tbaa !1662
  %127 = call double @llvm.fmuladd.f64(double %125, double %126, double %115) #65, !dbg !5330
  %128 = add i64 %117, 1, !dbg !5330
  %129 = add nuw nsw i64 %116, 1, !dbg !5330
  %130 = icmp eq i64 %129, %96, !dbg !5330
  br i1 %130, label %._crit_edge183, label %114, !dbg !5330, !llvm.loop !5343

._crit_edge183:                                   ; preds = %114
  %.pre184 = load double, double* %108, align 8, !dbg !5330, !tbaa !1662
  br label %131, !dbg !5330

131:                                              ; preds = %._crit_edge183, %97
  %132 = phi double [ %110, %97 ], [ %.pre184, %._crit_edge183 ], !dbg !5330
  %133 = phi double [ 0.000000e+00, %97 ], [ %127, %._crit_edge183 ], !dbg !5330
  %134 = fadd double %133, %132, !dbg !5330
  store double %134, double* %108, align 8, !dbg !5330, !tbaa !1662, !noalias !5342
  %135 = add nuw nsw i64 %iv.next4, 1, !dbg !5330
  %136 = icmp eq i64 %iv.next4, %96, !dbg !5330
  br i1 %136, label %dsymv_64_.exit.loopexit, label %97, !dbg !5330, !llvm.loop !5344

137:                                              ; preds = %.loopexit189
  %138 = icmp sgt i32 %77, 0, !dbg !5330
  br i1 %138, label %139, label %dsymv_64_.exit, !dbg !5330

139:                                              ; preds = %137
  %sext = shl i64 %arraysize, 32, !dbg !5330
  %140 = ashr exact i64 %sext, 32, !dbg !5330
  %141 = sext i32 %78 to i64, !dbg !5330
  %indvars.iv217 = add nsw i64 %140, -1, !dbg !5330
  %142 = getelementptr inbounds double, double* %arrayptr171, i64 %indvars.iv217, !dbg !5330
  %143 = load double, double* %142, align 8, !dbg !5330, !tbaa !1662
  %144 = mul nsw i64 %indvars.iv217, %141, !dbg !5330
  %145 = add nsw i64 %144, %indvars.iv217, !dbg !5330
  %146 = getelementptr inbounds double, double* %arrayptr81170, i64 %145, !dbg !5330
  %147 = load double, double* %146, align 8, !dbg !5330, !tbaa !1662
  %148 = getelementptr inbounds double, double* %arrayptr50172, i64 %indvars.iv217, !dbg !5330
  %149 = load double, double* %148, align 8, !dbg !5330, !tbaa !1662
  %150 = call double @llvm.fmuladd.f64(double %143, double %147, double %149) #65, !dbg !5330
  store double %150, double* %148, align 8, !dbg !5330, !tbaa !1662, !noalias !5342
  %151 = icmp sgt i64 %sext, 4294967296, !dbg !5330
  br i1 %151, label %.preheader.preheader.lr.ph, label %.thread, !dbg !5330

.preheader.preheader.lr.ph:                       ; preds = %139
  %152 = add nuw i64 %arraysize, 4294967295, !dbg !5330
  %153 = and i64 %152, 4294967295, !dbg !5330
  %154 = sub i64 0, %141, !dbg !5330
  br label %.preheader.preheader, !dbg !5330

.preheader.preheader:                             ; preds = %177, %.preheader.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %177 ], [ 0, %.preheader.preheader.lr.ph ]
  %155 = phi double [ %143, %.preheader.preheader.lr.ph ], [ %182, %177 ]
  %156 = mul nsw i64 %iv, -1, !dbg !5330
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5330
  %157 = add i64 %153, %156, !dbg !5330
  %158 = mul nsw i64 %iv, -1, !dbg !5330
  %159 = add i64 %indvars.iv217, %158, !dbg !5330
  %160 = mul i64 %154, %iv, !dbg !5330
  %161 = add i64 %144, %160, !dbg !5330
  %162 = mul nsw i64 %iv, -1, !dbg !5330
  %163 = add i64 %indvars.iv217, %162, !dbg !5330
  %scevgep = getelementptr double, double* %arrayptr50172, i64 %163, !dbg !5330
  br label %.preheader, !dbg !5330

.thread.loopexit:                                 ; preds = %177
  br label %.thread, !dbg !5330

.thread:                                          ; preds = %.thread.loopexit, %139
  %.lcssa216 = phi double [ %150, %139 ], [ %189, %.thread.loopexit ], !dbg !5330
  %164 = fadd double %.lcssa216, 0.000000e+00, !dbg !5330
  store double %164, double* %arrayptr50172, align 8, !dbg !5330, !tbaa !1662, !noalias !5342
  br label %dsymv_64_.exit, !dbg !5330

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv1 = phi i64 [ %iv.next2, %.preheader ], [ 0, %.preheader.preheader ], !dbg !5330
  %165 = phi double [ %175, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !5330
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !5330
  %166 = add nsw i64 %iv1, %161, !dbg !5330
  %167 = getelementptr inbounds double, double* %arrayptr81170, i64 %166, !dbg !5330
  %168 = load double, double* %167, align 8, !dbg !5330, !tbaa !1662
  %169 = getelementptr inbounds double, double* %arrayptr50172, i64 %iv1, !dbg !5330
  %170 = load double, double* %169, align 8, !dbg !5330, !tbaa !1662
  %171 = call double @llvm.fmuladd.f64(double %155, double %168, double %170) #65, !dbg !5330
  store double %171, double* %169, align 8, !dbg !5330, !tbaa !1662, !noalias !5342
  %172 = getelementptr inbounds double, double* %arrayptr171, i64 %iv1, !dbg !5330
  %173 = load double, double* %172, align 8, !dbg !5330, !tbaa !1662
  %174 = load double, double* %167, align 8, !dbg !5330, !tbaa !1662
  %175 = call double @llvm.fmuladd.f64(double %173, double %174, double %165) #65, !dbg !5330
  %176 = icmp eq i64 %iv.next2, %157, !dbg !5330
  br i1 %176, label %177, label %.preheader, !dbg !5330, !llvm.loop !5345

177:                                              ; preds = %.preheader
  %.pre = load double, double* %scevgep, align 8, !dbg !5330, !tbaa !1662
  %178 = fadd double %175, %.pre, !dbg !5330
  store double %178, double* %scevgep, align 8, !dbg !5330, !tbaa !1662, !noalias !5342
  %179 = add nsw i64 %157, -1, !dbg !5330
  %180 = add nsw i64 %159, -1, !dbg !5330
  %181 = getelementptr inbounds double, double* %arrayptr171, i64 %180, !dbg !5330
  %182 = load double, double* %181, align 8, !dbg !5330, !tbaa !1662
  %183 = mul nsw i64 %180, %141, !dbg !5330
  %184 = add nsw i64 %183, %180, !dbg !5330
  %185 = getelementptr inbounds double, double* %arrayptr81170, i64 %184, !dbg !5330
  %186 = load double, double* %185, align 8, !dbg !5330, !tbaa !1662
  %187 = getelementptr inbounds double, double* %arrayptr50172, i64 %180, !dbg !5330
  %188 = load double, double* %187, align 8, !dbg !5330, !tbaa !1662
  %189 = call double @llvm.fmuladd.f64(double %182, double %186, double %188) #65, !dbg !5330
  store double %189, double* %187, align 8, !dbg !5330, !tbaa !1662, !noalias !5342
  %190 = icmp sgt i64 %159, 1, !dbg !5330
  br i1 %190, label %.preheader.preheader, label %.thread.loopexit, !dbg !5330

191:                                              ; preds = %.loopexit189
  unreachable, !dbg !5330

dsymv_64_.exit.loopexit:                          ; preds = %131
  br label %dsymv_64_.exit, !dbg !5330

dsymv_64_.exit:                                   ; preds = %dsymv_64_.exit.loopexit, %.thread, %137, %91
  call void @llvm.julia.gc_preserve_end(token %67) #65, !dbg !5330
  ret {} addrspace(10)* %3, !dbg !5346
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_symv__2026(i32 zeroext "enzyme_inactive" %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3, {} addrspace(10)* align 16 %"'2") unnamed_addr #64 !dbg !5347 {
top:
  %4 = alloca { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %5 = getelementptr inbounds { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 0
  %"iv3'ac" = alloca i64, align 8
  %"iv5'ac" = alloca i64, align 8
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %_cache = alloca double*, align 8
  %_cache13 = alloca double*, align 8
  %_cache15 = alloca double**, align 8
  %_cache18 = alloca double**, align 8
  %_cache21 = alloca double**, align 8
  %_cache24 = alloca double**, align 8
  %_cache27 = alloca double**, align 8
  %_cache30 = alloca double**, align 8
  %_cache33 = alloca double*, align 8
  %_cache35 = alloca double*, align 8
  %6 = call {}*** @julia.get_pgcstack() #65
  %ptls_field106 = getelementptr inbounds {}**, {}*** %6, i64 2
  %7 = bitcast {}*** %ptls_field106 to i64***
  %ptls_load107108 = load i64**, i64*** %7, align 8, !tbaa !68, !alias.scope !5348, !noalias !5351
  %8 = getelementptr inbounds i64*, i64** %ptls_load107108, i64 2
  %safepoint = load i64*, i64** %8, align 8, !tbaa !72, !invariant.load !67, !alias.scope !5353, !noalias !5356
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #65, !dbg !5358
  fence syncscope("singlethread") seq_cst
  switch i32 %0, label %L12 [
    i32 1426063360, label %L18
    i32 1275068416, label %L18
  ], !dbg !5359

L12:                                              ; preds = %top
  %9 = insertvalue { {} addrspace(10)*, i32 } { {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4824882096 to {}*) to {} addrspace(10)*), i32 0 }, i32 %0, 1, !dbg !5361
  %current_task2109 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5361
  %current_task2 = bitcast {}*** %current_task2109 to {}**, !dbg !5361
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task2, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #66, !dbg !5361
  %10 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !5361
  %11 = addrspacecast {} addrspace(10)* addrspace(10)* %10 to {} addrspace(10)* addrspace(11)*, !dbg !5361
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %11, align 8, !dbg !5361, !tbaa !865, !alias.scope !116, !noalias !5363
  %12 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %11, i64 1, !dbg !5361
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %12, align 8, !dbg !5361, !tbaa !865, !alias.scope !116, !noalias !5363
  %box = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task2, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724570128 to {}*) to {} addrspace(10)*)) #66, !dbg !5361
  %13 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i32 } addrspace(10)*, !dbg !5361
  store { {} addrspace(10)*, i32 } %9, { {} addrspace(10)*, i32 } addrspace(10)* %13, align 8, !dbg !5361, !tbaa !112, !alias.scope !116, !noalias !5363
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %11 release, align 8, !dbg !5361, !tbaa !865, !alias.scope !116, !noalias !5363
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #67, !dbg !5361
  %14 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !5361
  %15 = addrspacecast i8 addrspace(10)* %14 to i8 addrspace(11)*, !dbg !5361
  %16 = getelementptr inbounds i8, i8 addrspace(11)* %15, i64 8, !dbg !5361
  %17 = bitcast i8 addrspace(11)* %16 to {} addrspace(10)* addrspace(11)*, !dbg !5361
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %17 release, align 8, !dbg !5361, !tbaa !865, !alias.scope !116, !noalias !5363
  %box5 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task2, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4795340096 to {}*) to {} addrspace(10)*)) #66, !dbg !5362
  %18 = bitcast {} addrspace(10)* %box5 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5362
  %19 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %18, i64 0, i64 0, !dbg !5362
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %19, align 8, !dbg !5362, !tbaa !112, !alias.scope !116, !noalias !5363
  %20 = addrspacecast {} addrspace(10)* %box5 to {} addrspace(12)*, !dbg !5362
  call void @ijl_throw({} addrspace(12)* %20) #65, !dbg !5362
  unreachable, !dbg !5362

L18:                                              ; preds = %top, %top
  %21 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !5366
  %arraysize_ptr112 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %21, i64 3, !dbg !5366
  %22 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr112 to i64 addrspace(10)*, !dbg !5366
  %23 = addrspacecast i64 addrspace(10)* %22 to i64 addrspace(11)*, !dbg !5366
  %arraysize = load i64, i64 addrspace(11)* %23, align 8, !dbg !5366, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !5368, !noalias !5371
  %24 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 3, !dbg !5366
  store i64 %arraysize, i64* %24, align 8, !dbg !5366
  %arraysize_ptr6113 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %21, i64 4, !dbg !5366
  %25 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr6113 to i64 addrspace(10)*, !dbg !5366
  %26 = addrspacecast i64 addrspace(10)* %25 to i64 addrspace(11)*, !dbg !5366
  %arraysize7 = load i64, i64 addrspace(11)* %26, align 8, !dbg !5366, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !5368, !noalias !5371
  %.not = icmp eq i64 %arraysize, %arraysize7, !dbg !5373
  br i1 %.not, label %L28, label %L23, !dbg !5375

L23:                                              ; preds = %L18
  %current_task8114 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5376
  %current_task8 = bitcast {}*** %current_task8114 to {}**, !dbg !5376
  %newstruct9 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task8, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #66, !dbg !5376
  %27 = bitcast {} addrspace(10)* %newstruct9 to {} addrspace(10)* addrspace(10)*, !dbg !5376
  %28 = addrspacecast {} addrspace(10)* addrspace(10)* %27 to {} addrspace(10)* addrspace(11)*, !dbg !5376
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %28, align 8, !dbg !5376, !tbaa !865, !alias.scope !116, !noalias !5363
  %29 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %28, i64 1, !dbg !5376
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %29, align 8, !dbg !5376, !tbaa !865, !alias.scope !116, !noalias !5363
  %box11 = call noalias nonnull dereferenceable(40) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task8, i64 40, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4739960416 to {}*) to {} addrspace(10)*)) #66, !dbg !5376
  %30 = bitcast {} addrspace(10)* %box11 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)*, !dbg !5376
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %30, i64 0, i32 0, !dbg !5376
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !5376, !tbaa !112, !alias.scope !116, !noalias !5363
  %.repack116 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %30, i64 0, i32 1, !dbg !5376
  store i64 %arraysize, i64 addrspace(10)* %.repack116, align 8, !dbg !5376, !tbaa !112, !alias.scope !116, !noalias !5363
  %.repack118 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %30, i64 0, i32 2, !dbg !5376
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256640 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack118, align 8, !dbg !5376, !tbaa !112, !alias.scope !116, !noalias !5363
  %.repack120 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %30, i64 0, i32 3, !dbg !5376
  store i64 %arraysize7, i64 addrspace(10)* %.repack120, align 8, !dbg !5376, !tbaa !112, !alias.scope !116, !noalias !5363
  %.repack122 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %30, i64 0, i32 4, !dbg !5376
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256592 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack122, align 8, !dbg !5376, !tbaa !112, !alias.scope !116, !noalias !5363
  store atomic {} addrspace(10)* %box11, {} addrspace(10)* addrspace(11)* %28 release, align 8, !dbg !5376, !tbaa !865, !alias.scope !116, !noalias !5363
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct9, {} addrspace(10)* nonnull %box11) #67, !dbg !5376
  %31 = bitcast {} addrspace(10)* %newstruct9 to i8 addrspace(10)*, !dbg !5376
  %32 = addrspacecast i8 addrspace(10)* %31 to i8 addrspace(11)*, !dbg !5376
  %33 = getelementptr inbounds i8, i8 addrspace(11)* %32, i64 8, !dbg !5376
  %34 = bitcast i8 addrspace(11)* %33 to {} addrspace(10)* addrspace(11)*, !dbg !5376
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %34 release, align 8, !dbg !5376, !tbaa !865, !alias.scope !116, !noalias !5363
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task8, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #66, !dbg !5377
  %35 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5377
  %36 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %35, i64 0, i64 0, !dbg !5377
  store {} addrspace(10)* %newstruct9, {} addrspace(10)* addrspace(10)* %36, align 8, !dbg !5377, !tbaa !112, !alias.scope !116, !noalias !5363
  %37 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !5377
  call void @ijl_throw({} addrspace(12)* %37) #65, !dbg !5377
  unreachable, !dbg !5377

L28:                                              ; preds = %L18
  %38 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5378
  %39 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %38 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5378
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %39, i64 0, i32 1, !dbg !5378
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5378, !tbaa !315, !range !86, !alias.scope !5380, !noalias !5383
  %.not125 = icmp eq i64 %arraysize, %arraylen, !dbg !5385
  br i1 %.not125, label %L41, label %L32, !dbg !5379

L32:                                              ; preds = %L28
  %current_task23131 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5387
  %current_task23 = bitcast {}*** %current_task23131 to {}**, !dbg !5387
  %newstruct24 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task23, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #66, !dbg !5387
  %40 = bitcast {} addrspace(10)* %newstruct24 to {} addrspace(10)* addrspace(10)*, !dbg !5387
  %41 = addrspacecast {} addrspace(10)* addrspace(10)* %40 to {} addrspace(10)* addrspace(11)*, !dbg !5387
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %41, align 8, !dbg !5387, !tbaa !865, !alias.scope !116, !noalias !5363
  %42 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %41, i64 1, !dbg !5387
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %42, align 8, !dbg !5387, !tbaa !865, !alias.scope !116, !noalias !5363
  %box26 = call noalias nonnull dereferenceable(40) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task23, i64 40, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4751476240 to {}*) to {} addrspace(10)*)) #66, !dbg !5387
  %43 = bitcast {} addrspace(10)* %box26 to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5387
  %.repack133 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %43, i64 0, i32 0, !dbg !5387
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256560 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack133, align 8, !dbg !5387, !tbaa !112, !alias.scope !116, !noalias !5363
  %.repack134.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %43, i64 0, i32 1, i64 0, !dbg !5387
  store i64 %arraysize, i64 addrspace(10)* %.repack134.repack, align 8, !dbg !5387, !tbaa !112, !alias.scope !116, !noalias !5363
  %.repack134.repack140 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %43, i64 0, i32 1, i64 1, !dbg !5387
  store i64 %arraysize, i64 addrspace(10)* %.repack134.repack140, align 8, !dbg !5387, !tbaa !112, !alias.scope !116, !noalias !5363
  %.repack136 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %43, i64 0, i32 2, !dbg !5387
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256512 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack136, align 8, !dbg !5387, !tbaa !112, !alias.scope !116, !noalias !5363
  %.repack138 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %43, i64 0, i32 3, !dbg !5387
  store i64 %arraylen, i64 addrspace(10)* %.repack138, align 8, !dbg !5387, !tbaa !112, !alias.scope !116, !noalias !5363
  store atomic {} addrspace(10)* %box26, {} addrspace(10)* addrspace(11)* %41 release, align 8, !dbg !5387, !tbaa !865, !alias.scope !116, !noalias !5363
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct24, {} addrspace(10)* nonnull %box26) #67, !dbg !5387
  %44 = bitcast {} addrspace(10)* %newstruct24 to i8 addrspace(10)*, !dbg !5387
  %45 = addrspacecast i8 addrspace(10)* %44 to i8 addrspace(11)*, !dbg !5387
  %46 = getelementptr inbounds i8, i8 addrspace(11)* %45, i64 8, !dbg !5387
  %47 = bitcast i8 addrspace(11)* %46 to {} addrspace(10)* addrspace(11)*, !dbg !5387
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %47 release, align 8, !dbg !5387, !tbaa !865, !alias.scope !116, !noalias !5363
  %box28 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task23, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #66, !dbg !5388
  %48 = bitcast {} addrspace(10)* %box28 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5388
  %49 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %48, i64 0, i64 0, !dbg !5388
  store {} addrspace(10)* %newstruct24, {} addrspace(10)* addrspace(10)* %49, align 8, !dbg !5388, !tbaa !112, !alias.scope !116, !noalias !5363
  %50 = addrspacecast {} addrspace(10)* %box28 to {} addrspace(12)*, !dbg !5388
  call void @ijl_throw({} addrspace(12)* %50) #65, !dbg !5388
  unreachable, !dbg !5388

L41:                                              ; preds = %L28
  %51 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5389
  %52 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %51 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5389
  %arraylen_ptr31 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %52, i64 0, i32 1, !dbg !5389
  %arraylen32 = load i64, i64 addrspace(11)* %arraylen_ptr31, align 8, !dbg !5389, !tbaa !315, !range !86, !alias.scope !5391, !noalias !5394
  %.not143 = icmp eq i64 %arraysize, %arraylen32, !dbg !5396
  br i1 %.not143, label %L79, label %L45, !dbg !5390

L45:                                              ; preds = %L41
  %current_task41149 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5398
  %current_task41 = bitcast {}*** %current_task41149 to {}**, !dbg !5398
  %newstruct42 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task41, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #66, !dbg !5398
  %53 = bitcast {} addrspace(10)* %newstruct42 to {} addrspace(10)* addrspace(10)*, !dbg !5398
  %54 = addrspacecast {} addrspace(10)* addrspace(10)* %53 to {} addrspace(10)* addrspace(11)*, !dbg !5398
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %54, align 8, !dbg !5398, !tbaa !865, !alias.scope !116, !noalias !5363
  %55 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %54, i64 1, !dbg !5398
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %55, align 8, !dbg !5398, !tbaa !865, !alias.scope !116, !noalias !5363
  %box44 = call noalias nonnull dereferenceable(40) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task41, i64 40, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4751476240 to {}*) to {} addrspace(10)*)) #66, !dbg !5398
  %56 = bitcast {} addrspace(10)* %box44 to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5398
  %.repack151 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %56, i64 0, i32 0, !dbg !5398
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256560 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack151, align 8, !dbg !5398, !tbaa !112, !alias.scope !116, !noalias !5363
  %.repack152.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %56, i64 0, i32 1, i64 0, !dbg !5398
  store i64 %arraysize, i64 addrspace(10)* %.repack152.repack, align 8, !dbg !5398, !tbaa !112, !alias.scope !116, !noalias !5363
  %.repack152.repack158 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %56, i64 0, i32 1, i64 1, !dbg !5398
  store i64 %arraysize, i64 addrspace(10)* %.repack152.repack158, align 8, !dbg !5398, !tbaa !112, !alias.scope !116, !noalias !5363
  %.repack154 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %56, i64 0, i32 2, !dbg !5398
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859256464 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack154, align 8, !dbg !5398, !tbaa !112, !alias.scope !116, !noalias !5363
  %.repack156 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %56, i64 0, i32 3, !dbg !5398
  store i64 %arraylen32, i64 addrspace(10)* %.repack156, align 8, !dbg !5398, !tbaa !112, !alias.scope !116, !noalias !5363
  store atomic {} addrspace(10)* %box44, {} addrspace(10)* addrspace(11)* %54 release, align 8, !dbg !5398, !tbaa !865, !alias.scope !116, !noalias !5363
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct42, {} addrspace(10)* nonnull %box44) #67, !dbg !5398
  %57 = bitcast {} addrspace(10)* %newstruct42 to i8 addrspace(10)*, !dbg !5398
  %58 = addrspacecast i8 addrspace(10)* %57 to i8 addrspace(11)*, !dbg !5398
  %59 = getelementptr inbounds i8, i8 addrspace(11)* %58, i64 8, !dbg !5398
  %60 = bitcast i8 addrspace(11)* %59 to {} addrspace(10)* addrspace(11)*, !dbg !5398
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %60 release, align 8, !dbg !5398, !tbaa !865, !alias.scope !116, !noalias !5363
  %box46 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task41, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #66, !dbg !5399
  %61 = bitcast {} addrspace(10)* %box46 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5399
  %62 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %61, i64 0, i64 0, !dbg !5399
  store {} addrspace(10)* %newstruct42, {} addrspace(10)* addrspace(10)* %62, align 8, !dbg !5399, !tbaa !112, !alias.scope !116, !noalias !5363
  %63 = addrspacecast {} addrspace(10)* %box46 to {} addrspace(12)*, !dbg !5399
  call void @ijl_throw({} addrspace(12)* %63) #65, !dbg !5399
  unreachable, !dbg !5399

L79:                                              ; preds = %L41
  %"'ipc9" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !5400
  %64 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !5400
  %65 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc9"), !dbg !5400
  %66 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %64) #68, !dbg !5400
  %"'ipc8" = bitcast {}* %65 to double**, !dbg !5400
  %67 = bitcast {}* %66 to double**, !dbg !5400
  %"arrayptr171'ipl" = load double*, double** %"'ipc8", align 8, !dbg !5400, !tbaa !382, !alias.scope !5404, !noalias !5405, !nonnull !67
  %68 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 2, !dbg !5400
  store double* %"arrayptr171'ipl", double** %68, align 8, !dbg !5400
  %arrayptr171 = load double*, double** %67, align 8, !dbg !5400, !tbaa !382, !alias.scope !5380, !noalias !5383, !nonnull !67
  %"'ipc7" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !5406
  %69 = addrspacecast {} addrspace(10)* %3 to {} addrspace(11)*, !dbg !5406
  %70 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc7"), !dbg !5406
  %71 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %69) #68, !dbg !5406
  %"'ipc6" = bitcast {}* %70 to double**, !dbg !5406
  %72 = bitcast {}* %71 to double**, !dbg !5406
  %"arrayptr50172'ipl" = load double*, double** %"'ipc6", align 8, !dbg !5406, !tbaa !382, !alias.scope !5410, !noalias !5411, !nonnull !67
  %73 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 1, !dbg !5406
  store double* %"arrayptr50172'ipl", double** %73, align 8, !dbg !5406
  %arrayptr50172 = load double*, double** %72, align 8, !dbg !5406, !tbaa !382, !alias.scope !5391, !noalias !5394, !nonnull !67
  %"arrayptr50172195'ipc" = bitcast double* %"arrayptr50172'ipl" to i8*, !dbg !5412
  %arrayptr50172195 = bitcast double* %arrayptr50172 to i8*, !dbg !5412
  %74 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %2, {} addrspace(10)* %"'1", {} addrspace(10)* %3, {} addrspace(10)* %"'2"), !dbg !5412
  %75 = lshr i32 %0, 24, !dbg !5413
  %value_phi51 = trunc i32 %75 to i8, !dbg !5420
  %.not165 = icmp eq i64 %arraysize, 0, !dbg !5421
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !5423
  %76 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !5423
  %77 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !5423
  %78 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %76) #68, !dbg !5423
  %"'ipc" = bitcast {}* %77 to double**, !dbg !5423
  %79 = bitcast {}* %78 to double**, !dbg !5423
  %"arrayptr81170'ipl" = load double*, double** %"'ipc", align 8, !dbg !5423, !tbaa !72, !alias.scope !5424, !noalias !5425, !nonnull !67
  %80 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 0, !dbg !5423
  store double* %"arrayptr81170'ipl", double** %80, align 8, !dbg !5423
  %arrayptr81170 = load double*, double** %79, align 8, !dbg !5423, !tbaa !72, !invariant.load !67, !alias.scope !5368, !noalias !5371, !nonnull !67
  switch i8 %value_phi51, label %81 [
    i8 85, label %84
    i8 76, label %82
  ], !dbg !5412

81:                                               ; preds = %L79
  br label %82, !dbg !5412

82:                                               ; preds = %81, %L79
  %83 = phi i32 [ -1, %81 ], [ 122, %L79 ], !dbg !5412
  br label %84, !dbg !5412

84:                                               ; preds = %82, %L79
  %85 = phi i32 [ %83, %82 ], [ 121, %L79 ], !dbg !5412
  %86 = trunc i64 %arraysize to i32, !dbg !5412
  %87 = select i1 %.not165, i32 1, i32 %86, !dbg !5412
  %88 = add nsw i32 %85, -123, !dbg !5412
  %89 = icmp ult i32 %88, -2, !dbg !5412
  %90 = select i1 %89, i32 2, i32 0, !dbg !5412
  %91 = icmp slt i32 %86, 0, !dbg !5412
  %92 = select i1 %91, i32 3, i32 %90, !dbg !5412
  %93 = call i32 @llvm.smax.i32(i32 %86, i32 1) #65, !dbg !5412
  %94 = icmp sgt i32 %93, %87, !dbg !5412
  %95 = select i1 %94, i32 6, i32 %92, !dbg !5412
  %96 = icmp eq i32 %95, 0, !dbg !5412
  call void @llvm.assume(i1 %96), !dbg !5412
  %97 = icmp sgt i32 %86, 0, !dbg !5412
  br i1 %97, label %.preheader187, label %.loopexit189, !dbg !5412

.preheader187:                                    ; preds = %84
  %98 = shl i64 %arraysize, 3, !dbg !5412
  %99 = and i64 %98, 34359738360, !dbg !5412
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %arrayptr50172195, i8 0, i64 %99, i1 false) #65, !dbg !5412, !tbaa !1662, !noalias !5426
  br label %.loopexit189, !dbg !5412

.loopexit189:                                     ; preds = %.preheader187, %84
  switch i32 %85, label %298 [
    i32 122, label %100
    i32 121, label %192
  ], !dbg !5412

100:                                              ; preds = %.loopexit189
  %101 = icmp sgt i32 %86, 0, !dbg !5412
  br i1 %101, label %102, label %dsymv_64_.exit, !dbg !5412

102:                                              ; preds = %100
  %sext185 = shl i64 %arraysize, 32, !dbg !5412
  %103 = ashr exact i64 %sext185, 32, !dbg !5412
  %104 = sext i32 %87 to i64, !dbg !5412
  %105 = and i64 %arraysize, 4294967295, !dbg !5412
  %106 = add nsw i64 %105, -1, !dbg !5412
  %107 = add nsw i64 %105, -2, !dbg !5412
  %108 = add nuw i64 %106, 1, !dbg !5412
  %109 = mul nuw i64 %108, 8, !dbg !5412
  %110 = call noalias nonnull i8* @malloc(i64 %109), !dbg !5412
  %_malloccache = bitcast i8* %110 to double*, !dbg !5412
  %111 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 4, !dbg !5412
  store double* %_malloccache, double** %111, align 8, !dbg !5412
  store double* %_malloccache, double** %_cache, align 8, !dbg !5412, !invariant.group !5427
  %112 = mul nuw i64 %108, 8, !dbg !5412
  %113 = call noalias nonnull i8* @malloc(i64 %112), !dbg !5412
  %_malloccache14 = bitcast i8* %113 to double*, !dbg !5412
  %114 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 5, !dbg !5412
  store double* %_malloccache14, double** %114, align 8, !dbg !5412
  store double* %_malloccache14, double** %_cache13, align 8, !dbg !5412, !invariant.group !5428
  %115 = mul nuw i64 %108, 8, !dbg !5412
  %116 = call noalias nonnull i8* @malloc(i64 %115), !dbg !5412
  %_malloccache16 = bitcast i8* %116 to double**, !dbg !5412
  %117 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 6, !dbg !5412
  store double** %_malloccache16, double*** %117, align 8, !dbg !5412
  store double** %_malloccache16, double*** %_cache15, align 8, !dbg !5412, !invariant.group !5429
  %118 = mul nuw i64 %108, 8, !dbg !5412
  %119 = call noalias nonnull i8* @malloc(i64 %118), !dbg !5412
  %_malloccache19 = bitcast i8* %119 to double**, !dbg !5412
  %120 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 7, !dbg !5412
  store double** %_malloccache19, double*** %120, align 8, !dbg !5412
  store double** %_malloccache19, double*** %_cache18, align 8, !dbg !5412, !invariant.group !5430
  %121 = mul nuw i64 %108, 8, !dbg !5412
  %122 = call noalias nonnull i8* @malloc(i64 %121), !dbg !5412
  %_malloccache22 = bitcast i8* %122 to double**, !dbg !5412
  %123 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 8, !dbg !5412
  store double** %_malloccache22, double*** %123, align 8, !dbg !5412
  store double** %_malloccache22, double*** %_cache21, align 8, !dbg !5412, !invariant.group !5431
  br label %124, !dbg !5412

124:                                              ; preds = %187, %102
  %iv3 = phi i64 [ %iv.next4, %187 ], [ 0, %102 ], !dbg !5412
  %125 = mul nsw i64 %iv3, -1, !dbg !5412
  %126 = add i64 %107, %125, !dbg !5412
  %iv.next4 = add nuw nsw i64 %iv3, 1, !dbg !5412
  %127 = add i64 %iv3, 1, !dbg !5412
  %128 = add i64 %iv3, 1, !dbg !5412
  %129 = trunc i64 %128 to i32, !dbg !5412
  %130 = sext i32 %129 to i64, !dbg !5412
  %131 = getelementptr inbounds double, double* %arrayptr171, i64 %iv3, !dbg !5412
  %132 = load double, double* %131, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5432, !noalias !5435
  %133 = mul nsw i64 %iv3, %104, !dbg !5412
  %134 = add nsw i64 %133, %iv3, !dbg !5412
  %135 = getelementptr inbounds double, double* %arrayptr81170, i64 %134, !dbg !5412
  %136 = load double, double* %135, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5437, !noalias !5440
  %137 = getelementptr inbounds double, double* %arrayptr50172, i64 %iv3, !dbg !5412
  %138 = load double, double* %137, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5445
  %139 = call double @llvm.fmuladd.f64(double %132, double %136, double %138) #65, !dbg !5412
  store double %139, double* %137, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5447
  %140 = load double*, double** %_cache13, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5428
  %141 = getelementptr inbounds double, double* %140, i64 %iv3, !dbg !5412
  store double %136, double* %141, align 8, !dbg !5412, !tbaa !1662, !invariant.group !5450
  %142 = load double*, double** %_cache, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5427
  %143 = getelementptr inbounds double, double* %142, i64 %iv3, !dbg !5412
  store double %132, double* %143, align 8, !dbg !5412, !tbaa !1662, !invariant.group !5451
  %144 = icmp slt i64 %iv.next4, %103, !dbg !5412
  br i1 %144, label %145, label %187, !dbg !5412

145:                                              ; preds = %124
  %146 = add nuw i64 %126, 1, !dbg !5412
  %147 = load double**, double*** %_cache15, align 8, !dbg !5412
  %148 = getelementptr inbounds double*, double** %147, i64 %iv3, !dbg !5412
  %149 = mul nuw i64 %146, 8, !dbg !5412
  %150 = call noalias nonnull i8* @malloc(i64 %149), !dbg !5412
  %_malloccache17 = bitcast i8* %150 to double*, !dbg !5412
  store double* %_malloccache17, double** %148, align 8, !dbg !5412, !invariant.group !5452
  %151 = load double**, double*** %_cache18, align 8, !dbg !5412
  %152 = getelementptr inbounds double*, double** %151, i64 %iv3, !dbg !5412
  %153 = mul nuw i64 %146, 8, !dbg !5412
  %154 = call noalias nonnull i8* @malloc(i64 %153), !dbg !5412
  %_malloccache20 = bitcast i8* %154 to double*, !dbg !5412
  store double* %_malloccache20, double** %152, align 8, !dbg !5412, !invariant.group !5453
  %155 = load double**, double*** %_cache21, align 8, !dbg !5412
  %156 = getelementptr inbounds double*, double** %155, i64 %iv3, !dbg !5412
  %157 = mul nuw i64 %146, 8, !dbg !5412
  %158 = call noalias nonnull i8* @malloc(i64 %157), !dbg !5412
  %_malloccache23 = bitcast i8* %158 to double*, !dbg !5412
  store double* %_malloccache23, double** %156, align 8, !dbg !5412, !invariant.group !5454
  br label %159, !dbg !5412

159:                                              ; preds = %159, %145
  %iv5 = phi i64 [ %iv.next6, %159 ], [ 0, %145 ], !dbg !5412
  %160 = phi double [ 0.000000e+00, %145 ], [ %184, %159 ], !dbg !5412
  %iv.next6 = add nuw nsw i64 %iv5, 1, !dbg !5412
  %161 = add i64 %127, %iv5, !dbg !5412
  %162 = add i64 %130, %iv5, !dbg !5412
  %163 = add nsw i64 %161, %133, !dbg !5412
  %164 = getelementptr inbounds double, double* %arrayptr81170, i64 %163, !dbg !5412
  %165 = load double, double* %164, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5437, !noalias !5440
  %166 = getelementptr inbounds double, double* %arrayptr50172, i64 %162, !dbg !5412
  %167 = load double, double* %166, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5445
  %168 = call double @llvm.fmuladd.f64(double %132, double %165, double %167) #65, !dbg !5412
  store double %168, double* %166, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5447
  %169 = load double**, double*** %_cache15, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5429
  %170 = getelementptr inbounds double*, double** %169, i64 %iv3, !dbg !5412
  %171 = load double*, double** %170, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5452
  %172 = getelementptr inbounds double, double* %171, i64 %iv5, !dbg !5412
  store double %165, double* %172, align 8, !dbg !5412, !tbaa !1662, !invariant.group !5455
  %173 = getelementptr inbounds double, double* %arrayptr171, i64 %162, !dbg !5412
  %174 = load double, double* %173, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5432, !noalias !5435
  %175 = load double**, double*** %_cache18, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5430
  %176 = getelementptr inbounds double*, double** %175, i64 %iv3, !dbg !5412
  %177 = load double*, double** %176, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5453
  %178 = getelementptr inbounds double, double* %177, i64 %iv5, !dbg !5412
  store double %174, double* %178, align 8, !dbg !5412, !tbaa !1662, !invariant.group !5456
  %179 = load double, double* %164, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5437, !noalias !5440
  %180 = load double**, double*** %_cache21, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5431
  %181 = getelementptr inbounds double*, double** %180, i64 %iv3, !dbg !5412
  %182 = load double*, double** %181, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5454
  %183 = getelementptr inbounds double, double* %182, i64 %iv5, !dbg !5412
  store double %179, double* %183, align 8, !dbg !5412, !tbaa !1662, !invariant.group !5457
  %184 = call double @llvm.fmuladd.f64(double %174, double %179, double %160) #65, !dbg !5412
  %185 = add nuw nsw i64 %161, 1, !dbg !5412
  %186 = icmp eq i64 %185, %105, !dbg !5412
  br i1 %186, label %._crit_edge183, label %159, !dbg !5412, !llvm.loop !5458

._crit_edge183:                                   ; preds = %159
  %.pre184 = load double, double* %137, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5445
  br label %187, !dbg !5412

187:                                              ; preds = %._crit_edge183, %124
  %188 = phi double [ %139, %124 ], [ %.pre184, %._crit_edge183 ], !dbg !5412
  %189 = phi double [ 0.000000e+00, %124 ], [ %184, %._crit_edge183 ], !dbg !5412
  %190 = fadd double %189, %188, !dbg !5412
  store double %190, double* %137, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5447
  %191 = icmp eq i64 %iv.next4, %105, !dbg !5412
  br i1 %191, label %dsymv_64_.exit.loopexit, label %124, !dbg !5412, !llvm.loop !5459

192:                                              ; preds = %.loopexit189
  %193 = icmp sgt i32 %86, 0, !dbg !5412
  br i1 %193, label %194, label %dsymv_64_.exit, !dbg !5412

194:                                              ; preds = %192
  %sext = shl i64 %arraysize, 32, !dbg !5412
  %195 = ashr exact i64 %sext, 32, !dbg !5412
  %196 = sext i32 %87 to i64, !dbg !5412
  %indvars.iv217 = add nsw i64 %195, -1, !dbg !5412
  %197 = getelementptr inbounds double, double* %arrayptr171, i64 %indvars.iv217, !dbg !5412
  %198 = load double, double* %197, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5432, !noalias !5435
  %199 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 9, !dbg !5412
  store double %198, double* %199, align 8, !dbg !5412
  %200 = mul nsw i64 %indvars.iv217, %196, !dbg !5412
  %201 = add nsw i64 %200, %indvars.iv217, !dbg !5412
  %202 = getelementptr inbounds double, double* %arrayptr81170, i64 %201, !dbg !5412
  %203 = load double, double* %202, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5437, !noalias !5440
  %204 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 10, !dbg !5412
  store double %203, double* %204, align 8, !dbg !5412
  %205 = getelementptr inbounds double, double* %arrayptr50172, i64 %indvars.iv217, !dbg !5412
  %206 = load double, double* %205, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5445
  %207 = call double @llvm.fmuladd.f64(double %198, double %203, double %206) #65, !dbg !5412
  store double %207, double* %205, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5447
  %208 = icmp sgt i64 %sext, 4294967296, !dbg !5412
  br i1 %208, label %.preheader.preheader.lr.ph, label %.thread, !dbg !5412

.preheader.preheader.lr.ph:                       ; preds = %194
  %209 = add nuw i64 %arraysize, 4294967295, !dbg !5412
  %210 = and i64 %209, 4294967295, !dbg !5412
  %211 = sub i64 0, %196, !dbg !5412
  %212 = add i64 %195, -1, !dbg !5412
  %213 = add nsw i64 %195, -1, !dbg !5412
  %smin = call i64 @llvm.smin.i64(i64 %213, i64 1), !dbg !5412
  %214 = sub i64 %212, %smin, !dbg !5412
  %215 = add nsw i64 %210, -1, !dbg !5412
  %216 = add nuw i64 %214, 1, !dbg !5412
  %217 = mul nuw i64 %216, 8, !dbg !5412
  %218 = call noalias nonnull i8* @malloc(i64 %217), !dbg !5412
  %_malloccache25 = bitcast i8* %218 to double**, !dbg !5412
  %219 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 11, !dbg !5412
  store double** %_malloccache25, double*** %219, align 8, !dbg !5412
  store double** %_malloccache25, double*** %_cache24, align 8, !dbg !5412, !invariant.group !5460
  %220 = mul nuw i64 %216, 8, !dbg !5412
  %221 = call noalias nonnull i8* @malloc(i64 %220), !dbg !5412
  %_malloccache28 = bitcast i8* %221 to double**, !dbg !5412
  %222 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 12, !dbg !5412
  store double** %_malloccache28, double*** %222, align 8, !dbg !5412
  store double** %_malloccache28, double*** %_cache27, align 8, !dbg !5412, !invariant.group !5461
  %223 = mul nuw i64 %216, 8, !dbg !5412
  %224 = call noalias nonnull i8* @malloc(i64 %223), !dbg !5412
  %_malloccache31 = bitcast i8* %224 to double**, !dbg !5412
  %225 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 13, !dbg !5412
  store double** %_malloccache31, double*** %225, align 8, !dbg !5412
  store double** %_malloccache31, double*** %_cache30, align 8, !dbg !5412, !invariant.group !5462
  %226 = mul nuw i64 %216, 8, !dbg !5412
  %227 = call noalias nonnull i8* @malloc(i64 %226), !dbg !5412
  %_malloccache34 = bitcast i8* %227 to double*, !dbg !5412
  %228 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 14, !dbg !5412
  store double* %_malloccache34, double** %228, align 8, !dbg !5412
  store double* %_malloccache34, double** %_cache33, align 8, !dbg !5412, !invariant.group !5463
  %229 = mul nuw i64 %216, 8, !dbg !5412
  %230 = call noalias nonnull i8* @malloc(i64 %229), !dbg !5412
  %_malloccache36 = bitcast i8* %230 to double*, !dbg !5412
  %231 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 15, !dbg !5412
  store double* %_malloccache36, double** %231, align 8, !dbg !5412
  store double* %_malloccache36, double** %_cache35, align 8, !dbg !5412, !invariant.group !5464
  br label %.preheader.preheader, !dbg !5412

.preheader.preheader:                             ; preds = %281, %.preheader.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %281 ], [ 0, %.preheader.preheader.lr.ph ]
  %232 = phi double [ %198, %.preheader.preheader.lr.ph ], [ %285, %281 ]
  %233 = mul nsw i64 %iv, -1, !dbg !5412
  %234 = add i64 %215, %233, !dbg !5412
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5412
  %235 = mul nsw i64 %iv, -1, !dbg !5412
  %236 = add i64 %210, %235, !dbg !5412
  %237 = mul nsw i64 %iv, -1, !dbg !5412
  %238 = add i64 %indvars.iv217, %237, !dbg !5412
  %239 = mul i64 %211, %iv, !dbg !5412
  %240 = add i64 %200, %239, !dbg !5412
  %241 = mul nsw i64 %iv, -1, !dbg !5412
  %242 = add i64 %indvars.iv217, %241, !dbg !5412
  %scevgep = getelementptr double, double* %arrayptr50172, i64 %242, !dbg !5412
  %243 = add nuw i64 %234, 1, !dbg !5412
  %244 = load double**, double*** %_cache24, align 8, !dbg !5412
  %245 = getelementptr inbounds double*, double** %244, i64 %iv, !dbg !5412
  %246 = mul nuw i64 %243, 8, !dbg !5412
  %247 = call noalias nonnull i8* @malloc(i64 %246), !dbg !5412
  %_malloccache26 = bitcast i8* %247 to double*, !dbg !5412
  store double* %_malloccache26, double** %245, align 8, !dbg !5412, !invariant.group !5465
  %248 = load double**, double*** %_cache27, align 8, !dbg !5412
  %249 = getelementptr inbounds double*, double** %248, i64 %iv, !dbg !5412
  %250 = mul nuw i64 %243, 8, !dbg !5412
  %251 = call noalias nonnull i8* @malloc(i64 %250), !dbg !5412
  %_malloccache29 = bitcast i8* %251 to double*, !dbg !5412
  store double* %_malloccache29, double** %249, align 8, !dbg !5412, !invariant.group !5466
  %252 = load double**, double*** %_cache30, align 8, !dbg !5412
  %253 = getelementptr inbounds double*, double** %252, i64 %iv, !dbg !5412
  %254 = mul nuw i64 %243, 8, !dbg !5412
  %255 = call noalias nonnull i8* @malloc(i64 %254), !dbg !5412
  %_malloccache32 = bitcast i8* %255 to double*, !dbg !5412
  store double* %_malloccache32, double** %253, align 8, !dbg !5412, !invariant.group !5467
  br label %.preheader, !dbg !5412

.thread.loopexit:                                 ; preds = %281
  br label %.thread, !dbg !5412

.thread:                                          ; preds = %.thread.loopexit, %194
  %.lcssa216 = phi double [ %207, %194 ], [ %292, %.thread.loopexit ], !dbg !5412
  %256 = fadd double %.lcssa216, 0.000000e+00, !dbg !5412
  store double %256, double* %arrayptr50172, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5447
  br label %dsymv_64_.exit, !dbg !5412

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv1 = phi i64 [ %iv.next2, %.preheader ], [ 0, %.preheader.preheader ], !dbg !5412
  %257 = phi double [ %279, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !5412
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !5412
  %258 = add nsw i64 %iv1, %240, !dbg !5412
  %259 = getelementptr inbounds double, double* %arrayptr81170, i64 %258, !dbg !5412
  %260 = load double, double* %259, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5437, !noalias !5440
  %261 = getelementptr inbounds double, double* %arrayptr50172, i64 %iv1, !dbg !5412
  %262 = load double, double* %261, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5445
  %263 = call double @llvm.fmuladd.f64(double %232, double %260, double %262) #65, !dbg !5412
  store double %263, double* %261, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5447
  %264 = load double**, double*** %_cache24, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5460
  %265 = getelementptr inbounds double*, double** %264, i64 %iv, !dbg !5412
  %266 = load double*, double** %265, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5465
  %267 = getelementptr inbounds double, double* %266, i64 %iv1, !dbg !5412
  store double %260, double* %267, align 8, !dbg !5412, !tbaa !1662, !invariant.group !5468
  %268 = getelementptr inbounds double, double* %arrayptr171, i64 %iv1, !dbg !5412
  %269 = load double, double* %268, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5432, !noalias !5435
  %270 = load double**, double*** %_cache27, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5461
  %271 = getelementptr inbounds double*, double** %270, i64 %iv, !dbg !5412
  %272 = load double*, double** %271, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5466
  %273 = getelementptr inbounds double, double* %272, i64 %iv1, !dbg !5412
  store double %269, double* %273, align 8, !dbg !5412, !tbaa !1662, !invariant.group !5469
  %274 = load double, double* %259, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5437, !noalias !5440
  %275 = load double**, double*** %_cache30, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5462
  %276 = getelementptr inbounds double*, double** %275, i64 %iv, !dbg !5412
  %277 = load double*, double** %276, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5467
  %278 = getelementptr inbounds double, double* %277, i64 %iv1, !dbg !5412
  store double %274, double* %278, align 8, !dbg !5412, !tbaa !1662, !invariant.group !5470
  %279 = call double @llvm.fmuladd.f64(double %269, double %274, double %257) #65, !dbg !5412
  %280 = icmp eq i64 %iv.next2, %236, !dbg !5412
  br i1 %280, label %281, label %.preheader, !dbg !5412, !llvm.loop !5471

281:                                              ; preds = %.preheader
  %.pre = load double, double* %scevgep, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5445
  %282 = fadd double %279, %.pre, !dbg !5412
  store double %282, double* %scevgep, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5447
  %283 = add nsw i64 %238, -1, !dbg !5412
  %284 = getelementptr inbounds double, double* %arrayptr171, i64 %283, !dbg !5412
  %285 = load double, double* %284, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5432, !noalias !5435
  %286 = mul nsw i64 %283, %196, !dbg !5412
  %287 = add nsw i64 %286, %283, !dbg !5412
  %288 = getelementptr inbounds double, double* %arrayptr81170, i64 %287, !dbg !5412
  %289 = load double, double* %288, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5437, !noalias !5440
  %290 = getelementptr inbounds double, double* %arrayptr50172, i64 %283, !dbg !5412
  %291 = load double, double* %290, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5445
  %292 = call double @llvm.fmuladd.f64(double %285, double %289, double %291) #65, !dbg !5412
  store double %292, double* %290, align 8, !dbg !5412, !tbaa !1662, !alias.scope !5442, !noalias !5447
  %293 = load double*, double** %_cache35, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5464
  %294 = getelementptr inbounds double, double* %293, i64 %iv, !dbg !5412
  store double %289, double* %294, align 8, !dbg !5412, !tbaa !1662, !invariant.group !5472
  %295 = load double*, double** %_cache33, align 8, !dbg !5412, !dereferenceable !3229, !invariant.group !5463
  %296 = getelementptr inbounds double, double* %295, i64 %iv, !dbg !5412
  store double %285, double* %296, align 8, !dbg !5412, !tbaa !1662, !invariant.group !5473
  %297 = icmp sgt i64 %238, 1, !dbg !5412
  br i1 %297, label %.preheader.preheader, label %.thread.loopexit, !dbg !5412

298:                                              ; preds = %.loopexit189
  unreachable, !dbg !5412

dsymv_64_.exit.loopexit:                          ; preds = %187
  br label %dsymv_64_.exit, !dbg !5412

dsymv_64_.exit:                                   ; preds = %dsymv_64_.exit.loopexit, %.thread, %192, %100
  call void @llvm.julia.gc_preserve_end(token %74) #65, !dbg !5412
  %299 = getelementptr inbounds { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 1, !dbg !5474
  store {} addrspace(10)* %3, {} addrspace(10)** %299, align 8, !dbg !5474
  %300 = getelementptr inbounds { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 2, !dbg !5474
  store {} addrspace(10)* %"'2", {} addrspace(10)** %300, align 8, !dbg !5474
  %301 = load { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, align 8, !dbg !5474
  ret { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %301, !dbg !5474
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1996({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", i32 zeroext "enzyme_inactive" %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3, {} addrspace(10)* align 16 %"'2") unnamed_addr #62 !dbg !5413 {
top:
  %4 = alloca { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %5 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 0
  %6 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i64 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i64 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %10 = call {}*** @julia.get_pgcstack() #65
  %ptls_field159 = getelementptr inbounds {}**, {}*** %10, i64 2
  %11 = bitcast {}*** %ptls_field159 to i64***
  %ptls_load160161 = load i64**, i64*** %11, align 8, !tbaa !68, !alias.scope !5414, !noalias !5417
  %12 = getelementptr inbounds i64*, i64** %ptls_load160161, i64 2
  %safepoint = load i64*, i64** %12, align 8, !tbaa !72, !invariant.load !67, !alias.scope !5419, !noalias !5422
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #65, !dbg !5424
  fence syncscope("singlethread") seq_cst
  %.not = icmp eq i32 %1, 1308622848, !dbg !5425
  %. = select i1 %.not, i64 3, i64 4, !dbg !5429
  %13 = bitcast {} addrspace(10)* %2 to {} addrspace(10)* addrspace(10)*, !dbg !5430
  %arraysize_ptr228 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %13, i64 %., !dbg !5430
  %14 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr228 to i64 addrspace(10)*, !dbg !5430
  %15 = addrspacecast i64 addrspace(10)* %14 to i64 addrspace(11)*, !dbg !5430
  %arraysize = load i64, i64 addrspace(11)* %15, align 8, !dbg !5430, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !5431, !noalias !5434
  %16 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 6, !dbg !5427
  store i64 %arraysize, i64* %16, align 8, !dbg !5427
  %value_phi4 = select i1 %.not, i64 4, i64 3, !dbg !5427
  %arraysize_ptr11227 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %13, i64 %value_phi4, !dbg !5430
  %17 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr11227 to i64 addrspace(10)*, !dbg !5430
  %18 = addrspacecast i64 addrspace(10)* %17 to i64 addrspace(11)*, !dbg !5430
  %arraysize12 = load i64, i64 addrspace(11)* %18, align 8, !dbg !5430, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !5431, !noalias !5434
  %19 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5436
  %20 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %19 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5436
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %20, i64 0, i32 1, !dbg !5436
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5436, !tbaa !315, !range !86, !alias.scope !5438, !noalias !5441
  %.not163 = icmp eq i64 %arraysize12, %arraylen, !dbg !5443
  br i1 %.not163, label %L28, label %L22, !dbg !5437

L22:                                              ; preds = %top
  %current_task17164 = getelementptr inbounds {}**, {}*** %10, i64 -14, !dbg !5445
  %current_task17 = bitcast {}*** %current_task17164 to {}**, !dbg !5445
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #66, !dbg !5445
  %21 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !5445
  %22 = addrspacecast {} addrspace(10)* addrspace(10)* %21 to {} addrspace(10)* addrspace(11)*, !dbg !5445
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %22, align 8, !dbg !5445, !tbaa !865, !alias.scope !116, !noalias !5446
  %23 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %22, i64 1, !dbg !5445
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %23, align 8, !dbg !5445, !tbaa !865, !alias.scope !116, !noalias !5446
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #66, !dbg !5445
  %24 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5445
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %24, i64 0, i32 0, !dbg !5445
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838887040 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !5445, !tbaa !112, !alias.scope !116, !noalias !5446
  %.repack166 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %24, i64 0, i32 1, !dbg !5445
  store i64 %arraysize12, i64 addrspace(10)* %.repack166, align 8, !dbg !5445, !tbaa !112, !alias.scope !116, !noalias !5446
  %.repack168 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %24, i64 0, i32 2, !dbg !5445
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838886992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack168, align 8, !dbg !5445, !tbaa !112, !alias.scope !116, !noalias !5446
  %.repack170 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %24, i64 0, i32 3, !dbg !5445
  store i64 %arraylen, i64 addrspace(10)* %.repack170, align 8, !dbg !5445, !tbaa !112, !alias.scope !116, !noalias !5446
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %22 release, align 8, !dbg !5445, !tbaa !865, !alias.scope !116, !noalias !5446
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #67, !dbg !5445
  %25 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !5445
  %26 = addrspacecast i8 addrspace(10)* %25 to i8 addrspace(11)*, !dbg !5445
  %27 = getelementptr inbounds i8, i8 addrspace(11)* %26, i64 8, !dbg !5445
  %28 = bitcast i8 addrspace(11)* %27 to {} addrspace(10)* addrspace(11)*, !dbg !5445
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %28 release, align 8, !dbg !5445, !tbaa !865, !alias.scope !116, !noalias !5446
  %box20 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #66, !dbg !5437
  %29 = bitcast {} addrspace(10)* %box20 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5437
  %30 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %29, i64 0, i64 0, !dbg !5437
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %30, align 8, !dbg !5437, !tbaa !112, !alias.scope !116, !noalias !5446
  %31 = addrspacecast {} addrspace(10)* %box20 to {} addrspace(12)*, !dbg !5437
  call void @ijl_throw({} addrspace(12)* %31) #65, !dbg !5437
  unreachable, !dbg !5437

L28:                                              ; preds = %top
  %32 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5449
  %33 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %32 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5449
  %arraylen_ptr21 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %33, i64 0, i32 1, !dbg !5449
  %arraylen22 = load i64, i64 addrspace(11)* %arraylen_ptr21, align 8, !dbg !5449, !tbaa !315, !range !86, !alias.scope !5451, !noalias !5454
  %.not173 = icmp eq i64 %arraysize, %arraylen22, !dbg !5456
  br i1 %.not173, label %L38, label %L32, !dbg !5450

L32:                                              ; preds = %L28
  %current_task25174 = getelementptr inbounds {}**, {}*** %10, i64 -14, !dbg !5458
  %current_task25 = bitcast {}*** %current_task25174 to {}**, !dbg !5458
  %newstruct26 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #66, !dbg !5458
  %34 = bitcast {} addrspace(10)* %newstruct26 to {} addrspace(10)* addrspace(10)*, !dbg !5458
  %35 = addrspacecast {} addrspace(10)* addrspace(10)* %34 to {} addrspace(10)* addrspace(11)*, !dbg !5458
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %35, align 8, !dbg !5458, !tbaa !865, !alias.scope !116, !noalias !5446
  %36 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %35, i64 1, !dbg !5458
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %36, align 8, !dbg !5458, !tbaa !865, !alias.scope !116, !noalias !5446
  %box28 = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #66, !dbg !5458
  %37 = bitcast {} addrspace(10)* %box28 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5458
  %.repack176 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 0, !dbg !5458
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838886944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack176, align 8, !dbg !5458, !tbaa !112, !alias.scope !116, !noalias !5446
  %.repack177 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 1, !dbg !5458
  store i64 %arraysize, i64 addrspace(10)* %.repack177, align 8, !dbg !5458, !tbaa !112, !alias.scope !116, !noalias !5446
  %.repack179 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 2, !dbg !5458
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838886896 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack179, align 8, !dbg !5458, !tbaa !112, !alias.scope !116, !noalias !5446
  %.repack181 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 3, !dbg !5458
  store i64 %arraylen22, i64 addrspace(10)* %.repack181, align 8, !dbg !5458, !tbaa !112, !alias.scope !116, !noalias !5446
  store atomic {} addrspace(10)* %box28, {} addrspace(10)* addrspace(11)* %35 release, align 8, !dbg !5458, !tbaa !865, !alias.scope !116, !noalias !5446
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct26, {} addrspace(10)* nonnull %box28) #67, !dbg !5458
  %38 = bitcast {} addrspace(10)* %newstruct26 to i8 addrspace(10)*, !dbg !5458
  %39 = addrspacecast i8 addrspace(10)* %38 to i8 addrspace(11)*, !dbg !5458
  %40 = getelementptr inbounds i8, i8 addrspace(11)* %39, i64 8, !dbg !5458
  %41 = bitcast i8 addrspace(11)* %40 to {} addrspace(10)* addrspace(11)*, !dbg !5458
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %41 release, align 8, !dbg !5458, !tbaa !865, !alias.scope !116, !noalias !5446
  %box30 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #66, !dbg !5450
  %42 = bitcast {} addrspace(10)* %box30 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5450
  %43 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %42, i64 0, i64 0, !dbg !5450
  store {} addrspace(10)* %newstruct26, {} addrspace(10)* addrspace(10)* %43, align 8, !dbg !5450, !tbaa !112, !alias.scope !116, !noalias !5446
  %44 = addrspacecast {} addrspace(10)* %box30 to {} addrspace(12)*, !dbg !5450
  call void @ijl_throw({} addrspace(12)* %44) #65, !dbg !5450
  unreachable, !dbg !5450

L38:                                              ; preds = %L28
  %.not184 = icmp eq i64 %arraysize, 0, !dbg !5459
  br i1 %.not184, label %common.ret, label %L41, !dbg !5460

common.ret:                                       ; preds = %L182.critedge, %L152.critedge, %L49.L61_crit_edge, %L38
  %45 = phi {} addrspace(10)* [ %"'ac", %L152.critedge ], [ %"'ac7", %L182.critedge ], [ %"'", %L38 ], [ %"'", %L49.L61_crit_edge ]
  %common.ret.op = phi {} addrspace(10)* [ %54, %L152.critedge ], [ %58, %L182.critedge ], [ %0, %L38 ], [ %0, %L49.L61_crit_edge ]
  %46 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 1, !dbg !5429
  store {} addrspace(10)* %common.ret.op, {} addrspace(10)** %46, align 8, !dbg !5429
  %47 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 2, !dbg !5429
  store {} addrspace(10)* %45, {} addrspace(10)** %47, align 8, !dbg !5429
  %48 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %4, align 8, !dbg !5429
  ret { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %48, !dbg !5429

L41:                                              ; preds = %L38
  %.not185 = icmp eq i64 %arraysize12, 0, !dbg !5461
  %49 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 7, !dbg !5462
  store i1 %.not185, i1* %49, align 1, !dbg !5462
  br i1 %.not185, label %L49.L61_crit_edge, label %L112, !dbg !5462

L49.L61_crit_edge:                                ; preds = %L41
  %"'ipc" = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !5463
  %50 = bitcast {} addrspace(10)* %0 to i8 addrspace(13)* addrspace(10)*, !dbg !5463
  %"'ipc4" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc" to i8 addrspace(13)* addrspace(11)*, !dbg !5463
  %51 = addrspacecast i8 addrspace(13)* addrspace(10)* %50 to i8 addrspace(13)* addrspace(11)*, !dbg !5463
  %"arrayptr189.pre257'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc4", align 16, !dbg !5463, !tbaa !382, !alias.scope !5466, !noalias !5469
  %arrayptr189.pre257 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %51, align 16, !dbg !5463, !tbaa !382, !alias.scope !5470, !noalias !5454
  %52 = shl nuw i64 %arraysize, 3, !dbg !5471
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr189.pre257, i8 0, i64 %52, i1 false) #65, !dbg !5463, !tbaa !268, !alias.scope !116, !noalias !5446
  br label %common.ret, !dbg !5429

L112:                                             ; preds = %L41
  switch i32 %1, label %L228 [
    i32 1409286144, label %L152.critedge
    i32 1308622848, label %L152.critedge
    i32 1124073472, label %L152.critedge
    i32 1392508928, label %L182.critedge
    i32 1929379840, label %L182.critedge.fold.split
    i32 1207959552, label %L219.critedge
    i32 1744830464, label %L219.critedge.fold.split
  ], !dbg !5472

L152.critedge:                                    ; preds = %L112, %L112, %L112
  %_augmented = call fastcc { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__2037(i32 zeroext %1, {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %3, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'"), !dbg !5474
  %subcache = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 0, !dbg !5474
  %53 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 0, !dbg !5474
  store { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %subcache, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %53, align 8, !dbg !5474
  %54 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 1, !dbg !5474
  %55 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 1, !dbg !5474
  store {} addrspace(10)* %54, {} addrspace(10)** %55, align 8, !dbg !5474
  %"'ac" = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 2, !dbg !5474
  %56 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 2
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %56, align 8
  br label %common.ret

L182.critedge.fold.split:                         ; preds = %L112
  br label %L182.critedge, !dbg !5475

L182.critedge:                                    ; preds = %L182.critedge.fold.split, %L112
  %value_phi67 = phi i32 [ 1275068416, %L182.critedge.fold.split ], [ 1426063360, %L112 ], !dbg !5475
  %_augmented5 = call fastcc { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_symv__2026(i32 zeroext %value_phi67, {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %3, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'"), !dbg !5475
  %subcache6 = extractvalue { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented5, 0, !dbg !5475
  %57 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 3, !dbg !5475
  store { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %subcache6, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %57, align 8, !dbg !5475
  %58 = extractvalue { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented5, 1, !dbg !5475
  %59 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 4, !dbg !5475
  store {} addrspace(10)* %58, {} addrspace(10)** %59, align 8, !dbg !5475
  %"'ac7" = extractvalue { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented5, 2, !dbg !5475
  %60 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 5
  store {} addrspace(10)* %"'ac7", {} addrspace(10)** %60, align 8
  br label %common.ret

L219.critedge.fold.split:                         ; preds = %L112
  br label %L219.critedge, !dbg !5476

L219.critedge:                                    ; preds = %L219.critedge.fold.split, %L112
  %value_phi71 = phi i32 [ 1275068416, %L219.critedge.fold.split ], [ 1426063360, %L112 ], !dbg !5476
  %61 = call nonnull {} addrspace(10)* @ijl_box_char(i32 zeroext %value_phi71) #65, !dbg !5476
  %current_task72203 = getelementptr inbounds {}**, {}*** %10, i64 -14, !dbg !5476
  %current_task72 = bitcast {}*** %current_task72203 to {}**, !dbg !5476
  %box73 = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task72, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4796493856 to {}*) to {} addrspace(10)*)) #66, !dbg !5476
  %62 = bitcast {} addrspace(10)* %box73 to double addrspace(10)*, !dbg !5476
  store double 1.000000e+00, double addrspace(10)* %62, align 8, !dbg !5476, !tbaa !112, !alias.scope !116, !noalias !5446
  %box75 = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task72, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4796493856 to {}*) to {} addrspace(10)*)) #66, !dbg !5476
  %63 = bitcast {} addrspace(10)* %box75 to double addrspace(10)*, !dbg !5476
  store double 0.000000e+00, double addrspace(10)* %63, align 8, !dbg !5476, !tbaa !112, !alias.scope !116, !noalias !5446
  %64 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780615872 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %61, {} addrspace(10)* nonnull %box73, {} addrspace(10)* nonnull %2, {} addrspace(10)* nonnull %3, {} addrspace(10)* nonnull %box75, {} addrspace(10)* nonnull %0) #68, !dbg !5476
  unreachable, !dbg !5476

L228:                                             ; preds = %L112
  call void @ijl_type_error(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_j_str6, i64 0, i64 0), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4796494592 to {}*) to {} addrspace(10)*), {} addrspace(12)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(12)*)) #65, !dbg !5476
  unreachable, !dbg !5476
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_gemv__2037(i32 zeroext "enzyme_inactive" %0, {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %3, {} addrspace(10)* align 16 %"'2", { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg) unnamed_addr #63 !dbg !5521 {
top:
  %"iv4'ac" = alloca i64, align 8
  %"iv6'ac" = alloca i64, align 8
  %"iv'ac" = alloca i64, align 8
  %"iv2'ac" = alloca i64, align 8
  %_cache = alloca i8, align 1
  %"'de" = alloca double, align 8
  %4 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache95 = alloca double*, align 8
  %"'de103" = alloca double, align 8
  %5 = getelementptr double, double* %"'de103", i64 0
  store double 0.000000e+00, double* %5, align 8
  %_cache104 = alloca double*, align 8
  %"'de107" = alloca double, align 8
  %6 = getelementptr double, double* %"'de107", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"'de108" = alloca double, align 8
  %7 = getelementptr double, double* %"'de108", i64 0
  store double 0.000000e+00, double* %7, align 8
  %"'de120" = alloca double, align 8
  %8 = getelementptr double, double* %"'de120", i64 0
  store double 0.000000e+00, double* %8, align 8
  %"'de122" = alloca double, align 8
  %9 = getelementptr double, double* %"'de122", i64 0
  store double 0.000000e+00, double* %9, align 8
  %"'de123" = alloca double, align 8
  %10 = getelementptr double, double* %"'de123", i64 0
  store double 0.000000e+00, double* %10, align 8
  %"'de129" = alloca double, align 8
  %11 = getelementptr double, double* %"'de129", i64 0
  store double 0.000000e+00, double* %11, align 8
  %"'de133" = alloca double, align 8
  %12 = getelementptr double, double* %"'de133", i64 0
  store double 0.000000e+00, double* %12, align 8
  %_cache135 = alloca double*, align 8
  %_cache147 = alloca double*, align 8
  %"'de150" = alloca double, align 8
  %13 = getelementptr double, double* %"'de150", i64 0
  store double 0.000000e+00, double* %13, align 8
  %"'de151" = alloca double, align 8
  %14 = getelementptr double, double* %"'de151", i64 0
  store double 0.000000e+00, double* %14, align 8
  %_cache170 = alloca i8, align 1
  %15 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 8
  %mdyncache_fromtape_cache = alloca double*, align 8
  store double* %15, double** %mdyncache_fromtape_cache, align 8
  %16 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 9
  %mdyncache_fromtape_cache172 = alloca double*, align 8
  store double* %16, double** %mdyncache_fromtape_cache172, align 8
  %17 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 6
  %mdyncache_fromtape_cache174 = alloca double*, align 8
  store double* %17, double** %mdyncache_fromtape_cache174, align 8
  %18 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 7
  %mdyncache_fromtape_cache176 = alloca double*, align 8
  store double* %18, double** %mdyncache_fromtape_cache176, align 8
  %19 = call {}*** @julia.get_pgcstack() #65
  %arraysize = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 3, !dbg !5522
  switch i32 %0, label %L69 [
    i32 1308622848, label %L7
    i32 1124073472, label %top.L31_crit_edge
    i32 1409286144, label %L52
  ], !dbg !5524

top.L31_crit_edge:                                ; preds = %top
  br i1 false, label %L41, label %L69, !dbg !5525

L7:                                               ; preds = %top
  br i1 false, label %L17, label %L69, !dbg !5524

L17:                                              ; preds = %L7
  unreachable

L41:                                              ; preds = %top.L31_crit_edge
  unreachable

L52:                                              ; preds = %top
  br i1 false, label %L62, label %L69, !dbg !5526

L62:                                              ; preds = %L52
  unreachable

L69:                                              ; preds = %L52, %L7, %top.L31_crit_edge, %top
  %"'ipc74" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !5527
  %20 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc74"), !dbg !5527
  %"arrayptr215'il_phi" = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 2, !dbg !5527
  %"'ipc70" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !5531
  %21 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc70"), !dbg !5531
  %"arrayptr50216'il_phi" = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 1, !dbg !5531
  %"arrayptr50216274'ipc" = bitcast double* %"arrayptr50216'il_phi" to i8*, !dbg !5535
  %"'ipc" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !5535
  %22 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !5535
  %"arrayptr52218'il_phi" = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 0, !dbg !5535
  %.not203 = icmp eq i64 %arraysize, 0, !dbg !5538
  %23 = select i1 %.not203, i64 1, i64 %arraysize, !dbg !5542
  %24 = call i64 @llvm.smax.i64(i64 %arraysize, i64 %23) #65, !dbg !5542
  %25 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'", {} addrspace(10)* %2, {} addrspace(10)* %"'1", {} addrspace(10)* %3, {} addrspace(10)* %"'2"), !dbg !5543
  %26 = icmp slt i32 %0, 0, !dbg !5544
  br i1 %26, label %L120, label %L115, !dbg !5547

L115:                                             ; preds = %L69
  br label %L133, !dbg !5547

L120:                                             ; preds = %L69
  br i1 false, label %L126, label %L133, !dbg !5552

L126:                                             ; preds = %L120
  unreachable

L133:                                             ; preds = %L120, %L115
  %value_phi64 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 4, !dbg !5543
  store i8 4, i8* %_cache, align 1, !dbg !5543, !invariant.group !5555
  switch i8 %value_phi64, label %.thread.fold.split [
    i8 78, label %.thread
    i8 110, label %.thread
    i8 84, label %27
    i8 116, label %28
    i8 67, label %select.unfold
    i8 99, label %select.unfold
  ], !dbg !5543

27:                                               ; preds = %L133
  store i8 0, i8* %_cache, align 1, !dbg !5543, !invariant.group !5555
  br label %.thread, !dbg !5543

28:                                               ; preds = %L133
  store i8 1, i8* %_cache, align 1, !dbg !5543, !invariant.group !5555
  br label %.thread, !dbg !5543

select.unfold:                                    ; preds = %L133, %L133
  store i8 2, i8* %_cache, align 1, !dbg !5543, !invariant.group !5555
  br label %.thread, !dbg !5543

.thread.fold.split:                               ; preds = %L133
  store i8 3, i8* %_cache, align 1, !dbg !5543, !invariant.group !5555
  br label %.thread, !dbg !5543

.thread:                                          ; preds = %.thread.fold.split, %select.unfold, %28, %27, %L133, %L133
  %29 = phi i1 [ true, %L133 ], [ true, %L133 ], [ false, %.thread.fold.split ], [ false, %28 ], [ false, %27 ], [ false, %select.unfold ]
  %30 = phi i1 [ false, %L133 ], [ false, %L133 ], [ false, %.thread.fold.split ], [ true, %28 ], [ true, %27 ], [ true, %select.unfold ]
  %31 = trunc i64 %arraysize to i32, !dbg !5543
  %32 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 5, !dbg !5543
  %33 = icmp eq i32 %31, 0, !dbg !5543
  %34 = icmp eq i32 %32, 0, !dbg !5543
  %35 = or i1 %33, %34, !dbg !5543
  store i8 3, i8* %_cache170, align 1, !dbg !5543, !invariant.group !5556
  br i1 %35, label %dgemv_64_.exit, label %36, !dbg !5543

36:                                               ; preds = %.thread
  %37 = select i1 %29, i32 %32, i32 %31, !dbg !5543
  %38 = select i1 %29, i32 %31, i32 %32, !dbg !5543
  %39 = icmp sgt i32 %38, 0, !dbg !5543
  br i1 %39, label %.preheader, label %.loopexit273, !dbg !5543

.preheader:                                       ; preds = %36
  %40 = zext i32 %38 to i64, !dbg !5543
  %41 = shl nuw nsw i64 %40, 3, !dbg !5543
  br label %.loopexit273, !dbg !5543

.loopexit273:                                     ; preds = %.preheader, %36
  br i1 %30, label %42, label %81, !dbg !5543

42:                                               ; preds = %.loopexit273
  %43 = icmp sgt i32 %38, 0, !dbg !5543
  store i8 4, i8* %_cache170, align 1, !dbg !5543, !invariant.group !5556
  br i1 %43, label %44, label %dgemv_64_.exit, !dbg !5543

44:                                               ; preds = %42
  %45 = icmp sgt i32 %37, 0, !dbg !5543
  %sext264 = shl i64 %24, 32, !dbg !5543
  %46 = ashr exact i64 %sext264, 32, !dbg !5543
  %47 = zext i32 %38 to i64, !dbg !5543
  %48 = zext i32 %37 to i64, !dbg !5543
  %49 = add nsw i64 %47, -1, !dbg !5543
  %50 = add nsw i64 %48, -1, !dbg !5543
  %51 = add nuw i64 %49, 1, !dbg !5543
  %52 = add nuw i64 %50, 1, !dbg !5543
  %53 = mul nuw nsw i64 %52, %51, !dbg !5543
  %54 = mul nuw i64 %53, 8, !dbg !5543
  %55 = mul nuw i64 %53, 8, !dbg !5543
  br label %56, !dbg !5543

56:                                               ; preds = %.loopexit, %44
  %iv4 = phi i64 [ %iv.next5, %.loopexit ], [ 0, %44 ], !dbg !5543
  %iv.next5 = add nuw nsw i64 %iv4, 1, !dbg !5543
  br i1 %45, label %57, label %.loopexit, !dbg !5543

57:                                               ; preds = %56
  %58 = mul nsw i64 %iv4, %46, !dbg !5543
  br label %59, !dbg !5543

59:                                               ; preds = %59, %57
  %iv6 = phi i64 [ %iv.next7, %59 ], [ 0, %57 ], !dbg !5543
  %iv.next7 = add nuw nsw i64 %iv6, 1, !dbg !5543
  %"'ipg113" = getelementptr inbounds double, double* %"arrayptr215'il_phi", i64 %iv6, !dbg !5543
  %60 = load double*, double** %mdyncache_fromtape_cache174, align 8, !dbg !5543, !dereferenceable !3229, !invariant.group !5557
  %61 = mul nuw nsw i64 %52, %51, !dbg !5543
  %62 = mul nuw nsw i64 %iv4, %52, !dbg !5543
  %63 = add nuw nsw i64 %iv6, %62, !dbg !5543
  %64 = getelementptr inbounds double, double* %60, i64 %63, !dbg !5543
  %65 = load double, double* %64, align 8, !dbg !5543, !invariant.group !5558
  %66 = add nsw i64 %iv6, %58, !dbg !5543
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr52218'il_phi", i64 %66, !dbg !5543
  %67 = load double*, double** %mdyncache_fromtape_cache176, align 8, !dbg !5543, !dereferenceable !3229, !invariant.group !5559
  %68 = mul nuw nsw i64 %52, %51, !dbg !5543
  %69 = mul nuw nsw i64 %iv4, %52, !dbg !5543
  %70 = add nuw nsw i64 %iv6, %69, !dbg !5543
  %71 = getelementptr inbounds double, double* %67, i64 %70, !dbg !5543
  %72 = load double, double* %71, align 8, !dbg !5543, !invariant.group !5560
  %73 = mul nuw nsw i64 %52, %51, !dbg !5543
  %74 = mul nuw nsw i64 %iv4, %52, !dbg !5543
  %75 = add nuw nsw i64 %iv6, %74, !dbg !5543
  %76 = mul nuw nsw i64 %52, %51, !dbg !5543
  %77 = mul nuw nsw i64 %iv4, %52, !dbg !5543
  %78 = add nuw nsw i64 %iv6, %77, !dbg !5543
  %79 = icmp eq i64 %iv.next7, %48, !dbg !5543
  br i1 %79, label %.loopexit.loopexit, label %59, !dbg !5543, !llvm.loop !5561

.loopexit.loopexit:                               ; preds = %59
  br label %.loopexit, !dbg !5543

.loopexit:                                        ; preds = %.loopexit.loopexit, %56
  %"'ipg119" = getelementptr inbounds double, double* %"arrayptr50216'il_phi", i64 %iv4, !dbg !5543
  %80 = icmp eq i64 %iv.next5, %47, !dbg !5543
  br i1 %80, label %dgemv_64_.exit.loopexit, label %56, !dbg !5543, !llvm.loop !5562

81:                                               ; preds = %.loopexit273
  %82 = icmp sgt i32 %37, 0, !dbg !5543
  store i8 0, i8* %_cache170, align 1, !dbg !5543, !invariant.group !5556
  br i1 %82, label %83, label %dgemv_64_.exit, !dbg !5543

83:                                               ; preds = %81
  %84 = icmp sgt i32 %38, 0, !dbg !5543
  %sext = shl i64 %24, 32, !dbg !5543
  %85 = ashr exact i64 %sext, 32, !dbg !5543
  %86 = zext i32 %37 to i64, !dbg !5543
  %87 = zext i32 %38 to i64, !dbg !5543
  %88 = add nsw i64 %86, -1, !dbg !5543
  %89 = add nsw i64 %87, -1, !dbg !5543
  %90 = add nuw i64 %88, 1, !dbg !5543
  %91 = add nuw i64 %89, 1, !dbg !5543
  %92 = mul nuw nsw i64 %91, %90, !dbg !5543
  %93 = mul nuw i64 %92, 8, !dbg !5543
  %94 = mul nuw i64 %90, 8, !dbg !5543
  br label %95, !dbg !5543

95:                                               ; preds = %.loopexit269, %83
  %iv = phi i64 [ %iv.next, %.loopexit269 ], [ 0, %83 ], !dbg !5543
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5543
  %"'ipg130" = getelementptr inbounds double, double* %"arrayptr215'il_phi", i64 %iv, !dbg !5543
  %96 = load double*, double** %mdyncache_fromtape_cache, align 8, !dbg !5543, !dereferenceable !3229, !invariant.group !5563
  %97 = getelementptr inbounds double, double* %96, i64 %iv, !dbg !5543
  %98 = load double, double* %97, align 8, !dbg !5543, !invariant.group !5564
  br i1 %84, label %99, label %.loopexit269, !dbg !5543

99:                                               ; preds = %95
  %100 = mul nsw i64 %iv, %85, !dbg !5543
  br label %101, !dbg !5543

101:                                              ; preds = %101, %99
  %iv2 = phi i64 [ %iv.next3, %101 ], [ 0, %99 ], !dbg !5543
  %iv.next3 = add nuw nsw i64 %iv2, 1, !dbg !5543
  %102 = add nsw i64 %iv2, %100, !dbg !5543
  %"'ipg154" = getelementptr inbounds double, double* %"arrayptr52218'il_phi", i64 %102, !dbg !5543
  %103 = load double*, double** %mdyncache_fromtape_cache172, align 8, !dbg !5543, !dereferenceable !3229, !invariant.group !5565
  %104 = mul nuw nsw i64 %91, %90, !dbg !5543
  %105 = mul nuw nsw i64 %iv, %91, !dbg !5543
  %106 = add nuw nsw i64 %iv2, %105, !dbg !5543
  %107 = getelementptr inbounds double, double* %103, i64 %106, !dbg !5543
  %108 = load double, double* %107, align 8, !dbg !5543, !invariant.group !5566
  %109 = mul nuw nsw i64 %91, %90, !dbg !5543
  %110 = mul nuw nsw i64 %iv, %91, !dbg !5543
  %111 = add nuw nsw i64 %iv2, %110, !dbg !5543
  %"'ipg132" = getelementptr inbounds double, double* %"arrayptr50216'il_phi", i64 %iv2, !dbg !5543
  %112 = icmp eq i64 %iv.next3, %87, !dbg !5543
  br i1 %112, label %.loopexit269.loopexit, label %101, !dbg !5543, !llvm.loop !5567

.loopexit269.loopexit:                            ; preds = %101
  br label %.loopexit269, !dbg !5543

.loopexit269:                                     ; preds = %.loopexit269.loopexit, %95
  %113 = icmp eq i64 %iv.next, %86, !dbg !5543
  br i1 %113, label %dgemv_64_.exit.loopexit1, label %95, !dbg !5543, !llvm.loop !5568

dgemv_64_.exit.loopexit:                          ; preds = %.loopexit
  store i8 1, i8* %_cache170, align 1, !dbg !5543, !invariant.group !5556
  br label %dgemv_64_.exit, !dbg !5543

dgemv_64_.exit.loopexit1:                         ; preds = %.loopexit269
  store i8 2, i8* %_cache170, align 1, !dbg !5543, !invariant.group !5556
  br label %dgemv_64_.exit, !dbg !5543

dgemv_64_.exit:                                   ; preds = %dgemv_64_.exit.loopexit1, %dgemv_64_.exit.loopexit, %81, %42, %.thread
  call void @llvm.julia.gc_preserve_end(token %25) #65, !dbg !5543
  br label %invertdgemv_64_.exit, !dbg !5569

inverttop:                                        ; preds = %invertL69, %invertL52, %invertL7, %inverttop.L31_crit_edge
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

inverttop.L31_crit_edge:                          ; preds = %invertL69
  br label %inverttop

invertL7:                                         ; preds = %invertL69
  br label %inverttop

invertL52:                                        ; preds = %invertL69
  br label %inverttop

invertL69:                                        ; preds = %invertL120, %invertL115
  call void @llvm.julia.gc_preserve_end(token %263), !dbg !5543
  switch i32 %0, label %inverttop [
    i32 1308622848, label %invertL7
    i32 1124073472, label %inverttop.L31_crit_edge
    i32 1409286144, label %invertL52
  ]

invertL115:                                       ; preds = %invertL133
  br label %invertL69

invertL120:                                       ; preds = %invertL133
  br label %invertL69

invertL133:                                       ; preds = %invert.thread, %invert.thread.fold.split, %invertselect.unfold, %invert3, %invert
  br i1 %26, label %invertL120, label %invertL115

invert:                                           ; preds = %invert.thread
  br label %invertL133

invert3:                                          ; preds = %invert.thread
  br label %invertL133

invertselect.unfold:                              ; preds = %invert.thread
  br label %invertL133

invert.thread.fold.split:                         ; preds = %invert.thread
  br label %invertL133

invert.thread:                                    ; preds = %invertdgemv_64_.exit, %invert4
  %114 = load i8, i8* %_cache, align 1, !invariant.group !5555
  switch i8 %114, label %invertL133 [
    i8 0, label %invert
    i8 1, label %invert3
    i8 2, label %invertselect.unfold
    i8 3, label %invert.thread.fold.split
  ]

invert4:                                          ; preds = %invert.loopexit273, %invert.preheader
  br label %invert.thread

invert.preheader:                                 ; preds = %invert.loopexit273
  %_unwrap = select i1 %29, i32 %31, i32 %32, !dbg !5543
  %_unwrap90 = zext i32 %_unwrap to i64, !dbg !5543
  %_unwrap91 = shl nuw nsw i64 %_unwrap90, 3, !dbg !5543
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %"arrayptr50216274'ipc", i8 0, i64 %_unwrap91, i1 false) #65, !dbg !5543, !tbaa !1662, !noalias !5105
  br label %invert4

invert.loopexit273:                               ; preds = %invert10, %invert5
  %_unwrap92 = select i1 %29, i32 %31, i32 %32
  %_unwrap93 = icmp sgt i32 %_unwrap92, 0
  br i1 %_unwrap93, label %invert.preheader, label %invert4

invert5:                                          ; preds = %invertdgemv_64_.exit, %invert6
  br label %invert.loopexit273

invert6:                                          ; preds = %invert7
  %115 = load i64, i64* %"iv4'ac", align 8
  %116 = load i64, i64* %"iv6'ac", align 8
  %117 = load i64, i64* %"iv4'ac", align 8
  %118 = load i64, i64* %"iv6'ac", align 8
  %119 = load i64, i64* %"iv4'ac", align 8
  %120 = load i64, i64* %"iv6'ac", align 8
  %forfree175 = load double*, double** %mdyncache_fromtape_cache174, align 8, !dereferenceable !3229, !invariant.group !5557
  %121 = bitcast double* %forfree175 to i8*
  call void @free(i8* nonnull %121), !dbg !5570
  %122 = load i64, i64* %"iv4'ac", align 8
  %123 = load i64, i64* %"iv6'ac", align 8
  %forfree177 = load double*, double** %mdyncache_fromtape_cache176, align 8, !dereferenceable !3229, !invariant.group !5559
  %124 = bitcast double* %forfree177 to i8*
  call void @free(i8* nonnull %124), !dbg !5570
  br label %invert5

invert7:                                          ; preds = %invert.loopexit, %invert8
  %125 = load i64, i64* %"iv4'ac", align 8
  %126 = icmp eq i64 %125, 0
  %127 = xor i1 %126, true
  br i1 %126, label %invert6, label %incinvert7

incinvert7:                                       ; preds = %invert7
  %128 = load i64, i64* %"iv4'ac", align 8
  %129 = add nsw i64 %128, -1
  store i64 %129, i64* %"iv4'ac", align 8
  br label %invert.loopexit

invert8:                                          ; preds = %invert9
  br label %invert7

invert9:                                          ; preds = %mergeinvert9_.loopexit.loopexit, %incinvert9
  %130 = load double, double* %"'de", align 8, !dbg !5543
  store double 0.000000e+00, double* %"'de", align 8, !dbg !5543
  %131 = load i64, i64* %"iv6'ac", align 8, !dbg !5543
  %132 = load i64, i64* %"iv4'ac", align 8, !dbg !5543
  %arraysize_unwrap178 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 3, !dbg !5543
  %_unwrap96 = trunc i64 %arraysize_unwrap178 to i32, !dbg !5543
  %_unwrap180 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 5, !dbg !5543
  %_unwrap97 = select i1 %29, i32 %_unwrap96, i32 %_unwrap180, !dbg !5543
  %_unwrap98 = zext i32 %_unwrap97 to i64, !dbg !5543
  %_unwrap99 = add nsw i64 %_unwrap98, -1, !dbg !5543
  %133 = add nuw i64 %_unwrap99, 1, !dbg !5543
  %_unwrap100 = select i1 %29, i32 %_unwrap180, i32 %_unwrap96, !dbg !5543
  %_unwrap101 = zext i32 %_unwrap100 to i64, !dbg !5543
  %_unwrap102 = add nsw i64 %_unwrap101, -1, !dbg !5543
  %134 = add nuw i64 %_unwrap102, 1, !dbg !5543
  %135 = mul nuw nsw i64 %134, %133, !dbg !5543
  %136 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 7, !dbg !5543
  %137 = mul nuw nsw i64 %134, %133, !dbg !5543
  %138 = mul nuw nsw i64 %132, %134, !dbg !5543
  %139 = add nuw nsw i64 %131, %138, !dbg !5543
  %140 = getelementptr inbounds double, double* %136, i64 %139, !dbg !5543
  %141 = load double, double* %140, align 8, !dbg !5543, !tbaa !1662, !invariant.group !5571
  %142 = fmul fast double %130, %141, !dbg !5543
  %143 = load double, double* %"'de103", align 8, !dbg !5543
  %144 = fadd fast double %143, %142, !dbg !5543
  store double %144, double* %"'de103", align 8, !dbg !5543
  %145 = load i64, i64* %"iv6'ac", align 8, !dbg !5543
  %146 = load i64, i64* %"iv4'ac", align 8, !dbg !5543
  %147 = add nuw i64 %_unwrap99, 1, !dbg !5543
  %148 = add nuw i64 %_unwrap102, 1, !dbg !5543
  %149 = mul nuw nsw i64 %148, %147, !dbg !5543
  %150 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 6, !dbg !5543
  %151 = mul nuw nsw i64 %148, %147, !dbg !5543
  %152 = mul nuw nsw i64 %146, %148, !dbg !5543
  %153 = add nuw nsw i64 %145, %152, !dbg !5543
  %154 = getelementptr inbounds double, double* %150, i64 %153, !dbg !5543
  %155 = load double, double* %154, align 8, !dbg !5543, !tbaa !1662, !invariant.group !5572
  %156 = fmul fast double %130, %155, !dbg !5543
  %157 = load double, double* %"'de107", align 8, !dbg !5543
  %158 = fadd fast double %157, %156, !dbg !5543
  store double %158, double* %"'de107", align 8, !dbg !5543
  %159 = load double, double* %"'de108", align 8, !dbg !5543
  %160 = fadd fast double %159, %130, !dbg !5543
  store double %160, double* %"'de108", align 8, !dbg !5543
  %161 = load double, double* %"'de107", align 8, !dbg !5543
  store double 0.000000e+00, double* %"'de107", align 8, !dbg !5543
  %162 = load i64, i64* %"iv6'ac", align 8, !dbg !5543
  %163 = load i64, i64* %"iv4'ac", align 8, !dbg !5543
  %sext264_unwrap = shl i64 %24, 32, !dbg !5543
  %_unwrap109 = ashr exact i64 %sext264_unwrap, 32, !dbg !5543
  %_unwrap110 = mul nsw i64 %163, %_unwrap109, !dbg !5543
  %_unwrap111 = add nsw i64 %162, %_unwrap110, !dbg !5543
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr52218'il_phi", i64 %_unwrap111, !dbg !5543
  %164 = load double, double* %"'ipg_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5573, !noalias !5576
  %165 = fadd fast double %164, %161, !dbg !5543
  store double %165, double* %"'ipg_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5573, !noalias !5576
  %166 = load double, double* %"'de103", align 8, !dbg !5543
  store double 0.000000e+00, double* %"'de103", align 8, !dbg !5543
  %167 = load i64, i64* %"iv6'ac", align 8, !dbg !5543
  %168 = load i64, i64* %"iv4'ac", align 8, !dbg !5543
  %"'ipg113_unwrap" = getelementptr inbounds double, double* %"arrayptr215'il_phi", i64 %167, !dbg !5543
  %169 = load double, double* %"'ipg113_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5578, !noalias !5581
  %170 = fadd fast double %169, %166, !dbg !5543
  store double %170, double* %"'ipg113_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5578, !noalias !5581
  %171 = load double, double* %"'de108", align 8
  store double 0.000000e+00, double* %"'de108", align 8
  %172 = load i64, i64* %"iv6'ac", align 8
  %173 = icmp eq i64 %172, 0
  %174 = xor i1 %173, true
  %175 = select fast i1 %174, double %171, double 0.000000e+00
  %176 = load double, double* %"'de", align 8
  %177 = fadd fast double %176, %171
  %178 = select fast i1 %173, double %176, double %177
  store double %178, double* %"'de", align 8
  br i1 %173, label %invert8, label %incinvert9

incinvert9:                                       ; preds = %invert9
  %179 = load i64, i64* %"iv6'ac", align 8
  %180 = add nsw i64 %179, -1
  store i64 %180, i64* %"iv6'ac", align 8
  br label %invert9

invert.loopexit.loopexit:                         ; preds = %invert.loopexit
  %181 = load i64, i64* %"iv4'ac", align 8
  %_unwrap116 = select i1 %29, i32 %32, i32 %31
  %_unwrap117 = zext i32 %_unwrap116 to i64
  %_unwrap118 = add nsw i64 %_unwrap117, -1
  br label %mergeinvert9_.loopexit.loopexit

mergeinvert9_.loopexit.loopexit:                  ; preds = %invert.loopexit.loopexit
  store i64 %_unwrap118, i64* %"iv6'ac", align 8
  br label %invert9

invert.loopexit:                                  ; preds = %mergeinvert7_dgemv_64_.exit.loopexit, %incinvert7
  %182 = load i64, i64* %"iv4'ac", align 8, !dbg !5543
  %"'ipg119_unwrap" = getelementptr inbounds double, double* %"arrayptr50216'il_phi", i64 %182, !dbg !5543
  %183 = load double, double* %"'ipg119_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5583, !noalias !5586
  store double 0.000000e+00, double* %"'ipg119_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5583, !noalias !5586
  %184 = load double, double* %"'de120", align 8, !dbg !5543
  %185 = fadd fast double %184, %183, !dbg !5543
  store double %185, double* %"'de120", align 8, !dbg !5543
  %186 = load double, double* %"'de120", align 8, !dbg !5543
  store double 0.000000e+00, double* %"'de120", align 8, !dbg !5543
  %187 = load double, double* %"'de122", align 8, !dbg !5543
  %188 = fadd fast double %187, %186, !dbg !5543
  store double %188, double* %"'de122", align 8, !dbg !5543
  %189 = load double, double* %"'de123", align 8, !dbg !5543
  %190 = fadd fast double %189, %186, !dbg !5543
  store double %190, double* %"'de123", align 8, !dbg !5543
  %191 = load double, double* %"'de123", align 8, !dbg !5543
  store double 0.000000e+00, double* %"'de123", align 8, !dbg !5543
  %192 = load double, double* %"'ipg119_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5583, !noalias !5588
  %193 = fadd fast double %192, %191, !dbg !5543
  store double %193, double* %"'ipg119_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5583, !noalias !5588
  %194 = load double, double* %"'de122", align 8
  store double 0.000000e+00, double* %"'de122", align 8
  %195 = load i64, i64* %"iv4'ac", align 8
  %_unwrap127 = select i1 %29, i32 %32, i32 %31
  %_unwrap128 = icmp sgt i32 %_unwrap127, 0
  %196 = select fast i1 %_unwrap128, double %194, double 0.000000e+00
  %197 = load double, double* %"'de", align 8
  %198 = fadd fast double %197, %194
  %199 = select fast i1 %_unwrap128, double %198, double %197
  store double %199, double* %"'de", align 8
  br i1 %_unwrap128, label %invert.loopexit.loopexit, label %invert7

invert10:                                         ; preds = %invertdgemv_64_.exit, %invert11
  br label %invert.loopexit273

invert11:                                         ; preds = %invert12
  %200 = load i64, i64* %"iv'ac", align 8
  %201 = load i64, i64* %"iv2'ac", align 8
  %202 = load i64, i64* %"iv'ac", align 8
  %203 = load i64, i64* %"iv'ac", align 8
  %forfree171 = load double*, double** %mdyncache_fromtape_cache, align 8, !dereferenceable !3229, !invariant.group !5563
  %204 = bitcast double* %forfree171 to i8*
  call void @free(i8* nonnull %204), !dbg !5570
  %205 = load i64, i64* %"iv'ac", align 8
  %206 = load i64, i64* %"iv2'ac", align 8
  %forfree173 = load double*, double** %mdyncache_fromtape_cache172, align 8, !dereferenceable !3229, !invariant.group !5565
  %207 = bitcast double* %forfree173 to i8*
  call void @free(i8* nonnull %207), !dbg !5570
  br label %invert10

invert12:                                         ; preds = %invert.loopexit269, %invert13
  %208 = load double, double* %"'de129", align 8, !dbg !5543
  store double 0.000000e+00, double* %"'de129", align 8, !dbg !5543
  %209 = load i64, i64* %"iv'ac", align 8, !dbg !5543
  %"'ipg130_unwrap" = getelementptr inbounds double, double* %"arrayptr215'il_phi", i64 %209, !dbg !5543
  %210 = load double, double* %"'ipg130_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5578, !noalias !5581
  %211 = fadd fast double %210, %208, !dbg !5543
  store double %211, double* %"'ipg130_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5578, !noalias !5581
  %212 = load i64, i64* %"iv'ac", align 8
  %213 = icmp eq i64 %212, 0
  %214 = xor i1 %213, true
  br i1 %213, label %invert11, label %incinvert12

incinvert12:                                      ; preds = %invert12
  %215 = load i64, i64* %"iv'ac", align 8
  %216 = add nsw i64 %215, -1
  store i64 %216, i64* %"iv'ac", align 8
  br label %invert.loopexit269

invert13:                                         ; preds = %invert14
  br label %invert12

invert14:                                         ; preds = %mergeinvert14_.loopexit269.loopexit, %incinvert14
  %217 = load i64, i64* %"iv2'ac", align 8, !dbg !5543
  %218 = load i64, i64* %"iv'ac", align 8, !dbg !5543
  %"'ipg132_unwrap" = getelementptr inbounds double, double* %"arrayptr50216'il_phi", i64 %217, !dbg !5543
  %219 = load double, double* %"'ipg132_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5583, !noalias !5586
  store double 0.000000e+00, double* %"'ipg132_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5583, !noalias !5586
  %220 = load double, double* %"'de133", align 8, !dbg !5543
  %221 = fadd fast double %220, %219, !dbg !5543
  store double %221, double* %"'de133", align 8, !dbg !5543
  %222 = load double, double* %"'de133", align 8, !dbg !5543
  store double 0.000000e+00, double* %"'de133", align 8, !dbg !5543
  %223 = load i64, i64* %"iv2'ac", align 8, !dbg !5543
  %224 = load i64, i64* %"iv'ac", align 8, !dbg !5543
  %_unwrap179 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 5, !dbg !5543
  %arraysize_unwrap = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 3, !dbg !5543
  %_unwrap140 = trunc i64 %arraysize_unwrap to i32, !dbg !5543
  %_unwrap141 = select i1 %29, i32 %_unwrap179, i32 %_unwrap140, !dbg !5543
  %_unwrap142 = zext i32 %_unwrap141 to i64, !dbg !5543
  %_unwrap143 = add nsw i64 %_unwrap142, -1, !dbg !5543
  %225 = add nuw i64 %_unwrap143, 1, !dbg !5543
  %_unwrap144 = select i1 %29, i32 %_unwrap140, i32 %_unwrap179, !dbg !5543
  %_unwrap145 = zext i32 %_unwrap144 to i64, !dbg !5543
  %_unwrap146 = add nsw i64 %_unwrap145, -1, !dbg !5543
  %226 = add nuw i64 %_unwrap146, 1, !dbg !5543
  %227 = mul nuw nsw i64 %226, %225, !dbg !5543
  %228 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 9, !dbg !5543
  %229 = mul nuw nsw i64 %226, %225, !dbg !5543
  %230 = mul nuw nsw i64 %224, %226, !dbg !5543
  %231 = add nuw nsw i64 %223, %230, !dbg !5543
  %232 = getelementptr inbounds double, double* %228, i64 %231, !dbg !5543
  %233 = load double, double* %232, align 8, !dbg !5543, !tbaa !1662, !invariant.group !5589
  %234 = fmul fast double %222, %233, !dbg !5543
  %235 = load double, double* %"'de129", align 8, !dbg !5543
  %236 = fadd fast double %235, %234, !dbg !5543
  store double %236, double* %"'de129", align 8, !dbg !5543
  %237 = load i64, i64* %"iv2'ac", align 8, !dbg !5543
  %238 = load i64, i64* %"iv'ac", align 8, !dbg !5543
  %239 = add nuw i64 %_unwrap143, 1, !dbg !5543
  %240 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 8, !dbg !5543
  %241 = getelementptr inbounds double, double* %240, i64 %238, !dbg !5543
  %242 = load double, double* %241, align 8, !dbg !5543, !tbaa !1662, !alias.scope !5581, !noalias !5578, !invariant.group !5590
  %243 = fmul fast double %222, %242, !dbg !5543
  %244 = load double, double* %"'de150", align 8, !dbg !5543
  %245 = fadd fast double %244, %243, !dbg !5543
  store double %245, double* %"'de150", align 8, !dbg !5543
  %246 = load double, double* %"'de151", align 8, !dbg !5543
  %247 = fadd fast double %246, %222, !dbg !5543
  store double %247, double* %"'de151", align 8, !dbg !5543
  %248 = load double, double* %"'de151", align 8, !dbg !5543
  store double 0.000000e+00, double* %"'de151", align 8, !dbg !5543
  %249 = load double, double* %"'ipg132_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5583, !noalias !5588
  %250 = fadd fast double %249, %248, !dbg !5543
  store double %250, double* %"'ipg132_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5583, !noalias !5588
  %251 = load double, double* %"'de150", align 8, !dbg !5543
  store double 0.000000e+00, double* %"'de150", align 8, !dbg !5543
  %252 = load i64, i64* %"iv2'ac", align 8, !dbg !5543
  %253 = load i64, i64* %"iv'ac", align 8, !dbg !5543
  %sext_unwrap = shl i64 %24, 32, !dbg !5543
  %_unwrap155 = ashr exact i64 %sext_unwrap, 32, !dbg !5543
  %_unwrap156 = mul nsw i64 %253, %_unwrap155, !dbg !5543
  %_unwrap157 = add nsw i64 %252, %_unwrap156, !dbg !5543
  %"'ipg154_unwrap" = getelementptr inbounds double, double* %"arrayptr52218'il_phi", i64 %_unwrap157, !dbg !5543
  %254 = load double, double* %"'ipg154_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5573, !noalias !5576
  %255 = fadd fast double %254, %251, !dbg !5543
  store double %255, double* %"'ipg154_unwrap", align 8, !dbg !5543, !tbaa !1662, !alias.scope !5573, !noalias !5576
  %256 = load i64, i64* %"iv2'ac", align 8
  %257 = icmp eq i64 %256, 0
  %258 = xor i1 %257, true
  br i1 %257, label %invert13, label %incinvert14

incinvert14:                                      ; preds = %invert14
  %259 = load i64, i64* %"iv2'ac", align 8
  %260 = add nsw i64 %259, -1
  store i64 %260, i64* %"iv2'ac", align 8
  br label %invert14

invert.loopexit269.loopexit:                      ; preds = %invert.loopexit269
  %261 = load i64, i64* %"iv'ac", align 8
  %_unwrap159 = select i1 %29, i32 %31, i32 %32
  %_unwrap160 = zext i32 %_unwrap159 to i64
  %_unwrap161 = add nsw i64 %_unwrap160, -1
  br label %mergeinvert14_.loopexit269.loopexit

mergeinvert14_.loopexit269.loopexit:              ; preds = %invert.loopexit269.loopexit
  store i64 %_unwrap161, i64* %"iv2'ac", align 8
  br label %invert14

invert.loopexit269:                               ; preds = %mergeinvert12_dgemv_64_.exit.loopexit1, %incinvert12
  %262 = load i64, i64* %"iv'ac", align 8
  %_unwrap162 = select i1 %29, i32 %31, i32 %32
  %_unwrap163 = icmp sgt i32 %_unwrap162, 0
  br i1 %_unwrap163, label %invert.loopexit269.loopexit, label %invert12

invertdgemv_64_.exit.loopexit:                    ; preds = %invertdgemv_64_.exit
  %_unwrap164 = select i1 %29, i32 %31, i32 %32
  %_unwrap165 = zext i32 %_unwrap164 to i64
  %_unwrap166 = add nsw i64 %_unwrap165, -1
  br label %mergeinvert7_dgemv_64_.exit.loopexit

mergeinvert7_dgemv_64_.exit.loopexit:             ; preds = %invertdgemv_64_.exit.loopexit
  store i64 %_unwrap166, i64* %"iv4'ac", align 8
  br label %invert.loopexit

invertdgemv_64_.exit.loopexit1:                   ; preds = %invertdgemv_64_.exit
  %_unwrap167 = select i1 %29, i32 %32, i32 %31
  %_unwrap168 = zext i32 %_unwrap167 to i64
  %_unwrap169 = add nsw i64 %_unwrap168, -1
  br label %mergeinvert12_dgemv_64_.exit.loopexit1

mergeinvert12_dgemv_64_.exit.loopexit1:           ; preds = %invertdgemv_64_.exit.loopexit1
  store i64 %_unwrap169, i64* %"iv'ac", align 8
  br label %invert.loopexit269

invertdgemv_64_.exit:                             ; preds = %dgemv_64_.exit
  %263 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'", {} addrspace(10)* %2, {} addrspace(10)* %"'1", {} addrspace(10)* %3, {} addrspace(10)* %"'2"), !dbg !5543
  %264 = load i8, i8* %_cache170, align 1, !invariant.group !5556
  switch i8 %264, label %invert5 [
    i8 0, label %invert10
    i8 1, label %invertdgemv_64_.exit.loopexit
    i8 2, label %invertdgemv_64_.exit.loopexit1
    i8 3, label %invert.thread
  ]
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_symv__2026(i32 zeroext "enzyme_inactive" %0, {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %3, {} addrspace(10)* align 16 %"'2", { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg) unnamed_addr #64 !dbg !5592 {
top:
  %"iv3'ac" = alloca i64, align 8
  %"iv5'ac" = alloca i64, align 8
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %_cache = alloca i1, align 1
  %_cache92 = alloca i1, align 1
  %"'de" = alloca double, align 8
  %4 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache95 = alloca double*, align 8
  %"'de98" = alloca double, align 8
  %5 = getelementptr double, double* %"'de98", i64 0
  store double 0.000000e+00, double* %5, align 8
  %_cache99 = alloca double*, align 8
  %"'de102" = alloca double, align 8
  %6 = getelementptr double, double* %"'de102", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"'de103" = alloca double, align 8
  %7 = getelementptr double, double* %"'de103", i64 0
  store double 0.000000e+00, double* %7, align 8
  %"'de116" = alloca double, align 8
  %8 = getelementptr double, double* %"'de116", i64 0
  store double 0.000000e+00, double* %8, align 8
  %_cache117 = alloca double**, align 8
  %"'de132" = alloca double, align 8
  %9 = getelementptr double, double* %"'de132", i64 0
  store double 0.000000e+00, double* %9, align 8
  %_cache133 = alloca double**, align 8
  %"'de140" = alloca double, align 8
  %10 = getelementptr double, double* %"'de140", i64 0
  store double 0.000000e+00, double* %10, align 8
  %"'de141" = alloca double, align 8
  %11 = getelementptr double, double* %"'de141", i64 0
  store double 0.000000e+00, double* %11, align 8
  %"'de155" = alloca double, align 8
  %12 = getelementptr double, double* %"'de155", i64 0
  store double 0.000000e+00, double* %12, align 8
  %_cache157 = alloca double**, align 8
  %"'de164" = alloca double, align 8
  %13 = getelementptr double, double* %"'de164", i64 0
  store double 0.000000e+00, double* %13, align 8
  %"'de165" = alloca double, align 8
  %14 = getelementptr double, double* %"'de165", i64 0
  store double 0.000000e+00, double* %14, align 8
  %".pre184'de" = alloca double, align 8
  %15 = getelementptr double, double* %".pre184'de", i64 0
  store double 0.000000e+00, double* %15, align 8
  %"'de177" = alloca double, align 8
  %16 = getelementptr double, double* %"'de177", i64 0
  store double 0.000000e+00, double* %16, align 8
  %"'de179" = alloca double, align 8
  %17 = getelementptr double, double* %"'de179", i64 0
  store double 0.000000e+00, double* %17, align 8
  %"'de180" = alloca double, align 8
  %18 = getelementptr double, double* %"'de180", i64 0
  store double 0.000000e+00, double* %18, align 8
  %"'de188" = alloca double, align 8
  %19 = getelementptr double, double* %"'de188", i64 0
  store double 0.000000e+00, double* %19, align 8
  %"'de191" = alloca double, align 8
  %20 = getelementptr double, double* %"'de191", i64 0
  store double 0.000000e+00, double* %20, align 8
  %"'de193" = alloca double, align 8
  %21 = getelementptr double, double* %"'de193", i64 0
  store double 0.000000e+00, double* %21, align 8
  %"'de194" = alloca double, align 8
  %22 = getelementptr double, double* %"'de194", i64 0
  store double 0.000000e+00, double* %22, align 8
  %"'de204" = alloca double, align 8
  %23 = getelementptr double, double* %"'de204", i64 0
  store double 0.000000e+00, double* %23, align 8
  %"'de205" = alloca double, align 8
  %24 = getelementptr double, double* %"'de205", i64 0
  store double 0.000000e+00, double* %24, align 8
  %"'de212" = alloca double, align 8
  %25 = getelementptr double, double* %"'de212", i64 0
  store double 0.000000e+00, double* %25, align 8
  %".lcssa216'de" = alloca double, align 8
  %26 = getelementptr double, double* %".lcssa216'de", i64 0
  store double 0.000000e+00, double* %26, align 8
  %"'de214" = alloca double, align 8
  %27 = getelementptr double, double* %"'de214", i64 0
  store double 0.000000e+00, double* %27, align 8
  %"'de219" = alloca double, align 8
  %28 = getelementptr double, double* %"'de219", i64 0
  store double 0.000000e+00, double* %28, align 8
  %_cache220 = alloca double**, align 8
  %"'de239" = alloca double, align 8
  %29 = getelementptr double, double* %"'de239", i64 0
  store double 0.000000e+00, double* %29, align 8
  %_cache240 = alloca double**, align 8
  %"'de247" = alloca double, align 8
  %30 = getelementptr double, double* %"'de247", i64 0
  store double 0.000000e+00, double* %30, align 8
  %"'de248" = alloca double, align 8
  %31 = getelementptr double, double* %"'de248", i64 0
  store double 0.000000e+00, double* %31, align 8
  %"'de262" = alloca double, align 8
  %32 = getelementptr double, double* %"'de262", i64 0
  store double 0.000000e+00, double* %32, align 8
  %_cache264 = alloca double**, align 8
  %_cache271 = alloca double*, align 8
  %"'de281" = alloca double, align 8
  %33 = getelementptr double, double* %"'de281", i64 0
  store double 0.000000e+00, double* %33, align 8
  %"'de282" = alloca double, align 8
  %34 = getelementptr double, double* %"'de282", i64 0
  store double 0.000000e+00, double* %34, align 8
  %_cache295 = alloca double*, align 8
  %"'de304" = alloca double, align 8
  %35 = getelementptr double, double* %"'de304", i64 0
  store double 0.000000e+00, double* %35, align 8
  %"'de305" = alloca double, align 8
  %36 = getelementptr double, double* %"'de305", i64 0
  store double 0.000000e+00, double* %36, align 8
  %"'de318" = alloca double, align 8
  %37 = getelementptr double, double* %"'de318", i64 0
  store double 0.000000e+00, double* %37, align 8
  %".pre'de" = alloca double, align 8
  %38 = getelementptr double, double* %".pre'de", i64 0
  store double 0.000000e+00, double* %38, align 8
  %_cache327 = alloca i8, align 1
  %39 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 4
  %mdyncache_fromtape_cache = alloca double*, align 8
  store double* %39, double** %mdyncache_fromtape_cache, align 8
  %40 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 5
  %mdyncache_fromtape_cache329 = alloca double*, align 8
  store double* %40, double** %mdyncache_fromtape_cache329, align 8
  %41 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 6
  %mdyncache_fromtape_cache331 = alloca double**, align 8
  store double** %41, double*** %mdyncache_fromtape_cache331, align 8
  %42 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 7
  %mdyncache_fromtape_cache335 = alloca double**, align 8
  store double** %42, double*** %mdyncache_fromtape_cache335, align 8
  %43 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 8
  %mdyncache_fromtape_cache340 = alloca double**, align 8
  store double** %43, double*** %mdyncache_fromtape_cache340, align 8
  %44 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 11
  %mdyncache_fromtape_cache347 = alloca double**, align 8
  store double** %44, double*** %mdyncache_fromtape_cache347, align 8
  %45 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 12
  %mdyncache_fromtape_cache352 = alloca double**, align 8
  store double** %45, double*** %mdyncache_fromtape_cache352, align 8
  %46 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 13
  %mdyncache_fromtape_cache357 = alloca double**, align 8
  store double** %46, double*** %mdyncache_fromtape_cache357, align 8
  %47 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 14
  %mdyncache_fromtape_cache362 = alloca double*, align 8
  store double* %47, double** %mdyncache_fromtape_cache362, align 8
  %48 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 15
  %mdyncache_fromtape_cache364 = alloca double*, align 8
  store double* %48, double** %mdyncache_fromtape_cache364, align 8
  %49 = call {}*** @julia.get_pgcstack() #65
  switch i32 %0, label %L12 [
    i32 1426063360, label %L18
    i32 1275068416, label %L18
  ], !dbg !5593

L12:                                              ; preds = %top
  unreachable

L18:                                              ; preds = %top, %top
  %arraysize = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5595
  br i1 true, label %L28, label %L23, !dbg !5597

L23:                                              ; preds = %L18
  unreachable

L28:                                              ; preds = %L18
  br i1 true, label %L41, label %L32, !dbg !5598

L32:                                              ; preds = %L28
  unreachable

L41:                                              ; preds = %L28
  br i1 true, label %L79, label %L45, !dbg !5599

L45:                                              ; preds = %L41
  unreachable

L79:                                              ; preds = %L41
  %"'ipc80" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !5600
  %50 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc80"), !dbg !5600
  %"arrayptr171'il_phi" = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 2, !dbg !5600
  %"'ipc76" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !5604
  %51 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc76"), !dbg !5604
  %"arrayptr50172'il_phi" = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 1, !dbg !5604
  %"arrayptr50172195'ipc" = bitcast double* %"arrayptr50172'il_phi" to i8*, !dbg !5608
  %52 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %2, {} addrspace(10)* %"'1", {} addrspace(10)* %3, {} addrspace(10)* %"'2"), !dbg !5608
  %53 = lshr i32 %0, 24, !dbg !5609
  %value_phi51 = trunc i32 %53 to i8, !dbg !5616
  %.not165 = icmp eq i64 %arraysize, 0, !dbg !5617
  %"'ipc" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !5619
  %54 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !5619
  %"arrayptr81170'il_phi" = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 0, !dbg !5619
  store i1 false, i1* %_cache, align 1, !dbg !5608, !invariant.group !5620
  store i1 false, i1* %_cache92, align 1, !dbg !5608, !invariant.group !5621
  switch i8 %value_phi51, label %55 [
    i8 85, label %58
    i8 76, label %56
  ], !dbg !5608

55:                                               ; preds = %L79
  store i1 true, i1* %_cache, align 1, !dbg !5608, !invariant.group !5620
  br label %56, !dbg !5608

56:                                               ; preds = %55, %L79
  %57 = phi i32 [ -1, %55 ], [ 122, %L79 ], !dbg !5608
  store i1 true, i1* %_cache92, align 1, !dbg !5608, !invariant.group !5621
  br label %58, !dbg !5608

58:                                               ; preds = %56, %L79
  %59 = phi i32 [ %57, %56 ], [ 121, %L79 ], !dbg !5608
  %60 = trunc i64 %arraysize to i32, !dbg !5608
  %61 = select i1 %.not165, i32 1, i32 %60, !dbg !5608
  %62 = icmp sgt i32 %60, 0, !dbg !5608
  br i1 %62, label %.preheader187, label %.loopexit189, !dbg !5608

.preheader187:                                    ; preds = %58
  %63 = shl i64 %arraysize, 3, !dbg !5608
  %64 = and i64 %63, 34359738360, !dbg !5608
  br label %.loopexit189, !dbg !5608

.loopexit189:                                     ; preds = %.preheader187, %58
  switch i32 %59, label %213 [
    i32 122, label %65
    i32 121, label %135
  ], !dbg !5608

65:                                               ; preds = %.loopexit189
  %66 = icmp sgt i32 %60, 0, !dbg !5608
  store i8 0, i8* %_cache327, align 1, !dbg !5608, !invariant.group !5622
  br i1 %66, label %67, label %dsymv_64_.exit, !dbg !5608

67:                                               ; preds = %65
  %sext185 = shl i64 %arraysize, 32, !dbg !5608
  %68 = ashr exact i64 %sext185, 32, !dbg !5608
  %69 = sext i32 %61 to i64, !dbg !5608
  %70 = and i64 %arraysize, 4294967295, !dbg !5608
  %71 = add nsw i64 %70, -1, !dbg !5608
  %72 = add nsw i64 %70, -2, !dbg !5608
  %73 = add nuw i64 %71, 1, !dbg !5608
  %74 = mul nuw i64 %73, 8, !dbg !5608
  %75 = mul nuw i64 %73, 8, !dbg !5608
  %76 = mul nuw i64 %73, 8, !dbg !5608
  %77 = mul nuw i64 %73, 8, !dbg !5608
  %78 = mul nuw i64 %73, 8, !dbg !5608
  br label %79, !dbg !5608

79:                                               ; preds = %133, %67
  %iv3 = phi i64 [ %iv.next4, %133 ], [ 0, %67 ], !dbg !5608
  %80 = mul nsw i64 %iv3, -1, !dbg !5608
  %81 = add i64 %72, %80, !dbg !5608
  %iv.next4 = add nuw nsw i64 %iv3, 1, !dbg !5608
  %82 = add i64 %iv3, 1, !dbg !5608
  %83 = add i64 %iv3, 1, !dbg !5608
  %84 = trunc i64 %83 to i32, !dbg !5608
  %85 = sext i32 %84 to i64, !dbg !5608
  %"'ipg111" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %iv3, !dbg !5608
  %86 = load double*, double** %mdyncache_fromtape_cache, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5623
  %87 = getelementptr inbounds double, double* %86, i64 %iv3, !dbg !5608
  %88 = load double, double* %87, align 8, !dbg !5608, !invariant.group !5624
  %89 = mul nsw i64 %iv3, %69, !dbg !5608
  %90 = add nsw i64 %89, %iv3, !dbg !5608
  %"'ipg106" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %90, !dbg !5608
  %91 = load double*, double** %mdyncache_fromtape_cache329, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5625
  %92 = getelementptr inbounds double, double* %91, i64 %iv3, !dbg !5608
  %93 = load double, double* %92, align 8, !dbg !5608, !invariant.group !5626
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %iv3, !dbg !5608
  %94 = icmp slt i64 %iv.next4, %68, !dbg !5608
  br i1 %94, label %95, label %133, !dbg !5608

95:                                               ; preds = %79
  %96 = add nuw i64 %81, 1, !dbg !5608
  %97 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 8, !dbg !5608
  %98 = getelementptr inbounds double*, double** %97, i64 %iv3, !dbg !5608
  %99 = mul nuw i64 %96, 8, !dbg !5608
  %100 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 7, !dbg !5608
  %101 = getelementptr inbounds double*, double** %100, i64 %iv3, !dbg !5608
  %102 = mul nuw i64 %96, 8, !dbg !5608
  %103 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 6, !dbg !5608
  %104 = getelementptr inbounds double*, double** %103, i64 %iv3, !dbg !5608
  %105 = mul nuw i64 %96, 8, !dbg !5608
  %106 = load double**, double*** %mdyncache_fromtape_cache331, align 8, !dbg !5608, !invariant.group !5627
  %107 = getelementptr inbounds double*, double** %106, i64 %iv3, !dbg !5608
  %108 = load double**, double*** %mdyncache_fromtape_cache335, align 8, !dbg !5608, !invariant.group !5628
  %109 = getelementptr inbounds double*, double** %108, i64 %iv3, !dbg !5608
  %110 = load double**, double*** %mdyncache_fromtape_cache340, align 8, !dbg !5608, !invariant.group !5629
  %111 = getelementptr inbounds double*, double** %110, i64 %iv3, !dbg !5608
  br label %112, !dbg !5608

112:                                              ; preds = %112, %95
  %iv5 = phi i64 [ %iv.next6, %112 ], [ 0, %95 ], !dbg !5608
  %iv.next6 = add nuw nsw i64 %iv5, 1, !dbg !5608
  %113 = add i64 %82, %iv5, !dbg !5608
  %114 = add i64 %85, %iv5, !dbg !5608
  %115 = add nsw i64 %113, %89, !dbg !5608
  %"'ipg142" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %115, !dbg !5608
  %116 = load double**, double*** %mdyncache_fromtape_cache331, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5630
  %117 = getelementptr inbounds double*, double** %116, i64 %iv3, !dbg !5608
  %118 = load double*, double** %117, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5631
  %119 = getelementptr inbounds double, double* %118, i64 %iv5, !dbg !5608
  %120 = load double, double* %119, align 8, !dbg !5608, !invariant.group !5632
  %"'ipg154" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %114, !dbg !5608
  %"'ipg148" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %114, !dbg !5608
  %121 = load double**, double*** %mdyncache_fromtape_cache335, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5633
  %122 = getelementptr inbounds double*, double** %121, i64 %iv3, !dbg !5608
  %123 = load double*, double** %122, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5634
  %124 = getelementptr inbounds double, double* %123, i64 %iv5, !dbg !5608
  %125 = load double, double* %124, align 8, !dbg !5608, !invariant.group !5635
  %126 = load double**, double*** %mdyncache_fromtape_cache340, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5636
  %127 = getelementptr inbounds double*, double** %126, i64 %iv3, !dbg !5608
  %128 = load double*, double** %127, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5637
  %129 = getelementptr inbounds double, double* %128, i64 %iv5, !dbg !5608
  %130 = load double, double* %129, align 8, !dbg !5608, !invariant.group !5638
  %131 = add nuw nsw i64 %113, 1, !dbg !5608
  %132 = icmp eq i64 %131, %70, !dbg !5608
  br i1 %132, label %._crit_edge183, label %112, !dbg !5608, !llvm.loop !5639

._crit_edge183:                                   ; preds = %112
  br label %133, !dbg !5608

133:                                              ; preds = %._crit_edge183, %79
  %134 = icmp eq i64 %iv.next4, %70, !dbg !5608
  br i1 %134, label %dsymv_64_.exit.loopexit, label %79, !dbg !5608, !llvm.loop !5640

135:                                              ; preds = %.loopexit189
  %136 = icmp sgt i32 %60, 0, !dbg !5608
  store i8 1, i8* %_cache327, align 1, !dbg !5608, !invariant.group !5622
  br i1 %136, label %137, label %dsymv_64_.exit, !dbg !5608

137:                                              ; preds = %135
  %sext = shl i64 %arraysize, 32, !dbg !5608
  %138 = ashr exact i64 %sext, 32, !dbg !5608
  %139 = sext i32 %61 to i64, !dbg !5608
  %indvars.iv217 = add nsw i64 %138, -1, !dbg !5608
  %"'ipg202" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %indvars.iv217, !dbg !5608
  %140 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 9, !dbg !5608
  %141 = mul nsw i64 %indvars.iv217, %139, !dbg !5608
  %142 = add nsw i64 %141, %indvars.iv217, !dbg !5608
  %"'ipg197" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %142, !dbg !5608
  %143 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 10, !dbg !5608
  %"'ipg186" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %indvars.iv217, !dbg !5608
  %144 = icmp sgt i64 %sext, 4294967296, !dbg !5608
  br i1 %144, label %.preheader.preheader.lr.ph, label %.thread, !dbg !5608

.preheader.preheader.lr.ph:                       ; preds = %137
  %145 = add nuw i64 %arraysize, 4294967295, !dbg !5608
  %146 = and i64 %145, 4294967295, !dbg !5608
  %147 = sub i64 0, %139, !dbg !5608
  %148 = add i64 %138, -1, !dbg !5608
  %149 = add nsw i64 %138, -1, !dbg !5608
  %smin = call i64 @llvm.smin.i64(i64 %149, i64 1), !dbg !5608
  %150 = sub i64 %148, %smin, !dbg !5608
  %151 = add nsw i64 %146, -1, !dbg !5608
  %152 = add nuw i64 %150, 1, !dbg !5608
  %153 = mul nuw i64 %152, 8, !dbg !5608
  %154 = mul nuw i64 %152, 8, !dbg !5608
  %155 = mul nuw i64 %152, 8, !dbg !5608
  %156 = mul nuw i64 %152, 8, !dbg !5608
  %157 = mul nuw i64 %152, 8, !dbg !5608
  br label %.preheader.preheader, !dbg !5608

.preheader.preheader:                             ; preds = %202, %.preheader.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %202 ], [ 0, %.preheader.preheader.lr.ph ]
  %158 = phi double [ %140, %.preheader.preheader.lr.ph ], [ %206, %202 ]
  %159 = mul nsw i64 %iv, -1, !dbg !5608
  %160 = add i64 %151, %159, !dbg !5608
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5608
  %161 = mul nsw i64 %iv, -1, !dbg !5608
  %162 = add i64 %146, %161, !dbg !5608
  %163 = mul nsw i64 %iv, -1, !dbg !5608
  %164 = add i64 %indvars.iv217, %163, !dbg !5608
  %165 = mul i64 %147, %iv, !dbg !5608
  %166 = add i64 %141, %165, !dbg !5608
  %167 = mul nsw i64 %iv, -1, !dbg !5608
  %168 = add i64 %indvars.iv217, %167, !dbg !5608
  %"scevgep'ipg" = getelementptr double, double* %"arrayptr50172'il_phi", i64 %168, !dbg !5608
  %169 = add nuw i64 %160, 1, !dbg !5608
  %170 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 13, !dbg !5608
  %171 = getelementptr inbounds double*, double** %170, i64 %iv, !dbg !5608
  %172 = mul nuw i64 %169, 8, !dbg !5608
  %173 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 12, !dbg !5608
  %174 = getelementptr inbounds double*, double** %173, i64 %iv, !dbg !5608
  %175 = mul nuw i64 %169, 8, !dbg !5608
  %176 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 11, !dbg !5608
  %177 = getelementptr inbounds double*, double** %176, i64 %iv, !dbg !5608
  %178 = mul nuw i64 %169, 8, !dbg !5608
  %179 = load double**, double*** %mdyncache_fromtape_cache347, align 8, !dbg !5608, !invariant.group !5641
  %180 = getelementptr inbounds double*, double** %179, i64 %iv, !dbg !5608
  %181 = load double**, double*** %mdyncache_fromtape_cache352, align 8, !dbg !5608, !invariant.group !5642
  %182 = getelementptr inbounds double*, double** %181, i64 %iv, !dbg !5608
  %183 = load double**, double*** %mdyncache_fromtape_cache357, align 8, !dbg !5608, !invariant.group !5643
  %184 = getelementptr inbounds double*, double** %183, i64 %iv, !dbg !5608
  br label %.preheader, !dbg !5608

.thread.loopexit:                                 ; preds = %202
  br label %.thread, !dbg !5608

.thread:                                          ; preds = %.thread.loopexit, %137
  store i8 2, i8* %_cache327, align 1, !dbg !5608, !invariant.group !5622
  br label %dsymv_64_.exit, !dbg !5608

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv1 = phi i64 [ %iv.next2, %.preheader ], [ 0, %.preheader.preheader ], !dbg !5608
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !5608
  %185 = add nsw i64 %iv1, %166, !dbg !5608
  %"'ipg249" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %185, !dbg !5608
  %186 = load double**, double*** %mdyncache_fromtape_cache347, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5644
  %187 = getelementptr inbounds double*, double** %186, i64 %iv, !dbg !5608
  %188 = load double*, double** %187, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5645
  %189 = getelementptr inbounds double, double* %188, i64 %iv1, !dbg !5608
  %190 = load double, double* %189, align 8, !dbg !5608, !invariant.group !5646
  %"'ipg261" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %iv1, !dbg !5608
  %"'ipg259" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %iv1, !dbg !5608
  %191 = load double**, double*** %mdyncache_fromtape_cache352, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5647
  %192 = getelementptr inbounds double*, double** %191, i64 %iv, !dbg !5608
  %193 = load double*, double** %192, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5648
  %194 = getelementptr inbounds double, double* %193, i64 %iv1, !dbg !5608
  %195 = load double, double* %194, align 8, !dbg !5608, !invariant.group !5649
  %196 = load double**, double*** %mdyncache_fromtape_cache357, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5650
  %197 = getelementptr inbounds double*, double** %196, i64 %iv, !dbg !5608
  %198 = load double*, double** %197, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5651
  %199 = getelementptr inbounds double, double* %198, i64 %iv1, !dbg !5608
  %200 = load double, double* %199, align 8, !dbg !5608, !invariant.group !5652
  %201 = icmp eq i64 %iv.next2, %162, !dbg !5608
  br i1 %201, label %202, label %.preheader, !dbg !5608, !llvm.loop !5653

202:                                              ; preds = %.preheader
  %203 = add nsw i64 %164, -1, !dbg !5608
  %"'ipg313" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %203, !dbg !5608
  %204 = load double*, double** %mdyncache_fromtape_cache362, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5654
  %205 = getelementptr inbounds double, double* %204, i64 %iv, !dbg !5608
  %206 = load double, double* %205, align 8, !dbg !5608, !invariant.group !5655
  %207 = mul nsw i64 %203, %139, !dbg !5608
  %208 = add nsw i64 %207, %203, !dbg !5608
  %"'ipg308" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %208, !dbg !5608
  %209 = load double*, double** %mdyncache_fromtape_cache364, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5656
  %210 = getelementptr inbounds double, double* %209, i64 %iv, !dbg !5608
  %211 = load double, double* %210, align 8, !dbg !5608, !invariant.group !5657
  %"'ipg287" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %203, !dbg !5608
  %212 = icmp sgt i64 %164, 1, !dbg !5608
  br i1 %212, label %.preheader.preheader, label %.thread.loopexit, !dbg !5608

213:                                              ; preds = %.loopexit189
  unreachable

dsymv_64_.exit.loopexit:                          ; preds = %133
  store i8 3, i8* %_cache327, align 1, !dbg !5608, !invariant.group !5622
  br label %dsymv_64_.exit, !dbg !5608

dsymv_64_.exit:                                   ; preds = %dsymv_64_.exit.loopexit, %.thread, %135, %65
  call void @llvm.julia.gc_preserve_end(token %52) #65, !dbg !5608
  br label %invertdsymv_64_.exit, !dbg !5658

inverttop:                                        ; preds = %invertL18
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL18:                                        ; preds = %invertL28
  br label %inverttop

invertL28:                                        ; preds = %invertL41
  br label %invertL18

invertL41:                                        ; preds = %invertL79
  br label %invertL28

invertL79:                                        ; preds = %invert4, %invert3, %invert
  call void @llvm.julia.gc_preserve_end(token %614), !dbg !5608
  br label %invertL41

invert:                                           ; preds = %invert3
  br label %invertL79

invert3:                                          ; preds = %invert4
  %214 = load i1, i1* %_cache, align 1, !invariant.group !5620
  br i1 %214, label %invert, label %invertL79

invert4:                                          ; preds = %invert.loopexit189, %invert.preheader187
  %215 = load i1, i1* %_cache92, align 1, !invariant.group !5621
  br i1 %215, label %invert3, label %invertL79

invert.preheader187:                              ; preds = %invert.loopexit189
  %_unwrap = shl i64 %arraysize, 3, !dbg !5608
  %_unwrap93 = and i64 %_unwrap, 34359738360, !dbg !5608
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %"arrayptr50172195'ipc", i8 0, i64 %_unwrap93, i1 false) #65, !dbg !5608, !tbaa !1662, !noalias !5280
  br label %invert4

invert.loopexit189:                               ; preds = %invert11, %invert5
  br i1 %62, label %invert.preheader187, label %invert4

invert5:                                          ; preds = %invertdsymv_64_.exit, %invert6
  br label %invert.loopexit189

invert6:                                          ; preds = %invert7
  %216 = load i64, i64* %"iv3'ac", align 8
  %217 = load i64, i64* %"iv3'ac", align 8
  %218 = load i64, i64* %"iv3'ac", align 8
  %219 = load i64, i64* %"iv3'ac", align 8
  %220 = load i64, i64* %"iv3'ac", align 8
  %221 = load i64, i64* %"iv3'ac", align 8
  %forfree328 = load double*, double** %mdyncache_fromtape_cache, align 8, !dereferenceable !3229, !invariant.group !5623
  %222 = bitcast double* %forfree328 to i8*
  call void @free(i8* nonnull %222), !dbg !5659
  %223 = load i64, i64* %"iv3'ac", align 8
  %forfree330 = load double*, double** %mdyncache_fromtape_cache329, align 8, !dereferenceable !3229, !invariant.group !5625
  %224 = bitcast double* %forfree330 to i8*
  call void @free(i8* nonnull %224), !dbg !5659
  %225 = load i64, i64* %"iv3'ac", align 8
  %forfree = load double**, double*** %mdyncache_fromtape_cache331, align 8, !dereferenceable !3229, !invariant.group !5630
  %226 = bitcast double** %forfree to i8*
  call void @free(i8* nonnull %226), !dbg !5659
  %227 = load i64, i64* %"iv3'ac", align 8
  %forfree336 = load double**, double*** %mdyncache_fromtape_cache335, align 8, !dereferenceable !3229, !invariant.group !5633
  %228 = bitcast double** %forfree336 to i8*
  call void @free(i8* nonnull %228), !dbg !5659
  %229 = load i64, i64* %"iv3'ac", align 8
  %forfree341 = load double**, double*** %mdyncache_fromtape_cache340, align 8, !dereferenceable !3229, !invariant.group !5636
  %230 = bitcast double** %forfree341 to i8*
  call void @free(i8* nonnull %230), !dbg !5659
  br label %invert5

invert7:                                          ; preds = %invert10, %invert8
  %231 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %231, !dbg !5608
  %232 = load double, double* %"'ipg_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  store double 0.000000e+00, double* %"'ipg_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  %233 = load double, double* %"'de", align 8, !dbg !5608
  %234 = fadd fast double %233, %232, !dbg !5608
  store double %234, double* %"'de", align 8, !dbg !5608
  %235 = load double, double* %"'de", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de", align 8, !dbg !5608
  %236 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %arraysize_unwrap374 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5608
  %_unwrap96 = and i64 %arraysize_unwrap374, 4294967295, !dbg !5608
  %_unwrap97 = add nsw i64 %_unwrap96, -1, !dbg !5608
  %237 = add nuw i64 %_unwrap97, 1, !dbg !5608
  %238 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 5, !dbg !5608
  %239 = getelementptr inbounds double, double* %238, i64 %236, !dbg !5608
  %240 = load double, double* %239, align 8, !dbg !5608, !tbaa !1662, !invariant.group !5665
  %241 = fmul fast double %235, %240, !dbg !5608
  %242 = load double, double* %"'de98", align 8, !dbg !5608
  %243 = fadd fast double %242, %241, !dbg !5608
  store double %243, double* %"'de98", align 8, !dbg !5608
  %244 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %245 = add nuw i64 %_unwrap97, 1, !dbg !5608
  %246 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 4, !dbg !5608
  %247 = getelementptr inbounds double, double* %246, i64 %244, !dbg !5608
  %248 = load double, double* %247, align 8, !dbg !5608, !tbaa !1662, !invariant.group !5666
  %249 = fmul fast double %235, %248, !dbg !5608
  %250 = load double, double* %"'de102", align 8, !dbg !5608
  %251 = fadd fast double %250, %249, !dbg !5608
  store double %251, double* %"'de102", align 8, !dbg !5608
  %252 = load double, double* %"'de103", align 8, !dbg !5608
  %253 = fadd fast double %252, %235, !dbg !5608
  store double %253, double* %"'de103", align 8, !dbg !5608
  %254 = load double, double* %"'de103", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de103", align 8, !dbg !5608
  %255 = load double, double* %"'ipg_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %256 = fadd fast double %255, %254, !dbg !5608
  store double %256, double* %"'ipg_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %257 = load double, double* %"'de102", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de102", align 8, !dbg !5608
  %258 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %_unwrap107 = sext i32 %61 to i64, !dbg !5608
  %_unwrap108 = mul nsw i64 %258, %_unwrap107, !dbg !5608
  %_unwrap109 = add nsw i64 %_unwrap108, %258, !dbg !5608
  %"'ipg106_unwrap" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %_unwrap109, !dbg !5608
  %259 = load double, double* %"'ipg106_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %260 = fadd fast double %259, %257, !dbg !5608
  store double %260, double* %"'ipg106_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %261 = load double, double* %"'de98", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de98", align 8, !dbg !5608
  %262 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %"'ipg111_unwrap" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %262, !dbg !5608
  %263 = load double, double* %"'ipg111_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5673, !noalias !5676
  %264 = fadd fast double %263, %261, !dbg !5608
  store double %264, double* %"'ipg111_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5673, !noalias !5676
  %265 = load i64, i64* %"iv3'ac", align 8
  %266 = icmp eq i64 %265, 0
  %267 = xor i1 %266, true
  br i1 %266, label %invert6, label %incinvert7

incinvert7:                                       ; preds = %invert7
  %268 = load i64, i64* %"iv3'ac", align 8
  %269 = add nsw i64 %268, -1
  store i64 %269, i64* %"iv3'ac", align 8
  br label %invert10

invert8:                                          ; preds = %invert9
  %270 = load i64, i64* %"iv5'ac", align 8
  %271 = load i64, i64* %"iv5'ac", align 8
  %272 = load i64, i64* %"iv5'ac", align 8
  %273 = load i64, i64* %"iv3'ac", align 8
  %274 = load i64, i64* %"iv5'ac", align 8
  %_unwrap332 = load double**, double*** %mdyncache_fromtape_cache331, align 8, !dbg !5608, !invariant.group !5627
  %_unwrap333 = getelementptr inbounds double*, double** %_unwrap332, i64 %273
  %forfree334 = load double*, double** %_unwrap333, align 8, !dereferenceable !3229, !invariant.group !5631
  %275 = bitcast double* %forfree334 to i8*
  call void @free(i8* nonnull %275), !dbg !5659
  %276 = load i64, i64* %"iv3'ac", align 8
  %277 = load i64, i64* %"iv5'ac", align 8
  %_unwrap337 = load double**, double*** %mdyncache_fromtape_cache335, align 8, !dbg !5608, !invariant.group !5628
  %_unwrap338 = getelementptr inbounds double*, double** %_unwrap337, i64 %276
  %forfree339 = load double*, double** %_unwrap338, align 8, !dereferenceable !3229, !invariant.group !5634
  %278 = bitcast double* %forfree339 to i8*
  call void @free(i8* nonnull %278), !dbg !5659
  %279 = load i64, i64* %"iv3'ac", align 8
  %280 = load i64, i64* %"iv5'ac", align 8
  %_unwrap342 = load double**, double*** %mdyncache_fromtape_cache340, align 8, !dbg !5608, !invariant.group !5629
  %_unwrap343 = getelementptr inbounds double*, double** %_unwrap342, i64 %279
  %forfree344 = load double*, double** %_unwrap343, align 8, !dereferenceable !3229, !invariant.group !5637
  %281 = bitcast double* %forfree344 to i8*
  call void @free(i8* nonnull %281), !dbg !5659
  br label %invert7

invert9:                                          ; preds = %mergeinvert9_._crit_edge183, %incinvert9
  %282 = load double, double* %"'de116", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de116", align 8, !dbg !5608
  %283 = load i64, i64* %"iv5'ac", align 8, !dbg !5608
  %284 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %arraysize_unwrap369 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5608
  %_unwrap125 = and i64 %arraysize_unwrap369, 4294967295, !dbg !5608
  %_unwrap126 = add nsw i64 %_unwrap125, -1, !dbg !5608
  %285 = add nuw i64 %_unwrap126, 1, !dbg !5608
  %286 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %arraysize_unwrap = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5608
  %_unwrap128 = and i64 %arraysize_unwrap, 4294967295, !dbg !5608
  %_unwrap129 = add nsw i64 %_unwrap128, -2, !dbg !5608
  %_unwrap130 = mul nsw i64 %286, -1, !dbg !5608
  %_unwrap131 = add i64 %_unwrap129, %_unwrap130, !dbg !5608
  %287 = add nuw i64 %_unwrap131, 1, !dbg !5608
  %288 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 8, !dbg !5608
  %289 = getelementptr inbounds double*, double** %288, i64 %284, !dbg !5608
  %290 = load double*, double** %289, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5678
  %291 = getelementptr inbounds double, double* %290, i64 %283, !dbg !5608
  %292 = load double, double* %291, align 8, !dbg !5608, !tbaa !1662, !invariant.group !5679
  %293 = fmul fast double %282, %292, !dbg !5608
  %294 = load double, double* %"'de132", align 8, !dbg !5608
  %295 = fadd fast double %294, %293, !dbg !5608
  store double %295, double* %"'de132", align 8, !dbg !5608
  %296 = load i64, i64* %"iv5'ac", align 8, !dbg !5608
  %297 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %298 = add nuw i64 %_unwrap126, 1, !dbg !5608
  %299 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %300 = add nuw i64 %_unwrap131, 1, !dbg !5608
  %301 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 7, !dbg !5608
  %302 = getelementptr inbounds double*, double** %301, i64 %297, !dbg !5608
  %303 = load double*, double** %302, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5680
  %304 = getelementptr inbounds double, double* %303, i64 %296, !dbg !5608
  %305 = load double, double* %304, align 8, !dbg !5608, !tbaa !1662, !invariant.group !5681
  %306 = fmul fast double %282, %305, !dbg !5608
  %307 = load double, double* %"'de140", align 8, !dbg !5608
  %308 = fadd fast double %307, %306, !dbg !5608
  store double %308, double* %"'de140", align 8, !dbg !5608
  %309 = load double, double* %"'de141", align 8, !dbg !5608
  %310 = fadd fast double %309, %282, !dbg !5608
  store double %310, double* %"'de141", align 8, !dbg !5608
  %311 = load double, double* %"'de140", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de140", align 8, !dbg !5608
  %312 = load i64, i64* %"iv5'ac", align 8, !dbg !5608
  %313 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %_unwrap143 = add i64 %313, 1, !dbg !5608
  %_unwrap144 = add i64 %_unwrap143, %312, !dbg !5608
  %_unwrap145 = sext i32 %61 to i64, !dbg !5608
  %_unwrap146 = mul nsw i64 %313, %_unwrap145, !dbg !5608
  %_unwrap147 = add nsw i64 %_unwrap144, %_unwrap146, !dbg !5608
  %"'ipg142_unwrap" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %_unwrap147, !dbg !5608
  %314 = load double, double* %"'ipg142_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %315 = fadd fast double %314, %311, !dbg !5608
  store double %315, double* %"'ipg142_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %316 = load double, double* %"'de132", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de132", align 8, !dbg !5608
  %317 = load i64, i64* %"iv5'ac", align 8, !dbg !5608
  %318 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %_unwrap149 = add i64 %318, 1, !dbg !5608
  %_unwrap150 = trunc i64 %_unwrap149 to i32, !dbg !5608
  %_unwrap151 = sext i32 %_unwrap150 to i64, !dbg !5608
  %_unwrap152 = add i64 %_unwrap151, %317, !dbg !5608
  %"'ipg148_unwrap" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %_unwrap152, !dbg !5608
  %319 = load double, double* %"'ipg148_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5673, !noalias !5676
  %320 = fadd fast double %319, %316, !dbg !5608
  store double %320, double* %"'ipg148_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5673, !noalias !5676
  %321 = load i64, i64* %"iv5'ac", align 8, !dbg !5608
  %322 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %"'ipg154_unwrap" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %_unwrap152, !dbg !5608
  %323 = load double, double* %"'ipg154_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  store double 0.000000e+00, double* %"'ipg154_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  %324 = load double, double* %"'de155", align 8, !dbg !5608
  %325 = fadd fast double %324, %323, !dbg !5608
  store double %325, double* %"'de155", align 8, !dbg !5608
  %326 = load double, double* %"'de155", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de155", align 8, !dbg !5608
  %327 = load i64, i64* %"iv5'ac", align 8, !dbg !5608
  %328 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %329 = add nuw i64 %_unwrap126, 1, !dbg !5608
  %330 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %331 = add nuw i64 %_unwrap131, 1, !dbg !5608
  %332 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 6, !dbg !5608
  %333 = getelementptr inbounds double*, double** %332, i64 %328, !dbg !5608
  %334 = load double*, double** %333, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5682
  %335 = getelementptr inbounds double, double* %334, i64 %327, !dbg !5608
  %336 = load double, double* %335, align 8, !dbg !5608, !tbaa !1662, !invariant.group !5683
  %337 = fmul fast double %326, %336, !dbg !5608
  %338 = load double, double* %"'de98", align 8, !dbg !5608
  %339 = fadd fast double %338, %337, !dbg !5608
  store double %339, double* %"'de98", align 8, !dbg !5608
  %340 = load i64, i64* %"iv5'ac", align 8, !dbg !5608
  %341 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %342 = add nuw i64 %_unwrap126, 1, !dbg !5608
  %343 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 4, !dbg !5608
  %344 = getelementptr inbounds double, double* %343, i64 %341, !dbg !5608
  %345 = load double, double* %344, align 8, !dbg !5608, !tbaa !1662, !alias.scope !5676, !noalias !5673, !invariant.group !5666
  %346 = fmul fast double %326, %345, !dbg !5608
  %347 = load double, double* %"'de164", align 8, !dbg !5608
  %348 = fadd fast double %347, %346, !dbg !5608
  store double %348, double* %"'de164", align 8, !dbg !5608
  %349 = load double, double* %"'de165", align 8, !dbg !5608
  %350 = fadd fast double %349, %326, !dbg !5608
  store double %350, double* %"'de165", align 8, !dbg !5608
  %351 = load double, double* %"'de165", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de165", align 8, !dbg !5608
  %352 = load double, double* %"'ipg154_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %353 = fadd fast double %352, %351, !dbg !5608
  store double %353, double* %"'ipg154_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %354 = load double, double* %"'de164", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de164", align 8, !dbg !5608
  %355 = load double, double* %"'ipg142_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %356 = fadd fast double %355, %354, !dbg !5608
  store double %356, double* %"'ipg142_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %357 = load double, double* %"'de141", align 8
  store double 0.000000e+00, double* %"'de141", align 8
  %358 = load i64, i64* %"iv5'ac", align 8
  %359 = icmp eq i64 %358, 0
  %360 = xor i1 %359, true
  %361 = select fast i1 %360, double %357, double 0.000000e+00
  %362 = load double, double* %"'de116", align 8
  %363 = fadd fast double %362, %357
  %364 = select fast i1 %359, double %362, double %363
  store double %364, double* %"'de116", align 8
  br i1 %359, label %invert8, label %incinvert9

incinvert9:                                       ; preds = %invert9
  %365 = load i64, i64* %"iv5'ac", align 8
  %366 = add nsw i64 %365, -1
  store i64 %366, i64* %"iv5'ac", align 8
  br label %invert9

invert._crit_edge183:                             ; preds = %invert10
  %367 = load double, double* %".pre184'de", align 8, !dbg !5608
  store double 0.000000e+00, double* %".pre184'de", align 8, !dbg !5608
  %368 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %"'ipg_unwrap170" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %368, !dbg !5608
  %369 = load double, double* %"'ipg_unwrap170", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %370 = fadd fast double %369, %367, !dbg !5608
  store double %370, double* %"'ipg_unwrap170", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %371 = load i64, i64* %"iv3'ac", align 8
  %_unwrap171 = and i64 %arraysize, 4294967295
  %_unwrap172 = add nsw i64 %_unwrap171, -2
  %_unwrap173 = mul nsw i64 %371, -1
  %_unwrap174 = add i64 %_unwrap172, %_unwrap173
  br label %mergeinvert9_._crit_edge183

mergeinvert9_._crit_edge183:                      ; preds = %invert._crit_edge183
  store i64 %_unwrap174, i64* %"iv5'ac", align 8
  br label %invert9

invert10:                                         ; preds = %mergeinvert7_dsymv_64_.exit.loopexit, %incinvert7
  %372 = load i64, i64* %"iv3'ac", align 8, !dbg !5608
  %"'ipg_unwrap176" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %372, !dbg !5608
  %373 = load double, double* %"'ipg_unwrap176", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  store double 0.000000e+00, double* %"'ipg_unwrap176", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  %374 = load double, double* %"'de177", align 8, !dbg !5608
  %375 = fadd fast double %374, %373, !dbg !5608
  store double %375, double* %"'de177", align 8, !dbg !5608
  %376 = load double, double* %"'de177", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de177", align 8, !dbg !5608
  %377 = load double, double* %"'de179", align 8, !dbg !5608
  %378 = fadd fast double %377, %376, !dbg !5608
  store double %378, double* %"'de179", align 8, !dbg !5608
  %379 = load double, double* %"'de180", align 8, !dbg !5608
  %380 = fadd fast double %379, %376, !dbg !5608
  store double %380, double* %"'de180", align 8, !dbg !5608
  %381 = load double, double* %"'de180", align 8
  store double 0.000000e+00, double* %"'de180", align 8
  %382 = load i64, i64* %"iv3'ac", align 8
  %iv.next4_unwrap = add nuw nsw i64 %382, 1
  %sext185_unwrap = shl i64 %arraysize, 32
  %_unwrap184 = ashr exact i64 %sext185_unwrap, 32
  %_unwrap185 = icmp slt i64 %iv.next4_unwrap, %_unwrap184
  %383 = xor i1 %_unwrap185, true
  %384 = select fast i1 %_unwrap185, double %381, double 0.000000e+00
  %385 = load double, double* %".pre184'de", align 8
  %386 = fadd fast double %385, %381
  %387 = select fast i1 %_unwrap185, double %386, double %385
  store double %387, double* %".pre184'de", align 8
  %388 = select fast i1 %383, double %381, double 0.000000e+00
  %389 = load double, double* %"'de", align 8
  %390 = fadd fast double %389, %381
  %391 = select fast i1 %_unwrap185, double %389, double %390
  store double %391, double* %"'de", align 8
  %392 = load double, double* %"'de179", align 8
  store double 0.000000e+00, double* %"'de179", align 8
  %393 = select fast i1 %_unwrap185, double %392, double 0.000000e+00
  %394 = load double, double* %"'de116", align 8
  %395 = fadd fast double %394, %392
  %396 = select fast i1 %_unwrap185, double %395, double %394
  store double %396, double* %"'de116", align 8
  br i1 %_unwrap185, label %invert._crit_edge183, label %invert7

invert11:                                         ; preds = %invertdsymv_64_.exit, %invert12
  br label %invert.loopexit189

invert12:                                         ; preds = %invert.thread, %invert.preheader.preheader.lr.ph
  %sext_unwrap = shl i64 %arraysize, 32, !dbg !5608
  %_unwrap187 = ashr exact i64 %sext_unwrap, 32, !dbg !5608
  %indvars.iv217_unwrap = add nsw i64 %_unwrap187, -1, !dbg !5608
  %"'ipg186_unwrap" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %indvars.iv217_unwrap, !dbg !5608
  %397 = load double, double* %"'ipg186_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  store double 0.000000e+00, double* %"'ipg186_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  %398 = load double, double* %"'de188", align 8, !dbg !5608
  %399 = fadd fast double %398, %397, !dbg !5608
  store double %399, double* %"'de188", align 8, !dbg !5608
  %400 = load double, double* %"'de188", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de188", align 8, !dbg !5608
  %_unwrap368 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 10, !dbg !5608
  %401 = fmul fast double %400, %_unwrap368, !dbg !5608
  %402 = load double, double* %"'de191", align 8, !dbg !5608
  %403 = fadd fast double %402, %401, !dbg !5608
  store double %403, double* %"'de191", align 8, !dbg !5608
  %_unwrap366 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 9, !dbg !5608
  %404 = fmul fast double %400, %_unwrap366, !dbg !5608
  %405 = load double, double* %"'de193", align 8, !dbg !5608
  %406 = fadd fast double %405, %404, !dbg !5608
  store double %406, double* %"'de193", align 8, !dbg !5608
  %407 = load double, double* %"'de194", align 8, !dbg !5608
  %408 = fadd fast double %407, %400, !dbg !5608
  store double %408, double* %"'de194", align 8, !dbg !5608
  %409 = load double, double* %"'de194", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de194", align 8, !dbg !5608
  %410 = load double, double* %"'ipg186_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %411 = fadd fast double %410, %409, !dbg !5608
  store double %411, double* %"'ipg186_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %412 = load double, double* %"'de193", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de193", align 8, !dbg !5608
  %_unwrap198 = sext i32 %61 to i64, !dbg !5608
  %_unwrap199 = mul nsw i64 %indvars.iv217_unwrap, %_unwrap198, !dbg !5608
  %_unwrap200 = add nsw i64 %_unwrap199, %indvars.iv217_unwrap, !dbg !5608
  %"'ipg197_unwrap" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %_unwrap200, !dbg !5608
  %413 = load double, double* %"'ipg197_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %414 = fadd fast double %413, %412, !dbg !5608
  store double %414, double* %"'ipg197_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %415 = load double, double* %"'de191", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de191", align 8, !dbg !5608
  %"'ipg202_unwrap" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %indvars.iv217_unwrap, !dbg !5608
  %416 = load double, double* %"'ipg202_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5673, !noalias !5676
  %417 = fadd fast double %416, %415, !dbg !5608
  store double %417, double* %"'ipg202_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5673, !noalias !5676
  br label %invert11

invert.preheader.preheader.lr.ph:                 ; preds = %invert.preheader.preheader
  %418 = load i64, i64* %"iv'ac", align 8
  %419 = load i64, i64* %"iv'ac", align 8
  %420 = load i64, i64* %"iv'ac", align 8
  %421 = load i64, i64* %"iv'ac", align 8
  %422 = load i64, i64* %"iv'ac", align 8
  %423 = load i64, i64* %"iv'ac", align 8
  %forfree348 = load double**, double*** %mdyncache_fromtape_cache347, align 8, !dereferenceable !3229, !invariant.group !5644
  %424 = bitcast double** %forfree348 to i8*
  call void @free(i8* nonnull %424), !dbg !5659
  %425 = load i64, i64* %"iv'ac", align 8
  %forfree353 = load double**, double*** %mdyncache_fromtape_cache352, align 8, !dereferenceable !3229, !invariant.group !5647
  %426 = bitcast double** %forfree353 to i8*
  call void @free(i8* nonnull %426), !dbg !5659
  %427 = load i64, i64* %"iv'ac", align 8
  %forfree358 = load double**, double*** %mdyncache_fromtape_cache357, align 8, !dereferenceable !3229, !invariant.group !5650
  %428 = bitcast double** %forfree358 to i8*
  call void @free(i8* nonnull %428), !dbg !5659
  %429 = load i64, i64* %"iv'ac", align 8
  %forfree363 = load double*, double** %mdyncache_fromtape_cache362, align 8, !dereferenceable !3229, !invariant.group !5654
  %430 = bitcast double* %forfree363 to i8*
  call void @free(i8* nonnull %430), !dbg !5659
  %431 = load i64, i64* %"iv'ac", align 8
  %forfree365 = load double*, double** %mdyncache_fromtape_cache364, align 8, !dereferenceable !3229, !invariant.group !5656
  %432 = bitcast double* %forfree365 to i8*
  call void @free(i8* nonnull %432), !dbg !5659
  br label %invert12

invert.preheader.preheader:                       ; preds = %invert.preheader_phimerge
  %433 = load double, double* %"'de204", align 8
  store double 0.000000e+00, double* %"'de204", align 8
  %434 = load i64, i64* %"iv'ac", align 8
  %435 = icmp eq i64 %434, 0
  %436 = xor i1 %435, true
  %437 = select fast i1 %436, double %433, double 0.000000e+00
  %438 = load double, double* %"'de205", align 8
  %439 = fadd fast double %438, %433
  %440 = select fast i1 %435, double %438, double %439
  store double %440, double* %"'de205", align 8
  %441 = select fast i1 %435, double %433, double 0.000000e+00
  %442 = load double, double* %"'de191", align 8
  %443 = fadd fast double %442, %433
  %444 = select fast i1 %435, double %443, double %442
  store double %444, double* %"'de191", align 8
  %445 = load i64, i64* %"iv1'ac", align 8
  %446 = load i64, i64* %"iv1'ac", align 8
  %447 = load i64, i64* %"iv1'ac", align 8
  %448 = load i64, i64* %"iv'ac", align 8
  %449 = load i64, i64* %"iv1'ac", align 8
  %_unwrap349 = load double**, double*** %mdyncache_fromtape_cache347, align 8, !dbg !5608, !invariant.group !5641
  %_unwrap350 = getelementptr inbounds double*, double** %_unwrap349, i64 %448
  %forfree351 = load double*, double** %_unwrap350, align 8, !dereferenceable !3229, !invariant.group !5645
  %450 = bitcast double* %forfree351 to i8*
  call void @free(i8* nonnull %450), !dbg !5659
  %451 = load i64, i64* %"iv'ac", align 8
  %452 = load i64, i64* %"iv1'ac", align 8
  %_unwrap354 = load double**, double*** %mdyncache_fromtape_cache352, align 8, !dbg !5608, !invariant.group !5642
  %_unwrap355 = getelementptr inbounds double*, double** %_unwrap354, i64 %451
  %forfree356 = load double*, double** %_unwrap355, align 8, !dereferenceable !3229, !invariant.group !5648
  %453 = bitcast double* %forfree356 to i8*
  call void @free(i8* nonnull %453), !dbg !5659
  %454 = load i64, i64* %"iv'ac", align 8
  %455 = load i64, i64* %"iv1'ac", align 8
  %_unwrap359 = load double**, double*** %mdyncache_fromtape_cache357, align 8, !dbg !5608, !invariant.group !5643
  %_unwrap360 = getelementptr inbounds double*, double** %_unwrap359, i64 %454
  %forfree361 = load double*, double** %_unwrap360, align 8, !dereferenceable !3229, !invariant.group !5651
  %456 = bitcast double* %forfree361 to i8*
  call void @free(i8* nonnull %456), !dbg !5659
  br i1 %435, label %invert.preheader.preheader.lr.ph, label %incinvert.preheader.preheader

incinvert.preheader.preheader:                    ; preds = %invert.preheader.preheader
  %457 = load i64, i64* %"iv'ac", align 8
  %458 = add nsw i64 %457, -1
  store i64 %458, i64* %"iv'ac", align 8
  br label %invert13

invert.thread.loopexit:                           ; preds = %invert.thread
  %sext_unwrap207 = shl i64 %arraysize, 32
  %_unwrap208 = ashr exact i64 %sext_unwrap207, 32
  %_unwrap209 = add i64 %_unwrap208, -1
  %_unwrap210 = add nsw i64 %_unwrap208, -1
  %459 = call i64 @llvm.smin.i64(i64 %_unwrap210, i64 1), !dbg !5608
  %_unwrap211 = sub i64 %_unwrap209, %459
  br label %mergeinvert.preheader.preheader_.thread.loopexit

mergeinvert.preheader.preheader_.thread.loopexit: ; preds = %invert.thread.loopexit
  store i64 %_unwrap211, i64* %"iv'ac", align 8
  br label %invert13

invert.thread:                                    ; preds = %invertdsymv_64_.exit
  %460 = load double, double* %"arrayptr50172'il_phi", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  store double 0.000000e+00, double* %"arrayptr50172'il_phi", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  %461 = load double, double* %"'de212", align 8, !dbg !5608
  %462 = fadd fast double %461, %460, !dbg !5608
  store double %462, double* %"'de212", align 8, !dbg !5608
  %463 = load double, double* %"'de212", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de212", align 8, !dbg !5608
  %464 = load double, double* %".lcssa216'de", align 8, !dbg !5608
  %465 = fadd fast double %464, %463, !dbg !5608
  store double %465, double* %".lcssa216'de", align 8, !dbg !5608
  %466 = load double, double* %".lcssa216'de", align 8
  store double 0.000000e+00, double* %".lcssa216'de", align 8
  %sext_unwrap216 = shl i64 %arraysize, 32
  %_unwrap217 = icmp sgt i64 %sext_unwrap216, 4294967296
  %467 = xor i1 %_unwrap217, true
  %468 = select fast i1 %_unwrap217, double %466, double 0.000000e+00
  %469 = load double, double* %"'de214", align 8
  %470 = fadd fast double %469, %466
  %471 = select fast i1 %_unwrap217, double %470, double %469
  store double %471, double* %"'de214", align 8
  %472 = select fast i1 %467, double %466, double 0.000000e+00
  %473 = load double, double* %"'de188", align 8
  %474 = fadd fast double %473, %466
  %475 = select fast i1 %_unwrap217, double %473, double %474
  store double %475, double* %"'de188", align 8
  br i1 %_unwrap217, label %invert.thread.loopexit, label %invert12

invert.preheader:                                 ; preds = %mergeinvert.preheader_, %incinvert.preheader
  %476 = load double, double* %"'de219", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de219", align 8, !dbg !5608
  %477 = load i64, i64* %"iv1'ac", align 8, !dbg !5608
  %478 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %arraysize_unwrap370 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5608
  %sext_unwrap228 = shl i64 %arraysize_unwrap370, 32, !dbg !5608
  %_unwrap229 = ashr exact i64 %sext_unwrap228, 32, !dbg !5608
  %_unwrap230 = add i64 %_unwrap229, -1, !dbg !5608
  %_unwrap231 = add nsw i64 %_unwrap229, -1, !dbg !5608
  %479 = call i64 @llvm.smin.i64(i64 %_unwrap231, i64 1), !dbg !5608
  %_unwrap232 = sub i64 %_unwrap230, %479, !dbg !5608
  %480 = add nuw i64 %_unwrap232, 1, !dbg !5608
  %481 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %arraysize_unwrap371 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5608
  %_unwrap234 = add nuw i64 %arraysize_unwrap371, 4294967295, !dbg !5608
  %_unwrap235 = and i64 %_unwrap234, 4294967295, !dbg !5608
  %_unwrap236 = add nsw i64 %_unwrap235, -1, !dbg !5608
  %_unwrap237 = mul nsw i64 %481, -1, !dbg !5608
  %_unwrap238 = add i64 %_unwrap236, %_unwrap237, !dbg !5608
  %482 = add nuw i64 %_unwrap238, 1, !dbg !5608
  %483 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 13, !dbg !5608
  %484 = getelementptr inbounds double*, double** %483, i64 %478, !dbg !5608
  %485 = load double*, double** %484, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5684
  %486 = getelementptr inbounds double, double* %485, i64 %477, !dbg !5608
  %487 = load double, double* %486, align 8, !dbg !5608, !tbaa !1662, !invariant.group !5685
  %488 = fmul fast double %476, %487, !dbg !5608
  %489 = load double, double* %"'de239", align 8, !dbg !5608
  %490 = fadd fast double %489, %488, !dbg !5608
  store double %490, double* %"'de239", align 8, !dbg !5608
  %491 = load i64, i64* %"iv1'ac", align 8, !dbg !5608
  %492 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %493 = add nuw i64 %_unwrap232, 1, !dbg !5608
  %494 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %495 = add nuw i64 %_unwrap238, 1, !dbg !5608
  %496 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 12, !dbg !5608
  %497 = getelementptr inbounds double*, double** %496, i64 %492, !dbg !5608
  %498 = load double*, double** %497, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5686
  %499 = getelementptr inbounds double, double* %498, i64 %491, !dbg !5608
  %500 = load double, double* %499, align 8, !dbg !5608, !tbaa !1662, !invariant.group !5687
  %501 = fmul fast double %476, %500, !dbg !5608
  %502 = load double, double* %"'de247", align 8, !dbg !5608
  %503 = fadd fast double %502, %501, !dbg !5608
  store double %503, double* %"'de247", align 8, !dbg !5608
  %504 = load double, double* %"'de248", align 8, !dbg !5608
  %505 = fadd fast double %504, %476, !dbg !5608
  store double %505, double* %"'de248", align 8, !dbg !5608
  %506 = load double, double* %"'de247", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de247", align 8, !dbg !5608
  %507 = load i64, i64* %"iv1'ac", align 8, !dbg !5608
  %508 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %sext_unwrap250 = shl i64 %arraysize, 32, !dbg !5608
  %_unwrap251 = ashr exact i64 %sext_unwrap250, 32, !dbg !5608
  %indvars.iv217_unwrap252 = add nsw i64 %_unwrap251, -1, !dbg !5608
  %_unwrap253 = sext i32 %61 to i64, !dbg !5608
  %_unwrap254 = mul nsw i64 %indvars.iv217_unwrap252, %_unwrap253, !dbg !5608
  %_unwrap255 = sub i64 0, %_unwrap253, !dbg !5608
  %_unwrap256 = mul i64 %_unwrap255, %508, !dbg !5608
  %_unwrap257 = add i64 %_unwrap254, %_unwrap256, !dbg !5608
  %_unwrap258 = add nsw i64 %507, %_unwrap257, !dbg !5608
  %"'ipg249_unwrap" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %_unwrap258, !dbg !5608
  %509 = load double, double* %"'ipg249_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %510 = fadd fast double %509, %506, !dbg !5608
  store double %510, double* %"'ipg249_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %511 = load double, double* %"'de239", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de239", align 8, !dbg !5608
  %512 = load i64, i64* %"iv1'ac", align 8, !dbg !5608
  %513 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %"'ipg259_unwrap" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %512, !dbg !5608
  %514 = load double, double* %"'ipg259_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5673, !noalias !5676
  %515 = fadd fast double %514, %511, !dbg !5608
  store double %515, double* %"'ipg259_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5673, !noalias !5676
  %516 = load i64, i64* %"iv1'ac", align 8, !dbg !5608
  %517 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %"'ipg261_unwrap" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %516, !dbg !5608
  %518 = load double, double* %"'ipg261_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  store double 0.000000e+00, double* %"'ipg261_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  %519 = load double, double* %"'de262", align 8, !dbg !5608
  %520 = fadd fast double %519, %518, !dbg !5608
  store double %520, double* %"'de262", align 8, !dbg !5608
  %521 = load double, double* %"'de262", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de262", align 8, !dbg !5608
  %522 = load i64, i64* %"iv1'ac", align 8, !dbg !5608
  %523 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %524 = add nuw i64 %_unwrap232, 1, !dbg !5608
  %525 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %526 = add nuw i64 %_unwrap238, 1, !dbg !5608
  %527 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 11, !dbg !5608
  %528 = getelementptr inbounds double*, double** %527, i64 %523, !dbg !5608
  %529 = load double*, double** %528, align 8, !dbg !5608, !dereferenceable !3229, !invariant.group !5688
  %530 = getelementptr inbounds double, double* %529, i64 %522, !dbg !5608
  %531 = load double, double* %530, align 8, !dbg !5608, !tbaa !1662, !invariant.group !5689
  %532 = fmul fast double %521, %531, !dbg !5608
  %533 = load double, double* %"'de204", align 8, !dbg !5608
  %534 = fadd fast double %533, %532, !dbg !5608
  store double %534, double* %"'de204", align 8, !dbg !5608
  %535 = load i64, i64* %"iv1'ac", align 8, !dbg !5608
  %536 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %537 = icmp ne i64 %536, 0, !dbg !5608
  br i1 %537, label %invert.preheader_phirc, label %invert.preheader_phirc280, !dbg !5608

invert.preheader_phirc:                           ; preds = %invert.preheader
  %538 = sub nuw i64 %536, 1
  %arraysize_unwrap372 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3
  %sext_unwrap275 = shl i64 %arraysize_unwrap372, 32
  %_unwrap276 = ashr exact i64 %sext_unwrap275, 32
  %_unwrap277 = add i64 %_unwrap276, -1
  %_unwrap278 = add nsw i64 %_unwrap276, -1
  %539 = call i64 @llvm.smin.i64(i64 %_unwrap278, i64 1), !dbg !5608
  %_unwrap279 = sub i64 %_unwrap277, %539
  %540 = add nuw i64 %_unwrap279, 1
  %541 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 14
  %542 = getelementptr inbounds double, double* %541, i64 %538
  %543 = load double, double* %542, align 8, !dbg !5608, !tbaa !1662, !invariant.group !5690
  br label %invert.preheader_phimerge

invert.preheader_phirc280:                        ; preds = %invert.preheader
  %_unwrap367 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 9, !dbg !5608
  br label %invert.preheader_phimerge

invert.preheader_phimerge:                        ; preds = %invert.preheader_phirc280, %invert.preheader_phirc
  %544 = phi fast double [ %543, %invert.preheader_phirc ], [ %_unwrap367, %invert.preheader_phirc280 ], !dbg !5608
  %545 = fmul fast double %521, %544, !dbg !5608
  %546 = load double, double* %"'de281", align 8, !dbg !5608
  %547 = fadd fast double %546, %545, !dbg !5608
  store double %547, double* %"'de281", align 8, !dbg !5608
  %548 = load double, double* %"'de282", align 8, !dbg !5608
  %549 = fadd fast double %548, %521, !dbg !5608
  store double %549, double* %"'de282", align 8, !dbg !5608
  %550 = load double, double* %"'de282", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de282", align 8, !dbg !5608
  %551 = load double, double* %"'ipg261_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %552 = fadd fast double %551, %550, !dbg !5608
  store double %552, double* %"'ipg261_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %553 = load double, double* %"'de281", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de281", align 8, !dbg !5608
  %554 = load double, double* %"'ipg249_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %555 = fadd fast double %554, %553, !dbg !5608
  store double %555, double* %"'ipg249_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %556 = load double, double* %"'de248", align 8
  store double 0.000000e+00, double* %"'de248", align 8
  %557 = load i64, i64* %"iv1'ac", align 8
  %558 = icmp eq i64 %557, 0
  %559 = xor i1 %558, true
  %560 = select fast i1 %559, double %556, double 0.000000e+00
  %561 = load double, double* %"'de219", align 8
  %562 = fadd fast double %561, %556
  %563 = select fast i1 %558, double %561, double %562
  store double %563, double* %"'de219", align 8
  br i1 %558, label %invert.preheader.preheader, label %incinvert.preheader

incinvert.preheader:                              ; preds = %invert.preheader_phimerge
  %564 = load i64, i64* %"iv1'ac", align 8
  %565 = add nsw i64 %564, -1
  store i64 %565, i64* %"iv1'ac", align 8
  br label %invert.preheader

invert13:                                         ; preds = %mergeinvert.preheader.preheader_.thread.loopexit, %incinvert.preheader.preheader
  %566 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %sext_unwrap288 = shl i64 %arraysize, 32, !dbg !5608
  %_unwrap289 = ashr exact i64 %sext_unwrap288, 32, !dbg !5608
  %indvars.iv217_unwrap290 = add nsw i64 %_unwrap289, -1, !dbg !5608
  %_unwrap291 = mul nsw i64 %566, -1, !dbg !5608
  %_unwrap292 = add i64 %indvars.iv217_unwrap290, %_unwrap291, !dbg !5608
  %_unwrap293 = add nsw i64 %_unwrap292, -1, !dbg !5608
  %"'ipg287_unwrap" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %_unwrap293, !dbg !5608
  %567 = load double, double* %"'ipg287_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  store double 0.000000e+00, double* %"'ipg287_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  %568 = load double, double* %"'de214", align 8, !dbg !5608
  %569 = fadd fast double %568, %567, !dbg !5608
  store double %569, double* %"'de214", align 8, !dbg !5608
  %570 = load double, double* %"'de214", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de214", align 8, !dbg !5608
  %571 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %arraysize_unwrap373 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5608
  %sext_unwrap299 = shl i64 %arraysize_unwrap373, 32, !dbg !5608
  %_unwrap300 = ashr exact i64 %sext_unwrap299, 32, !dbg !5608
  %_unwrap301 = add i64 %_unwrap300, -1, !dbg !5608
  %_unwrap302 = add nsw i64 %_unwrap300, -1, !dbg !5608
  %572 = call i64 @llvm.smin.i64(i64 %_unwrap302, i64 1), !dbg !5608
  %_unwrap303 = sub i64 %_unwrap301, %572, !dbg !5608
  %573 = add nuw i64 %_unwrap303, 1, !dbg !5608
  %574 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 15, !dbg !5608
  %575 = getelementptr inbounds double, double* %574, i64 %571, !dbg !5608
  %576 = load double, double* %575, align 8, !dbg !5608, !tbaa !1662, !invariant.group !5691
  %577 = fmul fast double %570, %576, !dbg !5608
  %578 = load double, double* %"'de205", align 8, !dbg !5608
  %579 = fadd fast double %578, %577, !dbg !5608
  store double %579, double* %"'de205", align 8, !dbg !5608
  %580 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %581 = add nuw i64 %_unwrap303, 1, !dbg !5608
  %582 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 14, !dbg !5608
  %583 = getelementptr inbounds double, double* %582, i64 %580, !dbg !5608
  %584 = load double, double* %583, align 8, !dbg !5608, !tbaa !1662, !invariant.group !5690
  %585 = fmul fast double %570, %584, !dbg !5608
  %586 = load double, double* %"'de304", align 8, !dbg !5608
  %587 = fadd fast double %586, %585, !dbg !5608
  store double %587, double* %"'de304", align 8, !dbg !5608
  %588 = load double, double* %"'de305", align 8, !dbg !5608
  %589 = fadd fast double %588, %570, !dbg !5608
  store double %589, double* %"'de305", align 8, !dbg !5608
  %590 = load double, double* %"'de305", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de305", align 8, !dbg !5608
  %591 = load double, double* %"'ipg287_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %592 = fadd fast double %591, %590, !dbg !5608
  store double %592, double* %"'ipg287_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %593 = load double, double* %"'de304", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de304", align 8, !dbg !5608
  %594 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %_unwrap309 = sext i32 %61 to i64, !dbg !5608
  %_unwrap310 = mul nsw i64 %_unwrap293, %_unwrap309, !dbg !5608
  %_unwrap311 = add nsw i64 %_unwrap310, %_unwrap293, !dbg !5608
  %"'ipg308_unwrap" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %_unwrap311, !dbg !5608
  %595 = load double, double* %"'ipg308_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %596 = fadd fast double %595, %593, !dbg !5608
  store double %596, double* %"'ipg308_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5668, !noalias !5671
  %597 = load double, double* %"'de205", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de205", align 8, !dbg !5608
  %598 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %"'ipg313_unwrap" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %_unwrap293, !dbg !5608
  %599 = load double, double* %"'ipg313_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5673, !noalias !5676
  %600 = fadd fast double %599, %597, !dbg !5608
  store double %600, double* %"'ipg313_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5673, !noalias !5676
  %601 = load i64, i64* %"iv'ac", align 8, !dbg !5608
  %_unwrap316 = mul nsw i64 %601, -1, !dbg !5608
  %_unwrap317 = add i64 %indvars.iv217_unwrap290, %_unwrap316, !dbg !5608
  %"scevgep'ipg_unwrap" = getelementptr double, double* %"arrayptr50172'il_phi", i64 %_unwrap317, !dbg !5608
  %602 = load double, double* %"scevgep'ipg_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  store double 0.000000e+00, double* %"scevgep'ipg_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5663
  %603 = load double, double* %"'de318", align 8, !dbg !5608
  %604 = fadd fast double %603, %602, !dbg !5608
  store double %604, double* %"'de318", align 8, !dbg !5608
  %605 = load double, double* %"'de318", align 8, !dbg !5608
  store double 0.000000e+00, double* %"'de318", align 8, !dbg !5608
  %606 = load double, double* %"'de219", align 8, !dbg !5608
  %607 = fadd fast double %606, %605, !dbg !5608
  store double %607, double* %"'de219", align 8, !dbg !5608
  %608 = load double, double* %".pre'de", align 8, !dbg !5608
  %609 = fadd fast double %608, %605, !dbg !5608
  store double %609, double* %".pre'de", align 8, !dbg !5608
  %610 = load double, double* %".pre'de", align 8, !dbg !5608
  store double 0.000000e+00, double* %".pre'de", align 8, !dbg !5608
  %611 = load double, double* %"scevgep'ipg_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %612 = fadd fast double %611, %610, !dbg !5608
  store double %612, double* %"scevgep'ipg_unwrap", align 8, !dbg !5608, !tbaa !1662, !alias.scope !5660, !noalias !5667
  %613 = load i64, i64* %"iv'ac", align 8
  %_unwrap320 = add nuw i64 %arraysize, 4294967295
  %_unwrap321 = and i64 %_unwrap320, 4294967295
  %_unwrap322 = add nsw i64 %_unwrap321, -1
  %_unwrap323 = mul nsw i64 %613, -1
  %_unwrap324 = add i64 %_unwrap322, %_unwrap323
  br label %mergeinvert.preheader_

mergeinvert.preheader_:                           ; preds = %invert13
  store i64 %_unwrap324, i64* %"iv1'ac", align 8
  br label %invert.preheader

invertdsymv_64_.exit.loopexit:                    ; preds = %invertdsymv_64_.exit
  %_unwrap325 = and i64 %arraysize, 4294967295
  %_unwrap326 = add nsw i64 %_unwrap325, -1
  br label %mergeinvert7_dsymv_64_.exit.loopexit

mergeinvert7_dsymv_64_.exit.loopexit:             ; preds = %invertdsymv_64_.exit.loopexit
  store i64 %_unwrap326, i64* %"iv3'ac", align 8
  br label %invert10

invertdsymv_64_.exit:                             ; preds = %dsymv_64_.exit
  %614 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %2, {} addrspace(10)* %"'1", {} addrspace(10)* %3, {} addrspace(10)* %"'2"), !dbg !5608
  %615 = load i8, i8* %_cache327, align 1, !invariant.group !5622
  switch i8 %615, label %invertdsymv_64_.exit.loopexit [
    i8 0, label %invert5
    i8 1, label %invert11
    i8 2, label %invert.thread
  ]
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_gemv__1996({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", i32 zeroext "enzyme_inactive" %1, {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %3, {} addrspace(10)* align 16 %"'2", { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg) unnamed_addr #62 !dbg !5477 {
top:
  %_cache = alloca i8, align 1
  %value_phi67_cache = alloca i32, align 4
  %_cache41 = alloca i1, align 1
  %4 = call {}*** @julia.get_pgcstack() #65
  %arraysize = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 6, !dbg !5478
  br i1 true, label %L28, label %L22, !dbg !5480

L22:                                              ; preds = %top
  unreachable

L28:                                              ; preds = %top
  br i1 true, label %L38, label %L32, !dbg !5481

L32:                                              ; preds = %L28
  unreachable

L38:                                              ; preds = %L28
  %.not184 = icmp eq i64 %arraysize, 0, !dbg !5482
  store i8 0, i8* %_cache, align 1, !dbg !5483, !invariant.group !5484
  br i1 %.not184, label %common.ret, label %L41, !dbg !5483

common.ret:                                       ; preds = %L182.critedge, %L152.critedge, %L49.L61_crit_edge, %L38
  br label %invertcommon.ret, !dbg !5485

L41:                                              ; preds = %L38
  %.not185 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 7, !dbg !5486
  br i1 %.not185, label %L49.L61_crit_edge, label %L112, !dbg !5486

L49.L61_crit_edge:                                ; preds = %L41
  %"'ipc" = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !5487
  %"'ipc36" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc" to i8 addrspace(13)* addrspace(11)*, !dbg !5487
  %"arrayptr189.pre257'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc36", align 16, !dbg !5487, !tbaa !382, !alias.scope !5490, !noalias !5493
  %5 = shl nuw i64 %arraysize, 3, !dbg !5495
  store i8 1, i8* %_cache, align 1, !dbg !5485, !invariant.group !5484
  br label %common.ret, !dbg !5485

L112:                                             ; preds = %L41
  store i1 false, i1* %_cache41, align 1, !dbg !5496, !invariant.group !5498
  switch i32 %1, label %L228 [
    i32 1409286144, label %L152.critedge
    i32 1308622848, label %L152.critedge
    i32 1124073472, label %L152.critedge
    i32 1392508928, label %L182.critedge
    i32 1929379840, label %L182.critedge.fold.split
    i32 1207959552, label %L219.critedge
    i32 1744830464, label %L219.critedge.fold.split
  ], !dbg !5496

L152.critedge:                                    ; preds = %L112, %L112, %L112
  %tapeArg39 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 0, !dbg !5499
  %6 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 1, !dbg !5499
  %"'ip_phi" = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 2, !dbg !5499
  store i8 2, i8* %_cache, align 1, !invariant.group !5484
  br label %common.ret

L182.critedge.fold.split:                         ; preds = %L112
  store i1 true, i1* %_cache41, align 1, !dbg !5500, !invariant.group !5498
  br label %L182.critedge, !dbg !5500

L182.critedge:                                    ; preds = %L182.critedge.fold.split, %L112
  %value_phi67 = phi i32 [ 1275068416, %L182.critedge.fold.split ], [ 1426063360, %L112 ], !dbg !5500
  %tapeArg40 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 3, !dbg !5500
  %7 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 4, !dbg !5500
  %"'ip_phi3" = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 5, !dbg !5500
  store i8 3, i8* %_cache, align 1, !invariant.group !5484
  store i32 %value_phi67, i32* %value_phi67_cache, align 4, !invariant.group !5501
  br label %common.ret

L219.critedge.fold.split:                         ; preds = %L112
  unreachable

L219.critedge:                                    ; preds = %L112
  unreachable

L228:                                             ; preds = %L112
  unreachable

inverttop:                                        ; preds = %invertL28
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL28:                                        ; preds = %invertL38
  br label %inverttop

invertL38:                                        ; preds = %invertL41, %invertcommon.ret
  br label %invertL28

invertcommon.ret:                                 ; preds = %common.ret
  %8 = load i8, i8* %_cache, align 1, !invariant.group !5484
  switch i8 %8, label %invertL182.critedge [
    i8 0, label %invertL38
    i8 1, label %invertL49.L61_crit_edge
    i8 2, label %invertL152.critedge
  ]

invertL41:                                        ; preds = %invertL112, %invertL49.L61_crit_edge
  br label %invertL38

invertL49.L61_crit_edge:                          ; preds = %invertcommon.ret
  %_unwrap = shl nuw i64 %arraysize, 3, !dbg !5487
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !5487
  %"'ipc36_unwrap" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc_unwrap" to i8 addrspace(13)* addrspace(11)*, !dbg !5487
  %"arrayptr189.pre257'il_phi_unwrap" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc36_unwrap", align 16, !dbg !5487, !tbaa !382, !alias.scope !5490, !noalias !5493
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %"arrayptr189.pre257'il_phi_unwrap", i8 0, i64 %_unwrap, i1 false) #65, !dbg !5487, !tbaa !268, !noalias !5027
  br label %invertL41

invertL112:                                       ; preds = %invertL182.critedge, %invertL182.critedge.fold.split, %invertL152.critedge
  br label %invertL41

invertL152.critedge:                              ; preds = %invertcommon.ret
  %tapeArg39_unwrap = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 0, !dbg !5499
  call fastcc void @diffejulia_gemv__2037(i32 zeroext %1, {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %3, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg39_unwrap), !dbg !5499
  br label %invertL112

invertL182.critedge.fold.split:                   ; preds = %invertL182.critedge
  br label %invertL112

invertL182.critedge:                              ; preds = %invertcommon.ret
  %9 = load i32, i32* %value_phi67_cache, align 4, !dbg !5500, !invariant.group !5501
  %tapeArg40_unwrap = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 3, !dbg !5500
  call fastcc void @diffejulia_symv__2026(i32 zeroext %9, {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %3, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg40_unwrap), !dbg !5500
  %10 = load i1, i1* %_cache41, align 1, !invariant.group !5498
  br i1 %10, label %invertL182.critedge.fold.split, label %invertL112
}

; Function Attrs: mustprogress willreturn
define internal fastcc { double addrspace(13)* addrspace(10)*, i64, i64 } @augmented_julia_copyto_unaliased__1986.177({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) "enzyme_sret" %0, [1 x {} addrspace(10)*]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) "enzyme_inactive" "enzymejl_returnRoots" %1, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(40) %2, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'", {} addrspace(10)* nocapture noundef nonnull readonly align 16 dereferenceable(40) %3, {} addrspace(10)* nocapture align 16 %"'1") unnamed_addr #56 !dbg !5802 {
top:
  %4 = alloca { double addrspace(13)* addrspace(10)*, i64, i64 }, align 8
  %5 = getelementptr { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 }* %4, i64 0, i32 0
  %6 = bitcast double addrspace(13)* addrspace(10)** %5 to {} addrspace(10)**
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %"iv'ac" = alloca i64, align 8
  %7 = call {}*** @julia.get_pgcstack() #65
  %ptls_field29 = getelementptr inbounds {}**, {}*** %7, i64 2
  %8 = bitcast {}*** %ptls_field29 to i64***
  %ptls_load3031 = load i64**, i64*** %8, align 8, !tbaa !68, !alias.scope !5803, !noalias !5806
  %9 = getelementptr inbounds i64*, i64** %ptls_load3031, i64 2
  %safepoint = load i64*, i64** %9, align 8, !tbaa !72, !invariant.load !67, !alias.scope !5808, !noalias !5811
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #65, !dbg !5813
  fence syncscope("singlethread") seq_cst
  %10 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5814
  %11 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %10 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5814
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %11, i64 0, i32 1, !dbg !5814
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5814, !tbaa !315, !range !86, !alias.scope !5817, !noalias !5820
  %12 = getelementptr inbounds { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 }* %4, i32 0, i32 1, !dbg !5822
  store i64 %arraylen, i64* %12, align 8, !dbg !5822
  %.not = icmp eq i64 %arraylen, 0, !dbg !5822
  br i1 %.not, label %L4, label %L5, !dbg !5816

common.ret:                                       ; preds = %L82, %L4
  %13 = load { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 }* %4, align 8, !dbg !5823
  ret { double addrspace(13)* addrspace(10)*, i64, i64 } %13, !dbg !5823

L4:                                               ; preds = %top
  %14 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 0, !dbg !5816
  %15 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %14, align 8, !dbg !5816, !alias.scope !5824, !noalias !5827
  %16 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %1, i64 0, i64 0, !dbg !5816
  store {} addrspace(10)* %15, {} addrspace(10)** %16, align 8, !dbg !5816, !noalias !5829
  %17 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %0 to i8*, !dbg !5816
  %18 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !5816
  call void @llvm.memcpy.p0i8.p11i8.i64(i8* nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) %17, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %18, i64 noundef 40, i1 noundef false) #65, !dbg !5816, !noalias !5829
  br label %common.ret

L5:                                               ; preds = %top
  %19 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 1, i32 0, i64 0, i64 0, !dbg !5832
  %unbox = load i64, i64 addrspace(11)* %19, align 8, !dbg !5842, !tbaa !72, !invariant.load !67, !alias.scope !5847, !noalias !5848
  %20 = icmp slt i64 %unbox, 1, !dbg !5849
  %21 = call i64 @llvm.smax.i64(i64 %unbox, i64 noundef 0) #65, !dbg !5851
  %22 = add nsw i64 %arraylen, -1, !dbg !5852
  %23 = icmp uge i64 %22, %21, !dbg !5849
  %24 = or i1 %20, %23, !dbg !5841
  br i1 %24, label %L85, label %L31.L44_crit_edge, !dbg !5841

L31.L44_crit_edge:                                ; preds = %L5
  %".phi.trans.insert'ipc" = bitcast {} addrspace(10)* %"'1" to double addrspace(13)* addrspace(10)*
  %.phi.trans.insert = bitcast {} addrspace(10)* %3 to double addrspace(13)* addrspace(10)*
  %".phi.trans.insert42'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert'ipc" to double addrspace(13)* addrspace(11)*
  %.phi.trans.insert42 = addrspacecast double addrspace(13)* addrspace(10)* %.phi.trans.insert to double addrspace(13)* addrspace(11)*
  %"arrayptr33.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert42'ipc", align 16, !dbg !5853, !tbaa !382, !alias.scope !5855, !noalias !5858
  %arrayptr33.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert42, align 16, !dbg !5853, !tbaa !382, !alias.scope !5859, !noalias !5820
  %".phi.trans.insert43'ipc" = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %"'" to double addrspace(13)* addrspace(10)* addrspace(11)*
  %.phi.trans.insert43 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to double addrspace(13)* addrspace(10)* addrspace(11)*
  %"getfield3436.pre'ipl" = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %".phi.trans.insert43'ipc" unordered, align 8, !dbg !5860, !tbaa !72, !alias.scope !5862, !noalias !5863
  %25 = getelementptr inbounds { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 }* %4, i32 0, i32 0, !dbg !5860
  store double addrspace(13)* addrspace(10)* %"getfield3436.pre'ipl", double addrspace(13)* addrspace(10)** %25, align 8, !dbg !5860
  %getfield3436.pre = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %.phi.trans.insert43 unordered, align 8, !dbg !5860, !tbaa !72, !invariant.load !67, !alias.scope !5847, !noalias !5848
  %.phi.trans.insert44 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 2
  %unbox17.pre = load i64, i64 addrspace(11)* %.phi.trans.insert44, align 8, !dbg !5864, !tbaa !72, !invariant.load !67, !alias.scope !5847, !noalias !5848
  %26 = getelementptr inbounds { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 }* %4, i32 0, i32 2
  store i64 %unbox17.pre, i64* %26, align 8
  %".phi.trans.insert45'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %"getfield3436.pre'ipl" to double addrspace(13)* addrspace(11)*
  %.phi.trans.insert45 = addrspacecast double addrspace(13)* addrspace(10)* %getfield3436.pre to double addrspace(13)* addrspace(11)*
  %"arrayptr1935.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert45'ipc", align 8, !dbg !5865, !tbaa !72, !alias.scope !5866, !noalias !5869
  %arrayptr1935.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert45, align 8, !dbg !5865, !tbaa !72, !invariant.load !67, !alias.scope !5871, !noalias !5872
  br label %L44, !dbg !5873

L44:                                              ; preds = %L44, %L31.L44_crit_edge
  %iv = phi i64 [ %iv.next, %L44 ], [ 0, %L31.L44_crit_edge ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5853
  %27 = add nsw i64 %iv.next, -1, !dbg !5853
  %28 = getelementptr inbounds double, double addrspace(13)* %arrayptr33.pre, i64 %27, !dbg !5853
  %arrayref = load double, double addrspace(13)* %28, align 8, !dbg !5853, !tbaa !268, !alias.scope !5874, !noalias !5877
  %29 = add i64 %27, %unbox17.pre, !dbg !5865
  %30 = getelementptr inbounds double, double addrspace(13)* %arrayptr1935.pre, i64 %29, !dbg !5865
  store double %arrayref, double addrspace(13)* %30, align 8, !dbg !5865, !tbaa !268, !alias.scope !5879, !noalias !5882
  %.not37 = icmp eq i64 %iv.next, %arraylen, !dbg !5884
  br i1 %.not37, label %L82, label %L44, !dbg !5887

L82:                                              ; preds = %L44
  %31 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 0, !dbg !5888
  %32 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %31, align 8, !dbg !5888, !alias.scope !5824, !noalias !5827
  %33 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %1, i64 0, i64 0, !dbg !5888
  store {} addrspace(10)* %32, {} addrspace(10)** %33, align 8, !dbg !5888, !noalias !5829
  %34 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %0 to i8*, !dbg !5888
  %35 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !5888
  call void @llvm.memcpy.p0i8.p11i8.i64(i8* nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) %34, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %35, i64 noundef 40, i1 noundef false) #65, !dbg !5888, !noalias !5829
  br label %common.ret

L85:                                              ; preds = %L5
  %current_task2438 = getelementptr inbounds {}**, {}*** %7, i64 -14, !dbg !5841
  %current_task24 = bitcast {}*** %current_task2438 to {}**, !dbg !5841
  %box = call noalias nonnull dereferenceable(40) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 noundef 40, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5301231888 to {}*) to {} addrspace(10)*)) #66, !dbg !5841
  %36 = bitcast {} addrspace(10)* %box to i8 addrspace(10)*, !dbg !5841
  %37 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !5841
  call void @llvm.memcpy.p10i8.p11i8.i64(i8 addrspace(10)* nocapture nofree noundef nonnull align 8 dereferenceable(40) %36, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %37, i64 noundef 40, i1 noundef false) #65, !dbg !5841, !tbaa !85, !alias.scope !304, !noalias !5889
  %box26 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4769681168 to {}*) to {} addrspace(10)*)) #66, !dbg !5841
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box26 to i64 addrspace(10)*, !dbg !5841
  store i64 %arraylen, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !5841, !tbaa !112, !alias.scope !116, !noalias !5890
  %38 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4756495008 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4795339392 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* nonnull %box26) #67, !dbg !5841
  %39 = addrspacecast {} addrspace(10)* %38 to {} addrspace(12)*, !dbg !5841
  call void @ijl_throw({} addrspace(12)* %39) #68, !dbg !5841
  unreachable, !dbg !5841
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_copyto_unaliased__1986.178({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree writeonly align 8 dereferenceable(40) "enzyme_sret" %0, [1 x {} addrspace(10)*]* noalias nocapture nofree writeonly align 8 dereferenceable(8) "enzyme_inactive" "enzymejl_returnRoots" %1, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree readonly align 8 dereferenceable(40) %2, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'", {} addrspace(10)* nocapture readonly align 16 dereferenceable(40) %3, {} addrspace(10)* nocapture align 16 %"'1", { double addrspace(13)* addrspace(10)*, i64, i64 } %tapeArg) unnamed_addr #56 !dbg !5891 {
top:
  %"iv'ac" = alloca i64, align 8
  %"arrayref'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %5 = call {}*** @julia.get_pgcstack() #65
  %arraylen = extractvalue { double addrspace(13)* addrspace(10)*, i64, i64 } %tapeArg, 1, !dbg !5892
  %.not = icmp eq i64 %arraylen, 0, !dbg !5892
  br i1 %.not, label %L4, label %L5, !dbg !5894

common.ret:                                       ; preds = %L82, %L4
  br label %invertcommon.ret, !dbg !5895

L4:                                               ; preds = %top
  br label %common.ret

L5:                                               ; preds = %top
  %6 = add nsw i64 %arraylen, -1, !dbg !5896
  br i1 false, label %L85, label %L31.L44_crit_edge, !dbg !5899

L31.L44_crit_edge:                                ; preds = %L5
  %".phi.trans.insert'ipc" = bitcast {} addrspace(10)* %"'1" to double addrspace(13)* addrspace(10)*
  %".phi.trans.insert42'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr33.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert42'ipc", align 16, !dbg !5900, !tbaa !382, !alias.scope !5902, !noalias !5905, !invariant.group !5907
  %"getfield3436.pre'il_phi" = extractvalue { double addrspace(13)* addrspace(10)*, i64, i64 } %tapeArg, 0, !dbg !5908
  %unbox17.pre = extractvalue { double addrspace(13)* addrspace(10)*, i64, i64 } %tapeArg, 2
  %".phi.trans.insert45'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %"getfield3436.pre'il_phi" to double addrspace(13)* addrspace(11)*
  %"arrayptr1935.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert45'ipc", align 8, !dbg !5910, !tbaa !72, !alias.scope !5911, !noalias !5914, !invariant.group !5916
  br label %L44, !dbg !5917

L44:                                              ; preds = %L44, %L31.L44_crit_edge
  %iv = phi i64 [ %iv.next, %L44 ], [ 0, %L31.L44_crit_edge ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5900
  %7 = add nsw i64 %iv.next, -1, !dbg !5900
  %"'ipg19" = getelementptr inbounds double, double addrspace(13)* %"arrayptr33.pre'ipl", i64 %7, !dbg !5900
  %8 = add i64 %7, %unbox17.pre, !dbg !5910
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr1935.pre'ipl", i64 %8, !dbg !5910
  %.not37 = icmp eq i64 %iv.next, %arraylen, !dbg !5918
  br i1 %.not37, label %L82, label %L44, !dbg !5921

L82:                                              ; preds = %L44
  br label %common.ret

L85:                                              ; preds = %L5
  unreachable

inverttop:                                        ; preds = %invertL5, %invertL4
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertcommon.ret:                                 ; preds = %common.ret
  br i1 %.not, label %invertL4, label %invertL82

invertL4:                                         ; preds = %invertcommon.ret
  br label %inverttop

invertL5:                                         ; preds = %invertL31.L44_crit_edge
  br label %inverttop

invertL31.L44_crit_edge:                          ; preds = %invertL44
  br label %invertL5

invertL44:                                        ; preds = %mergeinvertL44_L82, %incinvertL44
  %9 = load i64, i64* %"iv'ac", align 8, !dbg !5910
  %"getfield3436.pre'il_phi_unwrap" = extractvalue { double addrspace(13)* addrspace(10)*, i64, i64 } %tapeArg, 0, !dbg !5910
  %".phi.trans.insert45'ipc_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"getfield3436.pre'il_phi_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !5910
  %"arrayptr1935.pre'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert45'ipc_unwrap", align 8, !dbg !5910, !tbaa !72, !alias.scope !5911, !noalias !5914, !invariant.group !5916
  %iv.next_unwrap = add nuw nsw i64 %9, 1, !dbg !5910
  %_unwrap = add nsw i64 %iv.next_unwrap, -1, !dbg !5910
  %unbox17.pre_unwrap = extractvalue { double addrspace(13)* addrspace(10)*, i64, i64 } %tapeArg, 2, !dbg !5922
  %_unwrap17 = add i64 %_unwrap, %unbox17.pre_unwrap, !dbg !5910
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr1935.pre'ipl_unwrap", i64 %_unwrap17, !dbg !5910
  %10 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !5910, !tbaa !268, !alias.scope !5923, !noalias !5926
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !5910, !tbaa !268, !alias.scope !5923, !noalias !5926
  %11 = load double, double* %"arrayref'de", align 8, !dbg !5910
  %12 = fadd fast double %11, %10, !dbg !5910
  store double %12, double* %"arrayref'de", align 8, !dbg !5910
  %13 = load double, double* %"arrayref'de", align 8, !dbg !5900
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !5900
  %14 = load i64, i64* %"iv'ac", align 8, !dbg !5900
  %".phi.trans.insert'ipc_unwrap" = bitcast {} addrspace(10)* %"'1" to double addrspace(13)* addrspace(10)*, !dbg !5900
  %".phi.trans.insert42'ipc_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !5900
  %"arrayptr33.pre'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert42'ipc_unwrap", align 16, !dbg !5900, !tbaa !382, !alias.scope !5902, !noalias !5905, !invariant.group !5907
  %"'ipg19_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr33.pre'ipl_unwrap", i64 %_unwrap, !dbg !5900
  %15 = load double, double addrspace(13)* %"'ipg19_unwrap", align 8, !dbg !5900, !tbaa !268, !alias.scope !5928, !noalias !5931
  %16 = fadd fast double %15, %13, !dbg !5900
  store double %16, double addrspace(13)* %"'ipg19_unwrap", align 8, !dbg !5900, !tbaa !268, !alias.scope !5928, !noalias !5931
  %17 = load i64, i64* %"iv'ac", align 8
  %18 = icmp eq i64 %17, 0
  %19 = xor i1 %18, true
  br i1 %18, label %invertL31.L44_crit_edge, label %incinvertL44

incinvertL44:                                     ; preds = %invertL44
  %20 = load i64, i64* %"iv'ac", align 8
  %21 = add nsw i64 %20, -1
  store i64 %21, i64* %"iv'ac", align 8
  br label %invertL44

invertL82:                                        ; preds = %invertcommon.ret
  %_unwrap26 = add nsw i64 %arraylen, -1
  br label %mergeinvertL44_L82

mergeinvertL44_L82:                               ; preds = %invertL82
  store i64 %_unwrap26, i64* %"iv'ac", align 8
  br label %invertL44
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia___2046({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1) unnamed_addr #65 !dbg !6063 {
top:
  %2 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) i8* @malloc(i64 8), !enzyme_fromstack !3229
  %newstruct26 = bitcast i8* %2 to [1 x [1 x i64]]*, !enzyme_caststack !67
  %3 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) i8* @malloc(i64 8), !enzyme_fromstack !3229
  %newstruct86 = bitcast i8* %3 to [1 x [1 x i64]]*, !enzyme_caststack !67
  %4 = call {}*** @julia.get_pgcstack() #66
  %ptls_field105 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field105 to i64***
  %ptls_load106107 = load i64**, i64*** %5, align 8, !tbaa !68
  %6 = getelementptr inbounds i64*, i64** %ptls_load106107, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !72, !invariant.load !67
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #66, !dbg !6064
  fence syncscope("singlethread") seq_cst
  %7 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6065
  %8 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %7 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6065
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %8, i64 0, i32 1, !dbg !6065
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6065, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %9 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6065
  %10 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %9 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6065
  %arraylen_ptr3 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %10, i64 0, i32 1, !dbg !6065
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr3, align 8, !dbg !6065, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not = icmp eq i64 %arraylen, %arraylen4, !dbg !6069
  br i1 %.not, label %L50, label %L15, !dbg !6072

L15:                                              ; preds = %top
  %current_task7108 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !6073
  %current_task7 = bitcast {}*** %current_task7108 to {}**, !dbg !6073
  %box = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task7, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777170208 to {}*) to {} addrspace(10)*)) #67, !dbg !6073
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box to i64 addrspace(10)*, !dbg !6073
  store i64 %arraylen, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !6073, !tbaa !112, !alias.scope !116, !noalias !6074
  %box9 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task7, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777170208 to {}*) to {} addrspace(10)*)) #67, !dbg !6073
  %memcpy_refined_dst11 = bitcast {} addrspace(10)* %box9 to i64 addrspace(10)*, !dbg !6073
  store i64 %arraylen4, i64 addrspace(10)* %memcpy_refined_dst11, align 8, !dbg !6073, !tbaa !112, !alias.scope !116, !noalias !6074
  %11 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4774666128 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4729112992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733824 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733792 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box9, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733760 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336517472 to {}*) to {} addrspace(10)*)) #68, !dbg !6073
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task7, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #67, !dbg !6073
  %12 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !6073
  %13 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %12, i64 0, i64 0, !dbg !6073
  store {} addrspace(10)* %11, {} addrspace(10)* addrspace(10)* %13, align 8, !dbg !6073, !tbaa !112, !alias.scope !116, !noalias !6074
  %14 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !6073
  call void @ijl_throw({} addrspace(12)* %14) #66, !dbg !6073
  unreachable, !dbg !6073

L50:                                              ; preds = %top
  %memcpy_refined_dst28 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct26, i64 0, i64 0, i64 0, !dbg !6077
  store i64 %arraylen, i64* %memcpy_refined_dst28, align 8, !dbg !6077, !tbaa !132, !alias.scope !134, !noalias !6084
  %15 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraylen) #69, !dbg !6085
  %16 = bitcast {} addrspace(10)* %15 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6093
  %17 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %16 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6093
  %arraylen_ptr33 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %17, i64 0, i32 1, !dbg !6093
  %arraylen34 = load i64, i64 addrspace(11)* %arraylen_ptr33, align 8, !dbg !6093, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not111 = icmp eq i64 %arraylen34, %arraylen, !dbg !6097
  br i1 %.not111, label %L96, label %L193, !dbg !6095

L96:                                              ; preds = %L50
  %18 = addrspacecast {} addrspace(10)* %15 to {} addrspace(11)*, !dbg !6101
  %19 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !6101
  %.not112 = icmp eq {} addrspace(11)* %18, %19, !dbg !6101
  br i1 %.not112, label %L112, label %L99, !dbg !6101

L99:                                              ; preds = %L96
  %20 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %18) #70, !dbg !6106
  %21 = bitcast {}* %20 to i8**, !dbg !6106
  %arrayptr78 = load i8*, i8** %21, align 8, !dbg !6106, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %22 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %19) #70, !dbg !6106
  %23 = bitcast {}* %22 to i8**, !dbg !6106
  %arrayptr80 = load i8*, i8** %23, align 8, !dbg !6106, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %.not123.not = icmp eq i8* %arrayptr78, %arrayptr80, !dbg !6111
  br i1 %.not123.not, label %L107, label %L112, !dbg !6110

L107:                                             ; preds = %L99
  %24 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %0) #66, !dbg !6114
  %.phi.trans.insert = bitcast {} addrspace(10)* %24 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert141 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr38.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert141, i64 0, i32 1
  %arraylen39.pre = load i64, i64 addrspace(11)* %arraylen_ptr38.phi.trans.insert, align 8, !dbg !6116, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  br label %L112, !dbg !6120

L112:                                             ; preds = %L107, %L99, %L96
  %arraylen39 = phi i64 [ %arraylen39.pre, %L107 ], [ %arraylen, %L96 ], [ %arraylen, %L99 ], !dbg !6116
  %value_phi37 = phi {} addrspace(10)* [ %24, %L107 ], [ %0, %L96 ], [ %0, %L99 ]
  %.not116 = icmp eq i64 %arraylen39, 1, !dbg !6127
  %25 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !6131
  %.not113 = icmp eq {} addrspace(11)* %18, %25, !dbg !6131
  br i1 %.not113, label %L137, label %L124, !dbg !6131

L124:                                             ; preds = %L112
  %26 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %18) #70, !dbg !6134
  %27 = bitcast {}* %26 to i8**, !dbg !6134
  %arrayptr73 = load i8*, i8** %27, align 8, !dbg !6134, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %28 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %25) #70, !dbg !6134
  %29 = bitcast {}* %28 to i8**, !dbg !6134
  %arrayptr75 = load i8*, i8** %29, align 8, !dbg !6134, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %.not122.not = icmp eq i8* %arrayptr73, %arrayptr75, !dbg !6139
  br i1 %.not122.not, label %L132, label %L137, !dbg !6138

L132:                                             ; preds = %L124
  %30 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %1) #66, !dbg !6142
  %.pre = bitcast {} addrspace(10)* %30 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6144
  %.pre145 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.pre to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6144
  br label %L137, !dbg !6120

L137:                                             ; preds = %L132, %L124, %L112
  %nodecayed..pre-phi146 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %.pre, %L132 ], [ %9, %L112 ], [ %9, %L124 ], !dbg !6144
  %value_phi42 = phi {} addrspace(10)* [ %30, %L132 ], [ %1, %L112 ], [ %1, %L124 ]
  %31 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi146 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6144
  %arraylen_ptr43 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %31, i64 0, i32 1, !dbg !6144
  %arraylen44 = load i64, i64 addrspace(11)* %arraylen_ptr43, align 8, !dbg !6144, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not118 = icmp eq i64 %arraylen44, 1, !dbg !6148
  %.not114 = icmp eq i64 %arraylen, 0, !dbg !6152
  br i1 %.not114, label %L203, label %L187.lr.ph, !dbg !6153

L187.lr.ph:                                       ; preds = %L137
  %32 = bitcast {} addrspace(10)* %value_phi37 to double addrspace(13)* addrspace(10)*
  %33 = addrspacecast double addrspace(13)* addrspace(10)* %32 to double addrspace(13)* addrspace(11)*
  %arrayptr117 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %33, align 8, !tbaa !382, !alias.scope !6155, !noalias !319, !nonnull !67
  %34 = bitcast {} addrspace(10)* %value_phi42 to double addrspace(13)* addrspace(10)*
  %35 = addrspacecast double addrspace(13)* addrspace(10)* %34 to double addrspace(13)* addrspace(11)*
  %arrayptr53119 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %35, align 8, !tbaa !382, !alias.scope !6155, !noalias !319, !nonnull !67
  %36 = bitcast {} addrspace(10)* %15 to double addrspace(13)* addrspace(10)*
  %37 = addrspacecast double addrspace(13)* addrspace(10)* %36 to double addrspace(13)* addrspace(11)*
  %arrayptr56120 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %37, align 8, !tbaa !382, !alias.scope !6155, !noalias !319, !nonnull !67
  br label %L187, !dbg !6156

L187:                                             ; preds = %L187, %L187.lr.ph
  %iv = phi i64 [ %iv.next, %L187 ], [ 0, %L187.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6157
  %38 = select i1 %.not116, i64 0, i64 %iv, !dbg !6157
  %39 = getelementptr inbounds double, double addrspace(13)* %arrayptr117, i64 %38, !dbg !6157
  %arrayref = load double, double addrspace(13)* %39, align 8, !dbg !6157, !tbaa !268, !alias.scope !116, !noalias !270
  %40 = select i1 %.not118, i64 0, i64 %iv, !dbg !6164
  %41 = getelementptr inbounds double, double addrspace(13)* %arrayptr53119, i64 %40, !dbg !6164
  %arrayref54 = load double, double addrspace(13)* %41, align 8, !dbg !6164, !tbaa !268, !alias.scope !116, !noalias !270
  %42 = fsub double %arrayref, %arrayref54, !dbg !6167
  %43 = getelementptr inbounds double, double addrspace(13)* %arrayptr56120, i64 %iv, !dbg !6170
  store double %42, double addrspace(13)* %43, align 8, !dbg !6170, !tbaa !268, !alias.scope !116, !noalias !6074
  %exitcond.not = icmp eq i64 %iv.next, %arraylen, !dbg !6171
  br i1 %exitcond.not, label %L203.loopexit, label %L187, !dbg !6156, !llvm.loop !6172

L193:                                             ; preds = %L50
  %44 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct86, i64 0, i64 0, i64 0, !dbg !6173
  store i64 %arraylen34, i64* %44, align 8, !dbg !6173, !tbaa !132, !alias.scope !134, !noalias !6084
  %45 = addrspacecast [1 x [1 x i64]]* %newstruct86 to [1 x [1 x i64]] addrspace(11)*, !dbg !6095
  %46 = addrspacecast [1 x [1 x i64]]* %newstruct26 to [1 x [1 x i64]] addrspace(11)*, !dbg !6095
  call fastcc void @julia_throwdm_1980([1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %45, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %46) #71, !dbg !6095
  unreachable, !dbg !6095

L203.loopexit:                                    ; preds = %L187
  br label %L203, !dbg !6177

L203:                                             ; preds = %L203.loopexit, %L137
  %arraylen61 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6177, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %arraylen64 = load i64, i64 addrspace(11)* %arraylen_ptr3, align 8, !dbg !6177, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %47 = icmp eq i64 %arraylen64, %arraylen61, !dbg !6183
  %48 = icmp eq i64 %arraylen61, 1, !dbg !6185
  %value_phi66.in = or i1 %48, %47, !dbg !6185
  %49 = icmp eq i64 %arraylen64, 1
  %or.cond = or i1 %49, %value_phi66.in, !dbg !6186
  br i1 %or.cond, label %L235, label %L225, !dbg !6186

L225:                                             ; preds = %L203
  %50 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen61) #69, !dbg !6186
  %51 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen64) #69, !dbg !6186
  %52 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4773853616 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4729112992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4818754768 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %50, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4818754736 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %51) #68, !dbg !6186
  %current_task68121 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !6186
  %current_task68 = bitcast {}*** %current_task68121 to {}**, !dbg !6186
  %box69 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task68, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #67, !dbg !6186
  %53 = bitcast {} addrspace(10)* %box69 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !6186
  %54 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %53, i64 0, i64 0, !dbg !6186
  store {} addrspace(10)* %52, {} addrspace(10)* addrspace(10)* %54, align 8, !dbg !6186, !tbaa !112, !alias.scope !116, !noalias !6074
  %55 = addrspacecast {} addrspace(10)* %box69 to {} addrspace(12)*, !dbg !6186
  call void @ijl_throw({} addrspace(12)* %55) #66, !dbg !6186
  unreachable, !dbg !6186

L235:                                             ; preds = %L203
  ret {} addrspace(10)* %15, !dbg !6083
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2046({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1") unnamed_addr #65 !dbg !6189 {
top:
  %2 = alloca { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %3 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 0
  %4 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i64 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i64 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %"iv'ac" = alloca i64, align 8
  %newstruct86 = alloca [1 x [1 x i64]], i64 1, align 8
  %10 = bitcast [1 x [1 x i64]]* %newstruct86 to i8*
  %newstruct26 = alloca [1 x [1 x i64]], i64 1, align 8
  %11 = bitcast [1 x [1 x i64]]* %newstruct26 to i8*
  %12 = bitcast i8* %11 to [1 x [1 x i64]]*, !enzyme_caststack !67
  %13 = bitcast i8* %10 to [1 x [1 x i64]]*, !enzyme_caststack !67
  %14 = call {}*** @julia.get_pgcstack() #66
  %ptls_field105 = getelementptr inbounds {}**, {}*** %14, i64 2
  %15 = bitcast {}*** %ptls_field105 to i64***
  %ptls_load106107 = load i64**, i64*** %15, align 8, !tbaa !68, !alias.scope !6190, !noalias !6193
  %16 = getelementptr inbounds i64*, i64** %ptls_load106107, i64 2
  %safepoint = load i64*, i64** %16, align 8, !tbaa !72, !invariant.load !67, !alias.scope !6195, !noalias !6198
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #66, !dbg !6200
  fence syncscope("singlethread") seq_cst
  %17 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6201
  %18 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6201
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %18, i64 0, i32 1, !dbg !6201
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6201, !tbaa !315, !range !86, !alias.scope !6205, !noalias !6208
  %19 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 6, !dbg !6201
  store i64 %arraylen, i64* %19, align 8, !dbg !6201
  %20 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6201
  %21 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %20 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6201
  %arraylen_ptr3 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %21, i64 0, i32 1, !dbg !6201
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr3, align 8, !dbg !6201, !tbaa !315, !range !86, !alias.scope !6210, !noalias !6213
  %.not = icmp eq i64 %arraylen, %arraylen4, !dbg !6215
  br i1 %.not, label %L50, label %L15, !dbg !6218

L15:                                              ; preds = %top
  %current_task7108 = getelementptr inbounds {}**, {}*** %14, i64 -14, !dbg !6219
  %current_task7 = bitcast {}*** %current_task7108 to {}**, !dbg !6219
  %box = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task7, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777170208 to {}*) to {} addrspace(10)*)) #67, !dbg !6219
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box to i64 addrspace(10)*, !dbg !6219
  store i64 %arraylen, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !6219, !tbaa !112, !alias.scope !116, !noalias !6220
  %box9 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task7, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777170208 to {}*) to {} addrspace(10)*)) #67, !dbg !6219
  %memcpy_refined_dst11 = bitcast {} addrspace(10)* %box9 to i64 addrspace(10)*, !dbg !6219
  store i64 %arraylen4, i64 addrspace(10)* %memcpy_refined_dst11, align 8, !dbg !6219, !tbaa !112, !alias.scope !116, !noalias !6220
  %22 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4774666128 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4729112992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733824 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733792 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box9, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733760 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336517472 to {}*) to {} addrspace(10)*)) #68, !dbg !6219
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task7, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #67, !dbg !6219
  %23 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !6219
  %24 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %23, i64 0, i64 0, !dbg !6219
  store {} addrspace(10)* %22, {} addrspace(10)* addrspace(10)* %24, align 8, !dbg !6219, !tbaa !112, !alias.scope !116, !noalias !6220
  %25 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !6219
  call void @ijl_throw({} addrspace(12)* %25) #66, !dbg !6219
  unreachable, !dbg !6219

L50:                                              ; preds = %top
  %memcpy_refined_dst28 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %12, i64 0, i64 0, i64 0, !dbg !6223
  store i64 %arraylen, i64* %memcpy_refined_dst28, align 8, !dbg !6223, !tbaa !132, !alias.scope !134, !noalias !6230
  %26 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraylen), !dbg !6231
  %27 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 0, !dbg !6231
  store {} addrspace(10)* %26, {} addrspace(10)** %27, align 8, !dbg !6231
  %28 = mul i64 %arraylen, 8, !dbg !6231
  %29 = bitcast {} addrspace(10)* %26 to i8 addrspace(13)* addrspace(10)*, !dbg !6231
  %30 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %29, align 8, !dbg !6231
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %30, i8 0, i64 %28, i1 false), !dbg !6231
  %31 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraylen) #69, !dbg !6231
  %32 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 1, !dbg !6239
  store {} addrspace(10)* %31, {} addrspace(10)** %32, align 8, !dbg !6239
  %33 = bitcast {} addrspace(10)* %31 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6239
  %34 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %33 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6239
  %arraylen_ptr33 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %34, i64 0, i32 1, !dbg !6239
  %arraylen34 = load i64, i64 addrspace(11)* %arraylen_ptr33, align 8, !dbg !6239, !tbaa !315, !range !86, !alias.scope !6243, !noalias !6246
  %.not111 = icmp eq i64 %arraylen34, %arraylen, !dbg !6248
  br i1 %.not111, label %L96, label %L193, !dbg !6241

L96:                                              ; preds = %L50
  %35 = addrspacecast {} addrspace(10)* %31 to {} addrspace(11)*, !dbg !6252
  %36 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !6252
  %.not112 = icmp eq {} addrspace(11)* %35, %36, !dbg !6252
  br i1 %.not112, label %L112, label %L99, !dbg !6252

L99:                                              ; preds = %L96
  %37 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %35) #70, !dbg !6257
  %38 = bitcast {}* %37 to i8**, !dbg !6257
  %arrayptr78 = load i8*, i8** %38, align 8, !dbg !6257, !tbaa !382, !alias.scope !6243, !noalias !6246, !nonnull !67
  %39 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %36) #70, !dbg !6257
  %40 = bitcast {}* %39 to i8**, !dbg !6257
  %arrayptr80 = load i8*, i8** %40, align 8, !dbg !6257, !tbaa !382, !alias.scope !6205, !noalias !6208, !nonnull !67
  %.not123.not = icmp eq i8* %arrayptr78, %arrayptr80, !dbg !6262
  %41 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 7, !dbg !6261
  store i1 %.not123.not, i1* %41, align 1, !dbg !6261
  br i1 %.not123.not, label %L107, label %L112, !dbg !6261

L107:                                             ; preds = %L99
  %42 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'"), !dbg !6265
  %43 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 2, !dbg !6265
  store {} addrspace(10)* %42, {} addrspace(10)** %43, align 8, !dbg !6265
  %44 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !6265
  %45 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %44, i32 0, i32 3, !dbg !6265
  %46 = load i16, i16 addrspace(10)* %45, align 2, !dbg !6265
  %47 = zext i16 %46 to i64, !dbg !6265
  %48 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !6265
  %49 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %48, i32 0, i32 1, !dbg !6265
  %50 = load i64, i64 addrspace(10)* %49, align 8, !dbg !6265
  %51 = mul i64 %50, %47, !dbg !6265
  %52 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !6265
  %53 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %52, align 8, !dbg !6265
  %54 = bitcast {} addrspace(10)* %42 to i8 addrspace(13)* addrspace(10)*, !dbg !6265
  %55 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %54, align 8, !dbg !6265
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %55, i8 0, i64 %51, i1 false), !dbg !6265
  %56 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %0) #66, !dbg !6265
  %57 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 3
  store {} addrspace(10)* %56, {} addrspace(10)** %57, align 8
  %.phi.trans.insert = bitcast {} addrspace(10)* %56 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert141 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr38.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert141, i64 0, i32 1
  %arraylen39.pre = load i64, i64 addrspace(11)* %arraylen_ptr38.phi.trans.insert, align 8, !dbg !6267, !tbaa !315, !range !86, !alias.scope !6271, !noalias !6274
  br label %L112, !dbg !6276

L112:                                             ; preds = %L107, %L99, %L96
  %arraylen39 = phi i64 [ %arraylen39.pre, %L107 ], [ %arraylen, %L96 ], [ %arraylen, %L99 ], !dbg !6267
  %58 = phi {} addrspace(10)* [ %42, %L107 ], [ %"'", %L96 ], [ %"'", %L99 ]
  %value_phi37 = phi {} addrspace(10)* [ %56, %L107 ], [ %0, %L96 ], [ %0, %L99 ]
  %.not116 = icmp eq i64 %arraylen39, 1, !dbg !6283
  %59 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 8, !dbg !6287
  store i1 %.not116, i1* %59, align 1, !dbg !6287
  %60 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !6287
  %.not113 = icmp eq {} addrspace(11)* %35, %60, !dbg !6287
  br i1 %.not113, label %L137, label %L124, !dbg !6287

L124:                                             ; preds = %L112
  %61 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %35) #70, !dbg !6290
  %62 = bitcast {}* %61 to i8**, !dbg !6290
  %arrayptr73 = load i8*, i8** %62, align 8, !dbg !6290, !tbaa !382, !alias.scope !6243, !noalias !6246, !nonnull !67
  %63 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %60) #70, !dbg !6290
  %64 = bitcast {}* %63 to i8**, !dbg !6290
  %arrayptr75 = load i8*, i8** %64, align 8, !dbg !6290, !tbaa !382, !alias.scope !6210, !noalias !6213, !nonnull !67
  %.not122.not = icmp eq i8* %arrayptr73, %arrayptr75, !dbg !6295
  %65 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 9, !dbg !6294
  store i1 %.not122.not, i1* %65, align 1, !dbg !6294
  br i1 %.not122.not, label %L132, label %L137, !dbg !6294

L132:                                             ; preds = %L124
  %66 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'1"), !dbg !6298
  %67 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 4, !dbg !6298
  store {} addrspace(10)* %66, {} addrspace(10)** %67, align 8, !dbg !6298
  %68 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !6298
  %69 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %68, i32 0, i32 3, !dbg !6298
  %70 = load i16, i16 addrspace(10)* %69, align 2, !dbg !6298
  %71 = zext i16 %70 to i64, !dbg !6298
  %72 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !6298
  %73 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %72, i32 0, i32 1, !dbg !6298
  %74 = load i64, i64 addrspace(10)* %73, align 8, !dbg !6298
  %75 = mul i64 %74, %71, !dbg !6298
  %76 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !6298
  %77 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %76, align 8, !dbg !6298
  %78 = bitcast {} addrspace(10)* %66 to i8 addrspace(13)* addrspace(10)*, !dbg !6298
  %79 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %78, align 8, !dbg !6298
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %79, i8 0, i64 %75, i1 false), !dbg !6298
  %80 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %1) #66, !dbg !6298
  %81 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 5, !dbg !6300
  store {} addrspace(10)* %80, {} addrspace(10)** %81, align 8, !dbg !6300
  %.pre = bitcast {} addrspace(10)* %80 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6300
  br label %L137, !dbg !6276

L137:                                             ; preds = %L132, %L124, %L112
  %nodecayed..pre-phi146 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %.pre, %L132 ], [ %20, %L112 ], [ %20, %L124 ], !dbg !6300
  %82 = phi {} addrspace(10)* [ %66, %L132 ], [ %"'1", %L112 ], [ %"'1", %L124 ]
  %value_phi42 = phi {} addrspace(10)* [ %80, %L132 ], [ %1, %L112 ], [ %1, %L124 ]
  %83 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi146 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6300
  %arraylen_ptr43 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %83, i64 0, i32 1, !dbg !6300
  %arraylen44 = load i64, i64 addrspace(11)* %arraylen_ptr43, align 8, !dbg !6300, !tbaa !315, !range !86, !alias.scope !6304, !noalias !6307
  %.not118 = icmp eq i64 %arraylen44, 1, !dbg !6309
  %84 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 10, !dbg !6313
  store i1 %.not118, i1* %84, align 1, !dbg !6313
  %.not114 = icmp eq i64 %arraylen, 0, !dbg !6313
  br i1 %.not114, label %L203, label %L187.lr.ph, !dbg !6314

L187.lr.ph:                                       ; preds = %L137
  %"'ipc10" = bitcast {} addrspace(10)* %58 to double addrspace(13)* addrspace(10)*
  %85 = bitcast {} addrspace(10)* %value_phi37 to double addrspace(13)* addrspace(10)*
  %"'ipc11" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc10" to double addrspace(13)* addrspace(11)*
  %86 = addrspacecast double addrspace(13)* addrspace(10)* %85 to double addrspace(13)* addrspace(11)*
  %"arrayptr117'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc11", align 8, !tbaa !382, !alias.scope !6316, !noalias !6321, !nonnull !67
  %arrayptr117 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %86, align 8, !tbaa !382, !alias.scope !6323, !noalias !6324, !nonnull !67
  %"'ipc8" = bitcast {} addrspace(10)* %82 to double addrspace(13)* addrspace(10)*
  %87 = bitcast {} addrspace(10)* %value_phi42 to double addrspace(13)* addrspace(10)*
  %"'ipc9" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc8" to double addrspace(13)* addrspace(11)*
  %88 = addrspacecast double addrspace(13)* addrspace(10)* %87 to double addrspace(13)* addrspace(11)*
  %"arrayptr53119'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc9", align 8, !tbaa !382, !alias.scope !6325, !noalias !6328, !nonnull !67
  %arrayptr53119 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %88, align 8, !tbaa !382, !alias.scope !6330, !noalias !6331, !nonnull !67
  %"'ipc" = bitcast {} addrspace(10)* %26 to double addrspace(13)* addrspace(10)*
  %89 = bitcast {} addrspace(10)* %31 to double addrspace(13)* addrspace(10)*
  %"'ipc7" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %90 = addrspacecast double addrspace(13)* addrspace(10)* %89 to double addrspace(13)* addrspace(11)*
  %"arrayptr56120'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc7", align 8, !tbaa !382, !alias.scope !6332, !noalias !6333, !nonnull !67
  %arrayptr56120 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %90, align 8, !tbaa !382, !alias.scope !6334, !noalias !6246, !nonnull !67
  %91 = add nsw i64 %arraylen, -1, !dbg !6335
  br label %L187, !dbg !6335

L187:                                             ; preds = %L187, %L187.lr.ph
  %iv = phi i64 [ %iv.next, %L187 ], [ 0, %L187.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6336
  %92 = select i1 %.not116, i64 0, i64 %iv, !dbg !6336
  %93 = getelementptr inbounds double, double addrspace(13)* %arrayptr117, i64 %92, !dbg !6336
  %arrayref = load double, double addrspace(13)* %93, align 8, !dbg !6336, !tbaa !268, !alias.scope !6343, !noalias !6346
  %94 = select i1 %.not118, i64 0, i64 %iv, !dbg !6348
  %95 = getelementptr inbounds double, double addrspace(13)* %arrayptr53119, i64 %94, !dbg !6348
  %arrayref54 = load double, double addrspace(13)* %95, align 8, !dbg !6348, !tbaa !268, !alias.scope !6351, !noalias !6354
  %96 = fsub double %arrayref, %arrayref54, !dbg !6356
  %97 = getelementptr inbounds double, double addrspace(13)* %arrayptr56120, i64 %iv, !dbg !6359
  store double %96, double addrspace(13)* %97, align 8, !dbg !6359, !tbaa !268, !alias.scope !6360, !noalias !6363
  %exitcond.not = icmp eq i64 %iv.next, %arraylen, !dbg !6365
  br i1 %exitcond.not, label %L203.loopexit, label %L187, !dbg !6335, !llvm.loop !6366

L193:                                             ; preds = %L50
  %98 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %13, i64 0, i64 0, i64 0, !dbg !6367
  store i64 %arraylen34, i64* %98, align 8, !dbg !6367, !tbaa !132, !alias.scope !134, !noalias !6230
  %99 = addrspacecast [1 x [1 x i64]]* %13 to [1 x [1 x i64]] addrspace(11)*, !dbg !6241
  %100 = addrspacecast [1 x [1 x i64]]* %12 to [1 x [1 x i64]] addrspace(11)*, !dbg !6241
  call fastcc void @julia_throwdm_1980([1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %99, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %100) #71, !dbg !6241
  unreachable, !dbg !6241

L203.loopexit:                                    ; preds = %L187
  br label %L203, !dbg !6371

L203:                                             ; preds = %L203.loopexit, %L137
  %arraylen61 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6371, !tbaa !315, !range !86, !alias.scope !6205, !noalias !6208
  %arraylen64 = load i64, i64 addrspace(11)* %arraylen_ptr3, align 8, !dbg !6371, !tbaa !315, !range !86, !alias.scope !6210, !noalias !6213
  %101 = icmp eq i64 %arraylen64, %arraylen61, !dbg !6377
  %102 = icmp eq i64 %arraylen61, 1, !dbg !6379
  %value_phi66.in = or i1 %102, %101, !dbg !6379
  %103 = icmp eq i64 %arraylen64, 1
  %or.cond = or i1 %103, %value_phi66.in, !dbg !6380
  br i1 %or.cond, label %L235, label %L225, !dbg !6380

L225:                                             ; preds = %L203
  %104 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen61) #69, !dbg !6380
  %105 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen64) #69, !dbg !6380
  %106 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4773853616 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4729112992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4818754768 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %104, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4818754736 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %105) #68, !dbg !6380
  %current_task68121 = getelementptr inbounds {}**, {}*** %14, i64 -14, !dbg !6380
  %current_task68 = bitcast {}*** %current_task68121 to {}**, !dbg !6380
  %box69 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task68, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #67, !dbg !6380
  %107 = bitcast {} addrspace(10)* %box69 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !6380
  %108 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %107, i64 0, i64 0, !dbg !6380
  store {} addrspace(10)* %106, {} addrspace(10)* addrspace(10)* %108, align 8, !dbg !6380, !tbaa !112, !alias.scope !116, !noalias !6220
  %109 = addrspacecast {} addrspace(10)* %box69 to {} addrspace(12)*, !dbg !6380
  call void @ijl_throw({} addrspace(12)* %109) #66, !dbg !6380
  unreachable, !dbg !6380

L235:                                             ; preds = %L203
  %110 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 1, !dbg !6229
  store {} addrspace(10)* %31, {} addrspace(10)** %110, align 8, !dbg !6229
  %111 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 2, !dbg !6229
  store {} addrspace(10)* %26, {} addrspace(10)** %111, align 8, !dbg !6229
  %112 = load { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, align 8, !dbg !6229
  ret { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %112, !dbg !6229
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia___2046({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg) unnamed_addr #65 !dbg !6383 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %2 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"arrayref'de" = alloca double, align 8
  %3 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"arrayref54'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref54'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %5 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %6 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %5, i32 0, i32 3
  %7 = load i16, i16 addrspace(10)* %6, align 2
  %8 = zext i16 %7 to i64
  %9 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %10 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %9, i32 0, i32 1
  %11 = load i64, i64 addrspace(10)* %10, align 8
  %12 = mul i64 %11, %8
  %13 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %14 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %13, i32 0, i32 3
  %15 = load i16, i16 addrspace(10)* %14, align 2
  %16 = zext i16 %15 to i64
  %17 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %18 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %17, i32 0, i32 1
  %19 = load i64, i64 addrspace(10)* %18, align 8
  %20 = mul i64 %19, %16
  %21 = call {}*** @julia.get_pgcstack() #66
  %arraylen = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 6, !dbg !6384
  br i1 true, label %L50, label %L15, !dbg !6388

L15:                                              ; preds = %top
  unreachable

L50:                                              ; preds = %top
  %22 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 0, !dbg !6389
  %23 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 1, !dbg !6389
  br i1 true, label %L96, label %L193, !dbg !6400

L96:                                              ; preds = %L50
  %24 = addrspacecast {} addrspace(10)* %23 to {} addrspace(11)*, !dbg !6402
  %25 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !6402
  %.not112 = icmp eq {} addrspace(11)* %24, %25, !dbg !6402
  br i1 %.not112, label %L112, label %L99, !dbg !6402

L99:                                              ; preds = %L96
  %.not123.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 7, !dbg !6407
  br i1 %.not123.not, label %L107, label %L112, !dbg !6407

L107:                                             ; preds = %L99
  %"'ip_phi3" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 2, !dbg !6408
  %26 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 3, !dbg !6408
  br label %L112, !dbg !6410

L112:                                             ; preds = %L107, %L99, %L96
  %27 = phi {} addrspace(10)* [ %"'ip_phi3", %L107 ], [ %"'", %L96 ], [ %"'", %L99 ]
  %.not116 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 8, !dbg !6417
  %28 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !6417
  %.not113 = icmp eq {} addrspace(11)* %24, %28, !dbg !6417
  br i1 %.not113, label %L137, label %L124, !dbg !6417

L124:                                             ; preds = %L112
  %.not122.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 9, !dbg !6420
  br i1 %.not122.not, label %L132, label %L137, !dbg !6420

L132:                                             ; preds = %L124
  %"'ip_phi6" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 4, !dbg !6421
  %29 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 5, !dbg !6421
  br label %L137, !dbg !6410

L137:                                             ; preds = %L132, %L124, %L112
  %30 = phi {} addrspace(10)* [ %"'ip_phi6", %L132 ], [ %"'1", %L112 ], [ %"'1", %L124 ]
  %.not118 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 10, !dbg !6423
  %.not114 = icmp eq i64 %arraylen, 0, !dbg !6423
  br i1 %.not114, label %L203, label %L187.lr.ph, !dbg !6424

L187.lr.ph:                                       ; preds = %L137
  %"'ipc37" = bitcast {} addrspace(10)* %27 to double addrspace(13)* addrspace(10)*
  %"'ipc38" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc37" to double addrspace(13)* addrspace(11)*
  %"arrayptr117'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc38", align 8, !tbaa !382, !alias.scope !6426, !noalias !6429, !nonnull !67, !invariant.group !6431
  %"'ipc33" = bitcast {} addrspace(10)* %30 to double addrspace(13)* addrspace(10)*
  %"'ipc34" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc33" to double addrspace(13)* addrspace(11)*
  %"arrayptr53119'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc34", align 8, !tbaa !382, !alias.scope !6432, !noalias !6435, !nonnull !67, !invariant.group !6437
  %"'ipc" = bitcast {} addrspace(10)* %22 to double addrspace(13)* addrspace(10)*
  %"'ipc30" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr56120'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc30", align 8, !tbaa !382, !alias.scope !6438, !noalias !6441, !nonnull !67, !invariant.group !6443
  %31 = add nsw i64 %arraylen, -1, !dbg !6444
  br label %L187, !dbg !6444

L187:                                             ; preds = %L187, %L187.lr.ph
  %iv = phi i64 [ %iv.next, %L187 ], [ 0, %L187.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6445
  %32 = select i1 %.not116, i64 0, i64 %iv, !dbg !6445
  %"'ipg45" = getelementptr inbounds double, double addrspace(13)* %"arrayptr117'ipl", i64 %32, !dbg !6445
  %33 = select i1 %.not118, i64 0, i64 %iv, !dbg !6452
  %"'ipg43" = getelementptr inbounds double, double addrspace(13)* %"arrayptr53119'ipl", i64 %33, !dbg !6452
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr56120'ipl", i64 %iv, !dbg !6455
  %exitcond.not = icmp eq i64 %iv.next, %arraylen, !dbg !6456
  br i1 %exitcond.not, label %L203.loopexit, label %L187, !dbg !6444, !llvm.loop !6457

L193:                                             ; preds = %L50
  unreachable

L203.loopexit:                                    ; preds = %L187
  br label %L203, !dbg !6458

L203:                                             ; preds = %L203.loopexit, %L137
  br i1 true, label %L235, label %L225, !dbg !6464

L225:                                             ; preds = %L203
  unreachable

L235:                                             ; preds = %L203
  br label %invertL235, !dbg !6399

inverttop:                                        ; preds = %invertL50
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL50:                                        ; preds = %invertL96
  br label %inverttop

invertL96:                                        ; preds = %invertL112, %invertL99
  br label %invertL50

invertL99:                                        ; preds = %staging, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  br label %invertL96

invertL107:                                       ; preds = %staging
  %34 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 2, !dbg !6408
  %35 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !6408
  %36 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %35, align 8, !dbg !6408
  %37 = bitcast {} addrspace(10)* %34 to i8 addrspace(13)* addrspace(10)*, !dbg !6408
  %38 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %37, align 8, !dbg !6408
  %39 = bitcast i8 addrspace(13)* %38 to double addrspace(13)*, !dbg !6408
  %40 = bitcast i8 addrspace(13)* %36 to double addrspace(13)*, !dbg !6408
  %41 = udiv i64 %20, 8, !dbg !6408
  %42 = icmp eq i64 %41, 0, !dbg !6408
  br i1 %42, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !6408

for.body.i:                                       ; preds = %for.body.i, %invertL107
  %idx.i = phi i64 [ 0, %invertL107 ], [ %idx.next.i, %for.body.i ], !dbg !6408
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %39, i64 %idx.i, !dbg !6408
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !6408
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !6408
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %40, i64 %idx.i, !dbg !6408
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !6408
  %43 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !6408
  store double %43, double addrspace(13)* %src.i.i, align 1, !dbg !6408
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !6408
  %44 = icmp eq i64 %41, %idx.next.i, !dbg !6408
  br i1 %44, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !6408

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL107, %for.body.i
  br label %invertL99

invertL112:                                       ; preds = %invertL137, %invertL124
  %.not123.not_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 7
  br i1 %.not112, label %invertL96, label %staging

invertL124:                                       ; preds = %staging29, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit69
  br label %invertL112

invertL132:                                       ; preds = %staging29
  %45 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 4, !dbg !6421
  %46 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !6421
  %47 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %46, align 8, !dbg !6421
  %48 = bitcast {} addrspace(10)* %45 to i8 addrspace(13)* addrspace(10)*, !dbg !6421
  %49 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %48, align 8, !dbg !6421
  %50 = bitcast i8 addrspace(13)* %49 to double addrspace(13)*, !dbg !6421
  %51 = bitcast i8 addrspace(13)* %47 to double addrspace(13)*, !dbg !6421
  %52 = udiv i64 %12, 8, !dbg !6421
  %53 = icmp eq i64 %52, 0, !dbg !6421
  br i1 %53, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit69, label %for.body.i68, !dbg !6421

for.body.i68:                                     ; preds = %for.body.i68, %invertL132
  %idx.i62 = phi i64 [ 0, %invertL132 ], [ %idx.next.i67, %for.body.i68 ], !dbg !6421
  %dst.i.i63 = getelementptr inbounds double, double addrspace(13)* %50, i64 %idx.i62, !dbg !6421
  %dst.i.l.i64 = load double, double addrspace(13)* %dst.i.i63, align 1, !dbg !6421
  store double 0.000000e+00, double addrspace(13)* %dst.i.i63, align 1, !dbg !6421
  %src.i.i65 = getelementptr inbounds double, double addrspace(13)* %51, i64 %idx.i62, !dbg !6421
  %src.i.l.i66 = load double, double addrspace(13)* %src.i.i65, align 1, !dbg !6421
  %54 = fadd fast double %src.i.l.i66, %dst.i.l.i64, !dbg !6421
  store double %54, double addrspace(13)* %src.i.i65, align 1, !dbg !6421
  %idx.next.i67 = add nuw i64 %idx.i62, 1, !dbg !6421
  %55 = icmp eq i64 %52, %idx.next.i67, !dbg !6421
  br i1 %55, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit69, label %for.body.i68, !dbg !6421

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit69: ; preds = %invertL132, %for.body.i68
  br label %invertL124

invertL137:                                       ; preds = %invertL203, %invertL187.lr.ph
  %.not122.not_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 9
  br i1 %.not113, label %invertL112, label %staging29

invertL187.lr.ph:                                 ; preds = %invertL187
  br label %invertL137

invertL187:                                       ; preds = %mergeinvertL187_L203.loopexit, %incinvertL187
  %56 = load i64, i64* %"iv'ac", align 8, !dbg !6455
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %22 to double addrspace(13)* addrspace(10)*, !dbg !6455
  %"'ipc30_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !6455
  %"arrayptr56120'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc30_unwrap", align 8, !tbaa !382, !alias.scope !6438, !noalias !6441, !nonnull !67, !invariant.group !6443
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr56120'ipl_unwrap", i64 %56, !dbg !6455
  %57 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !6455, !tbaa !268, !alias.scope !6467, !noalias !6470
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !6455, !tbaa !268, !alias.scope !6467, !noalias !6470
  %58 = load double, double* %"'de", align 8, !dbg !6455
  %59 = fadd fast double %58, %57, !dbg !6455
  store double %59, double* %"'de", align 8, !dbg !6455
  %60 = load double, double* %"'de", align 8, !dbg !6472
  store double 0.000000e+00, double* %"'de", align 8, !dbg !6472
  %61 = load double, double* %"arrayref'de", align 8, !dbg !6472
  %62 = fadd fast double %61, %60, !dbg !6472
  store double %62, double* %"arrayref'de", align 8, !dbg !6472
  %63 = fneg fast double %60, !dbg !6472
  %64 = load double, double* %"arrayref54'de", align 8, !dbg !6472
  %65 = fadd fast double %64, %63, !dbg !6472
  store double %65, double* %"arrayref54'de", align 8, !dbg !6472
  %66 = load double, double* %"arrayref54'de", align 8, !dbg !6452
  store double 0.000000e+00, double* %"arrayref54'de", align 8, !dbg !6452
  %67 = load i64, i64* %"iv'ac", align 8, !dbg !6452
  %"'ipc33_unwrap" = bitcast {} addrspace(10)* %30 to double addrspace(13)* addrspace(10)*, !dbg !6452
  %"'ipc34_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc33_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !6452
  %"arrayptr53119'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc34_unwrap", align 8, !tbaa !382, !alias.scope !6432, !noalias !6435, !nonnull !67, !invariant.group !6437
  %_unwrap = select i1 %.not118, i64 0, i64 %67, !dbg !6452
  %"'ipg43_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr53119'ipl_unwrap", i64 %_unwrap, !dbg !6452
  %68 = load double, double addrspace(13)* %"'ipg43_unwrap", align 8, !dbg !6452, !tbaa !268, !alias.scope !6475, !noalias !6478
  %69 = fadd fast double %68, %66, !dbg !6452
  store double %69, double addrspace(13)* %"'ipg43_unwrap", align 8, !dbg !6452, !tbaa !268, !alias.scope !6475, !noalias !6478
  %70 = load double, double* %"arrayref'de", align 8, !dbg !6445
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !6445
  %71 = load i64, i64* %"iv'ac", align 8, !dbg !6445
  %"'ipc37_unwrap" = bitcast {} addrspace(10)* %27 to double addrspace(13)* addrspace(10)*, !dbg !6445
  %"'ipc38_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc37_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !6445
  %"arrayptr117'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc38_unwrap", align 8, !tbaa !382, !alias.scope !6426, !noalias !6429, !nonnull !67, !invariant.group !6431
  %_unwrap46 = select i1 %.not116, i64 0, i64 %71, !dbg !6445
  %"'ipg45_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr117'ipl_unwrap", i64 %_unwrap46, !dbg !6445
  %72 = load double, double addrspace(13)* %"'ipg45_unwrap", align 8, !dbg !6445, !tbaa !268, !alias.scope !6480, !noalias !6483
  %73 = fadd fast double %72, %70, !dbg !6445
  store double %73, double addrspace(13)* %"'ipg45_unwrap", align 8, !dbg !6445, !tbaa !268, !alias.scope !6480, !noalias !6483
  %74 = load i64, i64* %"iv'ac", align 8
  %75 = icmp eq i64 %74, 0
  %76 = xor i1 %75, true
  br i1 %75, label %invertL187.lr.ph, label %incinvertL187

incinvertL187:                                    ; preds = %invertL187
  %77 = load i64, i64* %"iv'ac", align 8
  %78 = add nsw i64 %77, -1
  store i64 %78, i64* %"iv'ac", align 8
  br label %invertL187

invertL203.loopexit:                              ; preds = %invertL203
  %_unwrap51 = add nsw i64 %arraylen, -1
  br label %mergeinvertL187_L203.loopexit

mergeinvertL187_L203.loopexit:                    ; preds = %invertL203.loopexit
  store i64 %_unwrap51, i64* %"iv'ac", align 8
  br label %invertL187

invertL203:                                       ; preds = %invertL235
  br i1 %.not114, label %invertL137, label %invertL203.loopexit

invertL235:                                       ; preds = %L235
  br label %invertL203

staging:                                          ; preds = %invertL112
  br i1 %.not123.not_unwrap, label %invertL107, label %invertL99

staging29:                                        ; preds = %invertL137
  br i1 %.not122.not_unwrap, label %invertL132, label %invertL124
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc double @preprocess_julia___1993([1 x {} addrspace(10)*] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2) unnamed_addr #66 !dbg !6526 {
top:
  %3 = call {}*** @julia.get_pgcstack() #67
  %ptls_field15 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field15 to i64***
  %ptls_load1617 = load i64**, i64*** %4, align 8, !tbaa !68
  %5 = getelementptr inbounds i64*, i64** %ptls_load1617, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !72, !invariant.load !67
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #67, !dbg !6527
  fence syncscope("singlethread") seq_cst
  %getfield_addr = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %0, i64 0, i64 0, !dbg !6528
  %getfield = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %getfield_addr unordered, align 8, !dbg !6528, !tbaa !72, !invariant.load !67, !alias.scope !95, !noalias !96, !nonnull !67, !dereferenceable !867, !align !868
  %6 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !6531
  %arraysize_ptr18 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %6, i64 4, !dbg !6531
  %7 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr18 to i64 addrspace(10)*, !dbg !6531
  %8 = addrspacecast i64 addrspace(10)* %7 to i64 addrspace(11)*, !dbg !6531
  %arraysize = load i64, i64 addrspace(11)* %8, align 8, !dbg !6531, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  %9 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize) #68, !dbg !6535
  %10 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1996({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %9, i32 noundef zeroext 1409286144, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield) #67, !dbg !6539
  %11 = bitcast {} addrspace(10)* %10 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6542
  %12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6542
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %12, i64 0, i32 1, !dbg !6542
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6542, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %13 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6542
  %14 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %13 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6542
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %14, i64 0, i32 1, !dbg !6542
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !6542, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not = icmp eq i64 %arraylen, %arraylen7, !dbg !6546
  br i1 %.not, label %L33, label %L39, !dbg !6547

L33:                                              ; preds = %top
  %15 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %10, {} addrspace(10)* nonnull %2) #67, !dbg !6548
  %16 = addrspacecast {} addrspace(10)* %10 to {} addrspace(11)*, !dbg !6549
  %17 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %16) #69, !dbg !6549
  %18 = bitcast {}* %17 to double**, !dbg !6549
  %arrayptr19 = load double*, double** %18, align 8, !dbg !6549, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %19 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !6549
  %20 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %19) #69, !dbg !6549
  %21 = bitcast {}* %20 to double**, !dbg !6549
  %arrayptr920 = load double*, double** %21, align 8, !dbg !6549, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %.not31 = icmp eq i64 %arraylen, 0, !dbg !6553
  br i1 %.not31, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !6553

.preheader.preheader:                             ; preds = %L33
  br label %.preheader, !dbg !6553

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !6553
  %22 = phi i64 [ %35, %.preheader ], [ 0, %.preheader.preheader ], !dbg !6553
  %23 = phi i64 [ %34, %.preheader ], [ 0, %.preheader.preheader ], !dbg !6553
  %24 = phi double [ %33, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !6553
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6553
  %25 = shl i64 %23, 32, !dbg !6553
  %26 = ashr exact i64 %25, 32, !dbg !6553
  %27 = getelementptr inbounds double, double* %arrayptr19, i64 %26, !dbg !6553
  %28 = load double, double* %27, align 8, !dbg !6553, !tbaa !1662
  %29 = shl i64 %22, 32, !dbg !6553
  %30 = ashr exact i64 %29, 32, !dbg !6553
  %31 = getelementptr inbounds double, double* %arrayptr920, i64 %30, !dbg !6553
  %32 = load double, double* %31, align 8, !dbg !6553, !tbaa !1662
  %33 = call double @llvm.fmuladd.f64(double %28, double %32, double %24) #67, !dbg !6553
  %34 = add nsw i64 %26, 1, !dbg !6553
  %35 = add nsw i64 %30, 1, !dbg !6553
  %36 = icmp eq i64 %iv.next, %arraylen, !dbg !6553
  br i1 %36, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !6553, !llvm.loop !6554

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !6548

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L33
  %37 = phi double [ 0.000000e+00, %L33 ], [ %33, %cblas_ddot64_.exit.loopexit ], !dbg !6553
  call void @llvm.julia.gc_preserve_end(token %15) #67, !dbg !6548
  ret double %37, !dbg !6527

L39:                                              ; preds = %top
  %current_task1021 = getelementptr inbounds {}**, {}*** %3, i64 -14, !dbg !6555
  %current_task10 = bitcast {}*** %current_task1021 to {}**, !dbg !6555
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #70, !dbg !6555
  %38 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !6555
  %39 = addrspacecast {} addrspace(10)* addrspace(10)* %38 to {} addrspace(10)* addrspace(11)*, !dbg !6555
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %39, align 8, !dbg !6555, !tbaa !865, !alias.scope !116, !noalias !6556
  %40 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %39, i64 1, !dbg !6555
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %40, align 8, !dbg !6555, !tbaa !865, !alias.scope !116, !noalias !6556
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #70, !dbg !6555
  %41 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !6555
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %41, i64 0, i32 0, !dbg !6555
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859290304 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !6555, !tbaa !112, !alias.scope !116, !noalias !6556
  %.repack23 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %41, i64 0, i32 1, !dbg !6555
  store i64 %arraylen, i64 addrspace(10)* %.repack23, align 8, !dbg !6555, !tbaa !112, !alias.scope !116, !noalias !6556
  %.repack25 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %41, i64 0, i32 2, !dbg !6555
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859290272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack25, align 8, !dbg !6555, !tbaa !112, !alias.scope !116, !noalias !6556
  %.repack27 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %41, i64 0, i32 3, !dbg !6555
  store i64 %arraylen7, i64 addrspace(10)* %.repack27, align 8, !dbg !6555, !tbaa !112, !alias.scope !116, !noalias !6556
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %39 release, align 8, !dbg !6555, !tbaa !865, !alias.scope !116, !noalias !6556
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #71, !dbg !6555
  %42 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !6555
  %43 = addrspacecast i8 addrspace(10)* %42 to i8 addrspace(11)*, !dbg !6555
  %44 = getelementptr inbounds i8, i8 addrspace(11)* %43, i64 8, !dbg !6555
  %45 = bitcast i8 addrspace(11)* %44 to {} addrspace(10)* addrspace(11)*, !dbg !6555
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %45 release, align 8, !dbg !6555, !tbaa !865, !alias.scope !116, !noalias !6556
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #70, !dbg !6547
  %46 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !6547
  %47 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %46, i64 0, i64 0, !dbg !6547
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %47, align 8, !dbg !6547, !tbaa !112, !alias.scope !116, !noalias !6556
  %48 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !6547
  call void @ijl_throw({} addrspace(12)* %48) #67, !dbg !6547
  unreachable, !dbg !6547
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double } @augmented_julia___1993([1 x {} addrspace(10)*] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %0, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") unnamed_addr #66 !dbg !6559 {
top:
  %3 = alloca { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }, align 8
  %4 = getelementptr inbounds { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }, { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }* %3, i32 0, i32 0
  %5 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %10 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %10, align 8
  %11 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %11, align 8
  %12 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %12, align 8
  %13 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %13, align 8
  %14 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %14, align 8
  %"iv'ac" = alloca i64, align 8
  %_cache = alloca i64*, align 8
  %_cache8 = alloca double*, align 8
  %_cache10 = alloca i64*, align 8
  %_cache12 = alloca double*, align 8
  %15 = call {}*** @julia.get_pgcstack() #67
  %ptls_field15 = getelementptr inbounds {}**, {}*** %15, i64 2
  %16 = bitcast {}*** %ptls_field15 to i64***
  %ptls_load1617 = load i64**, i64*** %16, align 8, !tbaa !68, !alias.scope !6560, !noalias !6563
  %17 = getelementptr inbounds i64*, i64** %ptls_load1617, i64 2
  %safepoint = load i64*, i64** %17, align 8, !tbaa !72, !invariant.load !67, !alias.scope !6565, !noalias !6568
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #67, !dbg !6570
  fence syncscope("singlethread") seq_cst
  %"getfield_addr'ipg" = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %"'", i64 0, i64 0, !dbg !6571
  %getfield_addr = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %0, i64 0, i64 0, !dbg !6571
  %"getfield'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"getfield_addr'ipg" unordered, align 8, !dbg !6571, !tbaa !72, !alias.scope !6574, !noalias !6577, !nonnull !67, !dereferenceable !867
  %18 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 5, !dbg !6571
  store {} addrspace(10)* %"getfield'ipl", {} addrspace(10)** %18, align 8, !dbg !6571
  %getfield = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %getfield_addr unordered, align 8, !dbg !6571, !tbaa !72, !invariant.load !67, !alias.scope !6579, !noalias !6580, !nonnull !67, !dereferenceable !867, !align !868
  %19 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 8, !dbg !6581
  store {} addrspace(10)* %getfield, {} addrspace(10)** %19, align 8, !dbg !6581
  %20 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !6581
  %arraysize_ptr18 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %20, i64 4, !dbg !6581
  %21 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr18 to i64 addrspace(10)*, !dbg !6581
  %22 = addrspacecast i64 addrspace(10)* %21 to i64 addrspace(11)*, !dbg !6581
  %arraysize = load i64, i64 addrspace(11)* %22, align 8, !dbg !6581, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !6585, !noalias !6588
  %23 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 9, !dbg !6590
  store i64 %arraysize, i64* %23, align 8, !dbg !6590
  %24 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize), !dbg !6590
  %25 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 3, !dbg !6590
  store {} addrspace(10)* %24, {} addrspace(10)** %25, align 8, !dbg !6590
  %26 = mul i64 %arraysize, 8, !dbg !6590
  %27 = bitcast {} addrspace(10)* %24 to i8 addrspace(13)* addrspace(10)*, !dbg !6590
  %28 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %27, align 8, !dbg !6590
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %28, i8 0, i64 %26, i1 false), !dbg !6590
  %29 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize) #68, !dbg !6590
  %30 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 4, !dbg !6594
  store {} addrspace(10)* %29, {} addrspace(10)** %30, align 8, !dbg !6594
  %_augmented = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1996({} addrspace(10)* align 16 %29, {} addrspace(10)* align 16 %24, i32 zeroext 1409286144, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %getfield, {} addrspace(10)* align 16 %"getfield'ipl"), !dbg !6594
  %subcache = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 0, !dbg !6594
  %31 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 0, !dbg !6594
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %31, align 8, !dbg !6594
  %32 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 1, !dbg !6594
  %33 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 1, !dbg !6594
  store {} addrspace(10)* %32, {} addrspace(10)** %33, align 8, !dbg !6594
  %"'ac" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 2, !dbg !6594
  %34 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 2, !dbg !6597
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %34, align 8, !dbg !6597
  %35 = bitcast {} addrspace(10)* %32 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6597
  %36 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %35 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6597
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %36, i64 0, i32 1, !dbg !6597
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6597, !tbaa !315, !range !86, !alias.scope !6601, !noalias !6604
  %37 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 10, !dbg !6597
  store i64 %arraylen, i64* %37, align 8, !dbg !6597
  %38 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6597
  %39 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %38 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6597
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %39, i64 0, i32 1, !dbg !6597
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !6597, !tbaa !315, !range !86, !alias.scope !6606, !noalias !6609
  %.not = icmp eq i64 %arraylen, %arraylen7, !dbg !6611
  br i1 %.not, label %L33, label %L39, !dbg !6612

L33:                                              ; preds = %top
  %40 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %32, {} addrspace(10)* %"'ac", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !6613
  %"'ipc7" = addrspacecast {} addrspace(10)* %"'ac" to {} addrspace(11)*, !dbg !6614
  %41 = addrspacecast {} addrspace(10)* %32 to {} addrspace(11)*, !dbg !6614
  %42 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc7"), !dbg !6614
  %43 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %41) #69, !dbg !6614
  %"'ipc6" = bitcast {}* %42 to double**, !dbg !6614
  %44 = bitcast {}* %43 to double**, !dbg !6614
  %"arrayptr19'ipl" = load double*, double** %"'ipc6", align 8, !dbg !6614, !tbaa !382, !alias.scope !6618, !noalias !6619, !nonnull !67
  %45 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 7, !dbg !6614
  store double* %"arrayptr19'ipl", double** %45, align 8, !dbg !6614
  %arrayptr19 = load double*, double** %44, align 8, !dbg !6614, !tbaa !382, !alias.scope !6601, !noalias !6604, !nonnull !67
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !6614
  %46 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !6614
  %47 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !6614
  %48 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %46) #69, !dbg !6614
  %"'ipc" = bitcast {}* %47 to double**, !dbg !6614
  %49 = bitcast {}* %48 to double**, !dbg !6614
  %"arrayptr920'ipl" = load double*, double** %"'ipc", align 8, !dbg !6614, !tbaa !382, !alias.scope !6620, !noalias !6621, !nonnull !67
  %50 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 6, !dbg !6614
  store double* %"arrayptr920'ipl", double** %50, align 8, !dbg !6614
  %arrayptr920 = load double*, double** %49, align 8, !dbg !6614, !tbaa !382, !alias.scope !6606, !noalias !6609, !nonnull !67
  %.not31 = icmp eq i64 %arraylen, 0, !dbg !6622
  br i1 %.not31, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !6622

.preheader.preheader:                             ; preds = %L33
  %51 = add nsw i64 %arraylen, -1, !dbg !6622
  %52 = add nuw i64 %51, 1, !dbg !6622
  %53 = mul nuw i64 %52, 8, !dbg !6622
  %54 = call noalias nonnull i8* @malloc(i64 %53), !dbg !6622
  %_malloccache = bitcast i8* %54 to i64*, !dbg !6622
  %55 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 11, !dbg !6622
  store i64* %_malloccache, i64** %55, align 8, !dbg !6622
  store i64* %_malloccache, i64** %_cache, align 8, !dbg !6622, !invariant.group !6623
  %56 = mul nuw i64 %52, 8, !dbg !6622
  %57 = call noalias nonnull i8* @malloc(i64 %56), !dbg !6622
  %_malloccache9 = bitcast i8* %57 to double*, !dbg !6622
  %58 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 12, !dbg !6622
  store double* %_malloccache9, double** %58, align 8, !dbg !6622
  store double* %_malloccache9, double** %_cache8, align 8, !dbg !6622, !invariant.group !6624
  %59 = mul nuw i64 %52, 8, !dbg !6622
  %60 = call noalias nonnull i8* @malloc(i64 %59), !dbg !6622
  %_malloccache11 = bitcast i8* %60 to i64*, !dbg !6622
  %61 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 13, !dbg !6622
  store i64* %_malloccache11, i64** %61, align 8, !dbg !6622
  store i64* %_malloccache11, i64** %_cache10, align 8, !dbg !6622, !invariant.group !6625
  %62 = mul nuw i64 %52, 8, !dbg !6622
  %63 = call noalias nonnull i8* @malloc(i64 %62), !dbg !6622
  %_malloccache13 = bitcast i8* %63 to double*, !dbg !6622
  %64 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 14, !dbg !6622
  store double* %_malloccache13, double** %64, align 8, !dbg !6622
  store double* %_malloccache13, double** %_cache12, align 8, !dbg !6622, !invariant.group !6626
  br label %.preheader, !dbg !6622

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !6622
  %65 = phi i64 [ %86, %.preheader ], [ 0, %.preheader.preheader ], !dbg !6622
  %66 = phi i64 [ %85, %.preheader ], [ 0, %.preheader.preheader ], !dbg !6622
  %67 = phi double [ %84, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !6622
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6622
  %68 = shl i64 %66, 32, !dbg !6622
  %69 = ashr exact i64 %68, 32, !dbg !6622
  %70 = load i64*, i64** %_cache, align 8, !dbg !6622, !dereferenceable !3229, !invariant.group !6623
  %71 = getelementptr inbounds i64, i64* %70, i64 %iv, !dbg !6622
  store i64 %69, i64* %71, align 8, !dbg !6622, !invariant.group !6627
  %72 = getelementptr inbounds double, double* %arrayptr19, i64 %69, !dbg !6622
  %73 = load double, double* %72, align 8, !dbg !6622, !tbaa !1662, !alias.scope !6628, !noalias !6631
  %74 = load double*, double** %_cache8, align 8, !dbg !6622, !dereferenceable !3229, !invariant.group !6624
  %75 = getelementptr inbounds double, double* %74, i64 %iv, !dbg !6622
  store double %73, double* %75, align 8, !dbg !6622, !tbaa !1662, !invariant.group !6633
  %76 = shl i64 %65, 32, !dbg !6622
  %77 = ashr exact i64 %76, 32, !dbg !6622
  %78 = load i64*, i64** %_cache10, align 8, !dbg !6622, !dereferenceable !3229, !invariant.group !6625
  %79 = getelementptr inbounds i64, i64* %78, i64 %iv, !dbg !6622
  store i64 %77, i64* %79, align 8, !dbg !6622, !invariant.group !6634
  %80 = getelementptr inbounds double, double* %arrayptr920, i64 %77, !dbg !6622
  %81 = load double, double* %80, align 8, !dbg !6622, !tbaa !1662, !alias.scope !6635, !noalias !6638
  %82 = load double*, double** %_cache12, align 8, !dbg !6622, !dereferenceable !3229, !invariant.group !6626
  %83 = getelementptr inbounds double, double* %82, i64 %iv, !dbg !6622
  store double %81, double* %83, align 8, !dbg !6622, !tbaa !1662, !invariant.group !6640
  %84 = call double @llvm.fmuladd.f64(double %73, double %81, double %67) #67, !dbg !6622
  %85 = add nsw i64 %69, 1, !dbg !6622
  %86 = add nsw i64 %77, 1, !dbg !6622
  %87 = icmp eq i64 %iv.next, %arraylen, !dbg !6622
  br i1 %87, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !6622, !llvm.loop !6641

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !6613

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L33
  %88 = phi double [ 0.000000e+00, %L33 ], [ %84, %cblas_ddot64_.exit.loopexit ], !dbg !6622
  call void @llvm.julia.gc_preserve_end(token %40) #67, !dbg !6613
  %89 = getelementptr inbounds { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }, { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }* %3, i32 0, i32 1, !dbg !6570
  store double %88, double* %89, align 8, !dbg !6570
  %90 = load { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }, { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }* %3, align 8, !dbg !6570
  ret { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double } %90, !dbg !6570

L39:                                              ; preds = %top
  %current_task1021 = getelementptr inbounds {}**, {}*** %15, i64 -14, !dbg !6642
  %current_task10 = bitcast {}*** %current_task1021 to {}**, !dbg !6642
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #70, !dbg !6642
  %91 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !6642
  %92 = addrspacecast {} addrspace(10)* addrspace(10)* %91 to {} addrspace(10)* addrspace(11)*, !dbg !6642
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %92, align 8, !dbg !6642, !tbaa !865, !alias.scope !116, !noalias !6643
  %93 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %92, i64 1, !dbg !6642
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %93, align 8, !dbg !6642, !tbaa !865, !alias.scope !116, !noalias !6643
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #70, !dbg !6642
  %94 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !6642
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %94, i64 0, i32 0, !dbg !6642
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859290304 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !6642, !tbaa !112, !alias.scope !116, !noalias !6643
  %.repack23 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %94, i64 0, i32 1, !dbg !6642
  store i64 %arraylen, i64 addrspace(10)* %.repack23, align 8, !dbg !6642, !tbaa !112, !alias.scope !116, !noalias !6643
  %.repack25 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %94, i64 0, i32 2, !dbg !6642
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859290272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack25, align 8, !dbg !6642, !tbaa !112, !alias.scope !116, !noalias !6643
  %.repack27 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %94, i64 0, i32 3, !dbg !6642
  store i64 %arraylen7, i64 addrspace(10)* %.repack27, align 8, !dbg !6642, !tbaa !112, !alias.scope !116, !noalias !6643
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %92 release, align 8, !dbg !6642, !tbaa !865, !alias.scope !116, !noalias !6643
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #71, !dbg !6642
  %95 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !6642
  %96 = addrspacecast i8 addrspace(10)* %95 to i8 addrspace(11)*, !dbg !6642
  %97 = getelementptr inbounds i8, i8 addrspace(11)* %96, i64 8, !dbg !6642
  %98 = bitcast i8 addrspace(11)* %97 to {} addrspace(10)* addrspace(11)*, !dbg !6642
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %98 release, align 8, !dbg !6642, !tbaa !865, !alias.scope !116, !noalias !6643
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #70, !dbg !6612
  %99 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !6612
  %100 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %99, i64 0, i64 0, !dbg !6612
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %100, align 8, !dbg !6612, !tbaa !112, !alias.scope !116, !noalias !6643
  %101 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !6612
  call void @ijl_throw({} addrspace(12)* %101) #67, !dbg !6612
  unreachable, !dbg !6612
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia___1993([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 dereferenceable(8) %0, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", double %differeturn, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg) unnamed_addr #66 !dbg !6646 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %3 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"'de24" = alloca double, align 8
  %4 = getelementptr double, double* %"'de24", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache = alloca double*, align 8
  %"'de25" = alloca double, align 8
  %5 = getelementptr double, double* %"'de25", i64 0
  store double 0.000000e+00, double* %5, align 8
  %_cache26 = alloca double*, align 8
  %"'de29" = alloca double, align 8
  %6 = getelementptr double, double* %"'de29", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"'de30" = alloca double, align 8
  %7 = getelementptr double, double* %"'de30", i64 0
  store double 0.000000e+00, double* %7, align 8
  %_cache31 = alloca i64*, align 8
  %_cache37 = alloca i64*, align 8
  %8 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 11
  %mdyncache_fromtape_cache = alloca i64*, align 8
  store i64* %8, i64** %mdyncache_fromtape_cache, align 8
  %9 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 12
  %mdyncache_fromtape_cache59 = alloca double*, align 8
  store double* %9, double** %mdyncache_fromtape_cache59, align 8
  %10 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 13
  %mdyncache_fromtape_cache61 = alloca i64*, align 8
  store i64* %10, i64** %mdyncache_fromtape_cache61, align 8
  %11 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 14
  %mdyncache_fromtape_cache63 = alloca double*, align 8
  store double* %11, double** %mdyncache_fromtape_cache63, align 8
  %12 = call {}*** @julia.get_pgcstack() #67
  %"getfield'il_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 5, !dbg !6647
  %getfield = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 8, !dbg !6651
  %arraysize = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 9, !dbg !6655
  %13 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 3, !dbg !6655
  %14 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 4, !dbg !6655
  %tapeArg8 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 0, !dbg !6659
  %15 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 1, !dbg !6659
  %"'ip_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 2, !dbg !6659
  %arraylen = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 10, !dbg !6662
  br i1 true, label %L33, label %L39, !dbg !6666

L33:                                              ; preds = %top
  %16 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %15, {} addrspace(10)* %"'ip_phi", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !6667
  %"'ipc18" = addrspacecast {} addrspace(10)* %"'ip_phi" to {} addrspace(11)*, !dbg !6668
  %17 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc18"), !dbg !6668
  %"arrayptr19'il_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 7, !dbg !6668
  %"'ipc" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !6668
  %18 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !6668
  %"arrayptr920'il_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 6, !dbg !6668
  %.not31 = icmp eq i64 %arraylen, 0, !dbg !6672
  br i1 %.not31, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !6672

.preheader.preheader:                             ; preds = %L33
  %19 = add nsw i64 %arraylen, -1, !dbg !6672
  %20 = add nuw i64 %19, 1, !dbg !6672
  %21 = mul nuw i64 %20, 8, !dbg !6672
  %22 = mul nuw i64 %20, 8, !dbg !6672
  %23 = mul nuw i64 %20, 8, !dbg !6672
  %24 = mul nuw i64 %20, 8, !dbg !6672
  br label %.preheader, !dbg !6672

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !6672
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6672
  %25 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dbg !6672, !dereferenceable !3229, !invariant.group !6673
  %26 = getelementptr inbounds i64, i64* %25, i64 %iv, !dbg !6672
  %27 = load i64, i64* %26, align 8, !dbg !6672, !invariant.group !6674
  %"'ipg36" = getelementptr inbounds double, double* %"arrayptr19'il_phi", i64 %27, !dbg !6672
  %28 = load double*, double** %mdyncache_fromtape_cache59, align 8, !dbg !6672, !dereferenceable !3229, !invariant.group !6675
  %29 = getelementptr inbounds double, double* %28, i64 %iv, !dbg !6672
  %30 = load double, double* %29, align 8, !dbg !6672, !invariant.group !6676
  %31 = load i64*, i64** %mdyncache_fromtape_cache61, align 8, !dbg !6672, !dereferenceable !3229, !invariant.group !6677
  %32 = getelementptr inbounds i64, i64* %31, i64 %iv, !dbg !6672
  %33 = load i64, i64* %32, align 8, !dbg !6672, !invariant.group !6678
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr920'il_phi", i64 %33, !dbg !6672
  %34 = load double*, double** %mdyncache_fromtape_cache63, align 8, !dbg !6672, !dereferenceable !3229, !invariant.group !6679
  %35 = getelementptr inbounds double, double* %34, i64 %iv, !dbg !6672
  %36 = load double, double* %35, align 8, !dbg !6672, !invariant.group !6680
  %37 = icmp eq i64 %iv.next, %arraylen, !dbg !6672
  br i1 %37, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !6672, !llvm.loop !6681

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !6667

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L33
  call void @llvm.julia.gc_preserve_end(token %16) #67, !dbg !6667
  br label %invertcblas_ddot64_.exit, !dbg !6650

L39:                                              ; preds = %top
  unreachable

inverttop:                                        ; preds = %invertL33
  call fastcc void @diffejulia_gemv__1996({} addrspace(10)* align 16 %14, {} addrspace(10)* align 16 %13, i32 zeroext 1409286144, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %getfield, {} addrspace(10)* align 16 %"getfield'il_phi", { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg8), !dbg !6659
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL33:                                        ; preds = %invertcblas_ddot64_.exit, %invert.preheader.preheader
  call void @llvm.julia.gc_preserve_end(token %95), !dbg !6667
  br label %inverttop

invert.preheader.preheader:                       ; preds = %invert.preheader
  %38 = load i64, i64* %"iv'ac", align 8
  %39 = load i64, i64* %"iv'ac", align 8
  %40 = load i64, i64* %"iv'ac", align 8
  %41 = load i64, i64* %"iv'ac", align 8
  %42 = load i64, i64* %"iv'ac", align 8
  %forfree58 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dereferenceable !3229, !invariant.group !6673
  %43 = bitcast i64* %forfree58 to i8*
  call void @free(i8* nonnull %43), !dbg !6682
  %44 = load i64, i64* %"iv'ac", align 8
  %forfree60 = load double*, double** %mdyncache_fromtape_cache59, align 8, !dereferenceable !3229, !invariant.group !6675
  %45 = bitcast double* %forfree60 to i8*
  call void @free(i8* nonnull %45), !dbg !6682
  %46 = load i64, i64* %"iv'ac", align 8
  %forfree62 = load i64*, i64** %mdyncache_fromtape_cache61, align 8, !dereferenceable !3229, !invariant.group !6677
  %47 = bitcast i64* %forfree62 to i8*
  call void @free(i8* nonnull %47), !dbg !6682
  %48 = load i64, i64* %"iv'ac", align 8
  %forfree64 = load double*, double** %mdyncache_fromtape_cache63, align 8, !dereferenceable !3229, !invariant.group !6679
  %49 = bitcast double* %forfree64 to i8*
  call void @free(i8* nonnull %49), !dbg !6682
  br label %invertL33

invert.preheader:                                 ; preds = %mergeinvert.preheader_cblas_ddot64_.exit.loopexit, %incinvert.preheader
  %50 = load double, double* %"'de24", align 8, !dbg !6672
  store double 0.000000e+00, double* %"'de24", align 8, !dbg !6672
  %51 = load i64, i64* %"iv'ac", align 8, !dbg !6672
  %arraylen_unwrap = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 10, !dbg !6672
  %_unwrap = add nsw i64 %arraylen_unwrap, -1, !dbg !6672
  %52 = add nuw i64 %_unwrap, 1, !dbg !6672
  %53 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 14, !dbg !6672
  %54 = getelementptr inbounds double, double* %53, i64 %51, !dbg !6672
  %55 = load double, double* %54, align 8, !dbg !6672, !tbaa !1662, !invariant.group !6683
  %56 = fmul fast double %50, %55, !dbg !6672
  %57 = load double, double* %"'de25", align 8, !dbg !6672
  %58 = fadd fast double %57, %56, !dbg !6672
  store double %58, double* %"'de25", align 8, !dbg !6672
  %59 = load i64, i64* %"iv'ac", align 8, !dbg !6672
  %60 = add nuw i64 %_unwrap, 1, !dbg !6672
  %61 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 12, !dbg !6672
  %62 = getelementptr inbounds double, double* %61, i64 %59, !dbg !6672
  %63 = load double, double* %62, align 8, !dbg !6672, !tbaa !1662, !invariant.group !6684
  %64 = fmul fast double %50, %63, !dbg !6672
  %65 = load double, double* %"'de29", align 8, !dbg !6672
  %66 = fadd fast double %65, %64, !dbg !6672
  store double %66, double* %"'de29", align 8, !dbg !6672
  %67 = load double, double* %"'de30", align 8, !dbg !6672
  %68 = fadd fast double %67, %50, !dbg !6672
  store double %68, double* %"'de30", align 8, !dbg !6672
  %69 = load double, double* %"'de29", align 8, !dbg !6672
  store double 0.000000e+00, double* %"'de29", align 8, !dbg !6672
  %70 = load i64, i64* %"iv'ac", align 8, !dbg !6672
  %71 = add nuw i64 %_unwrap, 1, !dbg !6672
  %72 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 13, !dbg !6672
  %73 = getelementptr inbounds i64, i64* %72, i64 %70, !dbg !6672
  %74 = load i64, i64* %73, align 8, !dbg !6672, !invariant.group !6685
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr920'il_phi", i64 %74, !dbg !6672
  %75 = load double, double* %"'ipg_unwrap", align 8, !dbg !6672, !tbaa !1662, !alias.scope !6686, !noalias !6689
  %76 = fadd fast double %75, %69, !dbg !6672
  store double %76, double* %"'ipg_unwrap", align 8, !dbg !6672, !tbaa !1662, !alias.scope !6686, !noalias !6689
  %77 = load double, double* %"'de25", align 8, !dbg !6672
  store double 0.000000e+00, double* %"'de25", align 8, !dbg !6672
  %78 = load i64, i64* %"iv'ac", align 8, !dbg !6672
  %79 = add nuw i64 %_unwrap, 1, !dbg !6672
  %80 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 11, !dbg !6672
  %81 = getelementptr inbounds i64, i64* %80, i64 %78, !dbg !6672
  %82 = load i64, i64* %81, align 8, !dbg !6672, !invariant.group !6691
  %"'ipg36_unwrap" = getelementptr inbounds double, double* %"arrayptr19'il_phi", i64 %82, !dbg !6672
  %83 = load double, double* %"'ipg36_unwrap", align 8, !dbg !6672, !tbaa !1662, !alias.scope !6692, !noalias !6695
  %84 = fadd fast double %83, %77, !dbg !6672
  store double %84, double* %"'ipg36_unwrap", align 8, !dbg !6672, !tbaa !1662, !alias.scope !6692, !noalias !6695
  %85 = load double, double* %"'de30", align 8
  store double 0.000000e+00, double* %"'de30", align 8
  %86 = load i64, i64* %"iv'ac", align 8
  %87 = icmp eq i64 %86, 0
  %88 = xor i1 %87, true
  %89 = select fast i1 %88, double %85, double 0.000000e+00
  %90 = load double, double* %"'de24", align 8
  %91 = fadd fast double %90, %85
  %92 = select fast i1 %87, double %90, double %91
  store double %92, double* %"'de24", align 8
  br i1 %87, label %invert.preheader.preheader, label %incinvert.preheader

incinvert.preheader:                              ; preds = %invert.preheader
  %93 = load i64, i64* %"iv'ac", align 8
  %94 = add nsw i64 %93, -1
  store i64 %94, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit.loopexit:                ; preds = %invertcblas_ddot64_.exit
  %_unwrap45 = add nsw i64 %arraylen, -1
  br label %mergeinvert.preheader_cblas_ddot64_.exit.loopexit

mergeinvert.preheader_cblas_ddot64_.exit.loopexit: ; preds = %invertcblas_ddot64_.exit.loopexit
  store i64 %_unwrap45, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit:                         ; preds = %cblas_ddot64_.exit
  store double %differeturn, double* %"'de", align 8
  %95 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %15, {} addrspace(10)* %"'ip_phi", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !6667
  %96 = load double, double* %"'de", align 8
  store double 0.000000e+00, double* %"'de", align 8
  %97 = xor i1 %.not31, true
  %98 = select fast i1 %97, double %96, double 0.000000e+00
  %99 = load double, double* %"'de24", align 8
  %100 = fadd fast double %99, %96
  %101 = select fast i1 %.not31, double %99, double %100
  store double %101, double* %"'de24", align 8
  br i1 %.not31, label %invertL33, label %invertcblas_ddot64_.exit.loopexit
}

; Function Attrs: mustprogress willreturn
define internal fastcc { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } @augmented_julia__unsafe_setindex__2077.322({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", [1 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) "enzyme_inactive" %2, i64 signext "enzyme_inactive" %3) unnamed_addr #58 !dbg !6729 {
top:
  %4 = alloca { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, align 8
  %5 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %"iv'ac" = alloca i64, align 8
  %loopLimit_cache = alloca i64, align 8
  %newstruct35 = alloca [2 x i64], i64 1, align 8
  %7 = bitcast [2 x i64]* %newstruct35 to i8*
  %_cache = alloca i64*, align 8
  %8 = bitcast i8* %7 to [2 x i64]*, !enzyme_caststack !67
  %9 = call {}*** @julia.get_pgcstack() #67
  %memcpy_refined_src = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]] addrspace(11)* %2, i64 0, i64 0, i64 0
  %10 = load i64, i64 addrspace(11)* %memcpy_refined_src, align 8, !tbaa !72, !invariant.load !67, !alias.scope !6730, !noalias !6733
  %11 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i32 0, i32 2
  store i64 %10, i64* %11, align 8
  %ptls_field40 = getelementptr inbounds {}**, {}*** %9, i64 2
  %12 = bitcast {}*** %ptls_field40 to i64***
  %ptls_load4142 = load i64**, i64*** %12, align 8, !tbaa !68, !alias.scope !6735, !noalias !6738
  %13 = getelementptr inbounds i64*, i64** %ptls_load4142, i64 2
  %safepoint = load i64*, i64** %13, align 8, !tbaa !72, !invariant.load !67, !alias.scope !6740, !noalias !6743
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #67, !dbg !6745
  fence syncscope("singlethread") seq_cst
  %14 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !6746
  %15 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %14) #68, !dbg !6746
  %16 = bitcast {}* %15 to i8**, !dbg !6746
  %arrayptr = load i8*, i8** %16, align 8, !dbg !6746, !tbaa !72, !invariant.load !67, !alias.scope !6752, !noalias !6755, !nonnull !67
  %17 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !6746
  %18 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %17) #68, !dbg !6746
  %19 = bitcast {}* %18 to i8**, !dbg !6746
  %arrayptr3 = load i8*, i8** %19, align 8, !dbg !6746, !tbaa !382, !alias.scope !6757, !noalias !6760, !nonnull !67
  %.not.not = icmp eq i8* %arrayptr, %arrayptr3, !dbg !6762
  %20 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i32 0, i32 3, !dbg !6750
  store i1 %.not.not, i1* %20, align 1, !dbg !6750
  br i1 %.not.not, label %L9, label %L12, !dbg !6750

L9:                                               ; preds = %top
  %21 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'1"), !dbg !6765
  %22 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i32 0, i32 0, !dbg !6765
  store {} addrspace(10)* %21, {} addrspace(10)** %22, align 8, !dbg !6765
  %23 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !6765
  %24 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %23, i32 0, i32 3, !dbg !6765
  %25 = load i16, i16 addrspace(10)* %24, align 2, !dbg !6765
  %26 = zext i16 %25 to i64, !dbg !6765
  %27 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !6765
  %28 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %27, i32 0, i32 1, !dbg !6765
  %29 = load i64, i64 addrspace(10)* %28, align 8, !dbg !6765
  %30 = mul i64 %29, %26, !dbg !6765
  %31 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !6765
  %32 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %31, align 8, !dbg !6765
  %33 = bitcast {} addrspace(10)* %21 to i8 addrspace(13)* addrspace(10)*, !dbg !6765
  %34 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %33, align 8, !dbg !6765
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %34, i8 0, i64 %30, i1 false), !dbg !6765
  %35 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %1) #67, !dbg !6765
  %36 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i32 0, i32 1, !dbg !6750
  store {} addrspace(10)* %35, {} addrspace(10)** %36, align 8, !dbg !6750
  br label %L12, !dbg !6750

L12:                                              ; preds = %L9, %top
  %37 = phi {} addrspace(10)* [ %21, %L9 ], [ %"'1", %top ]
  %value_phi = phi {} addrspace(10)* [ %35, %L9 ], [ %1, %top ]
  %38 = bitcast {} addrspace(10)* %value_phi to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6767
  %39 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %38 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6767
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %39, i64 0, i32 1, !dbg !6767
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6767, !tbaa !315, !range !86, !alias.scope !6770, !noalias !6773
  %.not = icmp eq i64 %arraylen, %10, !dbg !6775
  br i1 %.not, label %L25, label %L22, !dbg !6768

L22:                                              ; preds = %L12
  %memcpy_refined_dst37 = getelementptr inbounds [2 x i64], [2 x i64]* %8, i64 0, i64 0, !dbg !6768
  store i64 %10, i64* %memcpy_refined_dst37, align 8, !dbg !6768, !tbaa !132, !alias.scope !134, !noalias !6776
  %memcpy_refined_dst38 = getelementptr inbounds [2 x i64], [2 x i64]* %8, i64 0, i64 1, !dbg !6768
  store i64 1, i64* %memcpy_refined_dst38, align 8, !dbg !6768, !tbaa !132, !alias.scope !134, !noalias !6776
  %40 = addrspacecast [2 x i64]* %8 to [2 x i64] addrspace(11)*, !dbg !6768
  call fastcc void @julia_throw_setindex_mismatch_2080({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %value_phi, [2 x i64] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %40) #69, !dbg !6768
  unreachable, !dbg !6768

L25:                                              ; preds = %L12
  %.not43 = icmp eq i64 %10, 0, !dbg !6779
  br i1 %.not43, label %L92, label %L42, !dbg !6781

L42:                                              ; preds = %L25
  %"'ipc5" = bitcast {} addrspace(10)* %37 to double addrspace(13)* addrspace(10)*, !dbg !6784
  %41 = bitcast {} addrspace(10)* %value_phi to double addrspace(13)* addrspace(10)*, !dbg !6784
  %"'ipc6" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc5" to double addrspace(13)* addrspace(11)*, !dbg !6784
  %42 = addrspacecast double addrspace(13)* addrspace(10)* %41 to double addrspace(13)* addrspace(11)*, !dbg !6784
  %"arrayptr744'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc6", align 8, !dbg !6784, !tbaa !382, !alias.scope !6785, !noalias !6788, !nonnull !67
  %arrayptr744 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %42, align 8, !dbg !6784, !tbaa !382, !alias.scope !6789, !noalias !6773, !nonnull !67
  %arrayref = load double, double addrspace(13)* %arrayptr744, align 8, !dbg !6784, !tbaa !268, !alias.scope !6790, !noalias !6793
  %43 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*
  %44 = addrspacecast {} addrspace(10)* addrspace(10)* %43 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %44, i64 3
  %45 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*
  %arraysize = load i64, i64 addrspace(11)* %45, align 8, !alias.scope !6795, !noalias !6796
  %46 = add i64 %3, -1
  %47 = mul i64 %arraysize, %46
  %"'ipc" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*
  %48 = bitcast {} addrspace(10)* %0 to double addrspace(13)* addrspace(10)*
  %"'ipc4" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %49 = addrspacecast double addrspace(13)* addrspace(10)* %48 to double addrspace(13)* addrspace(11)*
  %"arrayptr2246'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc4", align 16, !alias.scope !6796, !noalias !6795
  %arrayptr2246 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %49, align 16, !alias.scope !6795, !noalias !6796
  %50 = add i64 %47, -1
  %51 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i32 0, i32 4, !dbg !6797
  store i64 %50, i64* %51, align 8, !dbg !6797
  store i64* null, i64** %_cache, align 8, !dbg !6797
  br label %L54, !dbg !6797

L54:                                              ; preds = %L74, %L42
  %iv = phi i64 [ %iv.next, %L74 ], [ 0, %L42 ]
  %value_phi15.off0 = phi i1 [ false, %L42 ], [ %76, %L74 ]
  %value_phi16 = phi double [ %arrayref, %L42 ], [ %value_phi30, %L74 ]
  %value_phi17 = phi i64 [ 2, %L42 ], [ %value_phi29, %L74 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6799
  %52 = load i64*, i64** %_cache, align 8, !dbg !6799
  %53 = bitcast i64* %52 to i8*, !dbg !6799
  %54 = and i64 %iv.next, 1, !dbg !6799
  %55 = icmp ne i64 %54, 0, !dbg !6799
  %56 = call i64 @llvm.ctpop.i64(i64 %iv.next), !dbg !6799
  %57 = icmp ult i64 %56, 3, !dbg !6799
  %58 = and i1 %57, %55, !dbg !6799
  br i1 %58, label %grow.i, label %__enzyme_exponentialallocationzero.exit, !dbg !6799

grow.i:                                           ; preds = %L54
  %59 = call i64 @llvm.ctlz.i64(i64 %iv.next, i1 true), !dbg !6799
  %60 = sub nuw nsw i64 64, %59, !dbg !6799
  %61 = shl i64 8, %60, !dbg !6799
  %62 = icmp eq i64 %iv.next, 1, !dbg !6799
  %63 = lshr i64 %61, 1, !dbg !6799
  %64 = select i1 %62, i64 0, i64 %63, !dbg !6799
  %65 = call i8* @realloc(i8* %53, i64 %61) #70, !dbg !6799
  %66 = sub i64 %61, %64, !dbg !6799
  %67 = getelementptr inbounds i8, i8* %65, i64 %64, !dbg !6799
  call void @llvm.memset.p0i8.i64(i8* %67, i8 0, i64 %66, i1 false), !dbg !6799
  br label %__enzyme_exponentialallocationzero.exit, !dbg !6799

__enzyme_exponentialallocationzero.exit:          ; preds = %L54, %grow.i
  %68 = phi i8* [ %65, %grow.i ], [ %53, %L54 ], !dbg !6799
  %69 = bitcast i8* %68 to i64*, !dbg !6799
  %70 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i32 0, i32 5, !dbg !6799
  store i64* %69, i64** %70, align 8, !dbg !6799
  store i64* %69, i64** %_cache, align 8, !dbg !6799
  br i1 %value_phi15.off0, label %L92.loopexit, label %L61, !dbg !6799

L61:                                              ; preds = %__enzyme_exponentialallocationzero.exit
  %71 = add i64 %50, %iv.next, !dbg !6801
  %72 = getelementptr inbounds double, double addrspace(13)* %arrayptr2246, i64 %71, !dbg !6801
  store double %value_phi16, double addrspace(13)* %72, align 8, !dbg !6801, !tbaa !268, !alias.scope !6803, !noalias !6806
  %73 = add i64 %value_phi17, -1, !dbg !6808
  %74 = load i64*, i64** %_cache, align 8, !dbg !6812, !dereferenceable !3229, !invariant.group !6814
  %75 = getelementptr inbounds i64, i64* %74, i64 %iv, !dbg !6812
  store i64 %73, i64* %75, align 8, !dbg !6812, !invariant.group !6815
  %76 = icmp uge i64 %73, %10, !dbg !6812
  br i1 %76, label %L74, label %L70, !dbg !6810

L70:                                              ; preds = %L61
  %77 = getelementptr inbounds double, double addrspace(13)* %arrayptr744, i64 %73, !dbg !6816
  %arrayref27 = load double, double addrspace(13)* %77, align 8, !dbg !6816, !tbaa !268, !alias.scope !6790, !noalias !6793
  %78 = add i64 %value_phi17, 1, !dbg !6817
  br label %L74, !dbg !6781

L74:                                              ; preds = %L70, %L61
  %value_phi29 = phi i64 [ %78, %L70 ], [ undef, %L61 ]
  %value_phi30 = phi double [ %arrayref27, %L70 ], [ undef, %L61 ]
  %.not48 = icmp eq i64 %iv.next, %10, !dbg !6818
  br i1 %.not48, label %L92.loopexit, label %L54, !dbg !6821

L92.loopexit:                                     ; preds = %L74, %__enzyme_exponentialallocationzero.exit
  %79 = phi i64 [ %iv, %L74 ], [ %iv, %__enzyme_exponentialallocationzero.exit ], !dbg !6822
  store i64 %79, i64* %loopLimit_cache, align 8, !dbg !6822, !invariant.group !6823
  br label %L92, !dbg !6822

L92:                                              ; preds = %L92.loopexit, %L25
  %80 = load { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, align 8, !dbg !6822
  ret { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %80, !dbg !6822
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia__unsafe_setindex__2077.323({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", [1 x [1 x i64]] addrspace(11)* nocapture readonly align 8 dereferenceable(8) "enzyme_inactive" %2, i64 signext "enzyme_inactive" %3, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg) unnamed_addr #58 !dbg !6824 {
top:
  %"iv'ac" = alloca i64, align 8
  %loopLimit_cache = alloca i64, align 8
  %"arrayref'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %"value_phi16'de" = alloca double, align 8
  %5 = getelementptr double, double* %"value_phi16'de", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"value_phi30'de" = alloca double, align 8
  %6 = getelementptr double, double* %"value_phi30'de", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"arrayref27'de" = alloca double, align 8
  %7 = getelementptr double, double* %"arrayref27'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %_cache33 = alloca i64*, align 8
  %8 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 5
  %mdyncache_fromtape_cache = alloca i64*, align 8
  store i64* %8, i64** %mdyncache_fromtape_cache, align 8
  %9 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %10 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %9, i32 0, i32 3
  %11 = load i16, i16 addrspace(10)* %10, align 2
  %12 = zext i16 %11 to i64
  %13 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %14 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %13, i32 0, i32 1
  %15 = load i64, i64 addrspace(10)* %14, align 8
  %16 = mul i64 %15, %12
  %17 = call {}*** @julia.get_pgcstack() #67
  %18 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 2
  %.not.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 3, !dbg !6825
  br i1 %.not.not, label %L9, label %L12, !dbg !6825

L9:                                               ; preds = %top
  %"'ip_phi3" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 0, !dbg !6827
  %19 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 1, !dbg !6827
  br label %L12, !dbg !6825

L12:                                              ; preds = %L9, %top
  %20 = phi {} addrspace(10)* [ %"'ip_phi3", %L9 ], [ %"'1", %top ]
  br i1 true, label %L25, label %L22, !dbg !6829

L22:                                              ; preds = %L12
  unreachable

L25:                                              ; preds = %L12
  %.not43 = icmp eq i64 %18, 0, !dbg !6831
  br i1 %.not43, label %L92, label %L42, !dbg !6833

L42:                                              ; preds = %L25
  %"'ipc23" = bitcast {} addrspace(10)* %20 to double addrspace(13)* addrspace(10)*, !dbg !6836
  %"'ipc24" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc23" to double addrspace(13)* addrspace(11)*, !dbg !6836
  %"arrayptr744'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc24", align 8, !dbg !6836, !tbaa !382, !alias.scope !6837, !noalias !6840, !nonnull !67, !invariant.group !6842
  %"'ipc" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*
  %"'ipc15" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr2246'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc15", align 16, !alias.scope !6843, !noalias !6846, !invariant.group !6848
  %21 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 4, !dbg !6849
  br label %L54, !dbg !6849

L54:                                              ; preds = %L74, %L42
  %iv = phi i64 [ %iv.next, %L74 ], [ 0, %L42 ]
  %value_phi15.off0 = phi i1 [ false, %L42 ], [ %27, %L74 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6851
  %22 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 5, !dbg !6851
  br i1 %value_phi15.off0, label %L92.loopexit, label %L61, !dbg !6851

L61:                                              ; preds = %L54
  %23 = add i64 %21, %iv.next, !dbg !6853
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr2246'ipl", i64 %23, !dbg !6853
  %24 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dbg !6855, !dereferenceable !3229, !invariant.group !6859
  %25 = getelementptr inbounds i64, i64* %24, i64 %iv, !dbg !6855
  %26 = load i64, i64* %25, align 8, !dbg !6855, !invariant.group !6860
  %27 = icmp uge i64 %26, %18, !dbg !6855
  br i1 %27, label %L74, label %L70, !dbg !6857

L70:                                              ; preds = %L61
  %"'ipg30" = getelementptr inbounds double, double addrspace(13)* %"arrayptr744'ipl", i64 %26, !dbg !6861
  br label %L74, !dbg !6833

L74:                                              ; preds = %L70, %L61
  %.not48 = icmp eq i64 %iv.next, %18, !dbg !6862
  br i1 %.not48, label %L92.loopexit, label %L54, !dbg !6865

L92.loopexit:                                     ; preds = %L74, %L54
  %"value_phi15.off0!manual_lcssa" = phi i1 [ %value_phi15.off0, %L74 ], [ %value_phi15.off0, %L54 ], !dbg !6866
  %28 = phi i64 [ %iv, %L74 ], [ %iv, %L54 ], !dbg !6866
  store i64 %28, i64* %loopLimit_cache, align 8, !dbg !6866, !invariant.group !6867
  br label %L92, !dbg !6866

L92:                                              ; preds = %L92.loopexit, %L25
  br label %invertL92, !dbg !6866

inverttop:                                        ; preds = %invertL12, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL9:                                         ; preds = %invertL12
  %29 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 0, !dbg !6827
  %30 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !6827
  %31 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %30, align 8, !dbg !6827
  %32 = bitcast {} addrspace(10)* %29 to i8 addrspace(13)* addrspace(10)*, !dbg !6827
  %33 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %32, align 8, !dbg !6827
  %34 = bitcast i8 addrspace(13)* %33 to double addrspace(13)*, !dbg !6827
  %35 = bitcast i8 addrspace(13)* %31 to double addrspace(13)*, !dbg !6827
  %36 = udiv i64 %16, 8, !dbg !6827
  %37 = icmp eq i64 %36, 0, !dbg !6827
  br i1 %37, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !6827

for.body.i:                                       ; preds = %for.body.i, %invertL9
  %idx.i = phi i64 [ 0, %invertL9 ], [ %idx.next.i, %for.body.i ], !dbg !6827
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %34, i64 %idx.i, !dbg !6827
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !6827
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !6827
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %35, i64 %idx.i, !dbg !6827
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !6827
  %38 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !6827
  store double %38, double addrspace(13)* %src.i.i, align 1, !dbg !6827
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !6827
  %39 = icmp eq i64 %36, %idx.next.i, !dbg !6827
  br i1 %39, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !6827

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL9, %for.body.i
  br label %inverttop

invertL12:                                        ; preds = %invertL25
  br i1 %.not.not, label %invertL9, label %inverttop

invertL25:                                        ; preds = %invertL92, %invertL42
  br label %invertL12

invertL42:                                        ; preds = %invertL54
  %40 = load double, double* %"arrayref'de", align 8, !dbg !6836
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !6836
  %"'ipc23_unwrap" = bitcast {} addrspace(10)* %20 to double addrspace(13)* addrspace(10)*, !dbg !6836
  %"'ipc24_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc23_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !6836
  %"arrayptr744'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc24_unwrap", align 8, !dbg !6836, !tbaa !382, !alias.scope !6837, !noalias !6840, !nonnull !67
  %41 = load double, double addrspace(13)* %"arrayptr744'il_phi_unwrap", align 8, !dbg !6836, !tbaa !268, !alias.scope !6868, !noalias !6871
  %42 = fadd fast double %41, %40, !dbg !6836
  store double %42, double addrspace(13)* %"arrayptr744'il_phi_unwrap", align 8, !dbg !6836, !tbaa !268, !alias.scope !6868, !noalias !6871
  %43 = load i64, i64* %"iv'ac", align 8
  %44 = load i64, i64* %"iv'ac", align 8
  %forfree40 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dereferenceable !3229, !invariant.group !6859
  %45 = bitcast i64* %forfree40 to i8*
  call void @free(i8* nonnull %45), !dbg !6873
  br label %invertL25

invertL54:                                        ; preds = %mergeinvertL54_L92.loopexit37, %invertL61
  %46 = load double, double* %"value_phi16'de", align 8
  store double 0.000000e+00, double* %"value_phi16'de", align 8
  %47 = load i64, i64* %"iv'ac", align 8
  %48 = icmp eq i64 %47, 0
  %49 = xor i1 %48, true
  %50 = select fast i1 %49, double %46, double 0.000000e+00
  %51 = load double, double* %"value_phi30'de", align 8
  %52 = fadd fast double %51, %46
  %53 = select fast i1 %48, double %51, double %52
  store double %53, double* %"value_phi30'de", align 8
  %54 = select fast i1 %48, double %46, double 0.000000e+00
  %55 = load double, double* %"arrayref'de", align 8
  %56 = fadd fast double %55, %46
  %57 = select fast i1 %48, double %56, double %55
  store double %57, double* %"arrayref'de", align 8
  br i1 %48, label %invertL42, label %incinvertL54

incinvertL54:                                     ; preds = %invertL54
  %58 = load i64, i64* %"iv'ac", align 8
  %59 = add nsw i64 %58, -1
  store i64 %59, i64* %"iv'ac", align 8
  br label %invertL74

invertL61:                                        ; preds = %invertL74, %invertL70
  %60 = load i64, i64* %"iv'ac", align 8, !dbg !6853
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*, !dbg !6853
  %"'ipc15_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !6853
  %"arrayptr2246'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc15_unwrap", align 16, !alias.scope !6843, !noalias !6846, !invariant.group !6848
  %_unwrap41 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 4, !dbg !6853
  %iv.next_unwrap = add nuw nsw i64 %60, 1, !dbg !6853
  %_unwrap = add i64 %_unwrap41, %iv.next_unwrap, !dbg !6853
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr2246'ipl_unwrap", i64 %_unwrap, !dbg !6853
  %61 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !6853, !tbaa !268, !alias.scope !6874, !noalias !6877
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !6853, !tbaa !268, !alias.scope !6874, !noalias !6877
  %62 = load double, double* %"value_phi16'de", align 8, !dbg !6853
  %63 = fadd fast double %62, %61, !dbg !6853
  store double %63, double* %"value_phi16'de", align 8, !dbg !6853
  br label %invertL54

invertL70:                                        ; preds = %invertL74
  %64 = load double, double* %"arrayref27'de", align 8, !dbg !6861
  store double 0.000000e+00, double* %"arrayref27'de", align 8, !dbg !6861
  %65 = load i64, i64* %"iv'ac", align 8, !dbg !6861
  %"'ipc23_unwrap31" = bitcast {} addrspace(10)* %20 to double addrspace(13)* addrspace(10)*, !dbg !6861
  %"'ipc24_unwrap32" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc23_unwrap31" to double addrspace(13)* addrspace(11)*, !dbg !6861
  %"arrayptr744'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc24_unwrap32", align 8, !dbg !6836, !tbaa !382, !alias.scope !6837, !noalias !6840, !nonnull !67, !invariant.group !6842
  %66 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 5, !dbg !6861
  %67 = getelementptr inbounds i64, i64* %66, i64 %65, !dbg !6861
  %68 = load i64, i64* %67, align 8, !dbg !6861, !invariant.group !6879
  %"'ipg30_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr744'ipl_unwrap", i64 %68, !dbg !6861
  %69 = load double, double addrspace(13)* %"'ipg30_unwrap", align 8, !dbg !6861, !tbaa !268, !alias.scope !6868, !noalias !6871
  %70 = fadd fast double %69, %64, !dbg !6861
  store double %70, double addrspace(13)* %"'ipg30_unwrap", align 8, !dbg !6861, !tbaa !268, !alias.scope !6868, !noalias !6871
  br label %invertL61

invertL74:                                        ; preds = %mergeinvertL54_L92.loopexit, %incinvertL54
  %71 = load double, double* %"value_phi30'de", align 8
  store double 0.000000e+00, double* %"value_phi30'de", align 8
  %72 = load i64, i64* %"iv'ac", align 8
  %73 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 5
  %74 = getelementptr inbounds i64, i64* %73, i64 %72
  %75 = load i64, i64* %74, align 8, !invariant.group !6879
  %_unwrap36 = icmp uge i64 %75, %18
  %76 = xor i1 %_unwrap36, true
  %77 = select fast i1 %76, double %71, double 0.000000e+00
  %78 = load double, double* %"arrayref27'de", align 8
  %79 = fadd fast double %78, %71
  %80 = select fast i1 %_unwrap36, double %78, double %79
  store double %80, double* %"arrayref27'de", align 8
  br i1 %_unwrap36, label %invertL61, label %invertL70

invertL92.loopexit:                               ; preds = %invertL92
  %81 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !6867
  %82 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !6867
  %83 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !6867
  %84 = icmp ne i64 %83, 0
  br i1 %84, label %invertL92.loopexit_phirc, label %invertL92.loopexit_phirc39

invertL92.loopexit_phirc:                         ; preds = %invertL92.loopexit
  %85 = sub nuw i64 %83, 1
  %86 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 5
  %87 = getelementptr inbounds i64, i64* %86, i64 %85
  %88 = load i64, i64* %87, align 8, !invariant.group !6879
  %_unwrap38 = icmp uge i64 %88, %18
  br label %invertL92.loopexit_phimerge

invertL92.loopexit_phirc39:                       ; preds = %invertL92.loopexit
  br label %invertL92.loopexit_phimerge

invertL92.loopexit_phimerge:                      ; preds = %invertL92.loopexit_phirc39, %invertL92.loopexit_phirc
  %89 = phi i1 [ %_unwrap38, %invertL92.loopexit_phirc ], [ false, %invertL92.loopexit_phirc39 ]
  br i1 %89, label %mergeinvertL54_L92.loopexit37, label %mergeinvertL54_L92.loopexit

mergeinvertL54_L92.loopexit37:                    ; preds = %invertL92.loopexit_phimerge
  store i64 %82, i64* %"iv'ac", align 8
  br label %invertL54

mergeinvertL54_L92.loopexit:                      ; preds = %invertL92.loopexit_phimerge
  store i64 %81, i64* %"iv'ac", align 8
  br label %invertL74

invertL92:                                        ; preds = %L92
  br i1 %.not43, label %invertL25, label %invertL92.loopexit
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia_compute_energy_2128([3 x double]* noalias nocapture nofree noundef nonnull writeonly sret([3 x double]) align 8 dereferenceable(24) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2) unnamed_addr #67 !dbg !6911 {
top:
  %3 = call {}*** @julia.get_pgcstack()
  %4 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !3229
  %newstruct12 = bitcast i8* %4 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %5 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !3229
  %newstruct2 = bitcast i8* %5 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %6 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !3229
  %newstruct16 = bitcast i8* %6 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %7 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !3229
  %newstruct = bitcast i8* %7 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %8 = bitcast {}*** %3 to {}**
  %9 = getelementptr inbounds {}*, {}** %8, i64 -14
  %10 = getelementptr inbounds {}*, {}** %9, i64 16
  %11 = bitcast {}** %10 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) {} addrspace(10)* @julia.gc_alloc_obj({}** %9, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !enzyme_fromstack !3229
  call void @zeroType.328({} addrspace(10)* %13, i8 0, i64 8), !enzyme_zerostack !67
  %14 = bitcast {} addrspace(10)* %13 to [1 x {} addrspace(10)*] addrspace(10)*, !enzyme_caststack !67
  %15 = call {}*** @julia.get_pgcstack() #68
  %ptls_field31 = getelementptr inbounds {}**, {}*** %15, i64 2
  %16 = bitcast {}*** %ptls_field31 to i64***
  %ptls_load3233 = load i64**, i64*** %16, align 8, !tbaa !68
  %17 = getelementptr inbounds i64*, i64** %ptls_load3233, i64 2
  %safepoint = load i64*, i64** %17, align 8, !tbaa !72, !invariant.load !67
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #68, !dbg !6912
  fence syncscope("singlethread") seq_cst
  %18 = bitcast [1 x [2 x i64]]* %newstruct to i8*, !dbg !6913
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %18, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const13 to i8*), i64 noundef 16, i1 noundef false) #68, !dbg !6913, !tbaa !85, !alias.scope !1680, !noalias !6916
  %19 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6919
  %20 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %19 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6919
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %20, i64 0, i32 1, !dbg !6919
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6919, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %21 = icmp ult i64 %arraylen, 6, !dbg !6925
  br i1 %21, label %L19, label %L22, !dbg !6924

L19:                                              ; preds = %top
  %22 = addrspacecast [1 x [2 x i64]]* %newstruct to [1 x [2 x i64]] addrspace(11)*, !dbg !6924
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %22) #69, !dbg !6924
  unreachable, !dbg !6924

L22:                                              ; preds = %top
  %23 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #70, !dbg !6928
  call fastcc void @julia__copyto_impl__2143({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %23, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, i64 noundef signext 4) #68, !dbg !6933
  %24 = bitcast [1 x [2 x i64]]* %newstruct2 to i8*, !dbg !6913
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %24, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const13 to i8*), i64 noundef 16, i1 noundef false) #68, !dbg !6913, !tbaa !85, !alias.scope !1680, !noalias !6916
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6919, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %25 = icmp ult i64 %arraylen4, 6, !dbg !6925
  br i1 %25, label %L51, label %L54, !dbg !6924

L51:                                              ; preds = %L22
  %26 = addrspacecast [1 x [2 x i64]]* %newstruct2 to [1 x [2 x i64]] addrspace(11)*, !dbg !6924
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %26) #69, !dbg !6924
  unreachable, !dbg !6924

L54:                                              ; preds = %L22
  %27 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #70, !dbg !6928
  call fastcc void @julia__copyto_impl__2143({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %27, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, i64 noundef signext 4) #68, !dbg !6933
  %28 = bitcast {} addrspace(10)* %23 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6935
  %29 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %28 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6935
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %29, i64 0, i32 1, !dbg !6935
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !6935, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %30 = bitcast {} addrspace(10)* %27 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6935
  %31 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %30 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6935
  %arraylen_ptr8 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %31, i64 0, i32 1, !dbg !6935
  %arraylen9 = load i64, i64 addrspace(11)* %arraylen_ptr8, align 8, !dbg !6935, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not = icmp eq i64 %arraylen7, %arraylen9, !dbg !6939
  br i1 %.not, label %L69, label %L75, !dbg !6940

L69:                                              ; preds = %L54
  %32 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %23, {} addrspace(10)* nonnull %27) #68, !dbg !6941
  %33 = addrspacecast {} addrspace(10)* %23 to {} addrspace(11)*, !dbg !6942
  %34 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %33) #71, !dbg !6942
  %35 = bitcast {}* %34 to double**, !dbg !6942
  %arrayptr34 = load double*, double** %35, align 8, !dbg !6942, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %36 = addrspacecast {} addrspace(10)* %27 to {} addrspace(11)*, !dbg !6942
  %37 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %36) #71, !dbg !6942
  %38 = bitcast {}* %37 to double**, !dbg !6942
  %arrayptr1135 = load double*, double** %38, align 8, !dbg !6942, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %.not58 = icmp eq i64 %arraylen7, 0, !dbg !6946
  br i1 %.not58, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !6946

.preheader.preheader:                             ; preds = %L69
  br label %.preheader, !dbg !6946

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !6946
  %39 = phi i64 [ %52, %.preheader ], [ 0, %.preheader.preheader ], !dbg !6946
  %40 = phi i64 [ %51, %.preheader ], [ 0, %.preheader.preheader ], !dbg !6946
  %41 = phi double [ %50, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !6946
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6946
  %42 = shl i64 %40, 32, !dbg !6946
  %43 = ashr exact i64 %42, 32, !dbg !6946
  %44 = getelementptr inbounds double, double* %arrayptr34, i64 %43, !dbg !6946
  %45 = load double, double* %44, align 8, !dbg !6946, !tbaa !1662
  %46 = shl i64 %39, 32, !dbg !6946
  %47 = ashr exact i64 %46, 32, !dbg !6946
  %48 = getelementptr inbounds double, double* %arrayptr1135, i64 %47, !dbg !6946
  %49 = load double, double* %48, align 8, !dbg !6946, !tbaa !1662
  %50 = call double @llvm.fmuladd.f64(double %45, double %49, double %41) #68, !dbg !6946
  %51 = add nsw i64 %43, 1, !dbg !6946
  %52 = add nsw i64 %47, 1, !dbg !6946
  %53 = icmp eq i64 %iv.next, %arraylen7, !dbg !6946
  br i1 %53, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !6946, !llvm.loop !6947

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  %phi.bo = fmul double %50, 5.000000e-01, !dbg !6941
  br label %cblas_ddot64_.exit, !dbg !6941

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L69
  %54 = phi double [ 0.000000e+00, %L69 ], [ %phi.bo, %cblas_ddot64_.exit.loopexit ]
  call void @llvm.julia.gc_preserve_end(token %32) #68, !dbg !6941
  %55 = bitcast [1 x [2 x i64]]* %newstruct12 to i8*, !dbg !6948
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %55, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const14 to i8*), i64 noundef 16, i1 noundef false) #68, !dbg !6948, !tbaa !85, !alias.scope !1680, !noalias !6916
  %arraylen14 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6951, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %56 = icmp ult i64 %arraylen14, 3, !dbg !6957
  br i1 %56, label %L101, label %L104, !dbg !6956

L75:                                              ; preds = %L54
  %current_task2236 = getelementptr inbounds {}**, {}*** %15, i64 -14, !dbg !6960
  %current_task22 = bitcast {}*** %current_task2236 to {}**, !dbg !6960
  %newstruct23 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #72, !dbg !6960
  %57 = bitcast {} addrspace(10)* %newstruct23 to {} addrspace(10)* addrspace(10)*, !dbg !6960
  %58 = addrspacecast {} addrspace(10)* addrspace(10)* %57 to {} addrspace(10)* addrspace(11)*, !dbg !6960
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %58, align 8, !dbg !6960, !tbaa !865, !alias.scope !116, !noalias !6961
  %59 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %58, i64 1, !dbg !6960
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %59, align 8, !dbg !6960, !tbaa !865, !alias.scope !116, !noalias !6961
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #72, !dbg !6960
  %60 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !6960
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %60, i64 0, i32 0, !dbg !6960
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859290304 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !6960, !tbaa !112, !alias.scope !116, !noalias !6961
  %.repack38 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %60, i64 0, i32 1, !dbg !6960
  store i64 %arraylen7, i64 addrspace(10)* %.repack38, align 8, !dbg !6960, !tbaa !112, !alias.scope !116, !noalias !6961
  %.repack40 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %60, i64 0, i32 2, !dbg !6960
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859290272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack40, align 8, !dbg !6960, !tbaa !112, !alias.scope !116, !noalias !6961
  %.repack42 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %60, i64 0, i32 3, !dbg !6960
  store i64 %arraylen9, i64 addrspace(10)* %.repack42, align 8, !dbg !6960, !tbaa !112, !alias.scope !116, !noalias !6961
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %58 release, align 8, !dbg !6960, !tbaa !865, !alias.scope !116, !noalias !6961
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct23, {} addrspace(10)* nofree nonnull %box) #73, !dbg !6960
  %61 = bitcast {} addrspace(10)* %newstruct23 to i8 addrspace(10)*, !dbg !6960
  %62 = addrspacecast i8 addrspace(10)* %61 to i8 addrspace(11)*, !dbg !6960
  %63 = getelementptr inbounds i8, i8 addrspace(11)* %62, i64 8, !dbg !6960
  %64 = bitcast i8 addrspace(11)* %63 to {} addrspace(10)* addrspace(11)*, !dbg !6960
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %64 release, align 8, !dbg !6960, !tbaa !865, !alias.scope !116, !noalias !6961
  %box26 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #72, !dbg !6940
  %65 = bitcast {} addrspace(10)* %box26 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !6940
  %66 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %65, i64 0, i64 0, !dbg !6940
  store {} addrspace(10)* %newstruct23, {} addrspace(10)* addrspace(10)* %66, align 8, !dbg !6940, !tbaa !112, !alias.scope !116, !noalias !6961
  %67 = addrspacecast {} addrspace(10)* %box26 to {} addrspace(12)*, !dbg !6940
  call void @ijl_throw({} addrspace(12)* %67) #69, !dbg !6940
  unreachable, !dbg !6940

L101:                                             ; preds = %cblas_ddot64_.exit
  %68 = addrspacecast [1 x [2 x i64]]* %newstruct12 to [1 x [2 x i64]] addrspace(11)*, !dbg !6956
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %68) #69, !dbg !6956
  unreachable, !dbg !6956

L104:                                             ; preds = %cblas_ddot64_.exit
  %69 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #70, !dbg !6962
  call fastcc void @julia__copyto_impl__2143({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %69, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, i64 noundef signext 1) #68, !dbg !6967
  %70 = call fastcc nonnull {} addrspace(10)* @julia___2136({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %69) #68, !dbg !6969
  %71 = bitcast [1 x [2 x i64]]* %newstruct16 to i8*, !dbg !6948
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %71, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const14 to i8*), i64 noundef 16, i1 noundef false) #68, !dbg !6948, !tbaa !85, !alias.scope !1680, !noalias !6916
  %arraylen18 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6951, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %72 = icmp ult i64 %arraylen18, 3, !dbg !6957
  br i1 %72, label %L135, label %L138, !dbg !6956

L135:                                             ; preds = %L104
  %73 = addrspacecast [1 x [2 x i64]]* %newstruct16 to [1 x [2 x i64]] addrspace(11)*, !dbg !6956
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %73) #69, !dbg !6956
  unreachable, !dbg !6956

L138:                                             ; preds = %L104
  %74 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #70, !dbg !6962
  call fastcc void @julia__copyto_impl__2143({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %74, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, i64 noundef signext 1) #68, !dbg !6967
  %75 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %14, i64 0, i64 0, !dbg !6950
  store {} addrspace(10)* %70, {} addrspace(10)* addrspace(10)* %75, align 8, !dbg !6950, !noalias !6970
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %13, {} addrspace(10)* %70), !dbg !6950
  %76 = addrspacecast [1 x {} addrspace(10)*] addrspace(10)* %14 to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !6950
  %77 = call fastcc double @julia___1993([1 x {} addrspace(10)*] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %76, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %74) #68, !dbg !6950
  %78 = fmul double %77, 5.000000e-01, !dbg !6971
  %79 = fadd double %54, %78, !dbg !6972
  %newstruct20.sroa.0.0..sroa_idx = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 0, !dbg !6973
  store double %54, double* %newstruct20.sroa.0.0..sroa_idx, align 8, !dbg !6973, !noalias !6970
  %newstruct20.sroa.2.0..sroa_idx45 = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 1, !dbg !6973
  store double %78, double* %newstruct20.sroa.2.0..sroa_idx45, align 8, !dbg !6973, !noalias !6970
  %newstruct20.sroa.3.0..sroa_idx46 = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 2, !dbg !6973
  store double %79, double* %newstruct20.sroa.3.0..sroa_idx46, align 8, !dbg !6973, !noalias !6970
  ret void, !dbg !6973
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia__copyto_impl__2143({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, i64 noundef signext "enzyme_inactive" %2) unnamed_addr #68 !dbg !7052 {
top:
  %3 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !3229
  %newstruct2 = bitcast i8* %3 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %4 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !3229
  %newstruct5 = bitcast i8* %4 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %5 = call {}*** @julia.get_pgcstack() #69
  %ptls_field15 = getelementptr inbounds {}**, {}*** %5, i64 2
  %6 = bitcast {}*** %ptls_field15 to i64***
  %ptls_load1617 = load i64**, i64*** %6, align 8, !tbaa !68
  %7 = getelementptr inbounds i64*, i64** %ptls_load1617, i64 2
  %safepoint = load i64*, i64** %7, align 8, !tbaa !72, !invariant.load !67
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #69, !dbg !7053
  fence syncscope("singlethread") seq_cst
  %newstruct.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct2, i64 0, i64 0, i64 0, !dbg !7054
  store i64 1, i64* %newstruct.sroa.0.0..sroa_idx, align 8, !dbg !7054, !tbaa !132, !alias.scope !134, !noalias !7056
  %newstruct.sroa.2.0..sroa_idx22 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct2, i64 0, i64 0, i64 1, !dbg !7054
  store i64 3, i64* %newstruct.sroa.2.0..sroa_idx22, align 8, !dbg !7054, !tbaa !132, !alias.scope !134, !noalias !7056
  %8 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7059
  %9 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %8 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7059
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %9, i64 0, i32 1, !dbg !7059
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7059, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %10 = icmp ugt i64 %arraylen, 2, !dbg !7065
  br i1 %10, label %L40, label %L36, !dbg !7064

L36:                                              ; preds = %top
  %11 = addrspacecast [1 x [2 x i64]]* %newstruct2 to [1 x [2 x i64]] addrspace(11)*, !dbg !7064
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %11) #70, !dbg !7064
  unreachable, !dbg !7064

L40:                                              ; preds = %top
  %12 = add i64 %2, -1, !dbg !7068
  %13 = add i64 %2, 2, !dbg !7070
  %.not19 = icmp sgt i64 %2, 9223372036854775805, !dbg !7071
  %value_phi3 = select i1 %.not19, i64 %12, i64 %13, !dbg !7073
  %newstruct4.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct5, i64 0, i64 0, i64 0, !dbg !7076
  store i64 %2, i64* %newstruct4.sroa.0.0..sroa_idx, align 8, !dbg !7076, !tbaa !132, !alias.scope !134, !noalias !7056
  %newstruct4.sroa.2.0..sroa_idx21 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct5, i64 0, i64 0, i64 1, !dbg !7076
  store i64 %value_phi3, i64* %newstruct4.sroa.2.0..sroa_idx21, align 8, !dbg !7076, !tbaa !132, !alias.scope !134, !noalias !7056
  %14 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7077
  %15 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %14 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7077
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %15, i64 0, i32 1, !dbg !7077
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !7077, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %16 = icmp slt i64 %value_phi3, %2, !dbg !7083
  %17 = icmp ult i64 %12, %arraylen7, !dbg !7087
  %18 = add i64 %value_phi3, -1, !dbg !7089
  %19 = icmp ult i64 %18, %arraylen7, !dbg !7087
  %20 = and i1 %17, %19, !dbg !7090
  %21 = or i1 %16, %20, !dbg !7091
  br i1 %21, label %L71, label %L68, !dbg !7082

L68:                                              ; preds = %L40
  %22 = addrspacecast [1 x [2 x i64]]* %newstruct5 to [1 x [2 x i64]] addrspace(11)*, !dbg !7082
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %22) #70, !dbg !7082
  unreachable, !dbg !7082

L71:                                              ; preds = %L40
  %23 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %0) #69, !dbg !7092
  %24 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %1) #69, !dbg !7094
  %25 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !7095
  %26 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %25) #71, !dbg !7095
  %27 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !7098
  %28 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %27) #71, !dbg !7098
  %29 = bitcast {}* %28 to i8**, !dbg !7098
  %arrayptr10 = load i8*, i8** %29, align 8, !dbg !7098, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %30 = shl i64 %2, 3, !dbg !7101
  %31 = add i64 %30, -8, !dbg !7101
  %32 = getelementptr i8, i8* %arrayptr10, i64 %31, !dbg !7103
  %33 = bitcast {}* %26 to i8**, !dbg !7095
  %arrayptr = load i8*, i8** %33, align 8, !dbg !7095, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(24) %arrayptr, i8* noundef nonnull align 1 dereferenceable(24) %32, i64 noundef 24, i1 noundef false) #69, !dbg !7104, !noalias !7106
  call void @llvm.julia.gc_preserve_end(token %24) #69, !dbg !7107
  call void @llvm.julia.gc_preserve_end(token %23) #69, !dbg !7108
  ret void, !dbg !7109
}

; Function Attrs: mustprogress willreturn
define internal fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", i64 noundef signext "enzyme_inactive" %2) unnamed_addr #68 !dbg !7110 {
top:
  %3 = alloca { i8*, i8* }, align 8
  %newstruct5 = alloca [1 x [2 x i64]], i64 1, align 8
  %4 = bitcast [1 x [2 x i64]]* %newstruct5 to i8*
  %newstruct2 = alloca [1 x [2 x i64]], i64 1, align 8
  %5 = bitcast [1 x [2 x i64]]* %newstruct2 to i8*
  %6 = bitcast i8* %5 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %7 = bitcast i8* %4 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %8 = call {}*** @julia.get_pgcstack() #69
  %ptls_field15 = getelementptr inbounds {}**, {}*** %8, i64 2
  %9 = bitcast {}*** %ptls_field15 to i64***
  %ptls_load1617 = load i64**, i64*** %9, align 8, !tbaa !68, !alias.scope !7111, !noalias !7114
  %10 = getelementptr inbounds i64*, i64** %ptls_load1617, i64 2
  %safepoint = load i64*, i64** %10, align 8, !tbaa !72, !invariant.load !67, !alias.scope !7116, !noalias !7119
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #69, !dbg !7121
  fence syncscope("singlethread") seq_cst
  %newstruct.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %6, i64 0, i64 0, i64 0, !dbg !7122
  store i64 1, i64* %newstruct.sroa.0.0..sroa_idx, align 8, !dbg !7122, !tbaa !132, !alias.scope !134, !noalias !7124
  %newstruct.sroa.2.0..sroa_idx22 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %6, i64 0, i64 0, i64 1, !dbg !7122
  store i64 3, i64* %newstruct.sroa.2.0..sroa_idx22, align 8, !dbg !7122, !tbaa !132, !alias.scope !134, !noalias !7124
  %11 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7127
  %12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7127
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %12, i64 0, i32 1, !dbg !7127
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7127, !tbaa !315, !range !86, !alias.scope !7133, !noalias !7136
  %13 = icmp ugt i64 %arraylen, 2, !dbg !7138
  br i1 %13, label %L40, label %L36, !dbg !7132

L36:                                              ; preds = %top
  %14 = addrspacecast [1 x [2 x i64]]* %6 to [1 x [2 x i64]] addrspace(11)*, !dbg !7132
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %14) #70, !dbg !7132
  unreachable, !dbg !7132

L40:                                              ; preds = %top
  %15 = add i64 %2, -1, !dbg !7141
  %16 = add i64 %2, 2, !dbg !7143
  %.not19 = icmp sgt i64 %2, 9223372036854775805, !dbg !7144
  %value_phi3 = select i1 %.not19, i64 %15, i64 %16, !dbg !7146
  %newstruct4.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %7, i64 0, i64 0, i64 0, !dbg !7149
  store i64 %2, i64* %newstruct4.sroa.0.0..sroa_idx, align 8, !dbg !7149, !tbaa !132, !alias.scope !134, !noalias !7124
  %newstruct4.sroa.2.0..sroa_idx21 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %7, i64 0, i64 0, i64 1, !dbg !7149
  store i64 %value_phi3, i64* %newstruct4.sroa.2.0..sroa_idx21, align 8, !dbg !7149, !tbaa !132, !alias.scope !134, !noalias !7124
  %17 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7150
  %18 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7150
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %18, i64 0, i32 1, !dbg !7150
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !7150, !tbaa !315, !range !86, !alias.scope !7156, !noalias !7159
  %19 = icmp slt i64 %value_phi3, %2, !dbg !7161
  %20 = icmp ult i64 %15, %arraylen7, !dbg !7165
  %21 = add i64 %value_phi3, -1, !dbg !7167
  %22 = icmp ult i64 %21, %arraylen7, !dbg !7165
  %23 = and i1 %20, %22, !dbg !7168
  %24 = or i1 %19, %23, !dbg !7169
  br i1 %24, label %L71, label %L68, !dbg !7155

L68:                                              ; preds = %L40
  %25 = addrspacecast [1 x [2 x i64]]* %7 to [1 x [2 x i64]] addrspace(11)*, !dbg !7155
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %25) #70, !dbg !7155
  unreachable, !dbg !7155

L71:                                              ; preds = %L40
  %26 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !7170
  %27 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !7172
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !7173
  %28 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !7173
  %29 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !7173
  %30 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %28) #71, !dbg !7173
  %"'ipc4" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !7176
  %31 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !7176
  %32 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc4"), !dbg !7176
  %33 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %31) #71, !dbg !7176
  %"'ipc3" = bitcast {}* %32 to i8**, !dbg !7176
  %34 = bitcast {}* %33 to i8**, !dbg !7176
  %"arrayptr10'ipl" = load i8*, i8** %"'ipc3", align 8, !dbg !7176, !tbaa !382, !alias.scope !7179, !noalias !7180, !nonnull !67
  %35 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %3, i32 0, i32 1, !dbg !7176
  store i8* %"arrayptr10'ipl", i8** %35, align 8, !dbg !7176
  %arrayptr10 = load i8*, i8** %34, align 8, !dbg !7176, !tbaa !382, !alias.scope !7156, !noalias !7159, !nonnull !67
  %36 = shl i64 %2, 3, !dbg !7181
  %37 = add i64 %36, -8, !dbg !7181
  %"'ipg" = getelementptr i8, i8* %"arrayptr10'ipl", i64 %37, !dbg !7183
  %38 = getelementptr i8, i8* %arrayptr10, i64 %37, !dbg !7183
  %"'ipc" = bitcast {}* %29 to i8**, !dbg !7173
  %39 = bitcast {}* %30 to i8**, !dbg !7173
  %"arrayptr'ipl" = load i8*, i8** %"'ipc", align 8, !dbg !7173, !tbaa !382, !alias.scope !7184, !noalias !7185, !nonnull !67
  %40 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %3, i32 0, i32 0, !dbg !7173
  store i8* %"arrayptr'ipl", i8** %40, align 8, !dbg !7173
  %arrayptr = load i8*, i8** %39, align 8, !dbg !7173, !tbaa !382, !alias.scope !7133, !noalias !7136, !nonnull !67
  call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(24) %arrayptr, i8* noundef nonnull align 1 dereferenceable(24) %38, i64 noundef 24, i1 noundef false) #69, !dbg !7186, !noalias !7188
  call void @llvm.julia.gc_preserve_end(token %27) #69, !dbg !7189
  call void @llvm.julia.gc_preserve_end(token %26) #69, !dbg !7190
  %41 = load { i8*, i8* }, { i8*, i8* }* %3, align 8, !dbg !7191
  ret { i8*, i8* } %41, !dbg !7191
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia___2136({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0) unnamed_addr #69 !dbg !7216 {
top:
  %1 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) i8* @malloc(i64 8), !enzyme_fromstack !3229
  %newstruct2 = bitcast i8* %1 to [1 x [1 x i64]]*, !enzyme_caststack !67
  %2 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) i8* @malloc(i64 8), !enzyme_fromstack !3229
  %newstruct27 = bitcast i8* %2 to [1 x [1 x i64]]*, !enzyme_caststack !67
  %3 = call {}*** @julia.get_pgcstack() #70
  %ptls_field30 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field30 to i64***
  %ptls_load3132 = load i64**, i64*** %4, align 8, !tbaa !68
  %5 = getelementptr inbounds i64*, i64** %ptls_load3132, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !72, !invariant.load !67
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #70, !dbg !7217
  fence syncscope("singlethread") seq_cst
  %6 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7218
  %7 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %6 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7218
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %7, i64 0, i32 1, !dbg !7218
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7218, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %memcpy_refined_dst = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct2, i64 0, i64 0, i64 0, !dbg !7224
  store i64 %arraylen, i64* %memcpy_refined_dst, align 8, !dbg !7224, !tbaa !132, !alias.scope !134, !noalias !7225
  %8 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraylen) #71, !dbg !7228
  %9 = bitcast {} addrspace(10)* %8 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7236
  %10 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %9 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7236
  %arraylen_ptr3 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %10, i64 0, i32 1, !dbg !7236
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr3, align 8, !dbg !7236, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  %.not = icmp eq i64 %arraylen4, %arraylen, !dbg !7240
  br i1 %.not, label %L18, label %L87, !dbg !7238

L18:                                              ; preds = %top
  %11 = addrspacecast {} addrspace(10)* %8 to {} addrspace(11)*, !dbg !7244
  %12 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !7244
  %.not33 = icmp eq {} addrspace(11)* %11, %12, !dbg !7244
  br i1 %.not33, label %L34, label %L21, !dbg !7244

L21:                                              ; preds = %L18
  %13 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %11) #72, !dbg !7249
  %14 = bitcast {}* %13 to i8**, !dbg !7249
  %arrayptr19 = load i8*, i8** %14, align 8, !dbg !7249, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %15 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %12) #72, !dbg !7249
  %16 = bitcast {}* %15 to i8**, !dbg !7249
  %arrayptr21 = load i8*, i8** %16, align 8, !dbg !7249, !tbaa !382, !alias.scope !318, !noalias !319, !nonnull !67
  %.not39.not = icmp eq i8* %arrayptr19, %arrayptr21, !dbg !7254
  br i1 %.not39.not, label %L29, label %L34, !dbg !7253

L29:                                              ; preds = %L21
  %17 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %0) #70, !dbg !7257
  %.phi.trans.insert = bitcast {} addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert45 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr7.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert45, i64 0, i32 1
  %arraylen8.pre = load i64, i64 addrspace(11)* %arraylen_ptr7.phi.trans.insert, align 8, !dbg !7259, !tbaa !315, !range !86, !alias.scope !318, !noalias !319
  br label %L34, !dbg !7253

L34:                                              ; preds = %L29, %L21, %L18
  %arraylen8 = phi i64 [ %arraylen8.pre, %L29 ], [ %arraylen, %L18 ], [ %arraylen, %L21 ], !dbg !7259
  %value_phi6 = phi {} addrspace(10)* [ %17, %L29 ], [ %0, %L18 ], [ %0, %L21 ]
  %.not36 = icmp eq i64 %arraylen8, 1, !dbg !7263
  %.not34 = icmp eq i64 %arraylen, 0, !dbg !7267
  br i1 %.not34, label %L98, label %L81.lr.ph, !dbg !7268

L81.lr.ph:                                        ; preds = %L34
  %18 = bitcast {} addrspace(10)* %value_phi6 to double addrspace(13)* addrspace(10)*
  %19 = addrspacecast double addrspace(13)* addrspace(10)* %18 to double addrspace(13)* addrspace(11)*
  %arrayptr37 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %19, align 8, !tbaa !382, !alias.scope !7270, !noalias !319, !nonnull !67
  %20 = bitcast {} addrspace(10)* %8 to double addrspace(13)* addrspace(10)*
  %21 = addrspacecast double addrspace(13)* addrspace(10)* %20 to double addrspace(13)* addrspace(11)*
  %arrayptr1538 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %21, align 8, !tbaa !382, !alias.scope !7270, !noalias !319, !nonnull !67
  br label %L81, !dbg !7271

L81:                                              ; preds = %L81, %L81.lr.ph
  %iv = phi i64 [ %iv.next, %L81 ], [ 0, %L81.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7272
  %22 = select i1 %.not36, i64 0, i64 %iv, !dbg !7272
  %23 = getelementptr inbounds double, double addrspace(13)* %arrayptr37, i64 %22, !dbg !7272
  %arrayref = load double, double addrspace(13)* %23, align 8, !dbg !7272, !tbaa !268, !alias.scope !116, !noalias !270
  %24 = fneg double %arrayref, !dbg !7279
  %25 = getelementptr inbounds double, double addrspace(13)* %arrayptr1538, i64 %iv, !dbg !7282
  store double %24, double addrspace(13)* %25, align 8, !dbg !7282, !tbaa !268, !alias.scope !116, !noalias !7283
  %exitcond.not = icmp eq i64 %iv.next, %arraylen, !dbg !7284
  br i1 %exitcond.not, label %L98.loopexit, label %L81, !dbg !7271, !llvm.loop !7285

L87:                                              ; preds = %top
  %26 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct27, i64 0, i64 0, i64 0, !dbg !7286
  store i64 %arraylen4, i64* %26, align 8, !dbg !7286, !tbaa !132, !alias.scope !134, !noalias !7225
  %27 = addrspacecast [1 x [1 x i64]]* %newstruct27 to [1 x [1 x i64]] addrspace(11)*, !dbg !7238
  %28 = addrspacecast [1 x [1 x i64]]* %newstruct2 to [1 x [1 x i64]] addrspace(11)*, !dbg !7238
  call fastcc void @julia_throwdm_1980([1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %27, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %28) #73, !dbg !7238
  unreachable, !dbg !7238

L98.loopexit:                                     ; preds = %L81
  br label %L98, !dbg !7217

L98:                                              ; preds = %L98.loopexit, %L34
  ret {} addrspace(10)* %8, !dbg !7217
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2136({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'") unnamed_addr #69 !dbg !7290 {
top:
  %1 = alloca { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %2 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %1, i32 0, i32 0
  %3 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %3, align 8
  %4 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %"iv'ac" = alloca i64, align 8
  %newstruct27 = alloca [1 x [1 x i64]], i64 1, align 8
  %7 = bitcast [1 x [1 x i64]]* %newstruct27 to i8*
  %newstruct2 = alloca [1 x [1 x i64]], i64 1, align 8
  %8 = bitcast [1 x [1 x i64]]* %newstruct2 to i8*
  %9 = bitcast i8* %8 to [1 x [1 x i64]]*, !enzyme_caststack !67
  %10 = bitcast i8* %7 to [1 x [1 x i64]]*, !enzyme_caststack !67
  %11 = call {}*** @julia.get_pgcstack() #70
  %ptls_field30 = getelementptr inbounds {}**, {}*** %11, i64 2
  %12 = bitcast {}*** %ptls_field30 to i64***
  %ptls_load3132 = load i64**, i64*** %12, align 8, !tbaa !68, !alias.scope !7291, !noalias !7294
  %13 = getelementptr inbounds i64*, i64** %ptls_load3132, i64 2
  %safepoint = load i64*, i64** %13, align 8, !tbaa !72, !invariant.load !67, !alias.scope !7296, !noalias !7299
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #70, !dbg !7301
  fence syncscope("singlethread") seq_cst
  %14 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7302
  %15 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %14 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7302
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %15, i64 0, i32 1, !dbg !7302
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7302, !tbaa !315, !range !86, !alias.scope !7308, !noalias !7311
  %16 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 4, !dbg !7313
  store i64 %arraylen, i64* %16, align 8, !dbg !7313
  %memcpy_refined_dst = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %9, i64 0, i64 0, i64 0, !dbg !7313
  store i64 %arraylen, i64* %memcpy_refined_dst, align 8, !dbg !7313, !tbaa !132, !alias.scope !134, !noalias !7314
  %17 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraylen), !dbg !7317
  %18 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 0, !dbg !7317
  store {} addrspace(10)* %17, {} addrspace(10)** %18, align 8, !dbg !7317
  %19 = mul i64 %arraylen, 8, !dbg !7317
  %20 = bitcast {} addrspace(10)* %17 to i8 addrspace(13)* addrspace(10)*, !dbg !7317
  %21 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %20, align 8, !dbg !7317
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %21, i8 0, i64 %19, i1 false), !dbg !7317
  %22 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraylen) #71, !dbg !7317
  %23 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 1, !dbg !7325
  store {} addrspace(10)* %22, {} addrspace(10)** %23, align 8, !dbg !7325
  %24 = bitcast {} addrspace(10)* %22 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7325
  %25 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %24 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7325
  %arraylen_ptr3 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %25, i64 0, i32 1, !dbg !7325
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr3, align 8, !dbg !7325, !tbaa !315, !range !86, !alias.scope !7329, !noalias !7332
  %.not = icmp eq i64 %arraylen4, %arraylen, !dbg !7334
  br i1 %.not, label %L18, label %L87, !dbg !7327

L18:                                              ; preds = %top
  %26 = addrspacecast {} addrspace(10)* %22 to {} addrspace(11)*, !dbg !7338
  %27 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !7338
  %.not33 = icmp eq {} addrspace(11)* %26, %27, !dbg !7338
  br i1 %.not33, label %L34, label %L21, !dbg !7338

L21:                                              ; preds = %L18
  %28 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %26) #72, !dbg !7343
  %29 = bitcast {}* %28 to i8**, !dbg !7343
  %arrayptr19 = load i8*, i8** %29, align 8, !dbg !7343, !tbaa !382, !alias.scope !7329, !noalias !7332, !nonnull !67
  %30 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %27) #72, !dbg !7343
  %31 = bitcast {}* %30 to i8**, !dbg !7343
  %arrayptr21 = load i8*, i8** %31, align 8, !dbg !7343, !tbaa !382, !alias.scope !7308, !noalias !7311, !nonnull !67
  %.not39.not = icmp eq i8* %arrayptr19, %arrayptr21, !dbg !7348
  %32 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 5, !dbg !7347
  store i1 %.not39.not, i1* %32, align 1, !dbg !7347
  br i1 %.not39.not, label %L29, label %L34, !dbg !7347

L29:                                              ; preds = %L21
  %33 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'"), !dbg !7351
  %34 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 2, !dbg !7351
  store {} addrspace(10)* %33, {} addrspace(10)** %34, align 8, !dbg !7351
  %35 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !7351
  %36 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %35, i32 0, i32 3, !dbg !7351
  %37 = load i16, i16 addrspace(10)* %36, align 2, !dbg !7351
  %38 = zext i16 %37 to i64, !dbg !7351
  %39 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !7351
  %40 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %39, i32 0, i32 1, !dbg !7351
  %41 = load i64, i64 addrspace(10)* %40, align 8, !dbg !7351
  %42 = mul i64 %41, %38, !dbg !7351
  %43 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !7351
  %44 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %43, align 8, !dbg !7351
  %45 = bitcast {} addrspace(10)* %33 to i8 addrspace(13)* addrspace(10)*, !dbg !7351
  %46 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %45, align 8, !dbg !7351
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %46, i8 0, i64 %42, i1 false), !dbg !7351
  %47 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %0) #70, !dbg !7351
  %48 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 3
  store {} addrspace(10)* %47, {} addrspace(10)** %48, align 8
  %.phi.trans.insert = bitcast {} addrspace(10)* %47 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert45 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr7.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert45, i64 0, i32 1
  %arraylen8.pre = load i64, i64 addrspace(11)* %arraylen_ptr7.phi.trans.insert, align 8, !dbg !7353, !tbaa !315, !range !86, !alias.scope !7357, !noalias !7360
  br label %L34, !dbg !7347

L34:                                              ; preds = %L29, %L21, %L18
  %arraylen8 = phi i64 [ %arraylen8.pre, %L29 ], [ %arraylen, %L18 ], [ %arraylen, %L21 ], !dbg !7353
  %49 = phi {} addrspace(10)* [ %33, %L29 ], [ %"'", %L18 ], [ %"'", %L21 ]
  %value_phi6 = phi {} addrspace(10)* [ %47, %L29 ], [ %0, %L18 ], [ %0, %L21 ]
  %.not36 = icmp eq i64 %arraylen8, 1, !dbg !7362
  %50 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 6, !dbg !7366
  store i1 %.not36, i1* %50, align 1, !dbg !7366
  %.not34 = icmp eq i64 %arraylen, 0, !dbg !7366
  br i1 %.not34, label %L98, label %L81.lr.ph, !dbg !7367

L81.lr.ph:                                        ; preds = %L34
  %"'ipc4" = bitcast {} addrspace(10)* %49 to double addrspace(13)* addrspace(10)*
  %51 = bitcast {} addrspace(10)* %value_phi6 to double addrspace(13)* addrspace(10)*
  %"'ipc5" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc4" to double addrspace(13)* addrspace(11)*
  %52 = addrspacecast double addrspace(13)* addrspace(10)* %51 to double addrspace(13)* addrspace(11)*
  %"arrayptr37'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc5", align 8, !tbaa !382, !alias.scope !7369, !noalias !7374, !nonnull !67
  %arrayptr37 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %52, align 8, !tbaa !382, !alias.scope !7376, !noalias !7377, !nonnull !67
  %"'ipc" = bitcast {} addrspace(10)* %17 to double addrspace(13)* addrspace(10)*
  %53 = bitcast {} addrspace(10)* %22 to double addrspace(13)* addrspace(10)*
  %"'ipc3" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %54 = addrspacecast double addrspace(13)* addrspace(10)* %53 to double addrspace(13)* addrspace(11)*
  %"arrayptr1538'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc3", align 8, !tbaa !382, !alias.scope !7378, !noalias !7379, !nonnull !67
  %arrayptr1538 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %54, align 8, !tbaa !382, !alias.scope !7380, !noalias !7332, !nonnull !67
  %55 = add nsw i64 %arraylen, -1, !dbg !7381
  br label %L81, !dbg !7381

L81:                                              ; preds = %L81, %L81.lr.ph
  %iv = phi i64 [ %iv.next, %L81 ], [ 0, %L81.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7382
  %56 = select i1 %.not36, i64 0, i64 %iv, !dbg !7382
  %57 = getelementptr inbounds double, double addrspace(13)* %arrayptr37, i64 %56, !dbg !7382
  %arrayref = load double, double addrspace(13)* %57, align 8, !dbg !7382, !tbaa !268, !alias.scope !7389, !noalias !7392
  %58 = fneg double %arrayref, !dbg !7394
  %59 = getelementptr inbounds double, double addrspace(13)* %arrayptr1538, i64 %iv, !dbg !7397
  store double %58, double addrspace(13)* %59, align 8, !dbg !7397, !tbaa !268, !alias.scope !7398, !noalias !7401
  %exitcond.not = icmp eq i64 %iv.next, %arraylen, !dbg !7403
  br i1 %exitcond.not, label %L98.loopexit, label %L81, !dbg !7381, !llvm.loop !7404

L87:                                              ; preds = %top
  %60 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %10, i64 0, i64 0, i64 0, !dbg !7405
  store i64 %arraylen4, i64* %60, align 8, !dbg !7405, !tbaa !132, !alias.scope !134, !noalias !7314
  %61 = addrspacecast [1 x [1 x i64]]* %10 to [1 x [1 x i64]] addrspace(11)*, !dbg !7327
  %62 = addrspacecast [1 x [1 x i64]]* %9 to [1 x [1 x i64]] addrspace(11)*, !dbg !7327
  call fastcc void @julia_throwdm_1980([1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %61, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %62) #73, !dbg !7327
  unreachable, !dbg !7327

L98.loopexit:                                     ; preds = %L81
  br label %L98, !dbg !7301

L98:                                              ; preds = %L98.loopexit, %L34
  %63 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %1, i32 0, i32 1, !dbg !7301
  store {} addrspace(10)* %22, {} addrspace(10)** %63, align 8, !dbg !7301
  %64 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %1, i32 0, i32 2, !dbg !7301
  store {} addrspace(10)* %17, {} addrspace(10)** %64, align 8, !dbg !7301
  %65 = load { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %1, align 8, !dbg !7301
  ret { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %65, !dbg !7301
}

; Function Attrs: mustprogress willreturn
define internal fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143.329({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", i64 noundef signext "enzyme_inactive" %2) unnamed_addr #68 !dbg !7409 {
top:
  %3 = alloca { i8*, i8* }, align 8
  %newstruct5 = alloca [1 x [2 x i64]], i64 1, align 8
  %4 = bitcast [1 x [2 x i64]]* %newstruct5 to i8*
  %newstruct2 = alloca [1 x [2 x i64]], i64 1, align 8
  %5 = bitcast [1 x [2 x i64]]* %newstruct2 to i8*
  %6 = bitcast i8* %5 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %7 = bitcast i8* %4 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %8 = call {}*** @julia.get_pgcstack() #70
  %ptls_field15 = getelementptr inbounds {}**, {}*** %8, i64 2
  %9 = bitcast {}*** %ptls_field15 to i64***
  %ptls_load1617 = load i64**, i64*** %9, align 8, !tbaa !68, !alias.scope !7410, !noalias !7413
  %10 = getelementptr inbounds i64*, i64** %ptls_load1617, i64 2
  %safepoint = load i64*, i64** %10, align 8, !tbaa !72, !invariant.load !67, !alias.scope !7415, !noalias !7418
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #70, !dbg !7420
  fence syncscope("singlethread") seq_cst
  %newstruct.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %6, i64 0, i64 0, i64 0, !dbg !7421
  store i64 1, i64* %newstruct.sroa.0.0..sroa_idx, align 8, !dbg !7421, !tbaa !132, !alias.scope !134, !noalias !7423
  %newstruct.sroa.2.0..sroa_idx22 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %6, i64 0, i64 0, i64 1, !dbg !7421
  store i64 3, i64* %newstruct.sroa.2.0..sroa_idx22, align 8, !dbg !7421, !tbaa !132, !alias.scope !134, !noalias !7423
  %11 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7426
  %12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7426
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %12, i64 0, i32 1, !dbg !7426
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7426, !tbaa !315, !range !86, !alias.scope !7432, !noalias !7435
  %13 = icmp ugt i64 %arraylen, 2, !dbg !7437
  br i1 %13, label %L40, label %L36, !dbg !7431

L36:                                              ; preds = %top
  %14 = addrspacecast [1 x [2 x i64]]* %6 to [1 x [2 x i64]] addrspace(11)*, !dbg !7431
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %14) #71, !dbg !7431
  unreachable, !dbg !7431

L40:                                              ; preds = %top
  %15 = add i64 %2, -1, !dbg !7440
  %16 = add i64 %2, 2, !dbg !7442
  %.not19 = icmp sgt i64 %2, 9223372036854775805, !dbg !7443
  %value_phi3 = select i1 %.not19, i64 %15, i64 %16, !dbg !7445
  %newstruct4.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %7, i64 0, i64 0, i64 0, !dbg !7448
  store i64 %2, i64* %newstruct4.sroa.0.0..sroa_idx, align 8, !dbg !7448, !tbaa !132, !alias.scope !134, !noalias !7423
  %newstruct4.sroa.2.0..sroa_idx21 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %7, i64 0, i64 0, i64 1, !dbg !7448
  store i64 %value_phi3, i64* %newstruct4.sroa.2.0..sroa_idx21, align 8, !dbg !7448, !tbaa !132, !alias.scope !134, !noalias !7423
  %17 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7449
  %18 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7449
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %18, i64 0, i32 1, !dbg !7449
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !7449, !tbaa !315, !range !86, !alias.scope !7455, !noalias !7458
  %19 = icmp slt i64 %value_phi3, %2, !dbg !7460
  %20 = icmp ult i64 %15, %arraylen7, !dbg !7464
  %21 = add i64 %value_phi3, -1, !dbg !7466
  %22 = icmp ult i64 %21, %arraylen7, !dbg !7464
  %23 = and i1 %20, %22, !dbg !7467
  %24 = or i1 %19, %23, !dbg !7468
  br i1 %24, label %L71, label %L68, !dbg !7454

L68:                                              ; preds = %L40
  %25 = addrspacecast [1 x [2 x i64]]* %7 to [1 x [2 x i64]] addrspace(11)*, !dbg !7454
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %25) #71, !dbg !7454
  unreachable, !dbg !7454

L71:                                              ; preds = %L40
  %26 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !7469
  %27 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !7471
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !7472
  %28 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !7472
  %29 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !7472
  %30 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %28) #72, !dbg !7472
  %"'ipc4" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !7475
  %31 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !7475
  %32 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc4"), !dbg !7475
  %33 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %31) #72, !dbg !7475
  %"'ipc3" = bitcast {}* %32 to i8**, !dbg !7475
  %34 = bitcast {}* %33 to i8**, !dbg !7475
  %"arrayptr10'ipl" = load i8*, i8** %"'ipc3", align 8, !dbg !7475, !tbaa !382, !alias.scope !7478, !noalias !7479, !nonnull !67
  %35 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %3, i32 0, i32 1, !dbg !7475
  store i8* %"arrayptr10'ipl", i8** %35, align 8, !dbg !7475
  %arrayptr10 = load i8*, i8** %34, align 8, !dbg !7475, !tbaa !382, !alias.scope !7455, !noalias !7458, !nonnull !67
  %36 = shl i64 %2, 3, !dbg !7480
  %37 = add i64 %36, -8, !dbg !7480
  %"'ipg" = getelementptr i8, i8* %"arrayptr10'ipl", i64 %37, !dbg !7482
  %38 = getelementptr i8, i8* %arrayptr10, i64 %37, !dbg !7482
  %"'ipc" = bitcast {}* %29 to i8**, !dbg !7472
  %39 = bitcast {}* %30 to i8**, !dbg !7472
  %"arrayptr'ipl" = load i8*, i8** %"'ipc", align 8, !dbg !7472, !tbaa !382, !alias.scope !7483, !noalias !7484, !nonnull !67
  %40 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %3, i32 0, i32 0, !dbg !7472
  store i8* %"arrayptr'ipl", i8** %40, align 8, !dbg !7472
  %arrayptr = load i8*, i8** %39, align 8, !dbg !7472, !tbaa !382, !alias.scope !7432, !noalias !7435, !nonnull !67
  call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(24) %arrayptr, i8* noundef nonnull align 1 dereferenceable(24) %38, i64 noundef 24, i1 noundef false) #70, !dbg !7485, !noalias !7487
  call void @llvm.julia.gc_preserve_end(token %27) #70, !dbg !7488
  call void @llvm.julia.gc_preserve_end(token %26) #70, !dbg !7489
  %41 = load { i8*, i8* }, { i8*, i8* }* %3, align 8, !dbg !7490
  ret { i8*, i8* } %41, !dbg !7490
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } @augmented_julia___1993.330([1 x {} addrspace(10)*] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %0, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") unnamed_addr #66 !dbg !7496 {
top:
  %3 = alloca { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }, align 8
  %4 = getelementptr inbounds { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }, { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }* %3, i32 0, i32 0
  %5 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %10 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %10, align 8
  %11 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %11, align 8
  %12 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %12, align 8
  %"iv'ac" = alloca i64, align 8
  %_cache = alloca i64*, align 8
  %_cache8 = alloca double*, align 8
  %_cache10 = alloca i64*, align 8
  %_cache12 = alloca double*, align 8
  %13 = call {}*** @julia.get_pgcstack() #70
  %ptls_field15 = getelementptr inbounds {}**, {}*** %13, i64 2
  %14 = bitcast {}*** %ptls_field15 to i64***
  %ptls_load1617 = load i64**, i64*** %14, align 8, !tbaa !68, !alias.scope !7497, !noalias !7500
  %15 = getelementptr inbounds i64*, i64** %ptls_load1617, i64 2
  %safepoint = load i64*, i64** %15, align 8, !tbaa !72, !invariant.load !67, !alias.scope !7502, !noalias !7505
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #70, !dbg !7507
  fence syncscope("singlethread") seq_cst
  %"getfield_addr'ipg" = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %"'", i64 0, i64 0, !dbg !7508
  %getfield_addr = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %0, i64 0, i64 0, !dbg !7508
  %"getfield'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"getfield_addr'ipg" unordered, align 8, !dbg !7508, !tbaa !72, !alias.scope !7511, !noalias !7514, !nonnull !67, !dereferenceable !867
  %getfield = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %getfield_addr unordered, align 8, !dbg !7508, !tbaa !72, !invariant.load !67, !alias.scope !7516, !noalias !7517, !nonnull !67, !dereferenceable !867, !align !868
  %16 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !7518
  %arraysize_ptr18 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %16, i64 4, !dbg !7518
  %17 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr18 to i64 addrspace(10)*, !dbg !7518
  %18 = addrspacecast i64 addrspace(10)* %17 to i64 addrspace(11)*, !dbg !7518
  %arraysize = load i64, i64 addrspace(11)* %18, align 8, !dbg !7518, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !7522, !noalias !7525
  %19 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 7, !dbg !7527
  store i64 %arraysize, i64* %19, align 8, !dbg !7527
  %20 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize), !dbg !7527
  %21 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 3, !dbg !7527
  store {} addrspace(10)* %20, {} addrspace(10)** %21, align 8, !dbg !7527
  %22 = mul i64 %arraysize, 8, !dbg !7527
  %23 = bitcast {} addrspace(10)* %20 to i8 addrspace(13)* addrspace(10)*, !dbg !7527
  %24 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %23, align 8, !dbg !7527
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %24, i8 0, i64 %22, i1 false), !dbg !7527
  %25 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize) #71, !dbg !7527
  %26 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 4, !dbg !7531
  store {} addrspace(10)* %25, {} addrspace(10)** %26, align 8, !dbg !7531
  %_augmented = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1996({} addrspace(10)* align 16 %25, {} addrspace(10)* align 16 %20, i32 zeroext 1409286144, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %getfield, {} addrspace(10)* align 16 %"getfield'ipl"), !dbg !7531
  %subcache = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 0, !dbg !7531
  %27 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 0, !dbg !7531
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %27, align 8, !dbg !7531
  %28 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 1, !dbg !7531
  %29 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 1, !dbg !7531
  store {} addrspace(10)* %28, {} addrspace(10)** %29, align 8, !dbg !7531
  %"'ac" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 2, !dbg !7531
  %30 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 2, !dbg !7534
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %30, align 8, !dbg !7534
  %31 = bitcast {} addrspace(10)* %28 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7534
  %32 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %31 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7534
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %32, i64 0, i32 1, !dbg !7534
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7534, !tbaa !315, !range !86, !alias.scope !7538, !noalias !7541
  %33 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 8, !dbg !7534
  store i64 %arraylen, i64* %33, align 8, !dbg !7534
  %34 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7534
  %35 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %34 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7534
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %35, i64 0, i32 1, !dbg !7534
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !7534, !tbaa !315, !range !86, !alias.scope !7543, !noalias !7546
  %.not = icmp eq i64 %arraylen, %arraylen7, !dbg !7548
  br i1 %.not, label %L33, label %L39, !dbg !7549

L33:                                              ; preds = %top
  %36 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %28, {} addrspace(10)* %"'ac", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !7550
  %"'ipc7" = addrspacecast {} addrspace(10)* %"'ac" to {} addrspace(11)*, !dbg !7551
  %37 = addrspacecast {} addrspace(10)* %28 to {} addrspace(11)*, !dbg !7551
  %38 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc7"), !dbg !7551
  %39 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %37) #72, !dbg !7551
  %"'ipc6" = bitcast {}* %38 to double**, !dbg !7551
  %40 = bitcast {}* %39 to double**, !dbg !7551
  %"arrayptr19'ipl" = load double*, double** %"'ipc6", align 8, !dbg !7551, !tbaa !382, !alias.scope !7555, !noalias !7556, !nonnull !67
  %41 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 6, !dbg !7551
  store double* %"arrayptr19'ipl", double** %41, align 8, !dbg !7551
  %arrayptr19 = load double*, double** %40, align 8, !dbg !7551, !tbaa !382, !alias.scope !7538, !noalias !7541, !nonnull !67
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !7551
  %42 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !7551
  %43 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !7551
  %44 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %42) #72, !dbg !7551
  %"'ipc" = bitcast {}* %43 to double**, !dbg !7551
  %45 = bitcast {}* %44 to double**, !dbg !7551
  %"arrayptr920'ipl" = load double*, double** %"'ipc", align 8, !dbg !7551, !tbaa !382, !alias.scope !7557, !noalias !7558, !nonnull !67
  %46 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 5, !dbg !7551
  store double* %"arrayptr920'ipl", double** %46, align 8, !dbg !7551
  %arrayptr920 = load double*, double** %45, align 8, !dbg !7551, !tbaa !382, !alias.scope !7543, !noalias !7546, !nonnull !67
  %.not31 = icmp eq i64 %arraylen, 0, !dbg !7559
  br i1 %.not31, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !7559

.preheader.preheader:                             ; preds = %L33
  %47 = add nsw i64 %arraylen, -1, !dbg !7559
  %48 = add nuw i64 %47, 1, !dbg !7559
  %49 = mul nuw i64 %48, 8, !dbg !7559
  %50 = call noalias nonnull i8* @malloc(i64 %49), !dbg !7559
  %_malloccache = bitcast i8* %50 to i64*, !dbg !7559
  %51 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 9, !dbg !7559
  store i64* %_malloccache, i64** %51, align 8, !dbg !7559
  store i64* %_malloccache, i64** %_cache, align 8, !dbg !7559, !invariant.group !7560
  %52 = mul nuw i64 %48, 8, !dbg !7559
  %53 = call noalias nonnull i8* @malloc(i64 %52), !dbg !7559
  %_malloccache9 = bitcast i8* %53 to double*, !dbg !7559
  %54 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 10, !dbg !7559
  store double* %_malloccache9, double** %54, align 8, !dbg !7559
  store double* %_malloccache9, double** %_cache8, align 8, !dbg !7559, !invariant.group !7561
  %55 = mul nuw i64 %48, 8, !dbg !7559
  %56 = call noalias nonnull i8* @malloc(i64 %55), !dbg !7559
  %_malloccache11 = bitcast i8* %56 to i64*, !dbg !7559
  %57 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 11, !dbg !7559
  store i64* %_malloccache11, i64** %57, align 8, !dbg !7559
  store i64* %_malloccache11, i64** %_cache10, align 8, !dbg !7559, !invariant.group !7562
  %58 = mul nuw i64 %48, 8, !dbg !7559
  %59 = call noalias nonnull i8* @malloc(i64 %58), !dbg !7559
  %_malloccache13 = bitcast i8* %59 to double*, !dbg !7559
  %60 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 12, !dbg !7559
  store double* %_malloccache13, double** %60, align 8, !dbg !7559
  store double* %_malloccache13, double** %_cache12, align 8, !dbg !7559, !invariant.group !7563
  br label %.preheader, !dbg !7559

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !7559
  %61 = phi i64 [ %82, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7559
  %62 = phi i64 [ %81, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7559
  %63 = phi double [ %80, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !7559
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7559
  %64 = shl i64 %62, 32, !dbg !7559
  %65 = ashr exact i64 %64, 32, !dbg !7559
  %66 = load i64*, i64** %_cache, align 8, !dbg !7559, !dereferenceable !3229, !invariant.group !7560
  %67 = getelementptr inbounds i64, i64* %66, i64 %iv, !dbg !7559
  store i64 %65, i64* %67, align 8, !dbg !7559, !invariant.group !7564
  %68 = getelementptr inbounds double, double* %arrayptr19, i64 %65, !dbg !7559
  %69 = load double, double* %68, align 8, !dbg !7559, !tbaa !1662, !alias.scope !7565, !noalias !7568
  %70 = load double*, double** %_cache8, align 8, !dbg !7559, !dereferenceable !3229, !invariant.group !7561
  %71 = getelementptr inbounds double, double* %70, i64 %iv, !dbg !7559
  store double %69, double* %71, align 8, !dbg !7559, !tbaa !1662, !invariant.group !7570
  %72 = shl i64 %61, 32, !dbg !7559
  %73 = ashr exact i64 %72, 32, !dbg !7559
  %74 = load i64*, i64** %_cache10, align 8, !dbg !7559, !dereferenceable !3229, !invariant.group !7562
  %75 = getelementptr inbounds i64, i64* %74, i64 %iv, !dbg !7559
  store i64 %73, i64* %75, align 8, !dbg !7559, !invariant.group !7571
  %76 = getelementptr inbounds double, double* %arrayptr920, i64 %73, !dbg !7559
  %77 = load double, double* %76, align 8, !dbg !7559, !tbaa !1662, !alias.scope !7572, !noalias !7575
  %78 = load double*, double** %_cache12, align 8, !dbg !7559, !dereferenceable !3229, !invariant.group !7563
  %79 = getelementptr inbounds double, double* %78, i64 %iv, !dbg !7559
  store double %77, double* %79, align 8, !dbg !7559, !tbaa !1662, !invariant.group !7577
  %80 = call double @llvm.fmuladd.f64(double %69, double %77, double %63) #70, !dbg !7559
  %81 = add nsw i64 %65, 1, !dbg !7559
  %82 = add nsw i64 %73, 1, !dbg !7559
  %83 = icmp eq i64 %iv.next, %arraylen, !dbg !7559
  br i1 %83, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !7559, !llvm.loop !7578

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !7550

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L33
  %84 = phi double [ 0.000000e+00, %L33 ], [ %80, %cblas_ddot64_.exit.loopexit ], !dbg !7559
  call void @llvm.julia.gc_preserve_end(token %36) #70, !dbg !7550
  %85 = getelementptr inbounds { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }, { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }* %3, i32 0, i32 1, !dbg !7507
  store double %84, double* %85, align 8, !dbg !7507
  %86 = load { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }, { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }* %3, align 8, !dbg !7507
  ret { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } %86, !dbg !7507

L39:                                              ; preds = %top
  %current_task1021 = getelementptr inbounds {}**, {}*** %13, i64 -14, !dbg !7579
  %current_task10 = bitcast {}*** %current_task1021 to {}**, !dbg !7579
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #73, !dbg !7579
  %87 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !7579
  %88 = addrspacecast {} addrspace(10)* addrspace(10)* %87 to {} addrspace(10)* addrspace(11)*, !dbg !7579
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %88, align 8, !dbg !7579, !tbaa !865, !alias.scope !116, !noalias !7580
  %89 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %88, i64 1, !dbg !7579
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %89, align 8, !dbg !7579, !tbaa !865, !alias.scope !116, !noalias !7580
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #73, !dbg !7579
  %90 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !7579
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %90, i64 0, i32 0, !dbg !7579
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859290304 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !7579, !tbaa !112, !alias.scope !116, !noalias !7580
  %.repack23 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %90, i64 0, i32 1, !dbg !7579
  store i64 %arraylen, i64 addrspace(10)* %.repack23, align 8, !dbg !7579, !tbaa !112, !alias.scope !116, !noalias !7580
  %.repack25 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %90, i64 0, i32 2, !dbg !7579
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859290272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack25, align 8, !dbg !7579, !tbaa !112, !alias.scope !116, !noalias !7580
  %.repack27 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %90, i64 0, i32 3, !dbg !7579
  store i64 %arraylen7, i64 addrspace(10)* %.repack27, align 8, !dbg !7579, !tbaa !112, !alias.scope !116, !noalias !7580
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %88 release, align 8, !dbg !7579, !tbaa !865, !alias.scope !116, !noalias !7580
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #74, !dbg !7579
  %91 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !7579
  %92 = addrspacecast i8 addrspace(10)* %91 to i8 addrspace(11)*, !dbg !7579
  %93 = getelementptr inbounds i8, i8 addrspace(11)* %92, i64 8, !dbg !7579
  %94 = bitcast i8 addrspace(11)* %93 to {} addrspace(10)* addrspace(11)*, !dbg !7579
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %94 release, align 8, !dbg !7579, !tbaa !865, !alias.scope !116, !noalias !7580
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #73, !dbg !7549
  %95 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !7549
  %96 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %95, i64 0, i64 0, !dbg !7549
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %96, align 8, !dbg !7549, !tbaa !112, !alias.scope !116, !noalias !7580
  %97 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !7549
  call void @ijl_throw({} addrspace(12)* %97) #70, !dbg !7549
  unreachable, !dbg !7549
}

; Function Attrs: mustprogress willreturn
define internal fastcc { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } @augmented_julia_compute_energy_2128([3 x double]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) "enzyme_sret" %0, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") unnamed_addr #67 !dbg !7476 {
top:
  %3 = alloca { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, align 8
  %4 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 6
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 10
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %10 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 12
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %10, align 8
  %11 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 13
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %11, align 8
  %12 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 16
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %12, align 8
  %13 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 17
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %13, align 8
  %14 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %14, align 8
  %15 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %15, align 8
  %16 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %16, align 8
  %17 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %17, align 8
  %18 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %18, align 8
  %19 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %19, align 8
  %20 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %20, align 8
  %21 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %21, align 8
  %22 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %22, align 8
  %23 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %23, align 8
  %24 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %24, align 8
  %25 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %25, align 8
  %"iv'ac" = alloca i64, align 8
  %newstruct = alloca [1 x [2 x i64]], i64 1, align 8
  %26 = bitcast [1 x [2 x i64]]* %newstruct to i8*
  %newstruct16 = alloca [1 x [2 x i64]], i64 1, align 8
  %27 = bitcast [1 x [2 x i64]]* %newstruct16 to i8*
  %newstruct2 = alloca [1 x [2 x i64]], i64 1, align 8
  %28 = bitcast [1 x [2 x i64]]* %newstruct2 to i8*
  %newstruct12 = alloca [1 x [2 x i64]], i64 1, align 8
  %29 = bitcast [1 x [2 x i64]]* %newstruct12 to i8*
  %_cache = alloca i64*, align 8
  %_cache24 = alloca double*, align 8
  %_cache26 = alloca i64*, align 8
  %_cache28 = alloca double*, align 8
  %30 = call {}*** @julia.get_pgcstack()
  %31 = bitcast i8* %29 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %32 = bitcast i8* %28 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %33 = bitcast i8* %27 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %34 = bitcast i8* %26 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %35 = bitcast {}*** %30 to {}**
  %36 = getelementptr inbounds {}*, {}** %35, i64 -14
  %"'ai" = alloca [1 x {} addrspace(10)*], i64 1, align 8
  %37 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %38 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %39 = bitcast {}* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull dereferenceable(8) dereferenceable_or_null(8) %39, i8 0, i64 8, i1 false)
  %40 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) {} addrspace(10)* @julia.gc_alloc_obj({}** %36, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !enzyme_fromstack !3229
  %41 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 0
  store {} addrspace(10)* %40, {} addrspace(10)** %41, align 8
  %42 = bitcast {} addrspace(10)* %40 to [1 x {} addrspace(10)*] addrspace(10)*
  br label %loop.i

loop.i:                                           ; preds = %loop.i, %top
  %43 = phi i64 [ 0, %top ], [ %44, %loop.i ]
  %44 = add i64 %43, 1
  %45 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %42, i64 %43, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %45, align 8
  %46 = icmp eq i64 %44, 1
  br i1 %46, label %zeroType.328.exit, label %loop.i

zeroType.328.exit:                                ; preds = %loop.i
  %47 = addrspacecast {}* %37 to {} addrspace(10)*
  %"'ipc19" = bitcast {}* %37 to [1 x {} addrspace(10)*]*
  %48 = bitcast {} addrspace(10)* %40 to [1 x {} addrspace(10)*] addrspace(10)*, !enzyme_caststack !67
  %49 = call {}*** @julia.get_pgcstack() #70
  %ptls_field31 = getelementptr inbounds {}**, {}*** %49, i64 2
  %50 = bitcast {}*** %ptls_field31 to i64***
  %ptls_load3233 = load i64**, i64*** %50, align 8, !tbaa !68, !alias.scope !7477, !noalias !7480
  %51 = getelementptr inbounds i64*, i64** %ptls_load3233, i64 2
  %safepoint = load i64*, i64** %51, align 8, !tbaa !72, !invariant.load !67, !alias.scope !7482, !noalias !7485
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #70, !dbg !7487
  fence syncscope("singlethread") seq_cst
  %52 = bitcast [1 x [2 x i64]]* %34 to i8*, !dbg !7488
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %52, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const13 to i8*), i64 noundef 16, i1 noundef false) #70, !dbg !7488, !tbaa !85, !alias.scope !1680, !noalias !7491
  %53 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7494
  %54 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %53 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7494
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %54, i64 0, i32 1, !dbg !7494
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7494, !tbaa !315, !range !86, !alias.scope !7500, !noalias !7503
  %55 = icmp ult i64 %arraylen, 6, !dbg !7505
  br i1 %55, label %L19, label %L22, !dbg !7499

L19:                                              ; preds = %zeroType.328.exit
  %56 = addrspacecast [1 x [2 x i64]]* %34 to [1 x [2 x i64]] addrspace(11)*, !dbg !7499
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %56) #71, !dbg !7499
  unreachable, !dbg !7499

L22:                                              ; preds = %zeroType.328.exit
  %57 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 3), !dbg !7508
  %58 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 2, !dbg !7508
  store {} addrspace(10)* %57, {} addrspace(10)** %58, align 8, !dbg !7508
  %59 = bitcast {} addrspace(10)* %57 to i8 addrspace(13)* addrspace(10)*, !dbg !7508
  %60 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %59, align 8, !dbg !7508
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %60, i8 0, i64 24, i1 false), !dbg !7508
  %61 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #72, !dbg !7508
  %62 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 3, !dbg !7513
  store {} addrspace(10)* %61, {} addrspace(10)** %62, align 8, !dbg !7513
  %_augmented = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143({} addrspace(10)* align 16 %61, {} addrspace(10)* align 16 %57, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4), !dbg !7513
  %63 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 1, !dbg !7488
  store { i8*, i8* } %_augmented, { i8*, i8* }* %63, align 8, !dbg !7488
  %64 = bitcast [1 x [2 x i64]]* %32 to i8*, !dbg !7488
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %64, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const13 to i8*), i64 noundef 16, i1 noundef false) #70, !dbg !7488, !tbaa !85, !alias.scope !1680, !noalias !7491
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7494, !tbaa !315, !range !86, !alias.scope !7500, !noalias !7503
  %65 = icmp ult i64 %arraylen4, 6, !dbg !7505
  br i1 %65, label %L51, label %L54, !dbg !7499

L51:                                              ; preds = %L22
  %66 = addrspacecast [1 x [2 x i64]]* %32 to [1 x [2 x i64]] addrspace(11)*, !dbg !7499
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %66) #71, !dbg !7499
  unreachable, !dbg !7499

L54:                                              ; preds = %L22
  %67 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 3), !dbg !7508
  %68 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 5, !dbg !7508
  store {} addrspace(10)* %67, {} addrspace(10)** %68, align 8, !dbg !7508
  %69 = bitcast {} addrspace(10)* %67 to i8 addrspace(13)* addrspace(10)*, !dbg !7508
  %70 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %69, align 8, !dbg !7508
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %70, i8 0, i64 24, i1 false), !dbg !7508
  %71 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #72, !dbg !7508
  %72 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 6, !dbg !7513
  store {} addrspace(10)* %71, {} addrspace(10)** %72, align 8, !dbg !7513
  %_augmented13 = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143({} addrspace(10)* align 16 %71, {} addrspace(10)* align 16 %67, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4), !dbg !7513
  %73 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 4, !dbg !7515
  store { i8*, i8* } %_augmented13, { i8*, i8* }* %73, align 8, !dbg !7515
  %74 = bitcast {} addrspace(10)* %61 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7515
  %75 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %74 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7515
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %75, i64 0, i32 1, !dbg !7515
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !7515, !tbaa !315, !range !86, !alias.scope !7519, !noalias !7522
  %76 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 18, !dbg !7515
  store i64 %arraylen7, i64* %76, align 8, !dbg !7515
  %77 = bitcast {} addrspace(10)* %71 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7515
  %78 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %77 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7515
  %arraylen_ptr8 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %78, i64 0, i32 1, !dbg !7515
  %arraylen9 = load i64, i64 addrspace(11)* %arraylen_ptr8, align 8, !dbg !7515, !tbaa !315, !range !86, !alias.scope !7524, !noalias !7527
  %.not = icmp eq i64 %arraylen7, %arraylen9, !dbg !7529
  br i1 %.not, label %L69, label %L75, !dbg !7530

L69:                                              ; preds = %L54
  %79 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %61, {} addrspace(10)* %57, {} addrspace(10)* %71, {} addrspace(10)* %67), !dbg !7531
  %"'ipc16" = addrspacecast {} addrspace(10)* %57 to {} addrspace(11)*, !dbg !7532
  %80 = addrspacecast {} addrspace(10)* %61 to {} addrspace(11)*, !dbg !7532
  %81 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc16"), !dbg !7532
  %82 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %80) #73, !dbg !7532
  %"'ipc15" = bitcast {}* %81 to double**, !dbg !7532
  %83 = bitcast {}* %82 to double**, !dbg !7532
  %"arrayptr34'ipl" = load double*, double** %"'ipc15", align 8, !dbg !7532, !tbaa !382, !alias.scope !7536, !noalias !7537, !nonnull !67
  %84 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 8, !dbg !7532
  store double* %"arrayptr34'ipl", double** %84, align 8, !dbg !7532
  %arrayptr34 = load double*, double** %83, align 8, !dbg !7532, !tbaa !382, !alias.scope !7519, !noalias !7522, !nonnull !67
  %"'ipc14" = addrspacecast {} addrspace(10)* %67 to {} addrspace(11)*, !dbg !7532
  %85 = addrspacecast {} addrspace(10)* %71 to {} addrspace(11)*, !dbg !7532
  %86 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc14"), !dbg !7532
  %87 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %85) #73, !dbg !7532
  %"'ipc" = bitcast {}* %86 to double**, !dbg !7532
  %88 = bitcast {}* %87 to double**, !dbg !7532
  %"arrayptr1135'ipl" = load double*, double** %"'ipc", align 8, !dbg !7532, !tbaa !382, !alias.scope !7538, !noalias !7539, !nonnull !67
  %89 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 7, !dbg !7532
  store double* %"arrayptr1135'ipl", double** %89, align 8, !dbg !7532
  %arrayptr1135 = load double*, double** %88, align 8, !dbg !7532, !tbaa !382, !alias.scope !7524, !noalias !7527, !nonnull !67
  %.not58 = icmp eq i64 %arraylen7, 0, !dbg !7540
  br i1 %.not58, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !7540

.preheader.preheader:                             ; preds = %L69
  %90 = add nsw i64 %arraylen7, -1, !dbg !7540
  %91 = add nuw i64 %90, 1, !dbg !7540
  %92 = mul nuw i64 %91, 8, !dbg !7540
  %93 = call noalias nonnull i8* @malloc(i64 %92), !dbg !7540
  %_malloccache = bitcast i8* %93 to i64*, !dbg !7540
  %94 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 19, !dbg !7540
  store i64* %_malloccache, i64** %94, align 8, !dbg !7540
  store i64* %_malloccache, i64** %_cache, align 8, !dbg !7540, !invariant.group !7541
  %95 = mul nuw i64 %91, 8, !dbg !7540
  %96 = call noalias nonnull i8* @malloc(i64 %95), !dbg !7540
  %_malloccache25 = bitcast i8* %96 to double*, !dbg !7540
  %97 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 20, !dbg !7540
  store double* %_malloccache25, double** %97, align 8, !dbg !7540
  store double* %_malloccache25, double** %_cache24, align 8, !dbg !7540, !invariant.group !7542
  %98 = mul nuw i64 %91, 8, !dbg !7540
  %99 = call noalias nonnull i8* @malloc(i64 %98), !dbg !7540
  %_malloccache27 = bitcast i8* %99 to i64*, !dbg !7540
  %100 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 21, !dbg !7540
  store i64* %_malloccache27, i64** %100, align 8, !dbg !7540
  store i64* %_malloccache27, i64** %_cache26, align 8, !dbg !7540, !invariant.group !7543
  %101 = mul nuw i64 %91, 8, !dbg !7540
  %102 = call noalias nonnull i8* @malloc(i64 %101), !dbg !7540
  %_malloccache29 = bitcast i8* %102 to double*, !dbg !7540
  %103 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 22, !dbg !7540
  store double* %_malloccache29, double** %103, align 8, !dbg !7540
  store double* %_malloccache29, double** %_cache28, align 8, !dbg !7540, !invariant.group !7544
  br label %.preheader, !dbg !7540

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !7540
  %104 = phi i64 [ %125, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7540
  %105 = phi i64 [ %124, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7540
  %106 = phi double [ %123, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !7540
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7540
  %107 = shl i64 %105, 32, !dbg !7540
  %108 = ashr exact i64 %107, 32, !dbg !7540
  %109 = load i64*, i64** %_cache, align 8, !dbg !7540, !dereferenceable !3229, !invariant.group !7541
  %110 = getelementptr inbounds i64, i64* %109, i64 %iv, !dbg !7540
  store i64 %108, i64* %110, align 8, !dbg !7540, !invariant.group !7545
  %111 = getelementptr inbounds double, double* %arrayptr34, i64 %108, !dbg !7540
  %112 = load double, double* %111, align 8, !dbg !7540, !tbaa !1662, !alias.scope !7546, !noalias !7549
  %113 = load double*, double** %_cache24, align 8, !dbg !7540, !dereferenceable !3229, !invariant.group !7542
  %114 = getelementptr inbounds double, double* %113, i64 %iv, !dbg !7540
  store double %112, double* %114, align 8, !dbg !7540, !tbaa !1662, !invariant.group !7551
  %115 = shl i64 %104, 32, !dbg !7540
  %116 = ashr exact i64 %115, 32, !dbg !7540
  %117 = load i64*, i64** %_cache26, align 8, !dbg !7540, !dereferenceable !3229, !invariant.group !7543
  %118 = getelementptr inbounds i64, i64* %117, i64 %iv, !dbg !7540
  store i64 %116, i64* %118, align 8, !dbg !7540, !invariant.group !7552
  %119 = getelementptr inbounds double, double* %arrayptr1135, i64 %116, !dbg !7540
  %120 = load double, double* %119, align 8, !dbg !7540, !tbaa !1662, !alias.scope !7553, !noalias !7556
  %121 = load double*, double** %_cache28, align 8, !dbg !7540, !dereferenceable !3229, !invariant.group !7544
  %122 = getelementptr inbounds double, double* %121, i64 %iv, !dbg !7540
  store double %120, double* %122, align 8, !dbg !7540, !tbaa !1662, !invariant.group !7558
  %123 = call double @llvm.fmuladd.f64(double %112, double %120, double %106) #70, !dbg !7540
  %124 = add nsw i64 %108, 1, !dbg !7540
  %125 = add nsw i64 %116, 1, !dbg !7540
  %126 = icmp eq i64 %iv.next, %arraylen7, !dbg !7540
  br i1 %126, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !7540, !llvm.loop !7559

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  %phi.bo = fmul double %123, 5.000000e-01, !dbg !7531
  br label %cblas_ddot64_.exit, !dbg !7531

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L69
  %127 = phi double [ 0.000000e+00, %L69 ], [ %phi.bo, %cblas_ddot64_.exit.loopexit ]
  call void @llvm.julia.gc_preserve_end(token %79) #70, !dbg !7531
  %128 = bitcast [1 x [2 x i64]]* %31 to i8*, !dbg !7560
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %128, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const14 to i8*), i64 noundef 16, i1 noundef false) #70, !dbg !7560, !tbaa !85, !alias.scope !1680, !noalias !7491
  %arraylen14 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7563, !tbaa !315, !range !86, !alias.scope !7500, !noalias !7503
  %129 = icmp ult i64 %arraylen14, 3, !dbg !7569
  br i1 %129, label %L101, label %L104, !dbg !7568

L75:                                              ; preds = %L54
  %current_task2236 = getelementptr inbounds {}**, {}*** %49, i64 -14, !dbg !7572
  %current_task22 = bitcast {}*** %current_task2236 to {}**, !dbg !7572
  %newstruct23 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #74, !dbg !7572
  %130 = bitcast {} addrspace(10)* %newstruct23 to {} addrspace(10)* addrspace(10)*, !dbg !7572
  %131 = addrspacecast {} addrspace(10)* addrspace(10)* %130 to {} addrspace(10)* addrspace(11)*, !dbg !7572
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %131, align 8, !dbg !7572, !tbaa !865, !alias.scope !116, !noalias !7573
  %132 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %131, i64 1, !dbg !7572
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %132, align 8, !dbg !7572, !tbaa !865, !alias.scope !116, !noalias !7573
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #74, !dbg !7572
  %133 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !7572
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 0, !dbg !7572
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859290304 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !7572, !tbaa !112, !alias.scope !116, !noalias !7573
  %.repack38 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 1, !dbg !7572
  store i64 %arraylen7, i64 addrspace(10)* %.repack38, align 8, !dbg !7572, !tbaa !112, !alias.scope !116, !noalias !7573
  %.repack40 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 2, !dbg !7572
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859290272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack40, align 8, !dbg !7572, !tbaa !112, !alias.scope !116, !noalias !7573
  %.repack42 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 3, !dbg !7572
  store i64 %arraylen9, i64 addrspace(10)* %.repack42, align 8, !dbg !7572, !tbaa !112, !alias.scope !116, !noalias !7573
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %131 release, align 8, !dbg !7572, !tbaa !865, !alias.scope !116, !noalias !7573
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct23, {} addrspace(10)* nofree nonnull %box) #75, !dbg !7572
  %134 = bitcast {} addrspace(10)* %newstruct23 to i8 addrspace(10)*, !dbg !7572
  %135 = addrspacecast i8 addrspace(10)* %134 to i8 addrspace(11)*, !dbg !7572
  %136 = getelementptr inbounds i8, i8 addrspace(11)* %135, i64 8, !dbg !7572
  %137 = bitcast i8 addrspace(11)* %136 to {} addrspace(10)* addrspace(11)*, !dbg !7572
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %137 release, align 8, !dbg !7572, !tbaa !865, !alias.scope !116, !noalias !7573
  %box26 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #74, !dbg !7530
  %138 = bitcast {} addrspace(10)* %box26 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !7530
  %139 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %138, i64 0, i64 0, !dbg !7530
  store {} addrspace(10)* %newstruct23, {} addrspace(10)* addrspace(10)* %139, align 8, !dbg !7530, !tbaa !112, !alias.scope !116, !noalias !7573
  %140 = addrspacecast {} addrspace(10)* %box26 to {} addrspace(12)*, !dbg !7530
  call void @ijl_throw({} addrspace(12)* %140) #71, !dbg !7530
  unreachable, !dbg !7530

L101:                                             ; preds = %cblas_ddot64_.exit
  %141 = addrspacecast [1 x [2 x i64]]* %31 to [1 x [2 x i64]] addrspace(11)*, !dbg !7568
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %141) #71, !dbg !7568
  unreachable, !dbg !7568

L104:                                             ; preds = %cblas_ddot64_.exit
  %142 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 3), !dbg !7574
  %143 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 12, !dbg !7574
  store {} addrspace(10)* %142, {} addrspace(10)** %143, align 8, !dbg !7574
  %144 = bitcast {} addrspace(10)* %142 to i8 addrspace(13)* addrspace(10)*, !dbg !7574
  %145 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %144, align 8, !dbg !7574
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %145, i8 0, i64 24, i1 false), !dbg !7574
  %146 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #72, !dbg !7574
  %147 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 13, !dbg !7579
  store {} addrspace(10)* %146, {} addrspace(10)** %147, align 8, !dbg !7579
  %_augmented18 = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143.329({} addrspace(10)* align 16 %146, {} addrspace(10)* align 16 %142, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1), !dbg !7579
  %148 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 11, !dbg !7581
  store { i8*, i8* } %_augmented18, { i8*, i8* }* %148, align 8, !dbg !7581
  %_augmented17 = call fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2136({} addrspace(10)* align 16 %146, {} addrspace(10)* align 16 %142), !dbg !7581
  %subcache = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented17, 0, !dbg !7581
  %149 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 9, !dbg !7581
  store { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %subcache, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %149, align 8, !dbg !7581
  %150 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented17, 1, !dbg !7581
  %"'ac" = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented17, 2, !dbg !7581
  %151 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 10, !dbg !7560
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %151, align 8, !dbg !7560
  %152 = bitcast [1 x [2 x i64]]* %33 to i8*, !dbg !7560
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %152, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const14 to i8*), i64 noundef 16, i1 noundef false) #70, !dbg !7560, !tbaa !85, !alias.scope !1680, !noalias !7491
  %arraylen18 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7563, !tbaa !315, !range !86, !alias.scope !7500, !noalias !7503
  %153 = icmp ult i64 %arraylen18, 3, !dbg !7569
  br i1 %153, label %L135, label %L138, !dbg !7568

L135:                                             ; preds = %L104
  %154 = addrspacecast [1 x [2 x i64]]* %33 to [1 x [2 x i64]] addrspace(11)*, !dbg !7568
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %154) #71, !dbg !7568
  unreachable, !dbg !7568

L138:                                             ; preds = %L104
  %155 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 3), !dbg !7574
  %156 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 16, !dbg !7574
  store {} addrspace(10)* %155, {} addrspace(10)** %156, align 8, !dbg !7574
  %157 = bitcast {} addrspace(10)* %155 to i8 addrspace(13)* addrspace(10)*, !dbg !7574
  %158 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %157, align 8, !dbg !7574
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %158, i8 0, i64 24, i1 false), !dbg !7574
  %159 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #72, !dbg !7574
  %160 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 17, !dbg !7579
  store {} addrspace(10)* %159, {} addrspace(10)** %160, align 8, !dbg !7579
  %_augmented23 = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143.329({} addrspace(10)* align 16 %159, {} addrspace(10)* align 16 %155, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1), !dbg !7579
  %161 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 15, !dbg !7562
  store { i8*, i8* } %_augmented23, { i8*, i8* }* %161, align 8, !dbg !7562
  %"'ipg" = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %"'ipc19", i64 0, i64 0, !dbg !7562
  %162 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %48, i64 0, i64 0, !dbg !7562
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %"'ipg", align 8, !dbg !7562, !alias.scope !7582, !noalias !7585
  store {} addrspace(10)* %150, {} addrspace(10)* addrspace(10)* %162, align 8, !dbg !7562, !alias.scope !7589, !noalias !7590
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %40, {} addrspace(10)* %150), !dbg !7562
  %"'ipc20" = addrspacecast [1 x {} addrspace(10)*]* %"'ipc19" to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !7562
  %163 = addrspacecast [1 x {} addrspace(10)*] addrspace(10)* %48 to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !7562
  %_augmented21 = call fastcc { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } @augmented_julia___1993.330([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %163, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc20", {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %159, {} addrspace(10)* align 16 %155), !dbg !7562
  %subcache22 = extractvalue { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } %_augmented21, 0, !dbg !7562
  %164 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 14, !dbg !7562
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %subcache22, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %164, align 8, !dbg !7562
  %165 = extractvalue { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } %_augmented21, 1, !dbg !7562
  %166 = fmul double %165, 5.000000e-01, !dbg !7591
  %167 = fadd double %127, %166, !dbg !7592
  %newstruct20.sroa.0.0..sroa_idx = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 0, !dbg !7593
  store double %127, double* %newstruct20.sroa.0.0..sroa_idx, align 8, !dbg !7593, !alias.scope !7594, !noalias !7597
  %newstruct20.sroa.2.0..sroa_idx45 = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 1, !dbg !7593
  store double %166, double* %newstruct20.sroa.2.0..sroa_idx45, align 8, !dbg !7593, !alias.scope !7594, !noalias !7597
  %newstruct20.sroa.3.0..sroa_idx46 = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 2, !dbg !7593
  store double %167, double* %newstruct20.sroa.3.0..sroa_idx46, align 8, !dbg !7593, !alias.scope !7594, !noalias !7597
  %168 = load { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, align 8, !dbg !7593
  ret { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %168, !dbg !7593
}

warning: didn't implement memmove, using memcpy as fallback which can result in errors
; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia__copyto_impl__2143({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", i64 signext "enzyme_inactive" %2, { i8*, i8* } %tapeArg) unnamed_addr #68 !dbg !7661 {
top:
  %3 = call {}*** @julia.get_pgcstack() #70
  br i1 true, label %L40, label %L36, !dbg !7662

L36:                                              ; preds = %top
  unreachable

L40:                                              ; preds = %top
  br i1 true, label %L71, label %L68, !dbg !7664

L68:                                              ; preds = %L40
  unreachable

L71:                                              ; preds = %L40
  %4 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !7666
  %5 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !7668
  %"'ipc27" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !7669
  %6 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc27"), !dbg !7669
  %"'ipc" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !7672
  %7 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !7672
  %"arrayptr10'il_phi" = extractvalue { i8*, i8* } %tapeArg, 1, !dbg !7672
  %8 = shl i64 %2, 3, !dbg !7675
  %9 = add i64 %8, -8, !dbg !7675
  %"'ipg" = getelementptr i8, i8* %"arrayptr10'il_phi", i64 %9, !dbg !7677
  %"arrayptr'il_phi" = extractvalue { i8*, i8* } %tapeArg, 0, !dbg !7669
  call void @llvm.julia.gc_preserve_end(token %5) #70, !dbg !7678
  call void @llvm.julia.gc_preserve_end(token %4) #70, !dbg !7679
  br label %invertL71, !dbg !7680

inverttop:                                        ; preds = %invertL40
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL40:                                        ; preds = %__enzyme_memcpyadd_doubleda1sa1.exit
  br label %inverttop

invertL71:                                        ; preds = %L71
  %10 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !7679
  %11 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !7678
  %12 = bitcast i8* %"arrayptr'il_phi" to double*, !dbg !7681
  %13 = bitcast i8* %"'ipg" to double*, !dbg !7681
  br label %for.body.i, !dbg !7681

for.body.i:                                       ; preds = %for.body.i, %invertL71
  %idx.i = phi i64 [ 0, %invertL71 ], [ %idx.next.i, %for.body.i ], !dbg !7681
  %dst.i.i = getelementptr inbounds double, double* %12, i64 %idx.i, !dbg !7681
  %dst.i.l.i = load double, double* %dst.i.i, align 1, !dbg !7681
  store double 0.000000e+00, double* %dst.i.i, align 1, !dbg !7681
  %src.i.i = getelementptr inbounds double, double* %13, i64 %idx.i, !dbg !7681
  %src.i.l.i = load double, double* %src.i.i, align 1, !dbg !7681
  %14 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !7681
  store double %14, double* %src.i.i, align 1, !dbg !7681
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !7681
  %15 = icmp eq i64 3, %idx.next.i, !dbg !7681
  br i1 %15, label %__enzyme_memcpyadd_doubleda1sa1.exit, label %for.body.i, !dbg !7681

__enzyme_memcpyadd_doubleda1sa1.exit:             ; preds = %for.body.i
  call void @llvm.julia.gc_preserve_end(token %11), !dbg !7668
  call void @llvm.julia.gc_preserve_end(token %10), !dbg !7666
  br label %invertL40
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia___2136({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg) unnamed_addr #69 !dbg !7713 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %1 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %1, align 8
  %"arrayref'de" = alloca double, align 8
  %2 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %3 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %4 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %3, i32 0, i32 3
  %5 = load i16, i16 addrspace(10)* %4, align 2
  %6 = zext i16 %5 to i64
  %7 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %8 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %7, i32 0, i32 1
  %9 = load i64, i64 addrspace(10)* %8, align 8
  %10 = mul i64 %9, %6
  %11 = call {}*** @julia.get_pgcstack() #70
  %arraylen = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 4, !dbg !7714
  %12 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 0, !dbg !7721
  %13 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 1, !dbg !7721
  br i1 true, label %L18, label %L87, !dbg !7729

L18:                                              ; preds = %top
  %14 = addrspacecast {} addrspace(10)* %13 to {} addrspace(11)*, !dbg !7731
  %15 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !7731
  %.not33 = icmp eq {} addrspace(11)* %14, %15, !dbg !7731
  br i1 %.not33, label %L34, label %L21, !dbg !7731

L21:                                              ; preds = %L18
  %.not39.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 5, !dbg !7736
  br i1 %.not39.not, label %L29, label %L34, !dbg !7736

L29:                                              ; preds = %L21
  %"'ip_phi2" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 2, !dbg !7737
  %16 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 3, !dbg !7737
  br label %L34, !dbg !7736

L34:                                              ; preds = %L29, %L21, %L18
  %17 = phi {} addrspace(10)* [ %"'ip_phi2", %L29 ], [ %"'", %L18 ], [ %"'", %L21 ]
  %.not36 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 6, !dbg !7739
  %.not34 = icmp eq i64 %arraylen, 0, !dbg !7739
  br i1 %.not34, label %L98, label %L81.lr.ph, !dbg !7740

L81.lr.ph:                                        ; preds = %L34
  %"'ipc17" = bitcast {} addrspace(10)* %17 to double addrspace(13)* addrspace(10)*
  %"'ipc18" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc17" to double addrspace(13)* addrspace(11)*
  %"arrayptr37'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc18", align 8, !tbaa !382, !alias.scope !7742, !noalias !7745, !nonnull !67, !invariant.group !7747
  %"'ipc" = bitcast {} addrspace(10)* %12 to double addrspace(13)* addrspace(10)*
  %"'ipc14" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr1538'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc14", align 8, !tbaa !382, !alias.scope !7748, !noalias !7751, !nonnull !67, !invariant.group !7753
  %18 = add nsw i64 %arraylen, -1, !dbg !7754
  br label %L81, !dbg !7754

L81:                                              ; preds = %L81, %L81.lr.ph
  %iv = phi i64 [ %iv.next, %L81 ], [ 0, %L81.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7755
  %19 = select i1 %.not36, i64 0, i64 %iv, !dbg !7755
  %"'ipg23" = getelementptr inbounds double, double addrspace(13)* %"arrayptr37'ipl", i64 %19, !dbg !7755
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr1538'ipl", i64 %iv, !dbg !7762
  %exitcond.not = icmp eq i64 %iv.next, %arraylen, !dbg !7763
  br i1 %exitcond.not, label %L98.loopexit, label %L81, !dbg !7754, !llvm.loop !7764

L87:                                              ; preds = %top
  unreachable

L98.loopexit:                                     ; preds = %L81
  br label %L98, !dbg !7720

L98:                                              ; preds = %L98.loopexit, %L34
  br label %invertL98, !dbg !7720

inverttop:                                        ; preds = %invertL18
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL18:                                        ; preds = %invertL34, %invertL21
  br label %inverttop

invertL21:                                        ; preds = %staging, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  br label %invertL18

invertL29:                                        ; preds = %staging
  %20 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 2, !dbg !7737
  %21 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !7737
  %22 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %21, align 8, !dbg !7737
  %23 = bitcast {} addrspace(10)* %20 to i8 addrspace(13)* addrspace(10)*, !dbg !7737
  %24 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %23, align 8, !dbg !7737
  %25 = bitcast i8 addrspace(13)* %24 to double addrspace(13)*, !dbg !7737
  %26 = bitcast i8 addrspace(13)* %22 to double addrspace(13)*, !dbg !7737
  %27 = udiv i64 %10, 8, !dbg !7737
  %28 = icmp eq i64 %27, 0, !dbg !7737
  br i1 %28, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !7737

for.body.i:                                       ; preds = %for.body.i, %invertL29
  %idx.i = phi i64 [ 0, %invertL29 ], [ %idx.next.i, %for.body.i ], !dbg !7737
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %25, i64 %idx.i, !dbg !7737
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !7737
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !7737
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %26, i64 %idx.i, !dbg !7737
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !7737
  %29 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !7737
  store double %29, double addrspace(13)* %src.i.i, align 1, !dbg !7737
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !7737
  %30 = icmp eq i64 %27, %idx.next.i, !dbg !7737
  br i1 %30, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !7737

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL29, %for.body.i
  br label %invertL21

invertL34:                                        ; preds = %invertL98, %invertL81.lr.ph
  %.not39.not_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 5
  br i1 %.not33, label %invertL18, label %staging

invertL81.lr.ph:                                  ; preds = %invertL81
  br label %invertL34

invertL81:                                        ; preds = %mergeinvertL81_L98.loopexit, %incinvertL81
  %31 = load i64, i64* %"iv'ac", align 8, !dbg !7762
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %12 to double addrspace(13)* addrspace(10)*, !dbg !7762
  %"'ipc14_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !7762
  %"arrayptr1538'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc14_unwrap", align 8, !tbaa !382, !alias.scope !7748, !noalias !7751, !nonnull !67, !invariant.group !7753
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr1538'ipl_unwrap", i64 %31, !dbg !7762
  %32 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !7762, !tbaa !268, !alias.scope !7765, !noalias !7768
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !7762, !tbaa !268, !alias.scope !7765, !noalias !7768
  %33 = load double, double* %"'de", align 8, !dbg !7762
  %34 = fadd fast double %33, %32, !dbg !7762
  store double %34, double* %"'de", align 8, !dbg !7762
  %35 = load double, double* %"'de", align 8, !dbg !7770
  store double 0.000000e+00, double* %"'de", align 8, !dbg !7770
  %36 = fneg fast double %35, !dbg !7770
  %37 = load double, double* %"arrayref'de", align 8, !dbg !7770
  %38 = fadd fast double %37, %36, !dbg !7770
  store double %38, double* %"arrayref'de", align 8, !dbg !7770
  %39 = load double, double* %"arrayref'de", align 8, !dbg !7755
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !7755
  %40 = load i64, i64* %"iv'ac", align 8, !dbg !7755
  %"'ipc17_unwrap" = bitcast {} addrspace(10)* %17 to double addrspace(13)* addrspace(10)*, !dbg !7755
  %"'ipc18_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc17_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !7755
  %"arrayptr37'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc18_unwrap", align 8, !tbaa !382, !alias.scope !7742, !noalias !7745, !nonnull !67, !invariant.group !7747
  %_unwrap = select i1 %.not36, i64 0, i64 %40, !dbg !7755
  %"'ipg23_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr37'ipl_unwrap", i64 %_unwrap, !dbg !7755
  %41 = load double, double addrspace(13)* %"'ipg23_unwrap", align 8, !dbg !7755, !tbaa !268, !alias.scope !7773, !noalias !7776
  %42 = fadd fast double %41, %39, !dbg !7755
  store double %42, double addrspace(13)* %"'ipg23_unwrap", align 8, !dbg !7755, !tbaa !268, !alias.scope !7773, !noalias !7776
  %43 = load i64, i64* %"iv'ac", align 8
  %44 = icmp eq i64 %43, 0
  %45 = xor i1 %44, true
  br i1 %44, label %invertL81.lr.ph, label %incinvertL81

incinvertL81:                                     ; preds = %invertL81
  %46 = load i64, i64* %"iv'ac", align 8
  %47 = add nsw i64 %46, -1
  store i64 %47, i64* %"iv'ac", align 8
  br label %invertL81

invertL98.loopexit:                               ; preds = %invertL98
  %_unwrap28 = add nsw i64 %arraylen, -1
  br label %mergeinvertL81_L98.loopexit

mergeinvertL81_L98.loopexit:                      ; preds = %invertL98.loopexit
  store i64 %_unwrap28, i64* %"iv'ac", align 8
  br label %invertL81

invertL98:                                        ; preds = %L98
  br i1 %.not34, label %invertL34, label %invertL98.loopexit

staging:                                          ; preds = %invertL34
  br i1 %.not39.not_unwrap, label %invertL29, label %invertL21
}

warning: didn't implement memmove, using memcpy as fallback which can result in errors
; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia__copyto_impl__2143.331({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", i64 signext "enzyme_inactive" %2, { i8*, i8* } %tapeArg) unnamed_addr #68 !dbg !7778 {
top:
  %3 = call {}*** @julia.get_pgcstack() #70
  br i1 true, label %L40, label %L36, !dbg !7779

L36:                                              ; preds = %top
  unreachable

L40:                                              ; preds = %top
  br i1 true, label %L71, label %L68, !dbg !7781

L68:                                              ; preds = %L40
  unreachable

L71:                                              ; preds = %L40
  %4 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !7783
  %5 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !7785
  %"'ipc27" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !7786
  %6 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc27"), !dbg !7786
  %"'ipc" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !7789
  %7 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !7789
  %"arrayptr10'il_phi" = extractvalue { i8*, i8* } %tapeArg, 1, !dbg !7789
  %8 = shl i64 %2, 3, !dbg !7792
  %9 = add i64 %8, -8, !dbg !7792
  %"'ipg" = getelementptr i8, i8* %"arrayptr10'il_phi", i64 %9, !dbg !7794
  %"arrayptr'il_phi" = extractvalue { i8*, i8* } %tapeArg, 0, !dbg !7786
  call void @llvm.julia.gc_preserve_end(token %5) #70, !dbg !7795
  call void @llvm.julia.gc_preserve_end(token %4) #70, !dbg !7796
  br label %invertL71, !dbg !7797

inverttop:                                        ; preds = %invertL40
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL40:                                        ; preds = %__enzyme_memcpyadd_doubleda1sa1.exit
  br label %inverttop

invertL71:                                        ; preds = %L71
  %10 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !7796
  %11 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !7795
  %12 = bitcast i8* %"arrayptr'il_phi" to double*, !dbg !7798
  %13 = bitcast i8* %"'ipg" to double*, !dbg !7798
  br label %for.body.i, !dbg !7798

for.body.i:                                       ; preds = %for.body.i, %invertL71
  %idx.i = phi i64 [ 0, %invertL71 ], [ %idx.next.i, %for.body.i ], !dbg !7798
  %dst.i.i = getelementptr inbounds double, double* %12, i64 %idx.i, !dbg !7798
  %dst.i.l.i = load double, double* %dst.i.i, align 1, !dbg !7798
  store double 0.000000e+00, double* %dst.i.i, align 1, !dbg !7798
  %src.i.i = getelementptr inbounds double, double* %13, i64 %idx.i, !dbg !7798
  %src.i.l.i = load double, double* %src.i.i, align 1, !dbg !7798
  %14 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !7798
  store double %14, double* %src.i.i, align 1, !dbg !7798
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !7798
  %15 = icmp eq i64 3, %idx.next.i, !dbg !7798
  br i1 %15, label %__enzyme_memcpyadd_doubleda1sa1.exit, label %for.body.i, !dbg !7798

__enzyme_memcpyadd_doubleda1sa1.exit:             ; preds = %for.body.i
  call void @llvm.julia.gc_preserve_end(token %11), !dbg !7785
  call void @llvm.julia.gc_preserve_end(token %10), !dbg !7783
  br label %invertL40
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia___1993.332([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 dereferenceable(8) %0, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", double %differeturn, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg) unnamed_addr #66 !dbg !7805 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %3 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"'de24" = alloca double, align 8
  %4 = getelementptr double, double* %"'de24", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache = alloca double*, align 8
  %"'de25" = alloca double, align 8
  %5 = getelementptr double, double* %"'de25", i64 0
  store double 0.000000e+00, double* %5, align 8
  %_cache26 = alloca double*, align 8
  %"'de29" = alloca double, align 8
  %6 = getelementptr double, double* %"'de29", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"'de30" = alloca double, align 8
  %7 = getelementptr double, double* %"'de30", i64 0
  store double 0.000000e+00, double* %7, align 8
  %_cache31 = alloca i64*, align 8
  %_cache37 = alloca i64*, align 8
  %8 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 9
  %mdyncache_fromtape_cache = alloca i64*, align 8
  store i64* %8, i64** %mdyncache_fromtape_cache, align 8
  %9 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 10
  %mdyncache_fromtape_cache59 = alloca double*, align 8
  store double* %9, double** %mdyncache_fromtape_cache59, align 8
  %10 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 11
  %mdyncache_fromtape_cache61 = alloca i64*, align 8
  store i64* %10, i64** %mdyncache_fromtape_cache61, align 8
  %11 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 12
  %mdyncache_fromtape_cache63 = alloca double*, align 8
  store double* %11, double** %mdyncache_fromtape_cache63, align 8
  %12 = call {}*** @julia.get_pgcstack() #70
  %"getfield_addr'ipg" = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %"'", i64 0, i64 0, !dbg !7806
  %getfield_addr = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %0, i64 0, i64 0, !dbg !7806
  %"getfield'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"getfield_addr'ipg" unordered, align 8, !dbg !7806, !tbaa !72, !alias.scope !7810, !noalias !7813, !nonnull !67, !dereferenceable !867
  %getfield = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %getfield_addr unordered, align 8, !dbg !7806, !tbaa !72, !invariant.load !67, !alias.scope !7815, !noalias !7816, !nonnull !67, !dereferenceable !867, !align !868
  %arraysize = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 7, !dbg !7817
  %13 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 3, !dbg !7817
  %14 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 4, !dbg !7817
  %tapeArg8 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 0, !dbg !7822
  %15 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 1, !dbg !7822
  %"'ip_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 2, !dbg !7822
  %arraylen = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 8, !dbg !7825
  br i1 true, label %L33, label %L39, !dbg !7829

L33:                                              ; preds = %top
  %16 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %15, {} addrspace(10)* %"'ip_phi", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !7830
  %"'ipc18" = addrspacecast {} addrspace(10)* %"'ip_phi" to {} addrspace(11)*, !dbg !7831
  %17 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc18"), !dbg !7831
  %"arrayptr19'il_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 6, !dbg !7831
  %"'ipc" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !7831
  %18 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !7831
  %"arrayptr920'il_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 5, !dbg !7831
  %.not31 = icmp eq i64 %arraylen, 0, !dbg !7835
  br i1 %.not31, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !7835

.preheader.preheader:                             ; preds = %L33
  %19 = add nsw i64 %arraylen, -1, !dbg !7835
  %20 = add nuw i64 %19, 1, !dbg !7835
  %21 = mul nuw i64 %20, 8, !dbg !7835
  %22 = mul nuw i64 %20, 8, !dbg !7835
  %23 = mul nuw i64 %20, 8, !dbg !7835
  %24 = mul nuw i64 %20, 8, !dbg !7835
  br label %.preheader, !dbg !7835

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !7835
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7835
  %25 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dbg !7835, !dereferenceable !3229, !invariant.group !7836
  %26 = getelementptr inbounds i64, i64* %25, i64 %iv, !dbg !7835
  %27 = load i64, i64* %26, align 8, !dbg !7835, !invariant.group !7837
  %"'ipg36" = getelementptr inbounds double, double* %"arrayptr19'il_phi", i64 %27, !dbg !7835
  %28 = load double*, double** %mdyncache_fromtape_cache59, align 8, !dbg !7835, !dereferenceable !3229, !invariant.group !7838
  %29 = getelementptr inbounds double, double* %28, i64 %iv, !dbg !7835
  %30 = load double, double* %29, align 8, !dbg !7835, !invariant.group !7839
  %31 = load i64*, i64** %mdyncache_fromtape_cache61, align 8, !dbg !7835, !dereferenceable !3229, !invariant.group !7840
  %32 = getelementptr inbounds i64, i64* %31, i64 %iv, !dbg !7835
  %33 = load i64, i64* %32, align 8, !dbg !7835, !invariant.group !7841
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr920'il_phi", i64 %33, !dbg !7835
  %34 = load double*, double** %mdyncache_fromtape_cache63, align 8, !dbg !7835, !dereferenceable !3229, !invariant.group !7842
  %35 = getelementptr inbounds double, double* %34, i64 %iv, !dbg !7835
  %36 = load double, double* %35, align 8, !dbg !7835, !invariant.group !7843
  %37 = icmp eq i64 %iv.next, %arraylen, !dbg !7835
  br i1 %37, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !7835, !llvm.loop !7844

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !7830

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L33
  call void @llvm.julia.gc_preserve_end(token %16) #70, !dbg !7830
  br label %invertcblas_ddot64_.exit, !dbg !7809

L39:                                              ; preds = %top
  unreachable

inverttop:                                        ; preds = %invertL33
  call fastcc void @diffejulia_gemv__1996({} addrspace(10)* align 16 %14, {} addrspace(10)* align 16 %13, i32 zeroext 1409286144, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %getfield, {} addrspace(10)* align 16 %"getfield'ipl", { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg8), !dbg !7822
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL33:                                        ; preds = %invertcblas_ddot64_.exit, %invert.preheader.preheader
  call void @llvm.julia.gc_preserve_end(token %95), !dbg !7830
  br label %inverttop

invert.preheader.preheader:                       ; preds = %invert.preheader
  %38 = load i64, i64* %"iv'ac", align 8
  %39 = load i64, i64* %"iv'ac", align 8
  %40 = load i64, i64* %"iv'ac", align 8
  %41 = load i64, i64* %"iv'ac", align 8
  %42 = load i64, i64* %"iv'ac", align 8
  %forfree58 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dereferenceable !3229, !invariant.group !7836
  %43 = bitcast i64* %forfree58 to i8*
  call void @free(i8* nonnull %43), !dbg !7845
  %44 = load i64, i64* %"iv'ac", align 8
  %forfree60 = load double*, double** %mdyncache_fromtape_cache59, align 8, !dereferenceable !3229, !invariant.group !7838
  %45 = bitcast double* %forfree60 to i8*
  call void @free(i8* nonnull %45), !dbg !7845
  %46 = load i64, i64* %"iv'ac", align 8
  %forfree62 = load i64*, i64** %mdyncache_fromtape_cache61, align 8, !dereferenceable !3229, !invariant.group !7840
  %47 = bitcast i64* %forfree62 to i8*
  call void @free(i8* nonnull %47), !dbg !7845
  %48 = load i64, i64* %"iv'ac", align 8
  %forfree64 = load double*, double** %mdyncache_fromtape_cache63, align 8, !dereferenceable !3229, !invariant.group !7842
  %49 = bitcast double* %forfree64 to i8*
  call void @free(i8* nonnull %49), !dbg !7845
  br label %invertL33

invert.preheader:                                 ; preds = %mergeinvert.preheader_cblas_ddot64_.exit.loopexit, %incinvert.preheader
  %50 = load double, double* %"'de24", align 8, !dbg !7835
  store double 0.000000e+00, double* %"'de24", align 8, !dbg !7835
  %51 = load i64, i64* %"iv'ac", align 8, !dbg !7835
  %arraylen_unwrap = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 8, !dbg !7835
  %_unwrap = add nsw i64 %arraylen_unwrap, -1, !dbg !7835
  %52 = add nuw i64 %_unwrap, 1, !dbg !7835
  %53 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 12, !dbg !7835
  %54 = getelementptr inbounds double, double* %53, i64 %51, !dbg !7835
  %55 = load double, double* %54, align 8, !dbg !7835, !tbaa !1662, !invariant.group !7846
  %56 = fmul fast double %50, %55, !dbg !7835
  %57 = load double, double* %"'de25", align 8, !dbg !7835
  %58 = fadd fast double %57, %56, !dbg !7835
  store double %58, double* %"'de25", align 8, !dbg !7835
  %59 = load i64, i64* %"iv'ac", align 8, !dbg !7835
  %60 = add nuw i64 %_unwrap, 1, !dbg !7835
  %61 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 10, !dbg !7835
  %62 = getelementptr inbounds double, double* %61, i64 %59, !dbg !7835
  %63 = load double, double* %62, align 8, !dbg !7835, !tbaa !1662, !invariant.group !7847
  %64 = fmul fast double %50, %63, !dbg !7835
  %65 = load double, double* %"'de29", align 8, !dbg !7835
  %66 = fadd fast double %65, %64, !dbg !7835
  store double %66, double* %"'de29", align 8, !dbg !7835
  %67 = load double, double* %"'de30", align 8, !dbg !7835
  %68 = fadd fast double %67, %50, !dbg !7835
  store double %68, double* %"'de30", align 8, !dbg !7835
  %69 = load double, double* %"'de29", align 8, !dbg !7835
  store double 0.000000e+00, double* %"'de29", align 8, !dbg !7835
  %70 = load i64, i64* %"iv'ac", align 8, !dbg !7835
  %71 = add nuw i64 %_unwrap, 1, !dbg !7835
  %72 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 11, !dbg !7835
  %73 = getelementptr inbounds i64, i64* %72, i64 %70, !dbg !7835
  %74 = load i64, i64* %73, align 8, !dbg !7835, !invariant.group !7848
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr920'il_phi", i64 %74, !dbg !7835
  %75 = load double, double* %"'ipg_unwrap", align 8, !dbg !7835, !tbaa !1662, !alias.scope !7849, !noalias !7852
  %76 = fadd fast double %75, %69, !dbg !7835
  store double %76, double* %"'ipg_unwrap", align 8, !dbg !7835, !tbaa !1662, !alias.scope !7849, !noalias !7852
  %77 = load double, double* %"'de25", align 8, !dbg !7835
  store double 0.000000e+00, double* %"'de25", align 8, !dbg !7835
  %78 = load i64, i64* %"iv'ac", align 8, !dbg !7835
  %79 = add nuw i64 %_unwrap, 1, !dbg !7835
  %80 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 9, !dbg !7835
  %81 = getelementptr inbounds i64, i64* %80, i64 %78, !dbg !7835
  %82 = load i64, i64* %81, align 8, !dbg !7835, !invariant.group !7854
  %"'ipg36_unwrap" = getelementptr inbounds double, double* %"arrayptr19'il_phi", i64 %82, !dbg !7835
  %83 = load double, double* %"'ipg36_unwrap", align 8, !dbg !7835, !tbaa !1662, !alias.scope !7855, !noalias !7858
  %84 = fadd fast double %83, %77, !dbg !7835
  store double %84, double* %"'ipg36_unwrap", align 8, !dbg !7835, !tbaa !1662, !alias.scope !7855, !noalias !7858
  %85 = load double, double* %"'de30", align 8
  store double 0.000000e+00, double* %"'de30", align 8
  %86 = load i64, i64* %"iv'ac", align 8
  %87 = icmp eq i64 %86, 0
  %88 = xor i1 %87, true
  %89 = select fast i1 %88, double %85, double 0.000000e+00
  %90 = load double, double* %"'de24", align 8
  %91 = fadd fast double %90, %85
  %92 = select fast i1 %87, double %90, double %91
  store double %92, double* %"'de24", align 8
  br i1 %87, label %invert.preheader.preheader, label %incinvert.preheader

incinvert.preheader:                              ; preds = %invert.preheader
  %93 = load i64, i64* %"iv'ac", align 8
  %94 = add nsw i64 %93, -1
  store i64 %94, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit.loopexit:                ; preds = %invertcblas_ddot64_.exit
  %_unwrap45 = add nsw i64 %arraylen, -1
  br label %mergeinvert.preheader_cblas_ddot64_.exit.loopexit

mergeinvert.preheader_cblas_ddot64_.exit.loopexit: ; preds = %invertcblas_ddot64_.exit.loopexit
  store i64 %_unwrap45, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit:                         ; preds = %cblas_ddot64_.exit
  store double %differeturn, double* %"'de", align 8
  %95 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %15, {} addrspace(10)* %"'ip_phi", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !7830
  %96 = load double, double* %"'de", align 8
  store double 0.000000e+00, double* %"'de", align 8
  %97 = xor i1 %.not31, true
  %98 = select fast i1 %97, double %96, double 0.000000e+00
  %99 = load double, double* %"'de24", align 8
  %100 = fadd fast double %99, %96
  %101 = select fast i1 %.not31, double %99, double %100
  store double %101, double* %"'de24", align 8
  br i1 %.not31, label %invertL33, label %invertcblas_ddot64_.exit.loopexit
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_compute_energy_2128([3 x double]* noalias nocapture nofree writeonly align 8 dereferenceable(24) "enzyme_sret" %0, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg) unnamed_addr #67 !dbg !7599 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %3 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %_cache = alloca double*, align 8
  %"'de43" = alloca double, align 8
  %4 = getelementptr double, double* %"'de43", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache44 = alloca double*, align 8
  %"'de47" = alloca double, align 8
  %5 = getelementptr double, double* %"'de47", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"'de48" = alloca double, align 8
  %6 = getelementptr double, double* %"'de48", i64 0
  store double 0.000000e+00, double* %6, align 8
  %_cache49 = alloca i64*, align 8
  %_cache55 = alloca i64*, align 8
  %"phi.bo'de" = alloca double, align 8
  %7 = getelementptr double, double* %"phi.bo'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %"'de67" = alloca double, align 8
  %8 = getelementptr double, double* %"'de67", i64 0
  store double 0.000000e+00, double* %8, align 8
  %"'de86" = alloca double, align 8
  %9 = getelementptr double, double* %"'de86", i64 0
  store double 0.000000e+00, double* %9, align 8
  %"'de87" = alloca double, align 8
  %10 = getelementptr double, double* %"'de87", i64 0
  store double 0.000000e+00, double* %10, align 8
  %"'de90" = alloca double, align 8
  %11 = getelementptr double, double* %"'de90", i64 0
  store double 0.000000e+00, double* %11, align 8
  %12 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 19
  %mdyncache_fromtape_cache = alloca i64*, align 8
  store i64* %12, i64** %mdyncache_fromtape_cache, align 8
  %13 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 20
  %mdyncache_fromtape_cache99 = alloca double*, align 8
  store double* %13, double** %mdyncache_fromtape_cache99, align 8
  %14 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 21
  %mdyncache_fromtape_cache101 = alloca i64*, align 8
  store i64* %14, i64** %mdyncache_fromtape_cache101, align 8
  %15 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 22
  %mdyncache_fromtape_cache103 = alloca double*, align 8
  store double* %15, double** %mdyncache_fromtape_cache103, align 8
  %16 = call {}*** @julia.get_pgcstack()
  %17 = bitcast {}*** %16 to {}**
  %18 = getelementptr inbounds {}*, {}** %17, i64 -14
  %"'ai" = alloca [1 x {} addrspace(10)*], i64 1, align 8
  %19 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %20 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %21 = bitcast {}* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull dereferenceable(8) dereferenceable_or_null(8) %21, i8 0, i64 8, i1 false)
  %22 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 0
  %"'ipc91" = bitcast {}* %19 to [1 x {} addrspace(10)*]*
  %23 = bitcast {} addrspace(10)* %22 to [1 x {} addrspace(10)*] addrspace(10)*, !enzyme_caststack !67
  %24 = call {}*** @julia.get_pgcstack() #70
  br i1 false, label %L19, label %L22, !dbg !7600

L19:                                              ; preds = %top
  unreachable

L22:                                              ; preds = %top
  %25 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 2, !dbg !7603
  %26 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 3, !dbg !7603
  %tapeArg26 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 1, !dbg !7608
  br i1 false, label %L51, label %L54, !dbg !7600

L51:                                              ; preds = %L22
  unreachable

L54:                                              ; preds = %L22
  %27 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 5, !dbg !7603
  %28 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 6, !dbg !7603
  %tapeArg32 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 4, !dbg !7608
  %arraylen7 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 18, !dbg !7610
  br i1 true, label %L69, label %L75, !dbg !7614

L69:                                              ; preds = %L54
  %29 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %26, {} addrspace(10)* %25, {} addrspace(10)* %28, {} addrspace(10)* %27), !dbg !7615
  %"'ipc37" = addrspacecast {} addrspace(10)* %25 to {} addrspace(11)*, !dbg !7616
  %30 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc37"), !dbg !7616
  %"arrayptr34'il_phi" = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 8, !dbg !7616
  %"'ipc" = addrspacecast {} addrspace(10)* %27 to {} addrspace(11)*, !dbg !7616
  %31 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !7616
  %"arrayptr1135'il_phi" = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 7, !dbg !7616
  %.not58 = icmp eq i64 %arraylen7, 0, !dbg !7620
  br i1 %.not58, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !7620

.preheader.preheader:                             ; preds = %L69
  %32 = add nsw i64 %arraylen7, -1, !dbg !7620
  %33 = add nuw i64 %32, 1, !dbg !7620
  %34 = mul nuw i64 %33, 8, !dbg !7620
  %35 = mul nuw i64 %33, 8, !dbg !7620
  %36 = mul nuw i64 %33, 8, !dbg !7620
  %37 = mul nuw i64 %33, 8, !dbg !7620
  br label %.preheader, !dbg !7620

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !7620
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7620
  %38 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dbg !7620, !dereferenceable !3229, !invariant.group !7621
  %39 = getelementptr inbounds i64, i64* %38, i64 %iv, !dbg !7620
  %40 = load i64, i64* %39, align 8, !dbg !7620, !invariant.group !7622
  %"'ipg54" = getelementptr inbounds double, double* %"arrayptr34'il_phi", i64 %40, !dbg !7620
  %41 = load double*, double** %mdyncache_fromtape_cache99, align 8, !dbg !7620, !dereferenceable !3229, !invariant.group !7623
  %42 = getelementptr inbounds double, double* %41, i64 %iv, !dbg !7620
  %43 = load double, double* %42, align 8, !dbg !7620, !invariant.group !7624
  %44 = load i64*, i64** %mdyncache_fromtape_cache101, align 8, !dbg !7620, !dereferenceable !3229, !invariant.group !7625
  %45 = getelementptr inbounds i64, i64* %44, i64 %iv, !dbg !7620
  %46 = load i64, i64* %45, align 8, !dbg !7620, !invariant.group !7626
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr1135'il_phi", i64 %46, !dbg !7620
  %47 = load double*, double** %mdyncache_fromtape_cache103, align 8, !dbg !7620, !dereferenceable !3229, !invariant.group !7627
  %48 = getelementptr inbounds double, double* %47, i64 %iv, !dbg !7620
  %49 = load double, double* %48, align 8, !dbg !7620, !invariant.group !7628
  %50 = icmp eq i64 %iv.next, %arraylen7, !dbg !7620
  br i1 %50, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !7620, !llvm.loop !7629

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !7615

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L69
  call void @llvm.julia.gc_preserve_end(token %29) #70, !dbg !7615
  br i1 false, label %L101, label %L104, !dbg !7630

L75:                                              ; preds = %L54
  unreachable

L101:                                             ; preds = %cblas_ddot64_.exit
  unreachable

L104:                                             ; preds = %cblas_ddot64_.exit
  %51 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 12, !dbg !7633
  %52 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 13, !dbg !7633
  %tapeArg84 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 11, !dbg !7638
  %tapeArg82 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 9, !dbg !7640
  %"'ip_phi8" = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 10, !dbg !7640
  br i1 false, label %L135, label %L138, !dbg !7630

L135:                                             ; preds = %L104
  unreachable

L138:                                             ; preds = %L104
  %53 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 16, !dbg !7633
  %54 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 17, !dbg !7633
  %tapeArg97 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 15, !dbg !7638
  %"'ipg95" = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %"'ipc91", i64 0, i64 0, !dbg !7632
  store {} addrspace(10)* %"'ip_phi8", {} addrspace(10)** %"'ipg95", align 8, !dbg !7632, !alias.scope !7641, !noalias !7644
  %"'ipc92" = addrspacecast [1 x {} addrspace(10)*]* %"'ipc91" to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !7632
  %55 = addrspacecast [1 x {} addrspace(10)*] addrspace(10)* %23 to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !7632
  %tapeArg93 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 14, !dbg !7632
  %"newstruct20.sroa.0.0..sroa_idx'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'", i64 0, i64 0, !dbg !7646
  %"newstruct20.sroa.2.0..sroa_idx45'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'", i64 0, i64 1, !dbg !7646
  %"newstruct20.sroa.3.0..sroa_idx46'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'", i64 0, i64 2, !dbg !7646
  br label %invertL138, !dbg !7646

inverttop:                                        ; preds = %invertL22
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL22:                                        ; preds = %invertL54
  call fastcc void @diffejulia__copyto_impl__2143({} addrspace(10)* align 16 %26, {} addrspace(10)* align 16 %25, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4, { i8*, i8* } %tapeArg26), !dbg !7608
  br label %inverttop

invertL54:                                        ; preds = %invertL69
  call fastcc void @diffejulia__copyto_impl__2143({} addrspace(10)* align 16 %28, {} addrspace(10)* align 16 %27, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4, { i8*, i8* } %tapeArg32), !dbg !7608
  br label %invertL22

invertL69:                                        ; preds = %invertcblas_ddot64_.exit, %invert.preheader.preheader
  call void @llvm.julia.gc_preserve_end(token %117), !dbg !7615
  br label %invertL54

invert.preheader.preheader:                       ; preds = %invert.preheader
  %56 = load i64, i64* %"iv'ac", align 8
  %57 = load i64, i64* %"iv'ac", align 8
  %58 = load i64, i64* %"iv'ac", align 8
  %59 = load i64, i64* %"iv'ac", align 8
  %60 = load i64, i64* %"iv'ac", align 8
  %forfree98 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dereferenceable !3229, !invariant.group !7621
  %61 = bitcast i64* %forfree98 to i8*
  call void @free(i8* nonnull %61), !dbg !7647
  %62 = load i64, i64* %"iv'ac", align 8
  %forfree100 = load double*, double** %mdyncache_fromtape_cache99, align 8, !dereferenceable !3229, !invariant.group !7623
  %63 = bitcast double* %forfree100 to i8*
  call void @free(i8* nonnull %63), !dbg !7647
  %64 = load i64, i64* %"iv'ac", align 8
  %forfree102 = load i64*, i64** %mdyncache_fromtape_cache101, align 8, !dereferenceable !3229, !invariant.group !7625
  %65 = bitcast i64* %forfree102 to i8*
  call void @free(i8* nonnull %65), !dbg !7647
  %66 = load i64, i64* %"iv'ac", align 8
  %forfree104 = load double*, double** %mdyncache_fromtape_cache103, align 8, !dereferenceable !3229, !invariant.group !7627
  %67 = bitcast double* %forfree104 to i8*
  call void @free(i8* nonnull %67), !dbg !7647
  br label %invertL69

invert.preheader:                                 ; preds = %mergeinvert.preheader_cblas_ddot64_.exit.loopexit, %incinvert.preheader
  %68 = load double, double* %"'de", align 8, !dbg !7620
  store double 0.000000e+00, double* %"'de", align 8, !dbg !7620
  %69 = load i64, i64* %"iv'ac", align 8, !dbg !7620
  %arraylen7_unwrap = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 18, !dbg !7620
  %_unwrap = add nsw i64 %arraylen7_unwrap, -1, !dbg !7620
  %70 = add nuw i64 %_unwrap, 1, !dbg !7620
  %71 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 22, !dbg !7620
  %72 = getelementptr inbounds double, double* %71, i64 %69, !dbg !7620
  %73 = load double, double* %72, align 8, !dbg !7620, !tbaa !1662, !invariant.group !7648
  %74 = fmul fast double %68, %73, !dbg !7620
  %75 = load double, double* %"'de43", align 8, !dbg !7620
  %76 = fadd fast double %75, %74, !dbg !7620
  store double %76, double* %"'de43", align 8, !dbg !7620
  %77 = load i64, i64* %"iv'ac", align 8, !dbg !7620
  %78 = add nuw i64 %_unwrap, 1, !dbg !7620
  %79 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 20, !dbg !7620
  %80 = getelementptr inbounds double, double* %79, i64 %77, !dbg !7620
  %81 = load double, double* %80, align 8, !dbg !7620, !tbaa !1662, !invariant.group !7649
  %82 = fmul fast double %68, %81, !dbg !7620
  %83 = load double, double* %"'de47", align 8, !dbg !7620
  %84 = fadd fast double %83, %82, !dbg !7620
  store double %84, double* %"'de47", align 8, !dbg !7620
  %85 = load double, double* %"'de48", align 8, !dbg !7620
  %86 = fadd fast double %85, %68, !dbg !7620
  store double %86, double* %"'de48", align 8, !dbg !7620
  %87 = load double, double* %"'de47", align 8, !dbg !7620
  store double 0.000000e+00, double* %"'de47", align 8, !dbg !7620
  %88 = load i64, i64* %"iv'ac", align 8, !dbg !7620
  %89 = add nuw i64 %_unwrap, 1, !dbg !7620
  %90 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 21, !dbg !7620
  %91 = getelementptr inbounds i64, i64* %90, i64 %88, !dbg !7620
  %92 = load i64, i64* %91, align 8, !dbg !7620, !invariant.group !7650
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr1135'il_phi", i64 %92, !dbg !7620
  %93 = load double, double* %"'ipg_unwrap", align 8, !dbg !7620, !tbaa !1662, !alias.scope !7651, !noalias !7654
  %94 = fadd fast double %93, %87, !dbg !7620
  store double %94, double* %"'ipg_unwrap", align 8, !dbg !7620, !tbaa !1662, !alias.scope !7651, !noalias !7654
  %95 = load double, double* %"'de43", align 8, !dbg !7620
  store double 0.000000e+00, double* %"'de43", align 8, !dbg !7620
  %96 = load i64, i64* %"iv'ac", align 8, !dbg !7620
  %97 = add nuw i64 %_unwrap, 1, !dbg !7620
  %98 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 19, !dbg !7620
  %99 = getelementptr inbounds i64, i64* %98, i64 %96, !dbg !7620
  %100 = load i64, i64* %99, align 8, !dbg !7620, !invariant.group !7656
  %"'ipg54_unwrap" = getelementptr inbounds double, double* %"arrayptr34'il_phi", i64 %100, !dbg !7620
  %101 = load double, double* %"'ipg54_unwrap", align 8, !dbg !7620, !tbaa !1662, !alias.scope !7657, !noalias !7660
  %102 = fadd fast double %101, %95, !dbg !7620
  store double %102, double* %"'ipg54_unwrap", align 8, !dbg !7620, !tbaa !1662, !alias.scope !7657, !noalias !7660
  %103 = load double, double* %"'de48", align 8
  store double 0.000000e+00, double* %"'de48", align 8
  %104 = load i64, i64* %"iv'ac", align 8
  %105 = icmp eq i64 %104, 0
  %106 = xor i1 %105, true
  %107 = select fast i1 %106, double %103, double 0.000000e+00
  %108 = load double, double* %"'de", align 8
  %109 = fadd fast double %108, %103
  %110 = select fast i1 %105, double %108, double %109
  store double %110, double* %"'de", align 8
  br i1 %105, label %invert.preheader.preheader, label %incinvert.preheader

incinvert.preheader:                              ; preds = %invert.preheader
  %111 = load i64, i64* %"iv'ac", align 8
  %112 = add nsw i64 %111, -1
  store i64 %112, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit.loopexit:                ; preds = %invertcblas_ddot64_.exit
  %113 = load double, double* %"phi.bo'de", align 8, !dbg !7615
  store double 0.000000e+00, double* %"phi.bo'de", align 8, !dbg !7615
  %114 = fmul fast double %113, 5.000000e-01, !dbg !7615
  %115 = load double, double* %"'de", align 8, !dbg !7615
  %116 = fadd fast double %115, %114, !dbg !7615
  store double %116, double* %"'de", align 8, !dbg !7615
  %_unwrap63 = add nsw i64 %arraylen7, -1
  br label %mergeinvert.preheader_cblas_ddot64_.exit.loopexit

mergeinvert.preheader_cblas_ddot64_.exit.loopexit: ; preds = %invertcblas_ddot64_.exit.loopexit
  store i64 %_unwrap63, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit:                         ; preds = %invertL104
  %117 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %26, {} addrspace(10)* %25, {} addrspace(10)* %28, {} addrspace(10)* %27), !dbg !7615
  %118 = load double, double* %"'de67", align 8
  store double 0.000000e+00, double* %"'de67", align 8
  %119 = xor i1 %.not58, true
  %120 = select fast i1 %119, double %118, double 0.000000e+00
  %121 = load double, double* %"phi.bo'de", align 8
  %122 = fadd fast double %121, %118
  %123 = select fast i1 %.not58, double %121, double %122
  store double %123, double* %"phi.bo'de", align 8
  br i1 %.not58, label %invertL69, label %invertcblas_ddot64_.exit.loopexit

invertL104:                                       ; preds = %invertL138
  call fastcc void @diffejulia___2136({} addrspace(10)* align 16 %52, {} addrspace(10)* align 16 %51, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg82), !dbg !7640
  call fastcc void @diffejulia__copyto_impl__2143.331({} addrspace(10)* align 16 %52, {} addrspace(10)* align 16 %51, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1, { i8*, i8* } %tapeArg84), !dbg !7638
  br label %invertcblas_ddot64_.exit

invertL138:                                       ; preds = %L138
  %124 = load double, double* %"newstruct20.sroa.3.0..sroa_idx46'ipg", align 8, !dbg !7646, !alias.scope !7662, !noalias !7665
  store double 0.000000e+00, double* %"newstruct20.sroa.3.0..sroa_idx46'ipg", align 8, !dbg !7646, !alias.scope !7662, !noalias !7665
  %125 = load double, double* %"'de86", align 8, !dbg !7646
  %126 = fadd fast double %125, %124, !dbg !7646
  store double %126, double* %"'de86", align 8, !dbg !7646
  %127 = load double, double* %"newstruct20.sroa.2.0..sroa_idx45'ipg", align 8, !dbg !7646, !alias.scope !7662, !noalias !7665
  store double 0.000000e+00, double* %"newstruct20.sroa.2.0..sroa_idx45'ipg", align 8, !dbg !7646, !alias.scope !7662, !noalias !7665
  %128 = load double, double* %"'de87", align 8, !dbg !7646
  %129 = fadd fast double %128, %127, !dbg !7646
  store double %129, double* %"'de87", align 8, !dbg !7646
  %130 = load double, double* %"newstruct20.sroa.0.0..sroa_idx'ipg", align 8, !dbg !7646, !alias.scope !7662, !noalias !7665
  store double 0.000000e+00, double* %"newstruct20.sroa.0.0..sroa_idx'ipg", align 8, !dbg !7646, !alias.scope !7662, !noalias !7665
  %131 = load double, double* %"'de67", align 8, !dbg !7646
  %132 = fadd fast double %131, %130, !dbg !7646
  store double %132, double* %"'de67", align 8, !dbg !7646
  %133 = load double, double* %"'de86", align 8, !dbg !7667
  store double 0.000000e+00, double* %"'de86", align 8, !dbg !7667
  %134 = load double, double* %"'de67", align 8, !dbg !7667
  %135 = fadd fast double %134, %133, !dbg !7667
  store double %135, double* %"'de67", align 8, !dbg !7667
  %136 = load double, double* %"'de87", align 8, !dbg !7667
  %137 = fadd fast double %136, %133, !dbg !7667
  store double %137, double* %"'de87", align 8, !dbg !7667
  %138 = load double, double* %"'de87", align 8, !dbg !7668
  store double 0.000000e+00, double* %"'de87", align 8, !dbg !7668
  %139 = fmul fast double %138, 5.000000e-01, !dbg !7668
  %140 = load double, double* %"'de90", align 8, !dbg !7668
  %141 = fadd fast double %140, %139, !dbg !7668
  store double %141, double* %"'de90", align 8, !dbg !7668
  %142 = load double, double* %"'de90", align 8, !dbg !7632
  call fastcc void @diffejulia___1993.332([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %55, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc92", {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %54, {} addrspace(10)* align 16 %53, double %142, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg93), !dbg !7632
  store double 0.000000e+00, double* %"'de90", align 8, !dbg !7632
  call fastcc void @diffejulia__copyto_impl__2143.331({} addrspace(10)* align 16 %54, {} addrspace(10)* align 16 %53, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1, { i8*, i8* } %tapeArg97), !dbg !7638
  br label %invertL104
}

; Function Attrs: mustprogress willreturn
define internal fastcc { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } @augmented_julia_compute_energy_2128.414([3 x double]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) "enzyme_sret" %0, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") unnamed_addr #67 !dbg !7915 {
top:
  %3 = alloca { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, align 8
  %4 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 6
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 10
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %10 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 12
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %10, align 8
  %11 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 13
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %11, align 8
  %12 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 16
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %12, align 8
  %13 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 17
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %13, align 8
  %14 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %14, align 8
  %15 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %15, align 8
  %16 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %16, align 8
  %17 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %17, align 8
  %18 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %18, align 8
  %19 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %19, align 8
  %20 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %20, align 8
  %21 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %21, align 8
  %22 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %22, align 8
  %23 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %23, align 8
  %24 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %24, align 8
  %25 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %25, align 8
  %"iv'ac" = alloca i64, align 8
  %newstruct = alloca [1 x [2 x i64]], i64 1, align 8
  %26 = bitcast [1 x [2 x i64]]* %newstruct to i8*
  %newstruct16 = alloca [1 x [2 x i64]], i64 1, align 8
  %27 = bitcast [1 x [2 x i64]]* %newstruct16 to i8*
  %newstruct2 = alloca [1 x [2 x i64]], i64 1, align 8
  %28 = bitcast [1 x [2 x i64]]* %newstruct2 to i8*
  %newstruct12 = alloca [1 x [2 x i64]], i64 1, align 8
  %29 = bitcast [1 x [2 x i64]]* %newstruct12 to i8*
  %_cache = alloca i64*, align 8
  %_cache24 = alloca double*, align 8
  %_cache26 = alloca i64*, align 8
  %_cache28 = alloca double*, align 8
  %30 = call {}*** @julia.get_pgcstack()
  %31 = bitcast i8* %29 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %32 = bitcast i8* %28 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %33 = bitcast i8* %27 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %34 = bitcast i8* %26 to [1 x [2 x i64]]*, !enzyme_caststack !67
  %35 = bitcast {}*** %30 to {}**
  %36 = getelementptr inbounds {}*, {}** %35, i64 -14
  %"'ai" = alloca [1 x {} addrspace(10)*], i64 1, align 8
  %37 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %38 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %39 = bitcast {}* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull dereferenceable(8) dereferenceable_or_null(8) %39, i8 0, i64 8, i1 false)
  %40 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) {} addrspace(10)* @julia.gc_alloc_obj({}** %36, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !enzyme_fromstack !3229
  %41 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 0
  store {} addrspace(10)* %40, {} addrspace(10)** %41, align 8
  %42 = bitcast {} addrspace(10)* %40 to [1 x {} addrspace(10)*] addrspace(10)*
  br label %loop.i

loop.i:                                           ; preds = %loop.i, %top
  %43 = phi i64 [ 0, %top ], [ %44, %loop.i ]
  %44 = add i64 %43, 1
  %45 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %42, i64 %43, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %45, align 8
  %46 = icmp eq i64 %44, 1
  br i1 %46, label %zeroType.328.exit, label %loop.i

zeroType.328.exit:                                ; preds = %loop.i
  %47 = addrspacecast {}* %37 to {} addrspace(10)*
  %"'ipc19" = bitcast {}* %37 to [1 x {} addrspace(10)*]*
  %48 = bitcast {} addrspace(10)* %40 to [1 x {} addrspace(10)*] addrspace(10)*, !enzyme_caststack !67
  %49 = call {}*** @julia.get_pgcstack() #70
  %ptls_field31 = getelementptr inbounds {}**, {}*** %49, i64 2
  %50 = bitcast {}*** %ptls_field31 to i64***
  %ptls_load3233 = load i64**, i64*** %50, align 8, !tbaa !68, !alias.scope !7916, !noalias !7919
  %51 = getelementptr inbounds i64*, i64** %ptls_load3233, i64 2
  %safepoint = load i64*, i64** %51, align 8, !tbaa !72, !invariant.load !67, !alias.scope !7921, !noalias !7924
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #70, !dbg !7926
  fence syncscope("singlethread") seq_cst
  %52 = bitcast [1 x [2 x i64]]* %34 to i8*, !dbg !7927
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %52, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const13 to i8*), i64 noundef 16, i1 noundef false) #70, !dbg !7927, !tbaa !85, !alias.scope !1680, !noalias !7930
  %53 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7933
  %54 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %53 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7933
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %54, i64 0, i32 1, !dbg !7933
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7933, !tbaa !315, !range !86, !alias.scope !7939, !noalias !7942
  %55 = icmp ult i64 %arraylen, 6, !dbg !7944
  br i1 %55, label %L19, label %L22, !dbg !7938

L19:                                              ; preds = %zeroType.328.exit
  %56 = addrspacecast [1 x [2 x i64]]* %34 to [1 x [2 x i64]] addrspace(11)*, !dbg !7938
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %56) #71, !dbg !7938
  unreachable, !dbg !7938

L22:                                              ; preds = %zeroType.328.exit
  %57 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 3), !dbg !7947
  %58 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 2, !dbg !7947
  store {} addrspace(10)* %57, {} addrspace(10)** %58, align 8, !dbg !7947
  %59 = bitcast {} addrspace(10)* %57 to i8 addrspace(13)* addrspace(10)*, !dbg !7947
  %60 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %59, align 8, !dbg !7947
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %60, i8 0, i64 24, i1 false), !dbg !7947
  %61 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #72, !dbg !7947
  %62 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 3, !dbg !7952
  store {} addrspace(10)* %61, {} addrspace(10)** %62, align 8, !dbg !7952
  %_augmented = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143({} addrspace(10)* align 16 %61, {} addrspace(10)* align 16 %57, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4), !dbg !7952
  %63 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 1, !dbg !7927
  store { i8*, i8* } %_augmented, { i8*, i8* }* %63, align 8, !dbg !7927
  %64 = bitcast [1 x [2 x i64]]* %32 to i8*, !dbg !7927
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %64, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const13 to i8*), i64 noundef 16, i1 noundef false) #70, !dbg !7927, !tbaa !85, !alias.scope !1680, !noalias !7930
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7933, !tbaa !315, !range !86, !alias.scope !7939, !noalias !7942
  %65 = icmp ult i64 %arraylen4, 6, !dbg !7944
  br i1 %65, label %L51, label %L54, !dbg !7938

L51:                                              ; preds = %L22
  %66 = addrspacecast [1 x [2 x i64]]* %32 to [1 x [2 x i64]] addrspace(11)*, !dbg !7938
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %66) #71, !dbg !7938
  unreachable, !dbg !7938

L54:                                              ; preds = %L22
  %67 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 3), !dbg !7947
  %68 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 5, !dbg !7947
  store {} addrspace(10)* %67, {} addrspace(10)** %68, align 8, !dbg !7947
  %69 = bitcast {} addrspace(10)* %67 to i8 addrspace(13)* addrspace(10)*, !dbg !7947
  %70 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %69, align 8, !dbg !7947
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %70, i8 0, i64 24, i1 false), !dbg !7947
  %71 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #72, !dbg !7947
  %72 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 6, !dbg !7952
  store {} addrspace(10)* %71, {} addrspace(10)** %72, align 8, !dbg !7952
  %_augmented13 = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143({} addrspace(10)* align 16 %71, {} addrspace(10)* align 16 %67, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4), !dbg !7952
  %73 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 4, !dbg !7954
  store { i8*, i8* } %_augmented13, { i8*, i8* }* %73, align 8, !dbg !7954
  %74 = bitcast {} addrspace(10)* %61 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7954
  %75 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %74 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7954
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %75, i64 0, i32 1, !dbg !7954
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !7954, !tbaa !315, !range !86, !alias.scope !7958, !noalias !7961
  %76 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 18, !dbg !7954
  store i64 %arraylen7, i64* %76, align 8, !dbg !7954
  %77 = bitcast {} addrspace(10)* %71 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7954
  %78 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %77 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7954
  %arraylen_ptr8 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %78, i64 0, i32 1, !dbg !7954
  %arraylen9 = load i64, i64 addrspace(11)* %arraylen_ptr8, align 8, !dbg !7954, !tbaa !315, !range !86, !alias.scope !7963, !noalias !7966
  %.not = icmp eq i64 %arraylen7, %arraylen9, !dbg !7968
  br i1 %.not, label %L69, label %L75, !dbg !7969

L69:                                              ; preds = %L54
  %79 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %61, {} addrspace(10)* %57, {} addrspace(10)* %71, {} addrspace(10)* %67), !dbg !7970
  %"'ipc16" = addrspacecast {} addrspace(10)* %57 to {} addrspace(11)*, !dbg !7971
  %80 = addrspacecast {} addrspace(10)* %61 to {} addrspace(11)*, !dbg !7971
  %81 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc16"), !dbg !7971
  %82 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %80) #73, !dbg !7971
  %"'ipc15" = bitcast {}* %81 to double**, !dbg !7971
  %83 = bitcast {}* %82 to double**, !dbg !7971
  %"arrayptr34'ipl" = load double*, double** %"'ipc15", align 8, !dbg !7971, !tbaa !382, !alias.scope !7975, !noalias !7976, !nonnull !67
  %84 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 8, !dbg !7971
  store double* %"arrayptr34'ipl", double** %84, align 8, !dbg !7971
  %arrayptr34 = load double*, double** %83, align 8, !dbg !7971, !tbaa !382, !alias.scope !7958, !noalias !7961, !nonnull !67
  %"'ipc14" = addrspacecast {} addrspace(10)* %67 to {} addrspace(11)*, !dbg !7971
  %85 = addrspacecast {} addrspace(10)* %71 to {} addrspace(11)*, !dbg !7971
  %86 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc14"), !dbg !7971
  %87 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %85) #73, !dbg !7971
  %"'ipc" = bitcast {}* %86 to double**, !dbg !7971
  %88 = bitcast {}* %87 to double**, !dbg !7971
  %"arrayptr1135'ipl" = load double*, double** %"'ipc", align 8, !dbg !7971, !tbaa !382, !alias.scope !7977, !noalias !7978, !nonnull !67
  %89 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 7, !dbg !7971
  store double* %"arrayptr1135'ipl", double** %89, align 8, !dbg !7971
  %arrayptr1135 = load double*, double** %88, align 8, !dbg !7971, !tbaa !382, !alias.scope !7963, !noalias !7966, !nonnull !67
  %.not58 = icmp eq i64 %arraylen7, 0, !dbg !7979
  br i1 %.not58, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !7979

.preheader.preheader:                             ; preds = %L69
  %90 = add nsw i64 %arraylen7, -1, !dbg !7979
  %91 = add nuw i64 %90, 1, !dbg !7979
  %92 = mul nuw i64 %91, 8, !dbg !7979
  %93 = call noalias nonnull i8* @malloc(i64 %92), !dbg !7979
  %_malloccache = bitcast i8* %93 to i64*, !dbg !7979
  %94 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 19, !dbg !7979
  store i64* %_malloccache, i64** %94, align 8, !dbg !7979
  store i64* %_malloccache, i64** %_cache, align 8, !dbg !7979, !invariant.group !7980
  %95 = mul nuw i64 %91, 8, !dbg !7979
  %96 = call noalias nonnull i8* @malloc(i64 %95), !dbg !7979
  %_malloccache25 = bitcast i8* %96 to double*, !dbg !7979
  %97 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 20, !dbg !7979
  store double* %_malloccache25, double** %97, align 8, !dbg !7979
  store double* %_malloccache25, double** %_cache24, align 8, !dbg !7979, !invariant.group !7981
  %98 = mul nuw i64 %91, 8, !dbg !7979
  %99 = call noalias nonnull i8* @malloc(i64 %98), !dbg !7979
  %_malloccache27 = bitcast i8* %99 to i64*, !dbg !7979
  %100 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 21, !dbg !7979
  store i64* %_malloccache27, i64** %100, align 8, !dbg !7979
  store i64* %_malloccache27, i64** %_cache26, align 8, !dbg !7979, !invariant.group !7982
  %101 = mul nuw i64 %91, 8, !dbg !7979
  %102 = call noalias nonnull i8* @malloc(i64 %101), !dbg !7979
  %_malloccache29 = bitcast i8* %102 to double*, !dbg !7979
  %103 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 22, !dbg !7979
  store double* %_malloccache29, double** %103, align 8, !dbg !7979
  store double* %_malloccache29, double** %_cache28, align 8, !dbg !7979, !invariant.group !7983
  br label %.preheader, !dbg !7979

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !7979
  %104 = phi i64 [ %125, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7979
  %105 = phi i64 [ %124, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7979
  %106 = phi double [ %123, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !7979
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7979
  %107 = shl i64 %105, 32, !dbg !7979
  %108 = ashr exact i64 %107, 32, !dbg !7979
  %109 = load i64*, i64** %_cache, align 8, !dbg !7979, !dereferenceable !3229, !invariant.group !7980
  %110 = getelementptr inbounds i64, i64* %109, i64 %iv, !dbg !7979
  store i64 %108, i64* %110, align 8, !dbg !7979, !invariant.group !7984
  %111 = getelementptr inbounds double, double* %arrayptr34, i64 %108, !dbg !7979
  %112 = load double, double* %111, align 8, !dbg !7979, !tbaa !1662, !alias.scope !7985, !noalias !7988
  %113 = load double*, double** %_cache24, align 8, !dbg !7979, !dereferenceable !3229, !invariant.group !7981
  %114 = getelementptr inbounds double, double* %113, i64 %iv, !dbg !7979
  store double %112, double* %114, align 8, !dbg !7979, !tbaa !1662, !invariant.group !7990
  %115 = shl i64 %104, 32, !dbg !7979
  %116 = ashr exact i64 %115, 32, !dbg !7979
  %117 = load i64*, i64** %_cache26, align 8, !dbg !7979, !dereferenceable !3229, !invariant.group !7982
  %118 = getelementptr inbounds i64, i64* %117, i64 %iv, !dbg !7979
  store i64 %116, i64* %118, align 8, !dbg !7979, !invariant.group !7991
  %119 = getelementptr inbounds double, double* %arrayptr1135, i64 %116, !dbg !7979
  %120 = load double, double* %119, align 8, !dbg !7979, !tbaa !1662, !alias.scope !7992, !noalias !7995
  %121 = load double*, double** %_cache28, align 8, !dbg !7979, !dereferenceable !3229, !invariant.group !7983
  %122 = getelementptr inbounds double, double* %121, i64 %iv, !dbg !7979
  store double %120, double* %122, align 8, !dbg !7979, !tbaa !1662, !invariant.group !7997
  %123 = call double @llvm.fmuladd.f64(double %112, double %120, double %106) #70, !dbg !7979
  %124 = add nsw i64 %108, 1, !dbg !7979
  %125 = add nsw i64 %116, 1, !dbg !7979
  %126 = icmp eq i64 %iv.next, %arraylen7, !dbg !7979
  br i1 %126, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !7979, !llvm.loop !7998

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  %phi.bo = fmul double %123, 5.000000e-01, !dbg !7970
  br label %cblas_ddot64_.exit, !dbg !7970

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L69
  %127 = phi double [ 0.000000e+00, %L69 ], [ %phi.bo, %cblas_ddot64_.exit.loopexit ]
  call void @llvm.julia.gc_preserve_end(token %79) #70, !dbg !7970
  %128 = bitcast [1 x [2 x i64]]* %31 to i8*, !dbg !7999
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %128, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const14 to i8*), i64 noundef 16, i1 noundef false) #70, !dbg !7999, !tbaa !85, !alias.scope !1680, !noalias !7930
  %arraylen14 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !8002, !tbaa !315, !range !86, !alias.scope !7939, !noalias !7942
  %129 = icmp ult i64 %arraylen14, 3, !dbg !8008
  br i1 %129, label %L101, label %L104, !dbg !8007

L75:                                              ; preds = %L54
  %current_task2236 = getelementptr inbounds {}**, {}*** %49, i64 -14, !dbg !8011
  %current_task22 = bitcast {}*** %current_task2236 to {}**, !dbg !8011
  %newstruct23 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #74, !dbg !8011
  %130 = bitcast {} addrspace(10)* %newstruct23 to {} addrspace(10)* addrspace(10)*, !dbg !8011
  %131 = addrspacecast {} addrspace(10)* addrspace(10)* %130 to {} addrspace(10)* addrspace(11)*, !dbg !8011
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %131, align 8, !dbg !8011, !tbaa !865, !alias.scope !116, !noalias !8012
  %132 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %131, i64 1, !dbg !8011
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %132, align 8, !dbg !8011, !tbaa !865, !alias.scope !116, !noalias !8012
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #74, !dbg !8011
  %133 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !8011
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 0, !dbg !8011
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859290304 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !8011, !tbaa !112, !alias.scope !116, !noalias !8012
  %.repack38 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 1, !dbg !8011
  store i64 %arraylen7, i64 addrspace(10)* %.repack38, align 8, !dbg !8011, !tbaa !112, !alias.scope !116, !noalias !8012
  %.repack40 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 2, !dbg !8011
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859290272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack40, align 8, !dbg !8011, !tbaa !112, !alias.scope !116, !noalias !8012
  %.repack42 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 3, !dbg !8011
  store i64 %arraylen9, i64 addrspace(10)* %.repack42, align 8, !dbg !8011, !tbaa !112, !alias.scope !116, !noalias !8012
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %131 release, align 8, !dbg !8011, !tbaa !865, !alias.scope !116, !noalias !8012
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct23, {} addrspace(10)* nofree nonnull %box) #75, !dbg !8011
  %134 = bitcast {} addrspace(10)* %newstruct23 to i8 addrspace(10)*, !dbg !8011
  %135 = addrspacecast i8 addrspace(10)* %134 to i8 addrspace(11)*, !dbg !8011
  %136 = getelementptr inbounds i8, i8 addrspace(11)* %135, i64 8, !dbg !8011
  %137 = bitcast i8 addrspace(11)* %136 to {} addrspace(10)* addrspace(11)*, !dbg !8011
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %137 release, align 8, !dbg !8011, !tbaa !865, !alias.scope !116, !noalias !8012
  %box26 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #74, !dbg !7969
  %138 = bitcast {} addrspace(10)* %box26 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !7969
  %139 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %138, i64 0, i64 0, !dbg !7969
  store {} addrspace(10)* %newstruct23, {} addrspace(10)* addrspace(10)* %139, align 8, !dbg !7969, !tbaa !112, !alias.scope !116, !noalias !8012
  %140 = addrspacecast {} addrspace(10)* %box26 to {} addrspace(12)*, !dbg !7969
  call void @ijl_throw({} addrspace(12)* %140) #71, !dbg !7969
  unreachable, !dbg !7969

L101:                                             ; preds = %cblas_ddot64_.exit
  %141 = addrspacecast [1 x [2 x i64]]* %31 to [1 x [2 x i64]] addrspace(11)*, !dbg !8007
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %141) #71, !dbg !8007
  unreachable, !dbg !8007

L104:                                             ; preds = %cblas_ddot64_.exit
  %142 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 3), !dbg !8013
  %143 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 12, !dbg !8013
  store {} addrspace(10)* %142, {} addrspace(10)** %143, align 8, !dbg !8013
  %144 = bitcast {} addrspace(10)* %142 to i8 addrspace(13)* addrspace(10)*, !dbg !8013
  %145 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %144, align 8, !dbg !8013
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %145, i8 0, i64 24, i1 false), !dbg !8013
  %146 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #72, !dbg !8013
  %147 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 13, !dbg !8018
  store {} addrspace(10)* %146, {} addrspace(10)** %147, align 8, !dbg !8018
  %_augmented18 = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143.329({} addrspace(10)* align 16 %146, {} addrspace(10)* align 16 %142, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1), !dbg !8018
  %148 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 11, !dbg !8020
  store { i8*, i8* } %_augmented18, { i8*, i8* }* %148, align 8, !dbg !8020
  %_augmented17 = call fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2136({} addrspace(10)* align 16 %146, {} addrspace(10)* align 16 %142), !dbg !8020
  %subcache = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented17, 0, !dbg !8020
  %149 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 9, !dbg !8020
  store { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %subcache, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %149, align 8, !dbg !8020
  %150 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented17, 1, !dbg !8020
  %"'ac" = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented17, 2, !dbg !8020
  %151 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 10, !dbg !7999
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %151, align 8, !dbg !7999
  %152 = bitcast [1 x [2 x i64]]* %33 to i8*, !dbg !7999
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %152, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const14 to i8*), i64 noundef 16, i1 noundef false) #70, !dbg !7999, !tbaa !85, !alias.scope !1680, !noalias !7930
  %arraylen18 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !8002, !tbaa !315, !range !86, !alias.scope !7939, !noalias !7942
  %153 = icmp ult i64 %arraylen18, 3, !dbg !8008
  br i1 %153, label %L135, label %L138, !dbg !8007

L135:                                             ; preds = %L104
  %154 = addrspacecast [1 x [2 x i64]]* %33 to [1 x [2 x i64]] addrspace(11)*, !dbg !8007
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %154) #71, !dbg !8007
  unreachable, !dbg !8007

L138:                                             ; preds = %L104
  %155 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 3), !dbg !8013
  %156 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 16, !dbg !8013
  store {} addrspace(10)* %155, {} addrspace(10)** %156, align 8, !dbg !8013
  %157 = bitcast {} addrspace(10)* %155 to i8 addrspace(13)* addrspace(10)*, !dbg !8013
  %158 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %157, align 8, !dbg !8013
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %158, i8 0, i64 24, i1 false), !dbg !8013
  %159 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #72, !dbg !8013
  %160 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 17, !dbg !8018
  store {} addrspace(10)* %159, {} addrspace(10)** %160, align 8, !dbg !8018
  %_augmented23 = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143.329({} addrspace(10)* align 16 %159, {} addrspace(10)* align 16 %155, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1), !dbg !8018
  %161 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 15, !dbg !8001
  store { i8*, i8* } %_augmented23, { i8*, i8* }* %161, align 8, !dbg !8001
  %"'ipg" = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %"'ipc19", i64 0, i64 0, !dbg !8001
  %162 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %48, i64 0, i64 0, !dbg !8001
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %"'ipg", align 8, !dbg !8001, !alias.scope !8021, !noalias !8024
  store {} addrspace(10)* %150, {} addrspace(10)* addrspace(10)* %162, align 8, !dbg !8001, !alias.scope !8028, !noalias !8029
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %40, {} addrspace(10)* %150), !dbg !8001
  %"'ipc20" = addrspacecast [1 x {} addrspace(10)*]* %"'ipc19" to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !8001
  %163 = addrspacecast [1 x {} addrspace(10)*] addrspace(10)* %48 to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !8001
  %_augmented21 = call fastcc { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } @augmented_julia___1993.330([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %163, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc20", {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %159, {} addrspace(10)* align 16 %155), !dbg !8001
  %subcache22 = extractvalue { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } %_augmented21, 0, !dbg !8001
  %164 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 14, !dbg !8001
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %subcache22, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %164, align 8, !dbg !8001
  %165 = extractvalue { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } %_augmented21, 1, !dbg !8001
  %166 = fmul double %165, 5.000000e-01, !dbg !8030
  %167 = fadd double %127, %166, !dbg !8031
  %newstruct20.sroa.0.0..sroa_idx = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 0, !dbg !8032
  store double %127, double* %newstruct20.sroa.0.0..sroa_idx, align 8, !dbg !8032, !alias.scope !8033, !noalias !8036
  %newstruct20.sroa.2.0..sroa_idx45 = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 1, !dbg !8032
  store double %166, double* %newstruct20.sroa.2.0..sroa_idx45, align 8, !dbg !8032, !alias.scope !8033, !noalias !8036
  %newstruct20.sroa.3.0..sroa_idx46 = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 2, !dbg !8032
  store double %167, double* %newstruct20.sroa.3.0..sroa_idx46, align 8, !dbg !8032, !alias.scope !8033, !noalias !8036
  %168 = load { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, align 8, !dbg !8032
  ret { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %168, !dbg !8032
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_compute_energy_2128.415([3 x double]* noalias nocapture nofree writeonly align 8 dereferenceable(24) "enzyme_sret" %0, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg) unnamed_addr #67 !dbg !8038 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %3 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %_cache = alloca double*, align 8
  %"'de43" = alloca double, align 8
  %4 = getelementptr double, double* %"'de43", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache44 = alloca double*, align 8
  %"'de47" = alloca double, align 8
  %5 = getelementptr double, double* %"'de47", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"'de48" = alloca double, align 8
  %6 = getelementptr double, double* %"'de48", i64 0
  store double 0.000000e+00, double* %6, align 8
  %_cache49 = alloca i64*, align 8
  %_cache55 = alloca i64*, align 8
  %"phi.bo'de" = alloca double, align 8
  %7 = getelementptr double, double* %"phi.bo'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %"'de67" = alloca double, align 8
  %8 = getelementptr double, double* %"'de67", i64 0
  store double 0.000000e+00, double* %8, align 8
  %"'de86" = alloca double, align 8
  %9 = getelementptr double, double* %"'de86", i64 0
  store double 0.000000e+00, double* %9, align 8
  %"'de87" = alloca double, align 8
  %10 = getelementptr double, double* %"'de87", i64 0
  store double 0.000000e+00, double* %10, align 8
  %"'de90" = alloca double, align 8
  %11 = getelementptr double, double* %"'de90", i64 0
  store double 0.000000e+00, double* %11, align 8
  %12 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 19
  %mdyncache_fromtape_cache = alloca i64*, align 8
  store i64* %12, i64** %mdyncache_fromtape_cache, align 8
  %13 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 20
  %mdyncache_fromtape_cache99 = alloca double*, align 8
  store double* %13, double** %mdyncache_fromtape_cache99, align 8
  %14 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 21
  %mdyncache_fromtape_cache101 = alloca i64*, align 8
  store i64* %14, i64** %mdyncache_fromtape_cache101, align 8
  %15 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 22
  %mdyncache_fromtape_cache103 = alloca double*, align 8
  store double* %15, double** %mdyncache_fromtape_cache103, align 8
  %16 = call {}*** @julia.get_pgcstack()
  %17 = bitcast {}*** %16 to {}**
  %18 = getelementptr inbounds {}*, {}** %17, i64 -14
  %"'ai" = alloca [1 x {} addrspace(10)*], i64 1, align 8
  %19 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %20 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %21 = bitcast {}* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull dereferenceable(8) dereferenceable_or_null(8) %21, i8 0, i64 8, i1 false)
  %22 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 0
  %"'ipc91" = bitcast {}* %19 to [1 x {} addrspace(10)*]*
  %23 = bitcast {} addrspace(10)* %22 to [1 x {} addrspace(10)*] addrspace(10)*, !enzyme_caststack !67
  %24 = call {}*** @julia.get_pgcstack() #70
  br i1 false, label %L19, label %L22, !dbg !8039

L19:                                              ; preds = %top
  unreachable

L22:                                              ; preds = %top
  %25 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 2, !dbg !8042
  %26 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 3, !dbg !8042
  %tapeArg26 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 1, !dbg !8047
  br i1 false, label %L51, label %L54, !dbg !8039

L51:                                              ; preds = %L22
  unreachable

L54:                                              ; preds = %L22
  %27 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 5, !dbg !8042
  %28 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 6, !dbg !8042
  %tapeArg32 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 4, !dbg !8047
  %arraylen7 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 18, !dbg !8049
  br i1 true, label %L69, label %L75, !dbg !8053

L69:                                              ; preds = %L54
  %29 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %26, {} addrspace(10)* %25, {} addrspace(10)* %28, {} addrspace(10)* %27), !dbg !8054
  %"'ipc37" = addrspacecast {} addrspace(10)* %25 to {} addrspace(11)*, !dbg !8055
  %30 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc37"), !dbg !8055
  %"arrayptr34'il_phi" = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 8, !dbg !8055
  %"'ipc" = addrspacecast {} addrspace(10)* %27 to {} addrspace(11)*, !dbg !8055
  %31 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !8055
  %"arrayptr1135'il_phi" = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 7, !dbg !8055
  %.not58 = icmp eq i64 %arraylen7, 0, !dbg !8059
  br i1 %.not58, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !8059

.preheader.preheader:                             ; preds = %L69
  %32 = add nsw i64 %arraylen7, -1, !dbg !8059
  %33 = add nuw i64 %32, 1, !dbg !8059
  %34 = mul nuw i64 %33, 8, !dbg !8059
  %35 = mul nuw i64 %33, 8, !dbg !8059
  %36 = mul nuw i64 %33, 8, !dbg !8059
  %37 = mul nuw i64 %33, 8, !dbg !8059
  br label %.preheader, !dbg !8059

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !8059
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !8059
  %38 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dbg !8059, !dereferenceable !3229, !invariant.group !8060
  %39 = getelementptr inbounds i64, i64* %38, i64 %iv, !dbg !8059
  %40 = load i64, i64* %39, align 8, !dbg !8059, !invariant.group !8061
  %"'ipg54" = getelementptr inbounds double, double* %"arrayptr34'il_phi", i64 %40, !dbg !8059
  %41 = load double*, double** %mdyncache_fromtape_cache99, align 8, !dbg !8059, !dereferenceable !3229, !invariant.group !8062
  %42 = getelementptr inbounds double, double* %41, i64 %iv, !dbg !8059
  %43 = load double, double* %42, align 8, !dbg !8059, !invariant.group !8063
  %44 = load i64*, i64** %mdyncache_fromtape_cache101, align 8, !dbg !8059, !dereferenceable !3229, !invariant.group !8064
  %45 = getelementptr inbounds i64, i64* %44, i64 %iv, !dbg !8059
  %46 = load i64, i64* %45, align 8, !dbg !8059, !invariant.group !8065
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr1135'il_phi", i64 %46, !dbg !8059
  %47 = load double*, double** %mdyncache_fromtape_cache103, align 8, !dbg !8059, !dereferenceable !3229, !invariant.group !8066
  %48 = getelementptr inbounds double, double* %47, i64 %iv, !dbg !8059
  %49 = load double, double* %48, align 8, !dbg !8059, !invariant.group !8067
  %50 = icmp eq i64 %iv.next, %arraylen7, !dbg !8059
  br i1 %50, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !8059, !llvm.loop !8068

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !8054

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L69
  call void @llvm.julia.gc_preserve_end(token %29) #70, !dbg !8054
  br i1 false, label %L101, label %L104, !dbg !8069

L75:                                              ; preds = %L54
  unreachable

L101:                                             ; preds = %cblas_ddot64_.exit
  unreachable

L104:                                             ; preds = %cblas_ddot64_.exit
  %51 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 12, !dbg !8072
  %52 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 13, !dbg !8072
  %tapeArg84 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 11, !dbg !8077
  %tapeArg82 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 9, !dbg !8079
  %"'ip_phi8" = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 10, !dbg !8079
  br i1 false, label %L135, label %L138, !dbg !8069

L135:                                             ; preds = %L104
  unreachable

L138:                                             ; preds = %L104
  %53 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 16, !dbg !8072
  %54 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 17, !dbg !8072
  %tapeArg97 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 15, !dbg !8077
  %"'ipg95" = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %"'ipc91", i64 0, i64 0, !dbg !8071
  store {} addrspace(10)* %"'ip_phi8", {} addrspace(10)** %"'ipg95", align 8, !dbg !8071, !alias.scope !8080, !noalias !8083
  %"'ipc92" = addrspacecast [1 x {} addrspace(10)*]* %"'ipc91" to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !8071
  %55 = addrspacecast [1 x {} addrspace(10)*] addrspace(10)* %23 to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !8071
  %tapeArg93 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 14, !dbg !8071
  %"newstruct20.sroa.0.0..sroa_idx'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'", i64 0, i64 0, !dbg !8085
  %"newstruct20.sroa.2.0..sroa_idx45'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'", i64 0, i64 1, !dbg !8085
  %"newstruct20.sroa.3.0..sroa_idx46'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'", i64 0, i64 2, !dbg !8085
  br label %invertL138, !dbg !8085

inverttop:                                        ; preds = %invertL22
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL22:                                        ; preds = %invertL54
  call fastcc void @diffejulia__copyto_impl__2143({} addrspace(10)* align 16 %26, {} addrspace(10)* align 16 %25, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4, { i8*, i8* } %tapeArg26), !dbg !8047
  br label %inverttop

invertL54:                                        ; preds = %invertL69
  call fastcc void @diffejulia__copyto_impl__2143({} addrspace(10)* align 16 %28, {} addrspace(10)* align 16 %27, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4, { i8*, i8* } %tapeArg32), !dbg !8047
  br label %invertL22

invertL69:                                        ; preds = %invertcblas_ddot64_.exit, %invert.preheader.preheader
  call void @llvm.julia.gc_preserve_end(token %117), !dbg !8054
  br label %invertL54

invert.preheader.preheader:                       ; preds = %invert.preheader
  %56 = load i64, i64* %"iv'ac", align 8
  %57 = load i64, i64* %"iv'ac", align 8
  %58 = load i64, i64* %"iv'ac", align 8
  %59 = load i64, i64* %"iv'ac", align 8
  %60 = load i64, i64* %"iv'ac", align 8
  %forfree98 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dereferenceable !3229, !invariant.group !8060
  %61 = bitcast i64* %forfree98 to i8*
  call void @free(i8* nonnull %61), !dbg !8086
  %62 = load i64, i64* %"iv'ac", align 8
  %forfree100 = load double*, double** %mdyncache_fromtape_cache99, align 8, !dereferenceable !3229, !invariant.group !8062
  %63 = bitcast double* %forfree100 to i8*
  call void @free(i8* nonnull %63), !dbg !8086
  %64 = load i64, i64* %"iv'ac", align 8
  %forfree102 = load i64*, i64** %mdyncache_fromtape_cache101, align 8, !dereferenceable !3229, !invariant.group !8064
  %65 = bitcast i64* %forfree102 to i8*
  call void @free(i8* nonnull %65), !dbg !8086
  %66 = load i64, i64* %"iv'ac", align 8
  %forfree104 = load double*, double** %mdyncache_fromtape_cache103, align 8, !dereferenceable !3229, !invariant.group !8066
  %67 = bitcast double* %forfree104 to i8*
  call void @free(i8* nonnull %67), !dbg !8086
  br label %invertL69

invert.preheader:                                 ; preds = %mergeinvert.preheader_cblas_ddot64_.exit.loopexit, %incinvert.preheader
  %68 = load double, double* %"'de", align 8, !dbg !8059
  store double 0.000000e+00, double* %"'de", align 8, !dbg !8059
  %69 = load i64, i64* %"iv'ac", align 8, !dbg !8059
  %arraylen7_unwrap = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 18, !dbg !8059
  %_unwrap = add nsw i64 %arraylen7_unwrap, -1, !dbg !8059
  %70 = add nuw i64 %_unwrap, 1, !dbg !8059
  %71 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 22, !dbg !8059
  %72 = getelementptr inbounds double, double* %71, i64 %69, !dbg !8059
  %73 = load double, double* %72, align 8, !dbg !8059, !tbaa !1662, !invariant.group !8087
  %74 = fmul fast double %68, %73, !dbg !8059
  %75 = load double, double* %"'de43", align 8, !dbg !8059
  %76 = fadd fast double %75, %74, !dbg !8059
  store double %76, double* %"'de43", align 8, !dbg !8059
  %77 = load i64, i64* %"iv'ac", align 8, !dbg !8059
  %78 = add nuw i64 %_unwrap, 1, !dbg !8059
  %79 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 20, !dbg !8059
  %80 = getelementptr inbounds double, double* %79, i64 %77, !dbg !8059
  %81 = load double, double* %80, align 8, !dbg !8059, !tbaa !1662, !invariant.group !8088
  %82 = fmul fast double %68, %81, !dbg !8059
  %83 = load double, double* %"'de47", align 8, !dbg !8059
  %84 = fadd fast double %83, %82, !dbg !8059
  store double %84, double* %"'de47", align 8, !dbg !8059
  %85 = load double, double* %"'de48", align 8, !dbg !8059
  %86 = fadd fast double %85, %68, !dbg !8059
  store double %86, double* %"'de48", align 8, !dbg !8059
  %87 = load double, double* %"'de47", align 8, !dbg !8059
  store double 0.000000e+00, double* %"'de47", align 8, !dbg !8059
  %88 = load i64, i64* %"iv'ac", align 8, !dbg !8059
  %89 = add nuw i64 %_unwrap, 1, !dbg !8059
  %90 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 21, !dbg !8059
  %91 = getelementptr inbounds i64, i64* %90, i64 %88, !dbg !8059
  %92 = load i64, i64* %91, align 8, !dbg !8059, !invariant.group !8089
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr1135'il_phi", i64 %92, !dbg !8059
  %93 = load double, double* %"'ipg_unwrap", align 8, !dbg !8059, !tbaa !1662, !alias.scope !8090, !noalias !8093
  %94 = fadd fast double %93, %87, !dbg !8059
  store double %94, double* %"'ipg_unwrap", align 8, !dbg !8059, !tbaa !1662, !alias.scope !8090, !noalias !8093
  %95 = load double, double* %"'de43", align 8, !dbg !8059
  store double 0.000000e+00, double* %"'de43", align 8, !dbg !8059
  %96 = load i64, i64* %"iv'ac", align 8, !dbg !8059
  %97 = add nuw i64 %_unwrap, 1, !dbg !8059
  %98 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 19, !dbg !8059
  %99 = getelementptr inbounds i64, i64* %98, i64 %96, !dbg !8059
  %100 = load i64, i64* %99, align 8, !dbg !8059, !invariant.group !8095
  %"'ipg54_unwrap" = getelementptr inbounds double, double* %"arrayptr34'il_phi", i64 %100, !dbg !8059
  %101 = load double, double* %"'ipg54_unwrap", align 8, !dbg !8059, !tbaa !1662, !alias.scope !8096, !noalias !8099
  %102 = fadd fast double %101, %95, !dbg !8059
  store double %102, double* %"'ipg54_unwrap", align 8, !dbg !8059, !tbaa !1662, !alias.scope !8096, !noalias !8099
  %103 = load double, double* %"'de48", align 8
  store double 0.000000e+00, double* %"'de48", align 8
  %104 = load i64, i64* %"iv'ac", align 8
  %105 = icmp eq i64 %104, 0
  %106 = xor i1 %105, true
  %107 = select fast i1 %106, double %103, double 0.000000e+00
  %108 = load double, double* %"'de", align 8
  %109 = fadd fast double %108, %103
  %110 = select fast i1 %105, double %108, double %109
  store double %110, double* %"'de", align 8
  br i1 %105, label %invert.preheader.preheader, label %incinvert.preheader

incinvert.preheader:                              ; preds = %invert.preheader
  %111 = load i64, i64* %"iv'ac", align 8
  %112 = add nsw i64 %111, -1
  store i64 %112, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit.loopexit:                ; preds = %invertcblas_ddot64_.exit
  %113 = load double, double* %"phi.bo'de", align 8, !dbg !8054
  store double 0.000000e+00, double* %"phi.bo'de", align 8, !dbg !8054
  %114 = fmul fast double %113, 5.000000e-01, !dbg !8054
  %115 = load double, double* %"'de", align 8, !dbg !8054
  %116 = fadd fast double %115, %114, !dbg !8054
  store double %116, double* %"'de", align 8, !dbg !8054
  %_unwrap63 = add nsw i64 %arraylen7, -1
  br label %mergeinvert.preheader_cblas_ddot64_.exit.loopexit

mergeinvert.preheader_cblas_ddot64_.exit.loopexit: ; preds = %invertcblas_ddot64_.exit.loopexit
  store i64 %_unwrap63, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit:                         ; preds = %invertL104
  %117 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %26, {} addrspace(10)* %25, {} addrspace(10)* %28, {} addrspace(10)* %27), !dbg !8054
  %118 = load double, double* %"'de67", align 8
  store double 0.000000e+00, double* %"'de67", align 8
  %119 = xor i1 %.not58, true
  %120 = select fast i1 %119, double %118, double 0.000000e+00
  %121 = load double, double* %"phi.bo'de", align 8
  %122 = fadd fast double %121, %118
  %123 = select fast i1 %.not58, double %121, double %122
  store double %123, double* %"phi.bo'de", align 8
  br i1 %.not58, label %invertL69, label %invertcblas_ddot64_.exit.loopexit

invertL104:                                       ; preds = %invertL138
  call fastcc void @diffejulia___2136({} addrspace(10)* align 16 %52, {} addrspace(10)* align 16 %51, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg82), !dbg !8079
  call fastcc void @diffejulia__copyto_impl__2143.331({} addrspace(10)* align 16 %52, {} addrspace(10)* align 16 %51, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1, { i8*, i8* } %tapeArg84), !dbg !8077
  br label %invertcblas_ddot64_.exit

invertL138:                                       ; preds = %L138
  %124 = load double, double* %"newstruct20.sroa.3.0..sroa_idx46'ipg", align 8, !dbg !8085, !alias.scope !8101, !noalias !8104
  store double 0.000000e+00, double* %"newstruct20.sroa.3.0..sroa_idx46'ipg", align 8, !dbg !8085, !alias.scope !8101, !noalias !8104
  %125 = load double, double* %"'de86", align 8, !dbg !8085
  %126 = fadd fast double %125, %124, !dbg !8085
  store double %126, double* %"'de86", align 8, !dbg !8085
  %127 = load double, double* %"newstruct20.sroa.2.0..sroa_idx45'ipg", align 8, !dbg !8085, !alias.scope !8101, !noalias !8104
  store double 0.000000e+00, double* %"newstruct20.sroa.2.0..sroa_idx45'ipg", align 8, !dbg !8085, !alias.scope !8101, !noalias !8104
  %128 = load double, double* %"'de87", align 8, !dbg !8085
  %129 = fadd fast double %128, %127, !dbg !8085
  store double %129, double* %"'de87", align 8, !dbg !8085
  %130 = load double, double* %"newstruct20.sroa.0.0..sroa_idx'ipg", align 8, !dbg !8085, !alias.scope !8101, !noalias !8104
  store double 0.000000e+00, double* %"newstruct20.sroa.0.0..sroa_idx'ipg", align 8, !dbg !8085, !alias.scope !8101, !noalias !8104
  %131 = load double, double* %"'de67", align 8, !dbg !8085
  %132 = fadd fast double %131, %130, !dbg !8085
  store double %132, double* %"'de67", align 8, !dbg !8085
  %133 = load double, double* %"'de86", align 8, !dbg !8106
  store double 0.000000e+00, double* %"'de86", align 8, !dbg !8106
  %134 = load double, double* %"'de67", align 8, !dbg !8106
  %135 = fadd fast double %134, %133, !dbg !8106
  store double %135, double* %"'de67", align 8, !dbg !8106
  %136 = load double, double* %"'de87", align 8, !dbg !8106
  %137 = fadd fast double %136, %133, !dbg !8106
  store double %137, double* %"'de87", align 8, !dbg !8106
  %138 = load double, double* %"'de87", align 8, !dbg !8107
  store double 0.000000e+00, double* %"'de87", align 8, !dbg !8107
  %139 = fmul fast double %138, 5.000000e-01, !dbg !8107
  %140 = load double, double* %"'de90", align 8, !dbg !8107
  %141 = fadd fast double %140, %139, !dbg !8107
  store double %141, double* %"'de90", align 8, !dbg !8107
  %142 = load double, double* %"'de90", align 8, !dbg !8071
  call fastcc void @diffejulia___1993.332([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %55, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc92", {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %54, {} addrspace(10)* align 16 %53, double %142, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg93), !dbg !8071
  store double 0.000000e+00, double* %"'de90", align 8, !dbg !8071
  call fastcc void @diffejulia__copyto_impl__2143.331({} addrspace(10)* align 16 %54, {} addrspace(10)* align 16 %53, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1, { i8*, i8* } %tapeArg97), !dbg !8077
  br label %invertL104
}

; Function Attrs: mustprogress willreturn
define internal void @diffejulia_integrate1_1957({} addrspace(10)* noundef nonnull align 8 dereferenceable(192) %0, {} addrspace(10)* align 8 %"'") local_unnamed_addr #54 !dbg !3005 {
top:
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %loopLimit_cache = alloca i64, align 8
  %"iv3'ac" = alloca i64, align 8
  %"iv5'ac" = alloca i64, align 8
  %"iv7'ac" = alloca i64, align 8
  %"iv9'ac" = alloca i64, align 8
  %"iv11'ac" = alloca i64, align 8
  %loopLimit_cache22 = alloca i64*, align 8
  %"iv13'ac" = alloca i64, align 8
  %"iv15'ac" = alloca i64, align 8
  %"iv17'ac" = alloca i64, align 8
  %loopLimit_cache43 = alloca i64*, align 8
  %"iv19'ac" = alloca i64, align 8
  %loopLimit_cache55 = alloca i64*, align 8
  %"'de" = alloca double, align 8
  %1 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %1, align 8
  %"'de85" = alloca double, align 8
  %2 = getelementptr double, double* %"'de85", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"'de94" = alloca double, align 8
  %3 = getelementptr double, double* %"'de94", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"'ip_phi2_cache" = alloca {} addrspace(10)*, align 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %"'ip_phi2_cache", align 8
  %.not941.not_cache = alloca i1, align 1
  %_cache = alloca {} addrspace(10)*, align 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %_cache, align 8
  %_cache110 = alloca {} addrspace(10)*, align 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %_cache110, align 8
  %_augmented_cache = alloca i64, align 8
  %"'ip_phi5_cache" = alloca {} addrspace(10)*, align 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %"'ip_phi5_cache", align 8
  %.not951.not_cache = alloca i1, align 1
  %"arrayref780'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref780'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache119 = alloca {} addrspace(10)*, align 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %_cache119, align 8
  %.not954_cache = alloca i1, align 1
  %_cache123 = alloca i8, align 1
  %value_phi79_cache = alloca i64*, align 8
  %"arrayref749'de" = alloca double, align 8
  %5 = getelementptr double, double* %"arrayref749'de", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"'ip_phi14_cache" = alloca {} addrspace(10)*, align 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %"'ip_phi14_cache", align 8
  %"'de156" = alloca double, align 8
  %6 = getelementptr double, double* %"'de156", i64 0
  store double 0.000000e+00, double* %6, align 8
  %arrayref_cache = alloca double*, align 8
  %"arrayref'de" = alloca double, align 8
  %7 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %_cache177 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi17_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache182_cache = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, align 8
  %"value_phi372'de" = alloca double, align 8
  %8 = getelementptr double, double* %"value_phi372'de", i64 0
  store double 0.000000e+00, double* %8, align 8
  %"'de185" = alloca double, align 8
  %9 = getelementptr double, double* %"'de185", i64 0
  store double 0.000000e+00, double* %9, align 8
  %_cache186 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %value_phi419_cache = alloca i64**, align 8
  %"arrayref716'de" = alloca double, align 8
  %10 = getelementptr double, double* %"arrayref716'de", i64 0
  store double 0.000000e+00, double* %10, align 8
  %arraysize390_cache = alloca i64, align 8
  %_cache213 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache221 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_augmented181_cache = alloca { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, align 8
  %_cache225 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi71_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache229 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi25_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache233 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi24_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache237 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache241_cache = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, align 8
  %_cache244 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %box441_cache = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"box441'mi_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache254 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"newstruct435'mi_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache270 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache273 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache285 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache294 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache298 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi31_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi34_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache314 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache317 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %.not916.not_cache = alloca i1*, align 8
  %_cache333 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache337 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_augmented341_cache = alloca { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)*, align 8
  %"'ip_phi37_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %.not926.not_cache = alloca i1*, align 8
  %"arrayref695'de" = alloca double, align 8
  %11 = getelementptr double, double* %"arrayref695'de", i64 0
  store double 0.000000e+00, double* %11, align 8
  %_cache365 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %.not929_cache = alloca i1*, align 8
  %_cache372 = alloca i8*, align 8
  %_cache377 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi39_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache383_cache = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, align 8
  %"'de386" = alloca double, align 8
  %12 = getelementptr double, double* %"'de386", i64 0
  store double 0.000000e+00, double* %12, align 8
  %.not8931036_cache = alloca i1*, align 8
  %_cache391 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %value_phi529_cache = alloca i64**, align 8
  %"arrayref656'de" = alloca double, align 8
  %13 = getelementptr double, double* %"arrayref656'de", i64 0
  store double 0.000000e+00, double* %13, align 8
  %arraysize500_cache = alloca i64, align 8
  %_cache418 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache422 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi51_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache427_cache = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, align 8
  %_cache430 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_augmented382_cache = alloca { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, align 8
  %_cache434 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi48_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache439_cache = alloca { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, align 8
  %_cache442 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi47_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache446 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache450_cache = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, align 8
  %value_phi585_cache = alloca i64**, align 8
  %"arrayref640'de" = alloca double, align 8
  %14 = getelementptr double, double* %"arrayref640'de", i64 0
  store double 0.000000e+00, double* %14, align 8
  %"'de479" = alloca double, align 8
  %15 = getelementptr double, double* %"'de479", i64 0
  store double 0.000000e+00, double* %15, align 8
  %"'de480" = alloca double, align 8
  %16 = getelementptr double, double* %"'de480", i64 0
  store double 0.000000e+00, double* %16, align 8
  %_cache484 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi61_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache490_cache = alloca { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)*, align 8
  %_cache493 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_augmented426_cache = alloca { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, align 8
  %_cache497 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi60_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache502_cache = alloca { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, align 8
  %_cache505 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi59_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache509 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache513_cache = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, align 8
  %_cache518 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi73_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_augmented525_cache = alloca { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)*, align 8
  %"'de531" = alloca double, align 8
  %17 = getelementptr double, double* %"'de531", i64 0
  store double 0.000000e+00, double* %17, align 8
  %"'de532" = alloca double, align 8
  %18 = getelementptr double, double* %"'de532", i64 0
  store double 0.000000e+00, double* %18, align 8
  %"'de533" = alloca double, align 8
  %19 = getelementptr double, double* %"'de533", i64 0
  store double 0.000000e+00, double* %19, align 8
  %"'de541" = alloca double, align 8
  %20 = getelementptr double, double* %"'de541", i64 0
  store double 0.000000e+00, double* %20, align 8
  %"'de544" = alloca double, align 8
  %21 = getelementptr double, double* %"'de544", i64 0
  store double 0.000000e+00, double* %21, align 8
  %"'de550" = alloca double, align 8
  %22 = getelementptr double, double* %"'de550", i64 0
  store double 0.000000e+00, double* %22, align 8
  %_cache555 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache563 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi70_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache567 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache574 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi69_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache578 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache585 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi68_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache589 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache596 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi67_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache600 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %box_cache = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"box'mi_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache609 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi66_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'de614" = alloca double, align 8
  %23 = getelementptr double, double* %"'de614", i64 0
  store double 0.000000e+00, double* %23, align 8
  %_cache615 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache622 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ipl176_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'de629" = alloca double, align 8
  %24 = getelementptr double, double* %"'de629", i64 0
  store double 0.000000e+00, double* %24, align 8
  %"'de630" = alloca double, align 8
  %25 = getelementptr double, double* %"'de630", i64 0
  store double 0.000000e+00, double* %25, align 8
  %"'de631" = alloca double, align 8
  %26 = getelementptr double, double* %"'de631", i64 0
  store double 0.000000e+00, double* %26, align 8
  %_augmented633_cache = alloca { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)*, align 8
  %_cache635 = alloca i8*, align 8
  %27 = call {}*** @julia.get_pgcstack()
  %28 = call {}*** @julia.get_pgcstack()
  %29 = call {}*** @julia.get_pgcstack()
  %30 = call {}*** @julia.get_pgcstack()
  %31 = call {}*** @julia.get_pgcstack()
  %32 = call {}*** @julia.get_pgcstack()
  %33 = call {}*** @julia.get_pgcstack()
  %34 = call {}*** @julia.get_pgcstack()
  %35 = call {}*** @julia.get_pgcstack()
  %36 = call {}*** @julia.get_pgcstack()
  %37 = call {}*** @julia.get_pgcstack()
  %38 = call {}*** @julia.get_pgcstack()
  %39 = call {}*** @julia.get_pgcstack()
  %40 = call {}*** @julia.get_pgcstack()
  %41 = call {}*** @julia.get_pgcstack()
  %42 = call {}*** @julia.get_pgcstack()
  %43 = call {}*** @julia.get_pgcstack()
  %44 = call {}*** @julia.get_pgcstack()
  %45 = call {}*** @julia.get_pgcstack()
  %46 = call {}*** @julia.get_pgcstack()
  %47 = call {}*** @julia.get_pgcstack()
  %48 = call {}*** @julia.get_pgcstack()
  %49 = call {}*** @julia.get_pgcstack()
  %50 = call {}*** @julia.get_pgcstack()
  %51 = call {}*** @julia.get_pgcstack()
  %52 = call {}*** @julia.get_pgcstack()
  %53 = call {}*** @julia.get_pgcstack()
  %54 = call {}*** @julia.get_pgcstack()
  %55 = call {}*** @julia.get_pgcstack()
  %56 = call {}*** @julia.get_pgcstack()
  %57 = call {}*** @julia.get_pgcstack()
  %58 = call {}*** @julia.get_pgcstack()
  %59 = call {}*** @julia.get_pgcstack()
  %60 = call {}*** @julia.get_pgcstack()
  %61 = call {}*** @julia.get_pgcstack()
  %62 = call {}*** @julia.get_pgcstack()
  %63 = call {}*** @julia.get_pgcstack()
  %64 = call {}*** @julia.get_pgcstack()
  %65 = call {}*** @julia.get_pgcstack()
  %66 = call {}*** @julia.get_pgcstack()
  %67 = call {}*** @julia.get_pgcstack()
  %68 = call {}*** @julia.get_pgcstack()
  %69 = call {}*** @julia.get_pgcstack()
  %70 = call {}*** @julia.get_pgcstack()
  %71 = call {}*** @julia.get_pgcstack()
  %72 = call {}*** @julia.get_pgcstack()
  %73 = call {}*** @julia.get_pgcstack()
  %74 = call {}*** @julia.get_pgcstack()
  %75 = call {}*** @julia.get_pgcstack()
  %76 = call {}*** @julia.get_pgcstack()
  %77 = call {}*** @julia.get_pgcstack()
  %78 = call {}*** @julia.get_pgcstack()
  %79 = call {}*** @julia.get_pgcstack()
  %80 = call {}*** @julia.get_pgcstack()
  %81 = call {}*** @julia.get_pgcstack()
  %82 = call {}*** @julia.get_pgcstack()
  %83 = call {}*** @julia.get_pgcstack()
  %84 = call {}*** @julia.get_pgcstack()
  %85 = call {}*** @julia.get_pgcstack()
  %86 = call {}*** @julia.get_pgcstack()
  %87 = call {}*** @julia.get_pgcstack()
  %88 = call {}*** @julia.get_pgcstack()
  %89 = call {}*** @julia.get_pgcstack()
  %90 = call {}*** @julia.get_pgcstack()
  %91 = call {}*** @julia.get_pgcstack()
  %92 = call {}*** @julia.get_pgcstack()
  %93 = call {}*** @julia.get_pgcstack()
  %94 = call {}*** @julia.get_pgcstack()
  %95 = call {}*** @julia.get_pgcstack()
  %96 = call {}*** @julia.get_pgcstack()
  %97 = call {}*** @julia.get_pgcstack()
  %98 = call {}*** @julia.get_pgcstack()
  %99 = call {}*** @julia.get_pgcstack()
  %100 = call {}*** @julia.get_pgcstack()
  %101 = call {}*** @julia.get_pgcstack()
  %102 = call {}*** @julia.get_pgcstack()
  %103 = call {}*** @julia.get_pgcstack()
  %104 = call {}*** @julia.get_pgcstack()
  %105 = call {}*** @julia.get_pgcstack()
  %106 = call {}*** @julia.get_pgcstack()
  %107 = call {}*** @julia.get_pgcstack()
  %108 = call {}*** @julia.get_pgcstack()
  %109 = call {}*** @julia.get_pgcstack()
  %110 = call {}*** @julia.get_pgcstack()
  %111 = call {}*** @julia.get_pgcstack()
  %112 = call {}*** @julia.get_pgcstack()
  %113 = call {}*** @julia.get_pgcstack()
  %114 = call {}*** @julia.get_pgcstack()
  %115 = call {}*** @julia.get_pgcstack()
  %116 = call {}*** @julia.get_pgcstack()
  %117 = call {}*** @julia.get_pgcstack()
  %118 = call {}*** @julia.get_pgcstack()
  %119 = call {}*** @julia.get_pgcstack()
  %120 = call {}*** @julia.get_pgcstack()
  %121 = call {}*** @julia.get_pgcstack()
  %122 = call {}*** @julia.get_pgcstack()
  %123 = call {}*** @julia.get_pgcstack()
  %124 = call {}*** @julia.get_pgcstack()
  %125 = call {}*** @julia.get_pgcstack()
  %126 = call {}*** @julia.get_pgcstack()
  %127 = call {}*** @julia.get_pgcstack()
  %128 = call {}*** @julia.get_pgcstack()
  %129 = call {}*** @julia.get_pgcstack()
  %130 = call {}*** @julia.get_pgcstack()
  %131 = call {}*** @julia.get_pgcstack()
  %132 = call {}*** @julia.get_pgcstack()
  %133 = call {}*** @julia.get_pgcstack()
  %134 = call {}*** @julia.get_pgcstack()
  %135 = call {}*** @julia.get_pgcstack()
  %136 = call {}*** @julia.get_pgcstack()
  %137 = call {}*** @julia.get_pgcstack()
  %138 = call {}*** @julia.get_pgcstack()
  %139 = call {}*** @julia.get_pgcstack()
  %140 = call {}*** @julia.get_pgcstack()
  %141 = call {}*** @julia.get_pgcstack()
  %142 = call {}*** @julia.get_pgcstack()
  %143 = call {}*** @julia.get_pgcstack()
  %144 = call {}*** @julia.get_pgcstack()
  %145 = call {}*** @julia.get_pgcstack()
  %146 = call {}*** @julia.get_pgcstack()
  %147 = call {}*** @julia.get_pgcstack()
  %148 = call {}*** @julia.get_pgcstack()
  %149 = call {}*** @julia.get_pgcstack()
  %150 = call {}*** @julia.get_pgcstack()
  %151 = call {}*** @julia.get_pgcstack()
  %152 = call {}*** @julia.get_pgcstack()
  %153 = call {}*** @julia.get_pgcstack()
  %154 = call {}*** @julia.get_pgcstack()
  %155 = call {}*** @julia.get_pgcstack()
  %156 = call {}*** @julia.get_pgcstack()
  %157 = call {}*** @julia.get_pgcstack()
  %158 = call {}*** @julia.get_pgcstack()
  %159 = call {}*** @julia.get_pgcstack()
  %160 = call {}*** @julia.get_pgcstack()
  %161 = call {}*** @julia.get_pgcstack()
  %162 = call {}*** @julia.get_pgcstack()
  %163 = call {}*** @julia.get_pgcstack()
  %164 = call {}*** @julia.get_pgcstack()
  %165 = call {}*** @julia.get_pgcstack()
  %166 = call {}*** @julia.get_pgcstack()
  %167 = call {}*** @julia.get_pgcstack()
  %168 = call {}*** @julia.get_pgcstack()
  %169 = call {}*** @julia.get_pgcstack()
  %170 = call {}*** @julia.get_pgcstack()
  %171 = call {}*** @julia.get_pgcstack()
  %172 = call {}*** @julia.get_pgcstack()
  %173 = call {}*** @julia.get_pgcstack()
  %174 = call {}*** @julia.get_pgcstack()
  %175 = call {}*** @julia.get_pgcstack()
  %176 = call {}*** @julia.get_pgcstack()
  %177 = call {}*** @julia.get_pgcstack()
  %178 = call {}*** @julia.get_pgcstack()
  %179 = call {}*** @julia.get_pgcstack()
  %180 = call {}*** @julia.get_pgcstack()
  %181 = call {}*** @julia.get_pgcstack()
  %182 = call {}*** @julia.get_pgcstack()
  %183 = call {}*** @julia.get_pgcstack()
  %184 = call {}*** @julia.get_pgcstack()
  %185 = call {}*** @julia.get_pgcstack()
  %186 = call {}*** @julia.get_pgcstack()
  %187 = call {}*** @julia.get_pgcstack()
  %188 = call {}*** @julia.get_pgcstack()
  %189 = call {}*** @julia.get_pgcstack()
  %190 = call {}*** @julia.get_pgcstack()
  %191 = call {}*** @julia.get_pgcstack()
  %192 = call {}*** @julia.get_pgcstack()
  %193 = call {}*** @julia.get_pgcstack()
  %194 = call {}*** @julia.get_pgcstack()
  %195 = call {}*** @julia.get_pgcstack()
  %196 = call {}*** @julia.get_pgcstack()
  %197 = call {}*** @julia.get_pgcstack()
  %198 = call {}*** @julia.get_pgcstack()
  %199 = call {}*** @julia.get_pgcstack()
  %200 = call {}*** @julia.get_pgcstack()
  %201 = call {}*** @julia.get_pgcstack()
  %202 = call {}*** @julia.get_pgcstack()
  %203 = call {}*** @julia.get_pgcstack()
  %204 = call {}*** @julia.get_pgcstack()
  %205 = call {}*** @julia.get_pgcstack()
  %206 = call {}*** @julia.get_pgcstack()
  %207 = call {}*** @julia.get_pgcstack()
  %208 = call {}*** @julia.get_pgcstack()
  %209 = call {}*** @julia.get_pgcstack()
  %210 = call {}*** @julia.get_pgcstack()
  %211 = call {}*** @julia.get_pgcstack()
  %212 = call {}*** @julia.get_pgcstack()
  %213 = call {}*** @julia.get_pgcstack()
  %214 = call {}*** @julia.get_pgcstack()
  %215 = call {}*** @julia.get_pgcstack()
  %216 = call {}*** @julia.get_pgcstack()
  %217 = call {}*** @julia.get_pgcstack()
  %218 = call {}*** @julia.get_pgcstack()
  %219 = call {}*** @julia.get_pgcstack()
  %220 = call {}*** @julia.get_pgcstack()
  %221 = call {}*** @julia.get_pgcstack()
  %222 = call {}*** @julia.get_pgcstack()
  %223 = call {}*** @julia.get_pgcstack()
  %224 = call {}*** @julia.get_pgcstack()
  %225 = call {}*** @julia.get_pgcstack()
  %226 = call {}*** @julia.get_pgcstack()
  %227 = call {}*** @julia.get_pgcstack()
  %228 = call {}*** @julia.get_pgcstack()
  %229 = call {}*** @julia.get_pgcstack()
  %230 = call {}*** @julia.get_pgcstack()
  %231 = call {}*** @julia.get_pgcstack()
  %232 = call {}*** @julia.get_pgcstack()
  %233 = call {}*** @julia.get_pgcstack()
  %234 = call {}*** @julia.get_pgcstack()
  %235 = call {}*** @julia.get_pgcstack()
  %236 = call {}*** @julia.get_pgcstack()
  %237 = call {}*** @julia.get_pgcstack()
  %238 = call {}*** @julia.get_pgcstack()
  %239 = call {}*** @julia.get_pgcstack()
  %240 = call {}*** @julia.get_pgcstack()
  %241 = call {}*** @julia.get_pgcstack()
  %242 = call {}*** @julia.get_pgcstack()
  %243 = call {}*** @julia.get_pgcstack()
  %244 = call {}*** @julia.get_pgcstack()
  %245 = call {}*** @julia.get_pgcstack()
  %246 = call {}*** @julia.get_pgcstack()
  %247 = call {}*** @julia.get_pgcstack()
  %248 = call {}*** @julia.get_pgcstack()
  %249 = call {}*** @julia.get_pgcstack()
  %250 = call {}*** @julia.get_pgcstack()
  %251 = call {}*** @julia.get_pgcstack()
  %252 = call {}*** @julia.get_pgcstack()
  %253 = call {}*** @julia.get_pgcstack()
  %254 = call {}*** @julia.get_pgcstack()
  %255 = call {}*** @julia.get_pgcstack()
  %256 = call {}*** @julia.get_pgcstack()
  %257 = call {}*** @julia.get_pgcstack()
  %258 = call {}*** @julia.get_pgcstack()
  %259 = call {}*** @julia.get_pgcstack()
  %260 = call {}*** @julia.get_pgcstack()
  %261 = call {}*** @julia.get_pgcstack()
  %262 = call {}*** @julia.get_pgcstack()
  %263 = call {}*** @julia.get_pgcstack()
  %264 = call {}*** @julia.get_pgcstack()
  %265 = call {}*** @julia.get_pgcstack()
  %266 = call {}*** @julia.get_pgcstack()
  %267 = call {}*** @julia.get_pgcstack()
  %268 = call {}*** @julia.get_pgcstack()
  %269 = call {}*** @julia.get_pgcstack()
  %270 = call {}*** @julia.get_pgcstack()
  %271 = call {}*** @julia.get_pgcstack()
  %272 = call {}*** @julia.get_pgcstack()
  %273 = call {}*** @julia.get_pgcstack()
  %274 = call {}*** @julia.get_pgcstack()
  %275 = call {}*** @julia.get_pgcstack()
  %276 = call {}*** @julia.get_pgcstack()
  %277 = call {}*** @julia.get_pgcstack()
  %278 = call {}*** @julia.get_pgcstack()
  %279 = call {}*** @julia.get_pgcstack()
  %280 = call {}*** @julia.get_pgcstack()
  %281 = call {}*** @julia.get_pgcstack()
  %282 = call {}*** @julia.get_pgcstack()
  %283 = call {}*** @julia.get_pgcstack()
  %284 = call {}*** @julia.get_pgcstack()
  %285 = call {}*** @julia.get_pgcstack()
  %286 = call {}*** @julia.get_pgcstack()
  %287 = call {}*** @julia.get_pgcstack()
  %288 = call {}*** @julia.get_pgcstack()
  %289 = call {}*** @julia.get_pgcstack()
  %290 = call {}*** @julia.get_pgcstack()
  %291 = call {}*** @julia.get_pgcstack()
  %292 = call {}*** @julia.get_pgcstack()
  %293 = call {}*** @julia.get_pgcstack()
  %294 = call {}*** @julia.get_pgcstack()
  %295 = call {}*** @julia.get_pgcstack()
  %296 = call {}*** @julia.get_pgcstack()
  %297 = call {}*** @julia.get_pgcstack()
  %298 = call {}*** @julia.get_pgcstack()
  %299 = call {}*** @julia.get_pgcstack()
  %300 = call {}*** @julia.get_pgcstack()
  %301 = call {}*** @julia.get_pgcstack()
  %302 = call {}*** @julia.get_pgcstack()
  %303 = call {}*** @julia.get_pgcstack()
  %304 = call {}*** @julia.get_pgcstack()
  %305 = call {}*** @julia.get_pgcstack()
  %306 = call {}*** @julia.get_pgcstack()
  %307 = call {}*** @julia.get_pgcstack()
  %308 = call {}*** @julia.get_pgcstack()
  %309 = call {}*** @julia.get_pgcstack()
  %310 = call {}*** @julia.get_pgcstack()
  %311 = call {}*** @julia.get_pgcstack()
  %312 = call {}*** @julia.get_pgcstack()
  %313 = call {}*** @julia.get_pgcstack()
  %314 = call {}*** @julia.get_pgcstack()
  %315 = call {}*** @julia.get_pgcstack()
  %316 = call {}*** @julia.get_pgcstack()
  %317 = call {}*** @julia.get_pgcstack()
  %318 = call {}*** @julia.get_pgcstack()
  %319 = call {}*** @julia.get_pgcstack()
  %320 = call {}*** @julia.get_pgcstack()
  %321 = call {}*** @julia.get_pgcstack()
  %322 = call {}*** @julia.get_pgcstack()
  %323 = call {}*** @julia.get_pgcstack()
  %324 = call {}*** @julia.get_pgcstack()
  %325 = call {}*** @julia.get_pgcstack()
  %326 = call {}*** @julia.get_pgcstack()
  %327 = call {}*** @julia.get_pgcstack()
  %328 = call {}*** @julia.get_pgcstack()
  %329 = call {}*** @julia.get_pgcstack()
  %330 = call {}*** @julia.get_pgcstack()
  %331 = call {}*** @julia.get_pgcstack()
  %332 = call {}*** @julia.get_pgcstack()
  %333 = call {}*** @julia.get_pgcstack()
  %334 = call {}*** @julia.get_pgcstack()
  %335 = call {}*** @julia.get_pgcstack()
  %336 = call {}*** @julia.get_pgcstack()
  %337 = call {}*** @julia.get_pgcstack()
  %338 = call {}*** @julia.get_pgcstack()
  %339 = call {}*** @julia.get_pgcstack()
  %340 = call {}*** @julia.get_pgcstack()
  %341 = call {}*** @julia.get_pgcstack()
  %342 = call {}*** @julia.get_pgcstack()
  %343 = call {}*** @julia.get_pgcstack()
  %344 = call {}*** @julia.get_pgcstack()
  %345 = call {}*** @julia.get_pgcstack()
  %346 = call {}*** @julia.get_pgcstack()
  %347 = call {}*** @julia.get_pgcstack()
  %348 = call {}*** @julia.get_pgcstack()
  %349 = call {}*** @julia.get_pgcstack()
  %350 = call {}*** @julia.get_pgcstack()
  %351 = call {}*** @julia.get_pgcstack()
  %352 = call {}*** @julia.get_pgcstack()
  %353 = call {}*** @julia.get_pgcstack()
  %354 = call {}*** @julia.get_pgcstack()
  %355 = call {}*** @julia.get_pgcstack()
  %356 = call {}*** @julia.get_pgcstack()
  %357 = call {}*** @julia.get_pgcstack()
  %358 = call {}*** @julia.get_pgcstack()
  %359 = call {}*** @julia.get_pgcstack()
  %360 = call {}*** @julia.get_pgcstack()
  %361 = call {}*** @julia.get_pgcstack()
  %362 = call {}*** @julia.get_pgcstack()
  %363 = call {}*** @julia.get_pgcstack()
  %364 = call {}*** @julia.get_pgcstack()
  %365 = call {}*** @julia.get_pgcstack()
  %366 = call {}*** @julia.get_pgcstack()
  %367 = call {}*** @julia.get_pgcstack()
  %368 = call {}*** @julia.get_pgcstack()
  %369 = call {}*** @julia.get_pgcstack()
  %370 = call {}*** @julia.get_pgcstack()
  %371 = call {}*** @julia.get_pgcstack()
  %372 = call {}*** @julia.get_pgcstack()
  %373 = call {}*** @julia.get_pgcstack()
  %374 = call {}*** @julia.get_pgcstack()
  %375 = call {}*** @julia.get_pgcstack()
  %376 = call {}*** @julia.get_pgcstack()
  %377 = call {}*** @julia.get_pgcstack()
  %378 = call {}*** @julia.get_pgcstack()
  %379 = call {}*** @julia.get_pgcstack()
  %380 = call {}*** @julia.get_pgcstack()
  %381 = call {}*** @julia.get_pgcstack()
  %382 = call {}*** @julia.get_pgcstack()
  %383 = call {}*** @julia.get_pgcstack()
  %384 = call {}*** @julia.get_pgcstack()
  %385 = call {}*** @julia.get_pgcstack()
  %386 = call {}*** @julia.get_pgcstack()
  %387 = call {}*** @julia.get_pgcstack()
  %388 = call {}*** @julia.get_pgcstack()
  %389 = call {}*** @julia.get_pgcstack()
  %390 = call {}*** @julia.get_pgcstack()
  %391 = call {}*** @julia.get_pgcstack()
  %392 = call {}*** @julia.get_pgcstack()
  %393 = call {}*** @julia.get_pgcstack()
  %394 = call {}*** @julia.get_pgcstack()
  %395 = call {}*** @julia.get_pgcstack()
  %396 = call {}*** @julia.get_pgcstack()
  %397 = call {}*** @julia.get_pgcstack()
  %398 = call {}*** @julia.get_pgcstack()
  %399 = call {}*** @julia.get_pgcstack()
  %400 = call {}*** @julia.get_pgcstack()
  %401 = call {}*** @julia.get_pgcstack()
  %402 = call {}*** @julia.get_pgcstack()
  %newstruct23 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct62 = alloca [1 x [1 x i64]], align 8
  %"'ipa536" = alloca [3 x double], align 8
  store [3 x double] zeroinitializer, [3 x double]* %"'ipa536", align 8
  %403 = alloca [3 x double], align 8
  %newstruct102 = alloca [1 x [1 x i64]], align 8
  %newstruct103 = alloca { [1 x [1 x i64]], i64 }, align 8
  %"'ipa140" = alloca { i64, {} addrspace(10)* }, align 8
  store { i64, {} addrspace(10)* } zeroinitializer, { i64, {} addrspace(10)* }* %"'ipa140", align 8
  %404 = alloca { i64, {} addrspace(10)* }, align 8
  %newstruct309 = alloca [2 x [1 x i64]], align 8
  %newstruct396 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct402 = alloca [1 x [1 x i64]], align 8
  %newstruct450 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct506 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct512 = alloca [1 x [1 x i64]], align 8
  %newstruct568 = alloca [1 x [1 x i64]], align 8
  %"'ipa482" = alloca [1 x {} addrspace(10)*], align 8
  store [1 x {} addrspace(10)*] zeroinitializer, [1 x {} addrspace(10)*]* %"'ipa482", align 8
  %405 = alloca [1 x {} addrspace(10)*], align 8
  %"'ipa632" = alloca [3 x double], align 8
  store [3 x double] zeroinitializer, [3 x double]* %"'ipa632", align 8
  %406 = alloca [3 x double], align 8
  %newstruct624 = alloca [1 x [1 x i64]], align 8
  %newstruct625 = alloca { [1 x [1 x i64]], i64 }, align 8
  %407 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %408 = alloca [1 x {} addrspace(10)*], align 8
  %"'ipa329" = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  store { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } zeroinitializer, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa329", align 8
  %409 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %newstruct740 = alloca [2 x [1 x i64]], align 8
  %410 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %411 = alloca [1 x {} addrspace(10)*], align 8
  %"'ipa" = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  store { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } zeroinitializer, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa", align 8
  %412 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %413 = call {}*** @julia.get_pgcstack() #70
  %ptls_field798 = getelementptr inbounds {}**, {}*** %413, i64 2
  %414 = bitcast {}*** %ptls_field798 to i64***
  %ptls_load799800 = load i64**, i64*** %414, align 8, !tbaa !68, !alias.scope !3006, !noalias !3009
  %415 = getelementptr inbounds i64*, i64** %ptls_load799800, i64 2
  %safepoint = load i64*, i64** %415, align 8, !tbaa !72, !invariant.load !67, !alias.scope !3011, !noalias !3014
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #70, !dbg !3016
  fence syncscope("singlethread") seq_cst
  %"'ipc" = bitcast {} addrspace(10)* %"'" to i8 addrspace(10)*, !dbg !3017
  %416 = bitcast {} addrspace(10)* %0 to i8 addrspace(10)*, !dbg !3017
  %"getfield_addr801'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 120, !dbg !3017
  %getfield_addr801 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 120, !dbg !3017
  %"'ipc106" = bitcast i8 addrspace(10)* %"getfield_addr801'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %417 = bitcast i8 addrspace(10)* %getfield_addr801 to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %"'ipc107" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc106" to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %418 = addrspacecast {} addrspace(10)* addrspace(10)* %417 to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %"getfield'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc107" unordered, align 8, !dbg !3017, !tbaa !865, !alias.scope !3021, !noalias !3024, !nonnull !67, !dereferenceable !867
  %getfield = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %418 unordered, align 8, !dbg !3017, !tbaa !865, !alias.scope !3026, !noalias !3027, !nonnull !67, !dereferenceable !867, !align !868
  %"getfield_addr2802'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 128, !dbg !3017
  %getfield_addr2802 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 128, !dbg !3017
  %"'ipc104" = bitcast i8 addrspace(10)* %"getfield_addr2802'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %419 = bitcast i8 addrspace(10)* %getfield_addr2802 to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %"'ipc105" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc104" to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %420 = addrspacecast {} addrspace(10)* addrspace(10)* %419 to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %"getfield3'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc105" unordered, align 8, !dbg !3017, !tbaa !865, !alias.scope !3021, !noalias !3024, !nonnull !67, !dereferenceable !867
  %getfield3 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %420 unordered, align 8, !dbg !3017, !tbaa !865, !alias.scope !3026, !noalias !3027, !nonnull !67, !dereferenceable !867, !align !868
  %"getfield_addr4803'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 136, !dbg !3017
  %getfield_addr4803 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 136, !dbg !3017
  %"'ipc102" = bitcast i8 addrspace(10)* %"getfield_addr4803'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %421 = bitcast i8 addrspace(10)* %getfield_addr4803 to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %"'ipc103" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc102" to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %422 = addrspacecast {} addrspace(10)* addrspace(10)* %421 to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %"getfield5'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc103" unordered, align 8, !dbg !3017, !tbaa !865, !alias.scope !3021, !noalias !3024, !nonnull !67, !dereferenceable !867
  %getfield5 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %422 unordered, align 8, !dbg !3017, !tbaa !865, !alias.scope !3026, !noalias !3027, !nonnull !67, !dereferenceable !867, !align !868
  %"getfield_addr6804'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 168, !dbg !3017
  %getfield_addr6804 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 168, !dbg !3017
  %"'ipc100" = bitcast i8 addrspace(10)* %"getfield_addr6804'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %423 = bitcast i8 addrspace(10)* %getfield_addr6804 to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %"'ipc101" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc100" to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %424 = addrspacecast {} addrspace(10)* addrspace(10)* %423 to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %"getfield7'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc101" unordered, align 8, !dbg !3017, !tbaa !865, !alias.scope !3021, !noalias !3024, !nonnull !67, !dereferenceable !867
  %getfield7 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %424 unordered, align 8, !dbg !3017, !tbaa !865, !alias.scope !3026, !noalias !3027, !nonnull !67, !dereferenceable !867, !align !868
  %"getfield_addr8805'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 184, !dbg !3017
  %getfield_addr8805 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 184, !dbg !3017
  %"'ipc98" = bitcast i8 addrspace(10)* %"getfield_addr8805'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %425 = bitcast i8 addrspace(10)* %getfield_addr8805 to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %"'ipc99" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc98" to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %426 = addrspacecast {} addrspace(10)* addrspace(10)* %425 to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %"getfield9'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc99" unordered, align 8, !dbg !3017, !tbaa !865, !alias.scope !3021, !noalias !3024, !nonnull !67, !dereferenceable !867
  %getfield9 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %426 unordered, align 8, !dbg !3017, !tbaa !865, !alias.scope !3026, !noalias !3027, !nonnull !67, !dereferenceable !867, !align !868
  %"'ipg95" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 56, !dbg !3028
  %427 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 56, !dbg !3028
  %"'ipc96" = bitcast i8 addrspace(10)* %"'ipg95" to double addrspace(10)*, !dbg !3028
  %428 = bitcast i8 addrspace(10)* %427 to double addrspace(10)*, !dbg !3028
  %"'ipc97" = addrspacecast double addrspace(10)* %"'ipc96" to double addrspace(11)*, !dbg !3028
  %429 = addrspacecast double addrspace(10)* %428 to double addrspace(11)*, !dbg !3028
  %430 = load double, double addrspace(11)* %429, align 8, !dbg !3028, !tbaa !865, !alias.scope !3026, !noalias !3027
  %"'ipc91" = bitcast {} addrspace(10)* %"'" to i64 addrspace(10)*, !dbg !3032
  %431 = bitcast {} addrspace(10)* %0 to i64 addrspace(10)*, !dbg !3032
  %432 = addrspacecast i64 addrspace(10)* %431 to i64 addrspace(11)*, !dbg !3032
  %433 = load i64, i64 addrspace(11)* %432, align 8, !dbg !3032, !tbaa !865, !alias.scope !3026, !noalias !3027
  %"getfield_addr10806'ipg" = getelementptr inbounds i64, i64 addrspace(10)* %"'ipc91", i64 3, !dbg !3032
  %getfield_addr10806 = getelementptr inbounds i64, i64 addrspace(10)* %431, i64 3, !dbg !3032
  %"'ipc92" = bitcast i64 addrspace(10)* %"getfield_addr10806'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %434 = bitcast i64 addrspace(10)* %getfield_addr10806 to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %"'ipc93" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc92" to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %435 = addrspacecast {} addrspace(10)* addrspace(10)* %434 to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %"getfield11'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc93" unordered, align 8, !dbg !3032, !tbaa !865, !alias.scope !3021, !noalias !3024, !nonnull !67, !dereferenceable !867
  %getfield11 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %435 unordered, align 8, !dbg !3032, !tbaa !865, !alias.scope !3026, !noalias !3027, !nonnull !67, !dereferenceable !867, !align !868
  %436 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3032
  %437 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %436, i32 0, i32 3, !dbg !3032
  %438 = load i16, i16 addrspace(10)* %437, align 2, !dbg !3032
  %439 = zext i16 %438 to i64, !dbg !3032
  %440 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3032
  %441 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %440, i32 0, i32 1, !dbg !3032
  %442 = load i64, i64 addrspace(10)* %441, align 8, !dbg !3032
  %443 = mul i64 %442, %439, !dbg !3032
  %444 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3032
  %445 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %444, i32 0, i32 3, !dbg !3032
  %446 = load i16, i16 addrspace(10)* %445, align 2, !dbg !3032
  %447 = zext i16 %446 to i64, !dbg !3032
  %448 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3032
  %449 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %448, i32 0, i32 1, !dbg !3032
  %450 = load i64, i64 addrspace(10)* %449, align 8, !dbg !3032
  %451 = mul i64 %450, %447, !dbg !3032
  %452 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3032
  %453 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %452, i32 0, i32 3, !dbg !3032
  %454 = load i16, i16 addrspace(10)* %453, align 2, !dbg !3032
  %455 = zext i16 %454 to i64, !dbg !3032
  %456 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3032
  %457 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %456, i32 0, i32 1, !dbg !3032
  %458 = load i64, i64 addrspace(10)* %457, align 8, !dbg !3032
  %459 = mul i64 %458, %455, !dbg !3032
  %"getfield_addr12807'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 32, !dbg !3032
  %getfield_addr12807 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 32, !dbg !3032
  %"'ipc89" = bitcast i8 addrspace(10)* %"getfield_addr12807'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %460 = bitcast i8 addrspace(10)* %getfield_addr12807 to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %"'ipc90" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc89" to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %461 = addrspacecast {} addrspace(10)* addrspace(10)* %460 to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %"getfield13'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc90" unordered, align 8, !dbg !3032, !tbaa !865, !alias.scope !3021, !noalias !3024, !nonnull !67, !dereferenceable !867
  %getfield13 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %461 unordered, align 8, !dbg !3032, !tbaa !865, !alias.scope !3026, !noalias !3027, !nonnull !67, !dereferenceable !867, !align !868
  %"'ipg86" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 16, !dbg !3032
  %462 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 16, !dbg !3032
  %"'ipc87" = bitcast i8 addrspace(10)* %"'ipg86" to double addrspace(10)*, !dbg !3032
  %463 = bitcast i8 addrspace(10)* %462 to double addrspace(10)*, !dbg !3032
  %"'ipc88" = addrspacecast double addrspace(10)* %"'ipc87" to double addrspace(11)*, !dbg !3032
  %464 = addrspacecast double addrspace(10)* %463 to double addrspace(11)*, !dbg !3032
  %465 = load double, double addrspace(11)* %464, align 8, !dbg !3032, !tbaa !865, !alias.scope !3026, !noalias !3027
  %"getfield_addr14808'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 96, !dbg !3032
  %getfield_addr14808 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 96, !dbg !3032
  %"'ipc83" = bitcast i8 addrspace(10)* %"getfield_addr14808'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %466 = bitcast i8 addrspace(10)* %getfield_addr14808 to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %"'ipc84" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc83" to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %467 = addrspacecast {} addrspace(10)* addrspace(10)* %466 to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %"getfield15'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc84" unordered, align 8, !dbg !3032, !tbaa !865, !alias.scope !3021, !noalias !3024, !nonnull !67, !dereferenceable !867
  %getfield15 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %467 unordered, align 8, !dbg !3032, !tbaa !865, !alias.scope !3026, !noalias !3027, !nonnull !67, !dereferenceable !867, !align !868
  %"getfield_addr16809'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 88, !dbg !3032
  %getfield_addr16809 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 88, !dbg !3032
  %"'ipc81" = bitcast i8 addrspace(10)* %"getfield_addr16809'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %468 = bitcast i8 addrspace(10)* %getfield_addr16809 to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %"'ipc82" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc81" to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %469 = addrspacecast {} addrspace(10)* addrspace(10)* %468 to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %"getfield17'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc82" unordered, align 8, !dbg !3032, !tbaa !865, !alias.scope !3021, !noalias !3024, !nonnull !67, !dereferenceable !867
  %getfield17 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %469 unordered, align 8, !dbg !3032, !tbaa !865, !alias.scope !3026, !noalias !3027, !nonnull !67, !dereferenceable !867, !align !868
  %"getfield_addr18810'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 104, !dbg !3032
  %getfield_addr18810 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 104, !dbg !3032
  %"'ipc79" = bitcast i8 addrspace(10)* %"getfield_addr18810'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %470 = bitcast i8 addrspace(10)* %getfield_addr18810 to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %"'ipc80" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc79" to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %471 = addrspacecast {} addrspace(10)* addrspace(10)* %470 to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %"getfield19'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc80" unordered, align 8, !dbg !3032, !tbaa !865, !alias.scope !3021, !noalias !3024, !nonnull !67, !dereferenceable !867
  %getfield19 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %471 unordered, align 8, !dbg !3032, !tbaa !865, !alias.scope !3026, !noalias !3027, !nonnull !67, !dereferenceable !867, !align !868
  %"'ipg76" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 64, !dbg !3032
  %472 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 64, !dbg !3032
  %"'ipc77" = bitcast i8 addrspace(10)* %"'ipg76" to {} addrspace(10)* addrspace(10)* addrspace(10)*, !dbg !3032
  %473 = bitcast i8 addrspace(10)* %472 to {} addrspace(10)* addrspace(10)* addrspace(10)*, !dbg !3032
  %"'ipc78" = addrspacecast {} addrspace(10)* addrspace(10)* addrspace(10)* %"'ipc77" to {} addrspace(10)* addrspace(10)* addrspace(11)*, !dbg !3032
  %474 = addrspacecast {} addrspace(10)* addrspace(10)* addrspace(10)* %473 to {} addrspace(10)* addrspace(10)* addrspace(11)*, !dbg !3032
  %".unpack.unpack995'ipl" = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)* addrspace(11)* %"'ipc78", align 8, !dbg !3032, !tbaa !865, !alias.scope !3021, !noalias !3024
  %.unpack.unpack995 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)* addrspace(11)* %474, align 8, !dbg !3032, !tbaa !865, !alias.scope !3026, !noalias !3027
  %getfield_addr20812 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 80, !dbg !3036
  %475 = bitcast i8 addrspace(10)* %getfield_addr20812 to {} addrspace(10)* addrspace(10)*, !dbg !3036
  %476 = addrspacecast {} addrspace(10)* addrspace(10)* %475 to {} addrspace(10)* addrspace(11)*, !dbg !3036
  %getfield21 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %476 unordered, align 8, !dbg !3036, !tbaa !865, !alias.scope !3026, !noalias !3027, !nonnull !67, !dereferenceable !867, !align !868
  %"'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 48, !dbg !3040
  %477 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 48, !dbg !3040
  %"'ipc74" = bitcast i8 addrspace(10)* %"'ipg" to double addrspace(10)*, !dbg !3040
  %478 = bitcast i8 addrspace(10)* %477 to double addrspace(10)*, !dbg !3040
  %"'ipc75" = addrspacecast double addrspace(10)* %"'ipc74" to double addrspace(11)*, !dbg !3040
  %479 = addrspacecast double addrspace(10)* %478 to double addrspace(11)*, !dbg !3040
  %480 = load double, double addrspace(11)* %479, align 8, !dbg !3040, !tbaa !865, !alias.scope !3026, !noalias !3027
  %481 = bitcast {} addrspace(10)* %getfield15 to {} addrspace(10)* addrspace(10)*, !dbg !3042
  %482 = addrspacecast {} addrspace(10)* addrspace(10)* %481 to {} addrspace(10)* addrspace(11)*, !dbg !3042
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %482, i64 3, !dbg !3042
  %483 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*, !dbg !3042
  %arraysize = load i64, i64 addrspace(11)* %483, align 8, !dbg !3042, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !3049, !noalias !3052
  %memcpy_refined_dst25 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct23, i64 0, i32 0, i64 0, i64 0, !dbg !3054
  store i64 %arraysize, i64* %memcpy_refined_dst25, align 8, !dbg !3054, !tbaa !132, !alias.scope !134, !noalias !3056
  %memcpy_refined_dst26 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct23, i64 0, i32 1, !dbg !3054
  store i64 1, i64* %memcpy_refined_dst26, align 8, !dbg !3054, !tbaa !132, !alias.scope !134, !noalias !3056
  %arraysize_ptr27 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %482, i64 4, !dbg !3059
  %484 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr27 to i64 addrspace(11)*, !dbg !3059
  %arraysize28 = load i64, i64 addrspace(11)* %484, align 16, !dbg !3059, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !3049, !noalias !3052
  %.not = icmp eq i64 %arraysize28, 0, !dbg !3063
  br i1 %.not, label %L33, label %L36, !dbg !3062

L33:                                              ; preds = %top
  %485 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct23 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !3062
  call fastcc void @julia_throw_boundserror_1991({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield15, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %485) #71, !dbg !3062
  unreachable

L36:                                              ; preds = %top
  %486 = bitcast {} addrspace(10)* %getfield11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3067
  %487 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %486 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3067
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %487, i64 0, i32 1, !dbg !3067
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !3067, !tbaa !315, !range !86, !alias.scope !3073, !noalias !3076
  %488 = icmp eq i64 %arraysize, %arraylen, !dbg !3078
  %489 = icmp eq i64 %arraylen, 1, !dbg !3080
  %value_phi.in = or i1 %488, %489, !dbg !3080
  br i1 %value_phi.in, label %L75, label %L60, !dbg !3081

L60:                                              ; preds = %L36
  %490 = call fastcc [1 x {} addrspace(10)*] @julia_DimensionMismatch_1978() #70, !dbg !3081
  %current_task792957 = getelementptr inbounds {}**, {}*** %413, i64 -14, !dbg !3081
  %current_task792 = bitcast {}*** %current_task792957 to {}**, !dbg !3081
  %box793 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task792, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #72, !dbg !3081
  %491 = bitcast {} addrspace(10)* %box793 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !3081
  %492 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %491, i64 0, i64 0, !dbg !3081
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857078480 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %492, align 8, !dbg !3081, !tbaa !112, !alias.scope !116, !noalias !3082
  %493 = addrspacecast {} addrspace(10)* %box793 to {} addrspace(12)*, !dbg !3081
  call void @ijl_throw({} addrspace(12)* %493) #71, !dbg !3081
  unreachable

L75:                                              ; preds = %L36
  br i1 %488, label %L86, label %L105, !dbg !3083

L86:                                              ; preds = %L75
  %.not819 = icmp eq i64 %arraysize, 0, !dbg !3085
  store i8 3, i8* %_cache123, align 1, !dbg !3087, !invariant.group !3089
  br i1 %.not819, label %L209, label %L90, !dbg !3087

L90:                                              ; preds = %L86
  %494 = addrspacecast {} addrspace(10)* %getfield15 to {} addrspace(11)*, !dbg !3090
  %495 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %494) #73, !dbg !3090
  %496 = bitcast {}* %495 to i8**, !dbg !3090
  %arrayptr761 = load i8*, i8** %496, align 8, !dbg !3090, !tbaa !72, !invariant.load !67, !alias.scope !3049, !noalias !3052, !nonnull !67
  %497 = addrspacecast {} addrspace(10)* %getfield11 to {} addrspace(11)*, !dbg !3097
  %498 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %497) #73, !dbg !3097
  %499 = bitcast {}* %498 to i8**, !dbg !3097
  %arrayptr763 = load i8*, i8** %499, align 8, !dbg !3097, !tbaa !382, !alias.scope !3073, !noalias !3076, !nonnull !67
  %.not941.not = icmp eq i8* %arrayptr761, %arrayptr763, !dbg !3100
  store i1 %.not941.not, i1* %.not941.not_cache, align 1, !dbg !3095, !invariant.group !3103
  br i1 %.not941.not, label %L98, label %L101, !dbg !3095

L98:                                              ; preds = %L90
  %500 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"getfield11'ipl"), !dbg !3104
  %501 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3104
  %502 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %501, i32 0, i32 3, !dbg !3104
  %503 = load i16, i16 addrspace(10)* %502, align 2, !dbg !3104
  %504 = zext i16 %503 to i64, !dbg !3104
  %505 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3104
  %506 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %505, i32 0, i32 1, !dbg !3104
  %507 = load i64, i64 addrspace(10)* %506, align 8, !dbg !3104
  %508 = mul i64 %507, %504, !dbg !3104
  %509 = bitcast {} addrspace(10)* %"getfield11'ipl" to i8 addrspace(13)* addrspace(10)*, !dbg !3104
  %510 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %509, align 8, !dbg !3104
  %511 = bitcast {} addrspace(10)* %500 to i8 addrspace(13)* addrspace(10)*, !dbg !3104
  %512 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %511, align 8, !dbg !3104
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %512, i8 0, i64 %508, i1 false), !dbg !3104
  %513 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %getfield11) #70, !dbg !3104
  store {} addrspace(10)* %513, {} addrspace(10)** %_cache, align 8, !dbg !3106, !invariant.group !3114
  store {} addrspace(10)* %500, {} addrspace(10)** %_cache110, align 8, !dbg !3106, !invariant.group !3115
  store {} addrspace(10)* %500, {} addrspace(10)** %"'ip_phi2_cache", align 8, !dbg !3106, !invariant.group !3116
  br label %L101, !dbg !3106

L101:                                             ; preds = %L98, %L90
  %514 = phi {} addrspace(10)* [ %500, %L98 ], [ %"getfield11'ipl", %L90 ]
  %value_phi764 = phi {} addrspace(10)* [ %513, %L98 ], [ %getfield11, %L90 ]
  %".repack942'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa", i64 0, i32 0, !dbg !3117
  %.repack942 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %412, i64 0, i32 0, !dbg !3117
  store {} addrspace(10)* %"getfield15'ipl", {} addrspace(10)** %".repack942'ipg", align 8, !dbg !3117, !alias.scope !3118, !noalias !3121
  store {} addrspace(10)* %getfield15, {} addrspace(10)** %.repack942, align 8, !dbg !3117, !alias.scope !3123, !noalias !3124
  %"'ipg112" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa", i64 0, i32 1, i32 0, i64 0, i64 0, !dbg !3117
  %515 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %412, i64 0, i32 1, i32 0, i64 0, i64 0, !dbg !3117
  store i64 %arraysize, i64* %"'ipg112", align 8, !dbg !3117, !alias.scope !3118, !noalias !3121
  store i64 %arraysize, i64* %515, align 8, !dbg !3117, !alias.scope !3123, !noalias !3124
  %".repack943.repack949'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa", i64 0, i32 1, i32 1, !dbg !3117
  %.repack943.repack949 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %412, i64 0, i32 1, i32 1, !dbg !3117
  store i64 1, i64* %".repack943.repack949'ipg", align 8, !dbg !3117, !alias.scope !3118, !noalias !3121
  store i64 1, i64* %.repack943.repack949, align 8, !dbg !3117, !alias.scope !3123, !noalias !3124
  %".repack945'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa", i64 0, i32 2, !dbg !3117
  %.repack945 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %412, i64 0, i32 2, !dbg !3117
  store i64 0, i64* %".repack945'ipg", align 8, !dbg !3117, !alias.scope !3118, !noalias !3121
  store i64 0, i64* %.repack945, align 8, !dbg !3117, !alias.scope !3123, !noalias !3124
  %".repack947'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa", i64 0, i32 3, !dbg !3117
  %.repack947 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %412, i64 0, i32 3, !dbg !3117
  store i64 1, i64* %".repack947'ipg", align 8, !dbg !3117, !alias.scope !3118, !noalias !3121
  store i64 1, i64* %.repack947, align 8, !dbg !3117, !alias.scope !3123, !noalias !3124
  %"'ipc108" = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa" to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !3117
  %516 = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %412 to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !3117
  %_augmented = call fastcc i64 @augmented_julia_copyto_unaliased__1986({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* nocapture nofree writeonly align 8 "enzyme_sret" %410, [1 x {} addrspace(10)*]* nocapture nofree writeonly align 8 "enzymejl_returnRoots" %411, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree readonly align 8 %516, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'ipc108", {} addrspace(10)* nocapture readonly align 16 %value_phi764, {} addrspace(10)* nocapture align 16 %514), !dbg !3117
  store i64 %_augmented, i64* %_augmented_cache, align 8, !dbg !3117, !invariant.group !3125
  store i8 1, i8* %_cache123, align 1, !dbg !3117, !invariant.group !3089
  br label %L209, !dbg !3117

L105:                                             ; preds = %L75
  %517 = addrspacecast {} addrspace(10)* %getfield15 to {} addrspace(11)*, !dbg !3126
  %518 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %517) #73, !dbg !3126
  %519 = bitcast {}* %518 to i8**, !dbg !3126
  %arrayptr766 = load i8*, i8** %519, align 8, !dbg !3126, !tbaa !72, !invariant.load !67, !alias.scope !3049, !noalias !3052, !nonnull !67
  %520 = addrspacecast {} addrspace(10)* %getfield11 to {} addrspace(11)*, !dbg !3137
  %521 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %520) #73, !dbg !3137
  %522 = bitcast {}* %521 to i8**, !dbg !3137
  %arrayptr768 = load i8*, i8** %522, align 8, !dbg !3137, !tbaa !382, !alias.scope !3073, !noalias !3076, !nonnull !67
  %.not951.not = icmp eq i8* %arrayptr766, %arrayptr768, !dbg !3140
  store i1 %.not951.not, i1* %.not951.not_cache, align 1, !dbg !3131, !invariant.group !3143
  br i1 %.not951.not, label %L113, label %L118, !dbg !3131

L113:                                             ; preds = %L105
  %523 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"getfield11'ipl"), !dbg !3144
  %524 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3144
  %525 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %524, i32 0, i32 3, !dbg !3144
  %526 = load i16, i16 addrspace(10)* %525, align 2, !dbg !3144
  %527 = zext i16 %526 to i64, !dbg !3144
  %528 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3144
  %529 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %528, i32 0, i32 1, !dbg !3144
  %530 = load i64, i64 addrspace(10)* %529, align 8, !dbg !3144
  %531 = mul i64 %530, %527, !dbg !3144
  %532 = bitcast {} addrspace(10)* %"getfield11'ipl" to i8 addrspace(13)* addrspace(10)*, !dbg !3144
  %533 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %532, align 8, !dbg !3144
  %534 = bitcast {} addrspace(10)* %523 to i8 addrspace(13)* addrspace(10)*, !dbg !3144
  %535 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %534, align 8, !dbg !3144
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %535, i8 0, i64 %531, i1 false), !dbg !3144
  %536 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %getfield11) #70, !dbg !3144
  store {} addrspace(10)* %523, {} addrspace(10)** %"'ip_phi5_cache", align 8, !invariant.group !3146
  store {} addrspace(10)* %523, {} addrspace(10)** %_cache119, align 8, !invariant.group !3147
  %.phi.trans.insert = bitcast {} addrspace(10)* %536 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert969 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr770.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert969, i64 0, i32 1
  %arraylen771.pre = load i64, i64 addrspace(11)* %arraylen_ptr770.phi.trans.insert, align 8, !dbg !3148, !tbaa !315, !range !86, !alias.scope !3152, !noalias !3155
  br label %L118, !dbg !3106

L118:                                             ; preds = %L113, %L105
  %arraylen771 = phi i64 [ %arraylen771.pre, %L113 ], [ %arraylen, %L105 ], !dbg !3148
  %537 = phi {} addrspace(10)* [ %523, %L113 ], [ %"getfield11'ipl", %L105 ]
  %value_phi769 = phi {} addrspace(10)* [ %536, %L113 ], [ %getfield11, %L105 ]
  %.not954 = icmp eq i64 %arraylen771, 1, !dbg !3157
  store i1 %.not954, i1* %.not954_cache, align 1, !dbg !3161, !invariant.group !3164
  %.not952 = icmp eq i64 %arraysize, 0, !dbg !3161
  store i8 2, i8* %_cache123, align 1, !dbg !3162, !invariant.group !3089
  br i1 %.not952, label %L209, label %L160.lr.ph, !dbg !3162

L160.lr.ph:                                       ; preds = %L118
  %"'ipc115" = bitcast {} addrspace(10)* %537 to double addrspace(13)* addrspace(10)*
  %538 = bitcast {} addrspace(10)* %value_phi769 to double addrspace(13)* addrspace(10)*
  %"'ipc116" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc115" to double addrspace(13)* addrspace(11)*
  %539 = addrspacecast double addrspace(13)* addrspace(10)* %538 to double addrspace(13)* addrspace(11)*
  %"arrayptr779955'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc116", align 8, !tbaa !382, !alias.scope !3165, !noalias !3168, !nonnull !67, !invariant.group !3170
  %arrayptr779955 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %539, align 8, !tbaa !382, !alias.scope !3171, !noalias !3172, !nonnull !67
  %"'ipc113" = bitcast {} addrspace(10)* %"getfield15'ipl" to double addrspace(13)* addrspace(10)*
  %540 = bitcast {} addrspace(10)* %getfield15 to double addrspace(13)* addrspace(10)*
  %"'ipc114" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc113" to double addrspace(13)* addrspace(11)*
  %541 = addrspacecast double addrspace(13)* addrspace(10)* %540 to double addrspace(13)* addrspace(11)*
  %"arrayptr783956'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc114", align 16, !tbaa !72, !alias.scope !3173, !noalias !3174, !nonnull !67, !invariant.group !3175
  %arrayptr783956 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %541, align 16, !tbaa !72, !invariant.load !67, !alias.scope !3176, !noalias !3052, !nonnull !67
  %542 = add nsw i64 %arraysize, -1, !dbg !3177
  br label %L160, !dbg !3177

L160:                                             ; preds = %L160, %L160.lr.ph
  %iv = phi i64 [ %iv.next, %L160 ], [ 0, %L160.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !3178
  %543 = select i1 %.not954, i64 0, i64 %iv, !dbg !3178
  %"'ipg118" = getelementptr inbounds double, double addrspace(13)* %"arrayptr779955'ipl", i64 %543, !dbg !3178
  %544 = getelementptr inbounds double, double addrspace(13)* %arrayptr779955, i64 %543, !dbg !3178
  %arrayref780 = load double, double addrspace(13)* %544, align 8, !dbg !3178, !tbaa !268, !alias.scope !3185, !noalias !3188
  %"'ipg117" = getelementptr inbounds double, double addrspace(13)* %"arrayptr783956'ipl", i64 %iv, !dbg !3190
  %545 = getelementptr inbounds double, double addrspace(13)* %arrayptr783956, i64 %iv, !dbg !3190
  store double %arrayref780, double addrspace(13)* %545, align 8, !dbg !3190, !tbaa !268, !alias.scope !3192, !noalias !3195
  %exitcond1062.not = icmp eq i64 %iv.next, %arraysize, !dbg !3197
  br i1 %exitcond1062.not, label %L209.loopexit, label %L160, !dbg !3177, !llvm.loop !3198

L209.loopexit:                                    ; preds = %L160
  store i8 0, i8* %_cache123, align 1, !dbg !3199, !invariant.group !3089
  br label %L209, !dbg !3199

L209:                                             ; preds = %L209.loopexit, %L118, %L101, %L86
  %memcpy_refined_dst64 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct62, i64 0, i64 0, i64 0, !dbg !3199
  store i64 %arraysize, i64* %memcpy_refined_dst64, align 8, !dbg !3199, !tbaa !132, !alias.scope !134, !noalias !3056
  %546 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize), !dbg !3202
  %547 = mul i64 %arraysize, 8, !dbg !3202
  %548 = bitcast {} addrspace(10)* %546 to i8 addrspace(13)* addrspace(10)*, !dbg !3202
  %549 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %548, align 8, !dbg !3202
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %549, i8 0, i64 %547, i1 false), !dbg !3202
  %550 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize) #74, !dbg !3202
  %551 = bitcast {} addrspace(10)* %550 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3207
  %552 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %551 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3207
  %arraylen_ptr65 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %552, i64 0, i32 1, !dbg !3207
  %arraylen66 = load i64, i64 addrspace(11)* %arraylen_ptr65, align 8, !dbg !3207, !tbaa !315, !range !86, !alias.scope !3210, !noalias !3213
  %.not821 = icmp eq i64 %arraylen66, %arraysize, !dbg !3215
  br i1 %.not821, label %L222, label %L275, !dbg !3209

L222:                                             ; preds = %L209
  %.not822 = icmp eq i64 %arraysize, 0, !dbg !3218
  br i1 %.not822, label %pass.2, label %L243.preheader, !dbg !3223

L243.preheader:                                   ; preds = %L222
  %"'ipc124" = bitcast {} addrspace(10)* %"getfield15'ipl" to double addrspace(13)* addrspace(10)*
  %553 = bitcast {} addrspace(10)* %getfield15 to double addrspace(13)* addrspace(10)*
  %"'ipc125" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc124" to double addrspace(13)* addrspace(11)*
  %554 = addrspacecast double addrspace(13)* addrspace(10)* %553 to double addrspace(13)* addrspace(11)*
  %"arrayptr748938'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc125", align 16, !alias.scope !3224, !noalias !3225, !invariant.group !3226
  %arrayptr748938 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %554, align 16, !alias.scope !3225, !noalias !3224
  %"'ipc127" = bitcast {} addrspace(10)* %546 to double addrspace(13)* addrspace(10)*
  %555 = bitcast {} addrspace(10)* %550 to double addrspace(13)* addrspace(10)*
  %"'ipc128" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc127" to double addrspace(13)* addrspace(11)*
  %556 = addrspacecast double addrspace(13)* addrspace(10)* %555 to double addrspace(13)* addrspace(11)*
  store i64* null, i64** %value_phi79_cache, align 8, !dbg !3227
  br label %L243, !dbg !3227

L243:                                             ; preds = %L250, %L243.preheader
  %iv1 = phi i64 [ %iv.next2, %L250 ], [ 0, %L243.preheader ]
  %value_phi78.off0 = phi i1 [ %581, %L250 ], [ false, %L243.preheader ]
  %value_phi79 = phi i64 [ %value_phi754, %L250 ], [ 1, %L243.preheader ]
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !3227
  %557 = load i64*, i64** %value_phi79_cache, align 8, !dbg !3227
  %558 = bitcast i64* %557 to i8*, !dbg !3227
  %559 = and i64 %iv.next2, 1, !dbg !3227
  %560 = icmp ne i64 %559, 0, !dbg !3227
  %561 = call i64 @llvm.ctpop.i64(i64 %iv.next2), !dbg !3227
  %562 = icmp ult i64 %561, 3, !dbg !3227
  %563 = and i1 %562, %560, !dbg !3227
  br i1 %563, label %grow.i, label %__enzyme_exponentialallocationzero.exit, !dbg !3227

grow.i:                                           ; preds = %L243
  %564 = call i64 @llvm.ctlz.i64(i64 %iv.next2, i1 true), !dbg !3227
  %565 = sub nuw nsw i64 64, %564, !dbg !3227
  %566 = shl i64 8, %565, !dbg !3227
  %567 = icmp eq i64 %iv.next2, 1, !dbg !3227
  %568 = lshr i64 %566, 1, !dbg !3227
  %569 = select i1 %567, i64 0, i64 %568, !dbg !3227
  %570 = call i8* @realloc(i8* %558, i64 %566) #75, !dbg !3227
  %571 = sub i64 %566, %569, !dbg !3227
  %572 = getelementptr inbounds i8, i8* %570, i64 %569, !dbg !3227
  call void @llvm.memset.p0i8.i64(i8* %572, i8 0, i64 %571, i1 false), !dbg !3227
  br label %__enzyme_exponentialallocationzero.exit, !dbg !3227

__enzyme_exponentialallocationzero.exit:          ; preds = %L243, %grow.i
  %573 = phi i8* [ %570, %grow.i ], [ %558, %L243 ], !dbg !3227
  %574 = bitcast i8* %573 to i64*, !dbg !3227
  store i64* %574, i64** %value_phi79_cache, align 8, !dbg !3227
  %575 = load i64*, i64** %value_phi79_cache, align 8, !dbg !3227, !dereferenceable !3229, !invariant.group !3230
  %576 = getelementptr inbounds i64, i64* %575, i64 %iv1, !dbg !3227
  store i64 %value_phi79, i64* %576, align 8, !dbg !3227, !invariant.group !3231
  br i1 %value_phi78.off0, label %pass.2.loopexit, label %L250, !dbg !3227

L250:                                             ; preds = %__enzyme_exponentialallocationzero.exit
  %577 = add nsw i64 %iv.next2, -1, !dbg !3232
  %"'ipg131" = getelementptr inbounds double, double addrspace(13)* %"arrayptr748938'ipl", i64 %577, !dbg !3232
  %578 = getelementptr inbounds double, double addrspace(13)* %arrayptr748938, i64 %577, !dbg !3232
  %arrayref749 = load double, double addrspace(13)* %578, align 8, !dbg !3232, !tbaa !268, !alias.scope !3234, !noalias !3237
  %579 = add i64 %value_phi79, -1, !dbg !3239
  %"arrayptr751939'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc128", align 8, !dbg !3239, !tbaa !382, !alias.scope !3240, !noalias !3241, !nonnull !67
  %arrayptr751939 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %556, align 8, !dbg !3239, !tbaa !382, !alias.scope !3242, !noalias !3213, !nonnull !67
  %"'ipg126" = getelementptr inbounds double, double addrspace(13)* %"arrayptr751939'ipl", i64 %579, !dbg !3239
  %580 = getelementptr inbounds double, double addrspace(13)* %arrayptr751939, i64 %579, !dbg !3239
  store double %arrayref749, double addrspace(13)* %580, align 8, !dbg !3239, !tbaa !268, !alias.scope !3243, !noalias !3246
  %581 = icmp eq i64 %value_phi79, %arraysize, !dbg !3248
  %582 = add i64 %value_phi79, 1, !dbg !3249
  %value_phi754 = select i1 %581, i64 undef, i64 %582, !dbg !3249
  %.not940 = icmp eq i64 %iv.next2, %arraysize, !dbg !3251
  br i1 %.not940, label %pass.2.loopexit, label %L243, !dbg !3108

L275:                                             ; preds = %L209
  %583 = addrspacecast [1 x [1 x i64]]* %newstruct62 to [1 x [1 x i64]] addrspace(11)*, !dbg !3209
  call fastcc void @julia_throw_checksize_error_1989({} addrspace(10)* nocapture noundef nonnull readonly align 16 dereferenceable(40) %550, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %583) #71, !dbg !3209
  unreachable

L322:                                             ; preds = %pass.2
  %584 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct103 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !3252
  call fastcc void @julia_throw_boundserror_1991({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield19, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %584) #71, !dbg !3252
  unreachable

L325:                                             ; preds = %pass.2
  %585 = addrspacecast [1 x [1 x i64]]* %newstruct102 to [1 x [1 x i64]] addrspace(11)*, !dbg !3256
  %_augmented133 = call fastcc { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } @augmented_julia__unsafe_setindex__2077({} addrspace(10)* align 16 %getfield19, {} addrspace(10)* align 16 %"getfield19'ipl", {} addrspace(10)* align 16 %2665, {} addrspace(10)* align 16 %2662, [1 x [1 x i64]] addrspace(11)* nocapture readonly align 8 %585, i64 signext 1), !dbg !3256
  %586 = call {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6199626896 to {}*) to {} addrspace(10)*), i64 6, i64 6), !dbg !3257
  %587 = bitcast {} addrspace(10)* %586 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3257
  %588 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %587, i32 0, i32 1, !dbg !3257
  %589 = load i64, i64 addrspace(10)* %588, align 8, !dbg !3257
  %590 = mul i64 %589, 8, !dbg !3257
  %591 = bitcast {} addrspace(10)* %586 to i8 addrspace(13)* addrspace(10)*, !dbg !3257
  %592 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %591, align 8, !dbg !3257
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %592, i8 0, i64 %590, i1 false), !dbg !3257
  %593 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 6199626896 to {}*) to {} addrspace(10)*), i64 noundef 6, i64 noundef 6) #74, !dbg !3257
  %594 = bitcast {} addrspace(10)* %593 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3263
  %595 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %594, i32 0, i32 3, !dbg !3263
  %596 = load i16, i16 addrspace(10)* %595, align 2, !dbg !3263
  %597 = zext i16 %596 to i64, !dbg !3263
  %598 = bitcast {} addrspace(10)* %593 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3263
  %599 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %598, i32 0, i32 1, !dbg !3263
  %600 = load i64, i64 addrspace(10)* %599, align 8, !dbg !3263
  %601 = mul i64 %600, %597, !dbg !3263
  %602 = bitcast {} addrspace(10)* %593 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3263
  %603 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %602 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3263
  %arraylen_ptr110 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %603, i64 0, i32 1, !dbg !3263
  %arraylen111 = load i64, i64 addrspace(11)* %arraylen_ptr110, align 8, !dbg !3263, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !3268, !noalias !3271
  %.not828 = icmp eq i64 %arraylen111, 0, !dbg !3273
  br i1 %.not828, label %L359, label %L325.L341_crit_edge, !dbg !3266

L325.L341_crit_edge:                              ; preds = %L325
  %"'ipc135" = bitcast {} addrspace(10)* %586 to i8 addrspace(13)* addrspace(10)*, !dbg !3277
  %604 = bitcast {} addrspace(10)* %593 to i8 addrspace(13)* addrspace(10)*, !dbg !3277
  %"'ipc136" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc135" to i8 addrspace(13)* addrspace(11)*, !dbg !3277
  %605 = addrspacecast i8 addrspace(13)* addrspace(10)* %604 to i8 addrspace(13)* addrspace(11)*, !dbg !3277
  %"arrayptr119829.pre1043'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc136", align 8, !dbg !3277, !tbaa !72, !alias.scope !3279, !noalias !3280
  %arrayptr119829.pre1043 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %605, align 8, !dbg !3277, !tbaa !72, !invariant.load !67, !alias.scope !3281, !noalias !3271
  %606 = shl nuw i64 %arraylen111, 3, !dbg !3266
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr119829.pre1043, i8 0, i64 %606, i1 false) #70, !dbg !3277, !tbaa !268, !alias.scope !116, !noalias !3082
  br label %L359, !dbg !3282

L359:                                             ; preds = %L325.L341_crit_edge, %L325
  %607 = bitcast {} addrspace(10)* %593 to {} addrspace(10)* addrspace(10)*, !dbg !3282
  %608 = addrspacecast {} addrspace(10)* addrspace(10)* %607 to {} addrspace(10)* addrspace(11)*, !dbg !3282
  %arraysize_ptr124 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %608, i64 3, !dbg !3282
  %609 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr124 to i64 addrspace(11)*, !dbg !3282
  %arraysize125 = load i64, i64 addrspace(11)* %609, align 8, !dbg !3282, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !3268, !noalias !3271, !invariant.group !3284
  %inbounds.not = icmp eq i64 %arraysize125, 0, !dbg !3282
  br i1 %inbounds.not, label %oob, label %ib, !dbg !3282

L394:                                             ; preds = %idxend284.L394_crit_edge, %L394
  %iv3 = phi i64 [ 0, %idxend284.L394_crit_edge ], [ %iv.next4, %L394 ]
  %iv.next4 = add nuw nsw i64 %iv3, 1, !dbg !3285
  %610 = add nsw i64 %iv.next4, -1, !dbg !3285
  %"memcpy_refined_dst297'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr296858.pre'ipl", i64 %610, !dbg !3285
  %memcpy_refined_dst297 = getelementptr inbounds double, double addrspace(13)* %arrayptr296858.pre, i64 %610, !dbg !3285
  store double 1.000000e+00, double addrspace(13)* %memcpy_refined_dst297, align 8, !dbg !3285, !tbaa !268, !alias.scope !3291, !noalias !3294
  %.not859 = icmp eq i64 %iv.next4, %arraylen288, !dbg !3296
  br i1 %.not859, label %L412.loopexit, label %L394, !dbg !3298

L412.loopexit:                                    ; preds = %L394
  br label %L412, !dbg !3299

L412:                                             ; preds = %idxend258, %L412.loopexit
  %".repack'ipg" = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* }* %"'ipa140", i64 0, i32 0, !dbg !3299
  %.repack = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* }* %404, i64 0, i32 0, !dbg !3299
  store i64 0, i64* %".repack'ipg", align 8, !dbg !3299, !alias.scope !3301, !noalias !3304
  store i64 0, i64* %.repack, align 8, !dbg !3299, !alias.scope !3306, !noalias !3307
  %".repack860'ipg" = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* }* %"'ipa140", i64 0, i32 1, !dbg !3299
  %.repack860 = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* }* %404, i64 0, i32 1, !dbg !3299
  store {} addrspace(10)* %2718, {} addrspace(10)** %".repack860'ipg", align 8, !dbg !3299, !alias.scope !3301, !noalias !3304
  store {} addrspace(10)* %2721, {} addrspace(10)** %.repack860, align 8, !dbg !3299, !alias.scope !3306, !noalias !3307
  %"'ipc141" = addrspacecast { i64, {} addrspace(10)* }* %"'ipa140" to { i64, {} addrspace(10)* } addrspace(11)*, !dbg !3299
  %611 = addrspacecast { i64, {} addrspace(10)* }* %404 to { i64, {} addrspace(10)* } addrspace(11)*, !dbg !3299
  %_augmented142 = call fastcc { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia__diagm_2062({ i64, {} addrspace(10)* } addrspace(11)* nocapture readonly align 8 %611, { i64, {} addrspace(10)* } addrspace(11)* nocapture align 8 %"'ipc141"), !dbg !3299
  %subcache = extractvalue { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented142, 0, !dbg !3299
  %612 = extractvalue { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented142, 1, !dbg !3299
  %"'ac" = extractvalue { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented142, 2, !dbg !3299
  %613 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct309, i64 0, i64 1, i64 0, !dbg !3308
  store i64 %arraysize127, i64* %613, align 8, !dbg !3308, !tbaa !132, !alias.scope !134, !noalias !3056
  %memcpy_refined_dst311 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct309, i64 0, i64 0, i64 0, !dbg !3316
  store i64 %arraysize125, i64* %memcpy_refined_dst311, align 8, !dbg !3316, !tbaa !132, !alias.scope !134, !noalias !3056
  %614 = call {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6199626896 to {}*) to {} addrspace(10)*), i64 %arraysize125, i64 %arraysize127), !dbg !3318
  %615 = bitcast {} addrspace(10)* %614 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3318
  %616 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %615, i32 0, i32 1, !dbg !3318
  %617 = load i64, i64 addrspace(10)* %616, align 8, !dbg !3318
  %618 = mul i64 %617, 8, !dbg !3318
  %619 = bitcast {} addrspace(10)* %614 to i8 addrspace(13)* addrspace(10)*, !dbg !3318
  %620 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %619, align 8, !dbg !3318
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %620, i8 0, i64 %618, i1 false), !dbg !3318
  %621 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6199626896 to {}*) to {} addrspace(10)*), i64 %arraysize125, i64 %arraysize127) #74, !dbg !3318
  %622 = bitcast {} addrspace(10)* %621 to {} addrspace(10)* addrspace(10)*, !dbg !3326
  %623 = addrspacecast {} addrspace(10)* addrspace(10)* %622 to {} addrspace(10)* addrspace(11)*, !dbg !3326
  %arraysize_ptr320 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %623, i64 3, !dbg !3326
  %624 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr320 to i64 addrspace(11)*, !dbg !3326
  %arraysize321 = load i64, i64 addrspace(11)* %624, align 8, !dbg !3326, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !3330, !noalias !3333
  %.not862 = icmp eq i64 %arraysize321, %arraysize125, !dbg !3335
  br i1 %.not862, label %L457, label %L446.L584_crit_edge, !dbg !3339

L446.L584_crit_edge:                              ; preds = %L412
  %arraysize_ptr734.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %623, i64 4
  %.phi.trans.insert975 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr734.phi.trans.insert to i64 addrspace(11)*
  %arraysize735.pre = load i64, i64 addrspace(11)* %.phi.trans.insert975, align 8, !dbg !3326, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !95, !noalias !96
  unreachable

L457:                                             ; preds = %L412
  %arraysize_ptr322 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %623, i64 4, !dbg !3326
  %625 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr322 to i64 addrspace(11)*, !dbg !3326
  %arraysize323 = load i64, i64 addrspace(11)* %625, align 8, !dbg !3326, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !3330, !noalias !3333
  %.not937 = icmp eq i64 %arraysize323, %arraysize127, !dbg !3340
  br i1 %.not937, label %L467, label %L584, !dbg !3328

L467:                                             ; preds = %L457
  %626 = addrspacecast {} addrspace(10)* %621 to {} addrspace(11)*, !dbg !3344
  %627 = addrspacecast {} addrspace(10)* %593 to {} addrspace(11)*, !dbg !3344
  %.not863 = icmp eq {} addrspace(11)* %626, %627, !dbg !3344
  %"'ipc148" = bitcast double addrspace(13)* addrspace(10)* %"'ipc146" to {} addrspace(10)*, !dbg !3344
  %628 = bitcast double addrspace(13)* addrspace(10)* %2677 to {} addrspace(10)*, !dbg !3344
  br i1 %.not863, label %L483, label %L470, !dbg !3344

L470:                                             ; preds = %L467
  %629 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %626) #73, !dbg !3350
  %630 = bitcast {}* %629 to i8**, !dbg !3350
  %arrayptr728 = load i8*, i8** %630, align 8, !dbg !3350, !tbaa !72, !invariant.load !67, !alias.scope !3330, !noalias !3333, !nonnull !67, !invariant.group !3355
  %631 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %627) #73, !dbg !3350
  %632 = bitcast {}* %631 to i8**, !dbg !3350
  %arrayptr730 = load i8*, i8** %632, align 8, !dbg !3350, !tbaa !72, !invariant.load !67, !alias.scope !3268, !noalias !3271, !nonnull !67, !invariant.group !3356
  %.not936.not = icmp eq i8* %arrayptr728, %arrayptr730, !dbg !3357
  %"'ipc147" = bitcast double addrspace(13)* addrspace(10)* %"'ipc146" to {} addrspace(10)*, !dbg !3354
  %633 = bitcast double addrspace(13)* addrspace(10)* %2677 to {} addrspace(10)*, !dbg !3354
  br i1 %.not936.not, label %L478, label %L483, !dbg !3354

L478:                                             ; preds = %L470
  %634 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %586), !dbg !3360
  %635 = bitcast {} addrspace(10)* %593 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3360
  %636 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %635, i32 0, i32 3, !dbg !3360
  %637 = load i16, i16 addrspace(10)* %636, align 2, !dbg !3360
  %638 = zext i16 %637 to i64, !dbg !3360
  %639 = bitcast {} addrspace(10)* %593 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3360
  %640 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %639, i32 0, i32 1, !dbg !3360
  %641 = load i64, i64 addrspace(10)* %640, align 8, !dbg !3360
  %642 = mul i64 %641, %638, !dbg !3360
  %643 = bitcast {} addrspace(10)* %586 to i8 addrspace(13)* addrspace(10)*, !dbg !3360
  %644 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %643, align 8, !dbg !3360
  %645 = bitcast {} addrspace(10)* %634 to i8 addrspace(13)* addrspace(10)*, !dbg !3360
  %646 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %645, align 8, !dbg !3360
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %646, i8 0, i64 %642, i1 false), !dbg !3360
  %647 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %593) #70, !dbg !3360
  store {} addrspace(10)* %634, {} addrspace(10)** %"'ip_phi14_cache", align 8, !invariant.group !3362
  %.phi.trans.insert977 = bitcast {} addrspace(10)* %647 to {} addrspace(10)* addrspace(10)*
  %.phi.trans.insert978 = addrspacecast {} addrspace(10)* addrspace(10)* %.phi.trans.insert977 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr328.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert978, i64 3
  %.phi.trans.insert979 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr328.phi.trans.insert to i64 addrspace(11)*
  %arraysize329.pre = load i64, i64 addrspace(11)* %.phi.trans.insert979, align 8, !dbg !3363, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !3367, !noalias !3370
  %arraysize_ptr330.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert978, i64 4
  %.phi.trans.insert981 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr330.phi.trans.insert to i64 addrspace(11)*
  %arraysize331.pre = load i64, i64 addrspace(11)* %.phi.trans.insert981, align 8, !dbg !3363, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !3367, !noalias !3370
  %".pre'ipc" = bitcast {} addrspace(10)* %634 to double addrspace(13)* addrspace(10)*
  %.pre = bitcast {} addrspace(10)* %647 to double addrspace(13)* addrspace(10)*
  %"'ipc145" = bitcast double addrspace(13)* addrspace(10)* %".pre'ipc" to {} addrspace(10)*, !dbg !3372
  %648 = bitcast double addrspace(13)* addrspace(10)* %.pre to {} addrspace(10)*, !dbg !3372
  br label %L483, !dbg !3372

L483:                                             ; preds = %L478, %L470, %L467
  %649 = phi {} addrspace(10)* [ %"'ipc145", %L478 ], [ %"'ipc147", %L470 ], [ %"'ipc148", %L467 ]
  %nodecayed.arrayptr353869.pre = phi {} addrspace(10)* [ %648, %L478 ], [ %633, %L470 ], [ %628, %L467 ]
  %arraysize331 = phi i64 [ %arraysize331.pre, %L478 ], [ %arraysize127, %L470 ], [ %arraysize127, %L467 ], !dbg !3363
  %arraysize350 = phi i64 [ %arraysize329.pre, %L478 ], [ %arraysize125, %L470 ], [ %arraysize125, %L467 ], !dbg !3363
  %"'ipc149" = bitcast {} addrspace(10)* %649 to double addrspace(13)* addrspace(10)*, !dbg !3380
  %650 = bitcast {} addrspace(10)* %nodecayed.arrayptr353869.pre to double addrspace(13)* addrspace(10)*, !dbg !3380
  %"'ipc150" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc149" to double addrspace(13)* addrspace(11)*, !dbg !3380
  %651 = addrspacecast double addrspace(13)* addrspace(10)* %650 to double addrspace(13)* addrspace(11)*, !dbg !3380
  %"'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc150", align 8, !dbg !3380, !alias.scope !3385, !noalias !3388
  %652 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %651, align 8, !dbg !3380, !alias.scope !3388, !noalias !3385
  %.not868 = icmp eq i64 %arraysize331, 1, !dbg !3380
  %.not867 = icmp eq i64 %arraysize350, 1, !dbg !3390
  %"'ipc143" = bitcast {} addrspace(10)* %614 to double addrspace(13)* addrspace(10)*
  %653 = bitcast {} addrspace(10)* %621 to double addrspace(13)* addrspace(10)*
  %"'ipc144" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc143" to double addrspace(13)* addrspace(11)*
  %654 = addrspacecast double addrspace(13)* addrspace(10)* %653 to double addrspace(13)* addrspace(11)*
  %umax1060 = call i64 @llvm.umax.i64(i64 %arraysize125, i64 1) #70, !dbg !3393
  %"arrayptr358870.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc144", align 8, !tbaa !72, !alias.scope !3395, !noalias !3396
  %arrayptr358870.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %654, align 8, !tbaa !72, !invariant.load !67, !alias.scope !3397, !noalias !3333
  %umax1096 = call i64 @llvm.umax.i64(i64 %arraysize127, i64 1) #70, !dbg !3393
  %655 = add nsw i64 %umax1096, -1, !dbg !3393
  %656 = add nsw i64 %umax1060, -1, !dbg !3393
  %657 = add nuw i64 %655, 1, !dbg !3393
  %658 = add nuw i64 %656, 1, !dbg !3393
  %659 = mul nuw nsw i64 %658, %657, !dbg !3393
  %660 = mul nuw i64 %659, 8, !dbg !3393
  %661 = call noalias nonnull i8* @malloc(i64 %660), !dbg !3393, !enzyme_cache_alloc !3398
  %arrayref_malloccache = bitcast i8* %661 to double*, !dbg !3393
  store double* %arrayref_malloccache, double** %arrayref_cache, align 8, !dbg !3393, !invariant.group !3400
  br label %L558.lr.ph, !dbg !3393

L558.lr.ph:                                       ; preds = %L562, %L483
  %iv5 = phi i64 [ %iv.next6, %L562 ], [ 0, %L483 ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  %value_phi341.op = add nsw i64 %iv.next6, -1
  %662 = select i1 %.not868, i64 0, i64 %value_phi341.op
  %663 = mul i64 %662, %arraysize350
  %664 = mul i64 %value_phi341.op, %arraysize125
  br label %L558, !dbg !3401

L558:                                             ; preds = %L558, %L558.lr.ph
  %iv7 = phi i64 [ %iv.next8, %L558 ], [ 0, %L558.lr.ph ]
  %iv.next8 = add nuw nsw i64 %iv7, 1, !dbg !3402
  %665 = select i1 %.not867, i64 0, i64 %iv7, !dbg !3402
  %666 = add i64 %665, %663, !dbg !3402
  %"'ipg164" = getelementptr inbounds double, double addrspace(13)* %"'ipl", i64 %666, !dbg !3402
  %667 = getelementptr inbounds double, double addrspace(13)* %652, i64 %666, !dbg !3402
  %arrayref = load double, double addrspace(13)* %667, align 8, !dbg !3402, !tbaa !268, !alias.scope !3411, !noalias !3414
  %668 = fmul double %465, %arrayref, !dbg !3416
  %669 = add i64 %iv7, %664, !dbg !3419
  %"'ipg153" = getelementptr inbounds double, double addrspace(13)* %"arrayptr358870.pre'ipl", i64 %669, !dbg !3419
  %670 = getelementptr inbounds double, double addrspace(13)* %arrayptr358870.pre, i64 %669, !dbg !3419
  store double %668, double addrspace(13)* %670, align 8, !dbg !3419, !tbaa !268, !alias.scope !3421, !noalias !3424
  %671 = load double*, double** %arrayref_cache, align 8, !dbg !3426, !dereferenceable !3229, !invariant.group !3400
  %672 = mul nuw nsw i64 %658, %657, !dbg !3426
  %673 = mul nuw nsw i64 %iv5, %658, !dbg !3426
  %674 = add nuw nsw i64 %iv7, %673, !dbg !3426
  %675 = getelementptr inbounds double, double* %671, i64 %674, !dbg !3426
  store double %arrayref, double* %675, align 8, !dbg !3426, !tbaa !268, !invariant.group !3427
  %exitcond1061.not = icmp eq i64 %iv.next8, %umax1060, !dbg !3426
  br i1 %exitcond1061.not, label %L562, label %L558, !dbg !3401, !llvm.loop !3428

L562:                                             ; preds = %L558
  %exitcond.not1097 = icmp eq i64 %iv.next6, %umax1096, !dbg !3429
  br i1 %exitcond.not1097, label %L598, label %L558.lr.ph, !dbg !3434

L584:                                             ; preds = %L457
  %arraysize735 = phi i64 [ %arraysize323, %L457 ], !dbg !3326
  %676 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct740, i64 0, i64 0, i64 0, !dbg !3435
  store i64 %arraysize321, i64* %676, align 8, !dbg !3435, !tbaa !132, !alias.scope !134, !noalias !3056
  %677 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct740, i64 0, i64 1, i64 0, !dbg !3435
  store i64 %arraysize735, i64* %677, align 8, !dbg !3435, !tbaa !132, !alias.scope !134, !noalias !3056
  %678 = addrspacecast [2 x [1 x i64]]* %newstruct740 to [2 x [1 x i64]] addrspace(11)*, !dbg !3328
  %679 = addrspacecast [2 x [1 x i64]]* %newstruct309 to [2 x [1 x i64]] addrspace(11)*, !dbg !3328
  call fastcc void @julia_throwdm_1976([2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %678, [2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %679) #71, !dbg !3328
  unreachable

L598:                                             ; preds = %L562
  %_augmented170 = call fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2053({} addrspace(10)* align 16 %612, {} addrspace(10)* align 16 %"'ac", {} addrspace(10)* align 16 %621, {} addrspace(10)* align 16 %614), !dbg !3290
  %subcache171 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented170, 0, !dbg !3290
  %680 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented170, 1, !dbg !3290
  %"'ac172" = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented170, 2, !dbg !3290
  %681 = add i64 %433, 1, !dbg !3439
  %682 = call i64 @llvm.smax.i64(i64 %681, i64 1) #70, !dbg !3441
  %683 = icmp ugt i64 %682, 1, !dbg !3442
  br i1 %683, label %L616.preheader, label %L1366, !dbg !3440

L616.preheader:                                   ; preds = %L598
  %684 = bitcast {} addrspace(10)* %680 to {} addrspace(10)* addrspace(10)*
  %685 = addrspacecast {} addrspace(10)* addrspace(10)* %684 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr382 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %685, i64 3
  %686 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr382 to i64 addrspace(11)*
  %arraysize383 = load i64, i64 addrspace(11)* %686, align 8, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !3446, !noalias !3449
  %"'ipc175" = addrspacecast {} addrspace(10)* addrspace(10)* %".unpack.unpack995'ipl" to {} addrspace(10)* addrspace(11)*
  %687 = addrspacecast {} addrspace(10)* addrspace(10)* %.unpack.unpack995 to {} addrspace(10)* addrspace(11)*
  %current_task388872 = getelementptr inbounds {}**, {}*** %413, i64 -14
  %current_task388 = bitcast {}*** %current_task388872 to {}**
  %688 = bitcast {} addrspace(10)* %getfield13 to {} addrspace(10)* addrspace(10)*
  %689 = addrspacecast {} addrspace(10)* addrspace(10)* %688 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr389 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %689, i64 3
  %690 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr389 to i64 addrspace(11)*
  %arraysize390 = load i64, i64 addrspace(11)* %690, align 8, !alias.scope !3451, !noalias !3454
  %memcpy_refined_dst398 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct396, i64 0, i32 0, i64 0, i64 0
  %691 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct396, i64 0, i32 1
  %arraysize_ptr399 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %689, i64 4
  %692 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr399 to i64 addrspace(11)*
  %arraysize400 = load i64, i64 addrspace(11)* %692, align 8, !alias.scope !3451, !noalias !3454
  %memcpy_refined_dst404 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct402, i64 0, i64 0, i64 0
  %.not875 = icmp eq i64 %arraysize390, 0
  %"'ipc190" = bitcast {} addrspace(10)* %"getfield13'ipl" to double addrspace(13)* addrspace(10)*
  %693 = bitcast {} addrspace(10)* %getfield13 to double addrspace(13)* addrspace(10)*
  %"'ipc191" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc190" to double addrspace(13)* addrspace(11)*
  %694 = addrspacecast double addrspace(13)* addrspace(10)* %693 to double addrspace(13)* addrspace(11)*
  %695 = bitcast {} addrspace(10)* %getfield3 to {} addrspace(10)* addrspace(10)*
  %696 = addrspacecast {} addrspace(10)* addrspace(10)* %695 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr432 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %696, i64 3
  %697 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr432 to i64 addrspace(11)*
  %arraysize433 = load i64, i64 addrspace(11)* %697, align 8, !alias.scope !3456, !noalias !3459
  %memcpy_refined_dst452 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct450, i64 0, i32 0, i64 0, i64 0
  %698 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct450, i64 0, i32 1
  %699 = addrspacecast {} addrspace(10)* %getfield15 to {} addrspace(11)*
  %"'ipc173" = bitcast {} addrspace(10)* %"getfield15'ipl" to double addrspace(13)* addrspace(10)*
  %700 = bitcast {} addrspace(10)* %getfield15 to double addrspace(13)* addrspace(10)*
  %"'ipc174" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc173" to double addrspace(13)* addrspace(11)*
  %701 = addrspacecast double addrspace(13)* addrspace(10)* %700 to double addrspace(13)* addrspace(11)*
  %"arrayptr698931'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc174", align 16, !alias.scope !3224, !noalias !3225, !invariant.group !3461
  %arrayptr698931 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %701, align 16, !alias.scope !3225, !noalias !3224
  %".repack917'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa329", i64 0, i32 0
  %.repack917 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %409, i64 0, i32 0
  %"'ipg343" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa329", i64 0, i32 1, i32 0, i64 0, i64 0
  %702 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %409, i64 0, i32 1, i32 0, i64 0, i64 0
  %".repack918.repack924'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa329", i64 0, i32 1, i32 1
  %.repack918.repack924 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %409, i64 0, i32 1, i32 1
  %".repack920'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa329", i64 0, i32 2
  %.repack920 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %409, i64 0, i32 2
  %".repack922'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa329", i64 0, i32 3
  %.repack922 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %409, i64 0, i32 3
  %"'ipc330" = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa329" to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*
  %703 = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %409 to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*
  %704 = bitcast {} addrspace(10)* %getfield21 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %705 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %704 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr477 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %705, i64 0, i32 1
  %706 = bitcast {} addrspace(10)* %getfield21 to i64 addrspace(13)* addrspace(10)*
  %707 = addrspacecast i64 addrspace(13)* addrspace(10)* %706 to i64 addrspace(13)* addrspace(11)*
  %"'ipg387" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 72
  %708 = getelementptr inbounds i8, i8 addrspace(10)* %416, i64 72
  %"'ipc388" = bitcast i8 addrspace(10)* %"'ipg387" to double addrspace(10)*
  %709 = bitcast i8 addrspace(10)* %708 to double addrspace(10)*
  %"'ipc389" = addrspacecast double addrspace(10)* %"'ipc388" to double addrspace(11)*
  %710 = addrspacecast double addrspace(10)* %709 to double addrspace(11)*
  %711 = bitcast {} addrspace(10)* %getfield5 to {} addrspace(10)* addrspace(10)*
  %712 = addrspacecast {} addrspace(10)* addrspace(10)* %711 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr497 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %712, i64 3
  %713 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr497 to i64 addrspace(11)*
  %arraysize498 = load i64, i64 addrspace(11)* %713, align 8, !alias.scope !3462, !noalias !3465
  %714 = bitcast {} addrspace(10)* %getfield17 to {} addrspace(10)* addrspace(10)*
  %715 = addrspacecast {} addrspace(10)* addrspace(10)* %714 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr499 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %715, i64 3
  %716 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr499 to i64 addrspace(11)*
  %arraysize500 = load i64, i64 addrspace(11)* %716, align 8, !alias.scope !3467, !noalias !3470
  %memcpy_refined_dst508 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct506, i64 0, i32 0, i64 0, i64 0
  %717 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct506, i64 0, i32 1
  %arraysize_ptr509 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %715, i64 4
  %718 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr509 to i64 addrspace(11)*
  %arraysize510 = load i64, i64 addrspace(11)* %718, align 8, !alias.scope !3467, !noalias !3470
  %memcpy_refined_dst514 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct512, i64 0, i64 0, i64 0
  %.not896 = icmp eq i64 %arraysize500, 0
  %"'ipc395" = bitcast {} addrspace(10)* %"getfield17'ipl" to double addrspace(13)* addrspace(10)*
  %719 = bitcast {} addrspace(10)* %getfield17 to double addrspace(13)* addrspace(10)*
  %"'ipc396" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc395" to double addrspace(13)* addrspace(11)*
  %720 = addrspacecast double addrspace(13)* addrspace(10)* %719 to double addrspace(13)* addrspace(11)*
  %memcpy_refined_dst570 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct568, i64 0, i64 0, i64 0
  %"'ipg492" = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %"'ipa482", i64 0, i64 0
  %721 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %405, i64 0, i64 0
  %"'ipc483" = addrspacecast [1 x {} addrspace(10)*]* %"'ipa482" to [1 x {} addrspace(10)*] addrspace(11)*
  %722 = addrspacecast [1 x {} addrspace(10)*]* %405 to [1 x {} addrspace(10)*] addrspace(11)*
  %"memcpy_refined_src601'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa632", i64 0, i64 0
  %memcpy_refined_src601 = getelementptr inbounds [3 x double], [3 x double]* %406, i64 0, i64 0
  %"memcpy_refined_src603'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa632", i64 0, i64 1
  %memcpy_refined_src603 = getelementptr inbounds [3 x double], [3 x double]* %406, i64 0, i64 1
  %"memcpy_refined_src605'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa632", i64 0, i64 2
  %memcpy_refined_src605 = getelementptr inbounds [3 x double], [3 x double]* %406, i64 0, i64 2
  %723 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct624, i64 0, i64 0, i64 0
  %memcpy_refined_dst627 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct625, i64 0, i32 0, i64 0, i64 0
  %724 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct625, i64 0, i32 1
  %725 = addrspacecast [1 x [1 x i64]]* %newstruct624 to [1 x [1 x i64]] addrspace(11)*
  %726 = add i64 %arraysize400, 2, !dbg !3441
  %umax = call i64 @llvm.umax.i64(i64 %arraysize28, i64 1) #70, !dbg !3441
  %727 = add nuw nsw i64 %umax, 1, !dbg !3441
  %umax1058 = call i64 @llvm.umax.i64(i64 %arraysize108, i64 1) #70, !dbg !3441
  %728 = add nuw nsw i64 %umax1058, 1, !dbg !3441
  %729 = add nsw i64 %682, -2, !dbg !3441
  %730 = add nuw i64 %729, 1, !dbg !3441
  %731 = mul nuw i64 %730, 8, !dbg !3441
  %732 = call noalias nonnull i8* @malloc(i64 %731), !dbg !3441, !enzyme_cache_alloc !3472
  %loopLimit_malloccache = bitcast i8* %732 to i64*, !dbg !3441
  store i64* %loopLimit_malloccache, i64** %loopLimit_cache22, align 8, !dbg !3441, !invariant.group !3474
  store i64 %arraysize500, i64* %arraysize500_cache, align 8, !dbg !3441, !invariant.group !3475
  store i64 %arraysize390, i64* %arraysize390_cache, align 8, !dbg !3441, !invariant.group !3476
  %733 = add nsw i64 %arraysize, -1, !dbg !3441
  %734 = mul nuw i64 %730, 8, !dbg !3441
  %735 = call noalias nonnull i8* @malloc(i64 %734), !dbg !3441, !enzyme_cache_alloc !3477
  %loopLimit_malloccache44 = bitcast i8* %735 to i64*, !dbg !3441
  store i64* %loopLimit_malloccache44, i64** %loopLimit_cache43, align 8, !dbg !3441, !invariant.group !3479
  %736 = mul nuw i64 %730, 8, !dbg !3441
  %737 = call noalias nonnull i8* @malloc(i64 %736), !dbg !3441, !enzyme_cache_alloc !3480
  %loopLimit_malloccache56 = bitcast i8* %737 to i64*, !dbg !3441
  store i64* %loopLimit_malloccache56, i64** %loopLimit_cache55, align 8, !dbg !3441, !invariant.group !3482
  %738 = mul nuw i64 %730, 8, !dbg !3441
  %739 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %740 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %739, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %741 = bitcast {}*** %401 to {}**, !dbg !3441
  %742 = getelementptr inbounds {}*, {}** %741, i64 -14, !dbg !3441
  %743 = getelementptr inbounds {}*, {}** %742, i64 16, !dbg !3441
  %744 = bitcast {}** %743 to i8**, !dbg !3441
  %745 = load i8*, i8** %744, align 8, !dbg !3441
  %746 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %742, i64 %738, {} addrspace(10)* %740), !dbg !3441
  %747 = bitcast {} addrspace(10)* %746 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i, !dbg !3441

loop.i:                                           ; preds = %loop.i, %L616.preheader
  %748 = phi i64 [ 0, %L616.preheader ], [ %749, %loop.i ], !dbg !3441
  %749 = add i64 %748, 1, !dbg !3441
  %750 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %747, i64 %748, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %750, align 8, !dbg !3441
  %751 = icmp eq i64 %749, %730, !dbg !3441
  br i1 %751, label %zeroType.44.exit, label %loop.i, !dbg !3441

zeroType.44.exit:                                 ; preds = %loop.i
  %_malloccache = bitcast {} addrspace(10)* %746 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache, {} addrspace(10)* addrspace(10)** %_cache177, align 8, !dbg !3441, !invariant.group !3483
  %752 = mul nuw i64 %730, 8, !dbg !3441
  %753 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %754 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %753, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %755 = bitcast {}*** %397 to {}**, !dbg !3441
  %756 = getelementptr inbounds {}*, {}** %755, i64 -14, !dbg !3441
  %757 = getelementptr inbounds {}*, {}** %756, i64 16, !dbg !3441
  %758 = bitcast {}** %757 to i8**, !dbg !3441
  %759 = load i8*, i8** %758, align 8, !dbg !3441
  %760 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %756, i64 %752, {} addrspace(10)* %754), !dbg !3441
  %761 = bitcast {} addrspace(10)* %760 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i638, !dbg !3441

loop.i638:                                        ; preds = %loop.i638, %zeroType.44.exit
  %762 = phi i64 [ 0, %zeroType.44.exit ], [ %763, %loop.i638 ], !dbg !3441
  %763 = add i64 %762, 1, !dbg !3441
  %764 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %761, i64 %762, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %764, align 8, !dbg !3441
  %765 = icmp eq i64 %763, %730, !dbg !3441
  br i1 %765, label %zeroType.48.exit, label %loop.i638, !dbg !3441

zeroType.48.exit:                                 ; preds = %loop.i638
  %"'mi17_malloccache" = bitcast {} addrspace(10)* %760 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'mi17_malloccache", {} addrspace(10)* addrspace(10)** %"'mi17_cache", align 8, !dbg !3441, !invariant.group !3484
  %766 = mul nuw i64 %730, 248, !dbg !3441
  %767 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %768 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %767, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11237993040 to {}*) to {} addrspace(10)*)), !dbg !3441
  %769 = bitcast {}*** %393 to {}**, !dbg !3441
  %770 = getelementptr inbounds {}*, {}** %769, i64 -14, !dbg !3441
  %771 = getelementptr inbounds {}*, {}** %770, i64 16, !dbg !3441
  %772 = bitcast {}** %771 to i8**, !dbg !3441
  %773 = load i8*, i8** %772, align 8, !dbg !3441
  %774 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %770, i64 %766, {} addrspace(10)* %768), !dbg !3441
  %775 = bitcast {} addrspace(10)* %774 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3441
  br label %loop.i639, !dbg !3441

loop.i639:                                        ; preds = %loop.i639, %zeroType.48.exit
  %776 = phi i64 [ 0, %zeroType.48.exit ], [ %777, %loop.i639 ], !dbg !3441
  %777 = add i64 %776, 1, !dbg !3441
  %778 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %775, i64 %776, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %778, align 8, !dbg !3441
  %779 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %775, i64 %776, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %779, align 8, !dbg !3441
  %780 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %775, i64 %776, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %780, align 8, !dbg !3441
  %781 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %775, i64 %776, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %781, align 8, !dbg !3441
  %782 = icmp eq i64 %777, %730, !dbg !3441
  br i1 %782, label %zeroType.52.exit, label %loop.i639, !dbg !3441

zeroType.52.exit:                                 ; preds = %loop.i639
  %subcache182_malloccache = bitcast {} addrspace(10)* %774 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3441
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %subcache182_malloccache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache182_cache, align 8, !dbg !3441, !invariant.group !3485
  %783 = mul nuw i64 %730, 8, !dbg !3441
  %784 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %785 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %784, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %786 = bitcast {}*** %389 to {}**, !dbg !3441
  %787 = getelementptr inbounds {}*, {}** %786, i64 -14, !dbg !3441
  %788 = getelementptr inbounds {}*, {}** %787, i64 16, !dbg !3441
  %789 = bitcast {}** %788 to i8**, !dbg !3441
  %790 = load i8*, i8** %789, align 8, !dbg !3441
  %791 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %787, i64 %783, {} addrspace(10)* %785), !dbg !3441
  %792 = bitcast {} addrspace(10)* %791 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i640, !dbg !3441

loop.i640:                                        ; preds = %loop.i640, %zeroType.52.exit
  %793 = phi i64 [ 0, %zeroType.52.exit ], [ %794, %loop.i640 ], !dbg !3441
  %794 = add i64 %793, 1, !dbg !3441
  %795 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %792, i64 %793, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %795, align 8, !dbg !3441
  %796 = icmp eq i64 %794, %730, !dbg !3441
  br i1 %796, label %zeroType.56.exit, label %loop.i640, !dbg !3441

zeroType.56.exit:                                 ; preds = %loop.i640
  %_malloccache187 = bitcast {} addrspace(10)* %791 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache187, {} addrspace(10)* addrspace(10)** %_cache186, align 8, !dbg !3441, !invariant.group !3486
  %797 = mul nuw i64 %730, 8, !dbg !3441
  %798 = call noalias nonnull i8* @malloc(i64 %797), !dbg !3441, !enzyme_cache_alloc !3487
  %value_phi419_malloccache = bitcast i8* %798 to i64**, !dbg !3441
  store i64** %value_phi419_malloccache, i64*** %value_phi419_cache, align 8, !dbg !3441, !invariant.group !3489
  %799 = mul nuw i64 %730, 8, !dbg !3441
  %800 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %801 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %800, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %802 = bitcast {}*** %384 to {}**, !dbg !3441
  %803 = getelementptr inbounds {}*, {}** %802, i64 -14, !dbg !3441
  %804 = getelementptr inbounds {}*, {}** %803, i64 16, !dbg !3441
  %805 = bitcast {}** %804 to i8**, !dbg !3441
  %806 = load i8*, i8** %805, align 8, !dbg !3441
  %807 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %803, i64 %799, {} addrspace(10)* %801), !dbg !3441
  %808 = bitcast {} addrspace(10)* %807 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i641, !dbg !3441

loop.i641:                                        ; preds = %loop.i641, %zeroType.56.exit
  %809 = phi i64 [ 0, %zeroType.56.exit ], [ %810, %loop.i641 ], !dbg !3441
  %810 = add i64 %809, 1, !dbg !3441
  %811 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %808, i64 %809, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %811, align 8, !dbg !3441
  %812 = icmp eq i64 %810, %730, !dbg !3441
  br i1 %812, label %zeroType.61.exit, label %loop.i641, !dbg !3441

zeroType.61.exit:                                 ; preds = %loop.i641
  %_malloccache214 = bitcast {} addrspace(10)* %807 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache214, {} addrspace(10)* addrspace(10)** %_cache213, align 8, !dbg !3441, !invariant.group !3490
  %813 = mul nuw i64 %730, 8, !dbg !3441
  %814 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %815 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %814, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %816 = bitcast {}*** %379 to {}**, !dbg !3441
  %817 = getelementptr inbounds {}*, {}** %816, i64 -14, !dbg !3441
  %818 = getelementptr inbounds {}*, {}** %817, i64 16, !dbg !3441
  %819 = bitcast {}** %818 to i8**, !dbg !3441
  %820 = load i8*, i8** %819, align 8, !dbg !3441
  %821 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %817, i64 %813, {} addrspace(10)* %815), !dbg !3441
  %822 = bitcast {} addrspace(10)* %821 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i642, !dbg !3441

loop.i642:                                        ; preds = %loop.i642, %zeroType.61.exit
  %823 = phi i64 [ 0, %zeroType.61.exit ], [ %824, %loop.i642 ], !dbg !3441
  %824 = add i64 %823, 1, !dbg !3441
  %825 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %822, i64 %823, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %825, align 8, !dbg !3441
  %826 = icmp eq i64 %824, %730, !dbg !3441
  br i1 %826, label %zeroType.65.exit, label %loop.i642, !dbg !3441

zeroType.65.exit:                                 ; preds = %loop.i642
  %_malloccache222 = bitcast {} addrspace(10)* %821 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache222, {} addrspace(10)* addrspace(10)** %_cache221, align 8, !dbg !3441, !invariant.group !3491
  %827 = mul nuw i64 %730, 264, !dbg !3441
  %828 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %829 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %828, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4373995728 to {}*) to {} addrspace(10)*)), !dbg !3441
  %830 = bitcast {}*** %375 to {}**, !dbg !3441
  %831 = getelementptr inbounds {}*, {}** %830, i64 -14, !dbg !3441
  %832 = getelementptr inbounds {}*, {}** %831, i64 16, !dbg !3441
  %833 = bitcast {}** %832 to i8**, !dbg !3441
  %834 = load i8*, i8** %833, align 8, !dbg !3441
  %835 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %831, i64 %827, {} addrspace(10)* %829), !dbg !3441
  %836 = bitcast {} addrspace(10)* %835 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3441
  br label %loop.i643, !dbg !3441

loop.i643:                                        ; preds = %loop.i643, %zeroType.65.exit
  %837 = phi i64 [ 0, %zeroType.65.exit ], [ %838, %loop.i643 ], !dbg !3441
  %838 = add i64 %837, 1, !dbg !3441
  %839 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %836, i64 %837, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %839, align 8, !dbg !3441
  %840 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %836, i64 %837, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %840, align 8, !dbg !3441
  %841 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %836, i64 %837, i32 0, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %841, align 8, !dbg !3441
  %842 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %836, i64 %837, i32 0, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %842, align 8, !dbg !3441
  %843 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %836, i64 %837, i32 0, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %843, align 8, !dbg !3441
  %844 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %836, i64 %837, i32 0, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %844, align 8, !dbg !3441
  %845 = icmp eq i64 %838, %730, !dbg !3441
  br i1 %845, label %zeroType.69.exit, label %loop.i643, !dbg !3441

zeroType.69.exit:                                 ; preds = %loop.i643
  %_augmented181_malloccache = bitcast {} addrspace(10)* %835 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3441
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %_augmented181_malloccache, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented181_cache, align 8, !dbg !3441, !invariant.group !3492
  %846 = mul nuw i64 %730, 8, !dbg !3441
  %847 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %848 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %847, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %849 = bitcast {}*** %371 to {}**, !dbg !3441
  %850 = getelementptr inbounds {}*, {}** %849, i64 -14, !dbg !3441
  %851 = getelementptr inbounds {}*, {}** %850, i64 16, !dbg !3441
  %852 = bitcast {}** %851 to i8**, !dbg !3441
  %853 = load i8*, i8** %852, align 8, !dbg !3441
  %854 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %850, i64 %846, {} addrspace(10)* %848), !dbg !3441
  %855 = bitcast {} addrspace(10)* %854 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i644, !dbg !3441

loop.i644:                                        ; preds = %loop.i644, %zeroType.69.exit
  %856 = phi i64 [ 0, %zeroType.69.exit ], [ %857, %loop.i644 ], !dbg !3441
  %857 = add i64 %856, 1, !dbg !3441
  %858 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %855, i64 %856, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %858, align 8, !dbg !3441
  %859 = icmp eq i64 %857, %730, !dbg !3441
  br i1 %859, label %zeroType.73.exit, label %loop.i644, !dbg !3441

zeroType.73.exit:                                 ; preds = %loop.i644
  %_malloccache226 = bitcast {} addrspace(10)* %854 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache226, {} addrspace(10)* addrspace(10)** %_cache225, align 8, !dbg !3441, !invariant.group !3493
  %860 = mul nuw i64 %730, 8, !dbg !3441
  %861 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %862 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %861, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %863 = bitcast {}*** %367 to {}**, !dbg !3441
  %864 = getelementptr inbounds {}*, {}** %863, i64 -14, !dbg !3441
  %865 = getelementptr inbounds {}*, {}** %864, i64 16, !dbg !3441
  %866 = bitcast {}** %865 to i8**, !dbg !3441
  %867 = load i8*, i8** %866, align 8, !dbg !3441
  %868 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %864, i64 %860, {} addrspace(10)* %862), !dbg !3441
  %869 = bitcast {} addrspace(10)* %868 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i645, !dbg !3441

loop.i645:                                        ; preds = %loop.i645, %zeroType.73.exit
  %870 = phi i64 [ 0, %zeroType.73.exit ], [ %871, %loop.i645 ], !dbg !3441
  %871 = add i64 %870, 1, !dbg !3441
  %872 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %869, i64 %870, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %872, align 8, !dbg !3441
  %873 = icmp eq i64 %871, %730, !dbg !3441
  br i1 %873, label %zeroType.77.exit, label %loop.i645, !dbg !3441

zeroType.77.exit:                                 ; preds = %loop.i645
  %"'ip_phi71_malloccache" = bitcast {} addrspace(10)* %868 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ip_phi71_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi71_cache", align 8, !dbg !3441, !invariant.group !3494
  %874 = mul nuw i64 %730, 8, !dbg !3441
  %875 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %876 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %875, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %877 = bitcast {}*** %363 to {}**, !dbg !3441
  %878 = getelementptr inbounds {}*, {}** %877, i64 -14, !dbg !3441
  %879 = getelementptr inbounds {}*, {}** %878, i64 16, !dbg !3441
  %880 = bitcast {}** %879 to i8**, !dbg !3441
  %881 = load i8*, i8** %880, align 8, !dbg !3441
  %882 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %878, i64 %874, {} addrspace(10)* %876), !dbg !3441
  %883 = bitcast {} addrspace(10)* %882 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i646, !dbg !3441

loop.i646:                                        ; preds = %loop.i646, %zeroType.77.exit
  %884 = phi i64 [ 0, %zeroType.77.exit ], [ %885, %loop.i646 ], !dbg !3441
  %885 = add i64 %884, 1, !dbg !3441
  %886 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %883, i64 %884, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %886, align 8, !dbg !3441
  %887 = icmp eq i64 %885, %730, !dbg !3441
  br i1 %887, label %zeroType.81.exit, label %loop.i646, !dbg !3441

zeroType.81.exit:                                 ; preds = %loop.i646
  %_malloccache230 = bitcast {} addrspace(10)* %882 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache230, {} addrspace(10)* addrspace(10)** %_cache229, align 8, !dbg !3441, !invariant.group !3495
  %888 = mul nuw i64 %730, 8, !dbg !3441
  %889 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %890 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %889, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %891 = bitcast {}*** %359 to {}**, !dbg !3441
  %892 = getelementptr inbounds {}*, {}** %891, i64 -14, !dbg !3441
  %893 = getelementptr inbounds {}*, {}** %892, i64 16, !dbg !3441
  %894 = bitcast {}** %893 to i8**, !dbg !3441
  %895 = load i8*, i8** %894, align 8, !dbg !3441
  %896 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %892, i64 %888, {} addrspace(10)* %890), !dbg !3441
  %897 = bitcast {} addrspace(10)* %896 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i647, !dbg !3441

loop.i647:                                        ; preds = %loop.i647, %zeroType.81.exit
  %898 = phi i64 [ 0, %zeroType.81.exit ], [ %899, %loop.i647 ], !dbg !3441
  %899 = add i64 %898, 1, !dbg !3441
  %900 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %897, i64 %898, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %900, align 8, !dbg !3441
  %901 = icmp eq i64 %899, %730, !dbg !3441
  br i1 %901, label %zeroType.85.exit, label %loop.i647, !dbg !3441

zeroType.85.exit:                                 ; preds = %loop.i647
  %"'ip_phi25_malloccache" = bitcast {} addrspace(10)* %896 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ip_phi25_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi25_cache", align 8, !dbg !3441, !invariant.group !3496
  %902 = mul nuw i64 %730, 8, !dbg !3441
  %903 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %904 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %903, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %905 = bitcast {}*** %355 to {}**, !dbg !3441
  %906 = getelementptr inbounds {}*, {}** %905, i64 -14, !dbg !3441
  %907 = getelementptr inbounds {}*, {}** %906, i64 16, !dbg !3441
  %908 = bitcast {}** %907 to i8**, !dbg !3441
  %909 = load i8*, i8** %908, align 8, !dbg !3441
  %910 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %906, i64 %902, {} addrspace(10)* %904), !dbg !3441
  %911 = bitcast {} addrspace(10)* %910 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i648, !dbg !3441

loop.i648:                                        ; preds = %loop.i648, %zeroType.85.exit
  %912 = phi i64 [ 0, %zeroType.85.exit ], [ %913, %loop.i648 ], !dbg !3441
  %913 = add i64 %912, 1, !dbg !3441
  %914 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %911, i64 %912, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %914, align 8, !dbg !3441
  %915 = icmp eq i64 %913, %730, !dbg !3441
  br i1 %915, label %zeroType.89.exit, label %loop.i648, !dbg !3441

zeroType.89.exit:                                 ; preds = %loop.i648
  %_malloccache234 = bitcast {} addrspace(10)* %910 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache234, {} addrspace(10)* addrspace(10)** %_cache233, align 8, !dbg !3441, !invariant.group !3497
  %916 = mul nuw i64 %730, 8, !dbg !3441
  %917 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %918 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %917, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %919 = bitcast {}*** %351 to {}**, !dbg !3441
  %920 = getelementptr inbounds {}*, {}** %919, i64 -14, !dbg !3441
  %921 = getelementptr inbounds {}*, {}** %920, i64 16, !dbg !3441
  %922 = bitcast {}** %921 to i8**, !dbg !3441
  %923 = load i8*, i8** %922, align 8, !dbg !3441
  %924 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %920, i64 %916, {} addrspace(10)* %918), !dbg !3441
  %925 = bitcast {} addrspace(10)* %924 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i649, !dbg !3441

loop.i649:                                        ; preds = %loop.i649, %zeroType.89.exit
  %926 = phi i64 [ 0, %zeroType.89.exit ], [ %927, %loop.i649 ], !dbg !3441
  %927 = add i64 %926, 1, !dbg !3441
  %928 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %925, i64 %926, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %928, align 8, !dbg !3441
  %929 = icmp eq i64 %927, %730, !dbg !3441
  br i1 %929, label %zeroType.93.exit, label %loop.i649, !dbg !3441

zeroType.93.exit:                                 ; preds = %loop.i649
  %"'mi24_malloccache" = bitcast {} addrspace(10)* %924 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'mi24_malloccache", {} addrspace(10)* addrspace(10)** %"'mi24_cache", align 8, !dbg !3441, !invariant.group !3498
  %930 = mul nuw i64 %730, 8, !dbg !3441
  %931 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %932 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %931, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %933 = bitcast {}*** %347 to {}**, !dbg !3441
  %934 = getelementptr inbounds {}*, {}** %933, i64 -14, !dbg !3441
  %935 = getelementptr inbounds {}*, {}** %934, i64 16, !dbg !3441
  %936 = bitcast {}** %935 to i8**, !dbg !3441
  %937 = load i8*, i8** %936, align 8, !dbg !3441
  %938 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %934, i64 %930, {} addrspace(10)* %932), !dbg !3441
  %939 = bitcast {} addrspace(10)* %938 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i650, !dbg !3441

loop.i650:                                        ; preds = %loop.i650, %zeroType.93.exit
  %940 = phi i64 [ 0, %zeroType.93.exit ], [ %941, %loop.i650 ], !dbg !3441
  %941 = add i64 %940, 1, !dbg !3441
  %942 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %939, i64 %940, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %942, align 8, !dbg !3441
  %943 = icmp eq i64 %941, %730, !dbg !3441
  br i1 %943, label %zeroType.97.exit, label %loop.i650, !dbg !3441

zeroType.97.exit:                                 ; preds = %loop.i650
  %_malloccache238 = bitcast {} addrspace(10)* %938 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache238, {} addrspace(10)* addrspace(10)** %_cache237, align 8, !dbg !3441, !invariant.group !3499
  %944 = mul nuw i64 %730, 248, !dbg !3441
  %945 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %946 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %945, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11237993040 to {}*) to {} addrspace(10)*)), !dbg !3441
  %947 = bitcast {}*** %342 to {}**, !dbg !3441
  %948 = getelementptr inbounds {}*, {}** %947, i64 -14, !dbg !3441
  %949 = getelementptr inbounds {}*, {}** %948, i64 16, !dbg !3441
  %950 = bitcast {}** %949 to i8**, !dbg !3441
  %951 = load i8*, i8** %950, align 8, !dbg !3441
  %952 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %948, i64 %944, {} addrspace(10)* %946), !dbg !3441
  %953 = bitcast {} addrspace(10)* %952 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3441
  br label %loop.i651, !dbg !3441

loop.i651:                                        ; preds = %loop.i651, %zeroType.97.exit
  %954 = phi i64 [ 0, %zeroType.97.exit ], [ %955, %loop.i651 ], !dbg !3441
  %955 = add i64 %954, 1, !dbg !3441
  %956 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %953, i64 %954, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %956, align 8, !dbg !3441
  %957 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %953, i64 %954, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %957, align 8, !dbg !3441
  %958 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %953, i64 %954, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %958, align 8, !dbg !3441
  %959 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %953, i64 %954, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %959, align 8, !dbg !3441
  %960 = icmp eq i64 %955, %730, !dbg !3441
  br i1 %960, label %zeroType.102.exit, label %loop.i651, !dbg !3441

zeroType.102.exit:                                ; preds = %loop.i651
  %subcache241_malloccache = bitcast {} addrspace(10)* %952 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3441
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %subcache241_malloccache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache241_cache, align 8, !dbg !3441, !invariant.group !3500
  %961 = mul nuw i64 %730, 8, !dbg !3441
  %962 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %963 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %962, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %964 = bitcast {}*** %338 to {}**, !dbg !3441
  %965 = getelementptr inbounds {}*, {}** %964, i64 -14, !dbg !3441
  %966 = getelementptr inbounds {}*, {}** %965, i64 16, !dbg !3441
  %967 = bitcast {}** %966 to i8**, !dbg !3441
  %968 = load i8*, i8** %967, align 8, !dbg !3441
  %969 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %965, i64 %961, {} addrspace(10)* %963), !dbg !3441
  %970 = bitcast {} addrspace(10)* %969 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i652, !dbg !3441

loop.i652:                                        ; preds = %loop.i652, %zeroType.102.exit
  %971 = phi i64 [ 0, %zeroType.102.exit ], [ %972, %loop.i652 ], !dbg !3441
  %972 = add i64 %971, 1, !dbg !3441
  %973 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %970, i64 %971, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %973, align 8, !dbg !3441
  %974 = icmp eq i64 %972, %730, !dbg !3441
  br i1 %974, label %zeroType.106.exit, label %loop.i652, !dbg !3441

zeroType.106.exit:                                ; preds = %loop.i652
  %_malloccache245 = bitcast {} addrspace(10)* %969 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache245, {} addrspace(10)* addrspace(10)** %_cache244, align 8, !dbg !3441, !invariant.group !3501
  %975 = mul nuw i64 %730, 8, !dbg !3441
  %976 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %977 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %976, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %978 = bitcast {}*** %333 to {}**, !dbg !3441
  %979 = getelementptr inbounds {}*, {}** %978, i64 -14, !dbg !3441
  %980 = getelementptr inbounds {}*, {}** %979, i64 16, !dbg !3441
  %981 = bitcast {}** %980 to i8**, !dbg !3441
  %982 = load i8*, i8** %981, align 8, !dbg !3441
  %983 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %979, i64 %975, {} addrspace(10)* %977), !dbg !3441
  %984 = bitcast {} addrspace(10)* %983 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i653, !dbg !3441

loop.i653:                                        ; preds = %loop.i653, %zeroType.106.exit
  %985 = phi i64 [ 0, %zeroType.106.exit ], [ %986, %loop.i653 ], !dbg !3441
  %986 = add i64 %985, 1, !dbg !3441
  %987 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %984, i64 %985, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %987, align 8, !dbg !3441
  %988 = icmp eq i64 %986, %730, !dbg !3441
  br i1 %988, label %zeroType.110.exit, label %loop.i653, !dbg !3441

zeroType.110.exit:                                ; preds = %loop.i653
  %box441_malloccache = bitcast {} addrspace(10)* %983 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %box441_malloccache, {} addrspace(10)* addrspace(10)** %box441_cache, align 8, !dbg !3441, !invariant.group !3502
  %989 = mul nuw i64 %730, 8, !dbg !3441
  %990 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %991 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %990, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %992 = bitcast {}*** %329 to {}**, !dbg !3441
  %993 = getelementptr inbounds {}*, {}** %992, i64 -14, !dbg !3441
  %994 = getelementptr inbounds {}*, {}** %993, i64 16, !dbg !3441
  %995 = bitcast {}** %994 to i8**, !dbg !3441
  %996 = load i8*, i8** %995, align 8, !dbg !3441
  %997 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %993, i64 %989, {} addrspace(10)* %991), !dbg !3441
  %998 = bitcast {} addrspace(10)* %997 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i654, !dbg !3441

loop.i654:                                        ; preds = %loop.i654, %zeroType.110.exit
  %999 = phi i64 [ 0, %zeroType.110.exit ], [ %1000, %loop.i654 ], !dbg !3441
  %1000 = add i64 %999, 1, !dbg !3441
  %1001 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %998, i64 %999, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1001, align 8, !dbg !3441
  %1002 = icmp eq i64 %1000, %730, !dbg !3441
  br i1 %1002, label %zeroType.114.exit, label %loop.i654, !dbg !3441

zeroType.114.exit:                                ; preds = %loop.i654
  %"box441'mi_malloccache" = bitcast {} addrspace(10)* %997 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"box441'mi_malloccache", {} addrspace(10)* addrspace(10)** %"box441'mi_cache", align 8, !dbg !3441, !invariant.group !3503
  %1003 = mul nuw i64 %730, 8, !dbg !3441
  %1004 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1005 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1004, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1006 = bitcast {}*** %325 to {}**, !dbg !3441
  %1007 = getelementptr inbounds {}*, {}** %1006, i64 -14, !dbg !3441
  %1008 = getelementptr inbounds {}*, {}** %1007, i64 16, !dbg !3441
  %1009 = bitcast {}** %1008 to i8**, !dbg !3441
  %1010 = load i8*, i8** %1009, align 8, !dbg !3441
  %1011 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1007, i64 %1003, {} addrspace(10)* %1005), !dbg !3441
  %1012 = bitcast {} addrspace(10)* %1011 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i655, !dbg !3441

loop.i655:                                        ; preds = %loop.i655, %zeroType.114.exit
  %1013 = phi i64 [ 0, %zeroType.114.exit ], [ %1014, %loop.i655 ], !dbg !3441
  %1014 = add i64 %1013, 1, !dbg !3441
  %1015 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1012, i64 %1013, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1015, align 8, !dbg !3441
  %1016 = icmp eq i64 %1014, %730, !dbg !3441
  br i1 %1016, label %zeroType.118.exit, label %loop.i655, !dbg !3441

zeroType.118.exit:                                ; preds = %loop.i655
  %_malloccache255 = bitcast {} addrspace(10)* %1011 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache255, {} addrspace(10)* addrspace(10)** %_cache254, align 8, !dbg !3441, !invariant.group !3504
  %1017 = mul nuw i64 %730, 8, !dbg !3441
  %1018 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1019 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1018, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1020 = bitcast {}*** %320 to {}**, !dbg !3441
  %1021 = getelementptr inbounds {}*, {}** %1020, i64 -14, !dbg !3441
  %1022 = getelementptr inbounds {}*, {}** %1021, i64 16, !dbg !3441
  %1023 = bitcast {}** %1022 to i8**, !dbg !3441
  %1024 = load i8*, i8** %1023, align 8, !dbg !3441
  %1025 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1021, i64 %1017, {} addrspace(10)* %1019), !dbg !3441
  %1026 = bitcast {} addrspace(10)* %1025 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i656, !dbg !3441

loop.i656:                                        ; preds = %loop.i656, %zeroType.118.exit
  %1027 = phi i64 [ 0, %zeroType.118.exit ], [ %1028, %loop.i656 ], !dbg !3441
  %1028 = add i64 %1027, 1, !dbg !3441
  %1029 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1026, i64 %1027, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1029, align 8, !dbg !3441
  %1030 = icmp eq i64 %1028, %730, !dbg !3441
  br i1 %1030, label %zeroType.123.exit, label %loop.i656, !dbg !3441

zeroType.123.exit:                                ; preds = %loop.i656
  %"newstruct435'mi_malloccache" = bitcast {} addrspace(10)* %1025 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"newstruct435'mi_malloccache", {} addrspace(10)* addrspace(10)** %"newstruct435'mi_cache", align 8, !dbg !3441, !invariant.group !3505
  %1031 = mul nuw i64 %730, 8, !dbg !3441
  %1032 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1033 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1032, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1034 = bitcast {}*** %316 to {}**, !dbg !3441
  %1035 = getelementptr inbounds {}*, {}** %1034, i64 -14, !dbg !3441
  %1036 = getelementptr inbounds {}*, {}** %1035, i64 16, !dbg !3441
  %1037 = bitcast {}** %1036 to i8**, !dbg !3441
  %1038 = load i8*, i8** %1037, align 8, !dbg !3441
  %1039 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1035, i64 %1031, {} addrspace(10)* %1033), !dbg !3441
  %1040 = bitcast {} addrspace(10)* %1039 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i657, !dbg !3441

loop.i657:                                        ; preds = %loop.i657, %zeroType.123.exit
  %1041 = phi i64 [ 0, %zeroType.123.exit ], [ %1042, %loop.i657 ], !dbg !3441
  %1042 = add i64 %1041, 1, !dbg !3441
  %1043 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1040, i64 %1041, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1043, align 8, !dbg !3441
  %1044 = icmp eq i64 %1042, %730, !dbg !3441
  br i1 %1044, label %zeroType.127.exit, label %loop.i657, !dbg !3441

zeroType.127.exit:                                ; preds = %loop.i657
  %_malloccache271 = bitcast {} addrspace(10)* %1039 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache271, {} addrspace(10)* addrspace(10)** %_cache270, align 8, !dbg !3441, !invariant.group !3506
  %1045 = mul nuw i64 %730, 8, !dbg !3441
  %1046 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1047 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1046, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1048 = bitcast {}*** %312 to {}**, !dbg !3441
  %1049 = getelementptr inbounds {}*, {}** %1048, i64 -14, !dbg !3441
  %1050 = getelementptr inbounds {}*, {}** %1049, i64 16, !dbg !3441
  %1051 = bitcast {}** %1050 to i8**, !dbg !3441
  %1052 = load i8*, i8** %1051, align 8, !dbg !3441
  %1053 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1049, i64 %1045, {} addrspace(10)* %1047), !dbg !3441
  %1054 = bitcast {} addrspace(10)* %1053 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i658, !dbg !3441

loop.i658:                                        ; preds = %loop.i658, %zeroType.127.exit
  %1055 = phi i64 [ 0, %zeroType.127.exit ], [ %1056, %loop.i658 ], !dbg !3441
  %1056 = add i64 %1055, 1, !dbg !3441
  %1057 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1054, i64 %1055, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1057, align 8, !dbg !3441
  %1058 = icmp eq i64 %1056, %730, !dbg !3441
  br i1 %1058, label %zeroType.131.exit, label %loop.i658, !dbg !3441

zeroType.131.exit:                                ; preds = %loop.i658
  %_malloccache274 = bitcast {} addrspace(10)* %1053 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache274, {} addrspace(10)* addrspace(10)** %_cache273, align 8, !dbg !3441, !invariant.group !3507
  %1059 = mul nuw i64 %730, 8, !dbg !3441
  %1060 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1061 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1060, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1062 = bitcast {}*** %305 to {}**, !dbg !3441
  %1063 = getelementptr inbounds {}*, {}** %1062, i64 -14, !dbg !3441
  %1064 = getelementptr inbounds {}*, {}** %1063, i64 16, !dbg !3441
  %1065 = bitcast {}** %1064 to i8**, !dbg !3441
  %1066 = load i8*, i8** %1065, align 8, !dbg !3441
  %1067 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1063, i64 %1059, {} addrspace(10)* %1061), !dbg !3441
  %1068 = bitcast {} addrspace(10)* %1067 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i659, !dbg !3441

loop.i659:                                        ; preds = %loop.i659, %zeroType.131.exit
  %1069 = phi i64 [ 0, %zeroType.131.exit ], [ %1070, %loop.i659 ], !dbg !3441
  %1070 = add i64 %1069, 1, !dbg !3441
  %1071 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1068, i64 %1069, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1071, align 8, !dbg !3441
  %1072 = icmp eq i64 %1070, %730, !dbg !3441
  br i1 %1072, label %zeroType.137.exit, label %loop.i659, !dbg !3441

zeroType.137.exit:                                ; preds = %loop.i659
  %_malloccache286 = bitcast {} addrspace(10)* %1067 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache286, {} addrspace(10)* addrspace(10)** %_cache285, align 8, !dbg !3441, !invariant.group !3508
  %1073 = mul nuw i64 %730, 8, !dbg !3441
  %1074 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1075 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1074, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1076 = bitcast {}*** %299 to {}**, !dbg !3441
  %1077 = getelementptr inbounds {}*, {}** %1076, i64 -14, !dbg !3441
  %1078 = getelementptr inbounds {}*, {}** %1077, i64 16, !dbg !3441
  %1079 = bitcast {}** %1078 to i8**, !dbg !3441
  %1080 = load i8*, i8** %1079, align 8, !dbg !3441
  %1081 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1077, i64 %1073, {} addrspace(10)* %1075), !dbg !3441
  %1082 = bitcast {} addrspace(10)* %1081 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i660, !dbg !3441

loop.i660:                                        ; preds = %loop.i660, %zeroType.137.exit
  %1083 = phi i64 [ 0, %zeroType.137.exit ], [ %1084, %loop.i660 ], !dbg !3441
  %1084 = add i64 %1083, 1, !dbg !3441
  %1085 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1082, i64 %1083, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1085, align 8, !dbg !3441
  %1086 = icmp eq i64 %1084, %730, !dbg !3441
  br i1 %1086, label %zeroType.142.exit, label %loop.i660, !dbg !3441

zeroType.142.exit:                                ; preds = %loop.i660
  %_malloccache295 = bitcast {} addrspace(10)* %1081 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache295, {} addrspace(10)* addrspace(10)** %_cache294, align 8, !dbg !3441, !invariant.group !3509
  %1087 = mul nuw i64 %730, 8, !dbg !3441
  %1088 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1089 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1088, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1090 = bitcast {}*** %295 to {}**, !dbg !3441
  %1091 = getelementptr inbounds {}*, {}** %1090, i64 -14, !dbg !3441
  %1092 = getelementptr inbounds {}*, {}** %1091, i64 16, !dbg !3441
  %1093 = bitcast {}** %1092 to i8**, !dbg !3441
  %1094 = load i8*, i8** %1093, align 8, !dbg !3441
  %1095 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1091, i64 %1087, {} addrspace(10)* %1089), !dbg !3441
  %1096 = bitcast {} addrspace(10)* %1095 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i661, !dbg !3441

loop.i661:                                        ; preds = %loop.i661, %zeroType.142.exit
  %1097 = phi i64 [ 0, %zeroType.142.exit ], [ %1098, %loop.i661 ], !dbg !3441
  %1098 = add i64 %1097, 1, !dbg !3441
  %1099 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1096, i64 %1097, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1099, align 8, !dbg !3441
  %1100 = icmp eq i64 %1098, %730, !dbg !3441
  br i1 %1100, label %zeroType.146.exit, label %loop.i661, !dbg !3441

zeroType.146.exit:                                ; preds = %loop.i661
  %_malloccache299 = bitcast {} addrspace(10)* %1095 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache299, {} addrspace(10)* addrspace(10)** %_cache298, align 8, !dbg !3441, !invariant.group !3510
  %1101 = mul nuw i64 %730, 8, !dbg !3441
  %1102 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1103 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1102, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1104 = bitcast {}*** %289 to {}**, !dbg !3441
  %1105 = getelementptr inbounds {}*, {}** %1104, i64 -14, !dbg !3441
  %1106 = getelementptr inbounds {}*, {}** %1105, i64 16, !dbg !3441
  %1107 = bitcast {}** %1106 to i8**, !dbg !3441
  %1108 = load i8*, i8** %1107, align 8, !dbg !3441
  %1109 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1105, i64 %1101, {} addrspace(10)* %1103), !dbg !3441
  %1110 = bitcast {} addrspace(10)* %1109 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i662, !dbg !3441

loop.i662:                                        ; preds = %loop.i662, %zeroType.146.exit
  %1111 = phi i64 [ 0, %zeroType.146.exit ], [ %1112, %loop.i662 ], !dbg !3441
  %1112 = add i64 %1111, 1, !dbg !3441
  %1113 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1110, i64 %1111, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1113, align 8, !dbg !3441
  %1114 = icmp eq i64 %1112, %730, !dbg !3441
  br i1 %1114, label %zeroType.152.exit, label %loop.i662, !dbg !3441

zeroType.152.exit:                                ; preds = %loop.i662
  %"'ip_phi31_malloccache" = bitcast {} addrspace(10)* %1109 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ip_phi31_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi31_cache", align 8, !dbg !3441, !invariant.group !3511
  %1115 = mul nuw i64 %730, 8, !dbg !3441
  %1116 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1117 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1116, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1118 = bitcast {}*** %285 to {}**, !dbg !3441
  %1119 = getelementptr inbounds {}*, {}** %1118, i64 -14, !dbg !3441
  %1120 = getelementptr inbounds {}*, {}** %1119, i64 16, !dbg !3441
  %1121 = bitcast {}** %1120 to i8**, !dbg !3441
  %1122 = load i8*, i8** %1121, align 8, !dbg !3441
  %1123 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1119, i64 %1115, {} addrspace(10)* %1117), !dbg !3441
  %1124 = bitcast {} addrspace(10)* %1123 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i663, !dbg !3441

loop.i663:                                        ; preds = %loop.i663, %zeroType.152.exit
  %1125 = phi i64 [ 0, %zeroType.152.exit ], [ %1126, %loop.i663 ], !dbg !3441
  %1126 = add i64 %1125, 1, !dbg !3441
  %1127 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1124, i64 %1125, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1127, align 8, !dbg !3441
  %1128 = icmp eq i64 %1126, %730, !dbg !3441
  br i1 %1128, label %zeroType.156.exit, label %loop.i663, !dbg !3441

zeroType.156.exit:                                ; preds = %loop.i663
  %"'ip_phi34_malloccache" = bitcast {} addrspace(10)* %1123 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ip_phi34_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi34_cache", align 8, !dbg !3441, !invariant.group !3512
  %1129 = mul nuw i64 %730, 8, !dbg !3441
  %1130 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1131 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1130, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1132 = bitcast {}*** %281 to {}**, !dbg !3441
  %1133 = getelementptr inbounds {}*, {}** %1132, i64 -14, !dbg !3441
  %1134 = getelementptr inbounds {}*, {}** %1133, i64 16, !dbg !3441
  %1135 = bitcast {}** %1134 to i8**, !dbg !3441
  %1136 = load i8*, i8** %1135, align 8, !dbg !3441
  %1137 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1133, i64 %1129, {} addrspace(10)* %1131), !dbg !3441
  %1138 = bitcast {} addrspace(10)* %1137 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i664, !dbg !3441

loop.i664:                                        ; preds = %loop.i664, %zeroType.156.exit
  %1139 = phi i64 [ 0, %zeroType.156.exit ], [ %1140, %loop.i664 ], !dbg !3441
  %1140 = add i64 %1139, 1, !dbg !3441
  %1141 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1138, i64 %1139, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1141, align 8, !dbg !3441
  %1142 = icmp eq i64 %1140, %730, !dbg !3441
  br i1 %1142, label %zeroType.160.exit, label %loop.i664, !dbg !3441

zeroType.160.exit:                                ; preds = %loop.i664
  %_malloccache315 = bitcast {} addrspace(10)* %1137 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache315, {} addrspace(10)* addrspace(10)** %_cache314, align 8, !dbg !3441, !invariant.group !3513
  %1143 = mul nuw i64 %730, 8, !dbg !3441
  %1144 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1145 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1144, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1146 = bitcast {}*** %277 to {}**, !dbg !3441
  %1147 = getelementptr inbounds {}*, {}** %1146, i64 -14, !dbg !3441
  %1148 = getelementptr inbounds {}*, {}** %1147, i64 16, !dbg !3441
  %1149 = bitcast {}** %1148 to i8**, !dbg !3441
  %1150 = load i8*, i8** %1149, align 8, !dbg !3441
  %1151 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1147, i64 %1143, {} addrspace(10)* %1145), !dbg !3441
  %1152 = bitcast {} addrspace(10)* %1151 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i665, !dbg !3441

loop.i665:                                        ; preds = %loop.i665, %zeroType.160.exit
  %1153 = phi i64 [ 0, %zeroType.160.exit ], [ %1154, %loop.i665 ], !dbg !3441
  %1154 = add i64 %1153, 1, !dbg !3441
  %1155 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1152, i64 %1153, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1155, align 8, !dbg !3441
  %1156 = icmp eq i64 %1154, %730, !dbg !3441
  br i1 %1156, label %zeroType.164.exit, label %loop.i665, !dbg !3441

zeroType.164.exit:                                ; preds = %loop.i665
  %_malloccache318 = bitcast {} addrspace(10)* %1151 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache318, {} addrspace(10)* addrspace(10)** %_cache317, align 8, !dbg !3441, !invariant.group !3514
  %1157 = mul nuw i64 %730, 1, !dbg !3441
  %1158 = call noalias nonnull i8* @malloc(i64 %1157), !dbg !3441, !enzyme_cache_alloc !3515
  %.not916.not_malloccache = bitcast i8* %1158 to i1*, !dbg !3441
  store i1* %.not916.not_malloccache, i1** %.not916.not_cache, align 1, !dbg !3441, !invariant.group !3517
  %1159 = mul nuw i64 %730, 8, !dbg !3441
  %1160 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1161 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1160, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1162 = bitcast {}*** %273 to {}**, !dbg !3441
  %1163 = getelementptr inbounds {}*, {}** %1162, i64 -14, !dbg !3441
  %1164 = getelementptr inbounds {}*, {}** %1163, i64 16, !dbg !3441
  %1165 = bitcast {}** %1164 to i8**, !dbg !3441
  %1166 = load i8*, i8** %1165, align 8, !dbg !3441
  %1167 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1163, i64 %1159, {} addrspace(10)* %1161), !dbg !3441
  %1168 = bitcast {} addrspace(10)* %1167 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i666, !dbg !3441

loop.i666:                                        ; preds = %loop.i666, %zeroType.164.exit
  %1169 = phi i64 [ 0, %zeroType.164.exit ], [ %1170, %loop.i666 ], !dbg !3441
  %1170 = add i64 %1169, 1, !dbg !3441
  %1171 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1168, i64 %1169, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1171, align 8, !dbg !3441
  %1172 = icmp eq i64 %1170, %730, !dbg !3441
  br i1 %1172, label %zeroType.168.exit, label %loop.i666, !dbg !3441

zeroType.168.exit:                                ; preds = %loop.i666
  %_malloccache334 = bitcast {} addrspace(10)* %1167 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache334, {} addrspace(10)* addrspace(10)** %_cache333, align 8, !dbg !3441, !invariant.group !3518
  %1173 = mul nuw i64 %730, 8, !dbg !3441
  %1174 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1175 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1174, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1176 = bitcast {}*** %268 to {}**, !dbg !3441
  %1177 = getelementptr inbounds {}*, {}** %1176, i64 -14, !dbg !3441
  %1178 = getelementptr inbounds {}*, {}** %1177, i64 16, !dbg !3441
  %1179 = bitcast {}** %1178 to i8**, !dbg !3441
  %1180 = load i8*, i8** %1179, align 8, !dbg !3441
  %1181 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1177, i64 %1173, {} addrspace(10)* %1175), !dbg !3441
  %1182 = bitcast {} addrspace(10)* %1181 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i667, !dbg !3441

loop.i667:                                        ; preds = %loop.i667, %zeroType.168.exit
  %1183 = phi i64 [ 0, %zeroType.168.exit ], [ %1184, %loop.i667 ], !dbg !3441
  %1184 = add i64 %1183, 1, !dbg !3441
  %1185 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1182, i64 %1183, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1185, align 8, !dbg !3441
  %1186 = icmp eq i64 %1184, %730, !dbg !3441
  br i1 %1186, label %zeroType.173.exit, label %loop.i667, !dbg !3441

zeroType.173.exit:                                ; preds = %loop.i667
  %_malloccache338 = bitcast {} addrspace(10)* %1181 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache338, {} addrspace(10)* addrspace(10)** %_cache337, align 8, !dbg !3441, !invariant.group !3519
  %1187 = mul nuw i64 %730, 24, !dbg !3441
  %1188 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1189 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1188, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6227075280 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1190 = bitcast {}*** %263 to {}**, !dbg !3441
  %1191 = getelementptr inbounds {}*, {}** %1190, i64 -14, !dbg !3441
  %1192 = getelementptr inbounds {}*, {}** %1191, i64 16, !dbg !3441
  %1193 = bitcast {}** %1192 to i8**, !dbg !3441
  %1194 = load i8*, i8** %1193, align 8, !dbg !3441
  %1195 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1191, i64 %1187, {} addrspace(10)* %1189), !dbg !3441
  %1196 = bitcast {} addrspace(10)* %1195 to { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)*, !dbg !3441
  br label %loop.i668, !dbg !3441

loop.i668:                                        ; preds = %loop.i668, %zeroType.173.exit
  %1197 = phi i64 [ 0, %zeroType.173.exit ], [ %1198, %loop.i668 ], !dbg !3441
  %1198 = add i64 %1197, 1, !dbg !3441
  %1199 = getelementptr { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %1196, i64 %1197, i32 0, !dbg !3441
  %1200 = bitcast double addrspace(13)* addrspace(10)* addrspace(10)* %1199 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1200, align 8, !dbg !3441
  %1201 = icmp eq i64 %1198, %730, !dbg !3441
  br i1 %1201, label %zeroType.180.exit, label %loop.i668, !dbg !3441

zeroType.180.exit:                                ; preds = %loop.i668
  %_augmented341_malloccache = bitcast {} addrspace(10)* %1195 to { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)*, !dbg !3441
  store { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %_augmented341_malloccache, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)** %_augmented341_cache, align 8, !dbg !3441, !invariant.group !3520
  %1202 = mul nuw i64 %730, 8, !dbg !3441
  %1203 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1204 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1203, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1205 = bitcast {}*** %259 to {}**, !dbg !3441
  %1206 = getelementptr inbounds {}*, {}** %1205, i64 -14, !dbg !3441
  %1207 = getelementptr inbounds {}*, {}** %1206, i64 16, !dbg !3441
  %1208 = bitcast {}** %1207 to i8**, !dbg !3441
  %1209 = load i8*, i8** %1208, align 8, !dbg !3441
  %1210 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1206, i64 %1202, {} addrspace(10)* %1204), !dbg !3441
  %1211 = bitcast {} addrspace(10)* %1210 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i669, !dbg !3441

loop.i669:                                        ; preds = %loop.i669, %zeroType.180.exit
  %1212 = phi i64 [ 0, %zeroType.180.exit ], [ %1213, %loop.i669 ], !dbg !3441
  %1213 = add i64 %1212, 1, !dbg !3441
  %1214 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1211, i64 %1212, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1214, align 8, !dbg !3441
  %1215 = icmp eq i64 %1213, %730, !dbg !3441
  br i1 %1215, label %zeroType.184.exit, label %loop.i669, !dbg !3441

zeroType.184.exit:                                ; preds = %loop.i669
  %"'ip_phi37_malloccache" = bitcast {} addrspace(10)* %1210 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ip_phi37_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi37_cache", align 8, !dbg !3441, !invariant.group !3521
  %1216 = mul nuw i64 %730, 1, !dbg !3441
  %1217 = call noalias nonnull i8* @malloc(i64 %1216), !dbg !3441, !enzyme_cache_alloc !3522
  %.not926.not_malloccache = bitcast i8* %1217 to i1*, !dbg !3441
  store i1* %.not926.not_malloccache, i1** %.not926.not_cache, align 1, !dbg !3441, !invariant.group !3524
  %1218 = mul nuw i64 %730, 8, !dbg !3441
  %1219 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1220 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1219, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1221 = bitcast {}*** %253 to {}**, !dbg !3441
  %1222 = getelementptr inbounds {}*, {}** %1221, i64 -14, !dbg !3441
  %1223 = getelementptr inbounds {}*, {}** %1222, i64 16, !dbg !3441
  %1224 = bitcast {}** %1223 to i8**, !dbg !3441
  %1225 = load i8*, i8** %1224, align 8, !dbg !3441
  %1226 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1222, i64 %1218, {} addrspace(10)* %1220), !dbg !3441
  %1227 = bitcast {} addrspace(10)* %1226 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i670, !dbg !3441

loop.i670:                                        ; preds = %loop.i670, %zeroType.184.exit
  %1228 = phi i64 [ 0, %zeroType.184.exit ], [ %1229, %loop.i670 ], !dbg !3441
  %1229 = add i64 %1228, 1, !dbg !3441
  %1230 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1227, i64 %1228, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1230, align 8, !dbg !3441
  %1231 = icmp eq i64 %1229, %730, !dbg !3441
  br i1 %1231, label %zeroType.190.exit, label %loop.i670, !dbg !3441

zeroType.190.exit:                                ; preds = %loop.i670
  %_malloccache366 = bitcast {} addrspace(10)* %1226 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache366, {} addrspace(10)* addrspace(10)** %_cache365, align 8, !dbg !3441, !invariant.group !3525
  %1232 = mul nuw i64 %730, 1, !dbg !3441
  %1233 = call noalias nonnull i8* @malloc(i64 %1232), !dbg !3441, !enzyme_cache_alloc !3526
  %.not929_malloccache = bitcast i8* %1233 to i1*, !dbg !3441
  store i1* %.not929_malloccache, i1** %.not929_cache, align 1, !dbg !3441, !invariant.group !3528
  %1234 = mul nuw i64 %730, 1, !dbg !3441
  %_malloccache373 = call noalias nonnull i8* @malloc(i64 %1234), !dbg !3441, !enzyme_cache_alloc !3529
  store i8* %_malloccache373, i8** %_cache372, align 1, !dbg !3441, !invariant.group !3531
  %1235 = mul nuw i64 %730, 8, !dbg !3441
  %1236 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1237 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1236, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1238 = bitcast {}*** %248 to {}**, !dbg !3441
  %1239 = getelementptr inbounds {}*, {}** %1238, i64 -14, !dbg !3441
  %1240 = getelementptr inbounds {}*, {}** %1239, i64 16, !dbg !3441
  %1241 = bitcast {}** %1240 to i8**, !dbg !3441
  %1242 = load i8*, i8** %1241, align 8, !dbg !3441
  %1243 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1239, i64 %1235, {} addrspace(10)* %1237), !dbg !3441
  %1244 = bitcast {} addrspace(10)* %1243 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i671, !dbg !3441

loop.i671:                                        ; preds = %loop.i671, %zeroType.190.exit
  %1245 = phi i64 [ 0, %zeroType.190.exit ], [ %1246, %loop.i671 ], !dbg !3441
  %1246 = add i64 %1245, 1, !dbg !3441
  %1247 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1244, i64 %1245, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1247, align 8, !dbg !3441
  %1248 = icmp eq i64 %1246, %730, !dbg !3441
  br i1 %1248, label %zeroType.195.exit, label %loop.i671, !dbg !3441

zeroType.195.exit:                                ; preds = %loop.i671
  %_malloccache378 = bitcast {} addrspace(10)* %1243 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache378, {} addrspace(10)* addrspace(10)** %_cache377, align 8, !dbg !3441, !invariant.group !3532
  %1249 = mul nuw i64 %730, 8, !dbg !3441
  %1250 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1251 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1250, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1252 = bitcast {}*** %244 to {}**, !dbg !3441
  %1253 = getelementptr inbounds {}*, {}** %1252, i64 -14, !dbg !3441
  %1254 = getelementptr inbounds {}*, {}** %1253, i64 16, !dbg !3441
  %1255 = bitcast {}** %1254 to i8**, !dbg !3441
  %1256 = load i8*, i8** %1255, align 8, !dbg !3441
  %1257 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1253, i64 %1249, {} addrspace(10)* %1251), !dbg !3441
  %1258 = bitcast {} addrspace(10)* %1257 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i672, !dbg !3441

loop.i672:                                        ; preds = %loop.i672, %zeroType.195.exit
  %1259 = phi i64 [ 0, %zeroType.195.exit ], [ %1260, %loop.i672 ], !dbg !3441
  %1260 = add i64 %1259, 1, !dbg !3441
  %1261 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1258, i64 %1259, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1261, align 8, !dbg !3441
  %1262 = icmp eq i64 %1260, %730, !dbg !3441
  br i1 %1262, label %zeroType.199.exit, label %loop.i672, !dbg !3441

zeroType.199.exit:                                ; preds = %loop.i672
  %"'mi39_malloccache" = bitcast {} addrspace(10)* %1257 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'mi39_malloccache", {} addrspace(10)* addrspace(10)** %"'mi39_cache", align 8, !dbg !3441, !invariant.group !3533
  %1263 = mul nuw i64 %730, 248, !dbg !3441
  %1264 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1265 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1264, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11237993040 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1266 = bitcast {}*** %240 to {}**, !dbg !3441
  %1267 = getelementptr inbounds {}*, {}** %1266, i64 -14, !dbg !3441
  %1268 = getelementptr inbounds {}*, {}** %1267, i64 16, !dbg !3441
  %1269 = bitcast {}** %1268 to i8**, !dbg !3441
  %1270 = load i8*, i8** %1269, align 8, !dbg !3441
  %1271 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1267, i64 %1263, {} addrspace(10)* %1265), !dbg !3441
  %1272 = bitcast {} addrspace(10)* %1271 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3441
  br label %loop.i673, !dbg !3441

loop.i673:                                        ; preds = %loop.i673, %zeroType.199.exit
  %1273 = phi i64 [ 0, %zeroType.199.exit ], [ %1274, %loop.i673 ], !dbg !3441
  %1274 = add i64 %1273, 1, !dbg !3441
  %1275 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1272, i64 %1273, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1275, align 8, !dbg !3441
  %1276 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1272, i64 %1273, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1276, align 8, !dbg !3441
  %1277 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1272, i64 %1273, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1277, align 8, !dbg !3441
  %1278 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1272, i64 %1273, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1278, align 8, !dbg !3441
  %1279 = icmp eq i64 %1274, %730, !dbg !3441
  br i1 %1279, label %zeroType.203.exit, label %loop.i673, !dbg !3441

zeroType.203.exit:                                ; preds = %loop.i673
  %subcache383_malloccache = bitcast {} addrspace(10)* %1271 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3441
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %subcache383_malloccache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache383_cache, align 8, !dbg !3441, !invariant.group !3534
  %1280 = mul nuw i64 %730, 1, !dbg !3441
  %1281 = call noalias nonnull i8* @malloc(i64 %1280), !dbg !3441, !enzyme_cache_alloc !3535
  %.not8931036_malloccache = bitcast i8* %1281 to i1*, !dbg !3441
  store i1* %.not8931036_malloccache, i1** %.not8931036_cache, align 1, !dbg !3441, !invariant.group !3537
  %1282 = mul nuw i64 %730, 8, !dbg !3441
  %1283 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1284 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1283, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1285 = bitcast {}*** %236 to {}**, !dbg !3441
  %1286 = getelementptr inbounds {}*, {}** %1285, i64 -14, !dbg !3441
  %1287 = getelementptr inbounds {}*, {}** %1286, i64 16, !dbg !3441
  %1288 = bitcast {}** %1287 to i8**, !dbg !3441
  %1289 = load i8*, i8** %1288, align 8, !dbg !3441
  %1290 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1286, i64 %1282, {} addrspace(10)* %1284), !dbg !3441
  %1291 = bitcast {} addrspace(10)* %1290 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i674, !dbg !3441

loop.i674:                                        ; preds = %loop.i674, %zeroType.203.exit
  %1292 = phi i64 [ 0, %zeroType.203.exit ], [ %1293, %loop.i674 ], !dbg !3441
  %1293 = add i64 %1292, 1, !dbg !3441
  %1294 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1291, i64 %1292, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1294, align 8, !dbg !3441
  %1295 = icmp eq i64 %1293, %730, !dbg !3441
  br i1 %1295, label %zeroType.207.exit, label %loop.i674, !dbg !3441

zeroType.207.exit:                                ; preds = %loop.i674
  %_malloccache392 = bitcast {} addrspace(10)* %1290 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache392, {} addrspace(10)* addrspace(10)** %_cache391, align 8, !dbg !3441, !invariant.group !3538
  %1296 = mul nuw i64 %730, 8, !dbg !3441
  %1297 = call noalias nonnull i8* @malloc(i64 %1296), !dbg !3441, !enzyme_cache_alloc !3539
  %value_phi529_malloccache = bitcast i8* %1297 to i64**, !dbg !3441
  store i64** %value_phi529_malloccache, i64*** %value_phi529_cache, align 8, !dbg !3441, !invariant.group !3541
  %1298 = mul nuw i64 %730, 8, !dbg !3441
  %1299 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1300 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1299, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1301 = bitcast {}*** %231 to {}**, !dbg !3441
  %1302 = getelementptr inbounds {}*, {}** %1301, i64 -14, !dbg !3441
  %1303 = getelementptr inbounds {}*, {}** %1302, i64 16, !dbg !3441
  %1304 = bitcast {}** %1303 to i8**, !dbg !3441
  %1305 = load i8*, i8** %1304, align 8, !dbg !3441
  %1306 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1302, i64 %1298, {} addrspace(10)* %1300), !dbg !3441
  %1307 = bitcast {} addrspace(10)* %1306 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i675, !dbg !3441

loop.i675:                                        ; preds = %loop.i675, %zeroType.207.exit
  %1308 = phi i64 [ 0, %zeroType.207.exit ], [ %1309, %loop.i675 ], !dbg !3441
  %1309 = add i64 %1308, 1, !dbg !3441
  %1310 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1307, i64 %1308, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1310, align 8, !dbg !3441
  %1311 = icmp eq i64 %1309, %730, !dbg !3441
  br i1 %1311, label %zeroType.212.exit, label %loop.i675, !dbg !3441

zeroType.212.exit:                                ; preds = %loop.i675
  %_malloccache419 = bitcast {} addrspace(10)* %1306 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache419, {} addrspace(10)* addrspace(10)** %_cache418, align 8, !dbg !3441, !invariant.group !3542
  %1312 = mul nuw i64 %730, 8, !dbg !3441
  %1313 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1314 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1313, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1315 = bitcast {}*** %227 to {}**, !dbg !3441
  %1316 = getelementptr inbounds {}*, {}** %1315, i64 -14, !dbg !3441
  %1317 = getelementptr inbounds {}*, {}** %1316, i64 16, !dbg !3441
  %1318 = bitcast {}** %1317 to i8**, !dbg !3441
  %1319 = load i8*, i8** %1318, align 8, !dbg !3441
  %1320 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1316, i64 %1312, {} addrspace(10)* %1314), !dbg !3441
  %1321 = bitcast {} addrspace(10)* %1320 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i676, !dbg !3441

loop.i676:                                        ; preds = %loop.i676, %zeroType.212.exit
  %1322 = phi i64 [ 0, %zeroType.212.exit ], [ %1323, %loop.i676 ], !dbg !3441
  %1323 = add i64 %1322, 1, !dbg !3441
  %1324 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1321, i64 %1322, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1324, align 8, !dbg !3441
  %1325 = icmp eq i64 %1323, %730, !dbg !3441
  br i1 %1325, label %zeroType.216.exit, label %loop.i676, !dbg !3441

zeroType.216.exit:                                ; preds = %loop.i676
  %_malloccache423 = bitcast {} addrspace(10)* %1320 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache423, {} addrspace(10)* addrspace(10)** %_cache422, align 8, !dbg !3441, !invariant.group !3543
  %1326 = mul nuw i64 %730, 8, !dbg !3441
  %1327 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1328 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1327, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1329 = bitcast {}*** %223 to {}**, !dbg !3441
  %1330 = getelementptr inbounds {}*, {}** %1329, i64 -14, !dbg !3441
  %1331 = getelementptr inbounds {}*, {}** %1330, i64 16, !dbg !3441
  %1332 = bitcast {}** %1331 to i8**, !dbg !3441
  %1333 = load i8*, i8** %1332, align 8, !dbg !3441
  %1334 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1330, i64 %1326, {} addrspace(10)* %1328), !dbg !3441
  %1335 = bitcast {} addrspace(10)* %1334 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i677, !dbg !3441

loop.i677:                                        ; preds = %loop.i677, %zeroType.216.exit
  %1336 = phi i64 [ 0, %zeroType.216.exit ], [ %1337, %loop.i677 ], !dbg !3441
  %1337 = add i64 %1336, 1, !dbg !3441
  %1338 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1335, i64 %1336, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1338, align 8, !dbg !3441
  %1339 = icmp eq i64 %1337, %730, !dbg !3441
  br i1 %1339, label %zeroType.220.exit, label %loop.i677, !dbg !3441

zeroType.220.exit:                                ; preds = %loop.i677
  %"'mi51_malloccache" = bitcast {} addrspace(10)* %1334 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'mi51_malloccache", {} addrspace(10)* addrspace(10)** %"'mi51_cache", align 8, !dbg !3441, !invariant.group !3544
  %1340 = mul nuw i64 %730, 248, !dbg !3441
  %1341 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1342 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1341, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11237993040 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1343 = bitcast {}*** %219 to {}**, !dbg !3441
  %1344 = getelementptr inbounds {}*, {}** %1343, i64 -14, !dbg !3441
  %1345 = getelementptr inbounds {}*, {}** %1344, i64 16, !dbg !3441
  %1346 = bitcast {}** %1345 to i8**, !dbg !3441
  %1347 = load i8*, i8** %1346, align 8, !dbg !3441
  %1348 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1344, i64 %1340, {} addrspace(10)* %1342), !dbg !3441
  %1349 = bitcast {} addrspace(10)* %1348 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3441
  br label %loop.i678, !dbg !3441

loop.i678:                                        ; preds = %loop.i678, %zeroType.220.exit
  %1350 = phi i64 [ 0, %zeroType.220.exit ], [ %1351, %loop.i678 ], !dbg !3441
  %1351 = add i64 %1350, 1, !dbg !3441
  %1352 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1349, i64 %1350, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1352, align 8, !dbg !3441
  %1353 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1349, i64 %1350, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1353, align 8, !dbg !3441
  %1354 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1349, i64 %1350, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1354, align 8, !dbg !3441
  %1355 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1349, i64 %1350, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1355, align 8, !dbg !3441
  %1356 = icmp eq i64 %1351, %730, !dbg !3441
  br i1 %1356, label %zeroType.224.exit, label %loop.i678, !dbg !3441

zeroType.224.exit:                                ; preds = %loop.i678
  %subcache427_malloccache = bitcast {} addrspace(10)* %1348 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3441
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %subcache427_malloccache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache427_cache, align 8, !dbg !3441, !invariant.group !3545
  %1357 = mul nuw i64 %730, 8, !dbg !3441
  %1358 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1359 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1358, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1360 = bitcast {}*** %215 to {}**, !dbg !3441
  %1361 = getelementptr inbounds {}*, {}** %1360, i64 -14, !dbg !3441
  %1362 = getelementptr inbounds {}*, {}** %1361, i64 16, !dbg !3441
  %1363 = bitcast {}** %1362 to i8**, !dbg !3441
  %1364 = load i8*, i8** %1363, align 8, !dbg !3441
  %1365 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1361, i64 %1357, {} addrspace(10)* %1359), !dbg !3441
  %1366 = bitcast {} addrspace(10)* %1365 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i679, !dbg !3441

loop.i679:                                        ; preds = %loop.i679, %zeroType.224.exit
  %1367 = phi i64 [ 0, %zeroType.224.exit ], [ %1368, %loop.i679 ], !dbg !3441
  %1368 = add i64 %1367, 1, !dbg !3441
  %1369 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1366, i64 %1367, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1369, align 8, !dbg !3441
  %1370 = icmp eq i64 %1368, %730, !dbg !3441
  br i1 %1370, label %zeroType.228.exit, label %loop.i679, !dbg !3441

zeroType.228.exit:                                ; preds = %loop.i679
  %_malloccache431 = bitcast {} addrspace(10)* %1365 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache431, {} addrspace(10)* addrspace(10)** %_cache430, align 8, !dbg !3441, !invariant.group !3546
  %1371 = mul nuw i64 %730, 264, !dbg !3441
  %1372 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1373 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1372, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4373995728 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1374 = bitcast {}*** %211 to {}**, !dbg !3441
  %1375 = getelementptr inbounds {}*, {}** %1374, i64 -14, !dbg !3441
  %1376 = getelementptr inbounds {}*, {}** %1375, i64 16, !dbg !3441
  %1377 = bitcast {}** %1376 to i8**, !dbg !3441
  %1378 = load i8*, i8** %1377, align 8, !dbg !3441
  %1379 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1375, i64 %1371, {} addrspace(10)* %1373), !dbg !3441
  %1380 = bitcast {} addrspace(10)* %1379 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3441
  br label %loop.i680, !dbg !3441

loop.i680:                                        ; preds = %loop.i680, %zeroType.228.exit
  %1381 = phi i64 [ 0, %zeroType.228.exit ], [ %1382, %loop.i680 ], !dbg !3441
  %1382 = add i64 %1381, 1, !dbg !3441
  %1383 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1380, i64 %1381, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1383, align 8, !dbg !3441
  %1384 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1380, i64 %1381, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1384, align 8, !dbg !3441
  %1385 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1380, i64 %1381, i32 0, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1385, align 8, !dbg !3441
  %1386 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1380, i64 %1381, i32 0, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1386, align 8, !dbg !3441
  %1387 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1380, i64 %1381, i32 0, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1387, align 8, !dbg !3441
  %1388 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1380, i64 %1381, i32 0, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1388, align 8, !dbg !3441
  %1389 = icmp eq i64 %1382, %730, !dbg !3441
  br i1 %1389, label %zeroType.232.exit, label %loop.i680, !dbg !3441

zeroType.232.exit:                                ; preds = %loop.i680
  %_augmented382_malloccache = bitcast {} addrspace(10)* %1379 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3441
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %_augmented382_malloccache, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented382_cache, align 8, !dbg !3441, !invariant.group !3547
  %1390 = mul nuw i64 %730, 8, !dbg !3441
  %1391 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1392 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1391, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1393 = bitcast {}*** %207 to {}**, !dbg !3441
  %1394 = getelementptr inbounds {}*, {}** %1393, i64 -14, !dbg !3441
  %1395 = getelementptr inbounds {}*, {}** %1394, i64 16, !dbg !3441
  %1396 = bitcast {}** %1395 to i8**, !dbg !3441
  %1397 = load i8*, i8** %1396, align 8, !dbg !3441
  %1398 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1394, i64 %1390, {} addrspace(10)* %1392), !dbg !3441
  %1399 = bitcast {} addrspace(10)* %1398 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i681, !dbg !3441

loop.i681:                                        ; preds = %loop.i681, %zeroType.232.exit
  %1400 = phi i64 [ 0, %zeroType.232.exit ], [ %1401, %loop.i681 ], !dbg !3441
  %1401 = add i64 %1400, 1, !dbg !3441
  %1402 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1399, i64 %1400, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1402, align 8, !dbg !3441
  %1403 = icmp eq i64 %1401, %730, !dbg !3441
  br i1 %1403, label %zeroType.236.exit, label %loop.i681, !dbg !3441

zeroType.236.exit:                                ; preds = %loop.i681
  %_malloccache435 = bitcast {} addrspace(10)* %1398 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache435, {} addrspace(10)* addrspace(10)** %_cache434, align 8, !dbg !3441, !invariant.group !3548
  %1404 = mul nuw i64 %730, 8, !dbg !3441
  %1405 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1406 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1405, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1407 = bitcast {}*** %203 to {}**, !dbg !3441
  %1408 = getelementptr inbounds {}*, {}** %1407, i64 -14, !dbg !3441
  %1409 = getelementptr inbounds {}*, {}** %1408, i64 16, !dbg !3441
  %1410 = bitcast {}** %1409 to i8**, !dbg !3441
  %1411 = load i8*, i8** %1410, align 8, !dbg !3441
  %1412 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1408, i64 %1404, {} addrspace(10)* %1406), !dbg !3441
  %1413 = bitcast {} addrspace(10)* %1412 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i682, !dbg !3441

loop.i682:                                        ; preds = %loop.i682, %zeroType.236.exit
  %1414 = phi i64 [ 0, %zeroType.236.exit ], [ %1415, %loop.i682 ], !dbg !3441
  %1415 = add i64 %1414, 1, !dbg !3441
  %1416 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1413, i64 %1414, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1416, align 8, !dbg !3441
  %1417 = icmp eq i64 %1415, %730, !dbg !3441
  br i1 %1417, label %zeroType.240.exit, label %loop.i682, !dbg !3441

zeroType.240.exit:                                ; preds = %loop.i682
  %"'ip_phi48_malloccache" = bitcast {} addrspace(10)* %1412 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ip_phi48_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi48_cache", align 8, !dbg !3441, !invariant.group !3549
  %1418 = mul nuw i64 %730, 64, !dbg !3441
  %1419 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1420 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1419, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6229932688 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1421 = bitcast {}*** %199 to {}**, !dbg !3441
  %1422 = getelementptr inbounds {}*, {}** %1421, i64 -14, !dbg !3441
  %1423 = getelementptr inbounds {}*, {}** %1422, i64 16, !dbg !3441
  %1424 = bitcast {}** %1423 to i8**, !dbg !3441
  %1425 = load i8*, i8** %1424, align 8, !dbg !3441
  %1426 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1422, i64 %1418, {} addrspace(10)* %1420), !dbg !3441
  %1427 = bitcast {} addrspace(10)* %1426 to { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, !dbg !3441
  br label %loop.i683, !dbg !3441

loop.i683:                                        ; preds = %loop.i683, %zeroType.240.exit
  %1428 = phi i64 [ 0, %zeroType.240.exit ], [ %1429, %loop.i683 ], !dbg !3441
  %1429 = add i64 %1428, 1, !dbg !3441
  %1430 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1427, i64 %1428, i32 0, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1430, align 8, !dbg !3441
  %1431 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1427, i64 %1428, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1431, align 8, !dbg !3441
  %1432 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1427, i64 %1428, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1432, align 8, !dbg !3441
  %1433 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1427, i64 %1428, i32 3, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1433, align 8, !dbg !3441
  %1434 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1427, i64 %1428, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1434, align 8, !dbg !3441
  %1435 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1427, i64 %1428, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1435, align 8, !dbg !3441
  %1436 = icmp eq i64 %1429, %730, !dbg !3441
  br i1 %1436, label %zeroType.244.exit, label %loop.i683, !dbg !3441

zeroType.244.exit:                                ; preds = %loop.i683
  %subcache439_malloccache = bitcast {} addrspace(10)* %1426 to { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, !dbg !3441
  store { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %subcache439_malloccache, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache439_cache, align 8, !dbg !3441, !invariant.group !3550
  %1437 = mul nuw i64 %730, 8, !dbg !3441
  %1438 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1439 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1438, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1440 = bitcast {}*** %195 to {}**, !dbg !3441
  %1441 = getelementptr inbounds {}*, {}** %1440, i64 -14, !dbg !3441
  %1442 = getelementptr inbounds {}*, {}** %1441, i64 16, !dbg !3441
  %1443 = bitcast {}** %1442 to i8**, !dbg !3441
  %1444 = load i8*, i8** %1443, align 8, !dbg !3441
  %1445 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1441, i64 %1437, {} addrspace(10)* %1439), !dbg !3441
  %1446 = bitcast {} addrspace(10)* %1445 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i684, !dbg !3441

loop.i684:                                        ; preds = %loop.i684, %zeroType.244.exit
  %1447 = phi i64 [ 0, %zeroType.244.exit ], [ %1448, %loop.i684 ], !dbg !3441
  %1448 = add i64 %1447, 1, !dbg !3441
  %1449 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1446, i64 %1447, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1449, align 8, !dbg !3441
  %1450 = icmp eq i64 %1448, %730, !dbg !3441
  br i1 %1450, label %zeroType.248.exit, label %loop.i684, !dbg !3441

zeroType.248.exit:                                ; preds = %loop.i684
  %_malloccache443 = bitcast {} addrspace(10)* %1445 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache443, {} addrspace(10)* addrspace(10)** %_cache442, align 8, !dbg !3441, !invariant.group !3551
  %1451 = mul nuw i64 %730, 8, !dbg !3441
  %1452 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1453 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1452, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1454 = bitcast {}*** %191 to {}**, !dbg !3441
  %1455 = getelementptr inbounds {}*, {}** %1454, i64 -14, !dbg !3441
  %1456 = getelementptr inbounds {}*, {}** %1455, i64 16, !dbg !3441
  %1457 = bitcast {}** %1456 to i8**, !dbg !3441
  %1458 = load i8*, i8** %1457, align 8, !dbg !3441
  %1459 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1455, i64 %1451, {} addrspace(10)* %1453), !dbg !3441
  %1460 = bitcast {} addrspace(10)* %1459 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i685, !dbg !3441

loop.i685:                                        ; preds = %loop.i685, %zeroType.248.exit
  %1461 = phi i64 [ 0, %zeroType.248.exit ], [ %1462, %loop.i685 ], !dbg !3441
  %1462 = add i64 %1461, 1, !dbg !3441
  %1463 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1460, i64 %1461, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1463, align 8, !dbg !3441
  %1464 = icmp eq i64 %1462, %730, !dbg !3441
  br i1 %1464, label %zeroType.252.exit, label %loop.i685, !dbg !3441

zeroType.252.exit:                                ; preds = %loop.i685
  %"'mi47_malloccache" = bitcast {} addrspace(10)* %1459 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'mi47_malloccache", {} addrspace(10)* addrspace(10)** %"'mi47_cache", align 8, !dbg !3441, !invariant.group !3552
  %1465 = mul nuw i64 %730, 8, !dbg !3441
  %1466 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1467 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1466, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1468 = bitcast {}*** %187 to {}**, !dbg !3441
  %1469 = getelementptr inbounds {}*, {}** %1468, i64 -14, !dbg !3441
  %1470 = getelementptr inbounds {}*, {}** %1469, i64 16, !dbg !3441
  %1471 = bitcast {}** %1470 to i8**, !dbg !3441
  %1472 = load i8*, i8** %1471, align 8, !dbg !3441
  %1473 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1469, i64 %1465, {} addrspace(10)* %1467), !dbg !3441
  %1474 = bitcast {} addrspace(10)* %1473 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i686, !dbg !3441

loop.i686:                                        ; preds = %loop.i686, %zeroType.252.exit
  %1475 = phi i64 [ 0, %zeroType.252.exit ], [ %1476, %loop.i686 ], !dbg !3441
  %1476 = add i64 %1475, 1, !dbg !3441
  %1477 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1474, i64 %1475, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1477, align 8, !dbg !3441
  %1478 = icmp eq i64 %1476, %730, !dbg !3441
  br i1 %1478, label %zeroType.256.exit, label %loop.i686, !dbg !3441

zeroType.256.exit:                                ; preds = %loop.i686
  %_malloccache447 = bitcast {} addrspace(10)* %1473 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache447, {} addrspace(10)* addrspace(10)** %_cache446, align 8, !dbg !3441, !invariant.group !3553
  %1479 = mul nuw i64 %730, 248, !dbg !3441
  %1480 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1481 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1480, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11237993040 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1482 = bitcast {}*** %182 to {}**, !dbg !3441
  %1483 = getelementptr inbounds {}*, {}** %1482, i64 -14, !dbg !3441
  %1484 = getelementptr inbounds {}*, {}** %1483, i64 16, !dbg !3441
  %1485 = bitcast {}** %1484 to i8**, !dbg !3441
  %1486 = load i8*, i8** %1485, align 8, !dbg !3441
  %1487 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1483, i64 %1479, {} addrspace(10)* %1481), !dbg !3441
  %1488 = bitcast {} addrspace(10)* %1487 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3441
  br label %loop.i687, !dbg !3441

loop.i687:                                        ; preds = %loop.i687, %zeroType.256.exit
  %1489 = phi i64 [ 0, %zeroType.256.exit ], [ %1490, %loop.i687 ], !dbg !3441
  %1490 = add i64 %1489, 1, !dbg !3441
  %1491 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1488, i64 %1489, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1491, align 8, !dbg !3441
  %1492 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1488, i64 %1489, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1492, align 8, !dbg !3441
  %1493 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1488, i64 %1489, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1493, align 8, !dbg !3441
  %1494 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1488, i64 %1489, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1494, align 8, !dbg !3441
  %1495 = icmp eq i64 %1490, %730, !dbg !3441
  br i1 %1495, label %zeroType.261.exit, label %loop.i687, !dbg !3441

zeroType.261.exit:                                ; preds = %loop.i687
  %subcache450_malloccache = bitcast {} addrspace(10)* %1487 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3441
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %subcache450_malloccache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache450_cache, align 8, !dbg !3441, !invariant.group !3554
  %1496 = mul nuw i64 %730, 8, !dbg !3441
  %1497 = call noalias nonnull i8* @malloc(i64 %1496), !dbg !3441, !enzyme_cache_alloc !3555
  %value_phi585_malloccache = bitcast i8* %1497 to i64**, !dbg !3441
  store i64** %value_phi585_malloccache, i64*** %value_phi585_cache, align 8, !dbg !3441, !invariant.group !3557
  %1498 = mul nuw i64 %730, 8, !dbg !3441
  %1499 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1500 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1499, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1501 = bitcast {}*** %177 to {}**, !dbg !3441
  %1502 = getelementptr inbounds {}*, {}** %1501, i64 -14, !dbg !3441
  %1503 = getelementptr inbounds {}*, {}** %1502, i64 16, !dbg !3441
  %1504 = bitcast {}** %1503 to i8**, !dbg !3441
  %1505 = load i8*, i8** %1504, align 8, !dbg !3441
  %1506 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1502, i64 %1498, {} addrspace(10)* %1500), !dbg !3441
  %1507 = bitcast {} addrspace(10)* %1506 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i688, !dbg !3441

loop.i688:                                        ; preds = %loop.i688, %zeroType.261.exit
  %1508 = phi i64 [ 0, %zeroType.261.exit ], [ %1509, %loop.i688 ], !dbg !3441
  %1509 = add i64 %1508, 1, !dbg !3441
  %1510 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1507, i64 %1508, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1510, align 8, !dbg !3441
  %1511 = icmp eq i64 %1509, %730, !dbg !3441
  br i1 %1511, label %zeroType.266.exit, label %loop.i688, !dbg !3441

zeroType.266.exit:                                ; preds = %loop.i688
  %_malloccache485 = bitcast {} addrspace(10)* %1506 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache485, {} addrspace(10)* addrspace(10)** %_cache484, align 8, !dbg !3441, !invariant.group !3558
  %1512 = mul nuw i64 %730, 8, !dbg !3441
  %1513 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1514 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1513, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1515 = bitcast {}*** %173 to {}**, !dbg !3441
  %1516 = getelementptr inbounds {}*, {}** %1515, i64 -14, !dbg !3441
  %1517 = getelementptr inbounds {}*, {}** %1516, i64 16, !dbg !3441
  %1518 = bitcast {}** %1517 to i8**, !dbg !3441
  %1519 = load i8*, i8** %1518, align 8, !dbg !3441
  %1520 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1516, i64 %1512, {} addrspace(10)* %1514), !dbg !3441
  %1521 = bitcast {} addrspace(10)* %1520 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i689, !dbg !3441

loop.i689:                                        ; preds = %loop.i689, %zeroType.266.exit
  %1522 = phi i64 [ 0, %zeroType.266.exit ], [ %1523, %loop.i689 ], !dbg !3441
  %1523 = add i64 %1522, 1, !dbg !3441
  %1524 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1521, i64 %1522, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1524, align 8, !dbg !3441
  %1525 = icmp eq i64 %1523, %730, !dbg !3441
  br i1 %1525, label %zeroType.270.exit, label %loop.i689, !dbg !3441

zeroType.270.exit:                                ; preds = %loop.i689
  %"'ip_phi61_malloccache" = bitcast {} addrspace(10)* %1520 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ip_phi61_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi61_cache", align 8, !dbg !3441, !invariant.group !3559
  %1526 = mul nuw i64 %730, 360, !dbg !3441
  %1527 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1528 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1527, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6230406672 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1529 = bitcast {}*** %169 to {}**, !dbg !3441
  %1530 = getelementptr inbounds {}*, {}** %1529, i64 -14, !dbg !3441
  %1531 = getelementptr inbounds {}*, {}** %1530, i64 16, !dbg !3441
  %1532 = bitcast {}** %1531 to i8**, !dbg !3441
  %1533 = load i8*, i8** %1532, align 8, !dbg !3441
  %1534 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1530, i64 %1526, {} addrspace(10)* %1528), !dbg !3441
  %1535 = bitcast {} addrspace(10)* %1534 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)*, !dbg !3441
  br label %loop.i690, !dbg !3441

loop.i690:                                        ; preds = %loop.i690, %zeroType.270.exit
  %1536 = phi i64 [ 0, %zeroType.270.exit ], [ %1537, %loop.i690 ], !dbg !3441
  %1537 = add i64 %1536, 1, !dbg !3441
  %1538 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1535, i64 %1536, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1538, align 8, !dbg !3441
  %1539 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1535, i64 %1536, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1539, align 8, !dbg !3441
  %1540 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1535, i64 %1536, i32 3, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1540, align 8, !dbg !3441
  %1541 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1535, i64 %1536, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1541, align 8, !dbg !3441
  %1542 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1535, i64 %1536, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1542, align 8, !dbg !3441
  %1543 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1535, i64 %1536, i32 8, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1543, align 8, !dbg !3441
  %1544 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1535, i64 %1536, i32 0, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1544, align 8, !dbg !3441
  %1545 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1535, i64 %1536, i32 0, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1545, align 8, !dbg !3441
  %1546 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1535, i64 %1536, i32 0, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1546, align 8, !dbg !3441
  %1547 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1535, i64 %1536, i32 0, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1547, align 8, !dbg !3441
  %1548 = icmp eq i64 %1537, %730, !dbg !3441
  br i1 %1548, label %zeroType.274.exit, label %loop.i690, !dbg !3441

zeroType.274.exit:                                ; preds = %loop.i690
  %subcache490_malloccache = bitcast {} addrspace(10)* %1534 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)*, !dbg !3441
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %subcache490_malloccache, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)** %subcache490_cache, align 8, !dbg !3441, !invariant.group !3560
  %1549 = mul nuw i64 %730, 8, !dbg !3441
  %1550 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1551 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1550, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1552 = bitcast {}*** %165 to {}**, !dbg !3441
  %1553 = getelementptr inbounds {}*, {}** %1552, i64 -14, !dbg !3441
  %1554 = getelementptr inbounds {}*, {}** %1553, i64 16, !dbg !3441
  %1555 = bitcast {}** %1554 to i8**, !dbg !3441
  %1556 = load i8*, i8** %1555, align 8, !dbg !3441
  %1557 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1553, i64 %1549, {} addrspace(10)* %1551), !dbg !3441
  %1558 = bitcast {} addrspace(10)* %1557 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i691, !dbg !3441

loop.i691:                                        ; preds = %loop.i691, %zeroType.274.exit
  %1559 = phi i64 [ 0, %zeroType.274.exit ], [ %1560, %loop.i691 ], !dbg !3441
  %1560 = add i64 %1559, 1, !dbg !3441
  %1561 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1558, i64 %1559, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1561, align 8, !dbg !3441
  %1562 = icmp eq i64 %1560, %730, !dbg !3441
  br i1 %1562, label %zeroType.278.exit, label %loop.i691, !dbg !3441

zeroType.278.exit:                                ; preds = %loop.i691
  %_malloccache494 = bitcast {} addrspace(10)* %1557 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache494, {} addrspace(10)* addrspace(10)** %_cache493, align 8, !dbg !3441, !invariant.group !3561
  %1563 = mul nuw i64 %730, 264, !dbg !3441
  %1564 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1565 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1564, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4373995728 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1566 = bitcast {}*** %161 to {}**, !dbg !3441
  %1567 = getelementptr inbounds {}*, {}** %1566, i64 -14, !dbg !3441
  %1568 = getelementptr inbounds {}*, {}** %1567, i64 16, !dbg !3441
  %1569 = bitcast {}** %1568 to i8**, !dbg !3441
  %1570 = load i8*, i8** %1569, align 8, !dbg !3441
  %1571 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1567, i64 %1563, {} addrspace(10)* %1565), !dbg !3441
  %1572 = bitcast {} addrspace(10)* %1571 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3441
  br label %loop.i692, !dbg !3441

loop.i692:                                        ; preds = %loop.i692, %zeroType.278.exit
  %1573 = phi i64 [ 0, %zeroType.278.exit ], [ %1574, %loop.i692 ], !dbg !3441
  %1574 = add i64 %1573, 1, !dbg !3441
  %1575 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1572, i64 %1573, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1575, align 8, !dbg !3441
  %1576 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1572, i64 %1573, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1576, align 8, !dbg !3441
  %1577 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1572, i64 %1573, i32 0, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1577, align 8, !dbg !3441
  %1578 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1572, i64 %1573, i32 0, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1578, align 8, !dbg !3441
  %1579 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1572, i64 %1573, i32 0, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1579, align 8, !dbg !3441
  %1580 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1572, i64 %1573, i32 0, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1580, align 8, !dbg !3441
  %1581 = icmp eq i64 %1574, %730, !dbg !3441
  br i1 %1581, label %zeroType.282.exit, label %loop.i692, !dbg !3441

zeroType.282.exit:                                ; preds = %loop.i692
  %_augmented426_malloccache = bitcast {} addrspace(10)* %1571 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3441
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %_augmented426_malloccache, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented426_cache, align 8, !dbg !3441, !invariant.group !3562
  %1582 = mul nuw i64 %730, 8, !dbg !3441
  %1583 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1584 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1583, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1585 = bitcast {}*** %157 to {}**, !dbg !3441
  %1586 = getelementptr inbounds {}*, {}** %1585, i64 -14, !dbg !3441
  %1587 = getelementptr inbounds {}*, {}** %1586, i64 16, !dbg !3441
  %1588 = bitcast {}** %1587 to i8**, !dbg !3441
  %1589 = load i8*, i8** %1588, align 8, !dbg !3441
  %1590 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1586, i64 %1582, {} addrspace(10)* %1584), !dbg !3441
  %1591 = bitcast {} addrspace(10)* %1590 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i693, !dbg !3441

loop.i693:                                        ; preds = %loop.i693, %zeroType.282.exit
  %1592 = phi i64 [ 0, %zeroType.282.exit ], [ %1593, %loop.i693 ], !dbg !3441
  %1593 = add i64 %1592, 1, !dbg !3441
  %1594 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1591, i64 %1592, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1594, align 8, !dbg !3441
  %1595 = icmp eq i64 %1593, %730, !dbg !3441
  br i1 %1595, label %zeroType.286.exit, label %loop.i693, !dbg !3441

zeroType.286.exit:                                ; preds = %loop.i693
  %_malloccache498 = bitcast {} addrspace(10)* %1590 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache498, {} addrspace(10)* addrspace(10)** %_cache497, align 8, !dbg !3441, !invariant.group !3563
  %1596 = mul nuw i64 %730, 8, !dbg !3441
  %1597 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1598 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1597, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1599 = bitcast {}*** %153 to {}**, !dbg !3441
  %1600 = getelementptr inbounds {}*, {}** %1599, i64 -14, !dbg !3441
  %1601 = getelementptr inbounds {}*, {}** %1600, i64 16, !dbg !3441
  %1602 = bitcast {}** %1601 to i8**, !dbg !3441
  %1603 = load i8*, i8** %1602, align 8, !dbg !3441
  %1604 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1600, i64 %1596, {} addrspace(10)* %1598), !dbg !3441
  %1605 = bitcast {} addrspace(10)* %1604 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i694, !dbg !3441

loop.i694:                                        ; preds = %loop.i694, %zeroType.286.exit
  %1606 = phi i64 [ 0, %zeroType.286.exit ], [ %1607, %loop.i694 ], !dbg !3441
  %1607 = add i64 %1606, 1, !dbg !3441
  %1608 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1605, i64 %1606, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1608, align 8, !dbg !3441
  %1609 = icmp eq i64 %1607, %730, !dbg !3441
  br i1 %1609, label %zeroType.290.exit, label %loop.i694, !dbg !3441

zeroType.290.exit:                                ; preds = %loop.i694
  %"'ip_phi60_malloccache" = bitcast {} addrspace(10)* %1604 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ip_phi60_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi60_cache", align 8, !dbg !3441, !invariant.group !3564
  %1610 = mul nuw i64 %730, 64, !dbg !3441
  %1611 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1612 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1611, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6229932688 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1613 = bitcast {}*** %149 to {}**, !dbg !3441
  %1614 = getelementptr inbounds {}*, {}** %1613, i64 -14, !dbg !3441
  %1615 = getelementptr inbounds {}*, {}** %1614, i64 16, !dbg !3441
  %1616 = bitcast {}** %1615 to i8**, !dbg !3441
  %1617 = load i8*, i8** %1616, align 8, !dbg !3441
  %1618 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1614, i64 %1610, {} addrspace(10)* %1612), !dbg !3441
  %1619 = bitcast {} addrspace(10)* %1618 to { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, !dbg !3441
  br label %loop.i695, !dbg !3441

loop.i695:                                        ; preds = %loop.i695, %zeroType.290.exit
  %1620 = phi i64 [ 0, %zeroType.290.exit ], [ %1621, %loop.i695 ], !dbg !3441
  %1621 = add i64 %1620, 1, !dbg !3441
  %1622 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1619, i64 %1620, i32 0, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1622, align 8, !dbg !3441
  %1623 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1619, i64 %1620, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1623, align 8, !dbg !3441
  %1624 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1619, i64 %1620, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1624, align 8, !dbg !3441
  %1625 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1619, i64 %1620, i32 3, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1625, align 8, !dbg !3441
  %1626 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1619, i64 %1620, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1626, align 8, !dbg !3441
  %1627 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1619, i64 %1620, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1627, align 8, !dbg !3441
  %1628 = icmp eq i64 %1621, %730, !dbg !3441
  br i1 %1628, label %zeroType.294.exit, label %loop.i695, !dbg !3441

zeroType.294.exit:                                ; preds = %loop.i695
  %subcache502_malloccache = bitcast {} addrspace(10)* %1618 to { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, !dbg !3441
  store { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %subcache502_malloccache, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache502_cache, align 8, !dbg !3441, !invariant.group !3565
  %1629 = mul nuw i64 %730, 8, !dbg !3441
  %1630 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1631 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1630, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1632 = bitcast {}*** %145 to {}**, !dbg !3441
  %1633 = getelementptr inbounds {}*, {}** %1632, i64 -14, !dbg !3441
  %1634 = getelementptr inbounds {}*, {}** %1633, i64 16, !dbg !3441
  %1635 = bitcast {}** %1634 to i8**, !dbg !3441
  %1636 = load i8*, i8** %1635, align 8, !dbg !3441
  %1637 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1633, i64 %1629, {} addrspace(10)* %1631), !dbg !3441
  %1638 = bitcast {} addrspace(10)* %1637 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i696, !dbg !3441

loop.i696:                                        ; preds = %loop.i696, %zeroType.294.exit
  %1639 = phi i64 [ 0, %zeroType.294.exit ], [ %1640, %loop.i696 ], !dbg !3441
  %1640 = add i64 %1639, 1, !dbg !3441
  %1641 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1638, i64 %1639, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1641, align 8, !dbg !3441
  %1642 = icmp eq i64 %1640, %730, !dbg !3441
  br i1 %1642, label %zeroType.298.exit, label %loop.i696, !dbg !3441

zeroType.298.exit:                                ; preds = %loop.i696
  %_malloccache506 = bitcast {} addrspace(10)* %1637 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache506, {} addrspace(10)* addrspace(10)** %_cache505, align 8, !dbg !3441, !invariant.group !3566
  %1643 = mul nuw i64 %730, 8, !dbg !3441
  %1644 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1645 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1644, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1646 = bitcast {}*** %141 to {}**, !dbg !3441
  %1647 = getelementptr inbounds {}*, {}** %1646, i64 -14, !dbg !3441
  %1648 = getelementptr inbounds {}*, {}** %1647, i64 16, !dbg !3441
  %1649 = bitcast {}** %1648 to i8**, !dbg !3441
  %1650 = load i8*, i8** %1649, align 8, !dbg !3441
  %1651 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1647, i64 %1643, {} addrspace(10)* %1645), !dbg !3441
  %1652 = bitcast {} addrspace(10)* %1651 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i697, !dbg !3441

loop.i697:                                        ; preds = %loop.i697, %zeroType.298.exit
  %1653 = phi i64 [ 0, %zeroType.298.exit ], [ %1654, %loop.i697 ], !dbg !3441
  %1654 = add i64 %1653, 1, !dbg !3441
  %1655 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1652, i64 %1653, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1655, align 8, !dbg !3441
  %1656 = icmp eq i64 %1654, %730, !dbg !3441
  br i1 %1656, label %zeroType.302.exit, label %loop.i697, !dbg !3441

zeroType.302.exit:                                ; preds = %loop.i697
  %"'mi59_malloccache" = bitcast {} addrspace(10)* %1651 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'mi59_malloccache", {} addrspace(10)* addrspace(10)** %"'mi59_cache", align 8, !dbg !3441, !invariant.group !3567
  %1657 = mul nuw i64 %730, 8, !dbg !3441
  %1658 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1659 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1658, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1660 = bitcast {}*** %137 to {}**, !dbg !3441
  %1661 = getelementptr inbounds {}*, {}** %1660, i64 -14, !dbg !3441
  %1662 = getelementptr inbounds {}*, {}** %1661, i64 16, !dbg !3441
  %1663 = bitcast {}** %1662 to i8**, !dbg !3441
  %1664 = load i8*, i8** %1663, align 8, !dbg !3441
  %1665 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1661, i64 %1657, {} addrspace(10)* %1659), !dbg !3441
  %1666 = bitcast {} addrspace(10)* %1665 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i698, !dbg !3441

loop.i698:                                        ; preds = %loop.i698, %zeroType.302.exit
  %1667 = phi i64 [ 0, %zeroType.302.exit ], [ %1668, %loop.i698 ], !dbg !3441
  %1668 = add i64 %1667, 1, !dbg !3441
  %1669 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1666, i64 %1667, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1669, align 8, !dbg !3441
  %1670 = icmp eq i64 %1668, %730, !dbg !3441
  br i1 %1670, label %zeroType.306.exit, label %loop.i698, !dbg !3441

zeroType.306.exit:                                ; preds = %loop.i698
  %_malloccache510 = bitcast {} addrspace(10)* %1665 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache510, {} addrspace(10)* addrspace(10)** %_cache509, align 8, !dbg !3441, !invariant.group !3568
  %1671 = mul nuw i64 %730, 248, !dbg !3441
  %1672 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1673 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1672, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11237993040 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1674 = bitcast {}*** %132 to {}**, !dbg !3441
  %1675 = getelementptr inbounds {}*, {}** %1674, i64 -14, !dbg !3441
  %1676 = getelementptr inbounds {}*, {}** %1675, i64 16, !dbg !3441
  %1677 = bitcast {}** %1676 to i8**, !dbg !3441
  %1678 = load i8*, i8** %1677, align 8, !dbg !3441
  %1679 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1675, i64 %1671, {} addrspace(10)* %1673), !dbg !3441
  %1680 = bitcast {} addrspace(10)* %1679 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3441
  br label %loop.i699, !dbg !3441

loop.i699:                                        ; preds = %loop.i699, %zeroType.306.exit
  %1681 = phi i64 [ 0, %zeroType.306.exit ], [ %1682, %loop.i699 ], !dbg !3441
  %1682 = add i64 %1681, 1, !dbg !3441
  %1683 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1680, i64 %1681, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1683, align 8, !dbg !3441
  %1684 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1680, i64 %1681, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1684, align 8, !dbg !3441
  %1685 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1680, i64 %1681, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1685, align 8, !dbg !3441
  %1686 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1680, i64 %1681, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1686, align 8, !dbg !3441
  %1687 = icmp eq i64 %1682, %730, !dbg !3441
  br i1 %1687, label %zeroType.311.exit, label %loop.i699, !dbg !3441

zeroType.311.exit:                                ; preds = %loop.i699
  %subcache513_malloccache = bitcast {} addrspace(10)* %1679 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3441
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %subcache513_malloccache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache513_cache, align 8, !dbg !3441, !invariant.group !3569
  %1688 = mul nuw i64 %730, 8, !dbg !3441
  %1689 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1690 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1689, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1691 = bitcast {}*** %128 to {}**, !dbg !3441
  %1692 = getelementptr inbounds {}*, {}** %1691, i64 -14, !dbg !3441
  %1693 = getelementptr inbounds {}*, {}** %1692, i64 16, !dbg !3441
  %1694 = bitcast {}** %1693 to i8**, !dbg !3441
  %1695 = load i8*, i8** %1694, align 8, !dbg !3441
  %1696 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1692, i64 %1688, {} addrspace(10)* %1690), !dbg !3441
  %1697 = bitcast {} addrspace(10)* %1696 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i700, !dbg !3441

loop.i700:                                        ; preds = %loop.i700, %zeroType.311.exit
  %1698 = phi i64 [ 0, %zeroType.311.exit ], [ %1699, %loop.i700 ], !dbg !3441
  %1699 = add i64 %1698, 1, !dbg !3441
  %1700 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1697, i64 %1698, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1700, align 8, !dbg !3441
  %1701 = icmp eq i64 %1699, %730, !dbg !3441
  br i1 %1701, label %zeroType.315.exit, label %loop.i700, !dbg !3441

zeroType.315.exit:                                ; preds = %loop.i700
  %_malloccache519 = bitcast {} addrspace(10)* %1696 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache519, {} addrspace(10)* addrspace(10)** %_cache518, align 8, !dbg !3441, !invariant.group !3570
  %1702 = mul nuw i64 %730, 8, !dbg !3441
  %1703 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1704 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1703, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1705 = bitcast {}*** %124 to {}**, !dbg !3441
  %1706 = getelementptr inbounds {}*, {}** %1705, i64 -14, !dbg !3441
  %1707 = getelementptr inbounds {}*, {}** %1706, i64 16, !dbg !3441
  %1708 = bitcast {}** %1707 to i8**, !dbg !3441
  %1709 = load i8*, i8** %1708, align 8, !dbg !3441
  %1710 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1706, i64 %1702, {} addrspace(10)* %1704), !dbg !3441
  %1711 = bitcast {} addrspace(10)* %1710 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i701, !dbg !3441

loop.i701:                                        ; preds = %loop.i701, %zeroType.315.exit
  %1712 = phi i64 [ 0, %zeroType.315.exit ], [ %1713, %loop.i701 ], !dbg !3441
  %1713 = add i64 %1712, 1, !dbg !3441
  %1714 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1711, i64 %1712, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1714, align 8, !dbg !3441
  %1715 = icmp eq i64 %1713, %730, !dbg !3441
  br i1 %1715, label %zeroType.319.exit, label %loop.i701, !dbg !3441

zeroType.319.exit:                                ; preds = %loop.i701
  %"'mi73_malloccache" = bitcast {} addrspace(10)* %1710 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'mi73_malloccache", {} addrspace(10)* addrspace(10)** %"'mi73_cache", align 8, !dbg !3441, !invariant.group !3571
  %1716 = mul nuw i64 %730, 48, !dbg !3441
  %1717 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1718 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1717, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6231187728 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1719 = bitcast {}*** %120 to {}**, !dbg !3441
  %1720 = getelementptr inbounds {}*, {}** %1719, i64 -14, !dbg !3441
  %1721 = getelementptr inbounds {}*, {}** %1720, i64 16, !dbg !3441
  %1722 = bitcast {}** %1721 to i8**, !dbg !3441
  %1723 = load i8*, i8** %1722, align 8, !dbg !3441
  %1724 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1720, i64 %1716, {} addrspace(10)* %1718), !dbg !3441
  %1725 = bitcast {} addrspace(10)* %1724 to { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)*, !dbg !3441
  br label %loop.i702, !dbg !3441

loop.i702:                                        ; preds = %loop.i702, %zeroType.319.exit
  %1726 = phi i64 [ 0, %zeroType.319.exit ], [ %1727, %loop.i702 ], !dbg !3441
  %1727 = add i64 %1726, 1, !dbg !3441
  %1728 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %1725, i64 %1726, i32 0, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1728, align 8, !dbg !3441
  %1729 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %1725, i64 %1726, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1729, align 8, !dbg !3441
  %1730 = icmp eq i64 %1727, %730, !dbg !3441
  br i1 %1730, label %zeroType.325.exit, label %loop.i702, !dbg !3441

zeroType.325.exit:                                ; preds = %loop.i702
  %_augmented525_malloccache = bitcast {} addrspace(10)* %1724 to { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)*, !dbg !3441
  store { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %_augmented525_malloccache, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)** %_augmented525_cache, align 8, !dbg !3441, !invariant.group !3572
  %1731 = mul nuw i64 %730, 8, !dbg !3441
  %1732 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1733 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1732, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1734 = bitcast {}*** %116 to {}**, !dbg !3441
  %1735 = getelementptr inbounds {}*, {}** %1734, i64 -14, !dbg !3441
  %1736 = getelementptr inbounds {}*, {}** %1735, i64 16, !dbg !3441
  %1737 = bitcast {}** %1736 to i8**, !dbg !3441
  %1738 = load i8*, i8** %1737, align 8, !dbg !3441
  %1739 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1735, i64 %1731, {} addrspace(10)* %1733), !dbg !3441
  %1740 = bitcast {} addrspace(10)* %1739 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i703, !dbg !3441

loop.i703:                                        ; preds = %loop.i703, %zeroType.325.exit
  %1741 = phi i64 [ 0, %zeroType.325.exit ], [ %1742, %loop.i703 ], !dbg !3441
  %1742 = add i64 %1741, 1, !dbg !3441
  %1743 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1740, i64 %1741, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1743, align 8, !dbg !3441
  %1744 = icmp eq i64 %1742, %730, !dbg !3441
  br i1 %1744, label %zeroType.334.exit, label %loop.i703, !dbg !3441

zeroType.334.exit:                                ; preds = %loop.i703
  %_malloccache556 = bitcast {} addrspace(10)* %1739 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache556, {} addrspace(10)* addrspace(10)** %_cache555, align 8, !dbg !3441, !invariant.group !3573
  %1745 = mul nuw i64 %730, 8, !dbg !3441
  %1746 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1747 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1746, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1748 = bitcast {}*** %111 to {}**, !dbg !3441
  %1749 = getelementptr inbounds {}*, {}** %1748, i64 -14, !dbg !3441
  %1750 = getelementptr inbounds {}*, {}** %1749, i64 16, !dbg !3441
  %1751 = bitcast {}** %1750 to i8**, !dbg !3441
  %1752 = load i8*, i8** %1751, align 8, !dbg !3441
  %1753 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1749, i64 %1745, {} addrspace(10)* %1747), !dbg !3441
  %1754 = bitcast {} addrspace(10)* %1753 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i704, !dbg !3441

loop.i704:                                        ; preds = %loop.i704, %zeroType.334.exit
  %1755 = phi i64 [ 0, %zeroType.334.exit ], [ %1756, %loop.i704 ], !dbg !3441
  %1756 = add i64 %1755, 1, !dbg !3441
  %1757 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1754, i64 %1755, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1757, align 8, !dbg !3441
  %1758 = icmp eq i64 %1756, %730, !dbg !3441
  br i1 %1758, label %zeroType.338.exit, label %loop.i704, !dbg !3441

zeroType.338.exit:                                ; preds = %loop.i704
  %_malloccache564 = bitcast {} addrspace(10)* %1753 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache564, {} addrspace(10)* addrspace(10)** %_cache563, align 8, !dbg !3441, !invariant.group !3574
  %1759 = mul nuw i64 %730, 8, !dbg !3441
  %1760 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1761 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1760, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1762 = bitcast {}*** %107 to {}**, !dbg !3441
  %1763 = getelementptr inbounds {}*, {}** %1762, i64 -14, !dbg !3441
  %1764 = getelementptr inbounds {}*, {}** %1763, i64 16, !dbg !3441
  %1765 = bitcast {}** %1764 to i8**, !dbg !3441
  %1766 = load i8*, i8** %1765, align 8, !dbg !3441
  %1767 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1763, i64 %1759, {} addrspace(10)* %1761), !dbg !3441
  %1768 = bitcast {} addrspace(10)* %1767 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i705, !dbg !3441

loop.i705:                                        ; preds = %loop.i705, %zeroType.338.exit
  %1769 = phi i64 [ 0, %zeroType.338.exit ], [ %1770, %loop.i705 ], !dbg !3441
  %1770 = add i64 %1769, 1, !dbg !3441
  %1771 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1768, i64 %1769, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1771, align 8, !dbg !3441
  %1772 = icmp eq i64 %1770, %730, !dbg !3441
  br i1 %1772, label %zeroType.342.exit, label %loop.i705, !dbg !3441

zeroType.342.exit:                                ; preds = %loop.i705
  %"'ip_phi70_malloccache" = bitcast {} addrspace(10)* %1767 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ip_phi70_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi70_cache", align 8, !dbg !3441, !invariant.group !3575
  %1773 = mul nuw i64 %730, 8, !dbg !3441
  %1774 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1775 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1774, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1776 = bitcast {}*** %103 to {}**, !dbg !3441
  %1777 = getelementptr inbounds {}*, {}** %1776, i64 -14, !dbg !3441
  %1778 = getelementptr inbounds {}*, {}** %1777, i64 16, !dbg !3441
  %1779 = bitcast {}** %1778 to i8**, !dbg !3441
  %1780 = load i8*, i8** %1779, align 8, !dbg !3441
  %1781 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1777, i64 %1773, {} addrspace(10)* %1775), !dbg !3441
  %1782 = bitcast {} addrspace(10)* %1781 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i706, !dbg !3441

loop.i706:                                        ; preds = %loop.i706, %zeroType.342.exit
  %1783 = phi i64 [ 0, %zeroType.342.exit ], [ %1784, %loop.i706 ], !dbg !3441
  %1784 = add i64 %1783, 1, !dbg !3441
  %1785 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1782, i64 %1783, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1785, align 8, !dbg !3441
  %1786 = icmp eq i64 %1784, %730, !dbg !3441
  br i1 %1786, label %zeroType.346.exit, label %loop.i706, !dbg !3441

zeroType.346.exit:                                ; preds = %loop.i706
  %_malloccache568 = bitcast {} addrspace(10)* %1781 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache568, {} addrspace(10)* addrspace(10)** %_cache567, align 8, !dbg !3441, !invariant.group !3576
  %1787 = mul nuw i64 %730, 8, !dbg !3441
  %1788 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1789 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1788, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1790 = bitcast {}*** %98 to {}**, !dbg !3441
  %1791 = getelementptr inbounds {}*, {}** %1790, i64 -14, !dbg !3441
  %1792 = getelementptr inbounds {}*, {}** %1791, i64 16, !dbg !3441
  %1793 = bitcast {}** %1792 to i8**, !dbg !3441
  %1794 = load i8*, i8** %1793, align 8, !dbg !3441
  %1795 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1791, i64 %1787, {} addrspace(10)* %1789), !dbg !3441
  %1796 = bitcast {} addrspace(10)* %1795 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i707, !dbg !3441

loop.i707:                                        ; preds = %loop.i707, %zeroType.346.exit
  %1797 = phi i64 [ 0, %zeroType.346.exit ], [ %1798, %loop.i707 ], !dbg !3441
  %1798 = add i64 %1797, 1, !dbg !3441
  %1799 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1796, i64 %1797, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1799, align 8, !dbg !3441
  %1800 = icmp eq i64 %1798, %730, !dbg !3441
  br i1 %1800, label %zeroType.350.exit, label %loop.i707, !dbg !3441

zeroType.350.exit:                                ; preds = %loop.i707
  %_malloccache575 = bitcast {} addrspace(10)* %1795 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache575, {} addrspace(10)* addrspace(10)** %_cache574, align 8, !dbg !3441, !invariant.group !3577
  %1801 = mul nuw i64 %730, 8, !dbg !3441
  %1802 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1803 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1802, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1804 = bitcast {}*** %94 to {}**, !dbg !3441
  %1805 = getelementptr inbounds {}*, {}** %1804, i64 -14, !dbg !3441
  %1806 = getelementptr inbounds {}*, {}** %1805, i64 16, !dbg !3441
  %1807 = bitcast {}** %1806 to i8**, !dbg !3441
  %1808 = load i8*, i8** %1807, align 8, !dbg !3441
  %1809 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1805, i64 %1801, {} addrspace(10)* %1803), !dbg !3441
  %1810 = bitcast {} addrspace(10)* %1809 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i708, !dbg !3441

loop.i708:                                        ; preds = %loop.i708, %zeroType.350.exit
  %1811 = phi i64 [ 0, %zeroType.350.exit ], [ %1812, %loop.i708 ], !dbg !3441
  %1812 = add i64 %1811, 1, !dbg !3441
  %1813 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1810, i64 %1811, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1813, align 8, !dbg !3441
  %1814 = icmp eq i64 %1812, %730, !dbg !3441
  br i1 %1814, label %zeroType.354.exit, label %loop.i708, !dbg !3441

zeroType.354.exit:                                ; preds = %loop.i708
  %"'ip_phi69_malloccache" = bitcast {} addrspace(10)* %1809 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ip_phi69_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi69_cache", align 8, !dbg !3441, !invariant.group !3578
  %1815 = mul nuw i64 %730, 8, !dbg !3441
  %1816 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1817 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1816, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1818 = bitcast {}*** %90 to {}**, !dbg !3441
  %1819 = getelementptr inbounds {}*, {}** %1818, i64 -14, !dbg !3441
  %1820 = getelementptr inbounds {}*, {}** %1819, i64 16, !dbg !3441
  %1821 = bitcast {}** %1820 to i8**, !dbg !3441
  %1822 = load i8*, i8** %1821, align 8, !dbg !3441
  %1823 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1819, i64 %1815, {} addrspace(10)* %1817), !dbg !3441
  %1824 = bitcast {} addrspace(10)* %1823 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i709, !dbg !3441

loop.i709:                                        ; preds = %loop.i709, %zeroType.354.exit
  %1825 = phi i64 [ 0, %zeroType.354.exit ], [ %1826, %loop.i709 ], !dbg !3441
  %1826 = add i64 %1825, 1, !dbg !3441
  %1827 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1824, i64 %1825, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1827, align 8, !dbg !3441
  %1828 = icmp eq i64 %1826, %730, !dbg !3441
  br i1 %1828, label %zeroType.358.exit, label %loop.i709, !dbg !3441

zeroType.358.exit:                                ; preds = %loop.i709
  %_malloccache579 = bitcast {} addrspace(10)* %1823 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache579, {} addrspace(10)* addrspace(10)** %_cache578, align 8, !dbg !3441, !invariant.group !3579
  %1829 = mul nuw i64 %730, 8, !dbg !3441
  %1830 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1831 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1830, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1832 = bitcast {}*** %85 to {}**, !dbg !3441
  %1833 = getelementptr inbounds {}*, {}** %1832, i64 -14, !dbg !3441
  %1834 = getelementptr inbounds {}*, {}** %1833, i64 16, !dbg !3441
  %1835 = bitcast {}** %1834 to i8**, !dbg !3441
  %1836 = load i8*, i8** %1835, align 8, !dbg !3441
  %1837 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1833, i64 %1829, {} addrspace(10)* %1831), !dbg !3441
  %1838 = bitcast {} addrspace(10)* %1837 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i710, !dbg !3441

loop.i710:                                        ; preds = %loop.i710, %zeroType.358.exit
  %1839 = phi i64 [ 0, %zeroType.358.exit ], [ %1840, %loop.i710 ], !dbg !3441
  %1840 = add i64 %1839, 1, !dbg !3441
  %1841 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1838, i64 %1839, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1841, align 8, !dbg !3441
  %1842 = icmp eq i64 %1840, %730, !dbg !3441
  br i1 %1842, label %zeroType.362.exit, label %loop.i710, !dbg !3441

zeroType.362.exit:                                ; preds = %loop.i710
  %_malloccache586 = bitcast {} addrspace(10)* %1837 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache586, {} addrspace(10)* addrspace(10)** %_cache585, align 8, !dbg !3441, !invariant.group !3580
  %1843 = mul nuw i64 %730, 8, !dbg !3441
  %1844 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1845 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1844, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1846 = bitcast {}*** %81 to {}**, !dbg !3441
  %1847 = getelementptr inbounds {}*, {}** %1846, i64 -14, !dbg !3441
  %1848 = getelementptr inbounds {}*, {}** %1847, i64 16, !dbg !3441
  %1849 = bitcast {}** %1848 to i8**, !dbg !3441
  %1850 = load i8*, i8** %1849, align 8, !dbg !3441
  %1851 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1847, i64 %1843, {} addrspace(10)* %1845), !dbg !3441
  %1852 = bitcast {} addrspace(10)* %1851 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i711, !dbg !3441

loop.i711:                                        ; preds = %loop.i711, %zeroType.362.exit
  %1853 = phi i64 [ 0, %zeroType.362.exit ], [ %1854, %loop.i711 ], !dbg !3441
  %1854 = add i64 %1853, 1, !dbg !3441
  %1855 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1852, i64 %1853, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1855, align 8, !dbg !3441
  %1856 = icmp eq i64 %1854, %730, !dbg !3441
  br i1 %1856, label %zeroType.366.exit, label %loop.i711, !dbg !3441

zeroType.366.exit:                                ; preds = %loop.i711
  %"'ip_phi68_malloccache" = bitcast {} addrspace(10)* %1851 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ip_phi68_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi68_cache", align 8, !dbg !3441, !invariant.group !3581
  %1857 = mul nuw i64 %730, 8, !dbg !3441
  %1858 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1859 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1858, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1860 = bitcast {}*** %77 to {}**, !dbg !3441
  %1861 = getelementptr inbounds {}*, {}** %1860, i64 -14, !dbg !3441
  %1862 = getelementptr inbounds {}*, {}** %1861, i64 16, !dbg !3441
  %1863 = bitcast {}** %1862 to i8**, !dbg !3441
  %1864 = load i8*, i8** %1863, align 8, !dbg !3441
  %1865 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1861, i64 %1857, {} addrspace(10)* %1859), !dbg !3441
  %1866 = bitcast {} addrspace(10)* %1865 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i712, !dbg !3441

loop.i712:                                        ; preds = %loop.i712, %zeroType.366.exit
  %1867 = phi i64 [ 0, %zeroType.366.exit ], [ %1868, %loop.i712 ], !dbg !3441
  %1868 = add i64 %1867, 1, !dbg !3441
  %1869 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1866, i64 %1867, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1869, align 8, !dbg !3441
  %1870 = icmp eq i64 %1868, %730, !dbg !3441
  br i1 %1870, label %zeroType.370.exit, label %loop.i712, !dbg !3441

zeroType.370.exit:                                ; preds = %loop.i712
  %_malloccache590 = bitcast {} addrspace(10)* %1865 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache590, {} addrspace(10)* addrspace(10)** %_cache589, align 8, !dbg !3441, !invariant.group !3582
  %1871 = mul nuw i64 %730, 8, !dbg !3441
  %1872 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1873 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1872, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1874 = bitcast {}*** %72 to {}**, !dbg !3441
  %1875 = getelementptr inbounds {}*, {}** %1874, i64 -14, !dbg !3441
  %1876 = getelementptr inbounds {}*, {}** %1875, i64 16, !dbg !3441
  %1877 = bitcast {}** %1876 to i8**, !dbg !3441
  %1878 = load i8*, i8** %1877, align 8, !dbg !3441
  %1879 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1875, i64 %1871, {} addrspace(10)* %1873), !dbg !3441
  %1880 = bitcast {} addrspace(10)* %1879 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i713, !dbg !3441

loop.i713:                                        ; preds = %loop.i713, %zeroType.370.exit
  %1881 = phi i64 [ 0, %zeroType.370.exit ], [ %1882, %loop.i713 ], !dbg !3441
  %1882 = add i64 %1881, 1, !dbg !3441
  %1883 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1880, i64 %1881, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1883, align 8, !dbg !3441
  %1884 = icmp eq i64 %1882, %730, !dbg !3441
  br i1 %1884, label %zeroType.374.exit, label %loop.i713, !dbg !3441

zeroType.374.exit:                                ; preds = %loop.i713
  %_malloccache597 = bitcast {} addrspace(10)* %1879 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache597, {} addrspace(10)* addrspace(10)** %_cache596, align 8, !dbg !3441, !invariant.group !3583
  %1885 = mul nuw i64 %730, 8, !dbg !3441
  %1886 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1887 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1886, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1888 = bitcast {}*** %68 to {}**, !dbg !3441
  %1889 = getelementptr inbounds {}*, {}** %1888, i64 -14, !dbg !3441
  %1890 = getelementptr inbounds {}*, {}** %1889, i64 16, !dbg !3441
  %1891 = bitcast {}** %1890 to i8**, !dbg !3441
  %1892 = load i8*, i8** %1891, align 8, !dbg !3441
  %1893 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1889, i64 %1885, {} addrspace(10)* %1887), !dbg !3441
  %1894 = bitcast {} addrspace(10)* %1893 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i714, !dbg !3441

loop.i714:                                        ; preds = %loop.i714, %zeroType.374.exit
  %1895 = phi i64 [ 0, %zeroType.374.exit ], [ %1896, %loop.i714 ], !dbg !3441
  %1896 = add i64 %1895, 1, !dbg !3441
  %1897 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1894, i64 %1895, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1897, align 8, !dbg !3441
  %1898 = icmp eq i64 %1896, %730, !dbg !3441
  br i1 %1898, label %zeroType.378.exit, label %loop.i714, !dbg !3441

zeroType.378.exit:                                ; preds = %loop.i714
  %"'ip_phi67_malloccache" = bitcast {} addrspace(10)* %1893 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ip_phi67_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi67_cache", align 8, !dbg !3441, !invariant.group !3584
  %1899 = mul nuw i64 %730, 8, !dbg !3441
  %1900 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1901 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1900, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1902 = bitcast {}*** %64 to {}**, !dbg !3441
  %1903 = getelementptr inbounds {}*, {}** %1902, i64 -14, !dbg !3441
  %1904 = getelementptr inbounds {}*, {}** %1903, i64 16, !dbg !3441
  %1905 = bitcast {}** %1904 to i8**, !dbg !3441
  %1906 = load i8*, i8** %1905, align 8, !dbg !3441
  %1907 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1903, i64 %1899, {} addrspace(10)* %1901), !dbg !3441
  %1908 = bitcast {} addrspace(10)* %1907 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i715, !dbg !3441

loop.i715:                                        ; preds = %loop.i715, %zeroType.378.exit
  %1909 = phi i64 [ 0, %zeroType.378.exit ], [ %1910, %loop.i715 ], !dbg !3441
  %1910 = add i64 %1909, 1, !dbg !3441
  %1911 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1908, i64 %1909, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1911, align 8, !dbg !3441
  %1912 = icmp eq i64 %1910, %730, !dbg !3441
  br i1 %1912, label %zeroType.382.exit, label %loop.i715, !dbg !3441

zeroType.382.exit:                                ; preds = %loop.i715
  %_malloccache601 = bitcast {} addrspace(10)* %1907 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache601, {} addrspace(10)* addrspace(10)** %_cache600, align 8, !dbg !3441, !invariant.group !3585
  %1913 = mul nuw i64 %730, 8, !dbg !3441
  %1914 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1915 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1914, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1916 = bitcast {}*** %59 to {}**, !dbg !3441
  %1917 = getelementptr inbounds {}*, {}** %1916, i64 -14, !dbg !3441
  %1918 = getelementptr inbounds {}*, {}** %1917, i64 16, !dbg !3441
  %1919 = bitcast {}** %1918 to i8**, !dbg !3441
  %1920 = load i8*, i8** %1919, align 8, !dbg !3441
  %1921 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1917, i64 %1913, {} addrspace(10)* %1915), !dbg !3441
  %1922 = bitcast {} addrspace(10)* %1921 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i716, !dbg !3441

loop.i716:                                        ; preds = %loop.i716, %zeroType.382.exit
  %1923 = phi i64 [ 0, %zeroType.382.exit ], [ %1924, %loop.i716 ], !dbg !3441
  %1924 = add i64 %1923, 1, !dbg !3441
  %1925 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1922, i64 %1923, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1925, align 8, !dbg !3441
  %1926 = icmp eq i64 %1924, %730, !dbg !3441
  br i1 %1926, label %zeroType.386.exit, label %loop.i716, !dbg !3441

zeroType.386.exit:                                ; preds = %loop.i716
  %box_malloccache = bitcast {} addrspace(10)* %1921 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %box_malloccache, {} addrspace(10)* addrspace(10)** %box_cache, align 8, !dbg !3441, !invariant.group !3586
  %1927 = mul nuw i64 %730, 8, !dbg !3441
  %1928 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1929 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1928, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1930 = bitcast {}*** %55 to {}**, !dbg !3441
  %1931 = getelementptr inbounds {}*, {}** %1930, i64 -14, !dbg !3441
  %1932 = getelementptr inbounds {}*, {}** %1931, i64 16, !dbg !3441
  %1933 = bitcast {}** %1932 to i8**, !dbg !3441
  %1934 = load i8*, i8** %1933, align 8, !dbg !3441
  %1935 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1931, i64 %1927, {} addrspace(10)* %1929), !dbg !3441
  %1936 = bitcast {} addrspace(10)* %1935 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i717, !dbg !3441

loop.i717:                                        ; preds = %loop.i717, %zeroType.386.exit
  %1937 = phi i64 [ 0, %zeroType.386.exit ], [ %1938, %loop.i717 ], !dbg !3441
  %1938 = add i64 %1937, 1, !dbg !3441
  %1939 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1936, i64 %1937, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1939, align 8, !dbg !3441
  %1940 = icmp eq i64 %1938, %730, !dbg !3441
  br i1 %1940, label %zeroType.390.exit, label %loop.i717, !dbg !3441

zeroType.390.exit:                                ; preds = %loop.i717
  %"box'mi_malloccache" = bitcast {} addrspace(10)* %1935 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"box'mi_malloccache", {} addrspace(10)* addrspace(10)** %"box'mi_cache", align 8, !dbg !3441, !invariant.group !3587
  %1941 = mul nuw i64 %730, 8, !dbg !3441
  %1942 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1943 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1942, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1944 = bitcast {}*** %51 to {}**, !dbg !3441
  %1945 = getelementptr inbounds {}*, {}** %1944, i64 -14, !dbg !3441
  %1946 = getelementptr inbounds {}*, {}** %1945, i64 16, !dbg !3441
  %1947 = bitcast {}** %1946 to i8**, !dbg !3441
  %1948 = load i8*, i8** %1947, align 8, !dbg !3441
  %1949 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1945, i64 %1941, {} addrspace(10)* %1943), !dbg !3441
  %1950 = bitcast {} addrspace(10)* %1949 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i718, !dbg !3441

loop.i718:                                        ; preds = %loop.i718, %zeroType.390.exit
  %1951 = phi i64 [ 0, %zeroType.390.exit ], [ %1952, %loop.i718 ], !dbg !3441
  %1952 = add i64 %1951, 1, !dbg !3441
  %1953 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1950, i64 %1951, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1953, align 8, !dbg !3441
  %1954 = icmp eq i64 %1952, %730, !dbg !3441
  br i1 %1954, label %zeroType.394.exit, label %loop.i718, !dbg !3441

zeroType.394.exit:                                ; preds = %loop.i718
  %_malloccache610 = bitcast {} addrspace(10)* %1949 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache610, {} addrspace(10)* addrspace(10)** %_cache609, align 8, !dbg !3441, !invariant.group !3588
  %1955 = mul nuw i64 %730, 8, !dbg !3441
  %1956 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1957 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1956, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1958 = bitcast {}*** %47 to {}**, !dbg !3441
  %1959 = getelementptr inbounds {}*, {}** %1958, i64 -14, !dbg !3441
  %1960 = getelementptr inbounds {}*, {}** %1959, i64 16, !dbg !3441
  %1961 = bitcast {}** %1960 to i8**, !dbg !3441
  %1962 = load i8*, i8** %1961, align 8, !dbg !3441
  %1963 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1959, i64 %1955, {} addrspace(10)* %1957), !dbg !3441
  %1964 = bitcast {} addrspace(10)* %1963 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i719, !dbg !3441

loop.i719:                                        ; preds = %loop.i719, %zeroType.394.exit
  %1965 = phi i64 [ 0, %zeroType.394.exit ], [ %1966, %loop.i719 ], !dbg !3441
  %1966 = add i64 %1965, 1, !dbg !3441
  %1967 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1964, i64 %1965, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1967, align 8, !dbg !3441
  %1968 = icmp eq i64 %1966, %730, !dbg !3441
  br i1 %1968, label %zeroType.398.exit, label %loop.i719, !dbg !3441

zeroType.398.exit:                                ; preds = %loop.i719
  %"'ip_phi66_malloccache" = bitcast {} addrspace(10)* %1963 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ip_phi66_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi66_cache", align 8, !dbg !3441, !invariant.group !3589
  %1969 = mul nuw i64 %730, 8, !dbg !3441
  %1970 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1971 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1970, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1972 = bitcast {}*** %43 to {}**, !dbg !3441
  %1973 = getelementptr inbounds {}*, {}** %1972, i64 -14, !dbg !3441
  %1974 = getelementptr inbounds {}*, {}** %1973, i64 16, !dbg !3441
  %1975 = bitcast {}** %1974 to i8**, !dbg !3441
  %1976 = load i8*, i8** %1975, align 8, !dbg !3441
  %1977 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1973, i64 %1969, {} addrspace(10)* %1971), !dbg !3441
  %1978 = bitcast {} addrspace(10)* %1977 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i720, !dbg !3441

loop.i720:                                        ; preds = %loop.i720, %zeroType.398.exit
  %1979 = phi i64 [ 0, %zeroType.398.exit ], [ %1980, %loop.i720 ], !dbg !3441
  %1980 = add i64 %1979, 1, !dbg !3441
  %1981 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1978, i64 %1979, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1981, align 8, !dbg !3441
  %1982 = icmp eq i64 %1980, %730, !dbg !3441
  br i1 %1982, label %zeroType.402.exit, label %loop.i720, !dbg !3441

zeroType.402.exit:                                ; preds = %loop.i720
  %_malloccache616 = bitcast {} addrspace(10)* %1977 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache616, {} addrspace(10)* addrspace(10)** %_cache615, align 8, !dbg !3441, !invariant.group !3590
  %1983 = mul nuw i64 %730, 8, !dbg !3441
  %1984 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1985 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1984, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %1986 = bitcast {}*** %38 to {}**, !dbg !3441
  %1987 = getelementptr inbounds {}*, {}** %1986, i64 -14, !dbg !3441
  %1988 = getelementptr inbounds {}*, {}** %1987, i64 16, !dbg !3441
  %1989 = bitcast {}** %1988 to i8**, !dbg !3441
  %1990 = load i8*, i8** %1989, align 8, !dbg !3441
  %1991 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1987, i64 %1983, {} addrspace(10)* %1985), !dbg !3441
  %1992 = bitcast {} addrspace(10)* %1991 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i721, !dbg !3441

loop.i721:                                        ; preds = %loop.i721, %zeroType.402.exit
  %1993 = phi i64 [ 0, %zeroType.402.exit ], [ %1994, %loop.i721 ], !dbg !3441
  %1994 = add i64 %1993, 1, !dbg !3441
  %1995 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1992, i64 %1993, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1995, align 8, !dbg !3441
  %1996 = icmp eq i64 %1994, %730, !dbg !3441
  br i1 %1996, label %zeroType.406.exit, label %loop.i721, !dbg !3441

zeroType.406.exit:                                ; preds = %loop.i721
  %_malloccache623 = bitcast {} addrspace(10)* %1991 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %_malloccache623, {} addrspace(10)* addrspace(10)** %_cache622, align 8, !dbg !3441, !invariant.group !3591
  %1997 = mul nuw i64 %730, 8, !dbg !3441
  %1998 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %1999 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1998, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6166850448 to {}*) to {} addrspace(10)*)), !dbg !3441
  %2000 = bitcast {}*** %34 to {}**, !dbg !3441
  %2001 = getelementptr inbounds {}*, {}** %2000, i64 -14, !dbg !3441
  %2002 = getelementptr inbounds {}*, {}** %2001, i64 16, !dbg !3441
  %2003 = bitcast {}** %2002 to i8**, !dbg !3441
  %2004 = load i8*, i8** %2003, align 8, !dbg !3441
  %2005 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %2001, i64 %1997, {} addrspace(10)* %1999), !dbg !3441
  %2006 = bitcast {} addrspace(10)* %2005 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  br label %loop.i722, !dbg !3441

loop.i722:                                        ; preds = %loop.i722, %zeroType.406.exit
  %2007 = phi i64 [ 0, %zeroType.406.exit ], [ %2008, %loop.i722 ], !dbg !3441
  %2008 = add i64 %2007, 1, !dbg !3441
  %2009 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2006, i64 %2007, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2009, align 8, !dbg !3441
  %2010 = icmp eq i64 %2008, %730, !dbg !3441
  br i1 %2010, label %zeroType.410.exit, label %loop.i722, !dbg !3441

zeroType.410.exit:                                ; preds = %loop.i722
  %"'ipl176_malloccache" = bitcast {} addrspace(10)* %2005 to {} addrspace(10)* addrspace(10)*, !dbg !3441
  store {} addrspace(10)* addrspace(10)* %"'ipl176_malloccache", {} addrspace(10)* addrspace(10)** %"'ipl176_cache", align 8, !dbg !3441, !invariant.group !3592
  %2011 = mul nuw i64 %730, 592, !dbg !3441
  %2012 = call {} addrspace(10)* @ijl_box_int64(i64 %730), !dbg !3441
  %2013 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726511264 to {}*) to {} addrspace(10)*), {} addrspace(10)* %2012, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6261217808 to {}*) to {} addrspace(10)*)), !dbg !3441
  %2014 = bitcast {}*** %29 to {}**, !dbg !3441
  %2015 = getelementptr inbounds {}*, {}** %2014, i64 -14, !dbg !3441
  %2016 = getelementptr inbounds {}*, {}** %2015, i64 16, !dbg !3441
  %2017 = bitcast {}** %2016 to i8**, !dbg !3441
  %2018 = load i8*, i8** %2017, align 8, !dbg !3441
  %2019 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %2015, i64 %2011, {} addrspace(10)* %2013), !dbg !3441
  %2020 = bitcast {} addrspace(10)* %2019 to { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)*, !dbg !3441
  br label %loop.i723, !dbg !3441

loop.i723:                                        ; preds = %loop.i723, %zeroType.410.exit
  %2021 = phi i64 [ 0, %zeroType.410.exit ], [ %2022, %loop.i723 ], !dbg !3441
  %2022 = add i64 %2021, 1, !dbg !3441
  %2023 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 0, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2023, align 8, !dbg !3441
  %2024 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2024, align 8, !dbg !3441
  %2025 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 3, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2025, align 8, !dbg !3441
  %2026 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2026, align 8, !dbg !3441
  %2027 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 6, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2027, align 8, !dbg !3441
  %2028 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 10, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2028, align 8, !dbg !3441
  %2029 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 12, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2029, align 8, !dbg !3441
  %2030 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 13, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2030, align 8, !dbg !3441
  %2031 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 16, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2031, align 8, !dbg !3441
  %2032 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 17, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2032, align 8, !dbg !3441
  %2033 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 9, i32 0, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2033, align 8, !dbg !3441
  %2034 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 9, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2034, align 8, !dbg !3441
  %2035 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 9, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2035, align 8, !dbg !3441
  %2036 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 9, i32 3, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2036, align 8, !dbg !3441
  %2037 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 14, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2037, align 8, !dbg !3441
  %2038 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 14, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2038, align 8, !dbg !3441
  %2039 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 14, i32 3, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2039, align 8, !dbg !3441
  %2040 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 14, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2040, align 8, !dbg !3441
  %2041 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 14, i32 0, i32 1, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2041, align 8, !dbg !3441
  %2042 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 14, i32 0, i32 2, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2042, align 8, !dbg !3441
  %2043 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 14, i32 0, i32 4, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2043, align 8, !dbg !3441
  %2044 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2020, i64 %2021, i32 14, i32 0, i32 5, !dbg !3441
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %2044, align 8, !dbg !3441
  %2045 = icmp eq i64 %2022, %730, !dbg !3441
  br i1 %2045, label %zeroType.417.exit, label %loop.i723, !dbg !3441

zeroType.417.exit:                                ; preds = %loop.i723
  %_augmented633_malloccache = bitcast {} addrspace(10)* %2019 to { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)*, !dbg !3441
  store { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %_augmented633_malloccache, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)** %_augmented633_cache, align 8, !dbg !3441, !invariant.group !3593
  %2046 = mul nuw i64 %730, 1, !dbg !3441
  %_malloccache636 = call noalias nonnull i8* @malloc(i64 %2046), !dbg !3441, !enzyme_cache_alloc !3594
  store i8* %_malloccache636, i8** %_cache635, align 1, !dbg !3441, !invariant.group !3596
  br label %L616, !dbg !3441

L616:                                             ; preds = %L1352, %zeroType.417.exit
  %iv9 = phi i64 [ %iv.next10, %L1352 ], [ 0, %zeroType.417.exit ]
  %value_phi372 = phi double [ %2381, %L1352 ], [ 0.000000e+00, %zeroType.417.exit ]
  %iv.next10 = add nuw nsw i64 %iv9, 1, !dbg !3597
  %2047 = add i64 %iv9, 2, !dbg !3597
  %2048 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize383), !dbg !3597
  %2049 = mul i64 %arraysize383, 8, !dbg !3597
  %2050 = bitcast {} addrspace(10)* %2048 to i8 addrspace(13)* addrspace(10)*, !dbg !3597
  %2051 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2050, align 8, !dbg !3597
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2051, i8 0, i64 %2049, i1 false), !dbg !3597
  %2052 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize383) #74, !dbg !3597
  %2053 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache177, align 8, !dbg !3602, !dereferenceable !3229, !invariant.group !3483
  %2054 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2053, i64 %iv9, !dbg !3602
  store {} addrspace(10)* %2052, {} addrspace(10)* addrspace(10)* %2054, align 8, !dbg !3602, !invariant.group !3605
  %2055 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi17_cache", align 8, !dbg !3602, !dereferenceable !3229, !invariant.group !3484
  %2056 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2055, i64 %iv9, !dbg !3602
  store {} addrspace(10)* %2048, {} addrspace(10)* addrspace(10)* %2056, align 8, !dbg !3602, !invariant.group !3606
  %2057 = bitcast {} addrspace(10)* addrspace(10)* %2055 to {} addrspace(10)*, !dbg !3602
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2057, {} addrspace(10)* %2048), !dbg !3602
  %2058 = bitcast {} addrspace(10)* addrspace(10)* %2053 to {} addrspace(10)*, !dbg !3602
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2058, {} addrspace(10)* %2052), !dbg !3602
  %_augmented181 = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1996({} addrspace(10)* align 16 %2052, {} addrspace(10)* align 16 %2048, i32 zeroext 1308622848, {} addrspace(10)* align 16 %680, {} addrspace(10)* align 16 %"'ac172", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl"), !dbg !3602
  %subcache182 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented181, 0, !dbg !3602
  %2059 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache182_cache, align 8, !dbg !3602, !dereferenceable !3229, !invariant.group !3485
  %2060 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2059, i64 %iv9, !dbg !3602
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache182, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2060, align 8, !dbg !3602, !invariant.group !3607
  %2061 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented181_cache, align 8, !dbg !3602, !dereferenceable !3229, !invariant.group !3492
  %2062 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2061, i64 %iv9, !dbg !3602
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented181, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2062, align 8, !dbg !3602, !invariant.group !3608
  %2063 = bitcast { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2061 to {} addrspace(10)*, !dbg !3602
  %2064 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented181, 0, !dbg !3602
  %2065 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented181, 1, !dbg !3602
  %2066 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented181, 2, !dbg !3602
  %2067 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2064, 1, !dbg !3602
  %2068 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2064, 2, !dbg !3602
  %2069 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2064, 4, !dbg !3602
  %2070 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2064, 5, !dbg !3602
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2063, {} addrspace(10)* %2065, {} addrspace(10)* %2066, {} addrspace(10)* %2067, {} addrspace(10)* %2068, {} addrspace(10)* %2069, {} addrspace(10)* %2070), !dbg !3602
  %2071 = bitcast { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2059 to {} addrspace(10)*, !dbg !3602
  %2072 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache182, 1, !dbg !3602
  %2073 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache182, 2, !dbg !3602
  %2074 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache182, 4, !dbg !3602
  %2075 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache182, 5, !dbg !3602
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2071, {} addrspace(10)* %2072, {} addrspace(10)* %2073, {} addrspace(10)* %2074, {} addrspace(10)* %2075), !dbg !3602
  %2076 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented181, 1, !dbg !3602
  %2077 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache221, align 8, !dbg !3602, !dereferenceable !3229, !invariant.group !3491
  %2078 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2077, i64 %iv9, !dbg !3602
  store {} addrspace(10)* %2076, {} addrspace(10)* addrspace(10)* %2078, align 8, !dbg !3602, !invariant.group !3609
  %2079 = bitcast {} addrspace(10)* addrspace(10)* %2077 to {} addrspace(10)*, !dbg !3602
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2079, {} addrspace(10)* %2076), !dbg !3602
  %"'ac183" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented181, 2, !dbg !3602
  %"'ipl176" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc175" unordered, align 8, !dbg !3610, !tbaa !865, !alias.scope !3612, !noalias !3615
  %2080 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %687 unordered, align 8, !dbg !3610, !tbaa !865, !alias.scope !3617, !noalias !3618
  %2081 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache622, align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3591
  %2082 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2081, i64 %iv9, !dbg !3610
  store {} addrspace(10)* %2080, {} addrspace(10)* addrspace(10)* %2082, align 8, !dbg !3610, !tbaa !865, !invariant.group !3619
  %2083 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ipl176_cache", align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3592
  %2084 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2083, i64 %iv9, !dbg !3610
  store {} addrspace(10)* %"'ipl176", {} addrspace(10)* addrspace(10)* %2084, align 8, !dbg !3610, !tbaa !865, !invariant.group !3620
  %2085 = bitcast {} addrspace(10)* addrspace(10)* %2083 to {} addrspace(10)*, !dbg !3610
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2085, {} addrspace(10)* %"'ipl176"), !dbg !3610
  %2086 = bitcast {} addrspace(10)* addrspace(10)* %2081 to {} addrspace(10)*, !dbg !3610
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2086, {} addrspace(10)* %2080), !dbg !3610
  %isdefined.not = icmp eq {} addrspace(10)* %2080, null, !dbg !3610
  br i1 %isdefined.not, label %err, label %pass387, !dbg !3610

L680:                                             ; preds = %pass387
  %2087 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct396 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !3621
  call fastcc void @julia_throw_boundserror_1991({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield13, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %2087) #71, !dbg !3621
  unreachable

L683:                                             ; preds = %pass387
  store i64 %arraysize390, i64* %memcpy_refined_dst404, align 8, !dbg !3623, !tbaa !132, !alias.scope !134, !noalias !3056
  %2088 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize390), !dbg !3626
  %2089 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache186, align 8, !dbg !3626, !dereferenceable !3229, !invariant.group !3486
  %2090 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2089, i64 %iv9, !dbg !3626
  store {} addrspace(10)* %2088, {} addrspace(10)* addrspace(10)* %2090, align 8, !dbg !3626, !invariant.group !3631
  %2091 = bitcast {} addrspace(10)* addrspace(10)* %2089 to {} addrspace(10)*, !dbg !3626
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2091, {} addrspace(10)* %2088), !dbg !3626
  %2092 = mul i64 %arraysize390, 8, !dbg !3626
  %2093 = bitcast {} addrspace(10)* %2088 to i8 addrspace(13)* addrspace(10)*, !dbg !3626
  %2094 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2093, align 8, !dbg !3626
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2094, i8 0, i64 %2092, i1 false), !dbg !3626
  %2095 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize390) #74, !dbg !3626
  %2096 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache237, align 8, !dbg !3632, !dereferenceable !3229, !invariant.group !3499
  %2097 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2096, i64 %iv9, !dbg !3632
  store {} addrspace(10)* %2095, {} addrspace(10)* addrspace(10)* %2097, align 8, !dbg !3632, !invariant.group !3635
  %2098 = bitcast {} addrspace(10)* addrspace(10)* %2096 to {} addrspace(10)*, !dbg !3632
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2098, {} addrspace(10)* %2095), !dbg !3632
  %2099 = bitcast {} addrspace(10)* %2095 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3632
  %2100 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %2099 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3632
  %arraylen_ptr405 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %2100, i64 0, i32 1, !dbg !3632
  %arraylen406 = load i64, i64 addrspace(11)* %arraylen_ptr405, align 8, !dbg !3632, !tbaa !315, !range !86, !alias.scope !3636, !noalias !3639
  %.not874 = icmp eq i64 %arraylen406, %arraysize390, !dbg !3641
  br i1 %.not874, label %L696, label %L749, !dbg !3634

L696:                                             ; preds = %L683
  br i1 %.not875, label %L753.L754_crit_edge, label %L717.preheader, !dbg !3644

L717.preheader:                                   ; preds = %L696
  %2101 = mul i64 %2843, %arraysize390, !dbg !3645
  %2102 = add i64 %2101, -1, !dbg !3645
  %"arrayptr715933'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc191", align 16, !alias.scope !3454, !noalias !3451, !invariant.group !3648
  %arrayptr715933 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %694, align 16, !alias.scope !3451, !noalias !3454
  %"'ipc194" = bitcast {} addrspace(10)* %2088 to double addrspace(13)* addrspace(10)*
  %2103 = bitcast {} addrspace(10)* %2095 to double addrspace(13)* addrspace(10)*
  %"'ipc195" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc194" to double addrspace(13)* addrspace(11)*
  %2104 = addrspacecast double addrspace(13)* addrspace(10)* %2103 to double addrspace(13)* addrspace(11)*
  %2105 = load i64**, i64*** %value_phi419_cache, align 8, !dbg !3649, !invariant.group !3650
  %2106 = getelementptr inbounds i64*, i64** %2105, i64 %iv9, !dbg !3649
  store i64* null, i64** %2106, align 8, !dbg !3649
  br label %L717, !dbg !3649

L717:                                             ; preds = %L724, %L717.preheader
  %iv11 = phi i64 [ %iv.next12, %L724 ], [ 0, %L717.preheader ]
  %value_phi418.off0 = phi i1 [ %2133, %L724 ], [ false, %L717.preheader ]
  %value_phi419 = phi i64 [ %value_phi721, %L724 ], [ 1, %L717.preheader ]
  %iv.next12 = add nuw nsw i64 %iv11, 1, !dbg !3649
  %2107 = load i64*, i64** %2106, align 8, !dbg !3649
  %2108 = bitcast i64* %2107 to i8*, !dbg !3649
  %2109 = and i64 %iv.next12, 1, !dbg !3649
  %2110 = icmp ne i64 %2109, 0, !dbg !3649
  %2111 = call i64 @llvm.ctpop.i64(i64 %iv.next12), !dbg !3649
  %2112 = icmp ult i64 %2111, 3, !dbg !3649
  %2113 = and i1 %2112, %2110, !dbg !3649
  br i1 %2113, label %grow.i724, label %__enzyme_exponentialallocationzero.exit725, !dbg !3649

grow.i724:                                        ; preds = %L717
  %2114 = call i64 @llvm.ctlz.i64(i64 %iv.next12, i1 true), !dbg !3649
  %2115 = sub nuw nsw i64 64, %2114, !dbg !3649
  %2116 = shl i64 8, %2115, !dbg !3649
  %2117 = icmp eq i64 %iv.next12, 1, !dbg !3649
  %2118 = lshr i64 %2116, 1, !dbg !3649
  %2119 = select i1 %2117, i64 0, i64 %2118, !dbg !3649
  %2120 = call i8* @realloc(i8* %2108, i64 %2116) #75, !dbg !3649
  %2121 = sub i64 %2116, %2119, !dbg !3649
  %2122 = getelementptr inbounds i8, i8* %2120, i64 %2119, !dbg !3649
  call void @llvm.memset.p0i8.i64(i8* %2122, i8 0, i64 %2121, i1 false), !dbg !3649
  br label %__enzyme_exponentialallocationzero.exit725, !dbg !3649

__enzyme_exponentialallocationzero.exit725:       ; preds = %L717, %grow.i724
  %2123 = phi i8* [ %2120, %grow.i724 ], [ %2108, %L717 ], !dbg !3649
  %2124 = bitcast i8* %2123 to i64*, !dbg !3649
  store i64* %2124, i64** %2106, align 8, !dbg !3649
  %2125 = load i64**, i64*** %value_phi419_cache, align 8, !dbg !3649, !dereferenceable !3229, !invariant.group !3489
  %2126 = getelementptr inbounds i64*, i64** %2125, i64 %iv9, !dbg !3649
  %2127 = load i64*, i64** %2126, align 8, !dbg !3649, !dereferenceable !3229, !invariant.group !3651
  %2128 = getelementptr inbounds i64, i64* %2127, i64 %iv11, !dbg !3649
  store i64 %value_phi419, i64* %2128, align 8, !dbg !3649, !invariant.group !3652
  br i1 %value_phi418.off0, label %L753.L754_crit_edge.loopexit, label %L724, !dbg !3649

L724:                                             ; preds = %__enzyme_exponentialallocationzero.exit725
  %2129 = add i64 %2102, %iv.next12, !dbg !3645
  %"'ipg202" = getelementptr inbounds double, double addrspace(13)* %"arrayptr715933'ipl", i64 %2129, !dbg !3645
  %2130 = getelementptr inbounds double, double addrspace(13)* %arrayptr715933, i64 %2129, !dbg !3645
  %arrayref716 = load double, double addrspace(13)* %2130, align 8, !dbg !3645, !tbaa !268, !alias.scope !3653, !noalias !3656
  %2131 = add i64 %value_phi419, -1, !dbg !3658
  %"arrayptr718934'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc195", align 8, !dbg !3658, !tbaa !382, !alias.scope !3659, !noalias !3660, !nonnull !67
  %arrayptr718934 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %2104, align 8, !dbg !3658, !tbaa !382, !alias.scope !3661, !noalias !3639, !nonnull !67
  %"'ipg193" = getelementptr inbounds double, double addrspace(13)* %"arrayptr718934'ipl", i64 %2131, !dbg !3658
  %2132 = getelementptr inbounds double, double addrspace(13)* %arrayptr718934, i64 %2131, !dbg !3658
  store double %arrayref716, double addrspace(13)* %2132, align 8, !dbg !3658, !tbaa !268, !alias.scope !3662, !noalias !3665
  %2133 = icmp eq i64 %value_phi419, %arraysize390, !dbg !3667
  %2134 = add i64 %value_phi419, 1, !dbg !3668
  %value_phi721 = select i1 %2133, i64 undef, i64 %2134, !dbg !3668
  %.not935 = icmp eq i64 %iv.next12, %arraysize390, !dbg !3670
  br i1 %.not935, label %L753.L754_crit_edge.loopexit, label %L717, !dbg !3374

L749:                                             ; preds = %L683
  %2135 = addrspacecast [1 x [1 x i64]]* %newstruct402 to [1 x [1 x i64]] addrspace(11)*, !dbg !3634
  call fastcc void @julia_throw_checksize_error_1989({} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %2095, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %2135) #71, !dbg !3634
  unreachable

L753.L754_crit_edge.loopexit:                     ; preds = %L724, %__enzyme_exponentialallocationzero.exit725
  %"value_phi418.off0!manual_lcssa" = phi i1 [ %value_phi418.off0, %L724 ], [ %value_phi418.off0, %__enzyme_exponentialallocationzero.exit725 ], !dbg !3597
  %2136 = phi i64 [ %iv11, %L724 ], [ %iv11, %__enzyme_exponentialallocationzero.exit725 ], !dbg !3597
  %2137 = load i64*, i64** %loopLimit_cache22, align 8, !dbg !3597, !dereferenceable !3229, !invariant.group !3474
  %2138 = getelementptr inbounds i64, i64* %2137, i64 %iv9, !dbg !3597
  store i64 %2136, i64* %2138, align 8, !dbg !3597, !invariant.group !3671
  br label %L753.L754_crit_edge, !dbg !3597

L753.L754_crit_edge:                              ; preds = %L753.L754_crit_edge.loopexit, %L696
  %2139 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize433), !dbg !3597
  %2140 = mul i64 %arraysize433, 8, !dbg !3597
  %2141 = bitcast {} addrspace(10)* %2139 to i8 addrspace(13)* addrspace(10)*, !dbg !3597
  %2142 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2141, align 8, !dbg !3597
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2142, i8 0, i64 %2140, i1 false), !dbg !3597
  %2143 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize433) #74, !dbg !3597
  %_augmented240 = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1996({} addrspace(10)* align 16 %2143, {} addrspace(10)* align 16 %2139, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield3, {} addrspace(10)* align 16 %"getfield3'ipl", {} addrspace(10)* align 16 %2095, {} addrspace(10)* align 16 %2088), !dbg !3602
  %subcache241 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented240, 0, !dbg !3602
  %2144 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented240, 1, !dbg !3602
  %"'ac242" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented240, 2, !dbg !3602
  %2145 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5054677600 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11255605456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539792 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4730741840 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %2076, {} addrspace(10)* %"'ac183", {} addrspace(10)* %2794, {} addrspace(10)* %2792, {} addrspace(10)* %2144, {} addrspace(10)* %"'ac242"), !dbg !3379
  %2146 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache213, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3490
  %2147 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2146, i64 %iv9, !dbg !3379
  store {} addrspace(10)* %2145, {} addrspace(10)* addrspace(10)* %2147, align 8, !dbg !3379, !invariant.group !3672
  %2148 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache241_cache, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3500
  %2149 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2148, i64 %iv9, !dbg !3379
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache241, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2149, align 8, !dbg !3379, !invariant.group !3673
  %2150 = bitcast { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2148 to {} addrspace(10)*, !dbg !3379
  %2151 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache241, 1, !dbg !3379
  %2152 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache241, 2, !dbg !3379
  %2153 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache241, 4, !dbg !3379
  %2154 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache241, 5, !dbg !3379
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2150, {} addrspace(10)* %2151, {} addrspace(10)* %2152, {} addrspace(10)* %2153, {} addrspace(10)* %2154), !dbg !3379
  %2155 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi24_cache", align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3498
  %2156 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2155, i64 %iv9, !dbg !3379
  store {} addrspace(10)* %2139, {} addrspace(10)* addrspace(10)* %2156, align 8, !dbg !3379, !invariant.group !3674
  %2157 = bitcast {} addrspace(10)* addrspace(10)* %2155 to {} addrspace(10)*, !dbg !3379
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2157, {} addrspace(10)* %2139), !dbg !3379
  %2158 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache233, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3497
  %2159 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2158, i64 %iv9, !dbg !3379
  store {} addrspace(10)* %2143, {} addrspace(10)* addrspace(10)* %2159, align 8, !dbg !3379, !invariant.group !3675
  %2160 = bitcast {} addrspace(10)* addrspace(10)* %2158 to {} addrspace(10)*, !dbg !3379
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2160, {} addrspace(10)* %2143), !dbg !3379
  %2161 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi25_cache", align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3496
  %2162 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2161, i64 %iv9, !dbg !3379
  store {} addrspace(10)* %"'ac242", {} addrspace(10)* addrspace(10)* %2162, align 8, !dbg !3379, !invariant.group !3676
  %2163 = bitcast {} addrspace(10)* addrspace(10)* %2161 to {} addrspace(10)*, !dbg !3379
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2163, {} addrspace(10)* %"'ac242"), !dbg !3379
  %2164 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache229, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3495
  %2165 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2164, i64 %iv9, !dbg !3379
  store {} addrspace(10)* %2144, {} addrspace(10)* addrspace(10)* %2165, align 8, !dbg !3379, !invariant.group !3677
  %2166 = bitcast {} addrspace(10)* addrspace(10)* %2164 to {} addrspace(10)*, !dbg !3379
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2166, {} addrspace(10)* %2144), !dbg !3379
  %2167 = bitcast {} addrspace(10)* addrspace(10)* %2146 to {} addrspace(10)*, !dbg !3379
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2167, {} addrspace(10)* %2145), !dbg !3379
  %2168 = addrspacecast {} addrspace(10)* %2145 to {} addrspace(11)*, !dbg !3379
  %2169 = bitcast {} addrspace(11)* %2168 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3379
  %2170 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2169, i64 0, i64 1, !dbg !3379
  %2171 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2170, align 8, !dbg !3379, !invariant.group !3678
  %2172 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2169, i64 0, i64 0, !dbg !3379
  %2173 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2172, align 8, !dbg !3379
  %2174 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache254, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3504
  %2175 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2174, i64 %iv9, !dbg !3379
  store {} addrspace(10)* %2173, {} addrspace(10)* addrspace(10)* %2175, align 8, !dbg !3379, !invariant.group !3679
  %2176 = bitcast {} addrspace(10)* addrspace(10)* %2174 to {} addrspace(10)*, !dbg !3379
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2176, {} addrspace(10)* %2173), !dbg !3379
  %2177 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2169, i64 0, i64 2, !dbg !3379
  %2178 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2177, align 8, !dbg !3379, !invariant.group !3680
  %2179 = call {} addrspace(10)* @julia.typeof({} addrspace(10)* nonnull %2173) #73, !dbg !3379
  %2180 = addrspacecast {} addrspace(10)* %2179 to {} addrspace(11)*, !dbg !3379
  %2181 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %2180) #73, !dbg !3379
  %exactly_isa.not = icmp eq {}* %2181, inttoptr (i64 11191270976 to {}*), !dbg !3379
  br i1 %exactly_isa.not, label %L782, label %L789, !dbg !3379

L782:                                             ; preds = %L753.L754_crit_edge
  %2182 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4796496848 to {}*) to {} addrspace(10)*), i64 32), !dbg !3681
  %2183 = bitcast {} addrspace(10)* %2182 to i8 addrspace(13)* addrspace(10)*, !dbg !3681
  %2184 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2183, align 8, !dbg !3681
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2184, i8 0, i64 256, i1 false), !dbg !3681
  %2185 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4796496848 to {}*) to {} addrspace(10)*), i64 32) #74, !dbg !3681
  %"newstruct435'mi" = call noalias nonnull dereferenceable(24) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task388, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724184560 to {}*) to {} addrspace(10)*)) #72, !dbg !3682
  %2186 = bitcast {} addrspace(10)* %"newstruct435'mi" to i8 addrspace(10)*, !dbg !3682
  call void @llvm.memset.p10i8.i64(i8 addrspace(10)* nonnull dereferenceable(24) dereferenceable_or_null(24) %2186, i8 0, i64 24, i1 false), !dbg !3682
  %newstruct435 = call noalias nonnull dereferenceable(24) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task388, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724184560 to {}*) to {} addrspace(10)*)) #72, !dbg !3682
  %"'ipc267" = bitcast {} addrspace(10)* %"newstruct435'mi" to {} addrspace(10)* addrspace(10)*, !dbg !3682
  %2187 = bitcast {} addrspace(10)* %newstruct435 to {} addrspace(10)* addrspace(10)*, !dbg !3682
  %"'ipc268" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc267" to {} addrspace(10)* addrspace(11)*, !dbg !3682
  %2188 = addrspacecast {} addrspace(10)* addrspace(10)* %2187 to {} addrspace(10)* addrspace(11)*, !dbg !3682
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %"'ipc268", align 8, !dbg !3682, !tbaa !865, !alias.scope !3685, !noalias !3688
  %2189 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache270, align 8, !dbg !3682, !dereferenceable !3229, !invariant.group !3506
  %2190 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2189, i64 %iv9, !dbg !3682
  store {} addrspace(10)* %2182, {} addrspace(10)* addrspace(10)* %2190, align 8, !dbg !3682, !invariant.group !3690
  %2191 = bitcast {} addrspace(10)* addrspace(10)* %2189 to {} addrspace(10)*, !dbg !3682
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2191, {} addrspace(10)* %2182), !dbg !3682
  %2192 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"newstruct435'mi_cache", align 8, !dbg !3682, !dereferenceable !3229, !invariant.group !3505
  %2193 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2192, i64 %iv9, !dbg !3682
  store {} addrspace(10)* %"newstruct435'mi", {} addrspace(10)* addrspace(10)* %2193, align 8, !dbg !3682, !invariant.group !3691
  %2194 = bitcast {} addrspace(10)* addrspace(10)* %2192 to {} addrspace(10)*, !dbg !3682
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2194, {} addrspace(10)* %"newstruct435'mi"), !dbg !3682
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %2188, align 8, !dbg !3682, !tbaa !865, !alias.scope !3692, !noalias !3693
  store atomic {} addrspace(10)* %2182, {} addrspace(10)* addrspace(11)* %"'ipc268" release, align 8, !dbg !3682, !tbaa !865, !alias.scope !3685, !noalias !3688
  store atomic {} addrspace(10)* %2185, {} addrspace(10)* addrspace(11)* %2188 release, align 8, !dbg !3682, !tbaa !865, !alias.scope !3692, !noalias !3693
  %"'ipc264" = bitcast {} addrspace(10)* %"newstruct435'mi" to i8 addrspace(10)*, !dbg !3682
  %2195 = bitcast {} addrspace(10)* %newstruct435 to i8 addrspace(10)*, !dbg !3682
  %"'ipc265" = addrspacecast i8 addrspace(10)* %"'ipc264" to i8 addrspace(11)*, !dbg !3682
  %2196 = addrspacecast i8 addrspace(10)* %2195 to i8 addrspace(11)*, !dbg !3682
  %"'ipg266" = getelementptr inbounds i8, i8 addrspace(11)* %"'ipc265", i64 8, !dbg !3682
  %2197 = getelementptr inbounds i8, i8 addrspace(11)* %2196, i64 8, !dbg !3682
  %"'ipc262" = bitcast {} addrspace(10)* %2171 to [2 x {} addrspace(10)*] addrspace(10)*, !dbg !3694
  %2198 = bitcast {} addrspace(10)* %2173 to [2 x {} addrspace(10)*] addrspace(10)*, !dbg !3694
  %"'ipc263" = addrspacecast [2 x {} addrspace(10)*] addrspace(10)* %"'ipc262" to [2 x {} addrspace(10)*] addrspace(11)*, !dbg !3694
  %2199 = addrspacecast [2 x {} addrspace(10)*] addrspace(10)* %2198 to [2 x {} addrspace(10)*] addrspace(11)*, !dbg !3694
  %"getfield_addr438'ipg" = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(11)* %"'ipc263", i64 0, i64 1, !dbg !3694
  %getfield_addr438 = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(11)* %2199, i64 0, i64 1, !dbg !3694
  call void @llvm.memset.p11i8.i64(i8 addrspace(11)* noundef align 8 dereferenceable(16) %2197, i8 0, i64 16, i1 false) #70, !dbg !3682
  call void @llvm.memset.p11i8.i64(i8 addrspace(11)* noundef align 8 dereferenceable(16) %"'ipg266", i8 0, i64 16, i1 false) #70, !dbg !3682
  %"getfield439'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"getfield_addr438'ipg" unordered, align 8, !dbg !3694, !tbaa !1298, !alias.scope !3695, !noalias !3698, !nonnull !67
  %getfield439 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %getfield_addr438 unordered, align 8, !dbg !3694, !tbaa !1298, !alias.scope !3700, !noalias !3701, !nonnull !67
  %"box441'mi" = call noalias nonnull dereferenceable(16) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task388, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11191270976 to {}*) to {} addrspace(10)*)) #72, !dbg !3702
  %2200 = bitcast {} addrspace(10)* %"box441'mi" to i8 addrspace(10)*, !dbg !3702
  call void @llvm.memset.p10i8.i64(i8 addrspace(10)* nonnull dereferenceable(16) dereferenceable_or_null(16) %2200, i8 0, i64 16, i1 false), !dbg !3702
  %box441 = call noalias nonnull dereferenceable(16) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task388, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11191270976 to {}*) to {} addrspace(10)*)) #72, !dbg !3702
  %"'ipc261" = bitcast {} addrspace(10)* %"box441'mi" to [2 x {} addrspace(10)*] addrspace(10)*, !dbg !3702
  %2201 = bitcast {} addrspace(10)* %box441 to [2 x {} addrspace(10)*] addrspace(10)*, !dbg !3702
  %".repack880'ipg" = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(10)* %"'ipc261", i64 0, i64 0, !dbg !3702
  %.repack880 = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(10)* %2201, i64 0, i64 0, !dbg !3702
  store {} addrspace(10)* %"newstruct435'mi", {} addrspace(10)* addrspace(10)* %".repack880'ipg", align 8, !dbg !3702, !tbaa !112, !alias.scope !3703, !noalias !3706
  store {} addrspace(10)* %newstruct435, {} addrspace(10)* addrspace(10)* %.repack880, align 8, !dbg !3702, !tbaa !112, !alias.scope !3708, !noalias !3709
  %2202 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"box441'mi_cache", align 8, !dbg !3702, !dereferenceable !3229, !invariant.group !3503
  %2203 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2202, i64 %iv9, !dbg !3702
  store {} addrspace(10)* %"box441'mi", {} addrspace(10)* addrspace(10)* %2203, align 8, !dbg !3702, !invariant.group !3710
  %2204 = bitcast {} addrspace(10)* addrspace(10)* %2202 to {} addrspace(10)*, !dbg !3702
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2204, {} addrspace(10)* %"box441'mi"), !dbg !3702
  %2205 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %box441_cache, align 8, !dbg !3702, !dereferenceable !3229, !invariant.group !3502
  %2206 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2205, i64 %iv9, !dbg !3702
  store {} addrspace(10)* %box441, {} addrspace(10)* addrspace(10)* %2206, align 8, !dbg !3702, !invariant.group !3711
  %2207 = bitcast {} addrspace(10)* addrspace(10)* %2205 to {} addrspace(10)*, !dbg !3702
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2207, {} addrspace(10)* %box441), !dbg !3702
  %".repack881'ipg" = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(10)* %"'ipc261", i64 0, i64 1, !dbg !3702
  %.repack881 = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(10)* %2201, i64 0, i64 1, !dbg !3702
  store {} addrspace(10)* %"getfield439'ipl", {} addrspace(10)* addrspace(10)* %".repack881'ipg", align 8, !dbg !3702, !tbaa !112, !alias.scope !3703, !noalias !3706
  store {} addrspace(10)* %getfield439, {} addrspace(10)* addrspace(10)* %.repack881, align 8, !dbg !3702, !tbaa !112, !alias.scope !3708, !noalias !3709
  %2208 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5054677600 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6184456528 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539792 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726248928 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724564752 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %box441, {} addrspace(10)* %"box441'mi", {} addrspace(10)* %2173, {} addrspace(10)* %2171), !dbg !3702
  %2209 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache244, align 8, !dbg !3702, !dereferenceable !3229, !invariant.group !3501
  %2210 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2209, i64 %iv9, !dbg !3702
  store {} addrspace(10)* %2208, {} addrspace(10)* addrspace(10)* %2210, align 8, !dbg !3702, !invariant.group !3712
  %2211 = bitcast {} addrspace(10)* addrspace(10)* %2209 to {} addrspace(10)*, !dbg !3702
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2211, {} addrspace(10)* %2208), !dbg !3702
  %2212 = addrspacecast {} addrspace(10)* %2208 to {} addrspace(11)*, !dbg !3702
  %2213 = bitcast {} addrspace(11)* %2212 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3702
  %2214 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2213, i64 0, i64 1, !dbg !3702
  %2215 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2214, align 8, !dbg !3702, !invariant.group !3713
  %2216 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2213, i64 0, i64 0, !dbg !3702
  %2217 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2216, align 8, !dbg !3702
  %2218 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache294, align 8, !dbg !3702, !dereferenceable !3229, !invariant.group !3509
  %2219 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2218, i64 %iv9, !dbg !3702
  store {} addrspace(10)* %2217, {} addrspace(10)* addrspace(10)* %2219, align 8, !dbg !3702, !invariant.group !3714
  %2220 = bitcast {} addrspace(10)* addrspace(10)* %2218 to {} addrspace(10)*, !dbg !3702
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2220, {} addrspace(10)* %2217), !dbg !3702
  %2221 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2213, i64 0, i64 2, !dbg !3702
  %2222 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2221, align 8, !dbg !3702, !invariant.group !3715
  br label %L791, !dbg !3716

L789:                                             ; preds = %L753.L754_crit_edge
  %2223 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5054677600 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6215964112 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185540240 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4730329808 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724564752 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %2173, {} addrspace(10)* %2171), !dbg !3379
  %2224 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache273, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3507
  %2225 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2224, i64 %iv9, !dbg !3379
  store {} addrspace(10)* %2223, {} addrspace(10)* addrspace(10)* %2225, align 8, !dbg !3379, !invariant.group !3722
  %2226 = bitcast {} addrspace(10)* addrspace(10)* %2224 to {} addrspace(10)*, !dbg !3379
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2226, {} addrspace(10)* %2223), !dbg !3379
  %2227 = addrspacecast {} addrspace(10)* %2223 to {} addrspace(11)*, !dbg !3379
  %2228 = bitcast {} addrspace(11)* %2227 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3379
  %2229 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2228, i64 0, i64 1, !dbg !3379
  %2230 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2229, align 8, !dbg !3379, !invariant.group !3723
  %2231 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2228, i64 0, i64 0, !dbg !3379
  %2232 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2231, align 8, !dbg !3379
  %2233 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache298, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3510
  %2234 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2233, i64 %iv9, !dbg !3379
  store {} addrspace(10)* %2232, {} addrspace(10)* addrspace(10)* %2234, align 8, !dbg !3379, !invariant.group !3724
  %2235 = bitcast {} addrspace(10)* addrspace(10)* %2233 to {} addrspace(10)*, !dbg !3379
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2235, {} addrspace(10)* %2232), !dbg !3379
  %2236 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2228, i64 0, i64 2, !dbg !3379
  %2237 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2236, align 8, !dbg !3379, !invariant.group !3725
  br label %L791, !dbg !3716

L791:                                             ; preds = %L789, %L782
  %2238 = phi {} addrspace(10)* [ %2215, %L782 ], [ %2230, %L789 ]
  %value_phi442 = phi {} addrspace(10)* [ %2217, %L782 ], [ %2232, %L789 ]
  %2239 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5054677600 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6219021520 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185540240 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728516352 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %getfield11, {} addrspace(10)* %"getfield11'ipl", {} addrspace(10)* %value_phi442, {} addrspace(10)* %2238), !dbg !3379
  %2240 = addrspacecast {} addrspace(10)* %2239 to {} addrspace(11)*, !dbg !3379
  %2241 = bitcast {} addrspace(11)* %2240 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3379
  %2242 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2241, i64 0, i64 1, !dbg !3379
  %2243 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2242, align 8, !dbg !3379
  %2244 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2241, i64 0, i64 0, !dbg !3379
  %2245 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2244, align 8, !dbg !3379
  %2246 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2241, i64 0, i64 2, !dbg !3379
  %2247 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2246, align 8, !dbg !3379, !invariant.group !3726
  store i64 %arraysize, i64* %memcpy_refined_dst452, align 8, !dbg !3727, !tbaa !132, !alias.scope !134, !noalias !3056
  %2248 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache285, align 8, !dbg !3727, !dereferenceable !3229, !invariant.group !3508
  %2249 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2248, i64 %iv9, !dbg !3727
  store {} addrspace(10)* %2239, {} addrspace(10)* addrspace(10)* %2249, align 8, !dbg !3727, !invariant.group !3732
  %2250 = bitcast {} addrspace(10)* addrspace(10)* %2248 to {} addrspace(10)*, !dbg !3727
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2250, {} addrspace(10)* %2239), !dbg !3727
  store i64 %2047, i64* %698, align 8, !dbg !3727, !tbaa !132, !alias.scope !134, !noalias !3056
  %exitcond1057.not = icmp eq i64 %2047, %727, !dbg !3733
  br i1 %exitcond1057.not, label %L811, label %L814, !dbg !3738

L811:                                             ; preds = %L791
  %2251 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct450 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !3738
  call fastcc void @julia_throw_boundserror_1991({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield15, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %2251) #71, !dbg !3738
  unreachable

L814:                                             ; preds = %L791
  %2252 = mul i64 %2797, %arraysize, !dbg !3739
  %2253 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"getfield11'ipl"), !dbg !3749
  %2254 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3749
  %2255 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2254, i32 0, i32 3, !dbg !3749
  %2256 = load i16, i16 addrspace(10)* %2255, align 2, !dbg !3749
  %2257 = zext i16 %2256 to i64, !dbg !3749
  %2258 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3749
  %2259 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2258, i32 0, i32 1, !dbg !3749
  %2260 = load i64, i64 addrspace(10)* %2259, align 8, !dbg !3749
  %2261 = mul i64 %2260, %2257, !dbg !3749
  %2262 = bitcast {} addrspace(10)* %"getfield11'ipl" to i8 addrspace(13)* addrspace(10)*, !dbg !3749
  %2263 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2262, align 8, !dbg !3749
  %2264 = bitcast {} addrspace(10)* %2253 to i8 addrspace(13)* addrspace(10)*, !dbg !3749
  %2265 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2264, align 8, !dbg !3749
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %2265, i8 0, i64 %2261, i1 false), !dbg !3749
  %2266 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %getfield11) #70, !dbg !3749
  %2267 = bitcast {} addrspace(10)* %2266 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3750
  %2268 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2267, i32 0, i32 3, !dbg !3750
  %2269 = load i16, i16 addrspace(10)* %2268, align 2, !dbg !3750, !invariant.group !3756
  %2270 = zext i16 %2269 to i64, !dbg !3750
  %2271 = bitcast {} addrspace(10)* %2266 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3750
  %2272 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2271, i32 0, i32 1, !dbg !3750
  %2273 = load i64, i64 addrspace(10)* %2272, align 8, !dbg !3750, !invariant.group !3757
  %2274 = mul i64 %2273, %2270, !dbg !3750
  %2275 = bitcast {} addrspace(10)* %2266 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3750
  %2276 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2275, i32 0, i32 3, !dbg !3750
  %2277 = load i16, i16 addrspace(10)* %2276, align 2, !dbg !3750, !invariant.group !3758
  %2278 = zext i16 %2277 to i64, !dbg !3750
  %2279 = bitcast {} addrspace(10)* %2266 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3750
  %2280 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2279, i32 0, i32 1, !dbg !3750
  %2281 = load i64, i64 addrspace(10)* %2280, align 8, !dbg !3750, !invariant.group !3759
  %2282 = mul i64 %2281, %2278, !dbg !3750
  %2283 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi31_cache", align 8, !dbg !3750, !dereferenceable !3229, !invariant.group !3511
  %2284 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2283, i64 %iv9, !dbg !3750
  store {} addrspace(10)* %2253, {} addrspace(10)* addrspace(10)* %2284, align 8, !dbg !3750, !invariant.group !3760
  %2285 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache317, align 8, !dbg !3750, !dereferenceable !3229, !invariant.group !3514
  %2286 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2285, i64 %iv9, !dbg !3750
  store {} addrspace(10)* %2266, {} addrspace(10)* addrspace(10)* %2286, align 8, !dbg !3750, !invariant.group !3761
  %2287 = bitcast {} addrspace(10)* addrspace(10)* %2285 to {} addrspace(10)*, !dbg !3750
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2287, {} addrspace(10)* %2266), !dbg !3750
  %2288 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache314, align 8, !dbg !3750, !dereferenceable !3229, !invariant.group !3513
  %2289 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2288, i64 %iv9, !dbg !3750
  store {} addrspace(10)* %2253, {} addrspace(10)* addrspace(10)* %2289, align 8, !dbg !3750, !invariant.group !3762
  %2290 = bitcast {} addrspace(10)* addrspace(10)* %2288 to {} addrspace(10)*, !dbg !3750
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2290, {} addrspace(10)* %2253), !dbg !3750
  %2291 = bitcast {} addrspace(10)* addrspace(10)* %2283 to {} addrspace(10)*, !dbg !3750
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2291, {} addrspace(10)* %2253), !dbg !3750
  %2292 = bitcast {} addrspace(10)* %2266 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3750
  %2293 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %2292 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3750
  %arraylen_ptr466 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %2293, i64 0, i32 1, !dbg !3750
  %arraylen467 = load i64, i64 addrspace(11)* %arraylen_ptr466, align 8, !dbg !3750, !tbaa !315, !range !86, !alias.scope !3763, !noalias !3766
  %2294 = icmp eq i64 %arraysize, %arraylen467, !dbg !3768
  %2295 = icmp eq i64 %arraylen467, 1, !dbg !3770
  %value_phi469.in = or i1 %2294, %2295, !dbg !3770
  br i1 %value_phi469.in, label %L855, label %L840, !dbg !3771

L840:                                             ; preds = %L814
  %2296 = call fastcc [1 x {} addrspace(10)*] @julia_DimensionMismatch_1978() #70, !dbg !3771
  %box708 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task388, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #72, !dbg !3771
  %2297 = bitcast {} addrspace(10)* %box708 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !3771
  %2298 = extractvalue [1 x {} addrspace(10)*] %2296, 0, !dbg !3771
  %2299 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %2297, i64 0, i64 0, !dbg !3771
  store {} addrspace(10)* %2298, {} addrspace(10)* addrspace(10)* %2299, align 8, !dbg !3771, !tbaa !112, !alias.scope !116, !noalias !3082
  %2300 = addrspacecast {} addrspace(10)* %box708 to {} addrspace(12)*, !dbg !3771
  call void @ijl_throw({} addrspace(12)* %2300) #70, !dbg !3771
  unreachable

L855:                                             ; preds = %L814
  br i1 %2294, label %L866, label %L885, !dbg !3772

L866:                                             ; preds = %L855
  %2301 = load i8*, i8** %_cache372, align 8, !dbg !3774, !dereferenceable !3229, !invariant.group !3531
  %2302 = getelementptr inbounds i8, i8* %2301, i64 %iv9, !dbg !3774
  store i8 3, i8* %2302, align 1, !dbg !3774, !invariant.group !3776
  br i1 %.not822, label %L968, label %L870, !dbg !3774

L870:                                             ; preds = %L866
  %2303 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %699) #73, !dbg !3777
  %2304 = bitcast {}* %2303 to i8**, !dbg !3777
  %arrayptr676 = load i8*, i8** %2304, align 8, !dbg !3777, !tbaa !72, !invariant.load !67, !alias.scope !3049, !noalias !3052, !nonnull !67
  %2305 = addrspacecast {} addrspace(10)* %2266 to {} addrspace(11)*, !dbg !3784
  %2306 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %2305) #73, !dbg !3784
  %2307 = bitcast {}* %2306 to i8**, !dbg !3784
  %arrayptr678 = load i8*, i8** %2307, align 8, !dbg !3784, !tbaa !382, !alias.scope !3763, !noalias !3766, !nonnull !67
  %.not916.not = icmp eq i8* %arrayptr676, %arrayptr678, !dbg !3787
  %2308 = load i1*, i1** %.not916.not_cache, align 8, !dbg !3782, !dereferenceable !3229, !invariant.group !3517
  %2309 = getelementptr inbounds i1, i1* %2308, i64 %iv9, !dbg !3782
  store i1 %.not916.not, i1* %2309, align 1, !dbg !3782, !invariant.group !3790
  br i1 %.not916.not, label %L878, label %L881, !dbg !3782

L878:                                             ; preds = %L870
  %2310 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %2253), !dbg !3791
  %2311 = bitcast {} addrspace(10)* %2266 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3791
  %2312 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2311, i32 0, i32 3, !dbg !3791
  %2313 = load i16, i16 addrspace(10)* %2312, align 2, !dbg !3791
  %2314 = zext i16 %2313 to i64, !dbg !3791
  %2315 = bitcast {} addrspace(10)* %2266 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3791
  %2316 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2315, i32 0, i32 1, !dbg !3791
  %2317 = load i64, i64 addrspace(10)* %2316, align 8, !dbg !3791
  %2318 = mul i64 %2317, %2314, !dbg !3791
  %2319 = bitcast {} addrspace(10)* %2253 to i8 addrspace(13)* addrspace(10)*, !dbg !3791
  %2320 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2319, align 8, !dbg !3791
  %2321 = bitcast {} addrspace(10)* %2310 to i8 addrspace(13)* addrspace(10)*, !dbg !3791
  %2322 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2321, align 8, !dbg !3791
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %2322, i8 0, i64 %2318, i1 false), !dbg !3791
  %2323 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %2266) #70, !dbg !3791
  %2324 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi34_cache", align 8, !dbg !3793, !dereferenceable !3229, !invariant.group !3512
  %2325 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2324, i64 %iv9, !dbg !3793
  store {} addrspace(10)* %2310, {} addrspace(10)* addrspace(10)* %2325, align 8, !dbg !3793, !invariant.group !3796
  %2326 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache337, align 8, !dbg !3793, !dereferenceable !3229, !invariant.group !3519
  %2327 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2326, i64 %iv9, !dbg !3793
  store {} addrspace(10)* %2310, {} addrspace(10)* addrspace(10)* %2327, align 8, !dbg !3793, !invariant.group !3797
  %2328 = bitcast {} addrspace(10)* addrspace(10)* %2326 to {} addrspace(10)*, !dbg !3793
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2328, {} addrspace(10)* %2310), !dbg !3793
  %2329 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache333, align 8, !dbg !3793, !dereferenceable !3229, !invariant.group !3518
  %2330 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2329, i64 %iv9, !dbg !3793
  store {} addrspace(10)* %2323, {} addrspace(10)* addrspace(10)* %2330, align 8, !dbg !3793, !invariant.group !3798
  %2331 = bitcast {} addrspace(10)* addrspace(10)* %2329 to {} addrspace(10)*, !dbg !3793
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2331, {} addrspace(10)* %2323), !dbg !3793
  %2332 = bitcast {} addrspace(10)* addrspace(10)* %2324 to {} addrspace(10)*, !dbg !3793
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2332, {} addrspace(10)* %2310), !dbg !3793
  br label %L881, !dbg !3793

L881:                                             ; preds = %L878, %L870
  %2333 = phi {} addrspace(10)* [ %2310, %L878 ], [ %2253, %L870 ]
  %value_phi679 = phi {} addrspace(10)* [ %2323, %L878 ], [ %2266, %L870 ]
  store {} addrspace(10)* %"getfield15'ipl", {} addrspace(10)** %".repack917'ipg", align 8, !dbg !3799, !alias.scope !3800, !noalias !3803
  store {} addrspace(10)* %getfield15, {} addrspace(10)** %.repack917, align 8, !dbg !3799, !alias.scope !3805, !noalias !3806
  store i64 %arraysize, i64* %"'ipg343", align 8, !dbg !3799, !alias.scope !3800, !noalias !3803
  store i64 %arraysize, i64* %702, align 8, !dbg !3799, !alias.scope !3805, !noalias !3806
  store i64 %2047, i64* %".repack918.repack924'ipg", align 8, !dbg !3799, !alias.scope !3800, !noalias !3803
  store i64 %2047, i64* %.repack918.repack924, align 8, !dbg !3799, !alias.scope !3805, !noalias !3806
  store i64 %2252, i64* %".repack920'ipg", align 8, !dbg !3799, !alias.scope !3800, !noalias !3803
  store i64 %2252, i64* %.repack920, align 8, !dbg !3799, !alias.scope !3805, !noalias !3806
  store i64 1, i64* %".repack922'ipg", align 8, !dbg !3799, !alias.scope !3800, !noalias !3803
  store i64 1, i64* %.repack922, align 8, !dbg !3799, !alias.scope !3805, !noalias !3806
  %_augmented341 = call fastcc { double addrspace(13)* addrspace(10)*, i64, i64 } @augmented_julia_copyto_unaliased__1986.177({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* nocapture nofree writeonly align 8 "enzyme_sret" %407, [1 x {} addrspace(10)*]* nocapture nofree writeonly align 8 "enzymejl_returnRoots" %408, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree readonly align 8 %703, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'ipc330", {} addrspace(10)* readonly align 16 %value_phi679, {} addrspace(10)* align 16 %2333), !dbg !3799
  %2334 = load { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)*, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)** %_augmented341_cache, align 8, !dbg !3799, !dereferenceable !3229, !invariant.group !3520
  %2335 = getelementptr inbounds { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %2334, i64 %iv9, !dbg !3799
  store { double addrspace(13)* addrspace(10)*, i64, i64 } %_augmented341, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %2335, align 8, !dbg !3799, !invariant.group !3807
  %2336 = bitcast { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %2334 to {} addrspace(10)*, !dbg !3799
  %2337 = extractvalue { double addrspace(13)* addrspace(10)*, i64, i64 } %_augmented341, 0, !dbg !3799
  %2338 = bitcast double addrspace(13)* addrspace(10)* %2337 to {} addrspace(10)*, !dbg !3799
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2336, {} addrspace(10)* %2338), !dbg !3799
  %2339 = load i8*, i8** %_cache372, align 8, !dbg !3799, !dereferenceable !3229, !invariant.group !3531
  %2340 = getelementptr inbounds i8, i8* %2339, i64 %iv9, !dbg !3799
  store i8 2, i8* %2340, align 1, !dbg !3799, !invariant.group !3776
  br label %L968, !dbg !3799

L885:                                             ; preds = %L855
  %2341 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %699) #73, !dbg !3808
  %2342 = bitcast {}* %2341 to i8**, !dbg !3808
  %arrayptr681 = load i8*, i8** %2342, align 8, !dbg !3808, !tbaa !72, !invariant.load !67, !alias.scope !3049, !noalias !3052, !nonnull !67
  %2343 = addrspacecast {} addrspace(10)* %2266 to {} addrspace(11)*, !dbg !3819
  %2344 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %2343) #73, !dbg !3819
  %2345 = bitcast {}* %2344 to i8**, !dbg !3819
  %arrayptr683 = load i8*, i8** %2345, align 8, !dbg !3819, !tbaa !382, !alias.scope !3763, !noalias !3766, !nonnull !67
  %.not926.not = icmp eq i8* %arrayptr681, %arrayptr683, !dbg !3822
  %2346 = load i1*, i1** %.not926.not_cache, align 8, !dbg !3813, !dereferenceable !3229, !invariant.group !3524
  %2347 = getelementptr inbounds i1, i1* %2346, i64 %iv9, !dbg !3813
  store i1 %.not926.not, i1* %2347, align 1, !dbg !3813, !invariant.group !3825
  br i1 %.not926.not, label %L893, label %L898, !dbg !3813

L893:                                             ; preds = %L885
  %2348 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %2253), !dbg !3826
  %2349 = bitcast {} addrspace(10)* %2266 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3826
  %2350 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2349, i32 0, i32 3, !dbg !3826
  %2351 = load i16, i16 addrspace(10)* %2350, align 2, !dbg !3826
  %2352 = zext i16 %2351 to i64, !dbg !3826
  %2353 = bitcast {} addrspace(10)* %2266 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3826
  %2354 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2353, i32 0, i32 1, !dbg !3826
  %2355 = load i64, i64 addrspace(10)* %2354, align 8, !dbg !3826
  %2356 = mul i64 %2355, %2352, !dbg !3826
  %2357 = bitcast {} addrspace(10)* %2253 to i8 addrspace(13)* addrspace(10)*, !dbg !3826
  %2358 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2357, align 8, !dbg !3826
  %2359 = bitcast {} addrspace(10)* %2348 to i8 addrspace(13)* addrspace(10)*, !dbg !3826
  %2360 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2359, align 8, !dbg !3826
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %2360, i8 0, i64 %2356, i1 false), !dbg !3826
  %2361 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %2266) #70, !dbg !3826
  %2362 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi37_cache", align 8, !dereferenceable !3229, !invariant.group !3521
  %2363 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2362, i64 %iv9
  store {} addrspace(10)* %2348, {} addrspace(10)* addrspace(10)* %2363, align 8, !invariant.group !3828
  %2364 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache365, align 8, !dereferenceable !3229, !invariant.group !3525
  %2365 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2364, i64 %iv9
  store {} addrspace(10)* %2348, {} addrspace(10)* addrspace(10)* %2365, align 8, !invariant.group !3829
  %2366 = bitcast {} addrspace(10)* addrspace(10)* %2364 to {} addrspace(10)*
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2366, {} addrspace(10)* %2348)
  %2367 = bitcast {} addrspace(10)* addrspace(10)* %2362 to {} addrspace(10)*
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2367, {} addrspace(10)* %2348)
  %.phi.trans.insert984 = bitcast {} addrspace(10)* %2361 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert985 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert984 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr685.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert985, i64 0, i32 1
  %arraylen686.pre = load i64, i64 addrspace(11)* %arraylen_ptr685.phi.trans.insert, align 8, !dbg !3830, !tbaa !315, !range !86, !alias.scope !3834, !noalias !3837
  br label %L898, !dbg !3793

L898:                                             ; preds = %L893, %L885
  %arraylen686 = phi i64 [ %arraylen686.pre, %L893 ], [ %arraylen467, %L885 ], !dbg !3830
  %2368 = phi {} addrspace(10)* [ %2348, %L893 ], [ %2253, %L885 ]
  %value_phi684 = phi {} addrspace(10)* [ %2361, %L893 ], [ %2266, %L885 ]
  %.not929 = icmp eq i64 %arraylen686, 1, !dbg !3839
  %2369 = load i1*, i1** %.not929_cache, align 8, !dbg !3843, !dereferenceable !3229, !invariant.group !3528
  %2370 = getelementptr inbounds i1, i1* %2369, i64 %iv9, !dbg !3843
  store i1 %.not929, i1* %2370, align 1, !dbg !3843, !invariant.group !3845
  %2371 = load i8*, i8** %_cache372, align 8, !dbg !3843, !dereferenceable !3229, !invariant.group !3531
  %2372 = getelementptr inbounds i8, i8* %2371, i64 %iv9, !dbg !3843
  store i8 1, i8* %2372, align 1, !dbg !3843, !invariant.group !3776
  br i1 %.not822, label %L968, label %L940.lr.ph, !dbg !3843

L940.lr.ph:                                       ; preds = %L898
  %"'ipc356" = bitcast {} addrspace(10)* %2368 to double addrspace(13)* addrspace(10)*
  %2373 = bitcast {} addrspace(10)* %value_phi684 to double addrspace(13)* addrspace(10)*
  %"'ipc357" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc356" to double addrspace(13)* addrspace(11)*
  %2374 = addrspacecast double addrspace(13)* addrspace(10)* %2373 to double addrspace(13)* addrspace(11)*
  %"arrayptr694930'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc357", align 8, !tbaa !382, !alias.scope !3846, !noalias !3849, !nonnull !67, !invariant.group !3851
  %arrayptr694930 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %2374, align 8, !tbaa !382, !alias.scope !3852, !noalias !3853, !nonnull !67
  br label %L940, !dbg !3854

L940:                                             ; preds = %L940, %L940.lr.ph
  %iv13 = phi i64 [ %iv.next14, %L940 ], [ 0, %L940.lr.ph ]
  %iv.next14 = add nuw nsw i64 %iv13, 1, !dbg !3855
  %2375 = select i1 %.not929, i64 0, i64 %iv13, !dbg !3855
  %"'ipg363" = getelementptr inbounds double, double addrspace(13)* %"arrayptr694930'ipl", i64 %2375, !dbg !3855
  %2376 = getelementptr inbounds double, double addrspace(13)* %arrayptr694930, i64 %2375, !dbg !3855
  %arrayref695 = load double, double addrspace(13)* %2376, align 8, !dbg !3855, !tbaa !268, !alias.scope !3862, !noalias !3865
  %2377 = add i64 %iv13, %2252, !dbg !3867
  %"'ipg358" = getelementptr inbounds double, double addrspace(13)* %"arrayptr698931'ipl", i64 %2377, !dbg !3867
  %2378 = getelementptr inbounds double, double addrspace(13)* %arrayptr698931, i64 %2377, !dbg !3867
  store double %arrayref695, double addrspace(13)* %2378, align 8, !dbg !3867, !tbaa !268, !alias.scope !3869, !noalias !3872
  %exitcond.not = icmp eq i64 %iv.next14, %arraysize, !dbg !3874
  br i1 %exitcond.not, label %L968.loopexit, label %L940, !dbg !3854, !llvm.loop !3875

L968.loopexit:                                    ; preds = %L940
  %2379 = load i8*, i8** %_cache372, align 8, !dbg !3876, !dereferenceable !3229, !invariant.group !3531
  %2380 = getelementptr inbounds i8, i8* %2379, i64 %iv9, !dbg !3876
  store i8 0, i8* %2380, align 1, !dbg !3876, !invariant.group !3776
  br label %L968, !dbg !3876

L968:                                             ; preds = %L968.loopexit, %L898, %L881, %L866
  %2381 = fadd double %465, %value_phi372, !dbg !3876
  %arraylen478 = load i64, i64 addrspace(11)* %arraylen_ptr477, align 8, !dbg !3878, !tbaa !315, !range !86, !alias.scope !3882, !noalias !3885
  %.not891 = icmp eq i64 %arraylen478, 0, !dbg !3887
  %2382 = load i8*, i8** %_cache635, align 8, !dbg !3879, !dereferenceable !3229, !invariant.group !3596
  %2383 = getelementptr inbounds i8, i8* %2382, i64 %iv9, !dbg !3879
  store i8 1, i8* %2383, align 1, !dbg !3879, !invariant.group !3889
  br i1 %.not891, label %pass612.2, label %L985, !dbg !3879

L985:                                             ; preds = %L968
  %arrayptr480892 = load i64 addrspace(13)*, i64 addrspace(13)* addrspace(11)* %707, align 16, !dbg !3890, !tbaa !382, !alias.scope !3891, !noalias !3885, !nonnull !67
  %value_phi4851035 = load i64, i64 addrspace(13)* %arrayptr480892, align 8, !dbg !3892, !tbaa !268, !alias.scope !3893, !noalias !3896
  %.not8931036 = icmp eq i64 %value_phi4851035, %2047, !dbg !3898
  %2384 = load i1*, i1** %.not8931036_cache, align 8, !dbg !3900, !dereferenceable !3229, !invariant.group !3537
  %2385 = getelementptr inbounds i1, i1* %2384, i64 %iv9, !dbg !3900
  store i1 %.not8931036, i1* %2385, align 1, !dbg !3900, !invariant.group !3901
  br i1 %.not8931036, label %L1013.critedge, label %L992.lr.ph, !dbg !3900

L992.lr.ph:                                       ; preds = %L985
  %2386 = add nuw nsw i64 %arraylen478, 1, !dbg !3900
  br label %L992, !dbg !3900

L992:                                             ; preds = %L1004, %L992.lr.ph
  %iv15 = phi i64 [ %iv.next16, %L1004 ], [ 0, %L992.lr.ph ]
  %iv.next16 = add nuw nsw i64 %iv15, 1, !dbg !3902
  %2387 = add i64 %iv15, 2, !dbg !3902
  %exitcond1055.not = icmp eq i64 %2387, %2386, !dbg !3902
  br i1 %exitcond1055.not, label %pass612.2.loopexit, label %L1004, !dbg !3793

L1004:                                            ; preds = %L992
  %2388 = add nsw i64 %2387, -1, !dbg !3904
  %2389 = getelementptr inbounds i64, i64 addrspace(13)* %arrayptr480892, i64 %2388, !dbg !3906
  %value_phi485 = load i64, i64 addrspace(13)* %2389, align 8, !dbg !3892, !tbaa !268, !alias.scope !3893, !noalias !3896
  %.not893 = icmp eq i64 %value_phi485, %2047, !dbg !3898
  br i1 %.not893, label %L1013.critedge.loopexit, label %L992, !dbg !3900

L1013.critedge.loopexit:                          ; preds = %L1004
  br label %L1013.critedge, !dbg !3907

L1013.critedge:                                   ; preds = %L1013.critedge.loopexit, %L985
  %2390 = load double, double addrspace(11)* %710, align 8, !dbg !3907, !tbaa !865, !alias.scope !3026, !noalias !3027
  %2391 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize498), !dbg !3909
  %2392 = mul i64 %arraysize498, 8, !dbg !3909
  %2393 = bitcast {} addrspace(10)* %2391 to i8 addrspace(13)* addrspace(10)*, !dbg !3909
  %2394 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2393, align 8, !dbg !3909
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2394, i8 0, i64 %2392, i1 false), !dbg !3909
  %2395 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize498) #74, !dbg !3909
  %_augmented382 = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1996({} addrspace(10)* align 16 %2395, {} addrspace(10)* align 16 %2391, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl"), !dbg !3914
  %subcache383 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented382, 0, !dbg !3914
  %2396 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented382, 1, !dbg !3914
  %"'ac384" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented382, 2, !dbg !3914
  store i64 %arraysize500, i64* %memcpy_refined_dst508, align 8, !dbg !3917, !tbaa !132, !alias.scope !134, !noalias !3056
  %2397 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented382_cache, align 8, !dbg !3917, !dereferenceable !3229, !invariant.group !3547
  %2398 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2397, i64 %iv9, !dbg !3917
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented382, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2398, align 8, !dbg !3917, !invariant.group !3920
  %2399 = bitcast { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2397 to {} addrspace(10)*, !dbg !3917
  %2400 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented382, 0, !dbg !3917
  %2401 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented382, 1, !dbg !3917
  %2402 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented382, 2, !dbg !3917
  %2403 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2400, 1, !dbg !3917
  %2404 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2400, 2, !dbg !3917
  %2405 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2400, 4, !dbg !3917
  %2406 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2400, 5, !dbg !3917
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2399, {} addrspace(10)* %2401, {} addrspace(10)* %2402, {} addrspace(10)* %2403, {} addrspace(10)* %2404, {} addrspace(10)* %2405, {} addrspace(10)* %2406), !dbg !3917
  %2407 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache430, align 8, !dbg !3917, !dereferenceable !3229, !invariant.group !3546
  %2408 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2407, i64 %iv9, !dbg !3917
  store {} addrspace(10)* %2396, {} addrspace(10)* addrspace(10)* %2408, align 8, !dbg !3917, !invariant.group !3921
  %2409 = bitcast {} addrspace(10)* addrspace(10)* %2407 to {} addrspace(10)*, !dbg !3917
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2409, {} addrspace(10)* %2396), !dbg !3917
  %2410 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache383_cache, align 8, !dbg !3917, !dereferenceable !3229, !invariant.group !3534
  %2411 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2410, i64 %iv9, !dbg !3917
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache383, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2411, align 8, !dbg !3917, !invariant.group !3922
  %2412 = bitcast { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2410 to {} addrspace(10)*, !dbg !3917
  %2413 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache383, 1, !dbg !3917
  %2414 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache383, 2, !dbg !3917
  %2415 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache383, 4, !dbg !3917
  %2416 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache383, 5, !dbg !3917
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2412, {} addrspace(10)* %2413, {} addrspace(10)* %2414, {} addrspace(10)* %2415, {} addrspace(10)* %2416), !dbg !3917
  %2417 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi39_cache", align 8, !dbg !3917, !dereferenceable !3229, !invariant.group !3533
  %2418 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2417, i64 %iv9, !dbg !3917
  store {} addrspace(10)* %2391, {} addrspace(10)* addrspace(10)* %2418, align 8, !dbg !3917, !invariant.group !3923
  %2419 = bitcast {} addrspace(10)* addrspace(10)* %2417 to {} addrspace(10)*, !dbg !3917
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2419, {} addrspace(10)* %2391), !dbg !3917
  %2420 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache377, align 8, !dbg !3917, !dereferenceable !3229, !invariant.group !3532
  %2421 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2420, i64 %iv9, !dbg !3917
  store {} addrspace(10)* %2395, {} addrspace(10)* addrspace(10)* %2421, align 8, !dbg !3917, !invariant.group !3924
  %2422 = bitcast {} addrspace(10)* addrspace(10)* %2420 to {} addrspace(10)*, !dbg !3917
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2422, {} addrspace(10)* %2395), !dbg !3917
  store i64 %2047, i64* %717, align 8, !dbg !3917, !tbaa !132, !alias.scope !134, !noalias !3056
  %.not894 = icmp ult i64 %2797, %arraysize510, !dbg !3925
  br i1 %.not894, label %L1061, label %L1058, !dbg !3930

L1058:                                            ; preds = %L1013.critedge
  %2423 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct506 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !3930
  call fastcc void @julia_throw_boundserror_1991({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield17, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %2423) #71, !dbg !3930
  unreachable

L1061:                                            ; preds = %L1013.critedge
  store i64 %arraysize500, i64* %memcpy_refined_dst514, align 8, !dbg !3931, !tbaa !132, !alias.scope !134, !noalias !3056
  %2424 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize500), !dbg !3935
  %2425 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache391, align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3538
  %2426 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2425, i64 %iv9, !dbg !3935
  store {} addrspace(10)* %2424, {} addrspace(10)* addrspace(10)* %2426, align 8, !dbg !3935, !invariant.group !3940
  %2427 = bitcast {} addrspace(10)* addrspace(10)* %2425 to {} addrspace(10)*, !dbg !3935
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2427, {} addrspace(10)* %2424), !dbg !3935
  %2428 = mul i64 %arraysize500, 8, !dbg !3935
  %2429 = bitcast {} addrspace(10)* %2424 to i8 addrspace(13)* addrspace(10)*, !dbg !3935
  %2430 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2429, align 8, !dbg !3935
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2430, i8 0, i64 %2428, i1 false), !dbg !3935
  %2431 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize500) #74, !dbg !3935
  %2432 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache446, align 8, !dbg !3941, !dereferenceable !3229, !invariant.group !3553
  %2433 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2432, i64 %iv9, !dbg !3941
  store {} addrspace(10)* %2431, {} addrspace(10)* addrspace(10)* %2433, align 8, !dbg !3941, !invariant.group !3944
  %2434 = bitcast {} addrspace(10)* addrspace(10)* %2432 to {} addrspace(10)*, !dbg !3941
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2434, {} addrspace(10)* %2431), !dbg !3941
  %2435 = bitcast {} addrspace(10)* %2431 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3941
  %2436 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %2435 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3941
  %arraylen_ptr515 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %2436, i64 0, i32 1, !dbg !3941
  %arraylen516 = load i64, i64 addrspace(11)* %arraylen_ptr515, align 8, !dbg !3941, !tbaa !315, !range !86, !alias.scope !3945, !noalias !3948
  %.not895 = icmp eq i64 %arraylen516, %arraysize500, !dbg !3950
  br i1 %.not895, label %L1074, label %L1127, !dbg !3943

L1074:                                            ; preds = %L1061
  br i1 %.not896, label %L1131.L1132_crit_edge, label %L1095.preheader, !dbg !3953

L1095.preheader:                                  ; preds = %L1074
  %2437 = mul i64 %2797, %arraysize500, !dbg !3956
  %2438 = add i64 %2437, -1, !dbg !3956
  %"arrayptr655911'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc396", align 16, !alias.scope !3470, !noalias !3467, !invariant.group !3959
  %arrayptr655911 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %720, align 16, !alias.scope !3467, !noalias !3470
  %"'ipc399" = bitcast {} addrspace(10)* %2424 to double addrspace(13)* addrspace(10)*
  %2439 = bitcast {} addrspace(10)* %2431 to double addrspace(13)* addrspace(10)*
  %"'ipc400" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc399" to double addrspace(13)* addrspace(11)*
  %2440 = addrspacecast double addrspace(13)* addrspace(10)* %2439 to double addrspace(13)* addrspace(11)*
  %2441 = load i64**, i64*** %value_phi529_cache, align 8, !dbg !3960, !invariant.group !3961
  %2442 = getelementptr inbounds i64*, i64** %2441, i64 %iv9, !dbg !3960
  store i64* null, i64** %2442, align 8, !dbg !3960
  br label %L1095, !dbg !3960

L1095:                                            ; preds = %L1102, %L1095.preheader
  %iv17 = phi i64 [ %iv.next18, %L1102 ], [ 0, %L1095.preheader ]
  %value_phi528.off0 = phi i1 [ %2469, %L1102 ], [ false, %L1095.preheader ]
  %value_phi529 = phi i64 [ %value_phi661, %L1102 ], [ 1, %L1095.preheader ]
  %iv.next18 = add nuw nsw i64 %iv17, 1, !dbg !3960
  %2443 = load i64*, i64** %2442, align 8, !dbg !3960
  %2444 = bitcast i64* %2443 to i8*, !dbg !3960
  %2445 = and i64 %iv.next18, 1, !dbg !3960
  %2446 = icmp ne i64 %2445, 0, !dbg !3960
  %2447 = call i64 @llvm.ctpop.i64(i64 %iv.next18), !dbg !3960
  %2448 = icmp ult i64 %2447, 3, !dbg !3960
  %2449 = and i1 %2448, %2446, !dbg !3960
  br i1 %2449, label %grow.i726, label %__enzyme_exponentialallocationzero.exit727, !dbg !3960

grow.i726:                                        ; preds = %L1095
  %2450 = call i64 @llvm.ctlz.i64(i64 %iv.next18, i1 true), !dbg !3960
  %2451 = sub nuw nsw i64 64, %2450, !dbg !3960
  %2452 = shl i64 8, %2451, !dbg !3960
  %2453 = icmp eq i64 %iv.next18, 1, !dbg !3960
  %2454 = lshr i64 %2452, 1, !dbg !3960
  %2455 = select i1 %2453, i64 0, i64 %2454, !dbg !3960
  %2456 = call i8* @realloc(i8* %2444, i64 %2452) #75, !dbg !3960
  %2457 = sub i64 %2452, %2455, !dbg !3960
  %2458 = getelementptr inbounds i8, i8* %2456, i64 %2455, !dbg !3960
  call void @llvm.memset.p0i8.i64(i8* %2458, i8 0, i64 %2457, i1 false), !dbg !3960
  br label %__enzyme_exponentialallocationzero.exit727, !dbg !3960

__enzyme_exponentialallocationzero.exit727:       ; preds = %L1095, %grow.i726
  %2459 = phi i8* [ %2456, %grow.i726 ], [ %2444, %L1095 ], !dbg !3960
  %2460 = bitcast i8* %2459 to i64*, !dbg !3960
  store i64* %2460, i64** %2442, align 8, !dbg !3960
  %2461 = load i64**, i64*** %value_phi529_cache, align 8, !dbg !3960, !dereferenceable !3229, !invariant.group !3541
  %2462 = getelementptr inbounds i64*, i64** %2461, i64 %iv9, !dbg !3960
  %2463 = load i64*, i64** %2462, align 8, !dbg !3960, !dereferenceable !3229, !invariant.group !3962
  %2464 = getelementptr inbounds i64, i64* %2463, i64 %iv17, !dbg !3960
  store i64 %value_phi529, i64* %2464, align 8, !dbg !3960, !invariant.group !3963
  br i1 %value_phi528.off0, label %L1131.L1132_crit_edge.loopexit, label %L1102, !dbg !3960

L1102:                                            ; preds = %__enzyme_exponentialallocationzero.exit727
  %2465 = add i64 %2438, %iv.next18, !dbg !3956
  %"'ipg407" = getelementptr inbounds double, double addrspace(13)* %"arrayptr655911'ipl", i64 %2465, !dbg !3956
  %2466 = getelementptr inbounds double, double addrspace(13)* %arrayptr655911, i64 %2465, !dbg !3956
  %arrayref656 = load double, double addrspace(13)* %2466, align 8, !dbg !3956, !tbaa !268, !alias.scope !3964, !noalias !3967
  %2467 = add i64 %value_phi529, -1, !dbg !3969
  %"arrayptr658912'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc400", align 8, !dbg !3969, !tbaa !382, !alias.scope !3970, !noalias !3971, !nonnull !67
  %arrayptr658912 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %2440, align 8, !dbg !3969, !tbaa !382, !alias.scope !3972, !noalias !3948, !nonnull !67
  %"'ipg398" = getelementptr inbounds double, double addrspace(13)* %"arrayptr658912'ipl", i64 %2467, !dbg !3969
  %2468 = getelementptr inbounds double, double addrspace(13)* %arrayptr658912, i64 %2467, !dbg !3969
  store double %arrayref656, double addrspace(13)* %2468, align 8, !dbg !3969, !tbaa !268, !alias.scope !3973, !noalias !3976
  %2469 = icmp eq i64 %value_phi529, %arraysize500, !dbg !3978
  %2470 = add i64 %value_phi529, 1, !dbg !3979
  %value_phi661 = select i1 %2469, i64 undef, i64 %2470, !dbg !3979
  %.not913 = icmp eq i64 %iv.next18, %arraysize500, !dbg !3981
  br i1 %.not913, label %L1131.L1132_crit_edge.loopexit, label %L1095, !dbg !3984

L1127:                                            ; preds = %L1061
  %2471 = addrspacecast [1 x [1 x i64]]* %newstruct512 to [1 x [1 x i64]] addrspace(11)*, !dbg !3943
  call fastcc void @julia_throw_checksize_error_1989({} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %2431, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %2471) #71, !dbg !3943
  unreachable

L1131.L1132_crit_edge.loopexit:                   ; preds = %L1102, %__enzyme_exponentialallocationzero.exit727
  %"value_phi528.off0!manual_lcssa" = phi i1 [ %value_phi528.off0, %L1102 ], [ %value_phi528.off0, %__enzyme_exponentialallocationzero.exit727 ], !dbg !3909
  %2472 = phi i64 [ %iv17, %L1102 ], [ %iv17, %__enzyme_exponentialallocationzero.exit727 ], !dbg !3909
  %2473 = load i64*, i64** %loopLimit_cache43, align 8, !dbg !3909, !dereferenceable !3229, !invariant.group !3479
  %2474 = getelementptr inbounds i64, i64* %2473, i64 %iv9, !dbg !3909
  store i64 %2472, i64* %2474, align 8, !dbg !3909, !invariant.group !3985
  br label %L1131.L1132_crit_edge, !dbg !3909

L1131.L1132_crit_edge:                            ; preds = %L1131.L1132_crit_edge.loopexit, %L1074
  %2475 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize498), !dbg !3909
  %2476 = mul i64 %arraysize498, 8, !dbg !3909
  %2477 = bitcast {} addrspace(10)* %2475 to i8 addrspace(13)* addrspace(10)*, !dbg !3909
  %2478 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2477, align 8, !dbg !3909
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2478, i8 0, i64 %2476, i1 false), !dbg !3909
  %2479 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize498) #74, !dbg !3909
  %_augmented449 = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1996({} addrspace(10)* align 16 %2479, {} addrspace(10)* align 16 %2475, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %2431, {} addrspace(10)* align 16 %2424), !dbg !3914
  %subcache450 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented449, 0, !dbg !3914
  %2480 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented449, 1, !dbg !3914
  %"'ac451" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented449, 2, !dbg !3914
  %_augmented438 = call fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2046({} addrspace(10)* align 16 %2396, {} addrspace(10)* align 16 %"'ac384", {} addrspace(10)* align 16 %2480, {} addrspace(10)* align 16 %"'ac451"), !dbg !3908
  %subcache439 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented438, 0, !dbg !3908
  %2481 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented438, 1, !dbg !3908
  %"'ac440" = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented438, 2, !dbg !3908
  %2482 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize498), !dbg !3909
  %2483 = mul i64 %arraysize498, 8, !dbg !3909
  %2484 = bitcast {} addrspace(10)* %2482 to i8 addrspace(13)* addrspace(10)*, !dbg !3909
  %2485 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2484, align 8, !dbg !3909
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2485, i8 0, i64 %2483, i1 false), !dbg !3909
  %2486 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize498) #74, !dbg !3909
  %_augmented426 = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1996({} addrspace(10)* align 16 %2486, {} addrspace(10)* align 16 %2482, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl"), !dbg !3914
  %subcache427 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented426, 0, !dbg !3914
  %2487 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented426, 1, !dbg !3914
  %"'ac428" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented426, 2, !dbg !3914
  store i64 %arraysize500, i64* %memcpy_refined_dst570, align 8, !dbg !3931, !tbaa !132, !alias.scope !134, !noalias !3056
  %2488 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented426_cache, align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3562
  %2489 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2488, i64 %iv9, !dbg !3935
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented426, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2489, align 8, !dbg !3935, !invariant.group !3986
  %2490 = bitcast { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2488 to {} addrspace(10)*, !dbg !3935
  %2491 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented426, 0, !dbg !3935
  %2492 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented426, 1, !dbg !3935
  %2493 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented426, 2, !dbg !3935
  %2494 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2491, 1, !dbg !3935
  %2495 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2491, 2, !dbg !3935
  %2496 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2491, 4, !dbg !3935
  %2497 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2491, 5, !dbg !3935
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2490, {} addrspace(10)* %2492, {} addrspace(10)* %2493, {} addrspace(10)* %2494, {} addrspace(10)* %2495, {} addrspace(10)* %2496, {} addrspace(10)* %2497), !dbg !3935
  %2498 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache493, align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3561
  %2499 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2498, i64 %iv9, !dbg !3935
  store {} addrspace(10)* %2487, {} addrspace(10)* addrspace(10)* %2499, align 8, !dbg !3935, !invariant.group !3987
  %2500 = bitcast {} addrspace(10)* addrspace(10)* %2498 to {} addrspace(10)*, !dbg !3935
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2500, {} addrspace(10)* %2487), !dbg !3935
  %2501 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache450_cache, align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3554
  %2502 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2501, i64 %iv9, !dbg !3935
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache450, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2502, align 8, !dbg !3935, !invariant.group !3988
  %2503 = bitcast { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2501 to {} addrspace(10)*, !dbg !3935
  %2504 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache450, 1, !dbg !3935
  %2505 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache450, 2, !dbg !3935
  %2506 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache450, 4, !dbg !3935
  %2507 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache450, 5, !dbg !3935
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2503, {} addrspace(10)* %2504, {} addrspace(10)* %2505, {} addrspace(10)* %2506, {} addrspace(10)* %2507), !dbg !3935
  %2508 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi47_cache", align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3552
  %2509 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2508, i64 %iv9, !dbg !3935
  store {} addrspace(10)* %2475, {} addrspace(10)* addrspace(10)* %2509, align 8, !dbg !3935, !invariant.group !3989
  %2510 = bitcast {} addrspace(10)* addrspace(10)* %2508 to {} addrspace(10)*, !dbg !3935
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2510, {} addrspace(10)* %2475), !dbg !3935
  %2511 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache442, align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3551
  %2512 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2511, i64 %iv9, !dbg !3935
  store {} addrspace(10)* %2479, {} addrspace(10)* addrspace(10)* %2512, align 8, !dbg !3935, !invariant.group !3990
  %2513 = bitcast {} addrspace(10)* addrspace(10)* %2511 to {} addrspace(10)*, !dbg !3935
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2513, {} addrspace(10)* %2479), !dbg !3935
  %2514 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache439_cache, align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3550
  %2515 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %2514, i64 %iv9, !dbg !3935
  store { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache439, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %2515, align 8, !dbg !3935, !invariant.group !3991
  %2516 = bitcast { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %2514 to {} addrspace(10)*, !dbg !3935
  %2517 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache439, 0, !dbg !3935
  %2518 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache439, 1, !dbg !3935
  %2519 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache439, 2, !dbg !3935
  %2520 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache439, 3, !dbg !3935
  %2521 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache439, 4, !dbg !3935
  %2522 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache439, 5, !dbg !3935
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2516, {} addrspace(10)* %2517, {} addrspace(10)* %2518, {} addrspace(10)* %2519, {} addrspace(10)* %2520, {} addrspace(10)* %2521, {} addrspace(10)* %2522), !dbg !3935
  %2523 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi48_cache", align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3549
  %2524 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2523, i64 %iv9, !dbg !3935
  store {} addrspace(10)* %"'ac451", {} addrspace(10)* addrspace(10)* %2524, align 8, !dbg !3935, !invariant.group !3992
  %2525 = bitcast {} addrspace(10)* addrspace(10)* %2523 to {} addrspace(10)*, !dbg !3935
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2525, {} addrspace(10)* %"'ac451"), !dbg !3935
  %2526 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache434, align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3548
  %2527 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2526, i64 %iv9, !dbg !3935
  store {} addrspace(10)* %2480, {} addrspace(10)* addrspace(10)* %2527, align 8, !dbg !3935, !invariant.group !3993
  %2528 = bitcast {} addrspace(10)* addrspace(10)* %2526 to {} addrspace(10)*, !dbg !3935
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2528, {} addrspace(10)* %2480), !dbg !3935
  %2529 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache427_cache, align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3545
  %2530 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2529, i64 %iv9, !dbg !3935
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache427, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2530, align 8, !dbg !3935, !invariant.group !3994
  %2531 = bitcast { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2529 to {} addrspace(10)*, !dbg !3935
  %2532 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache427, 1, !dbg !3935
  %2533 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache427, 2, !dbg !3935
  %2534 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache427, 4, !dbg !3935
  %2535 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache427, 5, !dbg !3935
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2531, {} addrspace(10)* %2532, {} addrspace(10)* %2533, {} addrspace(10)* %2534, {} addrspace(10)* %2535), !dbg !3935
  %2536 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi51_cache", align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3544
  %2537 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2536, i64 %iv9, !dbg !3935
  store {} addrspace(10)* %2482, {} addrspace(10)* addrspace(10)* %2537, align 8, !dbg !3935, !invariant.group !3995
  %2538 = bitcast {} addrspace(10)* addrspace(10)* %2536 to {} addrspace(10)*, !dbg !3935
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2538, {} addrspace(10)* %2482), !dbg !3935
  %2539 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache422, align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3543
  %2540 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2539, i64 %iv9, !dbg !3935
  store {} addrspace(10)* %2486, {} addrspace(10)* addrspace(10)* %2540, align 8, !dbg !3935, !invariant.group !3996
  %2541 = bitcast {} addrspace(10)* addrspace(10)* %2539 to {} addrspace(10)*, !dbg !3935
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2541, {} addrspace(10)* %2486), !dbg !3935
  %2542 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize500), !dbg !3935
  %2543 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache418, align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3542
  %2544 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2543, i64 %iv9, !dbg !3935
  store {} addrspace(10)* %2542, {} addrspace(10)* addrspace(10)* %2544, align 8, !dbg !3935, !invariant.group !3997
  %2545 = bitcast {} addrspace(10)* addrspace(10)* %2543 to {} addrspace(10)*, !dbg !3935
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2545, {} addrspace(10)* %2542), !dbg !3935
  %2546 = mul i64 %arraysize500, 8, !dbg !3935
  %2547 = bitcast {} addrspace(10)* %2542 to i8 addrspace(13)* addrspace(10)*, !dbg !3935
  %2548 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2547, align 8, !dbg !3935
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2548, i8 0, i64 %2546, i1 false), !dbg !3935
  %2549 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize500) #74, !dbg !3935
  %2550 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache509, align 8, !dbg !3941, !dereferenceable !3229, !invariant.group !3568
  %2551 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2550, i64 %iv9, !dbg !3941
  store {} addrspace(10)* %2549, {} addrspace(10)* addrspace(10)* %2551, align 8, !dbg !3941, !invariant.group !3998
  %2552 = bitcast {} addrspace(10)* addrspace(10)* %2550 to {} addrspace(10)*, !dbg !3941
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2552, {} addrspace(10)* %2549), !dbg !3941
  %2553 = bitcast {} addrspace(10)* %2549 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3941
  %2554 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %2553 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3941
  %arraylen_ptr571 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %2554, i64 0, i32 1, !dbg !3941
  %arraylen572 = load i64, i64 addrspace(11)* %arraylen_ptr571, align 8, !dbg !3941, !tbaa !315, !range !86, !alias.scope !3999, !noalias !4002
  %.not900 = icmp eq i64 %arraylen572, %arraysize500, !dbg !3950
  br i1 %.not900, label %L1219, label %L1272, !dbg !3943

L1219:                                            ; preds = %L1131.L1132_crit_edge
  br i1 %.not896, label %L1276.L1277_crit_edge, label %L1240.preheader, !dbg !3953

L1240.preheader:                                  ; preds = %L1219
  %2555 = mul i64 %2797, %arraysize500, !dbg !3956
  %2556 = add i64 %2555, -1, !dbg !3956
  %"arrayptr639908'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc396", align 16, !alias.scope !3470, !noalias !3467, !invariant.group !4004
  %arrayptr639908 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %720, align 16, !alias.scope !3467, !noalias !3470
  %"'ipc455" = bitcast {} addrspace(10)* %2542 to double addrspace(13)* addrspace(10)*
  %2557 = bitcast {} addrspace(10)* %2549 to double addrspace(13)* addrspace(10)*
  %"'ipc456" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc455" to double addrspace(13)* addrspace(11)*
  %2558 = addrspacecast double addrspace(13)* addrspace(10)* %2557 to double addrspace(13)* addrspace(11)*
  %2559 = load i64**, i64*** %value_phi585_cache, align 8, !dbg !3960, !invariant.group !4005
  %2560 = getelementptr inbounds i64*, i64** %2559, i64 %iv9, !dbg !3960
  store i64* null, i64** %2560, align 8, !dbg !3960
  br label %L1240, !dbg !3960

L1240:                                            ; preds = %L1247, %L1240.preheader
  %iv19 = phi i64 [ %iv.next20, %L1247 ], [ 0, %L1240.preheader ]
  %value_phi584.off0 = phi i1 [ %2587, %L1247 ], [ false, %L1240.preheader ]
  %value_phi585 = phi i64 [ %value_phi645, %L1247 ], [ 1, %L1240.preheader ]
  %iv.next20 = add nuw nsw i64 %iv19, 1, !dbg !3960
  %2561 = load i64*, i64** %2560, align 8, !dbg !3960
  %2562 = bitcast i64* %2561 to i8*, !dbg !3960
  %2563 = and i64 %iv.next20, 1, !dbg !3960
  %2564 = icmp ne i64 %2563, 0, !dbg !3960
  %2565 = call i64 @llvm.ctpop.i64(i64 %iv.next20), !dbg !3960
  %2566 = icmp ult i64 %2565, 3, !dbg !3960
  %2567 = and i1 %2566, %2564, !dbg !3960
  br i1 %2567, label %grow.i728, label %__enzyme_exponentialallocationzero.exit729, !dbg !3960

grow.i728:                                        ; preds = %L1240
  %2568 = call i64 @llvm.ctlz.i64(i64 %iv.next20, i1 true), !dbg !3960
  %2569 = sub nuw nsw i64 64, %2568, !dbg !3960
  %2570 = shl i64 8, %2569, !dbg !3960
  %2571 = icmp eq i64 %iv.next20, 1, !dbg !3960
  %2572 = lshr i64 %2570, 1, !dbg !3960
  %2573 = select i1 %2571, i64 0, i64 %2572, !dbg !3960
  %2574 = call i8* @realloc(i8* %2562, i64 %2570) #75, !dbg !3960
  %2575 = sub i64 %2570, %2573, !dbg !3960
  %2576 = getelementptr inbounds i8, i8* %2574, i64 %2573, !dbg !3960
  call void @llvm.memset.p0i8.i64(i8* %2576, i8 0, i64 %2575, i1 false), !dbg !3960
  br label %__enzyme_exponentialallocationzero.exit729, !dbg !3960

__enzyme_exponentialallocationzero.exit729:       ; preds = %L1240, %grow.i728
  %2577 = phi i8* [ %2574, %grow.i728 ], [ %2562, %L1240 ], !dbg !3960
  %2578 = bitcast i8* %2577 to i64*, !dbg !3960
  store i64* %2578, i64** %2560, align 8, !dbg !3960
  %2579 = load i64**, i64*** %value_phi585_cache, align 8, !dbg !3960, !dereferenceable !3229, !invariant.group !3557
  %2580 = getelementptr inbounds i64*, i64** %2579, i64 %iv9, !dbg !3960
  %2581 = load i64*, i64** %2580, align 8, !dbg !3960, !dereferenceable !3229, !invariant.group !4006
  %2582 = getelementptr inbounds i64, i64* %2581, i64 %iv19, !dbg !3960
  store i64 %value_phi585, i64* %2582, align 8, !dbg !3960, !invariant.group !4007
  br i1 %value_phi584.off0, label %L1276.L1277_crit_edge.loopexit, label %L1247, !dbg !3960

L1247:                                            ; preds = %__enzyme_exponentialallocationzero.exit729
  %2583 = add i64 %2556, %iv.next20, !dbg !3956
  %"'ipg463" = getelementptr inbounds double, double addrspace(13)* %"arrayptr639908'ipl", i64 %2583, !dbg !3956
  %2584 = getelementptr inbounds double, double addrspace(13)* %arrayptr639908, i64 %2583, !dbg !3956
  %arrayref640 = load double, double addrspace(13)* %2584, align 8, !dbg !3956, !tbaa !268, !alias.scope !4008, !noalias !4011
  %2585 = add i64 %value_phi585, -1, !dbg !3969
  %"arrayptr642909'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc456", align 8, !dbg !3969, !tbaa !382, !alias.scope !4013, !noalias !4014, !nonnull !67
  %arrayptr642909 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %2558, align 8, !dbg !3969, !tbaa !382, !alias.scope !4015, !noalias !4002, !nonnull !67
  %"'ipg454" = getelementptr inbounds double, double addrspace(13)* %"arrayptr642909'ipl", i64 %2585, !dbg !3969
  %2586 = getelementptr inbounds double, double addrspace(13)* %arrayptr642909, i64 %2585, !dbg !3969
  store double %arrayref640, double addrspace(13)* %2586, align 8, !dbg !3969, !tbaa !268, !alias.scope !4016, !noalias !4019
  %2587 = icmp eq i64 %value_phi585, %arraysize500, !dbg !3978
  %2588 = add i64 %value_phi585, 1, !dbg !3979
  %value_phi645 = select i1 %2587, i64 undef, i64 %2588, !dbg !3979
  %.not910 = icmp eq i64 %iv.next20, %arraysize500, !dbg !3981
  br i1 %.not910, label %L1276.L1277_crit_edge.loopexit, label %L1240, !dbg !3984

L1272:                                            ; preds = %L1131.L1132_crit_edge
  %2589 = addrspacecast [1 x [1 x i64]]* %newstruct568 to [1 x [1 x i64]] addrspace(11)*, !dbg !3943
  call fastcc void @julia_throw_checksize_error_1989({} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %2549, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %2589) #71, !dbg !3943
  unreachable

L1276.L1277_crit_edge.loopexit:                   ; preds = %L1247, %__enzyme_exponentialallocationzero.exit729
  %"value_phi584.off0!manual_lcssa" = phi i1 [ %value_phi584.off0, %L1247 ], [ %value_phi584.off0, %__enzyme_exponentialallocationzero.exit729 ], !dbg !3909
  %2590 = phi i64 [ %iv19, %L1247 ], [ %iv19, %__enzyme_exponentialallocationzero.exit729 ], !dbg !3909
  %2591 = load i64*, i64** %loopLimit_cache55, align 8, !dbg !3909, !dereferenceable !3229, !invariant.group !3482
  %2592 = getelementptr inbounds i64, i64* %2591, i64 %iv9, !dbg !3909
  store i64 %2590, i64* %2592, align 8, !dbg !3909, !invariant.group !4021
  br label %L1276.L1277_crit_edge, !dbg !3909

L1276.L1277_crit_edge:                            ; preds = %L1276.L1277_crit_edge.loopexit, %L1219
  %2593 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize498), !dbg !3909
  %2594 = mul i64 %arraysize498, 8, !dbg !3909
  %2595 = bitcast {} addrspace(10)* %2593 to i8 addrspace(13)* addrspace(10)*, !dbg !3909
  %2596 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2595, align 8, !dbg !3909
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2596, i8 0, i64 %2594, i1 false), !dbg !3909
  %2597 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize498) #74, !dbg !3909
  %_augmented512 = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1996({} addrspace(10)* align 16 %2597, {} addrspace(10)* align 16 %2593, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %2549, {} addrspace(10)* align 16 %2542), !dbg !3914
  %subcache513 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented512, 0, !dbg !3914
  %2598 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented512, 1, !dbg !3914
  %"'ac514" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented512, 2, !dbg !3914
  %_augmented501 = call fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2046({} addrspace(10)* align 16 %2487, {} addrspace(10)* align 16 %"'ac428", {} addrspace(10)* align 16 %2598, {} addrspace(10)* align 16 %"'ac514"), !dbg !3908
  %subcache502 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented501, 0, !dbg !3908
  %2599 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented501, 1, !dbg !3908
  %"'ac503" = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented501, 2, !dbg !3908
  store {} addrspace(10)* %"'ac440", {} addrspace(10)** %"'ipg492", align 8, !dbg !3908, !alias.scope !4022, !noalias !4025
  %2600 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache513_cache, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3569
  %2601 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2600, i64 %iv9, !dbg !3908
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache513, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2601, align 8, !dbg !3908, !invariant.group !4027
  %2602 = bitcast { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2600 to {} addrspace(10)*, !dbg !3908
  %2603 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache513, 1, !dbg !3908
  %2604 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache513, 2, !dbg !3908
  %2605 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache513, 4, !dbg !3908
  %2606 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache513, 5, !dbg !3908
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2602, {} addrspace(10)* %2603, {} addrspace(10)* %2604, {} addrspace(10)* %2605, {} addrspace(10)* %2606), !dbg !3908
  %2607 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi59_cache", align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3567
  %2608 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2607, i64 %iv9, !dbg !3908
  store {} addrspace(10)* %2593, {} addrspace(10)* addrspace(10)* %2608, align 8, !dbg !3908, !invariant.group !4028
  %2609 = bitcast {} addrspace(10)* addrspace(10)* %2607 to {} addrspace(10)*, !dbg !3908
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2609, {} addrspace(10)* %2593), !dbg !3908
  %2610 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache505, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3566
  %2611 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2610, i64 %iv9, !dbg !3908
  store {} addrspace(10)* %2597, {} addrspace(10)* addrspace(10)* %2611, align 8, !dbg !3908, !invariant.group !4029
  %2612 = bitcast {} addrspace(10)* addrspace(10)* %2610 to {} addrspace(10)*, !dbg !3908
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2612, {} addrspace(10)* %2597), !dbg !3908
  %2613 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache502_cache, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3565
  %2614 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %2613, i64 %iv9, !dbg !3908
  store { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache502, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %2614, align 8, !dbg !3908, !invariant.group !4030
  %2615 = bitcast { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %2613 to {} addrspace(10)*, !dbg !3908
  %2616 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache502, 0, !dbg !3908
  %2617 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache502, 1, !dbg !3908
  %2618 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache502, 2, !dbg !3908
  %2619 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache502, 3, !dbg !3908
  %2620 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache502, 4, !dbg !3908
  %2621 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache502, 5, !dbg !3908
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2615, {} addrspace(10)* %2616, {} addrspace(10)* %2617, {} addrspace(10)* %2618, {} addrspace(10)* %2619, {} addrspace(10)* %2620, {} addrspace(10)* %2621), !dbg !3908
  %2622 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi60_cache", align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3564
  %2623 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2622, i64 %iv9, !dbg !3908
  store {} addrspace(10)* %"'ac514", {} addrspace(10)* addrspace(10)* %2623, align 8, !dbg !3908, !invariant.group !4031
  %2624 = bitcast {} addrspace(10)* addrspace(10)* %2622 to {} addrspace(10)*, !dbg !3908
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2624, {} addrspace(10)* %"'ac514"), !dbg !3908
  %2625 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache497, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3563
  %2626 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2625, i64 %iv9, !dbg !3908
  store {} addrspace(10)* %2598, {} addrspace(10)* addrspace(10)* %2626, align 8, !dbg !3908, !invariant.group !4032
  %2627 = bitcast {} addrspace(10)* addrspace(10)* %2625 to {} addrspace(10)*, !dbg !3908
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2627, {} addrspace(10)* %2598), !dbg !3908
  store {} addrspace(10)* %2481, {} addrspace(10)** %721, align 8, !dbg !3908, !alias.scope !4033, !noalias !4034
  %2628 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache484, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3558
  %2629 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2628, i64 %iv9, !dbg !3908
  store {} addrspace(10)* %2599, {} addrspace(10)* addrspace(10)* %2629, align 8, !dbg !3908, !invariant.group !4035
  %2630 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi61_cache", align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3559
  %2631 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2630, i64 %iv9, !dbg !3908
  store {} addrspace(10)* %"'ac503", {} addrspace(10)* addrspace(10)* %2631, align 8, !dbg !3908, !invariant.group !4036
  %2632 = bitcast {} addrspace(10)* addrspace(10)* %2630 to {} addrspace(10)*, !dbg !3908
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2632, {} addrspace(10)* %"'ac503"), !dbg !3908
  %2633 = bitcast {} addrspace(10)* addrspace(10)* %2628 to {} addrspace(10)*, !dbg !3908
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2633, {} addrspace(10)* %2599), !dbg !3908
  %_augmented489 = call fastcc { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double } @augmented_julia___1993([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %722, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc483", {} addrspace(10)* align 16 %getfield7, {} addrspace(10)* align 16 %"getfield7'ipl", {} addrspace(10)* align 16 %2599, {} addrspace(10)* align 16 %"'ac503"), !dbg !3908
  %subcache490 = extractvalue { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double } %_augmented489, 0, !dbg !3908
  %2634 = extractvalue { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double } %_augmented489, 1, !dbg !3908
  %2635 = fadd double %2390, %2634, !dbg !4037
  store double %2635, double addrspace(11)* %710, align 8, !dbg !4038, !tbaa !865, !alias.scope !3026, !noalias !4039
  %2636 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)** %subcache490_cache, align 8, !dbg !4038, !dereferenceable !3229, !invariant.group !3560
  %2637 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %2636, i64 %iv9, !dbg !4038
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache490, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %2637, align 8, !dbg !4038, !invariant.group !4040
  %2638 = bitcast { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %2636 to {} addrspace(10)*, !dbg !4038
  %2639 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache490, 0, !dbg !4038
  %2640 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache490, 1, !dbg !4038
  %2641 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache490, 2, !dbg !4038
  %2642 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache490, 3, !dbg !4038
  %2643 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache490, 4, !dbg !4038
  %2644 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache490, 5, !dbg !4038
  %2645 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache490, 8, !dbg !4038
  %2646 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2639, 1, !dbg !4038
  %2647 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2639, 2, !dbg !4038
  %2648 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2639, 4, !dbg !4038
  %2649 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2639, 5, !dbg !4038
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2638, {} addrspace(10)* %2640, {} addrspace(10)* %2641, {} addrspace(10)* %2642, {} addrspace(10)* %2643, {} addrspace(10)* %2644, {} addrspace(10)* %2645, {} addrspace(10)* %2646, {} addrspace(10)* %2647, {} addrspace(10)* %2648, {} addrspace(10)* %2649), !dbg !4038
  %2650 = load i8*, i8** %_cache635, align 8, !dbg !4038, !dereferenceable !3229, !invariant.group !3596
  %2651 = getelementptr inbounds i8, i8* %2650, i64 %iv9, !dbg !4038
  store i8 2, i8* %2651, align 1, !dbg !4038, !invariant.group !3889
  br label %pass612.2, !dbg !4038

L1349:                                            ; preds = %pass612.2
  %2652 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct625 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !4041
  call fastcc void @julia_throw_boundserror_1991({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield19, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %2652) #71, !dbg !4041
  unreachable

L1352:                                            ; preds = %pass612.2
  %_augmented525 = call fastcc { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } @augmented_julia__unsafe_setindex__2077.322({} addrspace(10)* align 16 %getfield19, {} addrspace(10)* align 16 %"getfield19'ipl", {} addrspace(10)* align 16 %2852, {} addrspace(10)* align 16 %2849, [1 x [1 x i64]] addrspace(11)* nocapture readonly align 8 %725, i64 signext %2047), !dbg !4045
  %2653 = load { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)** %_augmented525_cache, align 8, !dbg !4046, !dereferenceable !3229, !invariant.group !3572
  %2654 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %2653, i64 %iv9, !dbg !4046
  store { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %_augmented525, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %2654, align 8, !dbg !4046, !invariant.group !4049
  %2655 = bitcast { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %2653 to {} addrspace(10)*, !dbg !4046
  %2656 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %_augmented525, 0, !dbg !4046
  %2657 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %_augmented525, 1, !dbg !4046
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2655, {} addrspace(10)* %2656, {} addrspace(10)* %2657), !dbg !4046
  %.not907 = icmp eq i64 %2047, %682, !dbg !4046
  br i1 %.not907, label %L1366.loopexit, label %L616, !dbg !4048

L1366.loopexit:                                   ; preds = %L1352
  br label %L1366, !dbg !4050

L1366:                                            ; preds = %L1366.loopexit, %L598
  br label %invertL1366, !dbg !4050

pass.2.loopexit:                                  ; preds = %L250, %__enzyme_exponentialallocationzero.exit
  %"value_phi78.off0!manual_lcssa" = phi i1 [ %value_phi78.off0, %L250 ], [ %value_phi78.off0, %__enzyme_exponentialallocationzero.exit ], !dbg !3113
  %2658 = phi i64 [ %iv1, %L250 ], [ %iv1, %__enzyme_exponentialallocationzero.exit ], !dbg !3113
  store i64 %2658, i64* %loopLimit_cache, align 8, !dbg !3113, !invariant.group !4051
  br label %pass.2, !dbg !3113

pass.2:                                           ; preds = %pass.2.loopexit, %L222
  %_augmented537 = call fastcc { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } @augmented_julia_compute_energy_2128([3 x double]* nocapture nofree writeonly align 8 "enzyme_sret" %403, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'ipa536", {} addrspace(10)* align 16 %550, {} addrspace(10)* align 16 %546, {} addrspace(10)* align 16 %getfield9, {} addrspace(10)* align 16 %"getfield9'ipl"), !dbg !3113
  %"memcpy_refined_src84'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa536", i64 0, i64 0, !dbg !4052
  %memcpy_refined_src84 = getelementptr inbounds [3 x double], [3 x double]* %403, i64 0, i64 0, !dbg !4052
  %"memcpy_refined_src86'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa536", i64 0, i64 1, !dbg !4053
  %memcpy_refined_src86 = getelementptr inbounds [3 x double], [3 x double]* %403, i64 0, i64 1, !dbg !4053
  %"memcpy_refined_src88'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa536", i64 0, i64 2, !dbg !4053
  %memcpy_refined_src88 = getelementptr inbounds [3 x double], [3 x double]* %403, i64 0, i64 2, !dbg !4053
  %2659 = load double, double* %memcpy_refined_src84, align 8, !dbg !4054, !tbaa !132, !alias.scope !4055, !noalias !4058
  %2660 = load double, double* %memcpy_refined_src86, align 8, !dbg !4054, !tbaa !132, !alias.scope !4055, !noalias !4058
  %2661 = load double, double* %memcpy_refined_src88, align 8, !dbg !4054, !tbaa !132, !alias.scope !4055, !noalias !4058
  %2662 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 3), !dbg !4060
  %2663 = bitcast {} addrspace(10)* %2662 to i8 addrspace(13)* addrspace(10)*, !dbg !4060
  %2664 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2663, align 8, !dbg !4060
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2664, i8 0, i64 24, i1 false), !dbg !4060
  %2665 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 3) #74, !dbg !4060
  %"'ipc534" = bitcast {} addrspace(10)* %2662 to double addrspace(13)* addrspace(10)*
  %2666 = bitcast {} addrspace(10)* %2665 to double addrspace(13)* addrspace(10)*
  %"'ipc535" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc534" to double addrspace(13)* addrspace(11)*
  %2667 = addrspacecast double addrspace(13)* addrspace(10)* %2666 to double addrspace(13)* addrspace(11)*
  %"arrayptr825'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc535", align 8, !tbaa !382, !alias.scope !4066, !noalias !4069, !nonnull !67
  %arrayptr825 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %2667, align 8, !tbaa !382, !alias.scope !4071, !noalias !4072, !nonnull !67
  store double %2659, double addrspace(13)* %arrayptr825, align 8, !dbg !4073, !tbaa !268, !alias.scope !4074, !noalias !4077
  %"memcpy_refined_dst94.1'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr825'ipl", i64 1, !dbg !4073
  %memcpy_refined_dst94.1 = getelementptr inbounds double, double addrspace(13)* %arrayptr825, i64 1, !dbg !4073
  store double %2660, double addrspace(13)* %memcpy_refined_dst94.1, align 8, !dbg !4073, !tbaa !268, !alias.scope !4074, !noalias !4077
  %"memcpy_refined_dst94.2'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr825'ipl", i64 2, !dbg !4073
  %memcpy_refined_dst94.2 = getelementptr inbounds double, double addrspace(13)* %arrayptr825, i64 2, !dbg !4073
  store double %2661, double addrspace(13)* %memcpy_refined_dst94.2, align 8, !dbg !4073, !tbaa !268, !alias.scope !4074, !noalias !4077
  %2668 = bitcast {} addrspace(10)* %getfield19 to {} addrspace(10)* addrspace(10)*, !dbg !4079
  %2669 = addrspacecast {} addrspace(10)* addrspace(10)* %2668 to {} addrspace(10)* addrspace(11)*, !dbg !4079
  %arraysize_ptr98 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2669, i64 3, !dbg !4079
  %2670 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr98 to i64 addrspace(11)*, !dbg !4079
  %arraysize99 = load i64, i64 addrspace(11)* %2670, align 8, !dbg !4079, !tbaa !85, !range !86, !alias.scope !4082, !noalias !4085
  %2671 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct102, i64 0, i64 0, i64 0, !dbg !4087
  store i64 %arraysize99, i64* %2671, align 8, !dbg !4087, !tbaa !132, !alias.scope !134, !noalias !3056
  %memcpy_refined_dst105 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct103, i64 0, i32 0, i64 0, i64 0, !dbg !4091
  store i64 %arraysize99, i64* %memcpy_refined_dst105, align 8, !dbg !4091, !tbaa !132, !alias.scope !134, !noalias !3056
  %memcpy_refined_dst106 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct103, i64 0, i32 1, !dbg !4091
  store i64 1, i64* %memcpy_refined_dst106, align 8, !dbg !4091, !tbaa !132, !alias.scope !134, !noalias !3056
  %arraysize_ptr107 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2669, i64 4, !dbg !4092
  %2672 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr107 to i64 addrspace(11)*, !dbg !4092
  %arraysize108 = load i64, i64 addrspace(11)* %2672, align 16, !dbg !4092, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !4095, !noalias !4096
  %.not827 = icmp eq i64 %arraysize108, 0, !dbg !4097
  br i1 %.not827, label %L322, label %L325, !dbg !3252

ib:                                               ; preds = %L359
  %arraysize_ptr126 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %608, i64 4, !dbg !3282
  %2673 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr126 to i64 addrspace(11)*, !dbg !3282
  %arraysize127 = load i64, i64 addrspace(11)* %2673, align 8, !dbg !3282, !tbaa !72, !range !86, !invariant.load !67, !alias.scope !3268, !noalias !3271, !invariant.group !4101
  %inbounds128 = icmp ugt i64 %arraysize127, 3, !dbg !3282
  br i1 %inbounds128, label %idxend, label %oob, !dbg !3282

oob:                                              ; preds = %ib, %L359
  %errorbox831 = alloca [2 x i64], align 8, !dbg !3282
  %errorbox831.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox831, i64 0, i64 0
  store i64 1, i64* %errorbox831.sub, align 8, !dbg !3282, !noalias !4102
  %2674 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox831, i64 0, i64 1, !dbg !3282
  store i64 4, i64* %2674, align 8, !dbg !3282, !noalias !4102
  %2675 = addrspacecast {} addrspace(10)* %593 to {} addrspace(12)*, !dbg !3282
  call void @ijl_bounds_error_ints({} addrspace(12)* %2675, i64* nonnull align 8 %errorbox831.sub, i64 2) #70, !dbg !3282
  unreachable

idxend:                                           ; preds = %ib
  %2676 = mul i64 %arraysize125, 3, !dbg !3282
  %"'ipc146" = bitcast {} addrspace(10)* %586 to double addrspace(13)* addrspace(10)*, !dbg !3282
  %2677 = bitcast {} addrspace(10)* %593 to double addrspace(13)* addrspace(10)*, !dbg !3282
  %"'ipc539" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc146" to double addrspace(13)* addrspace(11)*, !dbg !3282
  %2678 = addrspacecast double addrspace(13)* addrspace(10)* %2677 to double addrspace(13)* addrspace(11)*, !dbg !3282
  %"arrayptr130832'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc539", align 8, !dbg !3282, !tbaa !72, !alias.scope !3279, !noalias !3280, !nonnull !67
  %arrayptr130832 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %2678, align 8, !dbg !3282, !tbaa !72, !invariant.load !67, !alias.scope !3281, !noalias !3271, !nonnull !67
  %"'ipg538" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130832'ipl", i64 %2676, !dbg !3282
  %2679 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %2676, !dbg !3282
  store double 1.000000e+00, double addrspace(13)* %2679, align 8, !dbg !3282, !tbaa !268, !alias.scope !4103, !noalias !4106
  %inbounds133 = icmp ugt i64 %arraysize125, 1, !dbg !4108
  %inbounds138 = icmp ne i64 %arraysize127, 4, !dbg !4108
  %or.cond = select i1 %inbounds133, i1 %inbounds138, i1 false, !dbg !4108
  br i1 %or.cond, label %idxend141, label %oob139, !dbg !4108

oob139:                                           ; preds = %idxend
  %errorbox140833 = alloca [2 x i64], align 8, !dbg !4108
  %errorbox140833.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox140833, i64 0, i64 0
  store i64 2, i64* %errorbox140833.sub, align 8, !dbg !4108, !noalias !4102
  %2680 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox140833, i64 0, i64 1, !dbg !4108
  store i64 5, i64* %2680, align 8, !dbg !4108, !noalias !4102
  %2681 = addrspacecast {} addrspace(10)* %593 to {} addrspace(12)*, !dbg !4108
  call void @ijl_bounds_error_ints({} addrspace(12)* %2681, i64* nonnull align 8 %errorbox140833.sub, i64 2) #70, !dbg !4108
  unreachable

idxend141:                                        ; preds = %idxend
  %2682 = shl i64 %arraysize125, 2, !dbg !4108
  %2683 = or i64 %2682, 1, !dbg !4108
  %"'ipg540" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130832'ipl", i64 %2683, !dbg !4108
  %2684 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %2683, !dbg !4108
  store double 1.000000e+00, double addrspace(13)* %2684, align 8, !dbg !4108, !tbaa !268, !alias.scope !4103, !noalias !4106
  %inbounds146 = icmp ugt i64 %arraysize125, 2, !dbg !4110
  %inbounds151 = icmp ugt i64 %arraysize127, 5, !dbg !4110
  %or.cond1002 = select i1 %inbounds146, i1 %inbounds151, i1 false, !dbg !4110
  br i1 %or.cond1002, label %idxend154, label %oob152, !dbg !4110

oob152:                                           ; preds = %idxend141
  %errorbox153835 = alloca [2 x i64], align 8, !dbg !4110
  %errorbox153835.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox153835, i64 0, i64 0
  store i64 3, i64* %errorbox153835.sub, align 8, !dbg !4110, !noalias !4102
  %2685 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox153835, i64 0, i64 1, !dbg !4110
  store i64 6, i64* %2685, align 8, !dbg !4110, !noalias !4102
  %2686 = addrspacecast {} addrspace(10)* %593 to {} addrspace(12)*, !dbg !4110
  call void @ijl_bounds_error_ints({} addrspace(12)* %2686, i64* nonnull align 8 %errorbox153835.sub, i64 2) #70, !dbg !4110
  unreachable

idxend154:                                        ; preds = %idxend141
  %2687 = mul i64 %arraysize125, 5, !dbg !4110
  %2688 = add i64 %2687, 2, !dbg !4110
  %"'ipg542" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130832'ipl", i64 %2688, !dbg !4110
  %2689 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %2688, !dbg !4110
  store double 1.000000e+00, double addrspace(13)* %2689, align 8, !dbg !4110, !tbaa !268, !alias.scope !4103, !noalias !4106
  %2690 = fmul double %480, -2.000000e+00, !dbg !4112
  %inbounds159 = icmp ugt i64 %arraysize125, 3, !dbg !4115
  br i1 %inbounds159, label %idxend180, label %oob165, !dbg !4115

oob165:                                           ; preds = %idxend154
  %errorbox166837 = alloca [2 x i64], align 8, !dbg !4115
  %errorbox166837.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox166837, i64 0, i64 0
  store i64 4, i64* %errorbox166837.sub, align 8, !dbg !4115, !noalias !4102
  %2691 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox166837, i64 0, i64 1, !dbg !4115
  store i64 1, i64* %2691, align 8, !dbg !4115, !noalias !4102
  %2692 = addrspacecast {} addrspace(10)* %593 to {} addrspace(12)*, !dbg !4115
  call void @ijl_bounds_error_ints({} addrspace(12)* %2692, i64* nonnull align 8 %errorbox166837.sub, i64 2) #70, !dbg !4115
  unreachable

idxend180:                                        ; preds = %idxend154
  %"'ipg546" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130832'ipl", i64 3, !dbg !4115
  %2693 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 3, !dbg !4115
  store double %2690, double addrspace(13)* %2693, align 8, !dbg !4115, !tbaa !268, !alias.scope !4103, !noalias !4106
  %2694 = add nuw i64 %arraysize125, 3, !dbg !4116
  %"'ipg545" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130832'ipl", i64 %2694, !dbg !4116
  %2695 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %2694, !dbg !4116
  store double %480, double addrspace(13)* %2695, align 8, !dbg !4116, !tbaa !268, !alias.scope !4103, !noalias !4106
  %2696 = fneg double %430, !dbg !4118
  %2697 = add i64 %2676, 3, !dbg !4120
  %"'ipg543" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130832'ipl", i64 %2697, !dbg !4120
  %2698 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %2697, !dbg !4120
  store double %2696, double addrspace(13)* %2698, align 8, !dbg !4120, !tbaa !268, !alias.scope !4103, !noalias !4106
  %inbounds198.not = icmp eq i64 %arraysize125, 4, !dbg !4121
  br i1 %inbounds198.not, label %oob204, label %idxend232, !dbg !4121

oob204:                                           ; preds = %idxend180
  %errorbox205843 = alloca [2 x i64], align 8, !dbg !4121
  %errorbox205843.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox205843, i64 0, i64 0
  store i64 5, i64* %errorbox205843.sub, align 8, !dbg !4121, !noalias !4102
  %2699 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox205843, i64 0, i64 1, !dbg !4121
  store i64 1, i64* %2699, align 8, !dbg !4121, !noalias !4102
  %2700 = addrspacecast {} addrspace(10)* %593 to {} addrspace(12)*, !dbg !4121
  call void @ijl_bounds_error_ints({} addrspace(12)* %2700, i64* nonnull align 8 %errorbox205843.sub, i64 2) #70, !dbg !4121
  unreachable

idxend232:                                        ; preds = %idxend180
  %"'ipg551" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130832'ipl", i64 4, !dbg !4121
  %2701 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 4, !dbg !4121
  store double %480, double addrspace(13)* %2701, align 8, !dbg !4121, !tbaa !268, !alias.scope !4103, !noalias !4106
  %2702 = fmul double %480, -3.000000e+00, !dbg !4123
  %2703 = add nuw i64 %arraysize125, 4, !dbg !4126
  %"'ipg549" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130832'ipl", i64 %2703, !dbg !4126
  %2704 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %2703, !dbg !4126
  store double %2702, double addrspace(13)* %2704, align 8, !dbg !4126, !tbaa !268, !alias.scope !4103, !noalias !4106
  %2705 = shl nuw i64 %arraysize125, 1, !dbg !4127
  %2706 = add i64 %2705, 4, !dbg !4127
  %"'ipg548" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130832'ipl", i64 %2706, !dbg !4127
  %2707 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %2706, !dbg !4127
  store double %480, double addrspace(13)* %2707, align 8, !dbg !4127, !tbaa !268, !alias.scope !4103, !noalias !4106
  %2708 = add i64 %2682, 4, !dbg !4129
  %"'ipg547" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130832'ipl", i64 %2708, !dbg !4129
  %2709 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %2708, !dbg !4129
  store double %2696, double addrspace(13)* %2709, align 8, !dbg !4129, !tbaa !268, !alias.scope !4103, !noalias !4106
  %inbounds250 = icmp ugt i64 %arraysize125, 5, !dbg !4131
  br i1 %inbounds250, label %idxend258, label %oob256, !dbg !4131

oob256:                                           ; preds = %idxend232
  %errorbox257851 = alloca [2 x i64], align 8, !dbg !4131
  %errorbox257851.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox257851, i64 0, i64 0
  store i64 6, i64* %errorbox257851.sub, align 8, !dbg !4131, !noalias !4102
  %2710 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox257851, i64 0, i64 1, !dbg !4131
  store i64 2, i64* %2710, align 8, !dbg !4131, !noalias !4102
  %2711 = addrspacecast {} addrspace(10)* %593 to {} addrspace(12)*, !dbg !4131
  call void @ijl_bounds_error_ints({} addrspace(12)* %2711, i64* nonnull align 8 %errorbox257851.sub, i64 2) #70, !dbg !4131
  unreachable

idxend258:                                        ; preds = %idxend232
  %2712 = add nuw i64 %arraysize125, 5, !dbg !4131
  %"'ipg554" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130832'ipl", i64 %2712, !dbg !4131
  %2713 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %2712, !dbg !4131
  store double %480, double addrspace(13)* %2713, align 8, !dbg !4131, !tbaa !268, !alias.scope !4103, !noalias !4106
  %2714 = add i64 %2705, 5, !dbg !4133
  %"'ipg553" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130832'ipl", i64 %2714, !dbg !4133
  %2715 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %2714, !dbg !4133
  store double %2690, double addrspace(13)* %2715, align 8, !dbg !4133, !tbaa !268, !alias.scope !4103, !noalias !4106
  %2716 = add i64 %2687, 5, !dbg !4135
  %"'ipg552" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130832'ipl", i64 %2716, !dbg !4135
  %2717 = getelementptr inbounds double, double addrspace(13)* %arrayptr130832, i64 %2716, !dbg !4135
  store double %2696, double addrspace(13)* %2717, align 8, !dbg !4135, !tbaa !268, !alias.scope !4103, !noalias !4106
  %2718 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 6), !dbg !4137
  %2719 = bitcast {} addrspace(10)* %2718 to i8 addrspace(13)* addrspace(10)*, !dbg !4137
  %2720 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2719, align 8, !dbg !4137
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2720, i8 0, i64 48, i1 false), !dbg !4137
  %2721 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 6) #74, !dbg !4137
  %2722 = bitcast {} addrspace(10)* %2721 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !4140
  %2723 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %2722 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !4140
  %arraylen_ptr287 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %2723, i64 0, i32 1, !dbg !4140
  %arraylen288 = load i64, i64 addrspace(11)* %arraylen_ptr287, align 8, !dbg !4140, !tbaa !315, !range !86, !alias.scope !4145, !noalias !4148
  %.not857 = icmp eq i64 %arraylen288, 0, !dbg !4150
  br i1 %.not857, label %L412, label %idxend284.L394_crit_edge, !dbg !4144

idxend284.L394_crit_edge:                         ; preds = %idxend258
  %".phi.trans.insert973'ipc" = bitcast {} addrspace(10)* %2718 to double addrspace(13)* addrspace(10)*
  %.phi.trans.insert973 = bitcast {} addrspace(10)* %2721 to double addrspace(13)* addrspace(10)*
  %".phi.trans.insert974'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert973'ipc" to double addrspace(13)* addrspace(11)*
  %.phi.trans.insert974 = addrspacecast double addrspace(13)* addrspace(10)* %.phi.trans.insert973 to double addrspace(13)* addrspace(11)*
  %"arrayptr296858.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert974'ipc", align 8, !dbg !3285, !tbaa !382, !alias.scope !4154, !noalias !4155
  %arrayptr296858.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert974, align 8, !dbg !3285, !tbaa !382, !alias.scope !4156, !noalias !4148
  %2724 = add nsw i64 %arraylen288, -1, !dbg !4144
  br label %L394, !dbg !4144

pass387:                                          ; preds = %L616
  %2725 = fmul double %value_phi372, 0x401921FB54442D18, !dbg !4157
  %2726 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5054677600 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6215964112 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185540240 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4730270640 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11240416960 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %2080, {} addrspace(10)* %"'ipl176"), !dbg !3610
  %2727 = addrspacecast {} addrspace(10)* %2726 to {} addrspace(11)*, !dbg !3610
  %2728 = bitcast {} addrspace(11)* %2727 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3610
  %2729 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2728, i64 0, i64 1, !dbg !3610
  %2730 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2729, align 8, !dbg !3610
  %2731 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2728, i64 0, i64 0, !dbg !3610
  %2732 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2731, align 8, !dbg !3610
  %2733 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2728, i64 0, i64 2, !dbg !3610
  %2734 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2733, align 8, !dbg !3610, !invariant.group !4159
  %"box'mi" = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task388, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4796493856 to {}*) to {} addrspace(10)*)) #72, !dbg !3610
  %2735 = bitcast {} addrspace(10)* %"box'mi" to i8 addrspace(10)*, !dbg !3610
  call void @llvm.memset.p10i8.i64(i8 addrspace(10)* nonnull dereferenceable(8) dereferenceable_or_null(8) %2735, i8 0, i64 8, i1 false), !dbg !3610
  %box = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task388, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4796493856 to {}*) to {} addrspace(10)*)) #72, !dbg !3610
  %"'ipc613" = bitcast {} addrspace(10)* %"box'mi" to double addrspace(10)*, !dbg !3610
  %2736 = bitcast {} addrspace(10)* %box to double addrspace(10)*, !dbg !3610
  store double %2725, double addrspace(10)* %2736, align 8, !dbg !3610, !tbaa !112, !alias.scope !4160, !noalias !4163
  %2737 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache615, align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3590
  %2738 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2737, i64 %iv9, !dbg !3610
  store {} addrspace(10)* %2726, {} addrspace(10)* addrspace(10)* %2738, align 8, !dbg !3610, !invariant.group !4165
  %2739 = bitcast {} addrspace(10)* addrspace(10)* %2737 to {} addrspace(10)*, !dbg !3610
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2739, {} addrspace(10)* %2726), !dbg !3610
  %2740 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi66_cache", align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3589
  %2741 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2740, i64 %iv9, !dbg !3610
  store {} addrspace(10)* %2730, {} addrspace(10)* addrspace(10)* %2741, align 8, !dbg !3610, !invariant.group !4166
  %2742 = bitcast {} addrspace(10)* addrspace(10)* %2740 to {} addrspace(10)*, !dbg !3610
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2742, {} addrspace(10)* %2730), !dbg !3610
  %2743 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache609, align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3588
  %2744 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2743, i64 %iv9, !dbg !3610
  store {} addrspace(10)* %2732, {} addrspace(10)* addrspace(10)* %2744, align 8, !dbg !3610, !invariant.group !4167
  %2745 = bitcast {} addrspace(10)* addrspace(10)* %2743 to {} addrspace(10)*, !dbg !3610
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2745, {} addrspace(10)* %2732), !dbg !3610
  %2746 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"box'mi_cache", align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3587
  %2747 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2746, i64 %iv9, !dbg !3610
  store {} addrspace(10)* %"box'mi", {} addrspace(10)* addrspace(10)* %2747, align 8, !dbg !3610, !invariant.group !4168
  %2748 = bitcast {} addrspace(10)* addrspace(10)* %2746 to {} addrspace(10)*, !dbg !3610
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2748, {} addrspace(10)* %"box'mi"), !dbg !3610
  %2749 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %box_cache, align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3586
  %2750 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2749, i64 %iv9, !dbg !3610
  store {} addrspace(10)* %box, {} addrspace(10)* addrspace(10)* %2750, align 8, !dbg !3610, !invariant.group !4169
  %2751 = bitcast {} addrspace(10)* addrspace(10)* %2749 to {} addrspace(10)*, !dbg !3610
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2751, {} addrspace(10)* %box), !dbg !3610
  %2752 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5054677600 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6219021520 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185540240 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4730270640 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %box, {} addrspace(10)* %"box'mi", {} addrspace(10)* %2732, {} addrspace(10)* %2730), !dbg !3610
  %2753 = addrspacecast {} addrspace(10)* %2752 to {} addrspace(11)*, !dbg !3610
  %2754 = bitcast {} addrspace(11)* %2753 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3610
  %2755 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2754, i64 0, i64 1, !dbg !3610
  %2756 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2755, align 8, !dbg !3610
  %2757 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2754, i64 0, i64 0, !dbg !3610
  %2758 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2757, align 8, !dbg !3610
  %2759 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2754, i64 0, i64 2, !dbg !3610
  %2760 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2759, align 8, !dbg !3610, !invariant.group !4170
  %2761 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5054677600 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6195073424 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185541928 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4760305232 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %2758, {} addrspace(10)* %2756), !dbg !3610
  %2762 = addrspacecast {} addrspace(10)* %2761 to {} addrspace(11)*, !dbg !3610
  %2763 = bitcast {} addrspace(11)* %2762 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3610
  %2764 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2763, i64 0, i64 1, !dbg !3610
  %2765 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2764, align 8, !dbg !3610
  %2766 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2763, i64 0, i64 0, !dbg !3610
  %2767 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2766, align 8, !dbg !3610
  %2768 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2763, i64 0, i64 2, !dbg !3610
  %2769 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2768, align 8, !dbg !3610, !invariant.group !4171
  %2770 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5054677600 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6215964112 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185540240 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728400336 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4784535424 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %2767, {} addrspace(10)* %2765), !dbg !3610
  %2771 = addrspacecast {} addrspace(10)* %2770 to {} addrspace(11)*, !dbg !3610
  %2772 = bitcast {} addrspace(11)* %2771 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3610
  %2773 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2772, i64 0, i64 1, !dbg !3610
  %2774 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2773, align 8, !dbg !3610
  %2775 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2772, i64 0, i64 0, !dbg !3610
  %2776 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2775, align 8, !dbg !3610
  %2777 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2772, i64 0, i64 2, !dbg !3610
  %2778 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2777, align 8, !dbg !3610, !invariant.group !4172
  %2779 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5054677600 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6189613584 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185541448 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4729228528 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %2776, {} addrspace(10)* %2774, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*)), !dbg !3379
  %2780 = addrspacecast {} addrspace(10)* %2779 to {} addrspace(11)*, !dbg !3379
  %2781 = bitcast {} addrspace(11)* %2780 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3379
  %2782 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2781, i64 0, i64 1, !dbg !3379
  %2783 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2782, align 8, !dbg !3379
  %2784 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2781, i64 0, i64 0, !dbg !3379
  %2785 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2784, align 8, !dbg !3379
  %2786 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2781, i64 0, i64 2, !dbg !3379
  %2787 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2786, align 8, !dbg !3379, !invariant.group !4173
  %2788 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5054677600 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6219021520 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185540240 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728400336 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %getfield, {} addrspace(10)* %"getfield'ipl", {} addrspace(10)* %2785, {} addrspace(10)* %2783), !dbg !3379
  %2789 = addrspacecast {} addrspace(10)* %2788 to {} addrspace(11)*, !dbg !3379
  %2790 = bitcast {} addrspace(11)* %2789 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3379
  %2791 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2790, i64 0, i64 1, !dbg !3379
  %2792 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2791, align 8, !dbg !3379
  %2793 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2790, i64 0, i64 0, !dbg !3379
  %2794 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2793, align 8, !dbg !3379
  %2795 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2790, i64 0, i64 2, !dbg !3379
  %2796 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2795, align 8, !dbg !3379, !invariant.group !4174
  %2797 = add nsw i64 %2047, -1, !dbg !4175
  store i64 %arraysize390, i64* %memcpy_refined_dst398, align 8, !dbg !4176, !tbaa !132, !alias.scope !134, !noalias !3056
  %2798 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache600, align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3585
  %2799 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2798, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2752, {} addrspace(10)* addrspace(10)* %2799, align 8, !dbg !4176, !invariant.group !4177
  %2800 = bitcast {} addrspace(10)* addrspace(10)* %2798 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2800, {} addrspace(10)* %2752), !dbg !4176
  %2801 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi67_cache", align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3584
  %2802 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2801, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2756, {} addrspace(10)* addrspace(10)* %2802, align 8, !dbg !4176, !invariant.group !4178
  %2803 = bitcast {} addrspace(10)* addrspace(10)* %2801 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2803, {} addrspace(10)* %2756), !dbg !4176
  %2804 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache596, align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3583
  %2805 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2804, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2758, {} addrspace(10)* addrspace(10)* %2805, align 8, !dbg !4176, !invariant.group !4179
  %2806 = bitcast {} addrspace(10)* addrspace(10)* %2804 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2806, {} addrspace(10)* %2758), !dbg !4176
  %2807 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache589, align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3582
  %2808 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2807, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2761, {} addrspace(10)* addrspace(10)* %2808, align 8, !dbg !4176, !invariant.group !4180
  %2809 = bitcast {} addrspace(10)* addrspace(10)* %2807 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2809, {} addrspace(10)* %2761), !dbg !4176
  %2810 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi68_cache", align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3581
  %2811 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2810, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2765, {} addrspace(10)* addrspace(10)* %2811, align 8, !dbg !4176, !invariant.group !4181
  %2812 = bitcast {} addrspace(10)* addrspace(10)* %2810 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2812, {} addrspace(10)* %2765), !dbg !4176
  %2813 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache585, align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3580
  %2814 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2813, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2767, {} addrspace(10)* addrspace(10)* %2814, align 8, !dbg !4176, !invariant.group !4182
  %2815 = bitcast {} addrspace(10)* addrspace(10)* %2813 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2815, {} addrspace(10)* %2767), !dbg !4176
  %2816 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache578, align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3579
  %2817 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2816, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2770, {} addrspace(10)* addrspace(10)* %2817, align 8, !dbg !4176, !invariant.group !4183
  %2818 = bitcast {} addrspace(10)* addrspace(10)* %2816 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2818, {} addrspace(10)* %2770), !dbg !4176
  %2819 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi69_cache", align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3578
  %2820 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2819, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2774, {} addrspace(10)* addrspace(10)* %2820, align 8, !dbg !4176, !invariant.group !4184
  %2821 = bitcast {} addrspace(10)* addrspace(10)* %2819 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2821, {} addrspace(10)* %2774), !dbg !4176
  %2822 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache574, align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3577
  %2823 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2822, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2776, {} addrspace(10)* addrspace(10)* %2823, align 8, !dbg !4176, !invariant.group !4185
  %2824 = bitcast {} addrspace(10)* addrspace(10)* %2822 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2824, {} addrspace(10)* %2776), !dbg !4176
  %2825 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache567, align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3576
  %2826 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2825, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2779, {} addrspace(10)* addrspace(10)* %2826, align 8, !dbg !4176, !invariant.group !4186
  %2827 = bitcast {} addrspace(10)* addrspace(10)* %2825 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2827, {} addrspace(10)* %2779), !dbg !4176
  %2828 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi70_cache", align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3575
  %2829 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2828, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2783, {} addrspace(10)* addrspace(10)* %2829, align 8, !dbg !4176, !invariant.group !4187
  %2830 = bitcast {} addrspace(10)* addrspace(10)* %2828 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2830, {} addrspace(10)* %2783), !dbg !4176
  %2831 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache563, align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3574
  %2832 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2831, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2785, {} addrspace(10)* addrspace(10)* %2832, align 8, !dbg !4176, !invariant.group !4188
  %2833 = bitcast {} addrspace(10)* addrspace(10)* %2831 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2833, {} addrspace(10)* %2785), !dbg !4176
  %2834 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache555, align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3573
  %2835 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2834, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2788, {} addrspace(10)* addrspace(10)* %2835, align 8, !dbg !4176, !invariant.group !4189
  %2836 = bitcast {} addrspace(10)* addrspace(10)* %2834 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2836, {} addrspace(10)* %2788), !dbg !4176
  %2837 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi71_cache", align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3494
  %2838 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2837, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2792, {} addrspace(10)* addrspace(10)* %2838, align 8, !dbg !4176, !invariant.group !4190
  %2839 = bitcast {} addrspace(10)* addrspace(10)* %2837 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2839, {} addrspace(10)* %2792), !dbg !4176
  %2840 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache225, align 8, !dbg !4176, !dereferenceable !3229, !invariant.group !3493
  %2841 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2840, i64 %iv9, !dbg !4176
  store {} addrspace(10)* %2794, {} addrspace(10)* addrspace(10)* %2841, align 8, !dbg !4176, !invariant.group !4191
  %2842 = bitcast {} addrspace(10)* addrspace(10)* %2840 to {} addrspace(10)*, !dbg !4176
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2842, {} addrspace(10)* %2794), !dbg !4176
  store i64 %2797, i64* %691, align 8, !dbg !4176, !tbaa !132, !alias.scope !134, !noalias !3056
  %2843 = add nsw i64 %2047, -2, !dbg !4192
  %exitcond1056.not = icmp eq i64 %2047, %726, !dbg !4197
  br i1 %exitcond1056.not, label %L680, label %L683, !dbg !3621

pass612.2.loopexit:                               ; preds = %L992
  %2844 = load i8*, i8** %_cache635, align 8, !dbg !4198, !dereferenceable !3229, !invariant.group !3596
  %2845 = getelementptr inbounds i8, i8* %2844, i64 %iv9, !dbg !4198
  store i8 0, i8* %2845, align 1, !dbg !4198, !invariant.group !3889
  br label %pass612.2, !dbg !4198

pass612.2:                                        ; preds = %pass612.2.loopexit, %L1276.L1277_crit_edge, %L968
  %_augmented633 = call fastcc { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } @augmented_julia_compute_energy_2128.414([3 x double]* nocapture nofree writeonly align 8 "enzyme_sret" %406, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'ipa632", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl", {} addrspace(10)* align 16 %getfield9, {} addrspace(10)* align 16 %"getfield9'ipl"), !dbg !4198
  %2846 = load double, double* %memcpy_refined_src601, align 8, !dbg !4199, !tbaa !132, !alias.scope !4200, !noalias !4203
  %2847 = load double, double* %memcpy_refined_src603, align 8, !dbg !4199, !tbaa !132, !alias.scope !4200, !noalias !4203
  %2848 = load double, double* %memcpy_refined_src605, align 8, !dbg !4199, !tbaa !132, !alias.scope !4200, !noalias !4203
  %2849 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 3), !dbg !4205
  %2850 = bitcast {} addrspace(10)* %2849 to i8 addrspace(13)* addrspace(10)*, !dbg !4205
  %2851 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2850, align 8, !dbg !4205
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2851, i8 0, i64 24, i1 false), !dbg !4205
  %2852 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 3) #74, !dbg !4205
  %"'ipc626" = bitcast {} addrspace(10)* %2849 to double addrspace(13)* addrspace(10)*
  %2853 = bitcast {} addrspace(10)* %2852 to double addrspace(13)* addrspace(10)*
  %"'ipc627" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc626" to double addrspace(13)* addrspace(11)*
  %2854 = addrspacecast double addrspace(13)* addrspace(10)* %2853 to double addrspace(13)* addrspace(11)*
  %"arrayptr614904'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc627", align 8, !tbaa !382, !alias.scope !4211, !noalias !4214, !nonnull !67
  %arrayptr614904 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %2854, align 8, !tbaa !382, !alias.scope !4216, !noalias !4217, !nonnull !67
  store double %2846, double addrspace(13)* %arrayptr614904, align 8, !dbg !4218, !tbaa !268, !alias.scope !4219, !noalias !4222
  %2855 = load { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)*, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)** %_augmented633_cache, align 8, !dbg !4218, !dereferenceable !3229, !invariant.group !3593
  %2856 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2855, i64 %iv9, !dbg !4218
  store { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented633, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2856, align 8, !dbg !4218, !invariant.group !4224
  %2857 = bitcast { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2855 to {} addrspace(10)*, !dbg !4218
  %2858 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented633, 0, !dbg !4218
  %2859 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented633, 2, !dbg !4218
  %2860 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented633, 3, !dbg !4218
  %2861 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented633, 5, !dbg !4218
  %2862 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented633, 6, !dbg !4218
  %2863 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented633, 9, !dbg !4218
  %2864 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented633, 10, !dbg !4218
  %2865 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented633, 12, !dbg !4218
  %2866 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented633, 13, !dbg !4218
  %2867 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented633, 14, !dbg !4218
  %2868 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented633, 16, !dbg !4218
  %2869 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented633, 17, !dbg !4218
  %2870 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %2863, 0, !dbg !4218
  %2871 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %2863, 1, !dbg !4218
  %2872 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %2863, 2, !dbg !4218
  %2873 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %2863, 3, !dbg !4218
  %2874 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %2867, 0, !dbg !4218
  %2875 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %2867, 1, !dbg !4218
  %2876 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %2867, 2, !dbg !4218
  %2877 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %2867, 3, !dbg !4218
  %2878 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %2867, 4, !dbg !4218
  %2879 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2874, 1, !dbg !4218
  %2880 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2874, 2, !dbg !4218
  %2881 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2874, 4, !dbg !4218
  %2882 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2874, 5, !dbg !4218
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2857, {} addrspace(10)* %2858, {} addrspace(10)* %2859, {} addrspace(10)* %2860, {} addrspace(10)* %2861, {} addrspace(10)* %2862, {} addrspace(10)* %2864, {} addrspace(10)* %2865, {} addrspace(10)* %2866, {} addrspace(10)* %2868, {} addrspace(10)* %2869, {} addrspace(10)* %2870, {} addrspace(10)* %2871, {} addrspace(10)* %2872, {} addrspace(10)* %2873, {} addrspace(10)* %2875, {} addrspace(10)* %2876, {} addrspace(10)* %2877, {} addrspace(10)* %2878, {} addrspace(10)* %2879, {} addrspace(10)* %2880, {} addrspace(10)* %2881, {} addrspace(10)* %2882), !dbg !4218
  %2883 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi73_cache", align 8, !dbg !4218, !dereferenceable !3229, !invariant.group !3571
  %2884 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2883, i64 %iv9, !dbg !4218
  store {} addrspace(10)* %2849, {} addrspace(10)* addrspace(10)* %2884, align 8, !dbg !4218, !invariant.group !4225
  %2885 = bitcast {} addrspace(10)* addrspace(10)* %2883 to {} addrspace(10)*, !dbg !4218
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2885, {} addrspace(10)* %2849), !dbg !4218
  %2886 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache518, align 8, !dbg !4218, !dereferenceable !3229, !invariant.group !3570
  %2887 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2886, i64 %iv9, !dbg !4218
  store {} addrspace(10)* %2852, {} addrspace(10)* addrspace(10)* %2887, align 8, !dbg !4218, !invariant.group !4226
  %2888 = bitcast {} addrspace(10)* addrspace(10)* %2886 to {} addrspace(10)*, !dbg !4218
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2888, {} addrspace(10)* %2852), !dbg !4218
  %"memcpy_refined_dst616.1'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr614904'ipl", i64 1, !dbg !4218
  %memcpy_refined_dst616.1 = getelementptr inbounds double, double addrspace(13)* %arrayptr614904, i64 1, !dbg !4218
  store double %2847, double addrspace(13)* %memcpy_refined_dst616.1, align 8, !dbg !4218, !tbaa !268, !alias.scope !4219, !noalias !4222
  %"memcpy_refined_dst616.2'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr614904'ipl", i64 2, !dbg !4218
  %memcpy_refined_dst616.2 = getelementptr inbounds double, double addrspace(13)* %arrayptr614904, i64 2, !dbg !4218
  store double %2848, double addrspace(13)* %memcpy_refined_dst616.2, align 8, !dbg !4218, !tbaa !268, !alias.scope !4219, !noalias !4222
  store i64 %arraysize99, i64* %723, align 8, !dbg !4227, !tbaa !132, !alias.scope !134, !noalias !3056
  store i64 %arraysize99, i64* %memcpy_refined_dst627, align 8, !dbg !4233, !tbaa !132, !alias.scope !134, !noalias !3056
  store i64 %2047, i64* %724, align 8, !dbg !4233, !tbaa !132, !alias.scope !134, !noalias !3056
  %exitcond1059.not = icmp eq i64 %2047, %728, !dbg !4234
  br i1 %exitcond1059.not, label %L1349, label %L1352, !dbg !4041

err:                                              ; preds = %L616
  call void @ijl_undefined_var_error({} addrspace(12)* addrspacecast ({}* inttoptr (i64 4337190312 to {}*) to {} addrspace(12)*)) #70, !dbg !3610
  unreachable

inverttop:                                        ; preds = %invertL36
  %2889 = load double, double* %"'de", align 8, !dbg !3040
  store double 0.000000e+00, double* %"'de", align 8, !dbg !3040
  %2890 = load double, double addrspace(11)* %"'ipc75", align 8, !dbg !3040, !tbaa !865, !alias.scope !3021, !noalias !3024
  %2891 = fadd fast double %2890, %2889, !dbg !3040
  store double %2891, double addrspace(11)* %"'ipc75", align 8, !dbg !3040, !tbaa !865, !alias.scope !3021, !noalias !3024
  %2892 = load double, double* %"'de85", align 8, !dbg !3032
  store double 0.000000e+00, double* %"'de85", align 8, !dbg !3032
  %2893 = load double, double addrspace(11)* %"'ipc88", align 8, !dbg !3032, !tbaa !865, !alias.scope !3021, !noalias !3024
  %2894 = fadd fast double %2893, %2892, !dbg !3032
  store double %2894, double addrspace(11)* %"'ipc88", align 8, !dbg !3032, !tbaa !865, !alias.scope !3021, !noalias !3024
  %2895 = load double, double* %"'de94", align 8, !dbg !3028
  store double 0.000000e+00, double* %"'de94", align 8, !dbg !3028
  %2896 = load double, double addrspace(11)* %"'ipc97", align 8, !dbg !3028, !tbaa !865, !alias.scope !3021, !noalias !3024
  %2897 = fadd fast double %2896, %2895, !dbg !3028
  store double %2897, double addrspace(11)* %"'ipc97", align 8, !dbg !3028, !tbaa !865, !alias.scope !3021, !noalias !3024
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL36:                                        ; preds = %invertL75
  br label %inverttop

invertL75:                                        ; preds = %invertL105, %invertL86
  br label %invertL36

invertL86:                                        ; preds = %invertL209, %invertL90
  br label %invertL75

invertL90:                                        ; preds = %invertL101_phimerge_phimerge, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  br label %invertL86

invertL98:                                        ; preds = %invertL101_phimerge_phimerge
  %2898 = load {} addrspace(10)*, {} addrspace(10)** %"'ip_phi2_cache", align 8, !dbg !3104, !invariant.group !3116
  %2899 = bitcast {} addrspace(10)* %"getfield11'ipl" to i8 addrspace(13)* addrspace(10)*, !dbg !3104
  %2900 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2899, align 8, !dbg !3104
  %2901 = bitcast {} addrspace(10)* %2898 to i8 addrspace(13)* addrspace(10)*, !dbg !3104
  %2902 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2901, align 8, !dbg !3104
  %2903 = bitcast i8 addrspace(13)* %2902 to double addrspace(13)*, !dbg !3104
  %2904 = bitcast i8 addrspace(13)* %2900 to double addrspace(13)*, !dbg !3104
  %2905 = udiv i64 %459, 8, !dbg !3104
  %2906 = icmp eq i64 %2905, 0, !dbg !3104
  br i1 %2906, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !3104

for.body.i:                                       ; preds = %for.body.i, %invertL98
  %idx.i = phi i64 [ 0, %invertL98 ], [ %idx.next.i, %for.body.i ], !dbg !3104
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %2903, i64 %idx.i, !dbg !3104
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !3104
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !3104
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %2904, i64 %idx.i, !dbg !3104
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !3104
  %2907 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !3104
  store double %2907, double addrspace(13)* %src.i.i, align 1, !dbg !3104
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !3104
  %2908 = icmp eq i64 %2905, %idx.next.i, !dbg !3104
  br i1 %2908, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !3104

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL98, %for.body.i
  br label %invertL90

invertL101:                                       ; preds = %invertL209
  %_unwrap = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %412 to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !3117
  %"'ipc108_unwrap" = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa" to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !3117
  %2909 = load i1, i1* %.not941.not_cache, align 1, !dbg !3117, !invariant.group !3103
  br i1 %2909, label %invertL101_phirc, label %invertL101_phirc109, !dbg !3117

invertL101_phirc:                                 ; preds = %invertL101
  %2910 = load {} addrspace(10)*, {} addrspace(10)** %_cache, align 8, !invariant.group !3114
  br label %invertL101_phimerge

invertL101_phirc109:                              ; preds = %invertL101
  br label %invertL101_phimerge

invertL101_phimerge:                              ; preds = %invertL101_phirc109, %invertL101_phirc
  %2911 = phi {} addrspace(10)* [ %2910, %invertL101_phirc ], [ %getfield11, %invertL101_phirc109 ], !dbg !3117
  br i1 %2909, label %invertL101_phimerge_phirc, label %invertL101_phimerge_phirc111, !dbg !3117

invertL101_phimerge_phirc:                        ; preds = %invertL101_phimerge
  %2912 = load {} addrspace(10)*, {} addrspace(10)** %_cache110, align 8, !invariant.group !3115
  br label %invertL101_phimerge_phimerge

invertL101_phimerge_phirc111:                     ; preds = %invertL101_phimerge
  br label %invertL101_phimerge_phimerge

invertL101_phimerge_phimerge:                     ; preds = %invertL101_phimerge_phirc111, %invertL101_phimerge_phirc
  %2913 = phi {} addrspace(10)* [ %2912, %invertL101_phimerge_phirc ], [ %"getfield11'ipl", %invertL101_phimerge_phirc111 ], !dbg !3117
  %2914 = load i64, i64* %_augmented_cache, align 8, !dbg !3117, !invariant.group !3125
  call fastcc void @diffejulia_copyto_unaliased__1986({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* nocapture nofree writeonly align 8 "enzyme_sret" undef, [1 x {} addrspace(10)*]* nocapture nofree writeonly align 8 "enzymejl_returnRoots" undef, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree readonly align 8 %_unwrap, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'ipc108_unwrap", {} addrspace(10)* nocapture readonly align 16 %2911, {} addrspace(10)* nocapture align 16 %2913, i64 %2914), !dbg !3117
  br i1 %2909, label %invertL98, label %invertL90

invertL105:                                       ; preds = %invertL118, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit737
  br label %invertL75

invertL113:                                       ; preds = %invertL118
  %2915 = load {} addrspace(10)*, {} addrspace(10)** %"'ip_phi5_cache", align 8, !dbg !3144, !invariant.group !3146
  %2916 = bitcast {} addrspace(10)* %"getfield11'ipl" to i8 addrspace(13)* addrspace(10)*, !dbg !3144
  %2917 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2916, align 8, !dbg !3144
  %2918 = bitcast {} addrspace(10)* %2915 to i8 addrspace(13)* addrspace(10)*, !dbg !3144
  %2919 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2918, align 8, !dbg !3144
  %2920 = bitcast i8 addrspace(13)* %2919 to double addrspace(13)*, !dbg !3144
  %2921 = bitcast i8 addrspace(13)* %2917 to double addrspace(13)*, !dbg !3144
  %2922 = udiv i64 %451, 8, !dbg !3144
  %2923 = icmp eq i64 %2922, 0, !dbg !3144
  br i1 %2923, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit737, label %for.body.i736, !dbg !3144

for.body.i736:                                    ; preds = %for.body.i736, %invertL113
  %idx.i730 = phi i64 [ 0, %invertL113 ], [ %idx.next.i735, %for.body.i736 ], !dbg !3144
  %dst.i.i731 = getelementptr inbounds double, double addrspace(13)* %2920, i64 %idx.i730, !dbg !3144
  %dst.i.l.i732 = load double, double addrspace(13)* %dst.i.i731, align 1, !dbg !3144
  store double 0.000000e+00, double addrspace(13)* %dst.i.i731, align 1, !dbg !3144
  %src.i.i733 = getelementptr inbounds double, double addrspace(13)* %2921, i64 %idx.i730, !dbg !3144
  %src.i.l.i734 = load double, double addrspace(13)* %src.i.i733, align 1, !dbg !3144
  %2924 = fadd fast double %src.i.l.i734, %dst.i.l.i732, !dbg !3144
  store double %2924, double addrspace(13)* %src.i.i733, align 1, !dbg !3144
  %idx.next.i735 = add nuw i64 %idx.i730, 1, !dbg !3144
  %2925 = icmp eq i64 %2922, %idx.next.i735, !dbg !3144
  br i1 %2925, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit737, label %for.body.i736, !dbg !3144

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit737: ; preds = %invertL113, %for.body.i736
  br label %invertL105

invertL118:                                       ; preds = %invertL209, %invertL160.lr.ph
  %2926 = load i1, i1* %.not951.not_cache, align 1, !invariant.group !3143
  br i1 %2926, label %invertL113, label %invertL105

invertL160.lr.ph:                                 ; preds = %invertL160_phimerge
  br label %invertL118

invertL160:                                       ; preds = %mergeinvertL160_L209.loopexit, %incinvertL160
  %2927 = load i64, i64* %"iv'ac", align 8, !dbg !3190
  %"'ipc113_unwrap" = bitcast {} addrspace(10)* %"getfield15'ipl" to double addrspace(13)* addrspace(10)*, !dbg !3190
  %"'ipc114_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc113_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3190
  %"arrayptr783956'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc114_unwrap", align 16, !tbaa !72, !alias.scope !3173, !noalias !3174, !nonnull !67, !invariant.group !3175
  %"'ipg117_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr783956'ipl_unwrap", i64 %2927, !dbg !3190
  %2928 = load double, double addrspace(13)* %"'ipg117_unwrap", align 8, !dbg !3190, !tbaa !268, !alias.scope !4239, !noalias !4240
  store double 0.000000e+00, double addrspace(13)* %"'ipg117_unwrap", align 8, !dbg !3190, !tbaa !268, !alias.scope !4239, !noalias !4240
  %2929 = load double, double* %"arrayref780'de", align 8, !dbg !3190
  %2930 = fadd fast double %2929, %2928, !dbg !3190
  store double %2930, double* %"arrayref780'de", align 8, !dbg !3190
  %2931 = load double, double* %"arrayref780'de", align 8, !dbg !3178
  store double 0.000000e+00, double* %"arrayref780'de", align 8, !dbg !3178
  %2932 = load i64, i64* %"iv'ac", align 8, !dbg !3178
  %2933 = load i1, i1* %.not951.not_cache, align 1, !dbg !3178, !invariant.group !3143
  br i1 %2933, label %invertL160_phirc, label %invertL160_phirc120, !dbg !3178

invertL160_phirc:                                 ; preds = %invertL160
  %2934 = load {} addrspace(10)*, {} addrspace(10)** %_cache119, align 8, !invariant.group !3147
  br label %invertL160_phimerge

invertL160_phirc120:                              ; preds = %invertL160
  br label %invertL160_phimerge

invertL160_phimerge:                              ; preds = %invertL160_phirc120, %invertL160_phirc
  %2935 = phi {} addrspace(10)* [ %2934, %invertL160_phirc ], [ %"getfield11'ipl", %invertL160_phirc120 ], !dbg !3178
  %"'ipc115_unwrap" = bitcast {} addrspace(10)* %2935 to double addrspace(13)* addrspace(10)*, !dbg !3178
  %"'ipc116_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc115_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3178
  %"arrayptr779955'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc116_unwrap", align 8, !tbaa !382, !alias.scope !3165, !noalias !3168, !nonnull !67, !invariant.group !3170
  %2936 = load i1, i1* %.not954_cache, align 1, !dbg !3178, !invariant.group !3164
  %_unwrap121 = select i1 %2936, i64 0, i64 %2932, !dbg !3178
  %"'ipg118_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr779955'ipl_unwrap", i64 %_unwrap121, !dbg !3178
  %2937 = load double, double addrspace(13)* %"'ipg118_unwrap", align 8, !dbg !3178, !tbaa !268, !alias.scope !4241, !noalias !4242
  %2938 = fadd fast double %2937, %2931, !dbg !3178
  store double %2938, double addrspace(13)* %"'ipg118_unwrap", align 8, !dbg !3178, !tbaa !268, !alias.scope !4241, !noalias !4242
  %2939 = load i64, i64* %"iv'ac", align 8
  %2940 = icmp eq i64 %2939, 0
  %2941 = xor i1 %2940, true
  br i1 %2940, label %invertL160.lr.ph, label %incinvertL160

incinvertL160:                                    ; preds = %invertL160_phimerge
  %2942 = load i64, i64* %"iv'ac", align 8
  %2943 = add nsw i64 %2942, -1
  store i64 %2943, i64* %"iv'ac", align 8
  br label %invertL160

invertL209.loopexit:                              ; preds = %invertL209
  %_unwrap122 = add nsw i64 %arraysize, -1
  br label %mergeinvertL160_L209.loopexit

mergeinvertL160_L209.loopexit:                    ; preds = %invertL209.loopexit
  store i64 %_unwrap122, i64* %"iv'ac", align 8
  br label %invertL160

invertL209:                                       ; preds = %invertL222
  %2944 = load i8, i8* %_cache123, align 1, !invariant.group !3089
  switch i8 %2944, label %invertL86 [
    i8 0, label %invertL209.loopexit
    i8 1, label %invertL101
    i8 2, label %invertL118
  ]

invertL222:                                       ; preds = %invertpass.2, %invertL243.preheader
  br label %invertL209

invertL243.preheader:                             ; preds = %invertL243
  %2945 = load i64, i64* %"iv1'ac", align 8
  %forfree129 = load i64*, i64** %value_phi79_cache, align 8, !dereferenceable !3229, !invariant.group !3230
  %2946 = bitcast i64* %forfree129 to i8*
  call void @free(i8* nonnull %2946), !dbg !4243
  br label %invertL222

invertL243:                                       ; preds = %mergeinvertL243_pass.2.loopexit528, %invertL250
  %2947 = load i64, i64* %"iv1'ac", align 8
  %2948 = icmp eq i64 %2947, 0
  %2949 = xor i1 %2948, true
  br i1 %2948, label %invertL243.preheader, label %incinvertL243

incinvertL243:                                    ; preds = %invertL243
  %2950 = load i64, i64* %"iv1'ac", align 8
  %2951 = add nsw i64 %2950, -1
  store i64 %2951, i64* %"iv1'ac", align 8
  br label %invertL250

invertL250:                                       ; preds = %mergeinvertL243_pass.2.loopexit, %incinvertL243
  %2952 = load i64, i64* %"iv1'ac", align 8, !dbg !3239
  %"'ipc127_unwrap" = bitcast {} addrspace(10)* %546 to double addrspace(13)* addrspace(10)*, !dbg !3239
  %"'ipc128_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc127_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3239
  %"arrayptr751939'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc128_unwrap", align 8, !dbg !3239, !tbaa !382, !alias.scope !3240, !noalias !3241, !nonnull !67
  %2953 = load i64*, i64** %value_phi79_cache, align 8, !dbg !3239, !dereferenceable !3229, !invariant.group !3230
  %2954 = getelementptr inbounds i64, i64* %2953, i64 %2952, !dbg !3239
  %2955 = load i64, i64* %2954, align 8, !dbg !3239, !invariant.group !3231
  %_unwrap130 = add i64 %2955, -1, !dbg !3239
  %"'ipg126_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr751939'il_phi_unwrap", i64 %_unwrap130, !dbg !3239
  %2956 = load double, double addrspace(13)* %"'ipg126_unwrap", align 8, !dbg !3239, !tbaa !268, !alias.scope !4244, !noalias !4245
  store double 0.000000e+00, double addrspace(13)* %"'ipg126_unwrap", align 8, !dbg !3239, !tbaa !268, !alias.scope !4244, !noalias !4245
  %2957 = load double, double* %"arrayref749'de", align 8, !dbg !3239
  %2958 = fadd fast double %2957, %2956, !dbg !3239
  store double %2958, double* %"arrayref749'de", align 8, !dbg !3239
  %2959 = load double, double* %"arrayref749'de", align 8, !dbg !3232
  store double 0.000000e+00, double* %"arrayref749'de", align 8, !dbg !3232
  %2960 = load i64, i64* %"iv1'ac", align 8, !dbg !3232
  %"'ipc124_unwrap" = bitcast {} addrspace(10)* %"getfield15'ipl" to double addrspace(13)* addrspace(10)*, !dbg !3232
  %"'ipc125_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc124_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3232
  %"arrayptr748938'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc125_unwrap", align 16, !alias.scope !3224, !noalias !3225, !invariant.group !3226
  %iv.next2_unwrap = add nuw nsw i64 %2960, 1, !dbg !3232
  %_unwrap132 = add nsw i64 %iv.next2_unwrap, -1, !dbg !3232
  %"'ipg131_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr748938'ipl_unwrap", i64 %_unwrap132, !dbg !3232
  %2961 = load double, double addrspace(13)* %"'ipg131_unwrap", align 8, !dbg !3232, !tbaa !268, !alias.scope !4246, !noalias !4247
  %2962 = fadd fast double %2961, %2959, !dbg !3232
  store double %2962, double addrspace(13)* %"'ipg131_unwrap", align 8, !dbg !3232, !tbaa !268, !alias.scope !4246, !noalias !4247
  br label %invertL243

invertL325:                                       ; preds = %invertL359, %invertL325.L341_crit_edge
  call fastcc void @diffejulia__unsafe_setindex__2077({} addrspace(10)* align 16 %getfield19, {} addrspace(10)* align 16 %"getfield19'ipl", {} addrspace(10)* align 16 %2665, {} addrspace(10)* align 16 %2662, [1 x [1 x i64]] addrspace(11)* nocapture readonly align 8 %585, i64 signext 1, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %_augmented133), !dbg !3256
  br label %invertpass.2

invertL325.L341_crit_edge:                        ; preds = %invertL359
  %_unwrap134 = shl nuw i64 %arraylen111, 3, !dbg !3277
  %"'ipc135_unwrap" = bitcast {} addrspace(10)* %586 to i8 addrspace(13)* addrspace(10)*, !dbg !3277
  %"'ipc136_unwrap" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc135_unwrap" to i8 addrspace(13)* addrspace(11)*, !dbg !3277
  %"arrayptr119829.pre1043'il_phi_unwrap" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc136_unwrap", align 8, !dbg !3277, !tbaa !72, !alias.scope !3279, !noalias !3280
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %"arrayptr119829.pre1043'il_phi_unwrap", i8 0, i64 %_unwrap134, i1 false) #70, !dbg !3277, !tbaa !268, !noalias !2440
  br label %invertL325

invertL359:                                       ; preds = %invertib
  br i1 %.not828, label %invertL325, label %invertL325.L341_crit_edge

invertL394:                                       ; preds = %mergeinvertL394_L412.loopexit, %incinvertL394
  %2963 = load i64, i64* %"iv3'ac", align 8, !dbg !3285
  %".phi.trans.insert973'ipc_unwrap" = bitcast {} addrspace(10)* %2718 to double addrspace(13)* addrspace(10)*, !dbg !3285
  %".phi.trans.insert974'ipc_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert973'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3285
  %"arrayptr296858.pre'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert974'ipc_unwrap", align 8, !dbg !3285, !tbaa !382, !alias.scope !4154, !noalias !4155
  %iv.next4_unwrap = add nuw nsw i64 %2963, 1, !dbg !3285
  %_unwrap138 = add nsw i64 %iv.next4_unwrap, -1, !dbg !3285
  %"memcpy_refined_dst297'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr296858.pre'il_phi_unwrap", i64 %_unwrap138, !dbg !3285
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst297'ipg_unwrap", align 8, !dbg !3285, !tbaa !268, !alias.scope !4248, !noalias !4249
  %2964 = load i64, i64* %"iv3'ac", align 8
  %2965 = icmp eq i64 %2964, 0
  %2966 = xor i1 %2965, true
  br i1 %2965, label %invertidxend284.L394_crit_edge, label %incinvertL394

incinvertL394:                                    ; preds = %invertL394
  %2967 = load i64, i64* %"iv3'ac", align 8
  %2968 = add nsw i64 %2967, -1
  store i64 %2968, i64* %"iv3'ac", align 8
  br label %invertL394

invertL412.loopexit:                              ; preds = %invertL412
  %_unwrap139 = add nsw i64 %arraylen288, -1
  br label %mergeinvertL394_L412.loopexit

mergeinvertL394_L412.loopexit:                    ; preds = %invertL412.loopexit
  store i64 %_unwrap139, i64* %"iv3'ac", align 8
  br label %invertL394

invertL412:                                       ; preds = %invertL457
  call fastcc void @diffejulia__diagm_2062({ i64, {} addrspace(10)* } addrspace(11)* nocapture readonly align 8 %611, { i64, {} addrspace(10)* } addrspace(11)* nocapture align 8 %"'ipc141", { {} addrspace(10)*, i64, i8*, i64, i64 } %subcache), !dbg !3299
  br i1 %.not857, label %invertidxend258, label %invertL412.loopexit

invertL457:                                       ; preds = %invertL467
  br label %invertL412

invertL467:                                       ; preds = %invertL483, %invertL470
  br label %invertL457

invertL470:                                       ; preds = %staging, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit745
  br label %invertL467

invertL478:                                       ; preds = %staging
  %2969 = load {} addrspace(10)*, {} addrspace(10)** %"'ip_phi14_cache", align 8, !dbg !3360, !invariant.group !3362
  %2970 = bitcast {} addrspace(10)* %586 to i8 addrspace(13)* addrspace(10)*, !dbg !3360
  %2971 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2970, align 8, !dbg !3360
  %2972 = bitcast {} addrspace(10)* %2969 to i8 addrspace(13)* addrspace(10)*, !dbg !3360
  %2973 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2972, align 8, !dbg !3360
  %2974 = bitcast i8 addrspace(13)* %2973 to double addrspace(13)*, !dbg !3360
  %2975 = bitcast i8 addrspace(13)* %2971 to double addrspace(13)*, !dbg !3360
  %2976 = udiv i64 %601, 8, !dbg !3360
  %2977 = icmp eq i64 %2976, 0, !dbg !3360
  br i1 %2977, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit745, label %for.body.i744, !dbg !3360

for.body.i744:                                    ; preds = %for.body.i744, %invertL478
  %idx.i738 = phi i64 [ 0, %invertL478 ], [ %idx.next.i743, %for.body.i744 ], !dbg !3360
  %dst.i.i739 = getelementptr inbounds double, double addrspace(13)* %2974, i64 %idx.i738, !dbg !3360
  %dst.i.l.i740 = load double, double addrspace(13)* %dst.i.i739, align 1, !dbg !3360
  store double 0.000000e+00, double addrspace(13)* %dst.i.i739, align 1, !dbg !3360
  %src.i.i741 = getelementptr inbounds double, double addrspace(13)* %2975, i64 %idx.i738, !dbg !3360
  %src.i.l.i742 = load double, double addrspace(13)* %src.i.i741, align 1, !dbg !3360
  %2978 = fadd fast double %src.i.l.i742, %dst.i.l.i740, !dbg !3360
  store double %2978, double addrspace(13)* %src.i.i741, align 1, !dbg !3360
  %idx.next.i743 = add nuw i64 %idx.i738, 1, !dbg !3360
  %2979 = icmp eq i64 %2976, %idx.next.i743, !dbg !3360
  br i1 %2979, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit745, label %for.body.i744, !dbg !3360

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit745: ; preds = %invertL478, %for.body.i744
  br label %invertL470

invertL483:                                       ; preds = %invertL558.lr.ph
  %2980 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %626) #73, !dbg !3350
  %_unwrap151 = bitcast {}* %2980 to i8**
  %arrayptr728_unwrap = load i8*, i8** %_unwrap151, align 8, !dbg !3350, !tbaa !72, !alias.scope !3330, !noalias !3333, !nonnull !67, !invariant.group !3355
  %2981 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %627) #73, !dbg !3350
  %_unwrap152 = bitcast {}* %2981 to i8**
  %arrayptr730_unwrap = load i8*, i8** %_unwrap152, align 8, !dbg !3350, !tbaa !72, !alias.scope !3268, !noalias !3271, !nonnull !67, !invariant.group !3356
  %.not936.not_unwrap = icmp eq i8* %arrayptr728_unwrap, %arrayptr730_unwrap
  %2982 = load i64, i64* %"iv5'ac", align 8
  %2983 = load i64, i64* %"iv7'ac", align 8
  %forfree157 = load double*, double** %arrayref_cache, align 8, !dereferenceable !3229, !invariant.group !3400
  %2984 = bitcast double* %forfree157 to i8*
  call void @free(i8* nonnull %2984), !dbg !4243, !enzyme_cache_free !3398
  br i1 %.not863, label %invertL467, label %staging

invertL558.lr.ph:                                 ; preds = %invertL558
  %2985 = load i64, i64* %"iv5'ac", align 8
  %2986 = icmp eq i64 %2985, 0
  %2987 = xor i1 %2986, true
  br i1 %2986, label %invertL483, label %incinvertL558.lr.ph

incinvertL558.lr.ph:                              ; preds = %invertL558.lr.ph
  %2988 = load i64, i64* %"iv5'ac", align 8
  %2989 = add nsw i64 %2988, -1
  store i64 %2989, i64* %"iv5'ac", align 8
  br label %invertL562

invertL558:                                       ; preds = %mergeinvertL558_L562, %incinvertL558
  %2990 = load i64, i64* %"iv7'ac", align 8, !dbg !3419
  %2991 = load i64, i64* %"iv5'ac", align 8, !dbg !3419
  %iv.next6_unwrap = add nuw nsw i64 %2991, 1, !dbg !3419
  %value_phi341.op_unwrap = add nsw i64 %iv.next6_unwrap, -1, !dbg !3419
  %_unwrap154 = mul i64 %value_phi341.op_unwrap, %arraysize125, !dbg !3419
  %_unwrap155 = add i64 %2990, %_unwrap154, !dbg !3419
  %"'ipg153_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr358870.pre'ipl", i64 %_unwrap155, !dbg !3419
  %2992 = load double, double addrspace(13)* %"'ipg153_unwrap", align 8, !dbg !3419, !tbaa !268, !alias.scope !4250, !noalias !4251
  store double 0.000000e+00, double addrspace(13)* %"'ipg153_unwrap", align 8, !dbg !3419, !tbaa !268, !alias.scope !4250, !noalias !4251
  %2993 = load double, double* %"'de156", align 8, !dbg !3419
  %2994 = fadd fast double %2993, %2992, !dbg !3419
  store double %2994, double* %"'de156", align 8, !dbg !3419
  %2995 = load double, double* %"'de156", align 8, !dbg !3416
  store double 0.000000e+00, double* %"'de156", align 8, !dbg !3416
  %2996 = load i64, i64* %"iv7'ac", align 8, !dbg !3416
  %2997 = load i64, i64* %"iv5'ac", align 8, !dbg !3416
  %_unwrap158 = bitcast {} addrspace(10)* %593 to {} addrspace(10)* addrspace(10)*, !dbg !3416
  %_unwrap159 = addrspacecast {} addrspace(10)* addrspace(10)* %_unwrap158 to {} addrspace(10)* addrspace(11)*, !dbg !3416
  %arraysize_ptr126_unwrap = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap159, i64 4, !dbg !3416
  %_unwrap160 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr126_unwrap to i64 addrspace(11)*, !dbg !3416
  %arraysize127_unwrap = load i64, i64 addrspace(11)* %_unwrap160, align 8, !dbg !3282, !tbaa !72, !range !86, !alias.scope !3268, !noalias !3271, !invariant.group !4101
  %2998 = call i64 @llvm.umax.i64(i64 %arraysize127_unwrap, i64 1) #70, !dbg !3393
  %_unwrap161 = add nsw i64 %2998, -1, !dbg !3416
  %2999 = add nuw i64 %_unwrap161, 1, !dbg !3416
  %arraysize_ptr124_unwrap = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap159, i64 3, !dbg !3416
  %_unwrap162 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr124_unwrap to i64 addrspace(11)*, !dbg !3416
  %arraysize125_unwrap = load i64, i64 addrspace(11)* %_unwrap162, align 8, !dbg !3282, !tbaa !72, !range !86, !alias.scope !3268, !noalias !3271, !invariant.group !3284
  %3000 = call i64 @llvm.umax.i64(i64 %arraysize125_unwrap, i64 1) #70, !dbg !3393
  %_unwrap163 = add nsw i64 %3000, -1, !dbg !3416
  %3001 = add nuw i64 %_unwrap163, 1, !dbg !3416
  %3002 = mul nuw nsw i64 %3001, %2999, !dbg !3416
  %3003 = load double*, double** %arrayref_cache, align 8, !dbg !3416, !dereferenceable !3229, !invariant.group !3400
  %3004 = mul nuw nsw i64 %3001, %2999, !dbg !3416
  %3005 = mul nuw nsw i64 %2997, %3001, !dbg !3416
  %3006 = add nuw nsw i64 %2996, %3005, !dbg !3416
  %3007 = getelementptr inbounds double, double* %3003, i64 %3006, !dbg !3416
  %3008 = load double, double* %3007, align 8, !dbg !3402, !tbaa !268, !alias.scope !116, !noalias !270, !invariant.group !3427
  %3009 = fmul fast double %2995, %3008, !dbg !3416
  %3010 = load double, double* %"'de85", align 8, !dbg !3416
  %3011 = fadd fast double %3010, %3009, !dbg !3416
  store double %3011, double* %"'de85", align 8, !dbg !3416
  %3012 = fmul fast double %2995, %465, !dbg !3416
  %3013 = load double, double* %"arrayref'de", align 8, !dbg !3416
  %3014 = fadd fast double %3013, %3012, !dbg !3416
  store double %3014, double* %"arrayref'de", align 8, !dbg !3416
  %3015 = load double, double* %"arrayref'de", align 8, !dbg !3402
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !3402
  %3016 = load i64, i64* %"iv7'ac", align 8, !dbg !3402
  %3017 = load i64, i64* %"iv5'ac", align 8, !dbg !3402
  %_unwrap165 = select i1 %.not867, i64 0, i64 %3016, !dbg !3402
  %_unwrap166 = select i1 %.not868, i64 0, i64 %value_phi341.op_unwrap, !dbg !3402
  %_unwrap167 = mul i64 %_unwrap166, %arraysize350, !dbg !3402
  %_unwrap168 = add i64 %_unwrap165, %_unwrap167, !dbg !3402
  %"'ipg164_unwrap" = getelementptr inbounds double, double addrspace(13)* %"'ipl", i64 %_unwrap168, !dbg !3402
  %3018 = load double, double addrspace(13)* %"'ipg164_unwrap", align 8, !dbg !3402, !tbaa !268, !alias.scope !4252, !noalias !4253
  %3019 = fadd fast double %3018, %3015, !dbg !3402
  store double %3019, double addrspace(13)* %"'ipg164_unwrap", align 8, !dbg !3402, !tbaa !268, !alias.scope !4252, !noalias !4253
  %3020 = load i64, i64* %"iv7'ac", align 8
  %3021 = icmp eq i64 %3020, 0
  %3022 = xor i1 %3021, true
  br i1 %3021, label %invertL558.lr.ph, label %incinvertL558

incinvertL558:                                    ; preds = %invertL558
  %3023 = load i64, i64* %"iv7'ac", align 8
  %3024 = add nsw i64 %3023, -1
  store i64 %3024, i64* %"iv7'ac", align 8
  br label %invertL558

invertL562:                                       ; preds = %mergeinvertL558.lr.ph_L598, %incinvertL558.lr.ph
  br label %mergeinvertL558_L562

mergeinvertL558_L562:                             ; preds = %invertL562
  store i64 %656, i64* %"iv7'ac", align 8
  br label %invertL558

invertL598:                                       ; preds = %invertL1366, %invertL616.preheader
  call fastcc void @diffejulia___2053({} addrspace(10)* align 16 %612, {} addrspace(10)* align 16 %"'ac", {} addrspace(10)* align 16 %621, {} addrspace(10)* align 16 %614, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %subcache171), !dbg !3290
  br label %mergeinvertL558.lr.ph_L598

mergeinvertL558.lr.ph_L598:                       ; preds = %invertL598
  store i64 %655, i64* %"iv5'ac", align 8
  br label %invertL562

invertL616.preheader:                             ; preds = %invertL616
  %3025 = load i64, i64* %"iv9'ac", align 8
  %forfree = load i64*, i64** %loopLimit_cache22, align 8, !dereferenceable !3229, !invariant.group !3474
  %3026 = bitcast i64* %forfree to i8*
  call void @free(i8* nonnull %3026), !dbg !4243, !enzyme_cache_free !3472
  %3027 = load i64, i64* %"iv9'ac", align 8
  %forfree45 = load i64*, i64** %loopLimit_cache43, align 8, !dereferenceable !3229, !invariant.group !3479
  %3028 = bitcast i64* %forfree45 to i8*
  call void @free(i8* nonnull %3028), !dbg !4243, !enzyme_cache_free !3477
  %3029 = load i64, i64* %"iv9'ac", align 8
  %forfree57 = load i64*, i64** %loopLimit_cache55, align 8, !dereferenceable !3229, !invariant.group !3482
  %3030 = bitcast i64* %forfree57 to i8*
  call void @free(i8* nonnull %3030), !dbg !4243, !enzyme_cache_free !3480
  %3031 = load i64, i64* %"iv9'ac", align 8
  %forfree178 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache177, align 8, !dereferenceable !3229, !invariant.group !3483
  %3032 = load i64, i64* %"iv9'ac", align 8
  %forfree180 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi17_cache", align 8, !dereferenceable !3229, !invariant.group !3484
  %3033 = load i64, i64* %"iv9'ac", align 8
  %forfree184 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache182_cache, align 8, !dereferenceable !4254, !invariant.group !3485
  %3034 = load i64, i64* %"iv9'ac", align 8
  %forfree188 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache186, align 8, !dereferenceable !3229, !invariant.group !3486
  %3035 = load i64, i64* %"iv9'ac", align 8
  %forfree197 = load i64**, i64*** %value_phi419_cache, align 8, !dereferenceable !3229, !invariant.group !3489
  %3036 = bitcast i64** %forfree197 to i8*
  call void @free(i8* nonnull %3036), !dbg !4243, !enzyme_cache_free !3487
  %3037 = load i64, i64* %"iv9'ac", align 8
  %forfree215 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache213, align 8, !dereferenceable !3229, !invariant.group !3490
  %3038 = load i64, i64* %"iv9'ac", align 8
  %forfree223 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache221, align 8, !dereferenceable !3229, !invariant.group !3491
  %3039 = load i64, i64* %"iv9'ac", align 8
  %forfree224 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented181_cache, align 8, !dereferenceable !4255, !invariant.group !3492
  %3040 = load i64, i64* %"iv9'ac", align 8
  %forfree227 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache225, align 8, !dereferenceable !3229, !invariant.group !3493
  %3041 = load i64, i64* %"iv9'ac", align 8
  %forfree228 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi71_cache", align 8, !dereferenceable !3229, !invariant.group !3494
  %3042 = load i64, i64* %"iv9'ac", align 8
  %forfree231 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache229, align 8, !dereferenceable !3229, !invariant.group !3495
  %3043 = load i64, i64* %"iv9'ac", align 8
  %forfree232 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi25_cache", align 8, !dereferenceable !3229, !invariant.group !3496
  %3044 = load i64, i64* %"iv9'ac", align 8
  %forfree235 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache233, align 8, !dereferenceable !3229, !invariant.group !3497
  %3045 = load i64, i64* %"iv9'ac", align 8
  %forfree236 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi24_cache", align 8, !dereferenceable !3229, !invariant.group !3498
  %3046 = load i64, i64* %"iv9'ac", align 8
  %forfree239 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache237, align 8, !dereferenceable !3229, !invariant.group !3499
  %3047 = load i64, i64* %"iv9'ac", align 8
  %forfree243 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache241_cache, align 8, !dereferenceable !4254, !invariant.group !3500
  %3048 = load i64, i64* %"iv9'ac", align 8
  %forfree246 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache244, align 8, !dereferenceable !3229, !invariant.group !3501
  %3049 = load i64, i64* %"iv9'ac", align 8
  %forfree252 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %box441_cache, align 8, !dereferenceable !3229, !invariant.group !3502
  %3050 = load i64, i64* %"iv9'ac", align 8
  %forfree253 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"box441'mi_cache", align 8, !dereferenceable !3229, !invariant.group !3503
  %3051 = load i64, i64* %"iv9'ac", align 8
  %forfree256 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache254, align 8, !dereferenceable !3229, !invariant.group !3504
  %3052 = load i64, i64* %"iv9'ac", align 8
  %forfree269 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"newstruct435'mi_cache", align 8, !dereferenceable !3229, !invariant.group !3505
  %3053 = load i64, i64* %"iv9'ac", align 8
  %forfree272 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache270, align 8, !dereferenceable !3229, !invariant.group !3506
  %3054 = load i64, i64* %"iv9'ac", align 8
  %forfree275 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache273, align 8, !dereferenceable !3229, !invariant.group !3507
  %3055 = load i64, i64* %"iv9'ac", align 8
  %forfree287 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache285, align 8, !dereferenceable !3229, !invariant.group !3508
  %3056 = load i64, i64* %"iv9'ac", align 8
  %forfree296 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache294, align 8, !dereferenceable !3229, !invariant.group !3509
  %3057 = load i64, i64* %"iv9'ac", align 8
  %forfree300 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache298, align 8, !dereferenceable !3229, !invariant.group !3510
  %3058 = load i64, i64* %"iv9'ac", align 8
  %forfree310 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi31_cache", align 8, !dereferenceable !3229, !invariant.group !3511
  %3059 = load i64, i64* %"iv9'ac", align 8
  %forfree312 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi34_cache", align 8, !dereferenceable !3229, !invariant.group !3512
  %3060 = load i64, i64* %"iv9'ac", align 8
  %forfree316 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache314, align 8, !dereferenceable !3229, !invariant.group !3513
  %3061 = load i64, i64* %"iv9'ac", align 8
  %forfree319 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache317, align 8, !dereferenceable !3229, !invariant.group !3514
  %3062 = load i64, i64* %"iv9'ac", align 8
  %forfree331 = load i1*, i1** %.not916.not_cache, align 8, !dereferenceable !4256, !invariant.group !3517
  %3063 = bitcast i1* %forfree331 to i8*
  call void @free(i8* nonnull %3063), !dbg !4243, !enzyme_cache_free !3515
  %3064 = load i64, i64* %"iv9'ac", align 8
  %forfree335 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache333, align 8, !dereferenceable !3229, !invariant.group !3518
  %3065 = load i64, i64* %"iv9'ac", align 8
  %forfree339 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache337, align 8, !dereferenceable !3229, !invariant.group !3519
  %3066 = load i64, i64* %"iv9'ac", align 8
  %forfree342 = load { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)*, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)** %_augmented341_cache, align 8, !dereferenceable !4257, !invariant.group !3520
  %3067 = load i64, i64* %"iv9'ac", align 8
  %forfree344 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi37_cache", align 8, !dereferenceable !3229, !invariant.group !3521
  %3068 = load i64, i64* %"iv9'ac", align 8
  %forfree354 = load i1*, i1** %.not926.not_cache, align 8, !dereferenceable !4256, !invariant.group !3524
  %3069 = bitcast i1* %forfree354 to i8*
  call void @free(i8* nonnull %3069), !dbg !4243, !enzyme_cache_free !3522
  %3070 = load i64, i64* %"iv9'ac", align 8
  %forfree367 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache365, align 8, !dereferenceable !3229, !invariant.group !3525
  %3071 = load i64, i64* %"iv9'ac", align 8
  %forfree369 = load i1*, i1** %.not929_cache, align 8, !dereferenceable !4256, !invariant.group !3528
  %3072 = bitcast i1* %forfree369 to i8*
  call void @free(i8* nonnull %3072), !dbg !4243, !enzyme_cache_free !3526
  %3073 = load i64, i64* %"iv9'ac", align 8
  %forfree374 = load i8*, i8** %_cache372, align 8, !dereferenceable !4256, !invariant.group !3531
  call void @free(i8* nonnull %forfree374), !dbg !4243, !enzyme_cache_free !3529
  %3074 = load i64, i64* %"iv9'ac", align 8
  %forfree379 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache377, align 8, !dereferenceable !3229, !invariant.group !3532
  %3075 = load i64, i64* %"iv9'ac", align 8
  %forfree381 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi39_cache", align 8, !dereferenceable !3229, !invariant.group !3533
  %3076 = load i64, i64* %"iv9'ac", align 8
  %forfree385 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache383_cache, align 8, !dereferenceable !4254, !invariant.group !3534
  %3077 = load i64, i64* %"iv9'ac", align 8
  %forfree390 = load i1*, i1** %.not8931036_cache, align 8, !dereferenceable !4256, !invariant.group !3537
  %3078 = bitcast i1* %forfree390 to i8*
  call void @free(i8* nonnull %3078), !dbg !4243, !enzyme_cache_free !3535
  %3079 = load i64, i64* %"iv9'ac", align 8
  %forfree393 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache391, align 8, !dereferenceable !3229, !invariant.group !3538
  %3080 = load i64, i64* %"iv9'ac", align 8
  %forfree402 = load i64**, i64*** %value_phi529_cache, align 8, !dereferenceable !3229, !invariant.group !3541
  %3081 = bitcast i64** %forfree402 to i8*
  call void @free(i8* nonnull %3081), !dbg !4243, !enzyme_cache_free !3539
  %3082 = load i64, i64* %"iv9'ac", align 8
  %forfree420 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache418, align 8, !dereferenceable !3229, !invariant.group !3542
  %3083 = load i64, i64* %"iv9'ac", align 8
  %forfree424 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache422, align 8, !dereferenceable !3229, !invariant.group !3543
  %3084 = load i64, i64* %"iv9'ac", align 8
  %forfree425 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi51_cache", align 8, !dereferenceable !3229, !invariant.group !3544
  %3085 = load i64, i64* %"iv9'ac", align 8
  %forfree429 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache427_cache, align 8, !dereferenceable !4254, !invariant.group !3545
  %3086 = load i64, i64* %"iv9'ac", align 8
  %forfree432 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache430, align 8, !dereferenceable !3229, !invariant.group !3546
  %3087 = load i64, i64* %"iv9'ac", align 8
  %forfree433 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented382_cache, align 8, !dereferenceable !4255, !invariant.group !3547
  %3088 = load i64, i64* %"iv9'ac", align 8
  %forfree436 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache434, align 8, !dereferenceable !3229, !invariant.group !3548
  %3089 = load i64, i64* %"iv9'ac", align 8
  %forfree437 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi48_cache", align 8, !dereferenceable !3229, !invariant.group !3549
  %3090 = load i64, i64* %"iv9'ac", align 8
  %forfree441 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache439_cache, align 8, !dereferenceable !4258, !invariant.group !3550
  %3091 = load i64, i64* %"iv9'ac", align 8
  %forfree444 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache442, align 8, !dereferenceable !3229, !invariant.group !3551
  %3092 = load i64, i64* %"iv9'ac", align 8
  %forfree445 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi47_cache", align 8, !dereferenceable !3229, !invariant.group !3552
  %3093 = load i64, i64* %"iv9'ac", align 8
  %forfree448 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache446, align 8, !dereferenceable !3229, !invariant.group !3553
  %3094 = load i64, i64* %"iv9'ac", align 8
  %forfree452 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache450_cache, align 8, !dereferenceable !4254, !invariant.group !3554
  %3095 = load i64, i64* %"iv9'ac", align 8
  %forfree458 = load i64**, i64*** %value_phi585_cache, align 8, !dereferenceable !3229, !invariant.group !3557
  %3096 = bitcast i64** %forfree458 to i8*
  call void @free(i8* nonnull %3096), !dbg !4243, !enzyme_cache_free !3555
  %3097 = load i64, i64* %"iv9'ac", align 8
  %forfree486 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache484, align 8, !dereferenceable !3229, !invariant.group !3558
  %3098 = load i64, i64* %"iv9'ac", align 8
  %forfree488 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi61_cache", align 8, !dereferenceable !3229, !invariant.group !3559
  %3099 = load i64, i64* %"iv9'ac", align 8
  %forfree491 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)** %subcache490_cache, align 8, !dereferenceable !4259, !invariant.group !3560
  %3100 = load i64, i64* %"iv9'ac", align 8
  %forfree495 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache493, align 8, !dereferenceable !3229, !invariant.group !3561
  %3101 = load i64, i64* %"iv9'ac", align 8
  %forfree496 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented426_cache, align 8, !dereferenceable !4255, !invariant.group !3562
  %3102 = load i64, i64* %"iv9'ac", align 8
  %forfree499 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache497, align 8, !dereferenceable !3229, !invariant.group !3563
  %3103 = load i64, i64* %"iv9'ac", align 8
  %forfree500 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi60_cache", align 8, !dereferenceable !3229, !invariant.group !3564
  %3104 = load i64, i64* %"iv9'ac", align 8
  %forfree504 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache502_cache, align 8, !dereferenceable !4258, !invariant.group !3565
  %3105 = load i64, i64* %"iv9'ac", align 8
  %forfree507 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache505, align 8, !dereferenceable !3229, !invariant.group !3566
  %3106 = load i64, i64* %"iv9'ac", align 8
  %forfree508 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi59_cache", align 8, !dereferenceable !3229, !invariant.group !3567
  %3107 = load i64, i64* %"iv9'ac", align 8
  %forfree511 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache509, align 8, !dereferenceable !3229, !invariant.group !3568
  %3108 = load i64, i64* %"iv9'ac", align 8
  %forfree515 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache513_cache, align 8, !dereferenceable !4254, !invariant.group !3569
  %3109 = load i64, i64* %"iv9'ac", align 8
  %forfree520 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache518, align 8, !dereferenceable !3229, !invariant.group !3570
  %3110 = load i64, i64* %"iv9'ac", align 8
  %forfree522 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi73_cache", align 8, !dereferenceable !3229, !invariant.group !3571
  %3111 = load i64, i64* %"iv9'ac", align 8
  %forfree526 = load { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)** %_augmented525_cache, align 8, !dereferenceable !4260, !invariant.group !3572
  %3112 = load i64, i64* %"iv9'ac", align 8
  %forfree557 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache555, align 8, !dereferenceable !3229, !invariant.group !3573
  %3113 = load i64, i64* %"iv9'ac", align 8
  %forfree565 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache563, align 8, !dereferenceable !3229, !invariant.group !3574
  %3114 = load i64, i64* %"iv9'ac", align 8
  %forfree566 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi70_cache", align 8, !dereferenceable !3229, !invariant.group !3575
  %3115 = load i64, i64* %"iv9'ac", align 8
  %forfree569 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache567, align 8, !dereferenceable !3229, !invariant.group !3576
  %3116 = load i64, i64* %"iv9'ac", align 8
  %forfree576 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache574, align 8, !dereferenceable !3229, !invariant.group !3577
  %3117 = load i64, i64* %"iv9'ac", align 8
  %forfree577 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi69_cache", align 8, !dereferenceable !3229, !invariant.group !3578
  %3118 = load i64, i64* %"iv9'ac", align 8
  %forfree580 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache578, align 8, !dereferenceable !3229, !invariant.group !3579
  %3119 = load i64, i64* %"iv9'ac", align 8
  %forfree587 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache585, align 8, !dereferenceable !3229, !invariant.group !3580
  %3120 = load i64, i64* %"iv9'ac", align 8
  %forfree588 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi68_cache", align 8, !dereferenceable !3229, !invariant.group !3581
  %3121 = load i64, i64* %"iv9'ac", align 8
  %forfree591 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache589, align 8, !dereferenceable !3229, !invariant.group !3582
  %3122 = load i64, i64* %"iv9'ac", align 8
  %forfree598 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache596, align 8, !dereferenceable !3229, !invariant.group !3583
  %3123 = load i64, i64* %"iv9'ac", align 8
  %forfree599 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi67_cache", align 8, !dereferenceable !3229, !invariant.group !3584
  %3124 = load i64, i64* %"iv9'ac", align 8
  %forfree602 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache600, align 8, !dereferenceable !3229, !invariant.group !3585
  %3125 = load i64, i64* %"iv9'ac", align 8
  %forfree607 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %box_cache, align 8, !dereferenceable !3229, !invariant.group !3586
  %3126 = load i64, i64* %"iv9'ac", align 8
  %forfree608 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"box'mi_cache", align 8, !dereferenceable !3229, !invariant.group !3587
  %3127 = load i64, i64* %"iv9'ac", align 8
  %forfree611 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache609, align 8, !dereferenceable !3229, !invariant.group !3588
  %3128 = load i64, i64* %"iv9'ac", align 8
  %forfree612 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi66_cache", align 8, !dereferenceable !3229, !invariant.group !3589
  %3129 = load i64, i64* %"iv9'ac", align 8
  %forfree617 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache615, align 8, !dereferenceable !3229, !invariant.group !3590
  %3130 = load i64, i64* %"iv9'ac", align 8
  %forfree624 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache622, align 8, !dereferenceable !3229, !invariant.group !3591
  %3131 = load i64, i64* %"iv9'ac", align 8
  %forfree625 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ipl176_cache", align 8, !dereferenceable !3229, !invariant.group !3592
  %3132 = load i64, i64* %"iv9'ac", align 8
  %forfree634 = load { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)*, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)** %_augmented633_cache, align 8, !dereferenceable !4261, !invariant.group !3593
  %3133 = load i64, i64* %"iv9'ac", align 8
  %forfree637 = load i8*, i8** %_cache635, align 8, !dereferenceable !4256, !invariant.group !3596
  call void @free(i8* nonnull %forfree637), !dbg !4243, !enzyme_cache_free !3594
  br label %invertL598

invertL616:                                       ; preds = %invertpass387
  %3134 = load i64, i64* %"iv9'ac", align 8, !dbg !3602
  %_unwrap179 = add nsw i64 %682, -2, !dbg !3602
  %3135 = add nuw i64 %_unwrap179, 1, !dbg !3602
  %3136 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache177, align 8, !dbg !3602, !dereferenceable !3229, !invariant.group !3483
  %3137 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3136, i64 %3134, !dbg !3602
  %3138 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3137, align 8, !dbg !3602, !invariant.group !3605
  %3139 = load i64, i64* %"iv9'ac", align 8, !dbg !3602
  %3140 = add nuw i64 %_unwrap179, 1, !dbg !3602
  %3141 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi17_cache", align 8, !dbg !3602, !dereferenceable !3229, !invariant.group !3484
  %3142 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3141, i64 %3139, !dbg !3602
  %3143 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3142, align 8, !dbg !3602, !invariant.group !3606
  %3144 = load i64, i64* %"iv9'ac", align 8, !dbg !3602
  %3145 = add nuw i64 %_unwrap179, 1, !dbg !3602
  %3146 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache182_cache, align 8, !dbg !3602, !dereferenceable !3229, !invariant.group !3485
  %3147 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3146, i64 %3144, !dbg !3602
  %3148 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3147, align 8, !dbg !3602, !invariant.group !3607
  call fastcc void @diffejulia_gemv__1996({} addrspace(10)* align 16 %3138, {} addrspace(10)* align 16 %3143, i32 zeroext 1308622848, {} addrspace(10)* align 16 %680, {} addrspace(10)* align 16 %"'ac172", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl", { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %3148), !dbg !3602
  %3149 = load double, double* %"value_phi372'de", align 8
  store double 0.000000e+00, double* %"value_phi372'de", align 8
  %3150 = load i64, i64* %"iv9'ac", align 8
  %3151 = icmp eq i64 %3150, 0
  %3152 = xor i1 %3151, true
  %3153 = select fast i1 %3152, double %3149, double 0.000000e+00
  %3154 = load double, double* %"'de185", align 8
  %3155 = fadd fast double %3154, %3149
  %3156 = select fast i1 %3151, double %3154, double %3155
  store double %3156, double* %"'de185", align 8
  br i1 %3151, label %invertL616.preheader, label %incinvertL616

incinvertL616:                                    ; preds = %invertL616
  %3157 = load i64, i64* %"iv9'ac", align 8
  %3158 = add nsw i64 %3157, -1
  store i64 %3158, i64* %"iv9'ac", align 8
  br label %invertL1352

invertL683:                                       ; preds = %invertL696
  %3159 = load i64, i64* %"iv9'ac", align 8, !dbg !3626
  %_unwrap189 = add nsw i64 %682, -2, !dbg !3626
  %3160 = add nuw i64 %_unwrap189, 1, !dbg !3626
  %3161 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache186, align 8, !dbg !3626, !dereferenceable !3229, !invariant.group !3486
  %3162 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3161, i64 %3159, !dbg !3626
  %3163 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3162, align 8, !dbg !3626, !invariant.group !3631
  br label %invertpass387

invertL696:                                       ; preds = %invertL753.L754_crit_edge, %invertL717.preheader
  br label %invertL683

invertL717.preheader:                             ; preds = %invertL717
  %3164 = load i64, i64* %"iv9'ac", align 8
  %3165 = load i64, i64* %"iv11'ac", align 8
  %_unwrap198 = load i64**, i64*** %value_phi419_cache, align 8, !dbg !3649, !invariant.group !3650
  %_unwrap199 = getelementptr inbounds i64*, i64** %_unwrap198, i64 %3164
  %forfree200 = load i64*, i64** %_unwrap199, align 8, !dereferenceable !3229, !invariant.group !3651
  %3166 = bitcast i64* %forfree200 to i8*
  call void @free(i8* nonnull %3166), !dbg !4243
  br label %invertL696

invertL717:                                       ; preds = %mergeinvertL717_L753.L754_crit_edge.loopexit209, %invertL724
  %3167 = load i64, i64* %"iv11'ac", align 8
  %3168 = icmp eq i64 %3167, 0
  %3169 = xor i1 %3168, true
  br i1 %3168, label %invertL717.preheader, label %incinvertL717

incinvertL717:                                    ; preds = %invertL717
  %3170 = load i64, i64* %"iv11'ac", align 8
  %3171 = add nsw i64 %3170, -1
  store i64 %3171, i64* %"iv11'ac", align 8
  br label %invertL724

invertL724:                                       ; preds = %mergeinvertL717_L753.L754_crit_edge.loopexit, %incinvertL717
  %3172 = load i64, i64* %"iv11'ac", align 8, !dbg !3658
  %3173 = load i64, i64* %"iv9'ac", align 8, !dbg !3658
  %_unwrap196 = add nsw i64 %682, -2, !dbg !3658
  %3174 = add nuw i64 %_unwrap196, 1, !dbg !3658
  %3175 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache186, align 8, !dbg !3658, !dereferenceable !3229, !invariant.group !3486
  %3176 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3175, i64 %3173, !dbg !3658
  %3177 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3176, align 8, !dbg !3658, !invariant.group !3631
  %"'ipc194_unwrap" = bitcast {} addrspace(10)* %3177 to double addrspace(13)* addrspace(10)*, !dbg !3658
  %"'ipc195_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc194_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3658
  %"arrayptr718934'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc195_unwrap", align 8, !dbg !3658, !tbaa !382, !alias.scope !3659, !noalias !3660, !nonnull !67
  %3178 = add nuw i64 %_unwrap196, 1, !dbg !3658
  %3179 = load i64**, i64*** %value_phi419_cache, align 8, !dbg !3658, !dereferenceable !3229, !invariant.group !3489
  %3180 = getelementptr inbounds i64*, i64** %3179, i64 %3173, !dbg !3658
  %3181 = load i64*, i64** %3180, align 8, !dbg !3658, !dereferenceable !3229, !invariant.group !3651
  %3182 = getelementptr inbounds i64, i64* %3181, i64 %3172, !dbg !3658
  %3183 = load i64, i64* %3182, align 8, !dbg !3658, !invariant.group !3652
  %_unwrap201 = add i64 %3183, -1, !dbg !3658
  %"'ipg193_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr718934'il_phi_unwrap", i64 %_unwrap201, !dbg !3658
  %3184 = load double, double addrspace(13)* %"'ipg193_unwrap", align 8, !dbg !3658, !tbaa !268, !alias.scope !4262, !noalias !4263
  store double 0.000000e+00, double addrspace(13)* %"'ipg193_unwrap", align 8, !dbg !3658, !tbaa !268, !alias.scope !4262, !noalias !4263
  %3185 = load double, double* %"arrayref716'de", align 8, !dbg !3658
  %3186 = fadd fast double %3185, %3184, !dbg !3658
  store double %3186, double* %"arrayref716'de", align 8, !dbg !3658
  %3187 = load double, double* %"arrayref716'de", align 8, !dbg !3645
  store double 0.000000e+00, double* %"arrayref716'de", align 8, !dbg !3645
  %3188 = load i64, i64* %"iv11'ac", align 8, !dbg !3645
  %3189 = load i64, i64* %"iv9'ac", align 8, !dbg !3645
  %"'ipc190_unwrap" = bitcast {} addrspace(10)* %"getfield13'ipl" to double addrspace(13)* addrspace(10)*, !dbg !3645
  %"'ipc191_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc190_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3645
  %"arrayptr715933'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc191_unwrap", align 16, !alias.scope !3454, !noalias !3451, !invariant.group !3648
  %_unwrap203 = add i64 %3189, 2, !dbg !3645
  %_unwrap204 = add nsw i64 %_unwrap203, -2, !dbg !3645
  %3190 = load i64, i64* %arraysize390_cache, align 8, !alias.scope !3451, !noalias !3454, !invariant.group !3476
  %_unwrap205 = mul i64 %_unwrap204, %3190, !dbg !3645
  %_unwrap206 = add i64 %_unwrap205, -1, !dbg !3645
  %iv.next12_unwrap = add nuw nsw i64 %3188, 1, !dbg !3645
  %_unwrap207 = add i64 %_unwrap206, %iv.next12_unwrap, !dbg !3645
  %"'ipg202_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr715933'ipl_unwrap", i64 %_unwrap207, !dbg !3645
  %3191 = load double, double addrspace(13)* %"'ipg202_unwrap", align 8, !dbg !3645, !tbaa !268, !alias.scope !4264, !noalias !4265
  %3192 = fadd fast double %3191, %3187, !dbg !3645
  store double %3192, double addrspace(13)* %"'ipg202_unwrap", align 8, !dbg !3645, !tbaa !268, !alias.scope !4264, !noalias !4265
  br label %invertL717

invertL753.L754_crit_edge.loopexit:               ; preds = %invertL753.L754_crit_edge
  %_unwrap208 = add nsw i64 %682, -2
  %3193 = add nuw i64 %_unwrap208, 1
  %3194 = load i64*, i64** %loopLimit_cache22, align 8, !dereferenceable !3229, !invariant.group !3474
  %3195 = load i64, i64* %"iv9'ac", align 8
  %3196 = getelementptr inbounds i64, i64* %3194, i64 %3195
  %3197 = load i64, i64* %3196, align 8, !invariant.group !3671
  %3198 = add nuw i64 %_unwrap208, 1
  %3199 = load i64*, i64** %loopLimit_cache22, align 8, !dereferenceable !3229, !invariant.group !3474
  %3200 = load i64, i64* %"iv9'ac", align 8
  %3201 = getelementptr inbounds i64, i64* %3199, i64 %3200
  %3202 = load i64, i64* %3201, align 8, !invariant.group !3671
  %3203 = load i64, i64* %"iv9'ac", align 8
  %3204 = add nuw i64 %_unwrap208, 1
  %3205 = load i64*, i64** %loopLimit_cache22, align 8, !dereferenceable !3229, !invariant.group !3474
  %3206 = getelementptr inbounds i64, i64* %3205, i64 %3203
  %3207 = load i64, i64* %3206, align 8, !invariant.group !3671
  %3208 = icmp ne i64 %3207, 0
  br i1 %3208, label %invertL753.L754_crit_edge.loopexit_phirc, label %invertL753.L754_crit_edge.loopexit_phirc212

invertL753.L754_crit_edge.loopexit_phirc:         ; preds = %invertL753.L754_crit_edge.loopexit
  %3209 = sub nuw i64 %3207, 1
  %_unwrap210 = add nsw i64 %682, -2
  %3210 = add nuw i64 %_unwrap210, 1
  %3211 = load i64**, i64*** %value_phi419_cache, align 8, !dereferenceable !3229, !invariant.group !3489
  %3212 = getelementptr inbounds i64*, i64** %3211, i64 %3203
  %3213 = load i64*, i64** %3212, align 8, !dereferenceable !3229, !invariant.group !3651
  %3214 = getelementptr inbounds i64, i64* %3213, i64 %3209
  %3215 = load i64, i64* %3214, align 8, !invariant.group !3652
  %3216 = load i64, i64* %arraysize390_cache, align 8, !alias.scope !3451, !noalias !3454, !invariant.group !3476
  %_unwrap211 = icmp eq i64 %3215, %3216
  br label %invertL753.L754_crit_edge.loopexit_phimerge

invertL753.L754_crit_edge.loopexit_phirc212:      ; preds = %invertL753.L754_crit_edge.loopexit
  br label %invertL753.L754_crit_edge.loopexit_phimerge

invertL753.L754_crit_edge.loopexit_phimerge:      ; preds = %invertL753.L754_crit_edge.loopexit_phirc212, %invertL753.L754_crit_edge.loopexit_phirc
  %3217 = phi i1 [ %_unwrap211, %invertL753.L754_crit_edge.loopexit_phirc ], [ false, %invertL753.L754_crit_edge.loopexit_phirc212 ]
  br i1 %3217, label %mergeinvertL717_L753.L754_crit_edge.loopexit209, label %mergeinvertL717_L753.L754_crit_edge.loopexit

mergeinvertL717_L753.L754_crit_edge.loopexit209:  ; preds = %invertL753.L754_crit_edge.loopexit_phimerge
  store i64 %3202, i64* %"iv11'ac", align 8
  br label %invertL717

mergeinvertL717_L753.L754_crit_edge.loopexit:     ; preds = %invertL753.L754_crit_edge.loopexit_phimerge
  store i64 %3197, i64* %"iv11'ac", align 8
  br label %invertL724

invertL753.L754_crit_edge:                        ; preds = %invertL789, %invertL782
  %3218 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %_unwrap216 = add nsw i64 %682, -2, !dbg !3379
  %3219 = add nuw i64 %_unwrap216, 1, !dbg !3379
  %3220 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache213, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3490
  %3221 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3220, i64 %3218, !dbg !3379
  %3222 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3221, align 8, !dbg !3379, !invariant.group !3672
  %_unwrap217 = addrspacecast {} addrspace(10)* %3222 to {} addrspace(11)*, !dbg !3379
  %_unwrap218 = bitcast {} addrspace(11)* %_unwrap217 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3379
  %_unwrap219 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap218, i64 0, i64 2, !dbg !3379
  %_unwrap220 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap219, align 8, !dbg !3379, !invariant.group !3680
  %3223 = bitcast {}*** %381 to {}**, !dbg !3379
  %3224 = getelementptr inbounds {}*, {}** %3223, i64 -14, !dbg !3379
  %3225 = getelementptr inbounds {}*, {}** %3224, i64 16, !dbg !3379
  %3226 = bitcast {}** %3225 to i8**, !dbg !3379
  %3227 = load i8*, i8** %3226, align 8, !dbg !3379
  %3228 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %3224, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6163712016 to {}*) to {} addrspace(10)*)), !dbg !3379
  %3229 = addrspacecast {} addrspace(10)* %3228 to {} addrspace(11)*, !dbg !3379
  %3230 = bitcast {} addrspace(11)* %3229 to [4 x i64] addrspace(11)*, !dbg !3379
  %3231 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3379
  %3232 = ptrtoint {}* %3231 to i64, !dbg !3379
  %3233 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3230, i64 0, i64 0, !dbg !3379
  store i64 %3232, i64 addrspace(11)* %3233, align 8, !dbg !3379
  %3234 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %3235 = add nuw i64 %_unwrap216, 1, !dbg !3379
  %3236 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache221, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3491
  %3237 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3236, i64 %3234, !dbg !3379
  %3238 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3237, align 8, !dbg !3379, !invariant.group !3609
  %3239 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %3240 = add nuw i64 %_unwrap216, 1, !dbg !3379
  %3241 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented181_cache, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3492
  %3242 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %3241, i64 %3239, !dbg !3379
  %3243 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %3242, align 8, !dbg !3379, !invariant.group !3608
  %"'ac183_unwrap" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %3243, 2, !dbg !3379
  %3244 = addrspacecast {} addrspace(10)* %"'ac183_unwrap" to {} addrspace(11)*, !dbg !3379
  %3245 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3244), !dbg !3379
  %3246 = ptrtoint {}* %3245 to i64, !dbg !3379
  %3247 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3230, i64 0, i64 1, !dbg !3379
  store i64 %3246, i64 addrspace(11)* %3247, align 8, !dbg !3379
  %3248 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %3249 = add nuw i64 %_unwrap216, 1, !dbg !3379
  %3250 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache225, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3493
  %3251 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3250, i64 %3248, !dbg !3379
  %3252 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3251, align 8, !dbg !3379, !invariant.group !4191
  %3253 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %3254 = add nuw i64 %_unwrap216, 1, !dbg !3379
  %3255 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi71_cache", align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3494
  %3256 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3255, i64 %3253, !dbg !3379
  %3257 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3256, align 8, !dbg !3379, !invariant.group !4190
  %3258 = addrspacecast {} addrspace(10)* %3257 to {} addrspace(11)*, !dbg !3379
  %3259 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3258), !dbg !3379
  %3260 = ptrtoint {}* %3259 to i64, !dbg !3379
  %3261 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3230, i64 0, i64 2, !dbg !3379
  store i64 %3260, i64 addrspace(11)* %3261, align 8, !dbg !3379
  %3262 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %3263 = add nuw i64 %_unwrap216, 1, !dbg !3379
  %3264 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache229, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3495
  %3265 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3264, i64 %3262, !dbg !3379
  %3266 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3265, align 8, !dbg !3379, !invariant.group !3677
  %3267 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %3268 = add nuw i64 %_unwrap216, 1, !dbg !3379
  %3269 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi25_cache", align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3496
  %3270 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3269, i64 %3267, !dbg !3379
  %3271 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3270, align 8, !dbg !3379, !invariant.group !3676
  %3272 = addrspacecast {} addrspace(10)* %3271 to {} addrspace(11)*, !dbg !3379
  %3273 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3272), !dbg !3379
  %3274 = ptrtoint {}* %3273 to i64, !dbg !3379
  %3275 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3230, i64 0, i64 3, !dbg !3379
  store i64 %3274, i64 addrspace(11)* %3275, align 8, !dbg !3379
  %3276 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5051863664 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11255605456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539792 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap220, {} addrspace(10)* %3228, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4730741840 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %3238, {} addrspace(10)* %"'ac183_unwrap", {} addrspace(10)* %3252, {} addrspace(10)* %3257, {} addrspace(10)* %3266, {} addrspace(10)* %3271), !dbg !3379
  %3277 = load i64, i64* %"iv9'ac", align 8, !dbg !3602
  %3278 = add nuw i64 %_unwrap216, 1, !dbg !3602
  %3279 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache233, align 8, !dbg !3602, !dereferenceable !3229, !invariant.group !3497
  %3280 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3279, i64 %3277, !dbg !3602
  %3281 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3280, align 8, !dbg !3602, !invariant.group !3675
  %3282 = load i64, i64* %"iv9'ac", align 8, !dbg !3602
  %3283 = add nuw i64 %_unwrap216, 1, !dbg !3602
  %3284 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi24_cache", align 8, !dbg !3602, !dereferenceable !3229, !invariant.group !3498
  %3285 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3284, i64 %3282, !dbg !3602
  %3286 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3285, align 8, !dbg !3602, !invariant.group !3674
  %3287 = load i64, i64* %"iv9'ac", align 8, !dbg !3602
  %3288 = add nuw i64 %_unwrap216, 1, !dbg !3602
  %3289 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache237, align 8, !dbg !3602, !dereferenceable !3229, !invariant.group !3499
  %3290 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3289, i64 %3287, !dbg !3602
  %3291 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3290, align 8, !dbg !3602, !invariant.group !3635
  %3292 = load i64, i64* %"iv9'ac", align 8, !dbg !3602
  %3293 = add nuw i64 %_unwrap216, 1, !dbg !3602
  %3294 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache186, align 8, !dbg !3602, !dereferenceable !3229, !invariant.group !3486
  %3295 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3294, i64 %3292, !dbg !3602
  %3296 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3295, align 8, !dbg !3602, !invariant.group !3631
  %3297 = load i64, i64* %"iv9'ac", align 8, !dbg !3602
  %3298 = add nuw i64 %_unwrap216, 1, !dbg !3602
  %3299 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache241_cache, align 8, !dbg !3602, !dereferenceable !3229, !invariant.group !3500
  %3300 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3299, i64 %3297, !dbg !3602
  %3301 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3300, align 8, !dbg !3602, !invariant.group !3673
  call fastcc void @diffejulia_gemv__1996({} addrspace(10)* align 16 %3281, {} addrspace(10)* align 16 %3286, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield3, {} addrspace(10)* align 16 %"getfield3'ipl", {} addrspace(10)* align 16 %3291, {} addrspace(10)* align 16 %3296, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %3301), !dbg !3602
  %3302 = load i64, i64* %"iv9'ac", align 8
  %3303 = load i64, i64* %arraysize390_cache, align 8, !alias.scope !3451, !noalias !3454, !invariant.group !3476
  %.not875_unwrap = icmp eq i64 %3303, 0
  br i1 %.not875_unwrap, label %invertL696, label %invertL753.L754_crit_edge.loopexit

invertL782:                                       ; preds = %invertL791_phimerge_phimerge
  %3304 = load i64, i64* %"iv9'ac", align 8, !dbg !3702
  %_unwrap247 = add nsw i64 %682, -2, !dbg !3702
  %3305 = add nuw i64 %_unwrap247, 1, !dbg !3702
  %3306 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache244, align 8, !dbg !3702, !dereferenceable !3229, !invariant.group !3501
  %3307 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3306, i64 %3304, !dbg !3702
  %3308 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3307, align 8, !dbg !3702, !invariant.group !3712
  %_unwrap248 = addrspacecast {} addrspace(10)* %3308 to {} addrspace(11)*, !dbg !3702
  %_unwrap249 = bitcast {} addrspace(11)* %_unwrap248 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3702
  %_unwrap250 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap249, i64 0, i64 2, !dbg !3702
  %_unwrap251 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap250, align 8, !dbg !3702, !invariant.group !3715
  %3309 = bitcast {}*** %335 to {}**, !dbg !3702
  %3310 = getelementptr inbounds {}*, {}** %3309, i64 -14, !dbg !3702
  %3311 = getelementptr inbounds {}*, {}** %3310, i64 16, !dbg !3702
  %3312 = bitcast {}** %3311 to i8**, !dbg !3702
  %3313 = load i8*, i8** %3312, align 8, !dbg !3702
  %3314 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %3310, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6163712016 to {}*) to {} addrspace(10)*)), !dbg !3702
  %3315 = addrspacecast {} addrspace(10)* %3314 to {} addrspace(11)*, !dbg !3702
  %3316 = bitcast {} addrspace(11)* %3315 to [4 x i64] addrspace(11)*, !dbg !3702
  %3317 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3702
  %3318 = ptrtoint {}* %3317 to i64, !dbg !3702
  %3319 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3316, i64 0, i64 0, !dbg !3702
  store i64 %3318, i64 addrspace(11)* %3319, align 8, !dbg !3702
  %3320 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3702
  %3321 = ptrtoint {}* %3320 to i64, !dbg !3702
  %3322 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3316, i64 0, i64 1, !dbg !3702
  store i64 %3321, i64 addrspace(11)* %3322, align 8, !dbg !3702
  %3323 = load i64, i64* %"iv9'ac", align 8, !dbg !3702
  %3324 = add nuw i64 %_unwrap247, 1, !dbg !3702
  %3325 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %box441_cache, align 8, !dbg !3702, !dereferenceable !3229, !invariant.group !3502
  %3326 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3325, i64 %3323, !dbg !3702
  %3327 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3326, align 8, !dbg !3702, !invariant.group !3711
  %3328 = load i64, i64* %"iv9'ac", align 8, !dbg !3702
  %3329 = add nuw i64 %_unwrap247, 1, !dbg !3702
  %3330 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"box441'mi_cache", align 8, !dbg !3702, !dereferenceable !3229, !invariant.group !3503
  %3331 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3330, i64 %3328, !dbg !3702
  %3332 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3331, align 8, !dbg !3702, !invariant.group !3710
  %3333 = addrspacecast {} addrspace(10)* %3332 to {} addrspace(11)*, !dbg !3702
  %3334 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3333), !dbg !3702
  %3335 = ptrtoint {}* %3334 to i64, !dbg !3702
  %3336 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3316, i64 0, i64 2, !dbg !3702
  store i64 %3335, i64 addrspace(11)* %3336, align 8, !dbg !3702
  %3337 = load i64, i64* %"iv9'ac", align 8, !dbg !3702
  %3338 = add nuw i64 %_unwrap247, 1, !dbg !3702
  %3339 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache254, align 8, !dbg !3702, !dereferenceable !3229, !invariant.group !3504
  %3340 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3339, i64 %3337, !dbg !3702
  %3341 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3340, align 8, !dbg !3379, !invariant.group !3679
  %3342 = load i64, i64* %"iv9'ac", align 8, !dbg !3702
  %3343 = add nuw i64 %_unwrap247, 1, !dbg !3702
  %3344 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache213, align 8, !dbg !3702, !dereferenceable !3229, !invariant.group !3490
  %3345 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3344, i64 %3342, !dbg !3702
  %3346 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3345, align 8, !dbg !3702, !invariant.group !3672
  %_unwrap257 = addrspacecast {} addrspace(10)* %3346 to {} addrspace(11)*, !dbg !3702
  %_unwrap258 = bitcast {} addrspace(11)* %_unwrap257 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3702
  %_unwrap259 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap258, i64 0, i64 1, !dbg !3702
  %_unwrap260 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap259, align 8, !dbg !3379, !invariant.group !3678
  %3347 = addrspacecast {} addrspace(10)* %_unwrap260 to {} addrspace(11)*, !dbg !3702
  %3348 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3347), !dbg !3702
  %3349 = ptrtoint {}* %3348 to i64, !dbg !3702
  %3350 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3316, i64 0, i64 3, !dbg !3702
  store i64 %3349, i64 addrspace(11)* %3350, align 8, !dbg !3702
  %3351 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5051863664 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6184456528 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185539792 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap251, {} addrspace(10)* %3314, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4726248928 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724564752 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %3327, {} addrspace(10)* %3332, {} addrspace(10)* %3341, {} addrspace(10)* %_unwrap260), !dbg !3702
  %3352 = load i64, i64* %"iv9'ac", align 8, !dbg !3682
  %3353 = add nuw i64 %_unwrap247, 1, !dbg !3682
  %3354 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"newstruct435'mi_cache", align 8, !dbg !3682, !dereferenceable !3229, !invariant.group !3505
  %3355 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3354, i64 %3352, !dbg !3682
  %3356 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3355, align 8, !dbg !3682, !invariant.group !3691
  %3357 = load i64, i64* %"iv9'ac", align 8, !dbg !3681
  %3358 = add nuw i64 %_unwrap247, 1, !dbg !3681
  %3359 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache270, align 8, !dbg !3681, !dereferenceable !3229, !invariant.group !3506
  %3360 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3359, i64 %3357, !dbg !3681
  %3361 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3360, align 8, !dbg !3681, !invariant.group !3690
  br label %invertL753.L754_crit_edge

invertL789:                                       ; preds = %invertL791_phimerge_phimerge
  %3362 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %_unwrap276 = add nsw i64 %682, -2, !dbg !3379
  %3363 = add nuw i64 %_unwrap276, 1, !dbg !3379
  %3364 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache273, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3507
  %3365 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3364, i64 %3362, !dbg !3379
  %3366 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3365, align 8, !dbg !3379, !invariant.group !3722
  %_unwrap277 = addrspacecast {} addrspace(10)* %3366 to {} addrspace(11)*, !dbg !3379
  %_unwrap278 = bitcast {} addrspace(11)* %_unwrap277 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3379
  %_unwrap279 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap278, i64 0, i64 2, !dbg !3379
  %_unwrap280 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap279, align 8, !dbg !3379, !invariant.group !3725
  %3367 = bitcast {}*** %309 to {}**, !dbg !3379
  %3368 = getelementptr inbounds {}*, {}** %3367, i64 -14, !dbg !3379
  %3369 = getelementptr inbounds {}*, {}** %3368, i64 16, !dbg !3379
  %3370 = bitcast {}** %3369 to i8**, !dbg !3379
  %3371 = load i8*, i8** %3370, align 8, !dbg !3379
  %3372 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %3368, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5515959696 to {}*) to {} addrspace(10)*)), !dbg !3379
  %3373 = addrspacecast {} addrspace(10)* %3372 to {} addrspace(11)*, !dbg !3379
  %3374 = bitcast {} addrspace(11)* %3373 to [3 x i64] addrspace(11)*, !dbg !3379
  %3375 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3379
  %3376 = ptrtoint {}* %3375 to i64, !dbg !3379
  %3377 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3374, i64 0, i64 0, !dbg !3379
  store i64 %3376, i64 addrspace(11)* %3377, align 8, !dbg !3379
  %3378 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3379
  %3379 = ptrtoint {}* %3378 to i64, !dbg !3379
  %3380 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3374, i64 0, i64 1, !dbg !3379
  store i64 %3379, i64 addrspace(11)* %3380, align 8, !dbg !3379
  %3381 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %3382 = add nuw i64 %_unwrap276, 1, !dbg !3379
  %3383 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache254, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3504
  %3384 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3383, i64 %3381, !dbg !3379
  %3385 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3384, align 8, !dbg !3379, !invariant.group !3679
  %3386 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %3387 = add nuw i64 %_unwrap276, 1, !dbg !3379
  %3388 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache213, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3490
  %3389 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3388, i64 %3386, !dbg !3379
  %3390 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3389, align 8, !dbg !3379, !invariant.group !3672
  %_unwrap281 = addrspacecast {} addrspace(10)* %3390 to {} addrspace(11)*, !dbg !3379
  %_unwrap282 = bitcast {} addrspace(11)* %_unwrap281 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3379
  %_unwrap283 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap282, i64 0, i64 1, !dbg !3379
  %_unwrap284 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap283, align 8, !dbg !3379, !invariant.group !3678
  %3391 = addrspacecast {} addrspace(10)* %_unwrap284 to {} addrspace(11)*, !dbg !3379
  %3392 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3391), !dbg !3379
  %3393 = ptrtoint {}* %3392 to i64, !dbg !3379
  %3394 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3374, i64 0, i64 2, !dbg !3379
  store i64 %3393, i64 addrspace(11)* %3394, align 8, !dbg !3379
  %3395 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5051863664 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6215964112 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185540240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap280, {} addrspace(10)* %3372, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4730329808 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724564752 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %3385, {} addrspace(10)* %_unwrap284), !dbg !3379
  br label %invertL753.L754_crit_edge

invertL791:                                       ; preds = %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit753
  %3396 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %_unwrap288 = add nsw i64 %682, -2, !dbg !3379
  %3397 = add nuw i64 %_unwrap288, 1, !dbg !3379
  %3398 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache285, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3508
  %3399 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3398, i64 %3396, !dbg !3379
  %3400 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3399, align 8, !dbg !3379, !invariant.group !3732
  %_unwrap289 = addrspacecast {} addrspace(10)* %3400 to {} addrspace(11)*, !dbg !3379
  %_unwrap290 = bitcast {} addrspace(11)* %_unwrap289 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3379
  %_unwrap291 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap290, i64 0, i64 2, !dbg !3379
  %_unwrap292 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap291, align 8, !dbg !3379, !invariant.group !3726
  %3401 = bitcast {}*** %302 to {}**, !dbg !3379
  %3402 = getelementptr inbounds {}*, {}** %3401, i64 -14, !dbg !3379
  %3403 = getelementptr inbounds {}*, {}** %3402, i64 16, !dbg !3379
  %3404 = bitcast {}** %3403 to i8**, !dbg !3379
  %3405 = load i8*, i8** %3404, align 8, !dbg !3379
  %3406 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %3402, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5515959696 to {}*) to {} addrspace(10)*)), !dbg !3379
  %3407 = addrspacecast {} addrspace(10)* %3406 to {} addrspace(11)*, !dbg !3379
  %3408 = bitcast {} addrspace(11)* %3407 to [3 x i64] addrspace(11)*, !dbg !3379
  %3409 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3379
  %3410 = ptrtoint {}* %3409 to i64, !dbg !3379
  %3411 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3408, i64 0, i64 0, !dbg !3379
  store i64 %3410, i64 addrspace(11)* %3411, align 8, !dbg !3379
  %3412 = addrspacecast {} addrspace(10)* %"getfield11'ipl" to {} addrspace(11)*, !dbg !3379
  %3413 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3412), !dbg !3379
  %3414 = ptrtoint {}* %3413 to i64, !dbg !3379
  %3415 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3408, i64 0, i64 1, !dbg !3379
  store i64 %3414, i64 addrspace(11)* %3415, align 8, !dbg !3379
  %3416 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %3417 = add nuw i64 %_unwrap288, 1, !dbg !3379
  %3418 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache254, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3504
  %3419 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3418, i64 %3416, !dbg !3379
  %3420 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3419, align 8, !dbg !3379, !invariant.group !3679
  %3421 = call {} addrspace(10)* @julia.typeof({} addrspace(10)* nonnull %3420) #73, !dbg !3379
  %_unwrap293 = addrspacecast {} addrspace(10)* %3421 to {} addrspace(11)*, !dbg !3379
  %3422 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %_unwrap293) #73, !dbg !3379
  %exactly_isa.not_unwrap = icmp eq {}* %3422, inttoptr (i64 11191270976 to {}*), !dbg !3379
  br i1 %exactly_isa.not_unwrap, label %invertL791_phirc, label %invertL791_phirc297, !dbg !3379

invertL791_phirc:                                 ; preds = %invertL791
  %3423 = add nuw i64 %_unwrap288, 1
  %3424 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache294, align 8, !dereferenceable !3229, !invariant.group !3509
  %3425 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3424, i64 %3416
  %3426 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3425, align 8, !dbg !3702, !invariant.group !3714
  br label %invertL791_phimerge

invertL791_phirc297:                              ; preds = %invertL791
  %3427 = add nuw i64 %_unwrap288, 1
  %3428 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache298, align 8, !dereferenceable !3229, !invariant.group !3510
  %3429 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3428, i64 %3416
  %3430 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3429, align 8, !dbg !3379, !invariant.group !3724
  br label %invertL791_phimerge

invertL791_phimerge:                              ; preds = %invertL791_phirc297, %invertL791_phirc
  %3431 = phi {} addrspace(10)* [ %3426, %invertL791_phirc ], [ %3430, %invertL791_phirc297 ], !dbg !3379
  %3432 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  br i1 %exactly_isa.not_unwrap, label %invertL791_phimerge_phirc, label %invertL791_phimerge_phirc305, !dbg !3379

invertL791_phimerge_phirc:                        ; preds = %invertL791_phimerge
  %3433 = add nuw i64 %_unwrap288, 1
  %3434 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache244, align 8, !dereferenceable !3229, !invariant.group !3501
  %3435 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3434, i64 %3432
  %3436 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3435, align 8, !invariant.group !3712
  %_unwrap301 = addrspacecast {} addrspace(10)* %3436 to {} addrspace(11)*
  %_unwrap302 = bitcast {} addrspace(11)* %_unwrap301 to [3 x {} addrspace(10)*] addrspace(11)*
  %_unwrap303 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap302, i64 0, i64 1
  %_unwrap304 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap303, align 8, !dbg !3702, !invariant.group !3713
  br label %invertL791_phimerge_phimerge

invertL791_phimerge_phirc305:                     ; preds = %invertL791_phimerge
  %3437 = add nuw i64 %_unwrap288, 1
  %3438 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache273, align 8, !dereferenceable !3229, !invariant.group !3507
  %3439 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3438, i64 %3432
  %3440 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3439, align 8, !invariant.group !3722
  %_unwrap306 = addrspacecast {} addrspace(10)* %3440 to {} addrspace(11)*
  %_unwrap307 = bitcast {} addrspace(11)* %_unwrap306 to [3 x {} addrspace(10)*] addrspace(11)*
  %_unwrap308 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap307, i64 0, i64 1
  %_unwrap309 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap308, align 8, !dbg !3379, !invariant.group !3723
  br label %invertL791_phimerge_phimerge

invertL791_phimerge_phimerge:                     ; preds = %invertL791_phimerge_phirc305, %invertL791_phimerge_phirc
  %3441 = phi {} addrspace(10)* [ %_unwrap304, %invertL791_phimerge_phirc ], [ %_unwrap309, %invertL791_phimerge_phirc305 ], !dbg !3379
  %3442 = addrspacecast {} addrspace(10)* %3441 to {} addrspace(11)*, !dbg !3379
  %3443 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3442), !dbg !3379
  %3444 = ptrtoint {}* %3443 to i64, !dbg !3379
  %3445 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3408, i64 0, i64 2, !dbg !3379
  store i64 %3444, i64 addrspace(11)* %3445, align 8, !dbg !3379
  %3446 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5051863664 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6219021520 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185540240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap292, {} addrspace(10)* %3406, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728516352 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %getfield11, {} addrspace(10)* %"getfield11'ipl", {} addrspace(10)* %3431, {} addrspace(10)* %3441), !dbg !3379
  br i1 %exactly_isa.not_unwrap, label %invertL782, label %invertL789

invertL814:                                       ; preds = %invertL855
  %3447 = load i64, i64* %"iv9'ac", align 8, !dbg !3749
  %_unwrap311 = add nsw i64 %682, -2, !dbg !3749
  %3448 = add nuw i64 %_unwrap311, 1, !dbg !3749
  %3449 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi31_cache", align 8, !dbg !3749, !dereferenceable !3229, !invariant.group !3511
  %3450 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3449, i64 %3447, !dbg !3749
  %3451 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3450, align 8, !dbg !3749, !invariant.group !3760
  %3452 = bitcast {} addrspace(10)* %"getfield11'ipl" to i8 addrspace(13)* addrspace(10)*, !dbg !3749
  %3453 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %3452, align 8, !dbg !3749
  %3454 = bitcast {} addrspace(10)* %3451 to i8 addrspace(13)* addrspace(10)*, !dbg !3749
  %3455 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %3454, align 8, !dbg !3749
  %3456 = bitcast i8 addrspace(13)* %3455 to double addrspace(13)*, !dbg !3749
  %3457 = bitcast i8 addrspace(13)* %3453 to double addrspace(13)*, !dbg !3749
  %3458 = udiv i64 %443, 8, !dbg !3749
  %3459 = icmp eq i64 %3458, 0, !dbg !3749
  br i1 %3459, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit753, label %for.body.i752, !dbg !3749

for.body.i752:                                    ; preds = %for.body.i752, %invertL814
  %idx.i746 = phi i64 [ 0, %invertL814 ], [ %idx.next.i751, %for.body.i752 ], !dbg !3749
  %dst.i.i747 = getelementptr inbounds double, double addrspace(13)* %3456, i64 %idx.i746, !dbg !3749
  %dst.i.l.i748 = load double, double addrspace(13)* %dst.i.i747, align 1, !dbg !3749
  store double 0.000000e+00, double addrspace(13)* %dst.i.i747, align 1, !dbg !3749
  %src.i.i749 = getelementptr inbounds double, double addrspace(13)* %3457, i64 %idx.i746, !dbg !3749
  %src.i.l.i750 = load double, double addrspace(13)* %src.i.i749, align 1, !dbg !3749
  %3460 = fadd fast double %src.i.l.i750, %dst.i.l.i748, !dbg !3749
  store double %3460, double addrspace(13)* %src.i.i749, align 1, !dbg !3749
  %idx.next.i751 = add nuw i64 %idx.i746, 1, !dbg !3749
  %3461 = icmp eq i64 %3458, %idx.next.i751, !dbg !3749
  br i1 %3461, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit753, label %for.body.i752, !dbg !3749

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit753: ; preds = %invertL814, %for.body.i752
  br label %invertL791

invertL855:                                       ; preds = %invertL885, %invertL866
  br label %invertL814

invertL866:                                       ; preds = %invertL968, %invertL870
  br label %invertL855

invertL870:                                       ; preds = %invertL881_phimerge_phimerge, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit761
  br label %invertL866

invertL878:                                       ; preds = %invertL881_phimerge_phimerge
  %3462 = load i64, i64* %"iv9'ac", align 8, !dbg !3791
  %_unwrap313 = add nsw i64 %682, -2, !dbg !3791
  %3463 = add nuw i64 %_unwrap313, 1, !dbg !3791
  %3464 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi34_cache", align 8, !dbg !3791, !dereferenceable !3229, !invariant.group !3512
  %3465 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3464, i64 %3462, !dbg !3791
  %3466 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3465, align 8, !dbg !3791, !invariant.group !3796
  %3467 = load i64, i64* %"iv9'ac", align 8, !dbg !3791
  %3468 = add nuw i64 %_unwrap313, 1, !dbg !3791
  %3469 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache314, align 8, !dbg !3791, !dereferenceable !3229, !invariant.group !3513
  %3470 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3469, i64 %3467, !dbg !3791
  %3471 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3470, align 8, !dbg !3791, !invariant.group !3762
  %3472 = bitcast {} addrspace(10)* %3471 to i8 addrspace(13)* addrspace(10)*, !dbg !3791
  %3473 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %3472, align 8, !dbg !3791
  %3474 = bitcast {} addrspace(10)* %3466 to i8 addrspace(13)* addrspace(10)*, !dbg !3791
  %3475 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %3474, align 8, !dbg !3791
  %3476 = bitcast i8 addrspace(13)* %3475 to double addrspace(13)*, !dbg !3791
  %3477 = bitcast i8 addrspace(13)* %3473 to double addrspace(13)*, !dbg !3791
  %3478 = load i64, i64* %"iv9'ac", align 8, !dbg !3791
  %3479 = add nuw i64 %_unwrap313, 1, !dbg !3791
  %3480 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache317, align 8, !dbg !3791, !dereferenceable !3229, !invariant.group !3514
  %3481 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3480, i64 %3478, !dbg !3791
  %3482 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3481, align 8, !dbg !3791, !invariant.group !3761
  %_unwrap320 = bitcast {} addrspace(10)* %3482 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3791
  %_unwrap321 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %_unwrap320, i32 0, i32 1, !dbg !3791
  %_unwrap322 = load i64, i64 addrspace(10)* %_unwrap321, align 8, !dbg !3750, !invariant.group !3759
  %_unwrap323 = bitcast {} addrspace(10)* %3482 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3791
  %_unwrap324 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %_unwrap323, i32 0, i32 3, !dbg !3791
  %_unwrap325 = load i16, i16 addrspace(10)* %_unwrap324, align 2, !dbg !3750, !invariant.group !3758
  %_unwrap326 = zext i16 %_unwrap325 to i64, !dbg !3791
  %_unwrap327 = mul i64 %_unwrap322, %_unwrap326, !dbg !3791
  %3483 = udiv i64 %_unwrap327, 8, !dbg !3791
  %3484 = icmp eq i64 %3483, 0, !dbg !3791
  br i1 %3484, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit761, label %for.body.i760, !dbg !3791

for.body.i760:                                    ; preds = %for.body.i760, %invertL878
  %idx.i754 = phi i64 [ 0, %invertL878 ], [ %idx.next.i759, %for.body.i760 ], !dbg !3791
  %dst.i.i755 = getelementptr inbounds double, double addrspace(13)* %3476, i64 %idx.i754, !dbg !3791
  %dst.i.l.i756 = load double, double addrspace(13)* %dst.i.i755, align 1, !dbg !3791
  store double 0.000000e+00, double addrspace(13)* %dst.i.i755, align 1, !dbg !3791
  %src.i.i757 = getelementptr inbounds double, double addrspace(13)* %3477, i64 %idx.i754, !dbg !3791
  %src.i.l.i758 = load double, double addrspace(13)* %src.i.i757, align 1, !dbg !3791
  %3485 = fadd fast double %src.i.l.i758, %dst.i.l.i756, !dbg !3791
  store double %3485, double addrspace(13)* %src.i.i757, align 1, !dbg !3791
  %idx.next.i759 = add nuw i64 %idx.i754, 1, !dbg !3791
  %3486 = icmp eq i64 %3483, %idx.next.i759, !dbg !3791
  br i1 %3486, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit761, label %for.body.i760, !dbg !3791

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit761: ; preds = %invertL878, %for.body.i760
  br label %invertL870

invertL881:                                       ; preds = %invertL968
  %3487 = load i64, i64* %"iv9'ac", align 8, !dbg !3799
  %_unwrap328 = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %409 to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !3799
  %3488 = load i64, i64* %"iv9'ac", align 8, !dbg !3799
  %"'ipc330_unwrap" = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa329" to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !3799
  %3489 = load i64, i64* %"iv9'ac", align 8, !dbg !3799
  %_unwrap332 = add nsw i64 %682, -2, !dbg !3799
  %3490 = add nuw i64 %_unwrap332, 1, !dbg !3799
  %3491 = load i1*, i1** %.not916.not_cache, align 8, !dbg !3799, !dereferenceable !3229, !invariant.group !3517
  %3492 = getelementptr inbounds i1, i1* %3491, i64 %3489, !dbg !3799
  %3493 = load i1, i1* %3492, align 1, !dbg !3799, !invariant.group !3790
  br i1 %3493, label %invertL881_phirc, label %invertL881_phirc336, !dbg !3799

invertL881_phirc:                                 ; preds = %invertL881
  %3494 = add nuw i64 %_unwrap332, 1
  %3495 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache333, align 8, !dereferenceable !3229, !invariant.group !3518
  %3496 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3495, i64 %3489
  %3497 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3496, align 8, !invariant.group !3798
  br label %invertL881_phimerge

invertL881_phirc336:                              ; preds = %invertL881
  %3498 = add nuw i64 %_unwrap332, 1
  %3499 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache317, align 8, !dereferenceable !3229, !invariant.group !3514
  %3500 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3499, i64 %3489
  %3501 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3500, align 8, !invariant.group !3761
  br label %invertL881_phimerge

invertL881_phimerge:                              ; preds = %invertL881_phirc336, %invertL881_phirc
  %3502 = phi {} addrspace(10)* [ %3497, %invertL881_phirc ], [ %3501, %invertL881_phirc336 ], !dbg !3799
  %3503 = load i64, i64* %"iv9'ac", align 8, !dbg !3799
  br i1 %3493, label %invertL881_phimerge_phirc, label %invertL881_phimerge_phirc340, !dbg !3799

invertL881_phimerge_phirc:                        ; preds = %invertL881_phimerge
  %3504 = add nuw i64 %_unwrap332, 1
  %3505 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache337, align 8, !dereferenceable !3229, !invariant.group !3519
  %3506 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3505, i64 %3503
  %3507 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3506, align 8, !invariant.group !3797
  br label %invertL881_phimerge_phimerge

invertL881_phimerge_phirc340:                     ; preds = %invertL881_phimerge
  %3508 = add nuw i64 %_unwrap332, 1
  %3509 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache314, align 8, !dereferenceable !3229, !invariant.group !3513
  %3510 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3509, i64 %3503
  %3511 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3510, align 8, !invariant.group !3762
  br label %invertL881_phimerge_phimerge

invertL881_phimerge_phimerge:                     ; preds = %invertL881_phimerge_phirc340, %invertL881_phimerge_phirc
  %3512 = phi {} addrspace(10)* [ %3507, %invertL881_phimerge_phirc ], [ %3511, %invertL881_phimerge_phirc340 ], !dbg !3799
  %3513 = load i64, i64* %"iv9'ac", align 8, !dbg !3799
  %3514 = add nuw i64 %_unwrap332, 1, !dbg !3799
  %3515 = load { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)*, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)** %_augmented341_cache, align 8, !dbg !3799, !dereferenceable !3229, !invariant.group !3520
  %3516 = getelementptr inbounds { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %3515, i64 %3513, !dbg !3799
  %3517 = load { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %3516, align 8, !dbg !3799, !invariant.group !3807
  call fastcc void @diffejulia_copyto_unaliased__1986.178({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* nocapture nofree writeonly align 8 "enzyme_sret" undef, [1 x {} addrspace(10)*]* nocapture nofree writeonly align 8 "enzymejl_returnRoots" undef, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree readonly align 8 %_unwrap328, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'ipc330_unwrap", {} addrspace(10)* readonly align 16 %3502, {} addrspace(10)* align 16 %3512, { double addrspace(13)* addrspace(10)*, i64, i64 } %3517), !dbg !3799
  br i1 %3493, label %invertL878, label %invertL870

invertL885:                                       ; preds = %invertL898, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit769
  br label %invertL855

invertL893:                                       ; preds = %invertL898
  %3518 = load i64, i64* %"iv9'ac", align 8, !dbg !3826
  %_unwrap345 = add nsw i64 %682, -2, !dbg !3826
  %3519 = add nuw i64 %_unwrap345, 1, !dbg !3826
  %3520 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi37_cache", align 8, !dbg !3826, !dereferenceable !3229, !invariant.group !3521
  %3521 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3520, i64 %3518, !dbg !3826
  %3522 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3521, align 8, !dbg !3826, !invariant.group !3828
  %3523 = load i64, i64* %"iv9'ac", align 8, !dbg !3826
  %3524 = add nuw i64 %_unwrap345, 1, !dbg !3826
  %3525 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache314, align 8, !dbg !3826, !dereferenceable !3229, !invariant.group !3513
  %3526 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3525, i64 %3523, !dbg !3826
  %3527 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3526, align 8, !dbg !3826, !invariant.group !3762
  %3528 = bitcast {} addrspace(10)* %3527 to i8 addrspace(13)* addrspace(10)*, !dbg !3826
  %3529 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %3528, align 8, !dbg !3826
  %3530 = bitcast {} addrspace(10)* %3522 to i8 addrspace(13)* addrspace(10)*, !dbg !3826
  %3531 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %3530, align 8, !dbg !3826
  %3532 = bitcast i8 addrspace(13)* %3531 to double addrspace(13)*, !dbg !3826
  %3533 = bitcast i8 addrspace(13)* %3529 to double addrspace(13)*, !dbg !3826
  %3534 = load i64, i64* %"iv9'ac", align 8, !dbg !3826
  %3535 = add nuw i64 %_unwrap345, 1, !dbg !3826
  %3536 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache317, align 8, !dbg !3826, !dereferenceable !3229, !invariant.group !3514
  %3537 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3536, i64 %3534, !dbg !3826
  %3538 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3537, align 8, !dbg !3826, !invariant.group !3761
  %_unwrap346 = bitcast {} addrspace(10)* %3538 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3826
  %_unwrap347 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %_unwrap346, i32 0, i32 1, !dbg !3826
  %_unwrap348 = load i64, i64 addrspace(10)* %_unwrap347, align 8, !dbg !3750, !invariant.group !3757
  %_unwrap349 = bitcast {} addrspace(10)* %3538 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3826
  %_unwrap350 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %_unwrap349, i32 0, i32 3, !dbg !3826
  %_unwrap351 = load i16, i16 addrspace(10)* %_unwrap350, align 2, !dbg !3750, !invariant.group !3756
  %_unwrap352 = zext i16 %_unwrap351 to i64, !dbg !3826
  %_unwrap353 = mul i64 %_unwrap348, %_unwrap352, !dbg !3826
  %3539 = udiv i64 %_unwrap353, 8, !dbg !3826
  %3540 = icmp eq i64 %3539, 0, !dbg !3826
  br i1 %3540, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit769, label %for.body.i768, !dbg !3826

for.body.i768:                                    ; preds = %for.body.i768, %invertL893
  %idx.i762 = phi i64 [ 0, %invertL893 ], [ %idx.next.i767, %for.body.i768 ], !dbg !3826
  %dst.i.i763 = getelementptr inbounds double, double addrspace(13)* %3532, i64 %idx.i762, !dbg !3826
  %dst.i.l.i764 = load double, double addrspace(13)* %dst.i.i763, align 1, !dbg !3826
  store double 0.000000e+00, double addrspace(13)* %dst.i.i763, align 1, !dbg !3826
  %src.i.i765 = getelementptr inbounds double, double addrspace(13)* %3533, i64 %idx.i762, !dbg !3826
  %src.i.l.i766 = load double, double addrspace(13)* %src.i.i765, align 1, !dbg !3826
  %3541 = fadd fast double %src.i.l.i766, %dst.i.l.i764, !dbg !3826
  store double %3541, double addrspace(13)* %src.i.i765, align 1, !dbg !3826
  %idx.next.i767 = add nuw i64 %idx.i762, 1, !dbg !3826
  %3542 = icmp eq i64 %3539, %idx.next.i767, !dbg !3826
  br i1 %3542, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit769, label %for.body.i768, !dbg !3826

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit769: ; preds = %invertL893, %for.body.i768
  br label %invertL885

invertL898:                                       ; preds = %invertL968, %invertL940.lr.ph
  %3543 = load i64, i64* %"iv9'ac", align 8
  %_unwrap355 = add nsw i64 %682, -2
  %3544 = add nuw i64 %_unwrap355, 1
  %3545 = load i1*, i1** %.not926.not_cache, align 8, !dereferenceable !3229, !invariant.group !3524
  %3546 = getelementptr inbounds i1, i1* %3545, i64 %3543
  %3547 = load i1, i1* %3546, align 1, !invariant.group !3825
  br i1 %3547, label %invertL893, label %invertL885

invertL940.lr.ph:                                 ; preds = %invertL940_phimerge
  br label %invertL898

invertL940:                                       ; preds = %mergeinvertL940_L968.loopexit, %incinvertL940
  %3548 = load i64, i64* %"iv13'ac", align 8, !dbg !3867
  %3549 = load i64, i64* %"iv9'ac", align 8, !dbg !3867
  %"'ipc173_unwrap" = bitcast {} addrspace(10)* %"getfield15'ipl" to double addrspace(13)* addrspace(10)*, !dbg !3867
  %"'ipc174_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc173_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3867
  %"arrayptr698931'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc174_unwrap", align 16, !alias.scope !3224, !noalias !3225, !invariant.group !3461
  %_unwrap359 = add i64 %3549, 2, !dbg !3867
  %_unwrap360 = add nsw i64 %_unwrap359, -1, !dbg !3867
  %_unwrap361 = mul i64 %_unwrap360, %arraysize, !dbg !3867
  %_unwrap362 = add i64 %3548, %_unwrap361, !dbg !3867
  %"'ipg358_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr698931'ipl_unwrap", i64 %_unwrap362, !dbg !3867
  %3550 = load double, double addrspace(13)* %"'ipg358_unwrap", align 8, !dbg !3867, !tbaa !268, !alias.scope !4266, !noalias !4267
  store double 0.000000e+00, double addrspace(13)* %"'ipg358_unwrap", align 8, !dbg !3867, !tbaa !268, !alias.scope !4266, !noalias !4267
  %3551 = load double, double* %"arrayref695'de", align 8, !dbg !3867
  %3552 = fadd fast double %3551, %3550, !dbg !3867
  store double %3552, double* %"arrayref695'de", align 8, !dbg !3867
  %3553 = load double, double* %"arrayref695'de", align 8, !dbg !3855
  store double 0.000000e+00, double* %"arrayref695'de", align 8, !dbg !3855
  %3554 = load i64, i64* %"iv13'ac", align 8, !dbg !3855
  %3555 = load i64, i64* %"iv9'ac", align 8, !dbg !3855
  %_unwrap364 = add nsw i64 %682, -2, !dbg !3855
  %3556 = add nuw i64 %_unwrap364, 1, !dbg !3855
  %3557 = load i1*, i1** %.not926.not_cache, align 8, !dbg !3855, !dereferenceable !3229, !invariant.group !3524
  %3558 = getelementptr inbounds i1, i1* %3557, i64 %3555, !dbg !3855
  %3559 = load i1, i1* %3558, align 1, !dbg !3855, !invariant.group !3825
  br i1 %3559, label %invertL940_phirc, label %invertL940_phirc368, !dbg !3855

invertL940_phirc:                                 ; preds = %invertL940
  %3560 = add nuw i64 %_unwrap364, 1
  %3561 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache365, align 8, !dereferenceable !3229, !invariant.group !3525
  %3562 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3561, i64 %3555
  %3563 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3562, align 8, !invariant.group !3829
  br label %invertL940_phimerge

invertL940_phirc368:                              ; preds = %invertL940
  %3564 = add nuw i64 %_unwrap364, 1
  %3565 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache314, align 8, !dereferenceable !3229, !invariant.group !3513
  %3566 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3565, i64 %3555
  %3567 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3566, align 8, !invariant.group !3762
  br label %invertL940_phimerge

invertL940_phimerge:                              ; preds = %invertL940_phirc368, %invertL940_phirc
  %3568 = phi {} addrspace(10)* [ %3563, %invertL940_phirc ], [ %3567, %invertL940_phirc368 ], !dbg !3855
  %"'ipc356_unwrap" = bitcast {} addrspace(10)* %3568 to double addrspace(13)* addrspace(10)*, !dbg !3855
  %"'ipc357_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc356_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3855
  %"arrayptr694930'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc357_unwrap", align 8, !tbaa !382, !alias.scope !3846, !noalias !3849, !nonnull !67, !invariant.group !3851
  %3569 = add nuw i64 %_unwrap364, 1, !dbg !3855
  %3570 = load i1*, i1** %.not929_cache, align 8, !dbg !3855, !dereferenceable !3229, !invariant.group !3528
  %3571 = getelementptr inbounds i1, i1* %3570, i64 %3555, !dbg !3855
  %3572 = load i1, i1* %3571, align 1, !dbg !3855, !invariant.group !3845
  %_unwrap370 = select i1 %3572, i64 0, i64 %3554, !dbg !3855
  %"'ipg363_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr694930'ipl_unwrap", i64 %_unwrap370, !dbg !3855
  %3573 = load double, double addrspace(13)* %"'ipg363_unwrap", align 8, !dbg !3855, !tbaa !268, !alias.scope !4268, !noalias !4269
  %3574 = fadd fast double %3573, %3553, !dbg !3855
  store double %3574, double addrspace(13)* %"'ipg363_unwrap", align 8, !dbg !3855, !tbaa !268, !alias.scope !4268, !noalias !4269
  %3575 = load i64, i64* %"iv13'ac", align 8
  %3576 = icmp eq i64 %3575, 0
  %3577 = xor i1 %3576, true
  br i1 %3576, label %invertL940.lr.ph, label %incinvertL940

incinvertL940:                                    ; preds = %invertL940_phimerge
  %3578 = load i64, i64* %"iv13'ac", align 8
  %3579 = add nsw i64 %3578, -1
  store i64 %3579, i64* %"iv13'ac", align 8
  br label %invertL940

invertL968.loopexit:                              ; preds = %invertL968
  %3580 = load i64, i64* %"iv9'ac", align 8
  %_unwrap371 = add nsw i64 %arraysize, -1
  br label %mergeinvertL940_L968.loopexit

mergeinvertL940_L968.loopexit:                    ; preds = %invertL968.loopexit
  store i64 %_unwrap371, i64* %"iv13'ac", align 8
  br label %invertL940

invertL968:                                       ; preds = %invertpass612.2, %invertL985
  %3581 = load double, double* %"'de185", align 8, !dbg !3876
  store double 0.000000e+00, double* %"'de185", align 8, !dbg !3876
  %3582 = load double, double* %"'de85", align 8, !dbg !3876
  %3583 = fadd fast double %3582, %3581, !dbg !3876
  store double %3583, double* %"'de85", align 8, !dbg !3876
  %3584 = load double, double* %"value_phi372'de", align 8, !dbg !3876
  %3585 = fadd fast double %3584, %3581, !dbg !3876
  store double %3585, double* %"value_phi372'de", align 8, !dbg !3876
  %_unwrap375 = add nsw i64 %682, -2
  %3586 = add nuw i64 %_unwrap375, 1
  %3587 = load i8*, i8** %_cache372, align 8, !dereferenceable !3229, !invariant.group !3531
  %3588 = load i64, i64* %"iv9'ac", align 8
  %3589 = getelementptr inbounds i8, i8* %3587, i64 %3588
  %3590 = load i8, i8* %3589, align 1, !invariant.group !3776
  switch i8 %3590, label %invertL866 [
    i8 0, label %invertL968.loopexit
    i8 1, label %invertL898
    i8 2, label %invertL881
  ]

invertL985:                                       ; preds = %invertL1013.critedge, %invertL992.lr.ph
  br label %invertL968

invertL992.lr.ph:                                 ; preds = %invertL992
  br label %invertL985

invertL992:                                       ; preds = %mergeinvertL992_pass612.2.loopexit, %invertL1004
  %3591 = load i64, i64* %"iv15'ac", align 8
  %3592 = icmp eq i64 %3591, 0
  %3593 = xor i1 %3592, true
  br i1 %3592, label %invertL992.lr.ph, label %incinvertL992

incinvertL992:                                    ; preds = %invertL992
  %3594 = load i64, i64* %"iv15'ac", align 8
  %3595 = add nsw i64 %3594, -1
  store i64 %3595, i64* %"iv15'ac", align 8
  br label %invertL1004

invertL1004:                                      ; preds = %mergeinvertL992_L1013.critedge.loopexit, %incinvertL992
  br label %invertL992

invertL1013.critedge.loopexit:                    ; preds = %invertL1013.critedge
  br label %mergeinvertL992_L1013.critedge.loopexit

mergeinvertL992_L1013.critedge.loopexit:          ; preds = %invertL1013.critedge.loopexit
  store i64 0, i64* %"iv15'ac", align 8
  br label %invertL1004

invertL1013.critedge:                             ; preds = %invertL1061
  %3596 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %_unwrap380 = add nsw i64 %682, -2, !dbg !3914
  %3597 = add nuw i64 %_unwrap380, 1, !dbg !3914
  %3598 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache377, align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3532
  %3599 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3598, i64 %3596, !dbg !3914
  %3600 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3599, align 8, !dbg !3914, !invariant.group !3924
  %3601 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3602 = add nuw i64 %_unwrap380, 1, !dbg !3914
  %3603 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi39_cache", align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3533
  %3604 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3603, i64 %3601, !dbg !3914
  %3605 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3604, align 8, !dbg !3914, !invariant.group !3923
  %3606 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3607 = add nuw i64 %_unwrap380, 1, !dbg !3914
  %3608 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache383_cache, align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3534
  %3609 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3608, i64 %3606, !dbg !3914
  %3610 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3609, align 8, !dbg !3914, !invariant.group !3922
  call fastcc void @diffejulia_gemv__1996({} addrspace(10)* align 16 %3600, {} addrspace(10)* align 16 %3605, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl", { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %3610), !dbg !3914
  %3611 = load double, double* %"'de386", align 8, !dbg !3907
  store double 0.000000e+00, double* %"'de386", align 8, !dbg !3907
  %3612 = load i64, i64* %"iv9'ac", align 8, !dbg !3907
  %"'ipg387_unwrap" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 72, !dbg !3907
  %"'ipc388_unwrap" = bitcast i8 addrspace(10)* %"'ipg387_unwrap" to double addrspace(10)*, !dbg !3907
  %"'ipc389_unwrap" = addrspacecast double addrspace(10)* %"'ipc388_unwrap" to double addrspace(11)*, !dbg !3907
  %3613 = load double, double addrspace(11)* %"'ipc389_unwrap", align 8, !dbg !3907, !tbaa !865, !alias.scope !3021, !noalias !3024
  %3614 = fadd fast double %3613, %3611, !dbg !3907
  store double %3614, double addrspace(11)* %"'ipc389_unwrap", align 8, !dbg !3907, !tbaa !865, !alias.scope !3021, !noalias !3024
  %3615 = load i64, i64* %"iv9'ac", align 8
  %3616 = add nuw i64 %_unwrap380, 1
  %3617 = load i1*, i1** %.not8931036_cache, align 8, !dereferenceable !3229, !invariant.group !3537
  %3618 = getelementptr inbounds i1, i1* %3617, i64 %3615
  %3619 = load i1, i1* %3618, align 1, !invariant.group !3901
  br i1 %3619, label %invertL985, label %invertL1013.critedge.loopexit

invertL1061:                                      ; preds = %invertL1074
  %3620 = load i64, i64* %"iv9'ac", align 8, !dbg !3935
  %_unwrap394 = add nsw i64 %682, -2, !dbg !3935
  %3621 = add nuw i64 %_unwrap394, 1, !dbg !3935
  %3622 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache391, align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3538
  %3623 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3622, i64 %3620, !dbg !3935
  %3624 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3623, align 8, !dbg !3935, !invariant.group !3940
  br label %invertL1013.critedge

invertL1074:                                      ; preds = %invertL1131.L1132_crit_edge, %invertL1095.preheader
  br label %invertL1061

invertL1095.preheader:                            ; preds = %invertL1095
  %3625 = load i64, i64* %"iv9'ac", align 8
  %3626 = load i64, i64* %"iv17'ac", align 8
  %_unwrap403 = load i64**, i64*** %value_phi529_cache, align 8, !dbg !3960, !invariant.group !3961
  %_unwrap404 = getelementptr inbounds i64*, i64** %_unwrap403, i64 %3625
  %forfree405 = load i64*, i64** %_unwrap404, align 8, !dereferenceable !3229, !invariant.group !3962
  %3627 = bitcast i64* %forfree405 to i8*
  call void @free(i8* nonnull %3627), !dbg !4243
  br label %invertL1074

invertL1095:                                      ; preds = %mergeinvertL1095_L1131.L1132_crit_edge.loopexit414, %invertL1102
  %3628 = load i64, i64* %"iv17'ac", align 8
  %3629 = icmp eq i64 %3628, 0
  %3630 = xor i1 %3629, true
  br i1 %3629, label %invertL1095.preheader, label %incinvertL1095

incinvertL1095:                                   ; preds = %invertL1095
  %3631 = load i64, i64* %"iv17'ac", align 8
  %3632 = add nsw i64 %3631, -1
  store i64 %3632, i64* %"iv17'ac", align 8
  br label %invertL1102

invertL1102:                                      ; preds = %mergeinvertL1095_L1131.L1132_crit_edge.loopexit, %incinvertL1095
  %3633 = load i64, i64* %"iv17'ac", align 8, !dbg !3969
  %3634 = load i64, i64* %"iv9'ac", align 8, !dbg !3969
  %_unwrap401 = add nsw i64 %682, -2, !dbg !3969
  %3635 = add nuw i64 %_unwrap401, 1, !dbg !3969
  %3636 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache391, align 8, !dbg !3969, !dereferenceable !3229, !invariant.group !3538
  %3637 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3636, i64 %3634, !dbg !3969
  %3638 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3637, align 8, !dbg !3969, !invariant.group !3940
  %"'ipc399_unwrap" = bitcast {} addrspace(10)* %3638 to double addrspace(13)* addrspace(10)*, !dbg !3969
  %"'ipc400_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc399_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3969
  %"arrayptr658912'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc400_unwrap", align 8, !dbg !3969, !tbaa !382, !alias.scope !3970, !noalias !3971, !nonnull !67
  %3639 = add nuw i64 %_unwrap401, 1, !dbg !3969
  %3640 = load i64**, i64*** %value_phi529_cache, align 8, !dbg !3969, !dereferenceable !3229, !invariant.group !3541
  %3641 = getelementptr inbounds i64*, i64** %3640, i64 %3634, !dbg !3969
  %3642 = load i64*, i64** %3641, align 8, !dbg !3969, !dereferenceable !3229, !invariant.group !3962
  %3643 = getelementptr inbounds i64, i64* %3642, i64 %3633, !dbg !3969
  %3644 = load i64, i64* %3643, align 8, !dbg !3969, !invariant.group !3963
  %_unwrap406 = add i64 %3644, -1, !dbg !3969
  %"'ipg398_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr658912'il_phi_unwrap", i64 %_unwrap406, !dbg !3969
  %3645 = load double, double addrspace(13)* %"'ipg398_unwrap", align 8, !dbg !3969, !tbaa !268, !alias.scope !4270, !noalias !4271
  store double 0.000000e+00, double addrspace(13)* %"'ipg398_unwrap", align 8, !dbg !3969, !tbaa !268, !alias.scope !4270, !noalias !4271
  %3646 = load double, double* %"arrayref656'de", align 8, !dbg !3969
  %3647 = fadd fast double %3646, %3645, !dbg !3969
  store double %3647, double* %"arrayref656'de", align 8, !dbg !3969
  %3648 = load double, double* %"arrayref656'de", align 8, !dbg !3956
  store double 0.000000e+00, double* %"arrayref656'de", align 8, !dbg !3956
  %3649 = load i64, i64* %"iv17'ac", align 8, !dbg !3956
  %3650 = load i64, i64* %"iv9'ac", align 8, !dbg !3956
  %"'ipc395_unwrap" = bitcast {} addrspace(10)* %"getfield17'ipl" to double addrspace(13)* addrspace(10)*, !dbg !3956
  %"'ipc396_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc395_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3956
  %"arrayptr655911'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc396_unwrap", align 16, !alias.scope !3470, !noalias !3467, !invariant.group !3959
  %_unwrap408 = add i64 %3650, 2, !dbg !3956
  %_unwrap409 = add nsw i64 %_unwrap408, -1, !dbg !3956
  %3651 = load i64, i64* %arraysize500_cache, align 8, !alias.scope !3467, !noalias !3470, !invariant.group !3475
  %_unwrap410 = mul i64 %_unwrap409, %3651, !dbg !3956
  %_unwrap411 = add i64 %_unwrap410, -1, !dbg !3956
  %iv.next18_unwrap = add nuw nsw i64 %3649, 1, !dbg !3956
  %_unwrap412 = add i64 %_unwrap411, %iv.next18_unwrap, !dbg !3956
  %"'ipg407_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr655911'ipl_unwrap", i64 %_unwrap412, !dbg !3956
  %3652 = load double, double addrspace(13)* %"'ipg407_unwrap", align 8, !dbg !3956, !tbaa !268, !alias.scope !4272, !noalias !4273
  %3653 = fadd fast double %3652, %3648, !dbg !3956
  store double %3653, double addrspace(13)* %"'ipg407_unwrap", align 8, !dbg !3956, !tbaa !268, !alias.scope !4272, !noalias !4273
  br label %invertL1095

invertL1131.L1132_crit_edge.loopexit:             ; preds = %invertL1131.L1132_crit_edge
  %_unwrap413 = add nsw i64 %682, -2
  %3654 = add nuw i64 %_unwrap413, 1
  %3655 = load i64*, i64** %loopLimit_cache43, align 8, !dereferenceable !3229, !invariant.group !3479
  %3656 = load i64, i64* %"iv9'ac", align 8
  %3657 = getelementptr inbounds i64, i64* %3655, i64 %3656
  %3658 = load i64, i64* %3657, align 8, !invariant.group !3985
  %3659 = add nuw i64 %_unwrap413, 1
  %3660 = load i64*, i64** %loopLimit_cache43, align 8, !dereferenceable !3229, !invariant.group !3479
  %3661 = load i64, i64* %"iv9'ac", align 8
  %3662 = getelementptr inbounds i64, i64* %3660, i64 %3661
  %3663 = load i64, i64* %3662, align 8, !invariant.group !3985
  %3664 = load i64, i64* %"iv9'ac", align 8
  %3665 = add nuw i64 %_unwrap413, 1
  %3666 = load i64*, i64** %loopLimit_cache43, align 8, !dereferenceable !3229, !invariant.group !3479
  %3667 = getelementptr inbounds i64, i64* %3666, i64 %3664
  %3668 = load i64, i64* %3667, align 8, !invariant.group !3985
  %3669 = icmp ne i64 %3668, 0
  br i1 %3669, label %invertL1131.L1132_crit_edge.loopexit_phirc, label %invertL1131.L1132_crit_edge.loopexit_phirc417

invertL1131.L1132_crit_edge.loopexit_phirc:       ; preds = %invertL1131.L1132_crit_edge.loopexit
  %3670 = sub nuw i64 %3668, 1
  %_unwrap415 = add nsw i64 %682, -2
  %3671 = add nuw i64 %_unwrap415, 1
  %3672 = load i64**, i64*** %value_phi529_cache, align 8, !dereferenceable !3229, !invariant.group !3541
  %3673 = getelementptr inbounds i64*, i64** %3672, i64 %3664
  %3674 = load i64*, i64** %3673, align 8, !dereferenceable !3229, !invariant.group !3962
  %3675 = getelementptr inbounds i64, i64* %3674, i64 %3670
  %3676 = load i64, i64* %3675, align 8, !invariant.group !3963
  %3677 = load i64, i64* %arraysize500_cache, align 8, !alias.scope !3467, !noalias !3470, !invariant.group !3475
  %_unwrap416 = icmp eq i64 %3676, %3677
  br label %invertL1131.L1132_crit_edge.loopexit_phimerge

invertL1131.L1132_crit_edge.loopexit_phirc417:    ; preds = %invertL1131.L1132_crit_edge.loopexit
  br label %invertL1131.L1132_crit_edge.loopexit_phimerge

invertL1131.L1132_crit_edge.loopexit_phimerge:    ; preds = %invertL1131.L1132_crit_edge.loopexit_phirc417, %invertL1131.L1132_crit_edge.loopexit_phirc
  %3678 = phi i1 [ %_unwrap416, %invertL1131.L1132_crit_edge.loopexit_phirc ], [ false, %invertL1131.L1132_crit_edge.loopexit_phirc417 ]
  br i1 %3678, label %mergeinvertL1095_L1131.L1132_crit_edge.loopexit414, label %mergeinvertL1095_L1131.L1132_crit_edge.loopexit

mergeinvertL1095_L1131.L1132_crit_edge.loopexit414: ; preds = %invertL1131.L1132_crit_edge.loopexit_phimerge
  store i64 %3663, i64* %"iv17'ac", align 8
  br label %invertL1095

mergeinvertL1095_L1131.L1132_crit_edge.loopexit:  ; preds = %invertL1131.L1132_crit_edge.loopexit_phimerge
  store i64 %3658, i64* %"iv17'ac", align 8
  br label %invertL1102

invertL1131.L1132_crit_edge:                      ; preds = %invertL1219
  %3679 = load i64, i64* %"iv9'ac", align 8, !dbg !3935
  %_unwrap421 = add nsw i64 %682, -2, !dbg !3935
  %3680 = add nuw i64 %_unwrap421, 1, !dbg !3935
  %3681 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache418, align 8, !dbg !3935, !dereferenceable !3229, !invariant.group !3542
  %3682 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3681, i64 %3679, !dbg !3935
  %3683 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3682, align 8, !dbg !3935, !invariant.group !3997
  %3684 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3685 = add nuw i64 %_unwrap421, 1, !dbg !3914
  %3686 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache422, align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3543
  %3687 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3686, i64 %3684, !dbg !3914
  %3688 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3687, align 8, !dbg !3914, !invariant.group !3996
  %3689 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3690 = add nuw i64 %_unwrap421, 1, !dbg !3914
  %3691 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi51_cache", align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3544
  %3692 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3691, i64 %3689, !dbg !3914
  %3693 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3692, align 8, !dbg !3914, !invariant.group !3995
  %3694 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3695 = add nuw i64 %_unwrap421, 1, !dbg !3914
  %3696 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache427_cache, align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3545
  %3697 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3696, i64 %3694, !dbg !3914
  %3698 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3697, align 8, !dbg !3914, !invariant.group !3994
  call fastcc void @diffejulia_gemv__1996({} addrspace(10)* align 16 %3688, {} addrspace(10)* align 16 %3693, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl", { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %3698), !dbg !3914
  %3699 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %3700 = add nuw i64 %_unwrap421, 1, !dbg !3908
  %3701 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache430, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3546
  %3702 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3701, i64 %3699, !dbg !3908
  %3703 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3702, align 8, !dbg !3908, !invariant.group !3921
  %3704 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %3705 = add nuw i64 %_unwrap421, 1, !dbg !3908
  %3706 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented382_cache, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3547
  %3707 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %3706, i64 %3704, !dbg !3908
  %3708 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %3707, align 8, !dbg !3908, !invariant.group !3920
  %"'ac384_unwrap" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %3708, 2, !dbg !3908
  %3709 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %3710 = add nuw i64 %_unwrap421, 1, !dbg !3908
  %3711 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache434, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3548
  %3712 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3711, i64 %3709, !dbg !3908
  %3713 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3712, align 8, !dbg !3908, !invariant.group !3993
  %3714 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %3715 = add nuw i64 %_unwrap421, 1, !dbg !3908
  %3716 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi48_cache", align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3549
  %3717 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3716, i64 %3714, !dbg !3908
  %3718 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3717, align 8, !dbg !3908, !invariant.group !3992
  %3719 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %3720 = add nuw i64 %_unwrap421, 1, !dbg !3908
  %3721 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache439_cache, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3550
  %3722 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %3721, i64 %3719, !dbg !3908
  %3723 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %3722, align 8, !dbg !3908, !invariant.group !3991
  call fastcc void @diffejulia___2046({} addrspace(10)* align 16 %3703, {} addrspace(10)* align 16 %"'ac384_unwrap", {} addrspace(10)* align 16 %3713, {} addrspace(10)* align 16 %3718, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %3723), !dbg !3908
  %3724 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3725 = add nuw i64 %_unwrap421, 1, !dbg !3914
  %3726 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache442, align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3551
  %3727 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3726, i64 %3724, !dbg !3914
  %3728 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3727, align 8, !dbg !3914, !invariant.group !3990
  %3729 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3730 = add nuw i64 %_unwrap421, 1, !dbg !3914
  %3731 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi47_cache", align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3552
  %3732 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3731, i64 %3729, !dbg !3914
  %3733 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3732, align 8, !dbg !3914, !invariant.group !3989
  %3734 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3735 = add nuw i64 %_unwrap421, 1, !dbg !3914
  %3736 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache446, align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3553
  %3737 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3736, i64 %3734, !dbg !3914
  %3738 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3737, align 8, !dbg !3914, !invariant.group !3944
  %3739 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3740 = add nuw i64 %_unwrap421, 1, !dbg !3914
  %3741 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache391, align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3538
  %3742 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3741, i64 %3739, !dbg !3914
  %3743 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3742, align 8, !dbg !3914, !invariant.group !3940
  %3744 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3745 = add nuw i64 %_unwrap421, 1, !dbg !3914
  %3746 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache450_cache, align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3554
  %3747 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3746, i64 %3744, !dbg !3914
  %3748 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3747, align 8, !dbg !3914, !invariant.group !3988
  call fastcc void @diffejulia_gemv__1996({} addrspace(10)* align 16 %3728, {} addrspace(10)* align 16 %3733, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %3738, {} addrspace(10)* align 16 %3743, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %3748), !dbg !3914
  %3749 = load i64, i64* %"iv9'ac", align 8
  %3750 = load i64, i64* %arraysize500_cache, align 8, !alias.scope !3467, !noalias !3470, !invariant.group !3475
  %.not896_unwrap = icmp eq i64 %3750, 0
  br i1 %.not896_unwrap, label %invertL1074, label %invertL1131.L1132_crit_edge.loopexit

invertL1219:                                      ; preds = %invertL1276.L1277_crit_edge, %invertL1240.preheader
  br label %invertL1131.L1132_crit_edge

invertL1240.preheader:                            ; preds = %invertL1240
  %3751 = load i64, i64* %"iv9'ac", align 8
  %3752 = load i64, i64* %"iv19'ac", align 8
  %_unwrap459 = load i64**, i64*** %value_phi585_cache, align 8, !dbg !3960, !invariant.group !4005
  %_unwrap460 = getelementptr inbounds i64*, i64** %_unwrap459, i64 %3751
  %forfree461 = load i64*, i64** %_unwrap460, align 8, !dereferenceable !3229, !invariant.group !4006
  %3753 = bitcast i64* %forfree461 to i8*
  call void @free(i8* nonnull %3753), !dbg !4243
  br label %invertL1219

invertL1240:                                      ; preds = %mergeinvertL1240_L1276.L1277_crit_edge.loopexit472, %invertL1247
  %3754 = load i64, i64* %"iv19'ac", align 8
  %3755 = icmp eq i64 %3754, 0
  %3756 = xor i1 %3755, true
  br i1 %3755, label %invertL1240.preheader, label %incinvertL1240

incinvertL1240:                                   ; preds = %invertL1240
  %3757 = load i64, i64* %"iv19'ac", align 8
  %3758 = add nsw i64 %3757, -1
  store i64 %3758, i64* %"iv19'ac", align 8
  br label %invertL1247

invertL1247:                                      ; preds = %mergeinvertL1240_L1276.L1277_crit_edge.loopexit, %incinvertL1240
  %3759 = load i64, i64* %"iv19'ac", align 8, !dbg !3969
  %3760 = load i64, i64* %"iv9'ac", align 8, !dbg !3969
  %_unwrap457 = add nsw i64 %682, -2, !dbg !3969
  %3761 = add nuw i64 %_unwrap457, 1, !dbg !3969
  %3762 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache418, align 8, !dbg !3969, !dereferenceable !3229, !invariant.group !3542
  %3763 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3762, i64 %3760, !dbg !3969
  %3764 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3763, align 8, !dbg !3969, !invariant.group !3997
  %"'ipc455_unwrap" = bitcast {} addrspace(10)* %3764 to double addrspace(13)* addrspace(10)*, !dbg !3969
  %"'ipc456_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc455_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3969
  %"arrayptr642909'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc456_unwrap", align 8, !dbg !3969, !tbaa !382, !alias.scope !4013, !noalias !4014, !nonnull !67
  %3765 = add nuw i64 %_unwrap457, 1, !dbg !3969
  %3766 = load i64**, i64*** %value_phi585_cache, align 8, !dbg !3969, !dereferenceable !3229, !invariant.group !3557
  %3767 = getelementptr inbounds i64*, i64** %3766, i64 %3760, !dbg !3969
  %3768 = load i64*, i64** %3767, align 8, !dbg !3969, !dereferenceable !3229, !invariant.group !4006
  %3769 = getelementptr inbounds i64, i64* %3768, i64 %3759, !dbg !3969
  %3770 = load i64, i64* %3769, align 8, !dbg !3969, !invariant.group !4007
  %_unwrap462 = add i64 %3770, -1, !dbg !3969
  %"'ipg454_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr642909'il_phi_unwrap", i64 %_unwrap462, !dbg !3969
  %3771 = load double, double addrspace(13)* %"'ipg454_unwrap", align 8, !dbg !3969, !tbaa !268, !alias.scope !4274, !noalias !4275
  store double 0.000000e+00, double addrspace(13)* %"'ipg454_unwrap", align 8, !dbg !3969, !tbaa !268, !alias.scope !4274, !noalias !4275
  %3772 = load double, double* %"arrayref640'de", align 8, !dbg !3969
  %3773 = fadd fast double %3772, %3771, !dbg !3969
  store double %3773, double* %"arrayref640'de", align 8, !dbg !3969
  %3774 = load double, double* %"arrayref640'de", align 8, !dbg !3956
  store double 0.000000e+00, double* %"arrayref640'de", align 8, !dbg !3956
  %3775 = load i64, i64* %"iv19'ac", align 8, !dbg !3956
  %3776 = load i64, i64* %"iv9'ac", align 8, !dbg !3956
  %"'ipc395_unwrap464" = bitcast {} addrspace(10)* %"getfield17'ipl" to double addrspace(13)* addrspace(10)*, !dbg !3956
  %"'ipc396_unwrap465" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc395_unwrap464" to double addrspace(13)* addrspace(11)*, !dbg !3956
  %"arrayptr639908'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc396_unwrap465", align 16, !alias.scope !3470, !noalias !3467, !invariant.group !4004
  %_unwrap466 = add i64 %3776, 2, !dbg !3956
  %_unwrap467 = add nsw i64 %_unwrap466, -1, !dbg !3956
  %3777 = load i64, i64* %arraysize500_cache, align 8, !alias.scope !3467, !noalias !3470, !invariant.group !3475
  %_unwrap468 = mul i64 %_unwrap467, %3777, !dbg !3956
  %_unwrap469 = add i64 %_unwrap468, -1, !dbg !3956
  %iv.next20_unwrap = add nuw nsw i64 %3775, 1, !dbg !3956
  %_unwrap470 = add i64 %_unwrap469, %iv.next20_unwrap, !dbg !3956
  %"'ipg463_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr639908'ipl_unwrap", i64 %_unwrap470, !dbg !3956
  %3778 = load double, double addrspace(13)* %"'ipg463_unwrap", align 8, !dbg !3956, !tbaa !268, !alias.scope !4276, !noalias !4277
  %3779 = fadd fast double %3778, %3774, !dbg !3956
  store double %3779, double addrspace(13)* %"'ipg463_unwrap", align 8, !dbg !3956, !tbaa !268, !alias.scope !4276, !noalias !4277
  br label %invertL1240

invertL1276.L1277_crit_edge.loopexit:             ; preds = %invertL1276.L1277_crit_edge
  %_unwrap471 = add nsw i64 %682, -2
  %3780 = add nuw i64 %_unwrap471, 1
  %3781 = load i64*, i64** %loopLimit_cache55, align 8, !dereferenceable !3229, !invariant.group !3482
  %3782 = load i64, i64* %"iv9'ac", align 8
  %3783 = getelementptr inbounds i64, i64* %3781, i64 %3782
  %3784 = load i64, i64* %3783, align 8, !invariant.group !4021
  %3785 = add nuw i64 %_unwrap471, 1
  %3786 = load i64*, i64** %loopLimit_cache55, align 8, !dereferenceable !3229, !invariant.group !3482
  %3787 = load i64, i64* %"iv9'ac", align 8
  %3788 = getelementptr inbounds i64, i64* %3786, i64 %3787
  %3789 = load i64, i64* %3788, align 8, !invariant.group !4021
  %3790 = load i64, i64* %"iv9'ac", align 8
  %3791 = add nuw i64 %_unwrap471, 1
  %3792 = load i64*, i64** %loopLimit_cache55, align 8, !dereferenceable !3229, !invariant.group !3482
  %3793 = getelementptr inbounds i64, i64* %3792, i64 %3790
  %3794 = load i64, i64* %3793, align 8, !invariant.group !4021
  %3795 = icmp ne i64 %3794, 0
  br i1 %3795, label %invertL1276.L1277_crit_edge.loopexit_phirc, label %invertL1276.L1277_crit_edge.loopexit_phirc475

invertL1276.L1277_crit_edge.loopexit_phirc:       ; preds = %invertL1276.L1277_crit_edge.loopexit
  %3796 = sub nuw i64 %3794, 1
  %_unwrap473 = add nsw i64 %682, -2
  %3797 = add nuw i64 %_unwrap473, 1
  %3798 = load i64**, i64*** %value_phi585_cache, align 8, !dereferenceable !3229, !invariant.group !3557
  %3799 = getelementptr inbounds i64*, i64** %3798, i64 %3790
  %3800 = load i64*, i64** %3799, align 8, !dereferenceable !3229, !invariant.group !4006
  %3801 = getelementptr inbounds i64, i64* %3800, i64 %3796
  %3802 = load i64, i64* %3801, align 8, !invariant.group !4007
  %3803 = load i64, i64* %arraysize500_cache, align 8, !alias.scope !3467, !noalias !3470, !invariant.group !3475
  %_unwrap474 = icmp eq i64 %3802, %3803
  br label %invertL1276.L1277_crit_edge.loopexit_phimerge

invertL1276.L1277_crit_edge.loopexit_phirc475:    ; preds = %invertL1276.L1277_crit_edge.loopexit
  br label %invertL1276.L1277_crit_edge.loopexit_phimerge

invertL1276.L1277_crit_edge.loopexit_phimerge:    ; preds = %invertL1276.L1277_crit_edge.loopexit_phirc475, %invertL1276.L1277_crit_edge.loopexit_phirc
  %3804 = phi i1 [ %_unwrap474, %invertL1276.L1277_crit_edge.loopexit_phirc ], [ false, %invertL1276.L1277_crit_edge.loopexit_phirc475 ]
  br i1 %3804, label %mergeinvertL1240_L1276.L1277_crit_edge.loopexit472, label %mergeinvertL1240_L1276.L1277_crit_edge.loopexit

mergeinvertL1240_L1276.L1277_crit_edge.loopexit472: ; preds = %invertL1276.L1277_crit_edge.loopexit_phimerge
  store i64 %3789, i64* %"iv19'ac", align 8
  br label %invertL1240

mergeinvertL1240_L1276.L1277_crit_edge.loopexit:  ; preds = %invertL1276.L1277_crit_edge.loopexit_phimerge
  store i64 %3784, i64* %"iv19'ac", align 8
  br label %invertL1247

invertL1276.L1277_crit_edge:                      ; preds = %invertpass612.2
  %3805 = load i64, i64* %"iv9'ac", align 8, !dbg !4038
  %"'ipg387_unwrap476" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 72, !dbg !4038
  %"'ipc388_unwrap477" = bitcast i8 addrspace(10)* %"'ipg387_unwrap476" to double addrspace(10)*, !dbg !4038
  %"'ipc389_unwrap478" = addrspacecast double addrspace(10)* %"'ipc388_unwrap477" to double addrspace(11)*, !dbg !4038
  %3806 = load double, double addrspace(11)* %"'ipc389_unwrap478", align 8, !dbg !4038, !tbaa !865, !alias.scope !3021, !noalias !4278
  store double 0.000000e+00, double addrspace(11)* %"'ipc389_unwrap478", align 8, !dbg !4038, !tbaa !865, !alias.scope !3021, !noalias !4278
  %3807 = load double, double* %"'de479", align 8, !dbg !4038
  %3808 = fadd fast double %3807, %3806, !dbg !4038
  store double %3808, double* %"'de479", align 8, !dbg !4038
  %3809 = load double, double* %"'de479", align 8, !dbg !4037
  store double 0.000000e+00, double* %"'de479", align 8, !dbg !4037
  %3810 = load double, double* %"'de386", align 8, !dbg !4037
  %3811 = fadd fast double %3810, %3809, !dbg !4037
  store double %3811, double* %"'de386", align 8, !dbg !4037
  %3812 = load double, double* %"'de480", align 8, !dbg !4037
  %3813 = fadd fast double %3812, %3809, !dbg !4037
  store double %3813, double* %"'de480", align 8, !dbg !4037
  %3814 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %_unwrap481 = addrspacecast [1 x {} addrspace(10)*]* %405 to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !3908
  %3815 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %"'ipc483_unwrap" = addrspacecast [1 x {} addrspace(10)*]* %"'ipa482" to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !3908
  %3816 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %_unwrap487 = add nsw i64 %682, -2, !dbg !3908
  %3817 = add nuw i64 %_unwrap487, 1, !dbg !3908
  %3818 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache484, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3558
  %3819 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3818, i64 %3816, !dbg !3908
  %3820 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3819, align 8, !dbg !3908, !invariant.group !4035
  %3821 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %3822 = add nuw i64 %_unwrap487, 1, !dbg !3908
  %3823 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi61_cache", align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3559
  %3824 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3823, i64 %3821, !dbg !3908
  %3825 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3824, align 8, !dbg !3908, !invariant.group !4036
  %3826 = load double, double* %"'de480", align 8, !dbg !3908
  %3827 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %3828 = add nuw i64 %_unwrap487, 1, !dbg !3908
  %3829 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)** %subcache490_cache, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3560
  %3830 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %3829, i64 %3827, !dbg !3908
  %3831 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %3830, align 8, !dbg !3908, !invariant.group !4040
  call fastcc void @diffejulia___1993([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %_unwrap481, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc483_unwrap", {} addrspace(10)* align 16 %getfield7, {} addrspace(10)* align 16 %"getfield7'ipl", {} addrspace(10)* align 16 %3820, {} addrspace(10)* align 16 %3825, double %3826, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %3831), !dbg !3908
  store double 0.000000e+00, double* %"'de480", align 8, !dbg !3908
  %3832 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %3833 = add nuw i64 %_unwrap487, 1, !dbg !3908
  %3834 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache493, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3561
  %3835 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3834, i64 %3832, !dbg !3908
  %3836 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3835, align 8, !dbg !3908, !invariant.group !3987
  %3837 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %3838 = add nuw i64 %_unwrap487, 1, !dbg !3908
  %3839 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented426_cache, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3562
  %3840 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %3839, i64 %3837, !dbg !3908
  %3841 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %3840, align 8, !dbg !3908, !invariant.group !3986
  %"'ac428_unwrap" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %3841, 2, !dbg !3908
  %3842 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %3843 = add nuw i64 %_unwrap487, 1, !dbg !3908
  %3844 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache497, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3563
  %3845 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3844, i64 %3842, !dbg !3908
  %3846 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3845, align 8, !dbg !3908, !invariant.group !4032
  %3847 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %3848 = add nuw i64 %_unwrap487, 1, !dbg !3908
  %3849 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi60_cache", align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3564
  %3850 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3849, i64 %3847, !dbg !3908
  %3851 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3850, align 8, !dbg !3908, !invariant.group !4031
  %3852 = load i64, i64* %"iv9'ac", align 8, !dbg !3908
  %3853 = add nuw i64 %_unwrap487, 1, !dbg !3908
  %3854 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache502_cache, align 8, !dbg !3908, !dereferenceable !3229, !invariant.group !3565
  %3855 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %3854, i64 %3852, !dbg !3908
  %3856 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %3855, align 8, !dbg !3908, !invariant.group !4030
  call fastcc void @diffejulia___2046({} addrspace(10)* align 16 %3836, {} addrspace(10)* align 16 %"'ac428_unwrap", {} addrspace(10)* align 16 %3846, {} addrspace(10)* align 16 %3851, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %3856), !dbg !3908
  %3857 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3858 = add nuw i64 %_unwrap487, 1, !dbg !3914
  %3859 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache505, align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3566
  %3860 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3859, i64 %3857, !dbg !3914
  %3861 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3860, align 8, !dbg !3914, !invariant.group !4029
  %3862 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3863 = add nuw i64 %_unwrap487, 1, !dbg !3914
  %3864 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi59_cache", align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3567
  %3865 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3864, i64 %3862, !dbg !3914
  %3866 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3865, align 8, !dbg !3914, !invariant.group !4028
  %3867 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3868 = add nuw i64 %_unwrap487, 1, !dbg !3914
  %3869 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache509, align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3568
  %3870 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3869, i64 %3867, !dbg !3914
  %3871 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3870, align 8, !dbg !3914, !invariant.group !3998
  %3872 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3873 = add nuw i64 %_unwrap487, 1, !dbg !3914
  %3874 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache418, align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3542
  %3875 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3874, i64 %3872, !dbg !3914
  %3876 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3875, align 8, !dbg !3914, !invariant.group !3997
  %3877 = load i64, i64* %"iv9'ac", align 8, !dbg !3914
  %3878 = add nuw i64 %_unwrap487, 1, !dbg !3914
  %3879 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache513_cache, align 8, !dbg !3914, !dereferenceable !3229, !invariant.group !3569
  %3880 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3879, i64 %3877, !dbg !3914
  %3881 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3880, align 8, !dbg !3914, !invariant.group !4027
  call fastcc void @diffejulia_gemv__1996({} addrspace(10)* align 16 %3861, {} addrspace(10)* align 16 %3866, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %3871, {} addrspace(10)* align 16 %3876, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %3881), !dbg !3914
  %3882 = load i64, i64* %"iv9'ac", align 8
  %3883 = load i64, i64* %arraysize500_cache, align 8, !alias.scope !3467, !noalias !3470, !invariant.group !3475
  %.not896_unwrap516 = icmp eq i64 %3883, 0
  br i1 %.not896_unwrap516, label %invertL1219, label %invertL1276.L1277_crit_edge.loopexit

invertL1352:                                      ; preds = %mergeinvertL616_L1366.loopexit, %incinvertL616
  %3884 = load i64, i64* %"iv9'ac", align 8, !dbg !4045
  %_unwrap521 = add nsw i64 %682, -2, !dbg !4045
  %3885 = add nuw i64 %_unwrap521, 1, !dbg !4045
  %3886 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache518, align 8, !dbg !4045, !dereferenceable !3229, !invariant.group !3570
  %3887 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3886, i64 %3884, !dbg !4045
  %3888 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3887, align 8, !dbg !4045, !invariant.group !4226
  %3889 = load i64, i64* %"iv9'ac", align 8, !dbg !4045
  %3890 = add nuw i64 %_unwrap521, 1, !dbg !4045
  %3891 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi73_cache", align 8, !dbg !4045, !dereferenceable !3229, !invariant.group !3571
  %3892 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3891, i64 %3889, !dbg !4045
  %3893 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3892, align 8, !dbg !4045, !invariant.group !4225
  %3894 = load i64, i64* %"iv9'ac", align 8, !dbg !4045
  %_unwrap523 = addrspacecast [1 x [1 x i64]]* %newstruct624 to [1 x [1 x i64]] addrspace(11)*, !dbg !4045
  %3895 = load i64, i64* %"iv9'ac", align 8, !dbg !4045
  %_unwrap524 = add i64 %3895, 2, !dbg !4045
  %3896 = load i64, i64* %"iv9'ac", align 8, !dbg !4045
  %3897 = add nuw i64 %_unwrap521, 1, !dbg !4045
  %3898 = load { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)** %_augmented525_cache, align 8, !dbg !4045, !dereferenceable !3229, !invariant.group !3572
  %3899 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %3898, i64 %3896, !dbg !4045
  %3900 = load { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %3899, align 8, !dbg !4045, !invariant.group !4049
  call fastcc void @diffejulia__unsafe_setindex__2077.323({} addrspace(10)* align 16 %getfield19, {} addrspace(10)* align 16 %"getfield19'ipl", {} addrspace(10)* align 16 %3888, {} addrspace(10)* align 16 %3893, [1 x [1 x i64]] addrspace(11)* nocapture readonly align 8 %_unwrap523, i64 signext %_unwrap524, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %3900), !dbg !4045
  br label %invertpass612.2

invertL1366.loopexit:                             ; preds = %invertL1366
  %_unwrap527 = add nsw i64 %682, -2
  br label %mergeinvertL616_L1366.loopexit

mergeinvertL616_L1366.loopexit:                   ; preds = %invertL1366.loopexit
  store i64 %_unwrap527, i64* %"iv9'ac", align 8
  br label %invertL1352

invertL1366:                                      ; preds = %L1366
  br i1 %683, label %invertL1366.loopexit, label %invertL598

invertpass.2.loopexit:                            ; preds = %invertpass.2
  %3901 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !4051
  %3902 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !4051
  %3903 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !4051
  %3904 = icmp ne i64 %3903, 0
  br i1 %3904, label %invertpass.2.loopexit_phirc, label %invertpass.2.loopexit_phirc530

invertpass.2.loopexit_phirc:                      ; preds = %invertpass.2.loopexit
  %3905 = sub nuw i64 %3903, 1
  %3906 = load i64*, i64** %value_phi79_cache, align 8, !dereferenceable !3229, !invariant.group !3230
  %3907 = getelementptr inbounds i64, i64* %3906, i64 %3905
  %3908 = load i64, i64* %3907, align 8, !invariant.group !3231
  %_unwrap529 = icmp eq i64 %3908, %arraysize
  br label %invertpass.2.loopexit_phimerge

invertpass.2.loopexit_phirc530:                   ; preds = %invertpass.2.loopexit
  br label %invertpass.2.loopexit_phimerge

invertpass.2.loopexit_phimerge:                   ; preds = %invertpass.2.loopexit_phirc530, %invertpass.2.loopexit_phirc
  %3909 = phi i1 [ %_unwrap529, %invertpass.2.loopexit_phirc ], [ false, %invertpass.2.loopexit_phirc530 ]
  br i1 %3909, label %mergeinvertL243_pass.2.loopexit528, label %mergeinvertL243_pass.2.loopexit

mergeinvertL243_pass.2.loopexit528:               ; preds = %invertpass.2.loopexit_phimerge
  store i64 %3902, i64* %"iv1'ac", align 8
  br label %invertL243

mergeinvertL243_pass.2.loopexit:                  ; preds = %invertpass.2.loopexit_phimerge
  store i64 %3901, i64* %"iv1'ac", align 8
  br label %invertL250

invertpass.2:                                     ; preds = %invertL325
  %3910 = load double, double addrspace(13)* %"memcpy_refined_dst94.2'ipg", align 8, !dbg !4073, !tbaa !268, !alias.scope !4279, !noalias !4280
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst94.2'ipg", align 8, !dbg !4073, !tbaa !268, !alias.scope !4279, !noalias !4280
  %3911 = load double, double* %"'de531", align 8, !dbg !4073
  %3912 = fadd fast double %3911, %3910, !dbg !4073
  store double %3912, double* %"'de531", align 8, !dbg !4073
  %3913 = load double, double addrspace(13)* %"memcpy_refined_dst94.1'ipg", align 8, !dbg !4073, !tbaa !268, !alias.scope !4279, !noalias !4280
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst94.1'ipg", align 8, !dbg !4073, !tbaa !268, !alias.scope !4279, !noalias !4280
  %3914 = load double, double* %"'de532", align 8, !dbg !4073
  %3915 = fadd fast double %3914, %3913, !dbg !4073
  store double %3915, double* %"'de532", align 8, !dbg !4073
  %3916 = load double, double addrspace(13)* %"arrayptr825'ipl", align 8, !dbg !4073, !tbaa !268, !alias.scope !4279, !noalias !4280
  store double 0.000000e+00, double addrspace(13)* %"arrayptr825'ipl", align 8, !dbg !4073, !tbaa !268, !alias.scope !4279, !noalias !4280
  %3917 = load double, double* %"'de533", align 8, !dbg !4073
  %3918 = fadd fast double %3917, %3916, !dbg !4073
  store double %3918, double* %"'de533", align 8, !dbg !4073
  %3919 = load double, double* %"'de531", align 8, !dbg !4054
  store double 0.000000e+00, double* %"'de531", align 8, !dbg !4054
  %3920 = load double, double* %"memcpy_refined_src88'ipg", align 8, !dbg !4054, !tbaa !132, !alias.scope !4281, !noalias !4282
  %3921 = fadd fast double %3920, %3919, !dbg !4054
  store double %3921, double* %"memcpy_refined_src88'ipg", align 8, !dbg !4054, !tbaa !132, !alias.scope !4281, !noalias !4282
  %3922 = load double, double* %"'de532", align 8, !dbg !4054
  store double 0.000000e+00, double* %"'de532", align 8, !dbg !4054
  %3923 = load double, double* %"memcpy_refined_src86'ipg", align 8, !dbg !4054, !tbaa !132, !alias.scope !4281, !noalias !4282
  %3924 = fadd fast double %3923, %3922, !dbg !4054
  store double %3924, double* %"memcpy_refined_src86'ipg", align 8, !dbg !4054, !tbaa !132, !alias.scope !4281, !noalias !4282
  %3925 = load double, double* %"'de533", align 8, !dbg !4054
  store double 0.000000e+00, double* %"'de533", align 8, !dbg !4054
  %3926 = load double, double* %"memcpy_refined_src84'ipg", align 8, !dbg !4054, !tbaa !132, !alias.scope !4281, !noalias !4282
  %3927 = fadd fast double %3926, %3925, !dbg !4054
  store double %3927, double* %"memcpy_refined_src84'ipg", align 8, !dbg !4054, !tbaa !132, !alias.scope !4281, !noalias !4282
  call fastcc void @diffejulia_compute_energy_2128([3 x double]* nocapture nofree writeonly align 8 "enzyme_sret" undef, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'ipa536", {} addrspace(10)* align 16 %550, {} addrspace(10)* align 16 %546, {} addrspace(10)* align 16 %getfield9, {} addrspace(10)* align 16 %"getfield9'ipl", { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented537), !dbg !3113
  br i1 %.not822, label %invertL222, label %invertpass.2.loopexit

invertib:                                         ; preds = %invertidxend
  br label %invertL359

invertidxend:                                     ; preds = %invertidxend141
  store double 0.000000e+00, double addrspace(13)* %"'ipg538", align 8, !dbg !3282, !tbaa !268, !alias.scope !4283, !noalias !4284
  br label %invertib

invertidxend141:                                  ; preds = %invertidxend154
  store double 0.000000e+00, double addrspace(13)* %"'ipg540", align 8, !dbg !4108, !tbaa !268, !alias.scope !4283, !noalias !4284
  br label %invertidxend

invertidxend154:                                  ; preds = %invertidxend180
  %3928 = load double, double* %"'de541", align 8, !dbg !4112
  store double 0.000000e+00, double* %"'de541", align 8, !dbg !4112
  %3929 = fmul fast double %3928, -2.000000e+00, !dbg !4112
  %3930 = load double, double* %"'de", align 8, !dbg !4112
  %3931 = fadd fast double %3930, %3929, !dbg !4112
  store double %3931, double* %"'de", align 8, !dbg !4112
  store double 0.000000e+00, double addrspace(13)* %"'ipg542", align 8, !dbg !4110, !tbaa !268, !alias.scope !4283, !noalias !4284
  br label %invertidxend141

invertidxend180:                                  ; preds = %invertidxend232
  %3932 = load double, double addrspace(13)* %"'ipg543", align 8, !dbg !4120, !tbaa !268, !alias.scope !4283, !noalias !4284
  store double 0.000000e+00, double addrspace(13)* %"'ipg543", align 8, !dbg !4120, !tbaa !268, !alias.scope !4283, !noalias !4284
  %3933 = load double, double* %"'de544", align 8, !dbg !4120
  %3934 = fadd fast double %3933, %3932, !dbg !4120
  store double %3934, double* %"'de544", align 8, !dbg !4120
  %3935 = load double, double* %"'de544", align 8, !dbg !4118
  store double 0.000000e+00, double* %"'de544", align 8, !dbg !4118
  %3936 = fneg fast double %3935, !dbg !4118
  %3937 = load double, double* %"'de94", align 8, !dbg !4118
  %3938 = fadd fast double %3937, %3936, !dbg !4118
  store double %3938, double* %"'de94", align 8, !dbg !4118
  %3939 = load double, double addrspace(13)* %"'ipg545", align 8, !dbg !4116, !tbaa !268, !alias.scope !4283, !noalias !4284
  store double 0.000000e+00, double addrspace(13)* %"'ipg545", align 8, !dbg !4116, !tbaa !268, !alias.scope !4283, !noalias !4284
  %3940 = load double, double* %"'de", align 8, !dbg !4116
  %3941 = fadd fast double %3940, %3939, !dbg !4116
  store double %3941, double* %"'de", align 8, !dbg !4116
  %3942 = load double, double addrspace(13)* %"'ipg546", align 8, !dbg !4115, !tbaa !268, !alias.scope !4283, !noalias !4284
  store double 0.000000e+00, double addrspace(13)* %"'ipg546", align 8, !dbg !4115, !tbaa !268, !alias.scope !4283, !noalias !4284
  %3943 = load double, double* %"'de541", align 8, !dbg !4115
  %3944 = fadd fast double %3943, %3942, !dbg !4115
  store double %3944, double* %"'de541", align 8, !dbg !4115
  br label %invertidxend154

invertidxend232:                                  ; preds = %invertidxend258
  %3945 = load double, double addrspace(13)* %"'ipg547", align 8, !dbg !4129, !tbaa !268, !alias.scope !4283, !noalias !4284
  store double 0.000000e+00, double addrspace(13)* %"'ipg547", align 8, !dbg !4129, !tbaa !268, !alias.scope !4283, !noalias !4284
  %3946 = load double, double* %"'de544", align 8, !dbg !4129
  %3947 = fadd fast double %3946, %3945, !dbg !4129
  store double %3947, double* %"'de544", align 8, !dbg !4129
  %3948 = load double, double addrspace(13)* %"'ipg548", align 8, !dbg !4127, !tbaa !268, !alias.scope !4283, !noalias !4284
  store double 0.000000e+00, double addrspace(13)* %"'ipg548", align 8, !dbg !4127, !tbaa !268, !alias.scope !4283, !noalias !4284
  %3949 = load double, double* %"'de", align 8, !dbg !4127
  %3950 = fadd fast double %3949, %3948, !dbg !4127
  store double %3950, double* %"'de", align 8, !dbg !4127
  %3951 = load double, double addrspace(13)* %"'ipg549", align 8, !dbg !4126, !tbaa !268, !alias.scope !4283, !noalias !4284
  store double 0.000000e+00, double addrspace(13)* %"'ipg549", align 8, !dbg !4126, !tbaa !268, !alias.scope !4283, !noalias !4284
  %3952 = load double, double* %"'de550", align 8, !dbg !4126
  %3953 = fadd fast double %3952, %3951, !dbg !4126
  store double %3953, double* %"'de550", align 8, !dbg !4126
  %3954 = load double, double* %"'de550", align 8, !dbg !4123
  store double 0.000000e+00, double* %"'de550", align 8, !dbg !4123
  %3955 = fmul fast double %3954, -3.000000e+00, !dbg !4123
  %3956 = load double, double* %"'de", align 8, !dbg !4123
  %3957 = fadd fast double %3956, %3955, !dbg !4123
  store double %3957, double* %"'de", align 8, !dbg !4123
  %3958 = load double, double addrspace(13)* %"'ipg551", align 8, !dbg !4121, !tbaa !268, !alias.scope !4283, !noalias !4284
  store double 0.000000e+00, double addrspace(13)* %"'ipg551", align 8, !dbg !4121, !tbaa !268, !alias.scope !4283, !noalias !4284
  %3959 = load double, double* %"'de", align 8, !dbg !4121
  %3960 = fadd fast double %3959, %3958, !dbg !4121
  store double %3960, double* %"'de", align 8, !dbg !4121
  br label %invertidxend180

invertidxend258:                                  ; preds = %invertidxend284.L394_crit_edge, %invertL412
  %3961 = load double, double addrspace(13)* %"'ipg552", align 8, !dbg !4135, !tbaa !268, !alias.scope !4283, !noalias !4284
  store double 0.000000e+00, double addrspace(13)* %"'ipg552", align 8, !dbg !4135, !tbaa !268, !alias.scope !4283, !noalias !4284
  %3962 = load double, double* %"'de544", align 8, !dbg !4135
  %3963 = fadd fast double %3962, %3961, !dbg !4135
  store double %3963, double* %"'de544", align 8, !dbg !4135
  %3964 = load double, double addrspace(13)* %"'ipg553", align 8, !dbg !4133, !tbaa !268, !alias.scope !4283, !noalias !4284
  store double 0.000000e+00, double addrspace(13)* %"'ipg553", align 8, !dbg !4133, !tbaa !268, !alias.scope !4283, !noalias !4284
  %3965 = load double, double* %"'de541", align 8, !dbg !4133
  %3966 = fadd fast double %3965, %3964, !dbg !4133
  store double %3966, double* %"'de541", align 8, !dbg !4133
  %3967 = load double, double addrspace(13)* %"'ipg554", align 8, !dbg !4131, !tbaa !268, !alias.scope !4283, !noalias !4284
  store double 0.000000e+00, double addrspace(13)* %"'ipg554", align 8, !dbg !4131, !tbaa !268, !alias.scope !4283, !noalias !4284
  %3968 = load double, double* %"'de", align 8, !dbg !4131
  %3969 = fadd fast double %3968, %3967, !dbg !4131
  store double %3969, double* %"'de", align 8, !dbg !4131
  br label %invertidxend232

invertidxend284.L394_crit_edge:                   ; preds = %invertL394
  br label %invertidxend258

invertpass387:                                    ; preds = %invertL683
  %3970 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %_unwrap558 = add nsw i64 %682, -2, !dbg !3379
  %3971 = add nuw i64 %_unwrap558, 1, !dbg !3379
  %3972 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache555, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3573
  %3973 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3972, i64 %3970, !dbg !3379
  %3974 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3973, align 8, !dbg !3379, !invariant.group !4189
  %_unwrap559 = addrspacecast {} addrspace(10)* %3974 to {} addrspace(11)*, !dbg !3379
  %_unwrap560 = bitcast {} addrspace(11)* %_unwrap559 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3379
  %_unwrap561 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap560, i64 0, i64 2, !dbg !3379
  %_unwrap562 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap561, align 8, !dbg !3379, !invariant.group !4174
  %3975 = bitcast {}*** %113 to {}**, !dbg !3379
  %3976 = getelementptr inbounds {}*, {}** %3975, i64 -14, !dbg !3379
  %3977 = getelementptr inbounds {}*, {}** %3976, i64 16, !dbg !3379
  %3978 = bitcast {}** %3977 to i8**, !dbg !3379
  %3979 = load i8*, i8** %3978, align 8, !dbg !3379
  %3980 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %3976, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5515959696 to {}*) to {} addrspace(10)*)), !dbg !3379
  %3981 = addrspacecast {} addrspace(10)* %3980 to {} addrspace(11)*, !dbg !3379
  %3982 = bitcast {} addrspace(11)* %3981 to [3 x i64] addrspace(11)*, !dbg !3379
  %3983 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3379
  %3984 = ptrtoint {}* %3983 to i64, !dbg !3379
  %3985 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3982, i64 0, i64 0, !dbg !3379
  store i64 %3984, i64 addrspace(11)* %3985, align 8, !dbg !3379
  %3986 = addrspacecast {} addrspace(10)* %"getfield'ipl" to {} addrspace(11)*, !dbg !3379
  %3987 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3986), !dbg !3379
  %3988 = ptrtoint {}* %3987 to i64, !dbg !3379
  %3989 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3982, i64 0, i64 1, !dbg !3379
  store i64 %3988, i64 addrspace(11)* %3989, align 8, !dbg !3379
  %3990 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %3991 = add nuw i64 %_unwrap558, 1, !dbg !3379
  %3992 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache563, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3574
  %3993 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3992, i64 %3990, !dbg !3379
  %3994 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3993, align 8, !dbg !3379, !invariant.group !4188
  %3995 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %3996 = add nuw i64 %_unwrap558, 1, !dbg !3379
  %3997 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi70_cache", align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3575
  %3998 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3997, i64 %3995, !dbg !3379
  %3999 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3998, align 8, !dbg !3379, !invariant.group !4187
  %4000 = addrspacecast {} addrspace(10)* %3999 to {} addrspace(11)*, !dbg !3379
  %4001 = call {}* @julia.pointer_from_objref({} addrspace(11)* %4000), !dbg !3379
  %4002 = ptrtoint {}* %4001 to i64, !dbg !3379
  %4003 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3982, i64 0, i64 2, !dbg !3379
  store i64 %4002, i64 addrspace(11)* %4003, align 8, !dbg !3379
  %4004 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5051863664 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6219021520 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185540240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap562, {} addrspace(10)* %3980, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728400336 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %getfield, {} addrspace(10)* %"getfield'ipl", {} addrspace(10)* %3994, {} addrspace(10)* %3999), !dbg !3379
  %4005 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %4006 = add nuw i64 %_unwrap558, 1, !dbg !3379
  %4007 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache567, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3576
  %4008 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4007, i64 %4005, !dbg !3379
  %4009 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4008, align 8, !dbg !3379, !invariant.group !4186
  %_unwrap570 = addrspacecast {} addrspace(10)* %4009 to {} addrspace(11)*, !dbg !3379
  %_unwrap571 = bitcast {} addrspace(11)* %_unwrap570 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3379
  %_unwrap572 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap571, i64 0, i64 2, !dbg !3379
  %_unwrap573 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap572, align 8, !dbg !3379, !invariant.group !4173
  %4010 = bitcast {}*** %100 to {}**, !dbg !3379
  %4011 = getelementptr inbounds {}*, {}** %4010, i64 -14, !dbg !3379
  %4012 = getelementptr inbounds {}*, {}** %4011, i64 16, !dbg !3379
  %4013 = bitcast {}** %4012 to i8**, !dbg !3379
  %4014 = load i8*, i8** %4013, align 8, !dbg !3379
  %4015 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %4011, i64 56, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6191626640 to {}*) to {} addrspace(10)*)), !dbg !3379
  %4016 = addrspacecast {} addrspace(10)* %4015 to {} addrspace(11)*, !dbg !3379
  %4017 = bitcast {} addrspace(11)* %4016 to [7 x i64] addrspace(11)*, !dbg !3379
  %4018 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3379
  %4019 = ptrtoint {}* %4018 to i64, !dbg !3379
  %4020 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %4017, i64 0, i64 0, !dbg !3379
  store i64 %4019, i64 addrspace(11)* %4020, align 8, !dbg !3379
  %4021 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %4022 = add nuw i64 %_unwrap558, 1, !dbg !3379
  %4023 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache574, align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3577
  %4024 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4023, i64 %4021, !dbg !3379
  %4025 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4024, align 8, !dbg !3379, !invariant.group !4185
  %4026 = load i64, i64* %"iv9'ac", align 8, !dbg !3379
  %4027 = add nuw i64 %_unwrap558, 1, !dbg !3379
  %4028 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi69_cache", align 8, !dbg !3379, !dereferenceable !3229, !invariant.group !3578
  %4029 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4028, i64 %4026, !dbg !3379
  %4030 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4029, align 8, !dbg !3379, !invariant.group !4184
  %4031 = addrspacecast {} addrspace(10)* %4030 to {} addrspace(11)*, !dbg !3379
  %4032 = call {}* @julia.pointer_from_objref({} addrspace(11)* %4031), !dbg !3379
  %4033 = ptrtoint {}* %4032 to i64, !dbg !3379
  %4034 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %4017, i64 0, i64 1, !dbg !3379
  store i64 %4033, i64 addrspace(11)* %4034, align 8, !dbg !3379
  %4035 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3379
  %4036 = ptrtoint {}* %4035 to i64, !dbg !3379
  %4037 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %4017, i64 0, i64 2, !dbg !3379
  store i64 %4036, i64 addrspace(11)* %4037, align 8, !dbg !3379
  %4038 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3379
  %4039 = ptrtoint {}* %4038 to i64, !dbg !3379
  %4040 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %4017, i64 0, i64 3, !dbg !3379
  store i64 %4039, i64 addrspace(11)* %4040, align 8, !dbg !3379
  %4041 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3379
  %4042 = ptrtoint {}* %4041 to i64, !dbg !3379
  %4043 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %4017, i64 0, i64 4, !dbg !3379
  store i64 %4042, i64 addrspace(11)* %4043, align 8, !dbg !3379
  %4044 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3379
  %4045 = ptrtoint {}* %4044 to i64, !dbg !3379
  %4046 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %4017, i64 0, i64 5, !dbg !3379
  store i64 %4045, i64 addrspace(11)* %4046, align 8, !dbg !3379
  %4047 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3379
  %4048 = ptrtoint {}* %4047 to i64, !dbg !3379
  %4049 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %4017, i64 0, i64 6, !dbg !3379
  store i64 %4048, i64 addrspace(11)* %4049, align 8, !dbg !3379
  %4050 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5051863664 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6189613584 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185541448 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap573, {} addrspace(10)* %4015, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4729228528 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %4025, {} addrspace(10)* %4030, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4780892768 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*)), !dbg !3379
  %4051 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4052 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4053 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache578, align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3579
  %4054 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4053, i64 %4051, !dbg !3610
  %4055 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4054, align 8, !dbg !3610, !invariant.group !4183
  %_unwrap581 = addrspacecast {} addrspace(10)* %4055 to {} addrspace(11)*, !dbg !3610
  %_unwrap582 = bitcast {} addrspace(11)* %_unwrap581 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3610
  %_unwrap583 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap582, i64 0, i64 2, !dbg !3610
  %_unwrap584 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap583, align 8, !dbg !3610, !invariant.group !4172
  %4056 = bitcast {}*** %87 to {}**, !dbg !3610
  %4057 = getelementptr inbounds {}*, {}** %4056, i64 -14, !dbg !3610
  %4058 = getelementptr inbounds {}*, {}** %4057, i64 16, !dbg !3610
  %4059 = bitcast {}** %4058 to i8**, !dbg !3610
  %4060 = load i8*, i8** %4059, align 8, !dbg !3610
  %4061 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %4057, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5515959696 to {}*) to {} addrspace(10)*)), !dbg !3610
  %4062 = addrspacecast {} addrspace(10)* %4061 to {} addrspace(11)*, !dbg !3610
  %4063 = bitcast {} addrspace(11)* %4062 to [3 x i64] addrspace(11)*, !dbg !3610
  %4064 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3610
  %4065 = ptrtoint {}* %4064 to i64, !dbg !3610
  %4066 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %4063, i64 0, i64 0, !dbg !3610
  store i64 %4065, i64 addrspace(11)* %4066, align 8, !dbg !3610
  %4067 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3610
  %4068 = ptrtoint {}* %4067 to i64, !dbg !3610
  %4069 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %4063, i64 0, i64 1, !dbg !3610
  store i64 %4068, i64 addrspace(11)* %4069, align 8, !dbg !3610
  %4070 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4071 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4072 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache585, align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3580
  %4073 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4072, i64 %4070, !dbg !3610
  %4074 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4073, align 8, !dbg !3610, !invariant.group !4182
  %4075 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4076 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4077 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi68_cache", align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3581
  %4078 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4077, i64 %4075, !dbg !3610
  %4079 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4078, align 8, !dbg !3610, !invariant.group !4181
  %4080 = addrspacecast {} addrspace(10)* %4079 to {} addrspace(11)*, !dbg !3610
  %4081 = call {}* @julia.pointer_from_objref({} addrspace(11)* %4080), !dbg !3610
  %4082 = ptrtoint {}* %4081 to i64, !dbg !3610
  %4083 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %4063, i64 0, i64 2, !dbg !3610
  store i64 %4082, i64 addrspace(11)* %4083, align 8, !dbg !3610
  %4084 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5051863664 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6215964112 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185540240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap584, {} addrspace(10)* %4061, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728400336 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4784535424 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %4074, {} addrspace(10)* %4079), !dbg !3610
  %4085 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4086 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4087 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache589, align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3582
  %4088 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4087, i64 %4085, !dbg !3610
  %4089 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4088, align 8, !dbg !3610, !invariant.group !4180
  %_unwrap592 = addrspacecast {} addrspace(10)* %4089 to {} addrspace(11)*, !dbg !3610
  %_unwrap593 = bitcast {} addrspace(11)* %_unwrap592 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3610
  %_unwrap594 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap593, i64 0, i64 2, !dbg !3610
  %_unwrap595 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap594, align 8, !dbg !3610, !invariant.group !4171
  %4090 = bitcast {}*** %74 to {}**, !dbg !3610
  %4091 = getelementptr inbounds {}*, {}** %4090, i64 -14, !dbg !3610
  %4092 = getelementptr inbounds {}*, {}** %4091, i64 16, !dbg !3610
  %4093 = bitcast {}** %4092 to i8**, !dbg !3610
  %4094 = load i8*, i8** %4093, align 8, !dbg !3610
  %4095 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %4091, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6257012176 to {}*) to {} addrspace(10)*)), !dbg !3610
  %4096 = addrspacecast {} addrspace(10)* %4095 to {} addrspace(11)*, !dbg !3610
  %4097 = bitcast {} addrspace(11)* %4096 to [2 x i64] addrspace(11)*, !dbg !3610
  %4098 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3610
  %4099 = ptrtoint {}* %4098 to i64, !dbg !3610
  %4100 = getelementptr inbounds [2 x i64], [2 x i64] addrspace(11)* %4097, i64 0, i64 0, !dbg !3610
  store i64 %4099, i64 addrspace(11)* %4100, align 8, !dbg !3610
  %4101 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4102 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4103 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache596, align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3583
  %4104 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4103, i64 %4101, !dbg !3610
  %4105 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4104, align 8, !dbg !3610, !invariant.group !4179
  %4106 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4107 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4108 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi67_cache", align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3584
  %4109 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4108, i64 %4106, !dbg !3610
  %4110 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4109, align 8, !dbg !3610, !invariant.group !4178
  %4111 = addrspacecast {} addrspace(10)* %4110 to {} addrspace(11)*, !dbg !3610
  %4112 = call {}* @julia.pointer_from_objref({} addrspace(11)* %4111), !dbg !3610
  %4113 = ptrtoint {}* %4112 to i64, !dbg !3610
  %4114 = getelementptr inbounds [2 x i64], [2 x i64] addrspace(11)* %4097, i64 0, i64 1, !dbg !3610
  store i64 %4113, i64 addrspace(11)* %4114, align 8, !dbg !3610
  %4115 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5051863664 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6195073424 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185541928 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap595, {} addrspace(10)* %4095, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4760305232 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %4105, {} addrspace(10)* %4110), !dbg !3610
  %4116 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4117 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4118 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache600, align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3585
  %4119 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4118, i64 %4116, !dbg !3610
  %4120 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4119, align 8, !dbg !3610, !invariant.group !4177
  %_unwrap603 = addrspacecast {} addrspace(10)* %4120 to {} addrspace(11)*, !dbg !3610
  %_unwrap604 = bitcast {} addrspace(11)* %_unwrap603 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3610
  %_unwrap605 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap604, i64 0, i64 2, !dbg !3610
  %_unwrap606 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap605, align 8, !dbg !3610, !invariant.group !4170
  %4121 = bitcast {}*** %61 to {}**, !dbg !3610
  %4122 = getelementptr inbounds {}*, {}** %4121, i64 -14, !dbg !3610
  %4123 = getelementptr inbounds {}*, {}** %4122, i64 16, !dbg !3610
  %4124 = bitcast {}** %4123 to i8**, !dbg !3610
  %4125 = load i8*, i8** %4124, align 8, !dbg !3610
  %4126 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %4122, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5515959696 to {}*) to {} addrspace(10)*)), !dbg !3610
  %4127 = addrspacecast {} addrspace(10)* %4126 to {} addrspace(11)*, !dbg !3610
  %4128 = bitcast {} addrspace(11)* %4127 to [3 x i64] addrspace(11)*, !dbg !3610
  %4129 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3610
  %4130 = ptrtoint {}* %4129 to i64, !dbg !3610
  %4131 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %4128, i64 0, i64 0, !dbg !3610
  store i64 %4130, i64 addrspace(11)* %4131, align 8, !dbg !3610
  %4132 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4133 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4134 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %box_cache, align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3586
  %4135 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4134, i64 %4132, !dbg !3610
  %4136 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4135, align 8, !dbg !3610, !invariant.group !4169
  %4137 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4138 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4139 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"box'mi_cache", align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3587
  %4140 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4139, i64 %4137, !dbg !3610
  %4141 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4140, align 8, !dbg !3610, !invariant.group !4168
  %4142 = addrspacecast {} addrspace(10)* %4141 to {} addrspace(11)*, !dbg !3610
  %4143 = call {}* @julia.pointer_from_objref({} addrspace(11)* %4142), !dbg !3610
  %4144 = ptrtoint {}* %4143 to i64, !dbg !3610
  %4145 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %4128, i64 0, i64 1, !dbg !3610
  store i64 %4144, i64 addrspace(11)* %4145, align 8, !dbg !3610
  %4146 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4147 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4148 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache609, align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3588
  %4149 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4148, i64 %4146, !dbg !3610
  %4150 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4149, align 8, !dbg !3610, !invariant.group !4167
  %4151 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4152 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4153 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi66_cache", align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3589
  %4154 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4153, i64 %4151, !dbg !3610
  %4155 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4154, align 8, !dbg !3610, !invariant.group !4166
  %4156 = addrspacecast {} addrspace(10)* %4155 to {} addrspace(11)*, !dbg !3610
  %4157 = call {}* @julia.pointer_from_objref({} addrspace(11)* %4156), !dbg !3610
  %4158 = ptrtoint {}* %4157 to i64, !dbg !3610
  %4159 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %4128, i64 0, i64 2, !dbg !3610
  store i64 %4158, i64 addrspace(11)* %4159, align 8, !dbg !3610
  %4160 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5051863664 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6219021520 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185540240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap606, {} addrspace(10)* %4126, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4730270640 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %4136, {} addrspace(10)* %4141, {} addrspace(10)* %4150, {} addrspace(10)* %4155), !dbg !3610
  %4161 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %"'ipc613_unwrap" = bitcast {} addrspace(10)* %4141 to double addrspace(10)*, !dbg !3610
  %4162 = load double, double addrspace(10)* %"'ipc613_unwrap", align 8, !dbg !3610, !tbaa !112, !alias.scope !4285, !noalias !4286
  store double 0.000000e+00, double addrspace(10)* %"'ipc613_unwrap", align 8, !dbg !3610, !tbaa !112, !alias.scope !4285, !noalias !4286
  %4163 = load double, double* %"'de614", align 8, !dbg !3610
  %4164 = fadd fast double %4163, %4162, !dbg !3610
  store double %4164, double* %"'de614", align 8, !dbg !3610
  %4165 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4166 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4167 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache615, align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3590
  %4168 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4167, i64 %4165, !dbg !3610
  %4169 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4168, align 8, !dbg !3610, !invariant.group !4165
  %_unwrap618 = addrspacecast {} addrspace(10)* %4169 to {} addrspace(11)*, !dbg !3610
  %_unwrap619 = bitcast {} addrspace(11)* %_unwrap618 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3610
  %_unwrap620 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap619, i64 0, i64 2, !dbg !3610
  %_unwrap621 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap620, align 8, !dbg !3610, !invariant.group !4159
  %4170 = bitcast {}*** %40 to {}**, !dbg !3610
  %4171 = getelementptr inbounds {}*, {}** %4170, i64 -14, !dbg !3610
  %4172 = getelementptr inbounds {}*, {}** %4171, i64 16, !dbg !3610
  %4173 = bitcast {}** %4172 to i8**, !dbg !3610
  %4174 = load i8*, i8** %4173, align 8, !dbg !3610
  %4175 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %4171, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5515959696 to {}*) to {} addrspace(10)*)), !dbg !3610
  %4176 = addrspacecast {} addrspace(10)* %4175 to {} addrspace(11)*, !dbg !3610
  %4177 = bitcast {} addrspace(11)* %4176 to [3 x i64] addrspace(11)*, !dbg !3610
  %4178 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3610
  %4179 = ptrtoint {}* %4178 to i64, !dbg !3610
  %4180 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %4177, i64 0, i64 0, !dbg !3610
  store i64 %4179, i64 addrspace(11)* %4180, align 8, !dbg !3610
  %4181 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(11)*)), !dbg !3610
  %4182 = ptrtoint {}* %4181 to i64, !dbg !3610
  %4183 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %4177, i64 0, i64 1, !dbg !3610
  store i64 %4182, i64 addrspace(11)* %4183, align 8, !dbg !3610
  %4184 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4185 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4186 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache622, align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3591
  %4187 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4186, i64 %4184, !dbg !3610
  %4188 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4187, align 8, !dbg !3610, !tbaa !865, !alias.scope !3617, !noalias !3618, !invariant.group !3619
  %4189 = load i64, i64* %"iv9'ac", align 8, !dbg !3610
  %4190 = add nuw i64 %_unwrap558, 1, !dbg !3610
  %4191 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ipl176_cache", align 8, !dbg !3610, !dereferenceable !3229, !invariant.group !3592
  %4192 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4191, i64 %4189, !dbg !3610
  %4193 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4192, align 8, !dbg !3610, !tbaa !865, !alias.scope !3612, !noalias !3615, !invariant.group !3620
  %4194 = addrspacecast {} addrspace(10)* %4193 to {} addrspace(11)*, !dbg !3610
  %4195 = call {}* @julia.pointer_from_objref({} addrspace(11)* %4194), !dbg !3610
  %4196 = ptrtoint {}* %4195 to i64, !dbg !3610
  %4197 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %4177, i64 0, i64 2, !dbg !3610
  store i64 %4196, i64 addrspace(11)* %4197, align 8, !dbg !3610
  %4198 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5051863664 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6215964112 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4728220272 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11185540240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap621, {} addrspace(10)* %4175, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4730270640 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11240416960 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* %4188, {} addrspace(10)* %4193), !dbg !3610
  %4199 = load double, double* %"'de614", align 8, !dbg !4157
  store double 0.000000e+00, double* %"'de614", align 8, !dbg !4157
  %4200 = fmul fast double %4199, 0x401921FB54442D18, !dbg !4157
  %4201 = load double, double* %"value_phi372'de", align 8, !dbg !4157
  %4202 = fadd fast double %4201, %4200, !dbg !4157
  store double %4202, double* %"value_phi372'de", align 8, !dbg !4157
  br label %invertL616

invertpass612.2.loopexit:                         ; preds = %invertpass612.2
  br label %mergeinvertL992_pass612.2.loopexit

mergeinvertL992_pass612.2.loopexit:               ; preds = %invertpass612.2.loopexit
  store i64 0, i64* %"iv15'ac", align 8
  br label %invertL992

invertpass612.2:                                  ; preds = %invertL1352
  %4203 = load i64, i64* %"iv9'ac", align 8, !dbg !4218
  %_unwrap628 = add nsw i64 %682, -2, !dbg !4218
  %4204 = add nuw i64 %_unwrap628, 1, !dbg !4218
  %4205 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi73_cache", align 8, !dbg !4218, !dereferenceable !3229, !invariant.group !3571
  %4206 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4205, i64 %4203, !dbg !4218
  %4207 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %4206, align 8, !dbg !4218, !invariant.group !4225
  %"'ipc626_unwrap" = bitcast {} addrspace(10)* %4207 to double addrspace(13)* addrspace(10)*, !dbg !4218
  %"'ipc627_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc626_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4218
  %"arrayptr614904'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc627_unwrap", align 8, !tbaa !382, !alias.scope !4211, !noalias !4214, !nonnull !67
  %"memcpy_refined_dst616.2'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr614904'il_phi_unwrap", i64 2, !dbg !4218
  %4208 = load double, double addrspace(13)* %"memcpy_refined_dst616.2'ipg_unwrap", align 8, !dbg !4218, !tbaa !268, !alias.scope !4287, !noalias !4288
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst616.2'ipg_unwrap", align 8, !dbg !4218, !tbaa !268, !alias.scope !4287, !noalias !4288
  %4209 = load double, double* %"'de629", align 8, !dbg !4218
  %4210 = fadd fast double %4209, %4208, !dbg !4218
  store double %4210, double* %"'de629", align 8, !dbg !4218
  %4211 = load i64, i64* %"iv9'ac", align 8, !dbg !4218
  %"memcpy_refined_dst616.1'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr614904'il_phi_unwrap", i64 1, !dbg !4218
  %4212 = load double, double addrspace(13)* %"memcpy_refined_dst616.1'ipg_unwrap", align 8, !dbg !4218, !tbaa !268, !alias.scope !4287, !noalias !4288
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst616.1'ipg_unwrap", align 8, !dbg !4218, !tbaa !268, !alias.scope !4287, !noalias !4288
  %4213 = load double, double* %"'de630", align 8, !dbg !4218
  %4214 = fadd fast double %4213, %4212, !dbg !4218
  store double %4214, double* %"'de630", align 8, !dbg !4218
  %4215 = load double, double addrspace(13)* %"arrayptr614904'il_phi_unwrap", align 8, !dbg !4218, !tbaa !268, !alias.scope !4287, !noalias !4288
  store double 0.000000e+00, double addrspace(13)* %"arrayptr614904'il_phi_unwrap", align 8, !dbg !4218, !tbaa !268, !alias.scope !4287, !noalias !4288
  %4216 = load double, double* %"'de631", align 8, !dbg !4218
  %4217 = fadd fast double %4216, %4215, !dbg !4218
  store double %4217, double* %"'de631", align 8, !dbg !4218
  %4218 = load double, double* %"'de629", align 8, !dbg !4199
  store double 0.000000e+00, double* %"'de629", align 8, !dbg !4199
  %4219 = load i64, i64* %"iv9'ac", align 8, !dbg !4199
  %"memcpy_refined_src605'ipg_unwrap" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa632", i64 0, i64 2, !dbg !4199
  %4220 = load double, double* %"memcpy_refined_src605'ipg_unwrap", align 8, !dbg !4199, !tbaa !132, !alias.scope !4289, !noalias !4290
  %4221 = fadd fast double %4220, %4218, !dbg !4199
  store double %4221, double* %"memcpy_refined_src605'ipg_unwrap", align 8, !dbg !4199, !tbaa !132, !alias.scope !4289, !noalias !4290
  %4222 = load double, double* %"'de630", align 8, !dbg !4199
  store double 0.000000e+00, double* %"'de630", align 8, !dbg !4199
  %4223 = load i64, i64* %"iv9'ac", align 8, !dbg !4199
  %"memcpy_refined_src603'ipg_unwrap" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa632", i64 0, i64 1, !dbg !4199
  %4224 = load double, double* %"memcpy_refined_src603'ipg_unwrap", align 8, !dbg !4199, !tbaa !132, !alias.scope !4289, !noalias !4290
  %4225 = fadd fast double %4224, %4222, !dbg !4199
  store double %4225, double* %"memcpy_refined_src603'ipg_unwrap", align 8, !dbg !4199, !tbaa !132, !alias.scope !4289, !noalias !4290
  %4226 = load double, double* %"'de631", align 8, !dbg !4199
  store double 0.000000e+00, double* %"'de631", align 8, !dbg !4199
  %4227 = load i64, i64* %"iv9'ac", align 8, !dbg !4199
  %"memcpy_refined_src601'ipg_unwrap" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa632", i64 0, i64 0, !dbg !4199
  %4228 = load double, double* %"memcpy_refined_src601'ipg_unwrap", align 8, !dbg !4199, !tbaa !132, !alias.scope !4289, !noalias !4290
  %4229 = fadd fast double %4228, %4226, !dbg !4199
  store double %4229, double* %"memcpy_refined_src601'ipg_unwrap", align 8, !dbg !4199, !tbaa !132, !alias.scope !4289, !noalias !4290
  %4230 = load i64, i64* %"iv9'ac", align 8, !dbg !4198
  %4231 = add nuw i64 %_unwrap628, 1, !dbg !4198
  %4232 = load { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)*, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)** %_augmented633_cache, align 8, !dbg !4198, !dereferenceable !3229, !invariant.group !3593
  %4233 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %4232, i64 %4230, !dbg !4198
  %4234 = load { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %4233, align 8, !dbg !4198, !invariant.group !4224
  call fastcc void @diffejulia_compute_energy_2128.415([3 x double]* nocapture nofree writeonly align 8 "enzyme_sret" undef, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'ipa632", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl", {} addrspace(10)* align 16 %getfield9, {} addrspace(10)* align 16 %"getfield9'ipl", { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %4234), !dbg !4198
  %4235 = add nuw i64 %_unwrap628, 1
  %4236 = load i8*, i8** %_cache635, align 8, !dereferenceable !3229, !invariant.group !3596
  %4237 = load i64, i64* %"iv9'ac", align 8
  %4238 = getelementptr inbounds i8, i8* %4236, i64 %4237
  %4239 = load i8, i8* %4238, align 1, !invariant.group !3889
  switch i8 %4239, label %invertL1276.L1277_crit_edge [
    i8 0, label %invertpass612.2.loopexit
    i8 1, label %invertL968
  ]

staging:                                          ; preds = %invertL483
  br i1 %.not936.not_unwrap, label %invertL478, label %invertL470
}

after simplification :
; Function Attrs: mustprogress nofree willreturn
define double @preprocess_julia___5541(double %0, double %1) local_unnamed_addr #3 !dbg !15 {
top:
  %2 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %3, align 8, !tbaa !8
  %4 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !16
  fence syncscope("singlethread") seq_cst
  %5 = fdiv double %0, %1, !dbg !16
  ret double %5, !dbg !16
}

; Function Attrs: mustprogress nofree willreturn
define internal double @augmented_julia___5541(double %0, double %1) local_unnamed_addr #3 !dbg !17 {
top:
  %2 = alloca double, align 8
  %3 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %4, align 8, !tbaa !8, !alias.scope !18, !noalias !21
  %5 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !12, !invariant.load !7, !alias.scope !23, !noalias !26
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !28
  fence syncscope("singlethread") seq_cst
  %6 = fdiv double %0, %1, !dbg !28
  store double %6, double* %2, align 8, !dbg !28
  %7 = load double, double* %2, align 8, !dbg !28
  ret double %7, !dbg !28
}

; Function Attrs: mustprogress nofree willreturn
define internal { double } @diffejulia___5541(double %0, double %1, double %differeturn) local_unnamed_addr #3 !dbg !31 {
top:
  %"'de" = alloca double, align 8
  %2 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"'de1" = alloca double, align 8
  %3 = getelementptr double, double* %"'de1", i64 0
  store double 0.000000e+00, double* %3, align 8
  %4 = call {}*** @julia.get_pgcstack() #5
  %5 = fdiv double %0, %1, !dbg !32
  br label %inverttop, !dbg !32

inverttop:                                        ; preds = %top
  store double %differeturn, double* %"'de", align 8
  %6 = load double, double* %"'de", align 8, !dbg !32
  store double 0.000000e+00, double* %"'de", align 8, !dbg !32
  %7 = fdiv fast double %6, %1, !dbg !32
  %8 = fdiv fast double %0, %1, !dbg !32
  %9 = fmul fast double %7, %8, !dbg !32
  %10 = fneg fast double %9, !dbg !32
  %11 = load double, double* %"'de1", align 8, !dbg !32
  %12 = fadd fast double %11, %10, !dbg !32
  store double %12, double* %"'de1", align 8, !dbg !32
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  %13 = load double, double* %"'de1", align 8
  %14 = insertvalue { double } undef, double %13, 0
  ret { double } %14
}

after simplification :
; Function Attrs: mustprogress nofree willreturn
define double @preprocess_julia___5715(double %0, double %1) local_unnamed_addr #3 !dbg !15 {
top:
  %2 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %3, align 8, !tbaa !8
  %4 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !16
  fence syncscope("singlethread") seq_cst
  %5 = fdiv double %0, %1, !dbg !16
  ret double %5, !dbg !16
}

; Function Attrs: mustprogress nofree willreturn
define internal double @augmented_julia___5715(double %0, double %1) local_unnamed_addr #3 !dbg !17 {
top:
  %2 = alloca double, align 8
  %3 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %4, align 8, !tbaa !8, !alias.scope !18, !noalias !21
  %5 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !12, !invariant.load !7, !alias.scope !23, !noalias !26
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !28
  fence syncscope("singlethread") seq_cst
  %6 = fdiv double %0, %1, !dbg !28
  store double %6, double* %2, align 8, !dbg !28
  %7 = load double, double* %2, align 8, !dbg !28
  ret double %7, !dbg !28
}

; Function Attrs: mustprogress nofree willreturn
define internal { double, double } @diffejulia___5715(double %0, double %1, double %differeturn) local_unnamed_addr #3 !dbg !31 {
top:
  %"'de" = alloca double, align 8
  %2 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"'de1" = alloca double, align 8
  %3 = getelementptr double, double* %"'de1", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"'de2" = alloca double, align 8
  %4 = getelementptr double, double* %"'de2", i64 0
  store double 0.000000e+00, double* %4, align 8
  %5 = call {}*** @julia.get_pgcstack() #5
  %6 = fdiv double %0, %1, !dbg !32
  br label %inverttop, !dbg !32

inverttop:                                        ; preds = %top
  store double %differeturn, double* %"'de", align 8
  %7 = load double, double* %"'de", align 8, !dbg !32
  store double 0.000000e+00, double* %"'de", align 8, !dbg !32
  %8 = fdiv fast double %7, %1, !dbg !32
  %9 = load double, double* %"'de1", align 8, !dbg !32
  %10 = fadd fast double %9, %8, !dbg !32
  store double %10, double* %"'de1", align 8, !dbg !32
  %11 = fdiv fast double %7, %1, !dbg !32
  %12 = fdiv fast double %0, %1, !dbg !32
  %13 = fmul fast double %11, %12, !dbg !32
  %14 = fneg fast double %13, !dbg !32
  %15 = load double, double* %"'de2", align 8, !dbg !32
  %16 = fadd fast double %15, %14, !dbg !32
  store double %16, double* %"'de2", align 8, !dbg !32
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  %17 = load double, double* %"'de1", align 8
  %18 = load double, double* %"'de2", align 8
  %19 = insertvalue { double, double } undef, double %17, 0
  %20 = insertvalue { double, double } %19, double %18, 1
  ret { double, double } %20
}

after simplification :
; Function Attrs: mustprogress nosync readnone willreturn
define double @preprocess_julia_cos_5739mustwrap(double %0) local_unnamed_addr #13 {
entry:
  %1 = call double @julia_cos_5739(double %0) #14
  ret double %1
}

; Function Attrs: mustprogress nosync readnone willreturn
define internal double @augmented_julia_cos_5739mustwrap(double %0) local_unnamed_addr #13 {
entry:
  %1 = alloca double, align 8
  %2 = call double @julia_cos_5739(double %0) #14
  store double %2, double* %1, align 8
  %3 = load double, double* %1, align 8
  ret double %3
}

; Function Attrs: mustprogress nosync readnone willreturn
define internal { double } @diffejulia_cos_5739mustwrap(double %0, double %differeturn) local_unnamed_addr #13 {
entry:
  %"'de" = alloca double, align 8
  %1 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %1, align 8
  %"'de1" = alloca double, align 8
  %2 = getelementptr double, double* %"'de1", i64 0
  store double 0.000000e+00, double* %2, align 8
  br label %invertentry

invertentry:                                      ; preds = %entry
  store double %differeturn, double* %"'de", align 8
  %3 = load double, double* %"'de", align 8
  store double 0.000000e+00, double* %"'de", align 8
  %4 = call fast double @llvm.sin.f64(double %0)
  %5 = fneg fast double %4
  %6 = fmul fast double %3, %5
  %7 = load double, double* %"'de1", align 8
  %8 = fadd fast double %7, %6
  store double %8, double* %"'de1", align 8
  %9 = load double, double* %"'de1", align 8
  %10 = insertvalue { double } undef, double %9, 0
  ret { double } %10
}

after simplification :
; Function Attrs: mustprogress nofree willreturn
define double @preprocess_julia___5807(double %0, double %1) local_unnamed_addr #3 !dbg !15 {
top:
  %2 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %3, align 8, !tbaa !8
  %4 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !16
  fence syncscope("singlethread") seq_cst
  %5 = fmul double %0, %1, !dbg !16
  ret double %5, !dbg !16
}

; Function Attrs: mustprogress nofree willreturn
define internal double @augmented_julia___5807(double %0, double %1) local_unnamed_addr #3 !dbg !17 {
top:
  %2 = alloca double, align 8
  %3 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %4, align 8, !tbaa !8, !alias.scope !18, !noalias !21
  %5 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !12, !invariant.load !7, !alias.scope !23, !noalias !26
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !28
  fence syncscope("singlethread") seq_cst
  %6 = fmul double %0, %1, !dbg !28
  store double %6, double* %2, align 8, !dbg !28
  %7 = load double, double* %2, align 8, !dbg !28
  ret double %7, !dbg !28
}

; Function Attrs: mustprogress nofree willreturn
define internal { double } @diffejulia___5807(double %0, double %1, double %differeturn) local_unnamed_addr #3 !dbg !31 {
top:
  %"'de" = alloca double, align 8
  %2 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"'de1" = alloca double, align 8
  %3 = getelementptr double, double* %"'de1", i64 0
  store double 0.000000e+00, double* %3, align 8
  %4 = call {}*** @julia.get_pgcstack() #5
  br label %inverttop, !dbg !32

inverttop:                                        ; preds = %top
  store double %differeturn, double* %"'de", align 8
  %5 = load double, double* %"'de", align 8, !dbg !32
  store double 0.000000e+00, double* %"'de", align 8, !dbg !32
  %6 = fmul fast double %5, %0, !dbg !32
  %7 = load double, double* %"'de1", align 8, !dbg !32
  %8 = fadd fast double %7, %6, !dbg !32
  store double %8, double* %"'de1", align 8, !dbg !32
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  %9 = load double, double* %"'de1", align 8
  %10 = insertvalue { double } undef, double %9, 0
  ret { double } %10
}

after simplification :
; Function Attrs: mustprogress willreturn
define noalias nonnull {} addrspace(10)* @preprocess_julia_vcat_5839(double %0, double %1, double %2, double %3, double %4, double %5) local_unnamed_addr #4 !dbg !46 {
pass.5:
  %6 = call {}*** @julia.get_pgcstack() #5
  %ptls_field13 = getelementptr inbounds {}**, {}*** %6, i64 2
  %7 = bitcast {}*** %ptls_field13 to i64***
  %ptls_load1415 = load i64**, i64*** %7, align 8, !tbaa !8
  %8 = getelementptr inbounds i64*, i64** %ptls_load1415, i64 2
  %safepoint = load i64*, i64** %8, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #5, !dbg !47
  fence syncscope("singlethread") seq_cst
  %9 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 6) #6, !dbg !48
  %10 = bitcast {} addrspace(10)* %9 to double addrspace(13)* addrspace(10)*
  %11 = addrspacecast double addrspace(13)* addrspace(10)* %10 to double addrspace(13)* addrspace(11)*
  %arrayptr16 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %11, align 8, !tbaa !26, !alias.scope !54, !noalias !34, !nonnull !7
  store double %0, double addrspace(13)* %arrayptr16, align 8, !dbg !57, !tbaa !41, !alias.scope !44, !noalias !58
  %memcpy_refined_dst.1 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 1, !dbg !57
  store double %1, double addrspace(13)* %memcpy_refined_dst.1, align 8, !dbg !57, !tbaa !41, !alias.scope !44, !noalias !58
  %memcpy_refined_dst.2 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 2, !dbg !57
  store double %2, double addrspace(13)* %memcpy_refined_dst.2, align 8, !dbg !57, !tbaa !41, !alias.scope !44, !noalias !58
  %memcpy_refined_dst.3 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 3, !dbg !57
  store double %3, double addrspace(13)* %memcpy_refined_dst.3, align 8, !dbg !57, !tbaa !41, !alias.scope !44, !noalias !58
  %memcpy_refined_dst.4 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 4, !dbg !57
  store double %4, double addrspace(13)* %memcpy_refined_dst.4, align 8, !dbg !57, !tbaa !41, !alias.scope !44, !noalias !58
  %memcpy_refined_dst.5 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 5, !dbg !57
  store double %5, double addrspace(13)* %memcpy_refined_dst.5, align 8, !dbg !57, !tbaa !41, !alias.scope !44, !noalias !58
  ret {} addrspace(10)* %9, !dbg !47
}

; Function Attrs: mustprogress willreturn
define internal { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_vcat_5839(double %0, double %1, double %2, double %3, double %4, double %5) local_unnamed_addr #4 !dbg !59 {
pass.5:
  %6 = alloca { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %7 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %6, i32 0, i32 0
  %8 = getelementptr {} addrspace(10)*, {} addrspace(10)** %7, i64 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = call {}*** @julia.get_pgcstack() #6
  %ptls_field13 = getelementptr inbounds {}**, {}*** %9, i64 2
  %10 = bitcast {}*** %ptls_field13 to i64***
  %ptls_load1415 = load i64**, i64*** %10, align 8, !tbaa !8, !alias.scope !60, !noalias !63
  %11 = getelementptr inbounds i64*, i64** %ptls_load1415, i64 2
  %safepoint = load i64*, i64** %11, align 8, !tbaa !12, !invariant.load !7, !alias.scope !65, !noalias !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #6, !dbg !70
  fence syncscope("singlethread") seq_cst
  %12 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 6), !dbg !71
  store {} addrspace(10)* %12, {} addrspace(10)** %7, align 8, !dbg !71
  %13 = bitcast {} addrspace(10)* %12 to i8 addrspace(13)* addrspace(10)*, !dbg !71
  %14 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %13, align 8, !dbg !71
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %14, i8 0, i64 48, i1 false), !dbg !71
  %15 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 noundef 6) #7, !dbg !71
  %"'ipc" = bitcast {} addrspace(10)* %12 to double addrspace(13)* addrspace(10)*
  %16 = bitcast {} addrspace(10)* %15 to double addrspace(13)* addrspace(10)*
  %"'ipc1" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %17 = addrspacecast double addrspace(13)* addrspace(10)* %16 to double addrspace(13)* addrspace(11)*
  %"arrayptr16'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc1", align 8, !tbaa !26, !alias.scope !77, !noalias !82, !nonnull !7
  %arrayptr16 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %17, align 8, !tbaa !26, !alias.scope !84, !noalias !85, !nonnull !7
  store double %0, double addrspace(13)* %arrayptr16, align 8, !dbg !86, !tbaa !41, !alias.scope !87, !noalias !90
  %memcpy_refined_dst.1 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 1, !dbg !86
  store double %1, double addrspace(13)* %memcpy_refined_dst.1, align 8, !dbg !86, !tbaa !41, !alias.scope !87, !noalias !90
  %memcpy_refined_dst.2 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 2, !dbg !86
  store double %2, double addrspace(13)* %memcpy_refined_dst.2, align 8, !dbg !86, !tbaa !41, !alias.scope !87, !noalias !90
  %memcpy_refined_dst.3 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 3, !dbg !86
  store double %3, double addrspace(13)* %memcpy_refined_dst.3, align 8, !dbg !86, !tbaa !41, !alias.scope !87, !noalias !90
  %memcpy_refined_dst.4 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 4, !dbg !86
  store double %4, double addrspace(13)* %memcpy_refined_dst.4, align 8, !dbg !86, !tbaa !41, !alias.scope !87, !noalias !90
  %memcpy_refined_dst.5 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 5, !dbg !86
  store double %5, double addrspace(13)* %memcpy_refined_dst.5, align 8, !dbg !86, !tbaa !41, !alias.scope !87, !noalias !90
  %18 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %6, i32 0, i32 1, !dbg !70
  store {} addrspace(10)* %15, {} addrspace(10)** %18, align 8, !dbg !70
  %19 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %6, i32 0, i32 2, !dbg !70
  store {} addrspace(10)* %12, {} addrspace(10)** %19, align 8, !dbg !70
  %20 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %6, align 8, !dbg !70
  ret { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %20, !dbg !70
}

; Function Attrs: mustprogress willreturn
define internal { double } @diffejulia_vcat_5839(double %0, double %1, double %2, double %3, double %4, double %5, {} addrspace(10)* %6) local_unnamed_addr #4 !dbg !94 {
pass.5:
  %"'de" = alloca double, align 8
  %7 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %8 = call {}*** @julia.get_pgcstack() #7
  %"'ipc" = bitcast {} addrspace(10)* %6 to double addrspace(13)* addrspace(10)*
  %"'ipc1" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr16'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc1", align 8, !tbaa !26, !alias.scope !95, !noalias !98, !nonnull !7
  %"memcpy_refined_dst.1'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr16'ipl", i64 1, !dbg !100
  %"memcpy_refined_dst.2'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr16'ipl", i64 2, !dbg !100
  %"memcpy_refined_dst.3'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr16'ipl", i64 3, !dbg !100
  %"memcpy_refined_dst.4'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr16'ipl", i64 4, !dbg !100
  %"memcpy_refined_dst.5'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr16'ipl", i64 5, !dbg !100
  br label %invertpass.5, !dbg !101

invertpass.5:                                     ; preds = %pass.5
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst.5'ipg", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst.4'ipg", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst.3'ipg", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst.2'ipg", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst.1'ipg", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  %9 = load double, double addrspace(13)* %"arrayptr16'ipl", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  store double 0.000000e+00, double addrspace(13)* %"arrayptr16'ipl", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  %10 = load double, double* %"'de", align 8, !dbg !100
  %11 = fadd fast double %10, %9, !dbg !100
  store double %11, double* %"'de", align 8, !dbg !100
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  %12 = load double, double* %"'de", align 8
  %13 = insertvalue { double } undef, double %12, 0
  ret { double } %13
}

┌ Warning: Using fallback BLAS replacements, performance may be degraded
└ @ Enzyme.Compiler ~/.julia/packages/GPUCompiler/U36Ed/src/utils.jl:59
after simplification :
; Function Attrs: mustprogress willreturn
define noundef nonnull align 16 dereferenceable(40) {} addrspace(10)* @preprocess_julia___5933({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1) local_unnamed_addr #20 !dbg !194 {
top:
  %2 = call {}*** @julia.get_pgcstack() #21
  %ptls_field6 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field6 to i64***
  %ptls_load78 = load i64**, i64*** %3, align 8, !tbaa !29
  %4 = getelementptr inbounds i64*, i64** %ptls_load78, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !33, !invariant.load !28
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #21, !dbg !195
  fence syncscope("singlethread") seq_cst
  %5 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*, !dbg !196
  %arraysize_ptr9 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %5, i64 3, !dbg !196
  %6 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr9 to i64 addrspace(10)*, !dbg !196
  %7 = addrspacecast i64 addrspace(10)* %6 to i64 addrspace(11)*, !dbg !196
  %arraysize = load i64, i64 addrspace(11)* %7, align 8, !dbg !196, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !41, !noalias !44
  %8 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize) #22, !dbg !198
  call fastcc void @julia_gemv__5936({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %8, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1) #21, !dbg !202
  ret {} addrspace(10)* %8, !dbg !197
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia_gemv__5936({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2) unnamed_addr #21 !dbg !216 {
top:
  %3 = call {}*** @julia.get_pgcstack() #22
  %ptls_field159 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field159 to i64***
  %ptls_load160161 = load i64**, i64*** %4, align 8, !tbaa !29
  %5 = getelementptr inbounds i64*, i64** %ptls_load160161, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !33, !invariant.load !28
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #22, !dbg !217
  fence syncscope("singlethread") seq_cst
  %6 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !218
  %arraysize_ptr228 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %6, i64 3, !dbg !218
  %7 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr228 to i64 addrspace(10)*, !dbg !218
  %8 = addrspacecast i64 addrspace(10)* %7 to i64 addrspace(11)*, !dbg !218
  %arraysize = load i64, i64 addrspace(11)* %8, align 8, !dbg !218, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !41, !noalias !44
  %arraysize_ptr11227 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %6, i64 4, !dbg !218
  %9 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr11227 to i64 addrspace(10)*, !dbg !218
  %10 = addrspacecast i64 addrspace(10)* %9 to i64 addrspace(11)*, !dbg !218
  %arraysize12 = load i64, i64 addrspace(11)* %10, align 16, !dbg !218, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !41, !noalias !44
  %11 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !221
  %12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !221
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %12, i64 0, i32 1, !dbg !221
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !221, !tbaa !73, !range !40, !alias.scope !76, !noalias !77
  %.not163 = icmp eq i64 %arraysize12, %arraylen, !dbg !223
  br i1 %.not163, label %L28, label %L22, !dbg !222

L22:                                              ; preds = %top
  %current_task17164 = getelementptr inbounds {}**, {}*** %3, i64 -14, !dbg !225
  %current_task17 = bitcast {}*** %current_task17164 to {}**, !dbg !225
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #23, !dbg !225
  %13 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !225
  %14 = addrspacecast {} addrspace(10)* addrspace(10)* %13 to {} addrspace(10)* addrspace(11)*, !dbg !225
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %14, align 8, !dbg !225, !tbaa !88, !alias.scope !92, !noalias !226
  %15 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %14, i64 1, !dbg !225
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %15, align 8, !dbg !225, !tbaa !88, !alias.scope !92, !noalias !226
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #23, !dbg !225
  %16 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !225
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %16, i64 0, i32 0, !dbg !225
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838887040 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !225, !tbaa !96, !alias.scope !92, !noalias !226
  %.repack166 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %16, i64 0, i32 1, !dbg !225
  store i64 %arraysize12, i64 addrspace(10)* %.repack166, align 8, !dbg !225, !tbaa !96, !alias.scope !92, !noalias !226
  %.repack168 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %16, i64 0, i32 2, !dbg !225
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838886992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack168, align 8, !dbg !225, !tbaa !96, !alias.scope !92, !noalias !226
  %.repack170 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %16, i64 0, i32 3, !dbg !225
  store i64 %arraylen, i64 addrspace(10)* %.repack170, align 8, !dbg !225, !tbaa !96, !alias.scope !92, !noalias !226
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %14 release, align 8, !dbg !225, !tbaa !88, !alias.scope !92, !noalias !226
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct, {} addrspace(10)* nofree nonnull %box) #24, !dbg !225
  %17 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !225
  %18 = addrspacecast i8 addrspace(10)* %17 to i8 addrspace(11)*, !dbg !225
  %19 = getelementptr inbounds i8, i8 addrspace(11)* %18, i64 8, !dbg !225
  %20 = bitcast i8 addrspace(11)* %19 to {} addrspace(10)* addrspace(11)*, !dbg !225
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %20 release, align 8, !dbg !225, !tbaa !88, !alias.scope !92, !noalias !226
  %box20 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #23, !dbg !222
  %21 = bitcast {} addrspace(10)* %box20 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !222
  %22 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %21, i64 0, i64 0, !dbg !222
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %22, align 8, !dbg !222, !tbaa !96, !alias.scope !92, !noalias !226
  %23 = addrspacecast {} addrspace(10)* %box20 to {} addrspace(12)*, !dbg !222
  call void @ijl_throw({} addrspace(12)* %23) #25, !dbg !222
  unreachable, !dbg !222

L28:                                              ; preds = %top
  %24 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !229
  %25 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %24 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !229
  %arraylen_ptr21 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %25, i64 0, i32 1, !dbg !229
  %arraylen22 = load i64, i64 addrspace(11)* %arraylen_ptr21, align 8, !dbg !229, !tbaa !73, !range !40, !alias.scope !76, !noalias !77
  %.not173 = icmp eq i64 %arraysize, %arraylen22, !dbg !231
  br i1 %.not173, label %L38, label %L32, !dbg !230

L32:                                              ; preds = %L28
  %current_task25174 = getelementptr inbounds {}**, {}*** %3, i64 -14, !dbg !233
  %current_task25 = bitcast {}*** %current_task25174 to {}**, !dbg !233
  %newstruct26 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #23, !dbg !233
  %26 = bitcast {} addrspace(10)* %newstruct26 to {} addrspace(10)* addrspace(10)*, !dbg !233
  %27 = addrspacecast {} addrspace(10)* addrspace(10)* %26 to {} addrspace(10)* addrspace(11)*, !dbg !233
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %27, align 8, !dbg !233, !tbaa !88, !alias.scope !92, !noalias !226
  %28 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %27, i64 1, !dbg !233
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %28, align 8, !dbg !233, !tbaa !88, !alias.scope !92, !noalias !226
  %box28 = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #23, !dbg !233
  %29 = bitcast {} addrspace(10)* %box28 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !233
  %.repack176 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %29, i64 0, i32 0, !dbg !233
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838886944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack176, align 8, !dbg !233, !tbaa !96, !alias.scope !92, !noalias !226
  %.repack177 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %29, i64 0, i32 1, !dbg !233
  store i64 %arraysize, i64 addrspace(10)* %.repack177, align 8, !dbg !233, !tbaa !96, !alias.scope !92, !noalias !226
  %.repack179 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %29, i64 0, i32 2, !dbg !233
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838886896 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack179, align 8, !dbg !233, !tbaa !96, !alias.scope !92, !noalias !226
  %.repack181 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %29, i64 0, i32 3, !dbg !233
  store i64 %arraylen22, i64 addrspace(10)* %.repack181, align 8, !dbg !233, !tbaa !96, !alias.scope !92, !noalias !226
  store atomic {} addrspace(10)* %box28, {} addrspace(10)* addrspace(11)* %27 release, align 8, !dbg !233, !tbaa !88, !alias.scope !92, !noalias !226
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct26, {} addrspace(10)* nofree nonnull %box28) #24, !dbg !233
  %30 = bitcast {} addrspace(10)* %newstruct26 to i8 addrspace(10)*, !dbg !233
  %31 = addrspacecast i8 addrspace(10)* %30 to i8 addrspace(11)*, !dbg !233
  %32 = getelementptr inbounds i8, i8 addrspace(11)* %31, i64 8, !dbg !233
  %33 = bitcast i8 addrspace(11)* %32 to {} addrspace(10)* addrspace(11)*, !dbg !233
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %33 release, align 8, !dbg !233, !tbaa !88, !alias.scope !92, !noalias !226
  %box30 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #23, !dbg !230
  %34 = bitcast {} addrspace(10)* %box30 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !230
  %35 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %34, i64 0, i64 0, !dbg !230
  store {} addrspace(10)* %newstruct26, {} addrspace(10)* addrspace(10)* %35, align 8, !dbg !230, !tbaa !96, !alias.scope !92, !noalias !226
  %36 = addrspacecast {} addrspace(10)* %box30 to {} addrspace(12)*, !dbg !230
  call void @ijl_throw({} addrspace(12)* %36) #25, !dbg !230
  unreachable, !dbg !230

L38:                                              ; preds = %L28
  %.not184 = icmp eq i64 %arraysize, 0, !dbg !234
  br i1 %.not184, label %common.ret, label %L41, !dbg !235

common.ret:                                       ; preds = %L152.critedge, %L49.L61_crit_edge, %L38
  ret void, !dbg !236

L41:                                              ; preds = %L38
  %.not185 = icmp eq i64 %arraysize12, 0, !dbg !237
  br i1 %.not185, label %L49.L61_crit_edge, label %L152.critedge, !dbg !238

L49.L61_crit_edge:                                ; preds = %L41
  %37 = bitcast {} addrspace(10)* %0 to i8 addrspace(13)* addrspace(10)*, !dbg !239
  %38 = addrspacecast i8 addrspace(13)* addrspace(10)* %37 to i8 addrspace(13)* addrspace(11)*, !dbg !239
  %arrayptr189.pre257 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %38, align 16, !dbg !239, !tbaa !106, !alias.scope !242, !noalias !77
  %39 = shl nuw i64 %arraysize, 3, !dbg !243
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr189.pre257, i8 noundef 0, i64 %39, i1 noundef false) #22, !dbg !239, !tbaa !188, !alias.scope !92, !noalias !226
  br label %common.ret, !dbg !236

L152.critedge:                                    ; preds = %L41
  call fastcc void @julia_gemv__5977({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0) #22, !dbg !244
  br label %common.ret
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia_gemv__5977({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2) unnamed_addr #22 !dbg !301 {
top:
  %3 = call {}*** @julia.get_pgcstack() #24
  %ptls_field134 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field134 to i64***
  %ptls_load135136 = load i64**, i64*** %4, align 8, !tbaa !29
  %5 = getelementptr inbounds i64*, i64** %ptls_load135136, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !33, !invariant.load !28
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #24, !dbg !302
  fence syncscope("singlethread") seq_cst
  %6 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*, !dbg !303
  %arraysize_ptr137 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %6, i64 3, !dbg !303
  %7 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr137 to i64 addrspace(10)*, !dbg !303
  %8 = addrspacecast i64 addrspace(10)* %7 to i64 addrspace(11)*, !dbg !303
  %arraysize = load i64, i64 addrspace(11)* %8, align 8, !dbg !303, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !41, !noalias !44
  %arraysize_ptr2138 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %6, i64 4, !dbg !303
  %9 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr2138 to i64 addrspace(10)*, !dbg !303
  %10 = addrspacecast i64 addrspace(10)* %9 to i64 addrspace(11)*, !dbg !303
  %arraysize3 = load i64, i64 addrspace(11)* %10, align 16, !dbg !303, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !41, !noalias !44
  %11 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !305
  %12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !305
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %12, i64 0, i32 1, !dbg !305
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !305, !tbaa !73, !range !40, !alias.scope !76, !noalias !77
  %13 = icmp ne i64 %arraylen, %arraysize3, !dbg !307
  %14 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !306
  %15 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %14 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !306
  %arraylen_ptr131 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %15, i64 0, i32 1, !dbg !306
  %arraylen132 = load i64, i64 addrspace(11)* %arraylen_ptr131, align 8, !dbg !306
  %16 = icmp ne i64 %arraylen132, %arraysize, !dbg !306
  %value_phi.in = select i1 %13, i1 true, i1 %16, !dbg !306
  br i1 %value_phi.in, label %L17, label %L69, !dbg !306

L17:                                              ; preds = %top
  %current_task12144 = getelementptr inbounds {}**, {}*** %3, i64 -14, !dbg !309
  %current_task12 = bitcast {}*** %current_task12144 to {}**, !dbg !309
  %newstruct13 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #25, !dbg !309
  %17 = bitcast {} addrspace(10)* %newstruct13 to {} addrspace(10)* addrspace(10)*, !dbg !309
  %18 = addrspacecast {} addrspace(10)* addrspace(10)* %17 to {} addrspace(10)* addrspace(11)*, !dbg !309
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %18, align 8, !dbg !309, !tbaa !88, !alias.scope !92, !noalias !311
  %19 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %18, i64 1, !dbg !309
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %19, align 8, !dbg !309, !tbaa !88, !alias.scope !92, !noalias !311
  %box = call noalias nonnull dereferenceable(56) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 noundef 56, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4362917456 to {}*) to {} addrspace(10)*)) #25, !dbg !309
  %20 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !309
  %.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 0, !dbg !309
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274512 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  %.repack146.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 1, i64 0, !dbg !309
  store i64 %arraysize, i64 addrspace(10)* %.repack146.repack, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  %.repack146.repack156 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 1, i64 1, !dbg !309
  store i64 %arraysize3, i64 addrspace(10)* %.repack146.repack156, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  %.repack148 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 2, !dbg !309
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274480 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack148, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  %.repack150 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 3, !dbg !309
  store i64 %arraylen, i64 addrspace(10)* %.repack150, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  %.repack152 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 4, !dbg !309
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274432 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack152, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  %.repack154 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 5, !dbg !309
  store i64 %arraylen132, i64 addrspace(10)* %.repack154, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %18 release, align 8, !dbg !309, !tbaa !88, !alias.scope !92, !noalias !311
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct13, {} addrspace(10)* nofree nonnull %box) #26, !dbg !309
  %21 = bitcast {} addrspace(10)* %newstruct13 to i8 addrspace(10)*, !dbg !309
  %22 = addrspacecast i8 addrspace(10)* %21 to i8 addrspace(11)*, !dbg !309
  %23 = getelementptr inbounds i8, i8 addrspace(11)* %22, i64 8, !dbg !309
  %24 = bitcast i8 addrspace(11)* %23 to {} addrspace(10)* addrspace(11)*, !dbg !309
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %24 release, align 8, !dbg !309, !tbaa !88, !alias.scope !92, !noalias !311
  %box16 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #25, !dbg !310
  %25 = bitcast {} addrspace(10)* %box16 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !310
  %26 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %25, i64 0, i64 0, !dbg !310
  store {} addrspace(10)* %newstruct13, {} addrspace(10)* addrspace(10)* %26, align 8, !dbg !310, !tbaa !96, !alias.scope !92, !noalias !311
  %27 = addrspacecast {} addrspace(10)* %box16 to {} addrspace(12)*, !dbg !310
  call void @ijl_throw({} addrspace(12)* %27) #27, !dbg !310
  unreachable, !dbg !310

L69:                                              ; preds = %top
  %28 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !314
  %29 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %28) #28, !dbg !314
  %30 = bitcast {}* %29 to double**, !dbg !314
  %arrayptr215 = load double*, double** %30, align 8, !dbg !314, !tbaa !106, !alias.scope !76, !noalias !77, !nonnull !28
  %31 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !318
  %32 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %31) #28, !dbg !318
  %33 = bitcast {}* %32 to double**, !dbg !318
  %arrayptr50216 = load double*, double** %33, align 8, !dbg !318, !tbaa !106, !alias.scope !76, !noalias !77, !nonnull !28
  %arrayptr50216274 = bitcast double* %arrayptr50216 to i8*, !dbg !322
  %34 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !322
  %35 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %34) #28, !dbg !322
  %36 = bitcast {}* %35 to double**, !dbg !322
  %arrayptr52218 = load double*, double** %36, align 8, !dbg !322, !tbaa !33, !invariant.load !28, !alias.scope !41, !noalias !44, !nonnull !28
  %.not203 = icmp eq i64 %arraysize, 0, !dbg !325
  %37 = select i1 %.not203, i64 1, i64 %arraysize, !dbg !329
  %38 = call i64 @llvm.smax.i64(i64 %arraysize, i64 %37) #24, !dbg !329
  %39 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %0, {} addrspace(10)* nonnull %1, {} addrspace(10)* nonnull %2) #24, !dbg !330
  %40 = trunc i64 %arraysize to i32, !dbg !330
  %41 = trunc i64 %arraysize3 to i32, !dbg !330
  %42 = trunc i64 %38 to i32, !dbg !330
  %43 = icmp sgt i32 %40, -1, !dbg !330
  %44 = icmp sgt i32 %41, -1, !dbg !330
  %45 = call i32 @llvm.smax.i32(i32 %40, i32 noundef 1) #24, !dbg !330
  %46 = icmp sle i32 %45, %42, !dbg !330
  %47 = select i1 %46, i1 %44, i1 false, !dbg !330
  %48 = select i1 %47, i1 %43, i1 false, !dbg !330
  call void @llvm.assume(i1 %48), !dbg !330
  %49 = icmp eq i32 %40, 0, !dbg !330
  %50 = icmp eq i32 %41, 0, !dbg !330
  %51 = or i1 %49, %50, !dbg !330
  br i1 %51, label %dgemv_64_.exit, label %52, !dbg !330

52:                                               ; preds = %L69
  %53 = icmp sgt i32 %40, 0, !dbg !330
  br i1 %53, label %.preheader, label %.loopexit273, !dbg !330

.preheader:                                       ; preds = %52
  %54 = shl i64 %arraysize, 3, !dbg !330
  %55 = and i64 %54, 34359738360, !dbg !330
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %arrayptr50216274, i8 noundef 0, i64 %55, i1 noundef false) #24, !dbg !330, !tbaa !139, !noalias !331
  br label %.loopexit273, !dbg !330

.loopexit273:                                     ; preds = %52, %.preheader
  %56 = icmp sgt i32 %41, 0, !dbg !330
  br i1 %56, label %57, label %dgemv_64_.exit, !dbg !330

57:                                               ; preds = %.loopexit273
  %58 = icmp sgt i32 %40, 0, !dbg !330
  %sext = shl i64 %38, 32, !dbg !330
  %59 = ashr exact i64 %sext, 32, !dbg !330
  %60 = and i64 %arraysize3, 4294967295, !dbg !330
  %61 = and i64 %arraysize, 4294967295, !dbg !330
  br label %62, !dbg !330

62:                                               ; preds = %.loopexit269, %57
  %iv = phi i64 [ %iv.next, %.loopexit269 ], [ 0, %57 ], !dbg !330
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !330
  %63 = getelementptr inbounds double, double* %arrayptr215, i64 %iv, !dbg !330
  %64 = load double, double* %63, align 8, !dbg !330, !tbaa !139
  br i1 %58, label %65, label %.loopexit269, !dbg !330

65:                                               ; preds = %62
  %66 = mul nsw i64 %iv, %59, !dbg !330
  br label %67, !dbg !330

67:                                               ; preds = %67, %65
  %iv1 = phi i64 [ %iv.next2, %67 ], [ 0, %65 ], !dbg !330
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !330
  %68 = add nsw i64 %iv1, %66, !dbg !330
  %69 = getelementptr inbounds double, double* %arrayptr52218, i64 %68, !dbg !330
  %70 = load double, double* %69, align 8, !dbg !330, !tbaa !139
  %71 = getelementptr inbounds double, double* %arrayptr50216, i64 %iv1, !dbg !330
  %72 = load double, double* %71, align 8, !dbg !330, !tbaa !139
  %73 = call double @llvm.fmuladd.f64(double %64, double %70, double %72) #24, !dbg !330
  store double %73, double* %71, align 8, !dbg !330, !tbaa !139, !noalias !331
  %74 = icmp eq i64 %iv.next2, %61, !dbg !330
  br i1 %74, label %.loopexit269.loopexit, label %67, !dbg !330, !llvm.loop !332

.loopexit269.loopexit:                            ; preds = %67
  br label %.loopexit269, !dbg !330

.loopexit269:                                     ; preds = %.loopexit269.loopexit, %62
  %75 = icmp eq i64 %iv.next, %60, !dbg !330
  br i1 %75, label %dgemv_64_.exit.loopexit, label %62, !dbg !330, !llvm.loop !333

dgemv_64_.exit.loopexit:                          ; preds = %.loopexit269
  br label %dgemv_64_.exit, !dbg !330

dgemv_64_.exit:                                   ; preds = %dgemv_64_.exit.loopexit, %.loopexit273, %L69
  call void @llvm.julia.gc_preserve_end(token %39) #24, !dbg !330
  ret void, !dbg !334
}

; Function Attrs: mustprogress willreturn
define internal fastcc { double*, double*, double*, i64, i64, double*, double* } @augmented_julia_gemv__5977({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") unnamed_addr #22 !dbg !335 {
top:
  %3 = alloca { double*, double*, double*, i64, i64, double*, double* }, align 8
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %_cache = alloca double*, align 8
  %_cache10 = alloca double*, align 8
  %4 = call {}*** @julia.get_pgcstack() #24
  %ptls_field134 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field134 to i64***
  %ptls_load135136 = load i64**, i64*** %5, align 8, !tbaa !29, !alias.scope !336, !noalias !339
  %6 = getelementptr inbounds i64*, i64** %ptls_load135136, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !33, !invariant.load !28, !alias.scope !341, !noalias !344
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #24, !dbg !346
  fence syncscope("singlethread") seq_cst
  %7 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*, !dbg !347
  %arraysize_ptr137 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 3, !dbg !347
  %8 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr137 to i64 addrspace(10)*, !dbg !347
  %9 = addrspacecast i64 addrspace(10)* %8 to i64 addrspace(11)*, !dbg !347
  %arraysize = load i64, i64 addrspace(11)* %9, align 8, !dbg !347, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !349, !noalias !352
  %10 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 3, !dbg !347
  store i64 %arraysize, i64* %10, align 8, !dbg !347
  %arraysize_ptr2138 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 4, !dbg !347
  %11 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr2138 to i64 addrspace(10)*, !dbg !347
  %12 = addrspacecast i64 addrspace(10)* %11 to i64 addrspace(11)*, !dbg !347
  %arraysize3 = load i64, i64 addrspace(11)* %12, align 16, !dbg !347, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !349, !noalias !352
  %13 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 4, !dbg !354
  store i64 %arraysize3, i64* %13, align 8, !dbg !354
  %14 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !354
  %15 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %14 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !354
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %15, i64 0, i32 1, !dbg !354
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !354, !tbaa !73, !range !40, !alias.scope !356, !noalias !359
  %16 = icmp ne i64 %arraylen, %arraysize3, !dbg !361
  %17 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !355
  %18 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !355
  %arraylen_ptr131 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %18, i64 0, i32 1, !dbg !355
  %arraylen132 = load i64, i64 addrspace(11)* %arraylen_ptr131, align 8, !dbg !355, !alias.scope !363, !noalias !366
  %19 = icmp ne i64 %arraylen132, %arraysize, !dbg !355
  %value_phi.in = select i1 %16, i1 true, i1 %19, !dbg !355
  br i1 %value_phi.in, label %L17, label %L69, !dbg !355

L17:                                              ; preds = %top
  %current_task12144 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !368
  %current_task12 = bitcast {}*** %current_task12144 to {}**, !dbg !368
  %newstruct13 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #25, !dbg !368
  %20 = bitcast {} addrspace(10)* %newstruct13 to {} addrspace(10)* addrspace(10)*, !dbg !368
  %21 = addrspacecast {} addrspace(10)* addrspace(10)* %20 to {} addrspace(10)* addrspace(11)*, !dbg !368
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %21, align 8, !dbg !368, !tbaa !88, !alias.scope !92, !noalias !370
  %22 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %21, i64 1, !dbg !368
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %22, align 8, !dbg !368, !tbaa !88, !alias.scope !92, !noalias !370
  %box = call noalias nonnull dereferenceable(56) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 noundef 56, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4362917456 to {}*) to {} addrspace(10)*)) #25, !dbg !368
  %23 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !368
  %.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 0, !dbg !368
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274512 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  %.repack146.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 1, i64 0, !dbg !368
  store i64 %arraysize, i64 addrspace(10)* %.repack146.repack, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  %.repack146.repack156 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 1, i64 1, !dbg !368
  store i64 %arraysize3, i64 addrspace(10)* %.repack146.repack156, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  %.repack148 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 2, !dbg !368
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274480 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack148, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  %.repack150 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 3, !dbg !368
  store i64 %arraylen, i64 addrspace(10)* %.repack150, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  %.repack152 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 4, !dbg !368
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4859274432 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack152, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  %.repack154 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 5, !dbg !368
  store i64 %arraylen132, i64 addrspace(10)* %.repack154, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %21 release, align 8, !dbg !368, !tbaa !88, !alias.scope !92, !noalias !370
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct13, {} addrspace(10)* nofree nonnull %box) #26, !dbg !368
  %24 = bitcast {} addrspace(10)* %newstruct13 to i8 addrspace(10)*, !dbg !368
  %25 = addrspacecast i8 addrspace(10)* %24 to i8 addrspace(11)*, !dbg !368
  %26 = getelementptr inbounds i8, i8 addrspace(11)* %25, i64 8, !dbg !368
  %27 = bitcast i8 addrspace(11)* %26 to {} addrspace(10)* addrspace(11)*, !dbg !368
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %27 release, align 8, !dbg !368, !tbaa !88, !alias.scope !92, !noalias !370
  %box16 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #25, !dbg !369
  %28 = bitcast {} addrspace(10)* %box16 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !369
  %29 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %28, i64 0, i64 0, !dbg !369
  store {} addrspace(10)* %newstruct13, {} addrspace(10)* addrspace(10)* %29, align 8, !dbg !369, !tbaa !96, !alias.scope !92, !noalias !370
  %30 = addrspacecast {} addrspace(10)* %box16 to {} addrspace(12)*, !dbg !369
  call void @ijl_throw({} addrspace(12)* %30) #27, !dbg !369
  unreachable, !dbg !369

L69:                                              ; preds = %top
  %"'ipc9" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !373
  %31 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !373
  %32 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc9"), !dbg !373
  %33 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %31) #28, !dbg !373
  %"'ipc8" = bitcast {}* %32 to double**, !dbg !373
  %34 = bitcast {}* %33 to double**, !dbg !373
  %"arrayptr215'ipl" = load double*, double** %"'ipc8", align 8, !dbg !373, !tbaa !106, !alias.scope !377, !noalias !378, !nonnull !28
  %35 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 2, !dbg !373
  store double* %"arrayptr215'ipl", double** %35, align 8, !dbg !373
  %arrayptr215 = load double*, double** %34, align 8, !dbg !373, !tbaa !106, !alias.scope !356, !noalias !359, !nonnull !28
  %"'ipc7" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !379
  %36 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !379
  %37 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc7"), !dbg !379
  %38 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %36) #28, !dbg !379
  %"'ipc6" = bitcast {}* %37 to double**, !dbg !379
  %39 = bitcast {}* %38 to double**, !dbg !379
  %"arrayptr50216'ipl" = load double*, double** %"'ipc6", align 8, !dbg !379, !tbaa !106, !alias.scope !383, !noalias !384, !nonnull !28
  %40 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 1, !dbg !379
  store double* %"arrayptr50216'ipl", double** %40, align 8, !dbg !379
  %arrayptr50216 = load double*, double** %39, align 8, !dbg !379, !tbaa !106, !alias.scope !385, !noalias !386, !nonnull !28
  %"arrayptr50216274'ipc" = bitcast double* %"arrayptr50216'ipl" to i8*, !dbg !387
  %arrayptr50216274 = bitcast double* %arrayptr50216 to i8*, !dbg !387
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !387
  %41 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !387
  %42 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !387
  %43 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %41) #28, !dbg !387
  %"'ipc" = bitcast {}* %42 to double**, !dbg !387
  %44 = bitcast {}* %43 to double**, !dbg !387
  %"arrayptr52218'ipl" = load double*, double** %"'ipc", align 8, !dbg !387, !tbaa !33, !alias.scope !390, !noalias !391, !nonnull !28
  %45 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 0, !dbg !387
  store double* %"arrayptr52218'ipl", double** %45, align 8, !dbg !387
  %arrayptr52218 = load double*, double** %44, align 8, !dbg !387, !tbaa !33, !invariant.load !28, !alias.scope !349, !noalias !352, !nonnull !28
  %.not203 = icmp eq i64 %arraysize, 0, !dbg !392
  %46 = select i1 %.not203, i64 1, i64 %arraysize, !dbg !396
  %47 = call i64 @llvm.smax.i64(i64 %arraysize, i64 %46) #24, !dbg !396
  %48 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'", {} addrspace(10)* %1, {} addrspace(10)* %"'1", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !397
  %49 = trunc i64 %arraysize to i32, !dbg !397
  %50 = trunc i64 %arraysize3 to i32, !dbg !397
  %51 = trunc i64 %47 to i32, !dbg !397
  %52 = icmp sgt i32 %49, -1, !dbg !397
  %53 = icmp sgt i32 %50, -1, !dbg !397
  %54 = call i32 @llvm.smax.i32(i32 %49, i32 noundef 1) #24, !dbg !397
  %55 = icmp sle i32 %54, %51, !dbg !397
  %56 = select i1 %55, i1 %53, i1 false, !dbg !397
  %57 = select i1 %56, i1 %52, i1 false, !dbg !397
  call void @llvm.assume(i1 %57), !dbg !397
  %58 = icmp eq i32 %49, 0, !dbg !397
  %59 = icmp eq i32 %50, 0, !dbg !397
  %60 = or i1 %58, %59, !dbg !397
  br i1 %60, label %dgemv_64_.exit, label %61, !dbg !397

61:                                               ; preds = %L69
  %62 = icmp sgt i32 %49, 0, !dbg !397
  br i1 %62, label %.preheader, label %.loopexit273, !dbg !397

.preheader:                                       ; preds = %61
  %63 = shl i64 %arraysize, 3, !dbg !397
  %64 = and i64 %63, 34359738360, !dbg !397
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %arrayptr50216274, i8 noundef 0, i64 %64, i1 noundef false) #24, !dbg !397, !tbaa !139, !noalias !398
  br label %.loopexit273, !dbg !397

.loopexit273:                                     ; preds = %.preheader, %61
  %65 = icmp sgt i32 %50, 0, !dbg !397
  br i1 %65, label %66, label %dgemv_64_.exit, !dbg !397

66:                                               ; preds = %.loopexit273
  %67 = icmp sgt i32 %49, 0, !dbg !397
  %sext = shl i64 %47, 32, !dbg !397
  %68 = ashr exact i64 %sext, 32, !dbg !397
  %69 = and i64 %arraysize3, 4294967295, !dbg !397
  %70 = and i64 %arraysize, 4294967295, !dbg !397
  %71 = add nsw i64 %69, -1, !dbg !397
  %72 = add nsw i64 %70, -1, !dbg !397
  %73 = add nuw i64 %71, 1, !dbg !397
  %74 = mul nuw i64 %73, 8, !dbg !397
  %75 = call noalias nonnull i8* @malloc(i64 %74), !dbg !397
  %_malloccache = bitcast i8* %75 to double*, !dbg !397
  %76 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 5, !dbg !397
  store double* %_malloccache, double** %76, align 8, !dbg !397
  store double* %_malloccache, double** %_cache, align 8, !dbg !397, !invariant.group !399
  %77 = add nuw i64 %72, 1, !dbg !397
  %78 = mul nuw nsw i64 %77, %73, !dbg !397
  %79 = mul nuw i64 %78, 8, !dbg !397
  %80 = call noalias nonnull i8* @malloc(i64 %79), !dbg !397
  %_malloccache11 = bitcast i8* %80 to double*, !dbg !397
  %81 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 6, !dbg !397
  store double* %_malloccache11, double** %81, align 8, !dbg !397
  store double* %_malloccache11, double** %_cache10, align 8, !dbg !397, !invariant.group !400
  br label %82, !dbg !397

82:                                               ; preds = %.loopexit269, %66
  %iv = phi i64 [ %iv.next, %.loopexit269 ], [ 0, %66 ], !dbg !397
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !397
  %83 = getelementptr inbounds double, double* %arrayptr215, i64 %iv, !dbg !397
  %84 = load double, double* %83, align 8, !dbg !397, !tbaa !139, !alias.scope !401, !noalias !404
  %85 = load double*, double** %_cache, align 8, !dbg !397, !dereferenceable !406, !invariant.group !399
  %86 = getelementptr inbounds double, double* %85, i64 %iv, !dbg !397
  store double %84, double* %86, align 8, !dbg !397, !tbaa !139, !invariant.group !407
  br i1 %67, label %87, label %.loopexit269, !dbg !397

87:                                               ; preds = %82
  %88 = mul nsw i64 %iv, %68, !dbg !397
  br label %89, !dbg !397

89:                                               ; preds = %89, %87
  %iv1 = phi i64 [ %iv.next2, %89 ], [ 0, %87 ], !dbg !397
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !397
  %90 = add nsw i64 %iv1, %88, !dbg !397
  %91 = getelementptr inbounds double, double* %arrayptr52218, i64 %90, !dbg !397
  %92 = load double, double* %91, align 8, !dbg !397, !tbaa !139, !alias.scope !408, !noalias !411
  %93 = getelementptr inbounds double, double* %arrayptr50216, i64 %iv1, !dbg !397
  %94 = load double, double* %93, align 8, !dbg !397, !tbaa !139, !alias.scope !413, !noalias !416
  %95 = call double @llvm.fmuladd.f64(double %84, double %92, double %94) #24, !dbg !397
  store double %95, double* %93, align 8, !dbg !397, !tbaa !139, !alias.scope !413, !noalias !418
  %96 = load double*, double** %_cache10, align 8, !dbg !397, !dereferenceable !406, !invariant.group !400
  %97 = mul nuw nsw i64 %77, %73, !dbg !397
  %98 = mul nuw nsw i64 %iv, %77, !dbg !397
  %99 = add nuw nsw i64 %iv1, %98, !dbg !397
  %100 = getelementptr inbounds double, double* %96, i64 %99, !dbg !397
  store double %92, double* %100, align 8, !dbg !397, !tbaa !139, !invariant.group !421
  %101 = icmp eq i64 %iv.next2, %70, !dbg !397
  br i1 %101, label %.loopexit269.loopexit, label %89, !dbg !397, !llvm.loop !422

.loopexit269.loopexit:                            ; preds = %89
  br label %.loopexit269, !dbg !397

.loopexit269:                                     ; preds = %.loopexit269.loopexit, %82
  %102 = icmp eq i64 %iv.next, %69, !dbg !397
  br i1 %102, label %dgemv_64_.exit.loopexit, label %82, !dbg !397, !llvm.loop !423

dgemv_64_.exit.loopexit:                          ; preds = %.loopexit269
  br label %dgemv_64_.exit, !dbg !397

dgemv_64_.exit:                                   ; preds = %dgemv_64_.exit.loopexit, %.loopexit273, %L69
  call void @llvm.julia.gc_preserve_end(token %48) #24, !dbg !397
  %103 = load { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, align 8, !dbg !424
  ret { double*, double*, double*, i64, i64, double*, double* } %103, !dbg !424
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } @augmented_julia_gemv__5936({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") unnamed_addr #21 !dbg !369 {
top:
  %3 = alloca { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, align 8
  %4 = call {}*** @julia.get_pgcstack() #24
  %ptls_field159 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field159 to i64***
  %ptls_load160161 = load i64**, i64*** %5, align 8, !tbaa !29, !alias.scope !370, !noalias !373
  %6 = getelementptr inbounds i64*, i64** %ptls_load160161, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !33, !invariant.load !28, !alias.scope !375, !noalias !378
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #24, !dbg !380
  fence syncscope("singlethread") seq_cst
  %7 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !381
  %arraysize_ptr228 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 3, !dbg !381
  %8 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr228 to i64 addrspace(10)*, !dbg !381
  %9 = addrspacecast i64 addrspace(10)* %8 to i64 addrspace(11)*, !dbg !381
  %arraysize = load i64, i64 addrspace(11)* %9, align 8, !dbg !381, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !384, !noalias !387
  %10 = getelementptr inbounds { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }* %3, i32 0, i32 1, !dbg !381
  store i64 %arraysize, i64* %10, align 8, !dbg !381
  %arraysize_ptr11227 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 4, !dbg !381
  %11 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr11227 to i64 addrspace(10)*, !dbg !381
  %12 = addrspacecast i64 addrspace(10)* %11 to i64 addrspace(11)*, !dbg !381
  %arraysize12 = load i64, i64 addrspace(11)* %12, align 16, !dbg !381, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !384, !noalias !387
  %13 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !389
  %14 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %13 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !389
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %14, i64 0, i32 1, !dbg !389
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !389, !tbaa !73, !range !40, !alias.scope !391, !noalias !394
  %.not163 = icmp eq i64 %arraysize12, %arraylen, !dbg !396
  br i1 %.not163, label %L28, label %L22, !dbg !390

L22:                                              ; preds = %top
  %current_task17164 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !398
  %current_task17 = bitcast {}*** %current_task17164 to {}**, !dbg !398
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #25, !dbg !398
  %15 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !398
  %16 = addrspacecast {} addrspace(10)* addrspace(10)* %15 to {} addrspace(10)* addrspace(11)*, !dbg !398
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %16, align 8, !dbg !398, !tbaa !88, !alias.scope !92, !noalias !399
  %17 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %16, i64 1, !dbg !398
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %17, align 8, !dbg !398, !tbaa !88, !alias.scope !92, !noalias !399
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #25, !dbg !398
  %18 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !398
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %18, i64 0, i32 0, !dbg !398
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838887040 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !398, !tbaa !96, !alias.scope !92, !noalias !399
  %.repack166 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %18, i64 0, i32 1, !dbg !398
  store i64 %arraysize12, i64 addrspace(10)* %.repack166, align 8, !dbg !398, !tbaa !96, !alias.scope !92, !noalias !399
  %.repack168 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %18, i64 0, i32 2, !dbg !398
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838886992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack168, align 8, !dbg !398, !tbaa !96, !alias.scope !92, !noalias !399
  %.repack170 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %18, i64 0, i32 3, !dbg !398
  store i64 %arraylen, i64 addrspace(10)* %.repack170, align 8, !dbg !398, !tbaa !96, !alias.scope !92, !noalias !399
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %16 release, align 8, !dbg !398, !tbaa !88, !alias.scope !92, !noalias !399
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct, {} addrspace(10)* nofree nonnull %box) #26, !dbg !398
  %19 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !398
  %20 = addrspacecast i8 addrspace(10)* %19 to i8 addrspace(11)*, !dbg !398
  %21 = getelementptr inbounds i8, i8 addrspace(11)* %20, i64 8, !dbg !398
  %22 = bitcast i8 addrspace(11)* %21 to {} addrspace(10)* addrspace(11)*, !dbg !398
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %22 release, align 8, !dbg !398, !tbaa !88, !alias.scope !92, !noalias !399
  %box20 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #25, !dbg !390
  %23 = bitcast {} addrspace(10)* %box20 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !390
  %24 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %23, i64 0, i64 0, !dbg !390
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %24, align 8, !dbg !390, !tbaa !96, !alias.scope !92, !noalias !399
  %25 = addrspacecast {} addrspace(10)* %box20 to {} addrspace(12)*, !dbg !390
  call void @ijl_throw({} addrspace(12)* %25) #27, !dbg !390
  unreachable, !dbg !390

L28:                                              ; preds = %top
  %26 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !402
  %27 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %26 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !402
  %arraylen_ptr21 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %27, i64 0, i32 1, !dbg !402
  %arraylen22 = load i64, i64 addrspace(11)* %arraylen_ptr21, align 8, !dbg !402, !tbaa !73, !range !40, !alias.scope !404, !noalias !407
  %.not173 = icmp eq i64 %arraysize, %arraylen22, !dbg !409
  br i1 %.not173, label %L38, label %L32, !dbg !403

L32:                                              ; preds = %L28
  %current_task25174 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !411
  %current_task25 = bitcast {}*** %current_task25174 to {}**, !dbg !411
  %newstruct26 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724841280 to {}*) to {} addrspace(10)*)) #25, !dbg !411
  %28 = bitcast {} addrspace(10)* %newstruct26 to {} addrspace(10)* addrspace(10)*, !dbg !411
  %29 = addrspacecast {} addrspace(10)* addrspace(10)* %28 to {} addrspace(10)* addrspace(11)*, !dbg !411
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %29, align 8, !dbg !411, !tbaa !88, !alias.scope !92, !noalias !399
  %30 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %29, i64 1, !dbg !411
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %30, align 8, !dbg !411, !tbaa !88, !alias.scope !92, !noalias !399
  %box28 = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4751637840 to {}*) to {} addrspace(10)*)) #25, !dbg !411
  %31 = bitcast {} addrspace(10)* %box28 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !411
  %.repack176 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %31, i64 0, i32 0, !dbg !411
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838886944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack176, align 8, !dbg !411, !tbaa !96, !alias.scope !92, !noalias !399
  %.repack177 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %31, i64 0, i32 1, !dbg !411
  store i64 %arraysize, i64 addrspace(10)* %.repack177, align 8, !dbg !411, !tbaa !96, !alias.scope !92, !noalias !399
  %.repack179 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %31, i64 0, i32 2, !dbg !411
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4838886896 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack179, align 8, !dbg !411, !tbaa !96, !alias.scope !92, !noalias !399
  %.repack181 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %31, i64 0, i32 3, !dbg !411
  store i64 %arraylen22, i64 addrspace(10)* %.repack181, align 8, !dbg !411, !tbaa !96, !alias.scope !92, !noalias !399
  store atomic {} addrspace(10)* %box28, {} addrspace(10)* addrspace(11)* %29 release, align 8, !dbg !411, !tbaa !88, !alias.scope !92, !noalias !399
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct26, {} addrspace(10)* nofree nonnull %box28) #26, !dbg !411
  %32 = bitcast {} addrspace(10)* %newstruct26 to i8 addrspace(10)*, !dbg !411
  %33 = addrspacecast i8 addrspace(10)* %32 to i8 addrspace(11)*, !dbg !411
  %34 = getelementptr inbounds i8, i8 addrspace(11)* %33, i64 8, !dbg !411
  %35 = bitcast i8 addrspace(11)* %34 to {} addrspace(10)* addrspace(11)*, !dbg !411
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %35 release, align 8, !dbg !411, !tbaa !88, !alias.scope !92, !noalias !399
  %box30 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #25, !dbg !403
  %36 = bitcast {} addrspace(10)* %box30 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !403
  %37 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %36, i64 0, i64 0, !dbg !403
  store {} addrspace(10)* %newstruct26, {} addrspace(10)* addrspace(10)* %37, align 8, !dbg !403, !tbaa !96, !alias.scope !92, !noalias !399
  %38 = addrspacecast {} addrspace(10)* %box30 to {} addrspace(12)*, !dbg !403
  call void @ijl_throw({} addrspace(12)* %38) #27, !dbg !403
  unreachable, !dbg !403

L38:                                              ; preds = %L28
  %.not184 = icmp eq i64 %arraysize, 0, !dbg !412
  br i1 %.not184, label %common.ret, label %L41, !dbg !413

common.ret:                                       ; preds = %L152.critedge, %L49.L61_crit_edge, %L38
  %39 = load { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }* %3, align 8, !dbg !414
  ret { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %39, !dbg !414

L41:                                              ; preds = %L38
  %.not185 = icmp eq i64 %arraysize12, 0, !dbg !415
  %40 = getelementptr inbounds { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }* %3, i32 0, i32 2, !dbg !416
  store i1 %.not185, i1* %40, align 1, !dbg !416
  br i1 %.not185, label %L49.L61_crit_edge, label %L152.critedge, !dbg !416

L49.L61_crit_edge:                                ; preds = %L41
  %"'ipc" = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !417
  %41 = bitcast {} addrspace(10)* %0 to i8 addrspace(13)* addrspace(10)*, !dbg !417
  %"'ipc3" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc" to i8 addrspace(13)* addrspace(11)*, !dbg !417
  %42 = addrspacecast i8 addrspace(13)* addrspace(10)* %41 to i8 addrspace(13)* addrspace(11)*, !dbg !417
  %"arrayptr189.pre257'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc3", align 16, !dbg !417, !tbaa !106, !alias.scope !420, !noalias !423
  %arrayptr189.pre257 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %42, align 16, !dbg !417, !tbaa !106, !alias.scope !424, !noalias !407
  %43 = shl nuw i64 %arraysize, 3, !dbg !425
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr189.pre257, i8 noundef 0, i64 %43, i1 noundef false) #24, !dbg !417, !tbaa !188, !alias.scope !92, !noalias !399
  br label %common.ret, !dbg !414

L152.critedge:                                    ; preds = %L41
  %_augmented = call fastcc { double*, double*, double*, i64, i64, double*, double* } @augmented_julia_gemv__5977({} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'"), !dbg !426
  %44 = getelementptr inbounds { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }* %3, i32 0, i32 0
  store { double*, double*, double*, i64, i64, double*, double* } %_augmented, { double*, double*, double*, i64, i64, double*, double* }* %44, align 8
  br label %common.ret
}

; Function Attrs: mustprogress willreturn
define internal { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___5933({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1") local_unnamed_addr #20 !dbg !416 {
top:
  %2 = alloca { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %3 = getelementptr inbounds { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 0
  %4 = getelementptr { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }* %3, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }* %3, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = call {}*** @julia.get_pgcstack() #24
  %ptls_field6 = getelementptr inbounds {}**, {}*** %6, i64 2
  %7 = bitcast {}*** %ptls_field6 to i64***
  %ptls_load78 = load i64**, i64*** %7, align 8, !tbaa !29, !alias.scope !417, !noalias !420
  %8 = getelementptr inbounds i64*, i64** %ptls_load78, i64 2
  %safepoint = load i64*, i64** %8, align 8, !tbaa !33, !invariant.load !28, !alias.scope !422, !noalias !425
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #24, !dbg !427
  fence syncscope("singlethread") seq_cst
  %9 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*, !dbg !428
  %arraysize_ptr9 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %9, i64 3, !dbg !428
  %10 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr9 to i64 addrspace(10)*, !dbg !428
  %11 = addrspacecast i64 addrspace(10)* %10 to i64 addrspace(11)*, !dbg !428
  %arraysize = load i64, i64 addrspace(11)* %11, align 8, !dbg !428, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !430, !noalias !433
  %12 = getelementptr inbounds { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }* %3, i32 0, i32 3, !dbg !435
  store i64 %arraysize, i64* %12, align 8, !dbg !435
  %13 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize), !dbg !435
  %14 = getelementptr inbounds { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }* %3, i32 0, i32 1, !dbg !435
  store {} addrspace(10)* %13, {} addrspace(10)** %14, align 8, !dbg !435
  %15 = mul i64 %arraysize, 8, !dbg !435
  %16 = bitcast {} addrspace(10)* %13 to i8 addrspace(13)* addrspace(10)*, !dbg !435
  %17 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %16, align 8, !dbg !435
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %17, i8 0, i64 %15, i1 false), !dbg !435
  %18 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraysize) #25, !dbg !435
  %19 = getelementptr inbounds { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }* %3, i32 0, i32 2, !dbg !439
  store {} addrspace(10)* %18, {} addrspace(10)** %19, align 8, !dbg !439
  %_augmented = call fastcc { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } @augmented_julia_gemv__5936({} addrspace(10)* align 16 %18, {} addrspace(10)* align 16 %13, {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1"), !dbg !439
  %20 = getelementptr inbounds { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }* %3, i32 0, i32 0, !dbg !429
  store { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %_augmented, { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }* %20, align 8, !dbg !429
  %21 = getelementptr inbounds { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 1, !dbg !429
  store {} addrspace(10)* %18, {} addrspace(10)** %21, align 8, !dbg !429
  %22 = getelementptr inbounds { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 2, !dbg !429
  store {} addrspace(10)* %13, {} addrspace(10)** %22, align 8, !dbg !429
  %23 = load { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %2, align 8, !dbg !429
  ret { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* } %23, !dbg !429
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_gemv__5977({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", { double*, double*, double*, i64, i64, double*, double* } %tapeArg) unnamed_addr #22 !dbg !490 {
top:
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %3 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"'de54" = alloca double, align 8
  %4 = getelementptr double, double* %"'de54", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache = alloca double*, align 8
  %_cache60 = alloca double*, align 8
  %"'de63" = alloca double, align 8
  %5 = getelementptr double, double* %"'de63", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"'de64" = alloca double, align 8
  %6 = getelementptr double, double* %"'de64", i64 0
  store double 0.000000e+00, double* %6, align 8
  %_cache77 = alloca i8, align 1
  %7 = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 5
  %mdyncache_fromtape_cache = alloca double*, align 8
  store double* %7, double** %mdyncache_fromtape_cache, align 8
  %8 = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 6
  %mdyncache_fromtape_cache79 = alloca double*, align 8
  store double* %8, double** %mdyncache_fromtape_cache79, align 8
  %9 = call {}*** @julia.get_pgcstack() #25
  %arraysize = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 3, !dbg !491
  %arraysize3 = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 4, !dbg !493
  br i1 false, label %L17, label %L69, !dbg !494

L17:                                              ; preds = %top
  unreachable

L69:                                              ; preds = %top
  %"'ipc47" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !495
  %10 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc47"), !dbg !495
  %"arrayptr215'il_phi" = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 2, !dbg !495
  %"'ipc43" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !499
  %11 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc43"), !dbg !499
  %"arrayptr50216'il_phi" = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 1, !dbg !499
  %"arrayptr50216274'ipc" = bitcast double* %"arrayptr50216'il_phi" to i8*, !dbg !503
  %"'ipc" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !503
  %12 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !503
  %"arrayptr52218'il_phi" = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 0, !dbg !503
  %.not203 = icmp eq i64 %arraysize, 0, !dbg !506
  %13 = select i1 %.not203, i64 1, i64 %arraysize, !dbg !510
  %14 = call i64 @llvm.smax.i64(i64 %arraysize, i64 %13) #25, !dbg !510
  %15 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'", {} addrspace(10)* %1, {} addrspace(10)* %"'1", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !511
  %16 = trunc i64 %arraysize to i32, !dbg !511
  %17 = trunc i64 %arraysize3 to i32, !dbg !511
  %18 = icmp eq i32 %16, 0, !dbg !511
  %19 = icmp eq i32 %17, 0, !dbg !511
  %20 = or i1 %18, %19, !dbg !511
  store i8 1, i8* %_cache77, align 1, !dbg !511, !invariant.group !512
  br i1 %20, label %dgemv_64_.exit, label %21, !dbg !511

21:                                               ; preds = %L69
  %22 = icmp sgt i32 %16, 0, !dbg !511
  br i1 %22, label %.preheader, label %.loopexit273, !dbg !511

.preheader:                                       ; preds = %21
  %23 = shl i64 %arraysize, 3, !dbg !511
  %24 = and i64 %23, 34359738360, !dbg !511
  br label %.loopexit273, !dbg !511

.loopexit273:                                     ; preds = %.preheader, %21
  %25 = icmp sgt i32 %17, 0, !dbg !511
  store i8 0, i8* %_cache77, align 1, !dbg !511, !invariant.group !512
  br i1 %25, label %26, label %dgemv_64_.exit, !dbg !511

26:                                               ; preds = %.loopexit273
  %27 = icmp sgt i32 %16, 0, !dbg !511
  %sext = shl i64 %14, 32, !dbg !511
  %28 = ashr exact i64 %sext, 32, !dbg !511
  %29 = and i64 %arraysize3, 4294967295, !dbg !511
  %30 = and i64 %arraysize, 4294967295, !dbg !511
  %31 = add nsw i64 %29, -1, !dbg !511
  %32 = add nsw i64 %30, -1, !dbg !511
  %33 = add nuw i64 %31, 1, !dbg !511
  %34 = add nuw i64 %32, 1, !dbg !511
  %35 = mul nuw nsw i64 %34, %33, !dbg !511
  %36 = mul nuw i64 %35, 8, !dbg !511
  %37 = mul nuw i64 %33, 8, !dbg !511
  br label %38, !dbg !511

38:                                               ; preds = %.loopexit269, %26
  %iv = phi i64 [ %iv.next, %.loopexit269 ], [ 0, %26 ], !dbg !511
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !511
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr215'il_phi", i64 %iv, !dbg !511
  %39 = load double*, double** %mdyncache_fromtape_cache, align 8, !dbg !511, !dereferenceable !339, !invariant.group !513
  %40 = getelementptr inbounds double, double* %39, i64 %iv, !dbg !511
  %41 = load double, double* %40, align 8, !dbg !511, !invariant.group !514
  br i1 %27, label %42, label %.loopexit269, !dbg !511

42:                                               ; preds = %38
  %43 = mul nsw i64 %iv, %28, !dbg !511
  br label %44, !dbg !511

44:                                               ; preds = %44, %42
  %iv1 = phi i64 [ %iv.next2, %44 ], [ 0, %42 ], !dbg !511
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !511
  %45 = add nsw i64 %iv1, %43, !dbg !511
  %"'ipg67" = getelementptr inbounds double, double* %"arrayptr52218'il_phi", i64 %45, !dbg !511
  %46 = load double*, double** %mdyncache_fromtape_cache79, align 8, !dbg !511, !dereferenceable !339, !invariant.group !515
  %47 = mul nuw nsw i64 %34, %33, !dbg !511
  %48 = mul nuw nsw i64 %iv, %34, !dbg !511
  %49 = add nuw nsw i64 %iv1, %48, !dbg !511
  %50 = getelementptr inbounds double, double* %46, i64 %49, !dbg !511
  %51 = load double, double* %50, align 8, !dbg !511, !invariant.group !516
  %52 = mul nuw nsw i64 %34, %33, !dbg !511
  %53 = mul nuw nsw i64 %iv, %34, !dbg !511
  %54 = add nuw nsw i64 %iv1, %53, !dbg !511
  %"'ipg53" = getelementptr inbounds double, double* %"arrayptr50216'il_phi", i64 %iv1, !dbg !511
  %55 = icmp eq i64 %iv.next2, %30, !dbg !511
  br i1 %55, label %.loopexit269.loopexit, label %44, !dbg !511, !llvm.loop !517

.loopexit269.loopexit:                            ; preds = %44
  br label %.loopexit269, !dbg !511

.loopexit269:                                     ; preds = %.loopexit269.loopexit, %38
  %56 = icmp eq i64 %iv.next, %29, !dbg !511
  br i1 %56, label %dgemv_64_.exit.loopexit, label %38, !dbg !511, !llvm.loop !518

dgemv_64_.exit.loopexit:                          ; preds = %.loopexit269
  store i8 2, i8* %_cache77, align 1, !dbg !511, !invariant.group !512
  br label %dgemv_64_.exit, !dbg !511

dgemv_64_.exit:                                   ; preds = %dgemv_64_.exit.loopexit, %.loopexit273, %L69
  call void @llvm.julia.gc_preserve_end(token %15) #25, !dbg !511
  br label %invertdgemv_64_.exit, !dbg !519

inverttop:                                        ; preds = %invertL69
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL69:                                        ; preds = %invertdgemv_64_.exit, %invert
  call void @llvm.julia.gc_preserve_end(token %120), !dbg !511
  br label %inverttop

invert:                                           ; preds = %invert.loopexit273, %invert.preheader
  br label %invertL69

invert.preheader:                                 ; preds = %invert.loopexit273
  %_unwrap = shl i64 %arraysize, 3, !dbg !511
  %_unwrap50 = and i64 %_unwrap, 34359738360, !dbg !511
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %"arrayptr50216274'ipc", i8 noundef 0, i64 %_unwrap50, i1 noundef false) #25, !dbg !511, !tbaa !139, !noalias !264
  br label %invert

invert.loopexit273:                               ; preds = %invertdgemv_64_.exit, %invert3
  %_unwrap51 = icmp sgt i32 %16, 0
  br i1 %_unwrap51, label %invert.preheader, label %invert

invert3:                                          ; preds = %invert4
  %57 = load i64, i64* %"iv'ac", align 8
  %58 = load i64, i64* %"iv1'ac", align 8
  %59 = load i64, i64* %"iv'ac", align 8
  %60 = load i64, i64* %"iv'ac", align 8
  %forfree78 = load double*, double** %mdyncache_fromtape_cache, align 8, !dereferenceable !339, !invariant.group !513
  %61 = bitcast double* %forfree78 to i8*
  call void @free(i8* nonnull %61), !dbg !520
  %62 = load i64, i64* %"iv'ac", align 8
  %63 = load i64, i64* %"iv1'ac", align 8
  %forfree80 = load double*, double** %mdyncache_fromtape_cache79, align 8, !dereferenceable !339, !invariant.group !515
  %64 = bitcast double* %forfree80 to i8*
  call void @free(i8* nonnull %64), !dbg !520
  br label %invert.loopexit273

invert4:                                          ; preds = %invert.loopexit269, %invert5
  %65 = load double, double* %"'de", align 8, !dbg !511
  store double 0.000000e+00, double* %"'de", align 8, !dbg !511
  %66 = load i64, i64* %"iv'ac", align 8, !dbg !511
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr215'il_phi", i64 %66, !dbg !511
  %67 = load double, double* %"'ipg_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !521, !noalias !524
  %68 = fadd fast double %67, %65, !dbg !511
  store double %68, double* %"'ipg_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !521, !noalias !524
  %69 = load i64, i64* %"iv'ac", align 8
  %70 = icmp eq i64 %69, 0
  %71 = xor i1 %70, true
  br i1 %70, label %invert3, label %incinvert4

incinvert4:                                       ; preds = %invert4
  %72 = load i64, i64* %"iv'ac", align 8
  %73 = add nsw i64 %72, -1
  store i64 %73, i64* %"iv'ac", align 8
  br label %invert.loopexit269

invert5:                                          ; preds = %invert6
  br label %invert4

invert6:                                          ; preds = %mergeinvert6_.loopexit269.loopexit, %incinvert6
  %74 = load i64, i64* %"iv1'ac", align 8, !dbg !511
  %75 = load i64, i64* %"iv'ac", align 8, !dbg !511
  %"'ipg53_unwrap" = getelementptr inbounds double, double* %"arrayptr50216'il_phi", i64 %74, !dbg !511
  %76 = load double, double* %"'ipg53_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !526, !noalias !529
  store double 0.000000e+00, double* %"'ipg53_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !526, !noalias !529
  %77 = load double, double* %"'de54", align 8, !dbg !511
  %78 = fadd fast double %77, %76, !dbg !511
  store double %78, double* %"'de54", align 8, !dbg !511
  %79 = load double, double* %"'de54", align 8, !dbg !511
  store double 0.000000e+00, double* %"'de54", align 8, !dbg !511
  %80 = load i64, i64* %"iv1'ac", align 8, !dbg !511
  %81 = load i64, i64* %"iv'ac", align 8, !dbg !511
  %arraysize3_unwrap = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 4, !dbg !511
  %_unwrap56 = and i64 %arraysize3_unwrap, 4294967295, !dbg !511
  %_unwrap57 = add nsw i64 %_unwrap56, -1, !dbg !511
  %82 = add nuw i64 %_unwrap57, 1, !dbg !511
  %arraysize_unwrap = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 3, !dbg !511
  %_unwrap58 = and i64 %arraysize_unwrap, 4294967295, !dbg !511
  %_unwrap59 = add nsw i64 %_unwrap58, -1, !dbg !511
  %83 = add nuw i64 %_unwrap59, 1, !dbg !511
  %84 = mul nuw nsw i64 %83, %82, !dbg !511
  %85 = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 6, !dbg !511
  %86 = mul nuw nsw i64 %83, %82, !dbg !511
  %87 = mul nuw nsw i64 %81, %83, !dbg !511
  %88 = add nuw nsw i64 %80, %87, !dbg !511
  %89 = getelementptr inbounds double, double* %85, i64 %88, !dbg !511
  %90 = load double, double* %89, align 8, !dbg !511, !tbaa !139, !invariant.group !531
  %91 = fmul fast double %79, %90, !dbg !511
  %92 = load double, double* %"'de", align 8, !dbg !511
  %93 = fadd fast double %92, %91, !dbg !511
  store double %93, double* %"'de", align 8, !dbg !511
  %94 = load i64, i64* %"iv1'ac", align 8, !dbg !511
  %95 = load i64, i64* %"iv'ac", align 8, !dbg !511
  %96 = add nuw i64 %_unwrap57, 1, !dbg !511
  %97 = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 5, !dbg !511
  %98 = getelementptr inbounds double, double* %97, i64 %95, !dbg !511
  %99 = load double, double* %98, align 8, !dbg !511, !tbaa !139, !alias.scope !524, !noalias !521, !invariant.group !532
  %100 = fmul fast double %79, %99, !dbg !511
  %101 = load double, double* %"'de63", align 8, !dbg !511
  %102 = fadd fast double %101, %100, !dbg !511
  store double %102, double* %"'de63", align 8, !dbg !511
  %103 = load double, double* %"'de64", align 8, !dbg !511
  %104 = fadd fast double %103, %79, !dbg !511
  store double %104, double* %"'de64", align 8, !dbg !511
  %105 = load double, double* %"'de64", align 8, !dbg !511
  store double 0.000000e+00, double* %"'de64", align 8, !dbg !511
  %106 = load double, double* %"'ipg53_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !526, !noalias !533
  %107 = fadd fast double %106, %105, !dbg !511
  store double %107, double* %"'ipg53_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !526, !noalias !533
  %108 = load double, double* %"'de63", align 8, !dbg !511
  store double 0.000000e+00, double* %"'de63", align 8, !dbg !511
  %109 = load i64, i64* %"iv1'ac", align 8, !dbg !511
  %110 = load i64, i64* %"iv'ac", align 8, !dbg !511
  %sext_unwrap = shl i64 %14, 32, !dbg !511
  %_unwrap68 = ashr exact i64 %sext_unwrap, 32, !dbg !511
  %_unwrap69 = mul nsw i64 %110, %_unwrap68, !dbg !511
  %_unwrap70 = add nsw i64 %109, %_unwrap69, !dbg !511
  %"'ipg67_unwrap" = getelementptr inbounds double, double* %"arrayptr52218'il_phi", i64 %_unwrap70, !dbg !511
  %111 = load double, double* %"'ipg67_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !534, !noalias !537
  %112 = fadd fast double %111, %108, !dbg !511
  store double %112, double* %"'ipg67_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !534, !noalias !537
  %113 = load i64, i64* %"iv1'ac", align 8
  %114 = icmp eq i64 %113, 0
  %115 = xor i1 %114, true
  br i1 %114, label %invert5, label %incinvert6

incinvert6:                                       ; preds = %invert6
  %116 = load i64, i64* %"iv1'ac", align 8
  %117 = add nsw i64 %116, -1
  store i64 %117, i64* %"iv1'ac", align 8
  br label %invert6

invert.loopexit269.loopexit:                      ; preds = %invert.loopexit269
  %118 = load i64, i64* %"iv'ac", align 8
  %_unwrap72 = and i64 %arraysize, 4294967295
  %_unwrap73 = add nsw i64 %_unwrap72, -1
  br label %mergeinvert6_.loopexit269.loopexit

mergeinvert6_.loopexit269.loopexit:               ; preds = %invert.loopexit269.loopexit
  store i64 %_unwrap73, i64* %"iv1'ac", align 8
  br label %invert6

invert.loopexit269:                               ; preds = %mergeinvert4_dgemv_64_.exit.loopexit, %incinvert4
  %119 = load i64, i64* %"iv'ac", align 8
  %_unwrap74 = icmp sgt i32 %16, 0
  br i1 %_unwrap74, label %invert.loopexit269.loopexit, label %invert4

invertdgemv_64_.exit.loopexit:                    ; preds = %invertdgemv_64_.exit
  %_unwrap75 = and i64 %arraysize3, 4294967295
  %_unwrap76 = add nsw i64 %_unwrap75, -1
  br label %mergeinvert4_dgemv_64_.exit.loopexit

mergeinvert4_dgemv_64_.exit.loopexit:             ; preds = %invertdgemv_64_.exit.loopexit
  store i64 %_unwrap76, i64* %"iv'ac", align 8
  br label %invert.loopexit269

invertdgemv_64_.exit:                             ; preds = %dgemv_64_.exit
  %120 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'", {} addrspace(10)* %1, {} addrspace(10)* %"'1", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !511
  %121 = load i8, i8* %_cache77, align 1, !invariant.group !512
  switch i8 %121, label %invertdgemv_64_.exit.loopexit [
    i8 0, label %invert.loopexit273
    i8 1, label %invertL69
  ]
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_gemv__5936({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg) unnamed_addr #21 !dbg !455 {
top:
  %3 = call {}*** @julia.get_pgcstack() #25
  %arraysize = extractvalue { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg, 1, !dbg !456
  br i1 true, label %L28, label %L22, !dbg !459

L22:                                              ; preds = %top
  unreachable

L28:                                              ; preds = %top
  br i1 true, label %L38, label %L32, !dbg !460

L32:                                              ; preds = %L28
  unreachable

L38:                                              ; preds = %L28
  %.not184 = icmp eq i64 %arraysize, 0, !dbg !461
  br i1 %.not184, label %common.ret, label %L41, !dbg !462

common.ret:                                       ; preds = %L152.critedge, %L49.L61_crit_edge, %L38
  br label %invertcommon.ret, !dbg !463

L41:                                              ; preds = %L38
  %.not185 = extractvalue { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg, 2, !dbg !464
  br i1 %.not185, label %L49.L61_crit_edge, label %L152.critedge, !dbg !464

L49.L61_crit_edge:                                ; preds = %L41
  %"'ipc" = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !465
  %"'ipc35" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc" to i8 addrspace(13)* addrspace(11)*, !dbg !465
  %"arrayptr189.pre257'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc35", align 16, !dbg !465, !tbaa !106, !alias.scope !468, !noalias !471
  %4 = shl nuw i64 %arraysize, 3, !dbg !473
  br label %common.ret, !dbg !463

L152.critedge:                                    ; preds = %L41
  %tapeArg38 = extractvalue { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg, 0, !dbg !474
  br label %common.ret

inverttop:                                        ; preds = %invertL28
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL28:                                        ; preds = %invertL38
  br label %inverttop

invertL38:                                        ; preds = %invertL41, %invertcommon.ret
  br label %invertL28

invertcommon.ret:                                 ; preds = %common.ret
  %.not185_unwrap = extractvalue { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg, 2
  br i1 %.not184, label %invertL38, label %staging

invertL41:                                        ; preds = %invertL152.critedge, %invertL49.L61_crit_edge
  br label %invertL38

invertL49.L61_crit_edge:                          ; preds = %staging
  %_unwrap = shl nuw i64 %arraysize, 3, !dbg !465
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !465
  %"'ipc35_unwrap" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc_unwrap" to i8 addrspace(13)* addrspace(11)*, !dbg !465
  %"arrayptr189.pre257'il_phi_unwrap" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc35_unwrap", align 16, !dbg !465, !tbaa !106, !alias.scope !468, !noalias !471
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %"arrayptr189.pre257'il_phi_unwrap", i8 noundef 0, i64 %_unwrap, i1 noundef false) #25, !dbg !465, !tbaa !188, !noalias !215
  br label %invertL41

invertL152.critedge:                              ; preds = %staging
  %tapeArg38_unwrap = extractvalue { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg, 0, !dbg !474
  call fastcc void @diffejulia_gemv__5977({} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", { double*, double*, double*, i64, i64, double*, double* } %tapeArg38_unwrap), !dbg !474
  br label %invertL41

staging:                                          ; preds = %invertcommon.ret
  br i1 %.not185_unwrap, label %invertL49.L61_crit_edge, label %invertL152.critedge
}

; Function Attrs: mustprogress willreturn
define internal void @diffejulia___5933({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 } %tapeArg) local_unnamed_addr #20 !dbg !444 {
top:
  %2 = call {}*** @julia.get_pgcstack() #25
  %arraysize = extractvalue { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 } %tapeArg, 3, !dbg !445
  %3 = extractvalue { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 } %tapeArg, 1, !dbg !445
  %4 = extractvalue { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 } %tapeArg, 2, !dbg !445
  %tapeArg2 = extractvalue { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 } %tapeArg, 0, !dbg !450
  br label %inverttop, !dbg !449

inverttop:                                        ; preds = %top
  call fastcc void @diffejulia_gemv__5936({} addrspace(10)* align 16 %4, {} addrspace(10)* align 16 %3, {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg2), !dbg !450
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void
}

after simplification :
; Function Attrs: mustprogress willreturn
define nonnull {} addrspace(10)* @preprocess_julia___6104({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2) local_unnamed_addr #12 !dbg !290 {
top:
  %3 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) i8* @malloc(i64 8), !enzyme_fromstack !291
  %newstruct51 = bitcast i8* %3 to [1 x [1 x i64]]*, !enzyme_caststack !10
  %4 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) i8* @malloc(i64 8), !enzyme_fromstack !291
  %newstruct144 = bitcast i8* %4 to [1 x [1 x i64]]*, !enzyme_caststack !10
  %5 = call {}*** @julia.get_pgcstack() #13
  %current_task1211 = getelementptr inbounds {}**, {}*** %5, i64 -14
  %current_task1 = bitcast {}*** %current_task1211 to {}**
  %ptls_field212 = getelementptr inbounds {}**, {}*** %5, i64 2
  %6 = bitcast {}*** %ptls_field212 to i64***
  %ptls_load213214 = load i64**, i64*** %6, align 8, !tbaa !11
  %7 = getelementptr inbounds i64*, i64** %ptls_load213214, i64 2
  %safepoint = load i64*, i64** %7, align 8, !tbaa !15, !invariant.load !10
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #13, !dbg !292
  fence syncscope("singlethread") seq_cst
  %.phi.trans.insert = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*
  %8 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert199 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %8 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert199, i64 0, i32 1
  %arraylen.pre = load i64, i64 addrspace(11)* %arraylen_ptr.phi.trans.insert, align 8, !dbg !293, !tbaa !28, !range !31, !alias.scope !32, !noalias !35
  %9 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !293
  %10 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %9 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !293
  %arraylen_ptr4235 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %10, i64 0, i32 1, !dbg !293
  %arraylen5236 = load i64, i64 addrspace(11)* %arraylen_ptr4235, align 8, !dbg !293, !tbaa !28, !range !31, !alias.scope !32, !noalias !35
  %11 = icmp eq i64 %arraylen.pre, %arraylen5236, !dbg !297
  br i1 %11, label %L31.lr.ph, label %L24, !dbg !300

L31.lr.ph:                                        ; preds = %top
  %12 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !301
  %13 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %12 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !293
  %arraylen_ptr4 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %13, i64 0, i32 1, !dbg !293
  %arraylen5 = load i64, i64 addrspace(11)* %arraylen_ptr4, align 8, !dbg !293, !tbaa !28, !range !31, !alias.scope !32, !noalias !35
  %14 = icmp eq i64 %arraylen.pre, %arraylen5, !dbg !297
  br i1 %14, label %L115, label %L24, !dbg !300

L24:                                              ; preds = %L31.lr.ph, %top
  %arraylen5.lcssa = phi i64 [ %arraylen5236, %top ], [ %arraylen5, %L31.lr.ph ], !dbg !293
  %box = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777170208 to {}*) to {} addrspace(10)*)) #14, !dbg !304
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box to i64 addrspace(10)*, !dbg !304
  store i64 %arraylen.pre, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !304, !tbaa !57, !alias.scope !61, !noalias !305
  %box10 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777170208 to {}*) to {} addrspace(10)*)) #14, !dbg !304
  %memcpy_refined_dst12 = bitcast {} addrspace(10)* %box10 to i64 addrspace(10)*, !dbg !304
  store i64 %arraylen5.lcssa, i64 addrspace(10)* %memcpy_refined_dst12, align 8, !dbg !304, !tbaa !57, !alias.scope !61, !noalias !305
  %15 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4774666128 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4729112992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733824 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733792 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box10, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733760 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336517472 to {}*) to {} addrspace(10)*)) #15, !dbg !304
  %box14 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #14, !dbg !304
  %16 = bitcast {} addrspace(10)* %box14 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !304
  %17 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %16, i64 0, i64 0, !dbg !304
  store {} addrspace(10)* %15, {} addrspace(10)* addrspace(10)* %17, align 8, !dbg !304, !tbaa !57, !alias.scope !61, !noalias !305
  %18 = addrspacecast {} addrspace(10)* %box14 to {} addrspace(12)*, !dbg !304
  call void @ijl_throw({} addrspace(12)* %18) #16, !dbg !304
  unreachable, !dbg !304

L115:                                             ; preds = %L31.lr.ph
  %19 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !308
  %20 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !308
  %memcpy_refined_dst53 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct51, i64 0, i64 0, i64 0, !dbg !316
  store i64 %arraylen.pre, i64* %memcpy_refined_dst53, align 8, !dbg !316, !tbaa !82, !alias.scope !84, !noalias !318
  %21 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraylen.pre) #17, !dbg !319
  %22 = addrspacecast {} addrspace(10)* %21 to {} addrspace(11)*, !dbg !327
  %23 = bitcast {} addrspace(10)* %21 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !327
  %24 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %23 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !327
  %arraylen_ptr63 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %24, i64 0, i32 1, !dbg !327
  %arraylen64 = load i64, i64 addrspace(11)* %arraylen_ptr63, align 8, !dbg !327, !tbaa !28, !range !31, !alias.scope !32, !noalias !35
  %.not.not = icmp eq i64 %arraylen64, %arraylen.pre, !dbg !331
  br i1 %.not.not, label %L161, label %L287, !dbg !329

L161:                                             ; preds = %L115
  %.not = icmp eq {} addrspace(11)* %22, %.phi.trans.insert, !dbg !335
  br i1 %.not, label %L177, label %L164, !dbg !335

L164:                                             ; preds = %L161
  %25 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %22) #18, !dbg !340
  %26 = bitcast {}* %25 to i8**, !dbg !340
  %arrayptr136 = load i8*, i8** %26, align 8, !dbg !340, !tbaa !129, !alias.scope !32, !noalias !35, !nonnull !10
  %27 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %.phi.trans.insert) #18, !dbg !340
  %28 = bitcast {}* %27 to i8**, !dbg !340
  %arrayptr138 = load i8*, i8** %28, align 8, !dbg !340, !tbaa !129, !alias.scope !32, !noalias !35, !nonnull !10
  %.not226 = icmp eq i8* %arrayptr136, %arrayptr138, !dbg !345
  br i1 %.not226, label %L172, label %L177, !dbg !344

L172:                                             ; preds = %L164
  %29 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %0) #13, !dbg !348
  %30 = bitcast {} addrspace(10)* %29 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert201 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %30 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr68.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert201, i64 0, i32 1
  %arraylen69.pre = load i64, i64 addrspace(11)* %arraylen_ptr68.phi.trans.insert, align 8, !dbg !350, !tbaa !28, !range !31, !alias.scope !32, !noalias !35
  br label %L177, !dbg !354

L177:                                             ; preds = %L172, %L164, %L161
  %nodecayed..pre-phi203 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %30, %L172 ], [ %8, %L161 ], [ %8, %L164 ], !dbg !350
  %arraylen69 = phi i64 [ %arraylen69.pre, %L172 ], [ %arraylen.pre, %L161 ], [ %arraylen.pre, %L164 ], !dbg !350
  %31 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi203 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !361
  %32 = icmp eq i64 %arraylen69, 1, !dbg !361
  %.not215 = icmp eq {} addrspace(11)* %22, %19, !dbg !365
  br i1 %.not215, label %L202, label %L189, !dbg !365

L189:                                             ; preds = %L177
  %33 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %22) #18, !dbg !368
  %34 = bitcast {}* %33 to i8**, !dbg !368
  %arrayptr131 = load i8*, i8** %34, align 8, !dbg !368, !tbaa !129, !alias.scope !32, !noalias !35, !nonnull !10
  %35 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %19) #18, !dbg !368
  %36 = bitcast {}* %35 to i8**, !dbg !368
  %arrayptr133 = load i8*, i8** %36, align 8, !dbg !368, !tbaa !129, !alias.scope !32, !noalias !35, !nonnull !10
  %.not225 = icmp eq i8* %arrayptr131, %arrayptr133, !dbg !373
  br i1 %.not225, label %L197, label %L202, !dbg !372

L197:                                             ; preds = %L189
  %37 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %1) #13, !dbg !376
  %38 = bitcast {} addrspace(10)* %37 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !378
  %.pre205 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %38 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !378
  br label %L202, !dbg !354

L202:                                             ; preds = %L197, %L189, %L177
  %nodecayed..pre-phi206 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %38, %L197 ], [ %9, %L189 ], [ %9, %L177 ], !dbg !378
  %39 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi206 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !378
  %arraylen_ptr73 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %39, i64 0, i32 1, !dbg !378
  %arraylen74 = load i64, i64 addrspace(11)* %arraylen_ptr73, align 8, !dbg !378, !tbaa !28, !range !31, !alias.scope !32, !noalias !35
  %40 = icmp eq i64 %arraylen74, 1, !dbg !382
  %.not216 = icmp eq {} addrspace(11)* %22, %20, !dbg !386
  br i1 %.not216, label %L227, label %L214, !dbg !386

L214:                                             ; preds = %L202
  %41 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %22) #18, !dbg !389
  %42 = bitcast {}* %41 to i8**, !dbg !389
  %arrayptr126 = load i8*, i8** %42, align 8, !dbg !389, !tbaa !129, !alias.scope !32, !noalias !35, !nonnull !10
  %43 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %20) #18, !dbg !389
  %44 = bitcast {}* %43 to i8**, !dbg !389
  %arrayptr128 = load i8*, i8** %44, align 8, !dbg !389, !tbaa !129, !alias.scope !32, !noalias !35, !nonnull !10
  %.not224 = icmp eq i8* %arrayptr126, %arrayptr128, !dbg !394
  br i1 %.not224, label %L222, label %L227, !dbg !393

L222:                                             ; preds = %L214
  %45 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %2) #13, !dbg !397
  %46 = bitcast {} addrspace(10)* %45 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !399
  %.pre209 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %46 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !399
  br label %L227, !dbg !354

L227:                                             ; preds = %L222, %L214, %L202
  %nodecayed..pre-phi210 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %46, %L222 ], [ %12, %L214 ], [ %12, %L202 ], !dbg !399
  %47 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi210 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !399
  %arraylen_ptr79 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %47, i64 0, i32 1, !dbg !399
  %arraylen80 = load i64, i64 addrspace(11)* %arraylen_ptr79, align 8, !dbg !399, !tbaa !28, !range !31, !alias.scope !32, !noalias !35
  %48 = icmp eq i64 %arraylen80, 1, !dbg !403
  %49 = icmp eq i64 %arraylen.pre, 0, !dbg !407
  br i1 %49, label %L297, label %L249.lr.ph, !dbg !408

L249.lr.ph:                                       ; preds = %L227
  %50 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %31 to double addrspace(13)* addrspace(11)*
  %arrayptr218 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %50, align 8, !tbaa !129, !alias.scope !410, !noalias !35, !nonnull !10
  %51 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %39 to double addrspace(13)* addrspace(11)*
  %arrayptr89219 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %51, align 8, !tbaa !129, !alias.scope !410, !noalias !35, !nonnull !10
  %52 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %47 to double addrspace(13)* addrspace(11)*
  %arrayptr93220 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %52, align 8, !tbaa !129, !alias.scope !410, !noalias !35, !nonnull !10
  %53 = bitcast {} addrspace(10)* %21 to double addrspace(13)* addrspace(10)*
  %54 = addrspacecast double addrspace(13)* addrspace(10)* %53 to double addrspace(13)* addrspace(11)*
  %arrayptr96221 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %54, align 8, !tbaa !129, !alias.scope !410, !noalias !35, !nonnull !10
  br label %L249, !dbg !411

L249:                                             ; preds = %L249, %L249.lr.ph
  %iv = phi i64 [ %iv.next, %L249 ], [ 0, %L249.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !412
  %55 = select i1 %32, i64 0, i64 %iv, !dbg !415
  %56 = getelementptr inbounds double, double addrspace(13)* %arrayptr218, i64 %55, !dbg !415
  %arrayref = load double, double addrspace(13)* %56, align 8, !dbg !415, !tbaa !233, !alias.scope !61, !noalias !235
  %57 = select i1 %40, i64 0, i64 %iv, !dbg !422
  %58 = getelementptr inbounds double, double addrspace(13)* %arrayptr89219, i64 %57, !dbg !422
  %arrayref90 = load double, double addrspace(13)* %58, align 8, !dbg !422, !tbaa !233, !alias.scope !61, !noalias !235
  %59 = select i1 %48, i64 0, i64 %iv, !dbg !425
  %60 = getelementptr inbounds double, double addrspace(13)* %arrayptr93220, i64 %59, !dbg !425
  %arrayref94 = load double, double addrspace(13)* %60, align 8, !dbg !425, !tbaa !233, !alias.scope !61, !noalias !235
  %61 = fadd double %arrayref, %arrayref90, !dbg !428
  %62 = fadd double %61, %arrayref94, !dbg !428
  %63 = getelementptr inbounds double, double addrspace(13)* %arrayptr96221, i64 %iv, !dbg !432
  store double %62, double addrspace(13)* %63, align 8, !dbg !432, !tbaa !233, !alias.scope !61, !noalias !305
  %exitcond.not = icmp eq i64 %iv.next, %arraylen.pre, !dbg !433
  br i1 %exitcond.not, label %L297.loopexit, label %L249, !dbg !411, !llvm.loop !434

L287:                                             ; preds = %L115
  %64 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct144, i64 0, i64 0, i64 0, !dbg !435
  store i64 %arraylen64, i64* %64, align 8, !dbg !435, !tbaa !82, !alias.scope !84, !noalias !318
  %65 = addrspacecast [1 x [1 x i64]]* %newstruct144 to [1 x [1 x i64]] addrspace(11)*, !dbg !329
  %66 = addrspacecast [1 x [1 x i64]]* %newstruct51 to [1 x [1 x i64]] addrspace(11)*, !dbg !329
  call fastcc void @julia_throwdm_6109([1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %65, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %66) #16, !dbg !329
  unreachable, !dbg !329

L297.loopexit:                                    ; preds = %L249
  br label %L297, !dbg !439

L297:                                             ; preds = %L297.loopexit, %L227
  %arraylen101 = load i64, i64 addrspace(11)* %arraylen_ptr.phi.trans.insert, align 8, !dbg !439, !tbaa !28, !range !31, !alias.scope !32, !noalias !35
  %arraylen104 = load i64, i64 addrspace(11)* %arraylen_ptr4235, align 8, !dbg !445, !tbaa !28, !range !31, !alias.scope !32, !noalias !35
  %arraylen107 = load i64, i64 addrspace(11)* %arraylen_ptr4, align 8, !dbg !445, !tbaa !28, !range !31, !alias.scope !32, !noalias !35
  %67 = icmp eq i64 %arraylen107, %arraylen104, !dbg !448
  %68 = icmp eq i64 %arraylen104, 1, !dbg !450
  %value_phi109 = or i1 %68, %67, !dbg !450
  br i1 %value_phi109, label %L333, label %L314, !dbg !451

L314:                                             ; preds = %L297
  %.not223 = icmp eq i64 %arraylen107, 1, !dbg !450
  br i1 %.not223, label %L333, label %L322, !dbg !451

L322:                                             ; preds = %L314
  %69 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen104) #17, !dbg !451
  %70 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen107) #17, !dbg !451
  %71 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4773853616 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4729112992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4818754768 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %69, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4818754736 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %70) #15, !dbg !451
  %box122 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #14, !dbg !451
  %72 = bitcast {} addrspace(10)* %box122 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !451
  %73 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %72, i64 0, i64 0, !dbg !451
  store {} addrspace(10)* %71, {} addrspace(10)* addrspace(10)* %73, align 8, !dbg !451, !tbaa !57, !alias.scope !61, !noalias !305
  %74 = addrspacecast {} addrspace(10)* %box122 to {} addrspace(12)*, !dbg !451
  call void @ijl_throw({} addrspace(12)* %74) #16, !dbg !451
  unreachable, !dbg !451

L333:                                             ; preds = %L314, %L297
  %value_phi110 = phi i64 [ %arraylen107, %L297 ], [ %arraylen104, %L314 ]
  %75 = icmp eq i64 %value_phi110, %arraylen101, !dbg !454
  %76 = icmp eq i64 %arraylen101, 1, !dbg !456
  %value_phi114 = or i1 %76, %75, !dbg !456
  %.not222 = icmp eq i64 %value_phi110, 1
  %or.cond = or i1 %.not222, %value_phi114, !dbg !457
  br i1 %or.cond, label %L359, label %L349, !dbg !457

L349:                                             ; preds = %L333
  %77 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen101) #17, !dbg !457
  %78 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %value_phi110) #17, !dbg !457
  %79 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4773853616 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4729112992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4818754768 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %77, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4818754736 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %78) #15, !dbg !457
  %box117 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #14, !dbg !457
  %80 = bitcast {} addrspace(10)* %box117 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !457
  %81 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %80, i64 0, i64 0, !dbg !457
  store {} addrspace(10)* %79, {} addrspace(10)* addrspace(10)* %81, align 8, !dbg !457, !tbaa !57, !alias.scope !61, !noalias !305
  %82 = addrspacecast {} addrspace(10)* %box117 to {} addrspace(12)*, !dbg !457
  call void @ijl_throw({} addrspace(12)* %82) #16, !dbg !457
  unreachable, !dbg !457

L359:                                             ; preds = %L333
  ret {} addrspace(10)* %21, !dbg !315
}

; Function Attrs: mustprogress willreturn
define internal { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___6104({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") local_unnamed_addr #12 !dbg !460 {
top:
  %3 = alloca { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %4 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 0
  %5 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %10 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 7
  %11 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %10 to {} addrspace(10)**
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %11, align 8
  %12 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 10
  %13 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %12 to {} addrspace(10)**
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %13, align 8
  %14 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 13
  %15 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %14 to {} addrspace(10)**
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %15, align 8
  %"iv'ac" = alloca i64, align 8
  %newstruct144 = alloca [1 x [1 x i64]], i64 1, align 8
  %16 = bitcast [1 x [1 x i64]]* %newstruct144 to i8*
  %newstruct51 = alloca [1 x [1 x i64]], i64 1, align 8
  %17 = bitcast [1 x [1 x i64]]* %newstruct51 to i8*
  %18 = bitcast i8* %17 to [1 x [1 x i64]]*, !enzyme_caststack !10
  %19 = bitcast i8* %16 to [1 x [1 x i64]]*, !enzyme_caststack !10
  %20 = call {}*** @julia.get_pgcstack() #14
  %current_task1211 = getelementptr inbounds {}**, {}*** %20, i64 -14
  %current_task1 = bitcast {}*** %current_task1211 to {}**
  %ptls_field212 = getelementptr inbounds {}**, {}*** %20, i64 2
  %21 = bitcast {}*** %ptls_field212 to i64***
  %ptls_load213214 = load i64**, i64*** %21, align 8, !tbaa !11, !alias.scope !461, !noalias !464
  %22 = getelementptr inbounds i64*, i64** %ptls_load213214, i64 2
  %safepoint = load i64*, i64** %22, align 8, !tbaa !15, !invariant.load !10, !alias.scope !466, !noalias !469
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #14, !dbg !471
  fence syncscope("singlethread") seq_cst
  %.phi.trans.insert = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*
  %"'ipc21" = bitcast {} addrspace(10)* %"'" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %23 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert199 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %23 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert199, i64 0, i32 1
  %arraylen.pre = load i64, i64 addrspace(11)* %arraylen_ptr.phi.trans.insert, align 8, !dbg !472, !tbaa !28, !range !31, !alias.scope !476, !noalias !479
  %24 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 5, !dbg !472
  store i64 %arraylen.pre, i64* %24, align 8, !dbg !472
  %"'ipc17" = bitcast {} addrspace(10)* %"'1" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !472
  %25 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !472
  %26 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %25 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !472
  %arraylen_ptr4235 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %26, i64 0, i32 1, !dbg !472
  %arraylen5236 = load i64, i64 addrspace(11)* %arraylen_ptr4235, align 8, !dbg !472, !tbaa !28, !range !31, !alias.scope !481, !noalias !484
  %27 = icmp eq i64 %arraylen.pre, %arraylen5236, !dbg !486
  br i1 %27, label %L31.lr.ph, label %L24, !dbg !489

L31.lr.ph:                                        ; preds = %top
  %"'ipc13" = bitcast {} addrspace(10)* %"'2" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !490
  %28 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !490
  %29 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %28 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !472
  %arraylen_ptr4 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %29, i64 0, i32 1, !dbg !472
  %arraylen5 = load i64, i64 addrspace(11)* %arraylen_ptr4, align 8, !dbg !472, !tbaa !28, !range !31, !alias.scope !493, !noalias !496
  %30 = icmp eq i64 %arraylen.pre, %arraylen5, !dbg !486
  br i1 %30, label %L115, label %L24, !dbg !489

L24:                                              ; preds = %L31.lr.ph, %top
  %arraylen5.lcssa = phi i64 [ %arraylen5236, %top ], [ %arraylen5, %L31.lr.ph ], !dbg !472
  %box = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777170208 to {}*) to {} addrspace(10)*)) #15, !dbg !498
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box to i64 addrspace(10)*, !dbg !498
  store i64 %arraylen.pre, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !498, !tbaa !57, !alias.scope !61, !noalias !499
  %box10 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777170208 to {}*) to {} addrspace(10)*)) #15, !dbg !498
  %memcpy_refined_dst12 = bitcast {} addrspace(10)* %box10 to i64 addrspace(10)*, !dbg !498
  store i64 %arraylen5.lcssa, i64 addrspace(10)* %memcpy_refined_dst12, align 8, !dbg !498, !tbaa !57, !alias.scope !61, !noalias !499
  %31 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4774666128 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4729112992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733824 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733792 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box10, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857733760 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336517472 to {}*) to {} addrspace(10)*)) #16, !dbg !498
  %box14 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #15, !dbg !498
  %32 = bitcast {} addrspace(10)* %box14 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !498
  %33 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %32, i64 0, i64 0, !dbg !498
  store {} addrspace(10)* %31, {} addrspace(10)* addrspace(10)* %33, align 8, !dbg !498, !tbaa !57, !alias.scope !61, !noalias !499
  %34 = addrspacecast {} addrspace(10)* %box14 to {} addrspace(12)*, !dbg !498
  call void @ijl_throw({} addrspace(12)* %34) #17, !dbg !498
  unreachable, !dbg !498

L115:                                             ; preds = %L31.lr.ph
  %35 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !502
  %36 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !502
  %memcpy_refined_dst53 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %18, i64 0, i64 0, i64 0, !dbg !510
  store i64 %arraylen.pre, i64* %memcpy_refined_dst53, align 8, !dbg !510, !tbaa !82, !alias.scope !84, !noalias !512
  %37 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraylen.pre), !dbg !513
  %38 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 0, !dbg !513
  store {} addrspace(10)* %37, {} addrspace(10)** %38, align 8, !dbg !513
  %39 = mul i64 %arraylen.pre, 8, !dbg !513
  %40 = bitcast {} addrspace(10)* %37 to i8 addrspace(13)* addrspace(10)*, !dbg !513
  %41 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %40, align 8, !dbg !513
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %41, i8 0, i64 %39, i1 false), !dbg !513
  %42 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4724560144 to {}*) to {} addrspace(10)*), i64 %arraylen.pre) #18, !dbg !513
  %43 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 1, !dbg !521
  store {} addrspace(10)* %42, {} addrspace(10)** %43, align 8, !dbg !521
  %44 = addrspacecast {} addrspace(10)* %42 to {} addrspace(11)*, !dbg !521
  %45 = bitcast {} addrspace(10)* %42 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !521
  %46 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %45 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !521
  %arraylen_ptr63 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %46, i64 0, i32 1, !dbg !521
  %arraylen64 = load i64, i64 addrspace(11)* %arraylen_ptr63, align 8, !dbg !521, !tbaa !28, !range !31, !alias.scope !525, !noalias !528
  %.not.not = icmp eq i64 %arraylen64, %arraylen.pre, !dbg !530
  br i1 %.not.not, label %L161, label %L287, !dbg !523

L161:                                             ; preds = %L115
  %.not = icmp eq {} addrspace(11)* %44, %.phi.trans.insert, !dbg !534
  br i1 %.not, label %L177, label %L164, !dbg !534

L164:                                             ; preds = %L161
  %47 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %44) #19, !dbg !539
  %48 = bitcast {}* %47 to i8**, !dbg !539
  %arrayptr136 = load i8*, i8** %48, align 8, !dbg !539, !tbaa !129, !alias.scope !525, !noalias !528, !nonnull !10
  %49 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %.phi.trans.insert) #19, !dbg !539
  %50 = bitcast {}* %49 to i8**, !dbg !539
  %arrayptr138 = load i8*, i8** %50, align 8, !dbg !539, !tbaa !129, !alias.scope !476, !noalias !479, !nonnull !10
  %.not226 = icmp eq i8* %arrayptr136, %arrayptr138, !dbg !544
  %51 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 6, !dbg !543
  store i1 %.not226, i1* %51, align 1, !dbg !543
  br i1 %.not226, label %L172, label %L177, !dbg !543

L172:                                             ; preds = %L164
  %52 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'"), !dbg !547
  %53 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 2, !dbg !547
  store {} addrspace(10)* %52, {} addrspace(10)** %53, align 8, !dbg !547
  %54 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !547
  %55 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %54, i32 0, i32 3, !dbg !547
  %56 = load i16, i16 addrspace(10)* %55, align 2, !dbg !547
  %57 = zext i16 %56 to i64, !dbg !547
  %58 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !547
  %59 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %58, i32 0, i32 1, !dbg !547
  %60 = load i64, i64 addrspace(10)* %59, align 8, !dbg !547
  %61 = mul i64 %60, %57, !dbg !547
  %62 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !547
  %63 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %62, align 8, !dbg !547
  %64 = bitcast {} addrspace(10)* %52 to i8 addrspace(13)* addrspace(10)*, !dbg !547
  %65 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %64, align 8, !dbg !547
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %65, i8 0, i64 %61, i1 false), !dbg !547
  %66 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %0) #14, !dbg !547
  %"'ipc20" = bitcast {} addrspace(10)* %52 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %67 = bitcast {} addrspace(10)* %66 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %68 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 7
  store { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %67, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %68, align 8
  %.phi.trans.insert201 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %67 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr68.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert201, i64 0, i32 1
  %arraylen69.pre = load i64, i64 addrspace(11)* %arraylen_ptr68.phi.trans.insert, align 8, !dbg !549, !tbaa !28, !range !31, !alias.scope !553, !noalias !556
  br label %L177, !dbg !558

L177:                                             ; preds = %L172, %L164, %L161
  %69 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc20", %L172 ], [ %"'ipc21", %L161 ], [ %"'ipc21", %L164 ], !dbg !549
  %nodecayed..pre-phi203 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %67, %L172 ], [ %23, %L161 ], [ %23, %L164 ], !dbg !549
  %arraylen69 = phi i64 [ %arraylen69.pre, %L172 ], [ %arraylen.pre, %L161 ], [ %arraylen.pre, %L164 ], !dbg !549
  %"'ipc22" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %69 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !565
  %70 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi203 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !565
  %71 = icmp eq i64 %arraylen69, 1, !dbg !565
  %72 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 8, !dbg !569
  store i1 %71, i1* %72, align 1, !dbg !569
  %.not215 = icmp eq {} addrspace(11)* %44, %35, !dbg !569
  br i1 %.not215, label %L202, label %L189, !dbg !569

L189:                                             ; preds = %L177
  %73 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %44) #19, !dbg !572
  %74 = bitcast {}* %73 to i8**, !dbg !572
  %arrayptr131 = load i8*, i8** %74, align 8, !dbg !572, !tbaa !129, !alias.scope !525, !noalias !528, !nonnull !10
  %75 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %35) #19, !dbg !572
  %76 = bitcast {}* %75 to i8**, !dbg !572
  %arrayptr133 = load i8*, i8** %76, align 8, !dbg !572, !tbaa !129, !alias.scope !481, !noalias !484, !nonnull !10
  %.not225 = icmp eq i8* %arrayptr131, %arrayptr133, !dbg !577
  %77 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 9, !dbg !576
  store i1 %.not225, i1* %77, align 1, !dbg !576
  br i1 %.not225, label %L197, label %L202, !dbg !576

L197:                                             ; preds = %L189
  %78 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'1"), !dbg !580
  %79 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 3, !dbg !580
  store {} addrspace(10)* %78, {} addrspace(10)** %79, align 8, !dbg !580
  %80 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !580
  %81 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %80, i32 0, i32 3, !dbg !580
  %82 = load i16, i16 addrspace(10)* %81, align 2, !dbg !580
  %83 = zext i16 %82 to i64, !dbg !580
  %84 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !580
  %85 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %84, i32 0, i32 1, !dbg !580
  %86 = load i64, i64 addrspace(10)* %85, align 8, !dbg !580
  %87 = mul i64 %86, %83, !dbg !580
  %88 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !580
  %89 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %88, align 8, !dbg !580
  %90 = bitcast {} addrspace(10)* %78 to i8 addrspace(13)* addrspace(10)*, !dbg !580
  %91 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %90, align 8, !dbg !580
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %91, i8 0, i64 %87, i1 false), !dbg !580
  %92 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %1) #14, !dbg !580
  %"'ipc16" = bitcast {} addrspace(10)* %78 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !582
  %93 = bitcast {} addrspace(10)* %92 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !582
  %94 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 10, !dbg !558
  store { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %93, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %94, align 8, !dbg !558
  br label %L202, !dbg !558

L202:                                             ; preds = %L197, %L189, %L177
  %95 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc16", %L197 ], [ %"'ipc17", %L189 ], [ %"'ipc17", %L177 ], !dbg !582
  %nodecayed..pre-phi206 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %93, %L197 ], [ %25, %L189 ], [ %25, %L177 ], !dbg !582
  %"'ipc18" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %95 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !582
  %96 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi206 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !582
  %arraylen_ptr73 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %96, i64 0, i32 1, !dbg !582
  %arraylen74 = load i64, i64 addrspace(11)* %arraylen_ptr73, align 8, !dbg !582, !tbaa !28, !range !31, !alias.scope !586, !noalias !589
  %97 = icmp eq i64 %arraylen74, 1, !dbg !591
  %98 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 11, !dbg !595
  store i1 %97, i1* %98, align 1, !dbg !595
  %.not216 = icmp eq {} addrspace(11)* %44, %36, !dbg !595
  br i1 %.not216, label %L227, label %L214, !dbg !595

L214:                                             ; preds = %L202
  %99 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %44) #19, !dbg !598
  %100 = bitcast {}* %99 to i8**, !dbg !598
  %arrayptr126 = load i8*, i8** %100, align 8, !dbg !598, !tbaa !129, !alias.scope !525, !noalias !528, !nonnull !10
  %101 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %36) #19, !dbg !598
  %102 = bitcast {}* %101 to i8**, !dbg !598
  %arrayptr128 = load i8*, i8** %102, align 8, !dbg !598, !tbaa !129, !alias.scope !493, !noalias !496, !nonnull !10
  %.not224 = icmp eq i8* %arrayptr126, %arrayptr128, !dbg !603
  %103 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 12, !dbg !602
  store i1 %.not224, i1* %103, align 1, !dbg !602
  br i1 %.not224, label %L222, label %L227, !dbg !602

L222:                                             ; preds = %L214
  %104 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'2"), !dbg !606
  %105 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 4, !dbg !606
  store {} addrspace(10)* %104, {} addrspace(10)** %105, align 8, !dbg !606
  %106 = bitcast {} addrspace(10)* %2 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !606
  %107 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %106, i32 0, i32 3, !dbg !606
  %108 = load i16, i16 addrspace(10)* %107, align 2, !dbg !606
  %109 = zext i16 %108 to i64, !dbg !606
  %110 = bitcast {} addrspace(10)* %2 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !606
  %111 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %110, i32 0, i32 1, !dbg !606
  %112 = load i64, i64 addrspace(10)* %111, align 8, !dbg !606
  %113 = mul i64 %112, %109, !dbg !606
  %114 = bitcast {} addrspace(10)* %"'2" to i8 addrspace(13)* addrspace(10)*, !dbg !606
  %115 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %114, align 8, !dbg !606
  %116 = bitcast {} addrspace(10)* %104 to i8 addrspace(13)* addrspace(10)*, !dbg !606
  %117 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %116, align 8, !dbg !606
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %117, i8 0, i64 %113, i1 false), !dbg !606
  %118 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %2) #14, !dbg !606
  %"'ipc12" = bitcast {} addrspace(10)* %104 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !608
  %119 = bitcast {} addrspace(10)* %118 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !608
  %120 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 13, !dbg !558
  store { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %119, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %120, align 8, !dbg !558
  br label %L227, !dbg !558

L227:                                             ; preds = %L222, %L214, %L202
  %121 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc12", %L222 ], [ %"'ipc13", %L214 ], [ %"'ipc13", %L202 ], !dbg !608
  %nodecayed..pre-phi210 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %119, %L222 ], [ %28, %L214 ], [ %28, %L202 ], !dbg !608
  %"'ipc14" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %121 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !608
  %122 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi210 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !608
  %arraylen_ptr79 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %122, i64 0, i32 1, !dbg !608
  %arraylen80 = load i64, i64 addrspace(11)* %arraylen_ptr79, align 8, !dbg !608, !tbaa !28, !range !31, !alias.scope !612, !noalias !615
  %123 = icmp eq i64 %arraylen80, 1, !dbg !617
  %124 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 14, !dbg !621
  store i1 %123, i1* %124, align 1, !dbg !621
  %125 = icmp eq i64 %arraylen.pre, 0, !dbg !621
  br i1 %125, label %L297, label %L249.lr.ph, !dbg !622

L249.lr.ph:                                       ; preds = %L227
  %"'ipc23" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc22" to double addrspace(13)* addrspace(11)*
  %126 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %70 to double addrspace(13)* addrspace(11)*
  %"arrayptr218'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc23", align 8, !tbaa !129, !alias.scope !624, !noalias !629, !nonnull !10
  %arrayptr218 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %126, align 8, !tbaa !129, !alias.scope !631, !noalias !632, !nonnull !10
  %"'ipc19" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc18" to double addrspace(13)* addrspace(11)*
  %127 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %96 to double addrspace(13)* addrspace(11)*
  %"arrayptr89219'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc19", align 8, !tbaa !129, !alias.scope !633, !noalias !634, !nonnull !10
  %arrayptr89219 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %127, align 8, !tbaa !129, !alias.scope !635, !noalias !589, !nonnull !10
  %"'ipc15" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc14" to double addrspace(13)* addrspace(11)*
  %128 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %122 to double addrspace(13)* addrspace(11)*
  %"arrayptr93220'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc15", align 8, !tbaa !129, !alias.scope !636, !noalias !637, !nonnull !10
  %arrayptr93220 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %128, align 8, !tbaa !129, !alias.scope !638, !noalias !615, !nonnull !10
  %"'ipc" = bitcast {} addrspace(10)* %37 to double addrspace(13)* addrspace(10)*
  %129 = bitcast {} addrspace(10)* %42 to double addrspace(13)* addrspace(10)*
  %"'ipc11" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %130 = addrspacecast double addrspace(13)* addrspace(10)* %129 to double addrspace(13)* addrspace(11)*
  %"arrayptr96221'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc11", align 8, !tbaa !129, !alias.scope !639, !noalias !640, !nonnull !10
  %arrayptr96221 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %130, align 8, !tbaa !129, !alias.scope !641, !noalias !528, !nonnull !10
  %131 = add nsw i64 %arraylen.pre, -1, !dbg !642
  br label %L249, !dbg !642

L249:                                             ; preds = %L249, %L249.lr.ph
  %iv = phi i64 [ %iv.next, %L249 ], [ 0, %L249.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !643
  %132 = select i1 %71, i64 0, i64 %iv, !dbg !646
  %133 = getelementptr inbounds double, double addrspace(13)* %arrayptr218, i64 %132, !dbg !646
  %arrayref = load double, double addrspace(13)* %133, align 8, !dbg !646, !tbaa !233, !alias.scope !653, !noalias !656
  %134 = select i1 %97, i64 0, i64 %iv, !dbg !658
  %135 = getelementptr inbounds double, double addrspace(13)* %arrayptr89219, i64 %134, !dbg !658
  %arrayref90 = load double, double addrspace(13)* %135, align 8, !dbg !658, !tbaa !233, !alias.scope !661, !noalias !664
  %136 = select i1 %123, i64 0, i64 %iv, !dbg !666
  %137 = getelementptr inbounds double, double addrspace(13)* %arrayptr93220, i64 %136, !dbg !666
  %arrayref94 = load double, double addrspace(13)* %137, align 8, !dbg !666, !tbaa !233, !alias.scope !669, !noalias !672
  %138 = fadd double %arrayref, %arrayref90, !dbg !674
  %139 = fadd double %138, %arrayref94, !dbg !674
  %140 = getelementptr inbounds double, double addrspace(13)* %arrayptr96221, i64 %iv, !dbg !678
  store double %139, double addrspace(13)* %140, align 8, !dbg !678, !tbaa !233, !alias.scope !679, !noalias !682
  %exitcond.not = icmp eq i64 %iv.next, %arraylen.pre, !dbg !684
  br i1 %exitcond.not, label %L297.loopexit, label %L249, !dbg !642, !llvm.loop !685

L287:                                             ; preds = %L115
  %141 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %19, i64 0, i64 0, i64 0, !dbg !686
  store i64 %arraylen64, i64* %141, align 8, !dbg !686, !tbaa !82, !alias.scope !84, !noalias !512
  %142 = addrspacecast [1 x [1 x i64]]* %19 to [1 x [1 x i64]] addrspace(11)*, !dbg !523
  %143 = addrspacecast [1 x [1 x i64]]* %18 to [1 x [1 x i64]] addrspace(11)*, !dbg !523
  call fastcc void @julia_throwdm_6109([1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %142, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %143) #17, !dbg !523
  unreachable, !dbg !523

L297.loopexit:                                    ; preds = %L249
  br label %L297, !dbg !690

L297:                                             ; preds = %L297.loopexit, %L227
  %arraylen101 = load i64, i64 addrspace(11)* %arraylen_ptr.phi.trans.insert, align 8, !dbg !690, !tbaa !28, !range !31, !alias.scope !476, !noalias !479
  %arraylen104 = load i64, i64 addrspace(11)* %arraylen_ptr4235, align 8, !dbg !696, !tbaa !28, !range !31, !alias.scope !481, !noalias !484
  %arraylen107 = load i64, i64 addrspace(11)* %arraylen_ptr4, align 8, !dbg !696, !tbaa !28, !range !31, !alias.scope !493, !noalias !496
  %144 = icmp eq i64 %arraylen107, %arraylen104, !dbg !699
  %145 = icmp eq i64 %arraylen104, 1, !dbg !701
  %value_phi109 = or i1 %145, %144, !dbg !701
  %146 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 15, !dbg !702
  store i1 %value_phi109, i1* %146, align 1, !dbg !702
  br i1 %value_phi109, label %L333, label %L314, !dbg !702

L314:                                             ; preds = %L297
  %.not223 = icmp eq i64 %arraylen107, 1, !dbg !701
  br i1 %.not223, label %L333, label %L322, !dbg !702

L322:                                             ; preds = %L314
  %147 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen104) #18, !dbg !702
  %148 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen107) #18, !dbg !702
  %149 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4773853616 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4729112992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4818754768 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %147, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4818754736 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %148) #16, !dbg !702
  %box122 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #15, !dbg !702
  %150 = bitcast {} addrspace(10)* %box122 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !702
  %151 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %150, i64 0, i64 0, !dbg !702
  store {} addrspace(10)* %149, {} addrspace(10)* addrspace(10)* %151, align 8, !dbg !702, !tbaa !57, !alias.scope !61, !noalias !499
  %152 = addrspacecast {} addrspace(10)* %box122 to {} addrspace(12)*, !dbg !702
  call void @ijl_throw({} addrspace(12)* %152) #17, !dbg !702
  unreachable, !dbg !702

L333:                                             ; preds = %L314, %L297
  %value_phi110 = phi i64 [ %arraylen107, %L297 ], [ %arraylen104, %L314 ]
  %153 = icmp eq i64 %value_phi110, %arraylen101, !dbg !705
  %154 = icmp eq i64 %arraylen101, 1, !dbg !707
  %value_phi114 = or i1 %154, %153, !dbg !707
  %.not222 = icmp eq i64 %value_phi110, 1
  %or.cond = or i1 %.not222, %value_phi114, !dbg !708
  br i1 %or.cond, label %L359, label %L349, !dbg !708

L349:                                             ; preds = %L333
  %155 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen101) #18, !dbg !708
  %156 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %value_phi110) #18, !dbg !708
  %157 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4773853616 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4729112992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4818754768 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %155, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4818754736 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %156) #16, !dbg !708
  %box117 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #15, !dbg !708
  %158 = bitcast {} addrspace(10)* %box117 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !708
  %159 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %158, i64 0, i64 0, !dbg !708
  store {} addrspace(10)* %157, {} addrspace(10)* addrspace(10)* %159, align 8, !dbg !708, !tbaa !57, !alias.scope !61, !noalias !499
  %160 = addrspacecast {} addrspace(10)* %box117 to {} addrspace(12)*, !dbg !708
  call void @ijl_throw({} addrspace(12)* %160) #17, !dbg !708
  unreachable, !dbg !708

L359:                                             ; preds = %L333
  %161 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 1, !dbg !509
  store {} addrspace(10)* %42, {} addrspace(10)** %161, align 8, !dbg !509
  %162 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 2, !dbg !509
  store {} addrspace(10)* %37, {} addrspace(10)** %162, align 8, !dbg !509
  %163 = load { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %3, align 8, !dbg !509
  ret { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %163, !dbg !509
}

; Function Attrs: mustprogress willreturn
define internal void @diffejulia___6104({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg) local_unnamed_addr #12 !dbg !713 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %3 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"'de64" = alloca double, align 8
  %4 = getelementptr double, double* %"'de64", i64 0
  store double 0.000000e+00, double* %4, align 8
  %"arrayref94'de" = alloca double, align 8
  %5 = getelementptr double, double* %"arrayref94'de", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"arrayref'de" = alloca double, align 8
  %6 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"arrayref90'de" = alloca double, align 8
  %7 = getelementptr double, double* %"arrayref90'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %8 = bitcast {} addrspace(10)* %2 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %9 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %8, i32 0, i32 3
  %10 = load i16, i16 addrspace(10)* %9, align 2
  %11 = zext i16 %10 to i64
  %12 = bitcast {} addrspace(10)* %2 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %13 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %12, i32 0, i32 1
  %14 = load i64, i64 addrspace(10)* %13, align 8
  %15 = mul i64 %14, %11
  %16 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %17 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %16, i32 0, i32 3
  %18 = load i16, i16 addrspace(10)* %17, align 2
  %19 = zext i16 %18 to i64
  %20 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %21 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %20, i32 0, i32 1
  %22 = load i64, i64 addrspace(10)* %21, align 8
  %23 = mul i64 %22, %19
  %24 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %25 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %24, i32 0, i32 3
  %26 = load i16, i16 addrspace(10)* %25, align 2
  %27 = zext i16 %26 to i64
  %28 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %29 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %28, i32 0, i32 1
  %30 = load i64, i64 addrspace(10)* %29, align 8
  %31 = mul i64 %30, %27
  %32 = call {}*** @julia.get_pgcstack() #16
  %.phi.trans.insert = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*
  %"'ipc58" = bitcast {} addrspace(10)* %"'" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %33 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %arraylen.pre = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 5, !dbg !714
  %"'ipc53" = bitcast {} addrspace(10)* %"'1" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !714
  %34 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !714
  br i1 true, label %L31.lr.ph, label %L24, !dbg !718

L31.lr.ph:                                        ; preds = %top
  %"'ipc48" = bitcast {} addrspace(10)* %"'2" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !719
  %35 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !719
  br i1 true, label %L115, label %L24, !dbg !718

L24:                                              ; preds = %L31.lr.ph, %top
  unreachable

L115:                                             ; preds = %L31.lr.ph
  %36 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !722
  %37 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !722
  %38 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 0, !dbg !730
  %39 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 1, !dbg !730
  %40 = addrspacecast {} addrspace(10)* %39 to {} addrspace(11)*, !dbg !738
  br i1 true, label %L161, label %L287, !dbg !740

L161:                                             ; preds = %L115
  %.not = icmp eq {} addrspace(11)* %40, %.phi.trans.insert, !dbg !742
  br i1 %.not, label %L177, label %L164, !dbg !742

L164:                                             ; preds = %L161
  %.not226 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 6, !dbg !747
  br i1 %.not226, label %L172, label %L177, !dbg !747

L172:                                             ; preds = %L164
  %"'ip_phi4" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 2, !dbg !748
  %"'ipc57" = bitcast {} addrspace(10)* %"'ip_phi4" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %41 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 7
  br label %L177, !dbg !750

L177:                                             ; preds = %L172, %L164, %L161
  %42 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc57", %L172 ], [ %"'ipc58", %L161 ], [ %"'ipc58", %L164 ], !dbg !757
  %"'ipc59" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %42 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !761
  %43 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 8, !dbg !765
  %.not215 = icmp eq {} addrspace(11)* %40, %36, !dbg !765
  br i1 %.not215, label %L202, label %L189, !dbg !765

L189:                                             ; preds = %L177
  %.not225 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 9, !dbg !768
  br i1 %.not225, label %L197, label %L202, !dbg !768

L197:                                             ; preds = %L189
  %"'ip_phi7" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 3, !dbg !769
  %"'ipc52" = bitcast {} addrspace(10)* %"'ip_phi7" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !771
  %44 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 10, !dbg !771
  br label %L202, !dbg !750

L202:                                             ; preds = %L197, %L189, %L177
  %45 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc52", %L197 ], [ %"'ipc53", %L189 ], [ %"'ipc53", %L177 ], !dbg !771
  %"'ipc54" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %45 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !771
  %46 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 11, !dbg !775
  %.not216 = icmp eq {} addrspace(11)* %40, %37, !dbg !775
  br i1 %.not216, label %L227, label %L214, !dbg !775

L214:                                             ; preds = %L202
  %.not224 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 12, !dbg !778
  br i1 %.not224, label %L222, label %L227, !dbg !778

L222:                                             ; preds = %L214
  %"'ip_phi10" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 4, !dbg !779
  %"'ipc47" = bitcast {} addrspace(10)* %"'ip_phi10" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !781
  %47 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 13, !dbg !781
  br label %L227, !dbg !750

L227:                                             ; preds = %L222, %L214, %L202
  %48 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc47", %L222 ], [ %"'ipc48", %L214 ], [ %"'ipc48", %L202 ], !dbg !781
  %"'ipc49" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %48 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !781
  %49 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 14, !dbg !785
  %50 = icmp eq i64 %arraylen.pre, 0, !dbg !785
  br i1 %50, label %L297, label %L249.lr.ph, !dbg !786

L249.lr.ph:                                       ; preds = %L227
  %"'ipc60" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc59" to double addrspace(13)* addrspace(11)*
  %"arrayptr218'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc60", align 8, !tbaa !129, !alias.scope !788, !noalias !791, !nonnull !10, !invariant.group !793
  %"'ipc55" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc54" to double addrspace(13)* addrspace(11)*
  %"arrayptr89219'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc55", align 8, !tbaa !129, !alias.scope !794, !noalias !797, !nonnull !10, !invariant.group !799
  %"'ipc50" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc49" to double addrspace(13)* addrspace(11)*
  %"arrayptr93220'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc50", align 8, !tbaa !129, !alias.scope !800, !noalias !803, !nonnull !10, !invariant.group !805
  %"'ipc" = bitcast {} addrspace(10)* %38 to double addrspace(13)* addrspace(10)*
  %"'ipc44" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr96221'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc44", align 8, !tbaa !129, !alias.scope !806, !noalias !809, !nonnull !10, !invariant.group !811
  %51 = add nsw i64 %arraylen.pre, -1, !dbg !812
  br label %L249, !dbg !812

L249:                                             ; preds = %L249, %L249.lr.ph
  %iv = phi i64 [ %iv.next, %L249 ], [ 0, %L249.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !813
  %52 = select i1 %43, i64 0, i64 %iv, !dbg !816
  %"'ipg71" = getelementptr inbounds double, double addrspace(13)* %"arrayptr218'ipl", i64 %52, !dbg !816
  %53 = select i1 %46, i64 0, i64 %iv, !dbg !823
  %"'ipg68" = getelementptr inbounds double, double addrspace(13)* %"arrayptr89219'ipl", i64 %53, !dbg !823
  %54 = select i1 %49, i64 0, i64 %iv, !dbg !826
  %"'ipg66" = getelementptr inbounds double, double addrspace(13)* %"arrayptr93220'ipl", i64 %54, !dbg !826
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr96221'ipl", i64 %iv, !dbg !829
  %exitcond.not = icmp eq i64 %iv.next, %arraylen.pre, !dbg !830
  br i1 %exitcond.not, label %L297.loopexit, label %L249, !dbg !812, !llvm.loop !831

L287:                                             ; preds = %L115
  unreachable

L297.loopexit:                                    ; preds = %L249
  br label %L297, !dbg !832

L297:                                             ; preds = %L297.loopexit, %L227
  %value_phi109 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 15, !dbg !838
  br i1 %value_phi109, label %L333, label %L314, !dbg !838

L314:                                             ; preds = %L297
  br i1 true, label %L333, label %L322, !dbg !838

L322:                                             ; preds = %L314
  unreachable

L333:                                             ; preds = %L314, %L297
  br i1 true, label %L359, label %L349, !dbg !842

L349:                                             ; preds = %L333
  unreachable

L359:                                             ; preds = %L333
  br label %invertL359, !dbg !729

inverttop:                                        ; preds = %invertL31.lr.ph
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL31.lr.ph:                                  ; preds = %invertL115
  br label %inverttop

invertL115:                                       ; preds = %invertL161
  br label %invertL31.lr.ph

invertL161:                                       ; preds = %invertL177, %invertL164
  br label %invertL115

invertL164:                                       ; preds = %staging, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  br label %invertL161

invertL172:                                       ; preds = %staging
  %55 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 2, !dbg !748
  %56 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !748
  %57 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %56, align 8, !dbg !748
  %58 = bitcast {} addrspace(10)* %55 to i8 addrspace(13)* addrspace(10)*, !dbg !748
  %59 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %58, align 8, !dbg !748
  %60 = bitcast i8 addrspace(13)* %59 to double addrspace(13)*, !dbg !748
  %61 = bitcast i8 addrspace(13)* %57 to double addrspace(13)*, !dbg !748
  %62 = udiv i64 %31, 8, !dbg !748
  %63 = icmp eq i64 %62, 0, !dbg !748
  br i1 %63, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !748

for.body.i:                                       ; preds = %for.body.i, %invertL172
  %idx.i = phi i64 [ 0, %invertL172 ], [ %idx.next.i, %for.body.i ], !dbg !748
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %60, i64 %idx.i, !dbg !748
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !748
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !748
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %61, i64 %idx.i, !dbg !748
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !748
  %64 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !748
  store double %64, double addrspace(13)* %src.i.i, align 1, !dbg !748
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !748
  %65 = icmp eq i64 %62, %idx.next.i, !dbg !748
  br i1 %65, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !748

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL172, %for.body.i
  br label %invertL164

invertL177:                                       ; preds = %invertL202, %invertL189
  %.not226_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 6
  br i1 %.not, label %invertL161, label %staging

invertL189:                                       ; preds = %staging36, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit103
  br label %invertL177

invertL197:                                       ; preds = %staging36
  %66 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 3, !dbg !769
  %67 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !769
  %68 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %67, align 8, !dbg !769
  %69 = bitcast {} addrspace(10)* %66 to i8 addrspace(13)* addrspace(10)*, !dbg !769
  %70 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %69, align 8, !dbg !769
  %71 = bitcast i8 addrspace(13)* %70 to double addrspace(13)*, !dbg !769
  %72 = bitcast i8 addrspace(13)* %68 to double addrspace(13)*, !dbg !769
  %73 = udiv i64 %23, 8, !dbg !769
  %74 = icmp eq i64 %73, 0, !dbg !769
  br i1 %74, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit103, label %for.body.i102, !dbg !769

for.body.i102:                                    ; preds = %for.body.i102, %invertL197
  %idx.i96 = phi i64 [ 0, %invertL197 ], [ %idx.next.i101, %for.body.i102 ], !dbg !769
  %dst.i.i97 = getelementptr inbounds double, double addrspace(13)* %71, i64 %idx.i96, !dbg !769
  %dst.i.l.i98 = load double, double addrspace(13)* %dst.i.i97, align 1, !dbg !769
  store double 0.000000e+00, double addrspace(13)* %dst.i.i97, align 1, !dbg !769
  %src.i.i99 = getelementptr inbounds double, double addrspace(13)* %72, i64 %idx.i96, !dbg !769
  %src.i.l.i100 = load double, double addrspace(13)* %src.i.i99, align 1, !dbg !769
  %75 = fadd fast double %src.i.l.i100, %dst.i.l.i98, !dbg !769
  store double %75, double addrspace(13)* %src.i.i99, align 1, !dbg !769
  %idx.next.i101 = add nuw i64 %idx.i96, 1, !dbg !769
  %76 = icmp eq i64 %73, %idx.next.i101, !dbg !769
  br i1 %76, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit103, label %for.body.i102, !dbg !769

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit103: ; preds = %invertL197, %for.body.i102
  br label %invertL189

invertL202:                                       ; preds = %invertL227, %invertL214
  %.not225_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 9
  br i1 %.not215, label %invertL177, label %staging36

invertL214:                                       ; preds = %staging43, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit111
  br label %invertL202

invertL222:                                       ; preds = %staging43
  %77 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 4, !dbg !779
  %78 = bitcast {} addrspace(10)* %"'2" to i8 addrspace(13)* addrspace(10)*, !dbg !779
  %79 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %78, align 8, !dbg !779
  %80 = bitcast {} addrspace(10)* %77 to i8 addrspace(13)* addrspace(10)*, !dbg !779
  %81 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %80, align 8, !dbg !779
  %82 = bitcast i8 addrspace(13)* %81 to double addrspace(13)*, !dbg !779
  %83 = bitcast i8 addrspace(13)* %79 to double addrspace(13)*, !dbg !779
  %84 = udiv i64 %15, 8, !dbg !779
  %85 = icmp eq i64 %84, 0, !dbg !779
  br i1 %85, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit111, label %for.body.i110, !dbg !779

for.body.i110:                                    ; preds = %for.body.i110, %invertL222
  %idx.i104 = phi i64 [ 0, %invertL222 ], [ %idx.next.i109, %for.body.i110 ], !dbg !779
  %dst.i.i105 = getelementptr inbounds double, double addrspace(13)* %82, i64 %idx.i104, !dbg !779
  %dst.i.l.i106 = load double, double addrspace(13)* %dst.i.i105, align 1, !dbg !779
  store double 0.000000e+00, double addrspace(13)* %dst.i.i105, align 1, !dbg !779
  %src.i.i107 = getelementptr inbounds double, double addrspace(13)* %83, i64 %idx.i104, !dbg !779
  %src.i.l.i108 = load double, double addrspace(13)* %src.i.i107, align 1, !dbg !779
  %86 = fadd fast double %src.i.l.i108, %dst.i.l.i106, !dbg !779
  store double %86, double addrspace(13)* %src.i.i107, align 1, !dbg !779
  %idx.next.i109 = add nuw i64 %idx.i104, 1, !dbg !779
  %87 = icmp eq i64 %84, %idx.next.i109, !dbg !779
  br i1 %87, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit111, label %for.body.i110, !dbg !779

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit111: ; preds = %invertL222, %for.body.i110
  br label %invertL214

invertL227:                                       ; preds = %invertL297, %invertL249.lr.ph
  %.not224_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 12
  br i1 %.not216, label %invertL202, label %staging43

invertL249.lr.ph:                                 ; preds = %invertL249
  br label %invertL227

invertL249:                                       ; preds = %mergeinvertL249_L297.loopexit, %incinvertL249
  %88 = load i64, i64* %"iv'ac", align 8, !dbg !829
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %38 to double addrspace(13)* addrspace(10)*, !dbg !829
  %"'ipc44_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !829
  %"arrayptr96221'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc44_unwrap", align 8, !tbaa !129, !alias.scope !806, !noalias !809, !nonnull !10, !invariant.group !811
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr96221'ipl_unwrap", i64 %88, !dbg !829
  %89 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !829, !tbaa !233, !alias.scope !845, !noalias !848
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !829, !tbaa !233, !alias.scope !845, !noalias !848
  %90 = load double, double* %"'de", align 8, !dbg !829
  %91 = fadd fast double %90, %89, !dbg !829
  store double %91, double* %"'de", align 8, !dbg !829
  %92 = load double, double* %"'de", align 8, !dbg !850
  store double 0.000000e+00, double* %"'de", align 8, !dbg !850
  %93 = load double, double* %"'de64", align 8, !dbg !850
  %94 = fadd fast double %93, %92, !dbg !850
  store double %94, double* %"'de64", align 8, !dbg !850
  %95 = load double, double* %"arrayref94'de", align 8, !dbg !850
  %96 = fadd fast double %95, %92, !dbg !850
  store double %96, double* %"arrayref94'de", align 8, !dbg !850
  %97 = load double, double* %"'de64", align 8, !dbg !850
  store double 0.000000e+00, double* %"'de64", align 8, !dbg !850
  %98 = load double, double* %"arrayref'de", align 8, !dbg !850
  %99 = fadd fast double %98, %97, !dbg !850
  store double %99, double* %"arrayref'de", align 8, !dbg !850
  %100 = load double, double* %"arrayref90'de", align 8, !dbg !850
  %101 = fadd fast double %100, %97, !dbg !850
  store double %101, double* %"arrayref90'de", align 8, !dbg !850
  %102 = load double, double* %"arrayref94'de", align 8, !dbg !826
  store double 0.000000e+00, double* %"arrayref94'de", align 8, !dbg !826
  %103 = load i64, i64* %"iv'ac", align 8, !dbg !826
  %"'ipc50_unwrap" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc49" to double addrspace(13)* addrspace(11)*, !dbg !826
  %"arrayptr93220'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc50_unwrap", align 8, !tbaa !129, !alias.scope !800, !noalias !803, !nonnull !10, !invariant.group !805
  %_unwrap = select i1 %49, i64 0, i64 %103, !dbg !826
  %"'ipg66_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr93220'ipl_unwrap", i64 %_unwrap, !dbg !826
  %104 = load double, double addrspace(13)* %"'ipg66_unwrap", align 8, !dbg !826, !tbaa !233, !alias.scope !854, !noalias !857
  %105 = fadd fast double %104, %102, !dbg !826
  store double %105, double addrspace(13)* %"'ipg66_unwrap", align 8, !dbg !826, !tbaa !233, !alias.scope !854, !noalias !857
  %106 = load double, double* %"arrayref90'de", align 8, !dbg !823
  store double 0.000000e+00, double* %"arrayref90'de", align 8, !dbg !823
  %107 = load i64, i64* %"iv'ac", align 8, !dbg !823
  %"'ipc55_unwrap" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc54" to double addrspace(13)* addrspace(11)*, !dbg !823
  %"arrayptr89219'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc55_unwrap", align 8, !tbaa !129, !alias.scope !794, !noalias !797, !nonnull !10, !invariant.group !799
  %_unwrap69 = select i1 %46, i64 0, i64 %107, !dbg !823
  %"'ipg68_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr89219'ipl_unwrap", i64 %_unwrap69, !dbg !823
  %108 = load double, double addrspace(13)* %"'ipg68_unwrap", align 8, !dbg !823, !tbaa !233, !alias.scope !859, !noalias !862
  %109 = fadd fast double %108, %106, !dbg !823
  store double %109, double addrspace(13)* %"'ipg68_unwrap", align 8, !dbg !823, !tbaa !233, !alias.scope !859, !noalias !862
  %110 = load double, double* %"arrayref'de", align 8, !dbg !816
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !816
  %111 = load i64, i64* %"iv'ac", align 8, !dbg !816
  %"'ipc60_unwrap" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc59" to double addrspace(13)* addrspace(11)*, !dbg !816
  %"arrayptr218'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc60_unwrap", align 8, !tbaa !129, !alias.scope !788, !noalias !791, !nonnull !10, !invariant.group !793
  %_unwrap72 = select i1 %43, i64 0, i64 %111, !dbg !816
  %"'ipg71_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr218'ipl_unwrap", i64 %_unwrap72, !dbg !816
  %112 = load double, double addrspace(13)* %"'ipg71_unwrap", align 8, !dbg !816, !tbaa !233, !alias.scope !864, !noalias !867
  %113 = fadd fast double %112, %110, !dbg !816
  store double %113, double addrspace(13)* %"'ipg71_unwrap", align 8, !dbg !816, !tbaa !233, !alias.scope !864, !noalias !867
  %114 = load i64, i64* %"iv'ac", align 8
  %115 = icmp eq i64 %114, 0
  %116 = xor i1 %115, true
  br i1 %115, label %invertL249.lr.ph, label %incinvertL249

incinvertL249:                                    ; preds = %invertL249
  %117 = load i64, i64* %"iv'ac", align 8
  %118 = add nsw i64 %117, -1
  store i64 %118, i64* %"iv'ac", align 8
  br label %invertL249

invertL297.loopexit:                              ; preds = %invertL297
  %_unwrap77 = add nsw i64 %arraylen.pre, -1
  br label %mergeinvertL249_L297.loopexit

mergeinvertL249_L297.loopexit:                    ; preds = %invertL297.loopexit
  store i64 %_unwrap77, i64* %"iv'ac", align 8
  br label %invertL249

invertL297:                                       ; preds = %invertL333, %invertL314
  br i1 %50, label %invertL227, label %invertL297.loopexit

invertL314:                                       ; preds = %invertL333
  br label %invertL297

invertL333:                                       ; preds = %invertL359
  br i1 %value_phi109, label %invertL297, label %invertL314

invertL359:                                       ; preds = %L359
  br label %invertL333

staging:                                          ; preds = %invertL177
  br i1 %.not226_unwrap, label %invertL172, label %invertL164

staging36:                                        ; preds = %invertL202
  br i1 %.not225_unwrap, label %invertL197, label %invertL189

staging43:                                        ; preds = %invertL227
  br i1 %.not224_unwrap, label %invertL222, label %invertL214
}

after simplification :
; Function Attrs: mustprogress nofree willreturn
define { [1 x {} addrspace(10)*] } @preprocess_julia_broadcasted_6244({} addrspace(10)* nofree noundef nonnull align 16 dereferenceable(40) %0) local_unnamed_addr #3 !dbg !21 {
top:
  %1 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %1, i64 2
  %2 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %2, align 8, !tbaa !8
  %3 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %3, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !22
  fence syncscope("singlethread") seq_cst
  %4 = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %0, 0, !dbg !23
  %5 = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %4, 0, !dbg !25
  ret { [1 x {} addrspace(10)*] } %5, !dbg !24
}

; Function Attrs: mustprogress nofree willreturn
define internal { [1 x {} addrspace(10)*] } @augmented_julia_broadcasted_6244({} addrspace(10)* nofree noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* nofree align 16 %"'") local_unnamed_addr #3 !dbg !27 {
top:
  %1 = alloca { [1 x {} addrspace(10)*] }, align 8
  %2 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %3, align 8, !tbaa !8, !alias.scope !28, !noalias !31
  %4 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !12, !invariant.load !7, !alias.scope !33, !noalias !36
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !38
  fence syncscope("singlethread") seq_cst
  %5 = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %0, 0, !dbg !39
  %6 = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %5, 0, !dbg !41
  store { [1 x {} addrspace(10)*] } %6, { [1 x {} addrspace(10)*] }* %1, align 8, !dbg !40
  %7 = load { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] }* %1, align 8, !dbg !40
  ret { [1 x {} addrspace(10)*] } %7, !dbg !40
}

; Function Attrs: mustprogress nofree willreturn
define internal void @diffejulia_broadcasted_6244({} addrspace(10)* nofree align 16 dereferenceable(40) %0, {} addrspace(10)* nofree align 16 %"'", { [1 x {} addrspace(10)*] } %differeturn) local_unnamed_addr #3 !dbg !45 {
top:
  %"'de" = alloca { [1 x {} addrspace(10)*] }, align 8
  %1 = getelementptr { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] }* %"'de", i64 0, i32 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %1, align 8
  %2 = call {}*** @julia.get_pgcstack() #5
  br label %inverttop, !dbg !46

inverttop:                                        ; preds = %top
  store { [1 x {} addrspace(10)*] } %differeturn, { [1 x {} addrspace(10)*] }* %"'de", align 8
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void
}

after simplification :
; Function Attrs: mustprogress nofree willreturn
define { [1 x {} addrspace(10)*] } @preprocess_julia_broadcasted_6283({} addrspace(10)* nofree noundef nonnull align 16 dereferenceable(40) %0) local_unnamed_addr #3 !dbg !21 {
top:
  %1 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %1, i64 2
  %2 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %2, align 8, !tbaa !8
  %3 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %3, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !22
  fence syncscope("singlethread") seq_cst
  %4 = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %0, 0, !dbg !23
  %5 = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %4, 0, !dbg !25
  ret { [1 x {} addrspace(10)*] } %5, !dbg !24
}

; Function Attrs: mustprogress nofree willreturn
define internal { [1 x {} addrspace(10)*] } @augmented_julia_broadcasted_6283({} addrspace(10)* nofree noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* nofree align 16 %"'") local_unnamed_addr #3 !dbg !27 {
top:
  %1 = alloca { [1 x {} addrspace(10)*] }, align 8
  %2 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %3, align 8, !tbaa !8, !alias.scope !28, !noalias !31
  %4 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !12, !invariant.load !7, !alias.scope !33, !noalias !36
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !38
  fence syncscope("singlethread") seq_cst
  %5 = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %0, 0, !dbg !39
  %6 = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %5, 0, !dbg !41
  store { [1 x {} addrspace(10)*] } %6, { [1 x {} addrspace(10)*] }* %1, align 8, !dbg !40
  %7 = load { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] }* %1, align 8, !dbg !40
  ret { [1 x {} addrspace(10)*] } %7, !dbg !40
}

; Function Attrs: mustprogress nofree willreturn
define internal void @diffejulia_broadcasted_6283({} addrspace(10)* nofree align 16 dereferenceable(40) %0, {} addrspace(10)* nofree align 16 %"'") local_unnamed_addr #3 !dbg !45 {
top:
  %1 = call {}*** @julia.get_pgcstack() #5
  br label %inverttop, !dbg !46

inverttop:                                        ; preds = %top
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void
}

after simplification :
; Function Attrs: mustprogress nofree willreturn
define { [1 x {} addrspace(10)*] } @preprocess_julia_broadcasted_6293({} addrspace(10)* nofree noundef nonnull align 16 dereferenceable(40) %0) local_unnamed_addr #3 !dbg !21 {
top:
  %1 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %1, i64 2
  %2 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %2, align 8, !tbaa !8
  %3 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %3, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !22
  fence syncscope("singlethread") seq_cst
  %4 = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %0, 0, !dbg !23
  %5 = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %4, 0, !dbg !25
  ret { [1 x {} addrspace(10)*] } %5, !dbg !24
}

; Function Attrs: mustprogress nofree willreturn
define internal { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } } @augmented_julia_broadcasted_6293({} addrspace(10)* nofree noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* nofree align 16 %"'") local_unnamed_addr #3 !dbg !27 {
top:
  %1 = alloca { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }, align 8
  %2 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %3, align 8, !tbaa !8, !alias.scope !28, !noalias !31
  %4 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !12, !invariant.load !7, !alias.scope !33, !noalias !36
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !38
  fence syncscope("singlethread") seq_cst
  %"'ipiv" = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %"'", 0, !dbg !39
  %5 = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %0, 0, !dbg !39
  %"'ipiv1" = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %"'ipiv", 0, !dbg !41
  %6 = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %5, 0, !dbg !41
  %7 = getelementptr inbounds { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }, { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }* %1, i32 0, i32 0, !dbg !40
  store { [1 x {} addrspace(10)*] } %6, { [1 x {} addrspace(10)*] }* %7, align 8, !dbg !40
  %8 = getelementptr inbounds { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }, { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }* %1, i32 0, i32 1, !dbg !40
  store { [1 x {} addrspace(10)*] } %"'ipiv1", { [1 x {} addrspace(10)*] }* %8, align 8, !dbg !40
  %9 = load { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }, { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }* %1, align 8, !dbg !40
  ret { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } } %9, !dbg !40
}

; Function Attrs: mustprogress nofree willreturn
define internal void @diffejulia_broadcasted_6293({} addrspace(10)* nofree align 16 dereferenceable(40) %0, {} addrspace(10)* nofree align 16 %"'") local_unnamed_addr #3 !dbg !45 {
top:
  %1 = call {}*** @julia.get_pgcstack() #5
  br label %inverttop, !dbg !46

inverttop:                                        ; preds = %top
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void
}

after simplification :
; Function Attrs: mustprogress willreturn
define noundef nonnull align 16 dereferenceable(40) {} addrspace(10)* @preprocess_julia_materialize__6344_inner.1({} addrspace(10)* noundef nonnull returned align 16 dereferenceable(40) %0, { [1 x {} addrspace(10)*] } %1) local_unnamed_addr #18 !dbg !271 {
entry:
  %.fca.0.0.extract = extractvalue { [1 x {} addrspace(10)*] } %1, 0, 0, !dbg !272
  %2 = call {}*** @julia.get_pgcstack() #19
  %ptls_field.i18 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field.i18 to i64***
  %ptls_load.i1920 = load i64**, i64*** %3, align 8, !tbaa !16
  %4 = getelementptr inbounds i64*, i64** %ptls_load.i1920, i64 2
  %safepoint.i = load i64*, i64** %4, align 8, !tbaa !20, !invariant.load !15
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint.i) #19, !dbg !273
  fence syncscope("singlethread") seq_cst
  %5 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !275
  %6 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !275
  %7 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %6 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !275
  %arraylen_ptr.i = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %7, i64 0, i32 1, !dbg !275
  %arraylen.i = load i64, i64 addrspace(11)* %arraylen_ptr.i, align 8, !dbg !275, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %8 = icmp ne {} addrspace(10)* %.fca.0.0.extract, null
  call void @llvm.assume(i1 noundef %8) #19
  %9 = addrspacecast {} addrspace(10)* %.fca.0.0.extract to {} addrspace(11)*, !dbg !279
  %10 = bitcast {} addrspace(10)* %.fca.0.0.extract to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !279
  %11 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %10 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !279
  %arraylen_ptr3.i = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %11, i64 0, i32 1, !dbg !279
  %arraylen4.i = load i64, i64 addrspace(11)* %arraylen_ptr3.i, align 8, !dbg !279, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %12 = icmp eq i64 %arraylen.i, %arraylen4.i, !dbg !283
  %13 = icmp eq i64 %arraylen4.i, 1, !dbg !287
  %value_phi.i = or i1 %12, %13, !dbg !287
  br i1 %value_phi.i, label %L35.i, label %L19.i, !dbg !288

L19.i:                                            ; preds = %entry
  %current_task1.i17 = getelementptr inbounds {}**, {}*** %2, i64 -14
  %current_task1.i = bitcast {}*** %current_task1.i17 to {}**
  call fastcc void @julia_DimensionMismatch_6351() #20, !dbg !288
  %box.i = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1.i, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #21, !dbg !288
  %14 = bitcast {} addrspace(10)* %box.i to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !288
  %15 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %14, i64 0, i64 0, !dbg !288
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857078480 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %15, align 8, !dbg !288, !tbaa !71, !alias.scope !75, !noalias !289
  %16 = addrspacecast {} addrspace(10)* %box.i to {} addrspace(12)*, !dbg !288
  call void @ijl_throw({} addrspace(12)* %16) #22, !dbg !288
  unreachable, !dbg !288

L35.i:                                            ; preds = %entry
  br i1 %12, label %L52.i, label %L55.i, !dbg !292

L52.i:                                            ; preds = %L35.i
  call fastcc void @julia__copyto_impl__6359({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %.fca.0.0.extract, i64 signext %arraylen.i) #19, !dbg !294
  br label %julia_materialize__6344_inner.exit, !dbg !297

L55.i:                                            ; preds = %L35.i
  %.not = icmp eq {} addrspace(11)* %5, %9, !dbg !298
  br i1 %.not, label %L72.i, label %L59.i, !dbg !298

L59.i:                                            ; preds = %L55.i
  %17 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %5) #23, !dbg !303
  %18 = bitcast {}* %17 to i8**, !dbg !303
  %arrayptr37.i = load i8*, i8** %18, align 8, !dbg !303, !tbaa !105, !alias.scope !51, !noalias !52, !nonnull !15
  %19 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %9) #23, !dbg !303
  %20 = bitcast {}* %19 to i8**, !dbg !303
  %arrayptr39.i = load i8*, i8** %20, align 8, !dbg !303, !tbaa !105, !alias.scope !51, !noalias !52, !nonnull !15
  %.not25 = icmp eq i8* %arrayptr37.i, %arrayptr39.i, !dbg !309
  br i1 %.not25, label %L67.i, label %L72.i, !dbg !312

L67.i:                                            ; preds = %L59.i
  %21 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %.fca.0.0.extract) #19, !dbg !313
  %22 = bitcast {} addrspace(10)* %21 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %22 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr25.i.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert12, i64 0, i32 1
  %arraylen26.i.pre = load i64, i64 addrspace(11)* %arraylen_ptr25.i.phi.trans.insert, align 8, !dbg !315, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  br label %L72.i, !dbg !312

L72.i:                                            ; preds = %L67.i, %L59.i, %L55.i
  %nodecayed..pre-phi16 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %22, %L67.i ], [ %10, %L59.i ], [ %10, %L55.i ], !dbg !315
  %arraylen26.i = phi i64 [ %arraylen26.i.pre, %L67.i ], [ %arraylen4.i, %L59.i ], [ %arraylen4.i, %L55.i ], !dbg !315
  %23 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi16 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !319
  %24 = icmp eq i64 %arraylen26.i, 1, !dbg !319
  %.not21 = icmp eq i64 %arraylen.i, 0, !dbg !323
  br i1 %.not21, label %julia_materialize__6344_inner.exit, label %L92.i.lr.ph, !dbg !326

L92.i.lr.ph:                                      ; preds = %L72.i
  %25 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %23 to double addrspace(13)* addrspace(11)*
  %arrayptr.i23 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %25, align 8, !tbaa !105, !alias.scope !327, !noalias !52, !nonnull !15
  %26 = bitcast {} addrspace(10)* %0 to double addrspace(13)* addrspace(10)*
  %27 = addrspacecast double addrspace(13)* addrspace(10)* %26 to double addrspace(13)* addrspace(11)*
  %arrayptr33.i24 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %27, align 16, !tbaa !105, !alias.scope !327, !noalias !52, !nonnull !15
  br label %L92.i, !dbg !328

L92.i:                                            ; preds = %L92.i, %L92.i.lr.ph
  %iv = phi i64 [ %iv.next, %L92.i ], [ 0, %L92.i.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !329
  %28 = select i1 %24, i64 0, i64 %iv, !dbg !332
  %29 = getelementptr inbounds double, double addrspace(13)* %arrayptr.i23, i64 %28, !dbg !332
  %arrayref.i = load double, double addrspace(13)* %29, align 8, !dbg !332, !tbaa !158, !alias.scope !75, !noalias !160
  %30 = getelementptr inbounds double, double addrspace(13)* %arrayptr33.i24, i64 %iv, !dbg !339
  store double %arrayref.i, double addrspace(13)* %30, align 8, !dbg !339, !tbaa !158, !alias.scope !75, !noalias !289
  %exitcond.not = icmp eq i64 %iv.next, %arraylen.i, !dbg !340
  br i1 %exitcond.not, label %julia_materialize__6344_inner.exit.loopexit, label %L92.i, !dbg !328, !llvm.loop !342

julia_materialize__6344_inner.exit.loopexit:      ; preds = %L92.i
  br label %julia_materialize__6344_inner.exit, !dbg !272

julia_materialize__6344_inner.exit:               ; preds = %julia_materialize__6344_inner.exit.loopexit, %L72.i, %L52.i
  ret {} addrspace(10)* %0, !dbg !272
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia__copyto_impl__6359({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, i64 signext "enzyme_inactive" %2) unnamed_addr #19 !dbg !435 {
top:
  %3 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !436
  %newstruct2 = bitcast i8* %3 to [1 x [2 x i64]]*, !enzyme_caststack !15
  %4 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !436
  %newstruct5 = bitcast i8* %4 to [1 x [2 x i64]]*, !enzyme_caststack !15
  %5 = call {}*** @julia.get_pgcstack() #20
  %ptls_field25 = getelementptr inbounds {}**, {}*** %5, i64 2
  %6 = bitcast {}*** %ptls_field25 to i64***
  %ptls_load2627 = load i64**, i64*** %6, align 8, !tbaa !16
  %7 = getelementptr inbounds i64*, i64** %ptls_load2627, i64 2
  %safepoint = load i64*, i64** %7, align 8, !tbaa !20, !invariant.load !15
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #20, !dbg !437
  fence syncscope("singlethread") seq_cst
  %.not = icmp eq i64 %2, 0, !dbg !438
  br i1 %.not, label %common.ret, label %L4, !dbg !439

common.ret:                                       ; preds = %L100, %top
  ret void, !dbg !440

L4:                                               ; preds = %top
  %8 = icmp slt i64 %2, 1, !dbg !441
  br i1 %8, label %L108, label %L8, !dbg !443

L8:                                               ; preds = %L4
  %newstruct.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct2, i64 0, i64 0, i64 0, !dbg !444
  store i64 1, i64* %newstruct.sroa.0.0..sroa_idx, align 8, !dbg !444, !tbaa !190, !alias.scope !192, !noalias !446
  %newstruct.sroa.2.0..sroa_idx15 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct2, i64 0, i64 0, i64 1, !dbg !444
  store i64 %2, i64* %newstruct.sroa.2.0..sroa_idx15, align 8, !dbg !444, !tbaa !190, !alias.scope !192, !noalias !446
  %9 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !449
  %10 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !449
  %11 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %10 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !449
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %11, i64 0, i32 1, !dbg !449
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !449, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %12 = add i64 %2, -1, !dbg !455
  %13 = icmp ult i64 %12, %arraylen, !dbg !458
  br i1 %13, label %L40, label %L36, !dbg !454

L36:                                              ; preds = %L8
  %14 = addrspacecast [1 x [2 x i64]]* %newstruct2 to [1 x [2 x i64]] addrspace(11)*, !dbg !454
  call fastcc void @julia_throw_boundserror_6366({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %14) #21, !dbg !454
  unreachable, !dbg !454

L40:                                              ; preds = %L8
  %15 = call i64 @llvm.smax.i64(i64 %2, i64 noundef 0) #20, !dbg !459
  %newstruct4.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct5, i64 0, i64 0, i64 0, !dbg !463
  store i64 1, i64* %newstruct4.sroa.0.0..sroa_idx, align 8, !dbg !463, !tbaa !190, !alias.scope !192, !noalias !446
  %newstruct4.sroa.2.0..sroa_idx14 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct5, i64 0, i64 0, i64 1, !dbg !463
  store i64 %15, i64* %newstruct4.sroa.2.0..sroa_idx14, align 8, !dbg !463, !tbaa !190, !alias.scope !192, !noalias !446
  %16 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !464
  %17 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %16 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !464
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %17, i64 0, i32 1, !dbg !464
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !464, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %18 = icmp slt i64 %2, 1, !dbg !470
  %19 = add nsw i64 %15, -1, !dbg !474
  %20 = icmp ult i64 %19, %arraylen7, !dbg !476
  %21 = or i1 %18, %20, !dbg !477
  br i1 %21, label %L71, label %L68, !dbg !469

L68:                                              ; preds = %L40
  %22 = addrspacecast [1 x [2 x i64]]* %newstruct5 to [1 x [2 x i64]] addrspace(11)*, !dbg !469
  call fastcc void @julia_throw_boundserror_6366({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %22) #21, !dbg !469
  unreachable, !dbg !469

L71:                                              ; preds = %L40
  %23 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !464
  %24 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %0) #20, !dbg !478
  %25 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %1) #20, !dbg !480
  %26 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %9) #22, !dbg !481
  %27 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %23) #22, !dbg !484
  %28 = shl i64 %2, 3, !dbg !487
  %29 = and i64 %2, 1152921504606846976, !dbg !489
  %.not30 = icmp eq i64 %29, 0, !dbg !489
  br i1 %.not30, label %L100, label %L92, !dbg !490

L92:                                              ; preds = %L71
  call fastcc void @julia_throw_inexacterror_6368(i64 signext %28) #21, !dbg !490
  unreachable, !dbg !490

L100:                                             ; preds = %L71
  %30 = bitcast {}* %27 to i8**, !dbg !484
  %arrayptr10 = load i8*, i8** %30, align 8, !dbg !484, !tbaa !105, !alias.scope !51, !noalias !52, !nonnull !15
  %31 = bitcast {}* %26 to i8**, !dbg !481
  %arrayptr = load i8*, i8** %31, align 8, !dbg !481, !tbaa !105, !alias.scope !51, !noalias !52, !nonnull !15
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %arrayptr, i8* nonnull align 1 %arrayptr10, i64 %28, i1 noundef false) #20, !dbg !495, !noalias !496
  call void @llvm.julia.gc_preserve_end(token %25) #20, !dbg !497
  call void @llvm.julia.gc_preserve_end(token %24) #20, !dbg !498
  br label %common.ret

L108:                                             ; preds = %L4
  call fastcc void @julia__throw_argerror_6364() #21, !dbg !443
  unreachable, !dbg !443
}

; Function Attrs: mustprogress willreturn
define internal fastcc { i8*, i8* } @augmented_julia__copyto_impl__6359({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", i64 signext "enzyme_inactive" %2) unnamed_addr #19 !dbg !499 {
top:
  %3 = alloca { i8*, i8* }, align 8
  %newstruct5 = alloca [1 x [2 x i64]], i64 1, align 8
  %4 = bitcast [1 x [2 x i64]]* %newstruct5 to i8*
  %newstruct2 = alloca [1 x [2 x i64]], i64 1, align 8
  %5 = bitcast [1 x [2 x i64]]* %newstruct2 to i8*
  %6 = bitcast i8* %5 to [1 x [2 x i64]]*, !enzyme_caststack !15
  %7 = bitcast i8* %4 to [1 x [2 x i64]]*, !enzyme_caststack !15
  %8 = call {}*** @julia.get_pgcstack() #20
  %ptls_field25 = getelementptr inbounds {}**, {}*** %8, i64 2
  %9 = bitcast {}*** %ptls_field25 to i64***
  %ptls_load2627 = load i64**, i64*** %9, align 8, !tbaa !16, !alias.scope !500, !noalias !503
  %10 = getelementptr inbounds i64*, i64** %ptls_load2627, i64 2
  %safepoint = load i64*, i64** %10, align 8, !tbaa !20, !invariant.load !15, !alias.scope !505, !noalias !508
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #20, !dbg !510
  fence syncscope("singlethread") seq_cst
  %.not = icmp eq i64 %2, 0, !dbg !511
  br i1 %.not, label %common.ret, label %L4, !dbg !512

common.ret:                                       ; preds = %L100, %top
  %11 = load { i8*, i8* }, { i8*, i8* }* %3, align 8, !dbg !513
  ret { i8*, i8* } %11, !dbg !513

L4:                                               ; preds = %top
  %12 = icmp slt i64 %2, 1, !dbg !514
  br i1 %12, label %L108, label %L8, !dbg !516

L8:                                               ; preds = %L4
  %newstruct.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %6, i64 0, i64 0, i64 0, !dbg !517
  store i64 1, i64* %newstruct.sroa.0.0..sroa_idx, align 8, !dbg !517, !tbaa !190, !alias.scope !192, !noalias !519
  %newstruct.sroa.2.0..sroa_idx15 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %6, i64 0, i64 0, i64 1, !dbg !517
  store i64 %2, i64* %newstruct.sroa.2.0..sroa_idx15, align 8, !dbg !517, !tbaa !190, !alias.scope !192, !noalias !519
  %"'ipc3" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !522
  %13 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !522
  %14 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !522
  %15 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %14 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !522
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %15, i64 0, i32 1, !dbg !522
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !522, !tbaa !47, !range !50, !alias.scope !528, !noalias !531
  %16 = add i64 %2, -1, !dbg !533
  %17 = icmp ult i64 %16, %arraylen, !dbg !536
  br i1 %17, label %L40, label %L36, !dbg !527

L36:                                              ; preds = %L8
  %18 = addrspacecast [1 x [2 x i64]]* %6 to [1 x [2 x i64]] addrspace(11)*, !dbg !527
  call fastcc void @julia_throw_boundserror_6366({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %18) #21, !dbg !527
  unreachable, !dbg !527

L40:                                              ; preds = %L8
  %19 = call i64 @llvm.smax.i64(i64 %2, i64 noundef 0) #20, !dbg !537
  %newstruct4.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %7, i64 0, i64 0, i64 0, !dbg !541
  store i64 1, i64* %newstruct4.sroa.0.0..sroa_idx, align 8, !dbg !541, !tbaa !190, !alias.scope !192, !noalias !519
  %newstruct4.sroa.2.0..sroa_idx14 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %7, i64 0, i64 0, i64 1, !dbg !541
  store i64 %19, i64* %newstruct4.sroa.2.0..sroa_idx14, align 8, !dbg !541, !tbaa !190, !alias.scope !192, !noalias !519
  %20 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !542
  %21 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %20 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !542
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %21, i64 0, i32 1, !dbg !542
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !542, !tbaa !47, !range !50, !alias.scope !548, !noalias !551
  %22 = icmp slt i64 %2, 1, !dbg !553
  %23 = add nsw i64 %19, -1, !dbg !557
  %24 = icmp ult i64 %23, %arraylen7, !dbg !559
  %25 = or i1 %22, %24, !dbg !560
  br i1 %25, label %L71, label %L68, !dbg !547

L68:                                              ; preds = %L40
  %26 = addrspacecast [1 x [2 x i64]]* %7 to [1 x [2 x i64]] addrspace(11)*, !dbg !547
  call fastcc void @julia_throw_boundserror_6366({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %26) #21, !dbg !547
  unreachable, !dbg !547

L71:                                              ; preds = %L40
  %"'ipc" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !542
  %27 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !542
  %28 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !561
  %29 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !563
  %30 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc3"), !dbg !564
  %31 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %13) #22, !dbg !564
  %32 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !567
  %33 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %27) #22, !dbg !567
  %34 = shl i64 %2, 3, !dbg !570
  %35 = and i64 %2, 1152921504606846976, !dbg !572
  %.not30 = icmp eq i64 %35, 0, !dbg !572
  br i1 %.not30, label %L100, label %L92, !dbg !573

L92:                                              ; preds = %L71
  call fastcc void @julia_throw_inexacterror_6368(i64 signext %34) #21, !dbg !573
  unreachable, !dbg !573

L100:                                             ; preds = %L71
  %"'ipc5" = bitcast {}* %32 to i8**, !dbg !567
  %36 = bitcast {}* %33 to i8**, !dbg !567
  %"arrayptr10'ipl" = load i8*, i8** %"'ipc5", align 8, !dbg !567, !tbaa !105, !alias.scope !579, !noalias !580, !nonnull !15
  %37 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %3, i32 0, i32 1, !dbg !567
  store i8* %"arrayptr10'ipl", i8** %37, align 8, !dbg !567
  %arrayptr10 = load i8*, i8** %36, align 8, !dbg !567, !tbaa !105, !alias.scope !548, !noalias !551, !nonnull !15
  %"'ipc4" = bitcast {}* %30 to i8**, !dbg !564
  %38 = bitcast {}* %31 to i8**, !dbg !564
  %"arrayptr'ipl" = load i8*, i8** %"'ipc4", align 8, !dbg !564, !tbaa !105, !alias.scope !581, !noalias !582, !nonnull !15
  %39 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %3, i32 0, i32 0, !dbg !564
  store i8* %"arrayptr'ipl", i8** %39, align 8, !dbg !564
  %arrayptr = load i8*, i8** %38, align 8, !dbg !564, !tbaa !105, !alias.scope !528, !noalias !531, !nonnull !15
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %arrayptr, i8* nonnull align 1 %arrayptr10, i64 %34, i1 noundef false) #20, !dbg !578, !noalias !583
  call void @llvm.julia.gc_preserve_end(token %29) #20, !dbg !584
  call void @llvm.julia.gc_preserve_end(token %28) #20, !dbg !585
  br label %common.ret

L108:                                             ; preds = %L4
  call fastcc void @julia__throw_argerror_6364() #21, !dbg !516
  unreachable, !dbg !516
}

; Function Attrs: mustprogress willreturn
define internal { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_materialize__6344_inner.1({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", { [1 x {} addrspace(10)*] } %1, { [1 x {} addrspace(10)*] } %"'1") local_unnamed_addr #18 !dbg !494 {
entry:
  %2 = alloca { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %3 = getelementptr inbounds { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 0
  %4 = getelementptr { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i64 0, i32 5
  %6 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %5 to {} addrspace(10)**
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4336369672 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %"iv'ac" = alloca i64, align 8
  %.fca.0.0.extract = extractvalue { [1 x {} addrspace(10)*] } %1, 0, 0, !dbg !495
  %".fca.0.0.extract'ipev" = extractvalue { [1 x {} addrspace(10)*] } %"'1", 0, 0
  %7 = call {}*** @julia.get_pgcstack() #21
  %ptls_field.i18 = getelementptr inbounds {}**, {}*** %7, i64 2
  %8 = bitcast {}*** %ptls_field.i18 to i64***
  %ptls_load.i1920 = load i64**, i64*** %8, align 8, !tbaa !16, !alias.scope !496, !noalias !499
  %9 = getelementptr inbounds i64*, i64** %ptls_load.i1920, i64 2
  %safepoint.i = load i64*, i64** %9, align 8, !tbaa !20, !invariant.load !15, !alias.scope !501, !noalias !504
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint.i) #21, !dbg !506
  fence syncscope("singlethread") seq_cst
  %10 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !508
  %11 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !508
  %12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !508
  %arraylen_ptr.i = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %12, i64 0, i32 1, !dbg !508
  %arraylen.i = load i64, i64 addrspace(11)* %arraylen_ptr.i, align 8, !dbg !508, !tbaa !47, !range !50, !alias.scope !512, !noalias !515
  %13 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 2
  store i64 %arraylen.i, i64* %13, align 8
  %14 = icmp ne {} addrspace(10)* %.fca.0.0.extract, null
  call void @llvm.assume(i1 noundef %14) #21
  %15 = addrspacecast {} addrspace(10)* %.fca.0.0.extract to {} addrspace(11)*, !dbg !517
  %"'ipc6" = bitcast {} addrspace(10)* %".fca.0.0.extract'ipev" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !517
  %16 = bitcast {} addrspace(10)* %.fca.0.0.extract to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !517
  %17 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %16 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !517
  %arraylen_ptr3.i = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %17, i64 0, i32 1, !dbg !517
  %arraylen4.i = load i64, i64 addrspace(11)* %arraylen_ptr3.i, align 8, !dbg !517, !tbaa !47, !range !50, !alias.scope !521, !noalias !524
  %18 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 3, !dbg !526
  store i64 %arraylen4.i, i64* %18, align 8, !dbg !526
  %19 = icmp eq i64 %arraylen.i, %arraylen4.i, !dbg !526
  %20 = icmp eq i64 %arraylen4.i, 1, !dbg !530
  %value_phi.i = or i1 %19, %20, !dbg !530
  br i1 %value_phi.i, label %L35.i, label %L19.i, !dbg !531

L19.i:                                            ; preds = %entry
  %current_task1.i17 = getelementptr inbounds {}**, {}*** %7, i64 -14
  %current_task1.i = bitcast {}*** %current_task1.i17 to {}**
  call fastcc void @julia_DimensionMismatch_6351() #22, !dbg !531
  %box.i = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1.i, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4777169872 to {}*) to {} addrspace(10)*)) #23, !dbg !531
  %21 = bitcast {} addrspace(10)* %box.i to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !531
  %22 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %21, i64 0, i64 0, !dbg !531
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4857078480 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %22, align 8, !dbg !531, !tbaa !71, !alias.scope !75, !noalias !532
  %23 = addrspacecast {} addrspace(10)* %box.i to {} addrspace(12)*, !dbg !531
  call void @ijl_throw({} addrspace(12)* %23) #24, !dbg !531
  unreachable, !dbg !531

L35.i:                                            ; preds = %entry
  br i1 %19, label %L52.i, label %L55.i, !dbg !535

L52.i:                                            ; preds = %L35.i
  %_augmented = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__6359({} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 %.fca.0.0.extract, {} addrspace(10)* align 16 %".fca.0.0.extract'ipev", i64 signext %arraylen.i), !dbg !537
  %24 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 0, !dbg !540
  store { i8*, i8* } %_augmented, { i8*, i8* }* %24, align 8, !dbg !540
  br label %julia_materialize__6344_inner.exit, !dbg !540

L55.i:                                            ; preds = %L35.i
  %.not = icmp eq {} addrspace(11)* %10, %15, !dbg !541
  br i1 %.not, label %L72.i, label %L59.i, !dbg !541

L59.i:                                            ; preds = %L55.i
  %25 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %10) #25, !dbg !546
  %26 = bitcast {}* %25 to i8**, !dbg !546
  %arrayptr37.i = load i8*, i8** %26, align 8, !dbg !546, !tbaa !105, !alias.scope !512, !noalias !515, !nonnull !15
  %27 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %15) #25, !dbg !546
  %28 = bitcast {}* %27 to i8**, !dbg !546
  %arrayptr39.i = load i8*, i8** %28, align 8, !dbg !546, !tbaa !105, !alias.scope !521, !noalias !524, !nonnull !15
  %.not25 = icmp eq i8* %arrayptr37.i, %arrayptr39.i, !dbg !552
  %29 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 4, !dbg !555
  store i1 %.not25, i1* %29, align 1, !dbg !555
  br i1 %.not25, label %L67.i, label %L72.i, !dbg !555

L67.i:                                            ; preds = %L59.i
  %30 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %".fca.0.0.extract'ipev"), !dbg !556
  %31 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 1, !dbg !556
  store {} addrspace(10)* %30, {} addrspace(10)** %31, align 8, !dbg !556
  %32 = bitcast {} addrspace(10)* %.fca.0.0.extract to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !556
  %33 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %32, i32 0, i32 3, !dbg !556
  %34 = load i16, i16 addrspace(10)* %33, align 2, !dbg !556
  %35 = zext i16 %34 to i64, !dbg !556
  %36 = bitcast {} addrspace(10)* %.fca.0.0.extract to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !556
  %37 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %36, i32 0, i32 1, !dbg !556
  %38 = load i64, i64 addrspace(10)* %37, align 8, !dbg !556
  %39 = mul i64 %38, %35, !dbg !556
  %40 = bitcast {} addrspace(10)* %".fca.0.0.extract'ipev" to i8 addrspace(13)* addrspace(10)*, !dbg !556
  %41 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %40, align 8, !dbg !556
  %42 = bitcast {} addrspace(10)* %30 to i8 addrspace(13)* addrspace(10)*, !dbg !556
  %43 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %42, align 8, !dbg !556
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %43, i8 0, i64 %39, i1 false), !dbg !556
  %44 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %.fca.0.0.extract) #21, !dbg !556
  %"'ipc5" = bitcast {} addrspace(10)* %30 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %45 = bitcast {} addrspace(10)* %44 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %46 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 5
  store { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %45, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %46, align 8
  %.phi.trans.insert12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %45 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr25.i.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert12, i64 0, i32 1
  %arraylen26.i.pre = load i64, i64 addrspace(11)* %arraylen_ptr25.i.phi.trans.insert, align 8, !dbg !558, !tbaa !47, !range !50, !alias.scope !562, !noalias !565
  br label %L72.i, !dbg !555

L72.i:                                            ; preds = %L67.i, %L59.i, %L55.i
  %47 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc5", %L67.i ], [ %"'ipc6", %L59.i ], [ %"'ipc6", %L55.i ], !dbg !558
  %nodecayed..pre-phi16 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %45, %L67.i ], [ %16, %L59.i ], [ %16, %L55.i ], !dbg !558
  %arraylen26.i = phi i64 [ %arraylen26.i.pre, %L67.i ], [ %arraylen4.i, %L59.i ], [ %arraylen4.i, %L55.i ], !dbg !558
  %"'ipc7" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %47 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !567
  %48 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi16 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !567
  %49 = icmp eq i64 %arraylen26.i, 1, !dbg !567
  %50 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 6, !dbg !571
  store i1 %49, i1* %50, align 1, !dbg !571
  %.not21 = icmp eq i64 %arraylen.i, 0, !dbg !571
  br i1 %.not21, label %julia_materialize__6344_inner.exit, label %L92.i.lr.ph, !dbg !574

L92.i.lr.ph:                                      ; preds = %L72.i
  %"'ipc8" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc7" to double addrspace(13)* addrspace(11)*
  %51 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %48 to double addrspace(13)* addrspace(11)*
  %"arrayptr.i23'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc8", align 8, !tbaa !105, !alias.scope !575, !noalias !580, !nonnull !15
  %arrayptr.i23 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %51, align 8, !tbaa !105, !alias.scope !582, !noalias !583, !nonnull !15
  %"'ipc" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*
  %52 = bitcast {} addrspace(10)* %0 to double addrspace(13)* addrspace(10)*
  %"'ipc4" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %53 = addrspacecast double addrspace(13)* addrspace(10)* %52 to double addrspace(13)* addrspace(11)*
  %"arrayptr33.i24'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc4", align 16, !tbaa !105, !alias.scope !584, !noalias !585, !nonnull !15
  %arrayptr33.i24 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %53, align 16, !tbaa !105, !alias.scope !586, !noalias !515, !nonnull !15
  %54 = add nsw i64 %arraylen.i, -1, !dbg !587
  br label %L92.i, !dbg !587

L92.i:                                            ; preds = %L92.i, %L92.i.lr.ph
  %iv = phi i64 [ %iv.next, %L92.i ], [ 0, %L92.i.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !588
  %55 = select i1 %49, i64 0, i64 %iv, !dbg !591
  %56 = getelementptr inbounds double, double addrspace(13)* %arrayptr.i23, i64 %55, !dbg !591
  %arrayref.i = load double, double addrspace(13)* %56, align 8, !dbg !591, !tbaa !158, !alias.scope !598, !noalias !601
  %57 = getelementptr inbounds double, double addrspace(13)* %arrayptr33.i24, i64 %iv, !dbg !603
  store double %arrayref.i, double addrspace(13)* %57, align 8, !dbg !603, !tbaa !158, !alias.scope !604, !noalias !607
  %exitcond.not = icmp eq i64 %iv.next, %arraylen.i, !dbg !609
  br i1 %exitcond.not, label %julia_materialize__6344_inner.exit.loopexit, label %L92.i, !dbg !587, !llvm.loop !611

julia_materialize__6344_inner.exit.loopexit:      ; preds = %L92.i
  br label %julia_materialize__6344_inner.exit, !dbg !495

julia_materialize__6344_inner.exit:               ; preds = %julia_materialize__6344_inner.exit.loopexit, %L72.i, %L52.i
  %58 = getelementptr inbounds { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 1, !dbg !495
  store {} addrspace(10)* %0, {} addrspace(10)** %58, align 8, !dbg !495
  %59 = getelementptr inbounds { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 2, !dbg !495
  store {} addrspace(10)* %"'", {} addrspace(10)** %59, align 8, !dbg !495
  %60 = load { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, align 8, !dbg !495
  ret { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* } %60, !dbg !495
}

warning: didn't implement memmove, using memcpy as fallback which can result in errors
; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia__copyto_impl__6359({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", i64 signext "enzyme_inactive" %2, { i8*, i8* } %tapeArg) unnamed_addr #19 !dbg !695 {
top:
  %3 = call {}*** @julia.get_pgcstack() #23
  %.not = icmp eq i64 %2, 0, !dbg !696
  br i1 %.not, label %common.ret, label %L4, !dbg !697

common.ret:                                       ; preds = %L100, %top
  br label %invertcommon.ret, !dbg !698

L4:                                               ; preds = %top
  br i1 false, label %L108, label %L8, !dbg !699

L8:                                               ; preds = %L4
  %"'ipc24" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !700
  br i1 true, label %L40, label %L36, !dbg !705

L36:                                              ; preds = %L8
  unreachable

L40:                                              ; preds = %L8
  br i1 true, label %L71, label %L68, !dbg !707

L68:                                              ; preds = %L40
  unreachable

L71:                                              ; preds = %L40
  %"'ipc" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !709
  %4 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !714
  %5 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !716
  %6 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc24"), !dbg !717
  %7 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !720
  %8 = shl i64 %2, 3, !dbg !723
  br i1 true, label %L100, label %L92, !dbg !725

L92:                                              ; preds = %L71
  unreachable

L100:                                             ; preds = %L71
  %"arrayptr10'il_phi" = extractvalue { i8*, i8* } %tapeArg, 1, !dbg !720
  %"arrayptr'il_phi" = extractvalue { i8*, i8* } %tapeArg, 0, !dbg !717
  call void @llvm.julia.gc_preserve_end(token %5) #23, !dbg !731
  call void @llvm.julia.gc_preserve_end(token %4) #23, !dbg !732
  br label %common.ret

L108:                                             ; preds = %L4
  unreachable

inverttop:                                        ; preds = %invertL4, %invertcommon.ret
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertcommon.ret:                                 ; preds = %common.ret
  br i1 %.not, label %inverttop, label %invertL100

invertL4:                                         ; preds = %invertL8
  br label %inverttop

invertL8:                                         ; preds = %invertL40
  br label %invertL4

invertL40:                                        ; preds = %invertL71
  br label %invertL8

invertL71:                                        ; preds = %__enzyme_memcpyadd_doubleda1sa1.exit
  call void @llvm.julia.gc_preserve_end(token %10), !dbg !716
  call void @llvm.julia.gc_preserve_end(token %9), !dbg !714
  br label %invertL40

invertL100:                                       ; preds = %invertcommon.ret
  %9 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !732
  %10 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !731
  %11 = extractvalue { i8*, i8* } %tapeArg, 0, !dbg !730
  %12 = extractvalue { i8*, i8* } %tapeArg, 1, !dbg !730
  %13 = bitcast i8* %11 to double*, !dbg !730
  %14 = bitcast i8* %12 to double*, !dbg !730
  %_unwrap = shl i64 %2, 3, !dbg !730
  %15 = udiv i64 %_unwrap, 8, !dbg !730
  %16 = icmp eq i64 %15, 0, !dbg !730
  br i1 %16, label %__enzyme_memcpyadd_doubleda1sa1.exit, label %for.body.i, !dbg !730

for.body.i:                                       ; preds = %for.body.i, %invertL100
  %idx.i = phi i64 [ 0, %invertL100 ], [ %idx.next.i, %for.body.i ], !dbg !730
  %dst.i.i = getelementptr inbounds double, double* %13, i64 %idx.i, !dbg !730
  %dst.i.l.i = load double, double* %dst.i.i, align 1, !dbg !730
  store double 0.000000e+00, double* %dst.i.i, align 1, !dbg !730
  %src.i.i = getelementptr inbounds double, double* %14, i64 %idx.i, !dbg !730
  %src.i.l.i = load double, double* %src.i.i, align 1, !dbg !730
  %17 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !730
  store double %17, double* %src.i.i, align 1, !dbg !730
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !730
  %18 = icmp eq i64 %15, %idx.next.i, !dbg !730
  br i1 %18, label %__enzyme_memcpyadd_doubleda1sa1.exit, label %for.body.i, !dbg !730

__enzyme_memcpyadd_doubleda1sa1.exit:             ; preds = %invertL100, %for.body.i
  br label %invertL71
}

; Function Attrs: mustprogress willreturn
define internal void @diffejulia_materialize__6344_inner.1({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", { [1 x {} addrspace(10)*] } %1, { [1 x {} addrspace(10)*] } %"'1", { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg) local_unnamed_addr #18 !dbg !614 {
entry:
  %"iv'ac" = alloca i64, align 8
  %"arrayref.i'de" = alloca double, align 8
  %2 = getelementptr double, double* %"arrayref.i'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %_cache35 = alloca i8, align 1
  %.fca.0.0.extract = extractvalue { [1 x {} addrspace(10)*] } %1, 0, 0, !dbg !615
  %3 = bitcast {} addrspace(10)* %.fca.0.0.extract to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %4 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %3, i32 0, i32 3
  %5 = load i16, i16 addrspace(10)* %4, align 2
  %6 = zext i16 %5 to i64
  %7 = bitcast {} addrspace(10)* %.fca.0.0.extract to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %8 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %7, i32 0, i32 1
  %9 = load i64, i64 addrspace(10)* %8, align 8
  %10 = mul i64 %9, %6
  %".fca.0.0.extract'ipev" = extractvalue { [1 x {} addrspace(10)*] } %"'1", 0, 0
  %11 = call {}*** @julia.get_pgcstack() #23
  %12 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !616
  %arraylen.i = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 2
  %13 = addrspacecast {} addrspace(10)* %.fca.0.0.extract to {} addrspace(11)*, !dbg !621
  %"'ipc24" = bitcast {} addrspace(10)* %".fca.0.0.extract'ipev" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !621
  %14 = bitcast {} addrspace(10)* %.fca.0.0.extract to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !621
  %arraylen4.i = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 3, !dbg !625
  %15 = icmp eq i64 %arraylen.i, %arraylen4.i, !dbg !625
  br i1 true, label %L35.i, label %L19.i, !dbg !629

L19.i:                                            ; preds = %entry
  unreachable

L35.i:                                            ; preds = %entry
  br i1 %15, label %L52.i, label %L55.i, !dbg !630

L52.i:                                            ; preds = %L35.i
  %tapeArg13 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 0, !dbg !632
  store i8 2, i8* %_cache35, align 1, !dbg !635, !invariant.group !636
  br label %julia_materialize__6344_inner.exit, !dbg !635

L55.i:                                            ; preds = %L35.i
  %.not = icmp eq {} addrspace(11)* %12, %13, !dbg !637
  br i1 %.not, label %L72.i, label %L59.i, !dbg !637

L59.i:                                            ; preds = %L55.i
  %.not25 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 4, !dbg !642
  br i1 %.not25, label %L67.i, label %L72.i, !dbg !642

L67.i:                                            ; preds = %L59.i
  %"'ip_phi3" = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 1, !dbg !644
  %"'ipc23" = bitcast {} addrspace(10)* %"'ip_phi3" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %16 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 5
  br label %L72.i, !dbg !642

L72.i:                                            ; preds = %L67.i, %L59.i, %L55.i
  %17 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc23", %L67.i ], [ %"'ipc24", %L59.i ], [ %"'ipc24", %L55.i ], !dbg !647
  %"'ipc25" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !651
  %18 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 6, !dbg !655
  %.not21 = icmp eq i64 %arraylen.i, 0, !dbg !655
  store i8 0, i8* %_cache35, align 1, !dbg !658, !invariant.group !636
  br i1 %.not21, label %julia_materialize__6344_inner.exit, label %L92.i.lr.ph, !dbg !658

L92.i.lr.ph:                                      ; preds = %L72.i
  %"'ipc26" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc25" to double addrspace(13)* addrspace(11)*
  %"arrayptr.i23'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc26", align 8, !tbaa !105, !alias.scope !659, !noalias !662, !nonnull !15, !invariant.group !664
  %"'ipc" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*
  %"'ipc20" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr33.i24'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc20", align 16, !tbaa !105, !alias.scope !665, !noalias !668, !nonnull !15, !invariant.group !670
  %19 = add nsw i64 %arraylen.i, -1, !dbg !671
  br label %L92.i, !dbg !671

L92.i:                                            ; preds = %L92.i, %L92.i.lr.ph
  %iv = phi i64 [ %iv.next, %L92.i ], [ 0, %L92.i.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !672
  %20 = select i1 %18, i64 0, i64 %iv, !dbg !675
  %"'ipg29" = getelementptr inbounds double, double addrspace(13)* %"arrayptr.i23'ipl", i64 %20, !dbg !675
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr33.i24'ipl", i64 %iv, !dbg !682
  %exitcond.not = icmp eq i64 %iv.next, %arraylen.i, !dbg !683
  br i1 %exitcond.not, label %julia_materialize__6344_inner.exit.loopexit, label %L92.i, !dbg !671, !llvm.loop !685

julia_materialize__6344_inner.exit.loopexit:      ; preds = %L92.i
  store i8 1, i8* %_cache35, align 1, !dbg !615, !invariant.group !636
  br label %julia_materialize__6344_inner.exit, !dbg !615

julia_materialize__6344_inner.exit:               ; preds = %julia_materialize__6344_inner.exit.loopexit, %L72.i, %L52.i
  br label %invertjulia_materialize__6344_inner.exit, !dbg !615

invertentry:                                      ; preds = %invertL35.i
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL35.i:                                      ; preds = %invertL55.i, %invertL52.i
  br label %invertentry

invertL52.i:                                      ; preds = %invertjulia_materialize__6344_inner.exit
  %tapeArg13_unwrap = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 0, !dbg !632
  call fastcc void @diffejulia__copyto_impl__6359({} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 %.fca.0.0.extract, {} addrspace(10)* align 16 %".fca.0.0.extract'ipev", i64 signext %arraylen.i, { i8*, i8* } %tapeArg13_unwrap), !dbg !632
  br label %invertL35.i

invertL55.i:                                      ; preds = %invertL72.i, %invertL59.i
  br label %invertL35.i

invertL59.i:                                      ; preds = %staging, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  br label %invertL55.i

invertL67.i:                                      ; preds = %staging
  %21 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 1, !dbg !644
  %22 = bitcast {} addrspace(10)* %".fca.0.0.extract'ipev" to i8 addrspace(13)* addrspace(10)*, !dbg !644
  %23 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %22, align 8, !dbg !644
  %24 = bitcast {} addrspace(10)* %21 to i8 addrspace(13)* addrspace(10)*, !dbg !644
  %25 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %24, align 8, !dbg !644
  %26 = bitcast i8 addrspace(13)* %25 to double addrspace(13)*, !dbg !644
  %27 = bitcast i8 addrspace(13)* %23 to double addrspace(13)*, !dbg !644
  %28 = udiv i64 %10, 8, !dbg !644
  %29 = icmp eq i64 %28, 0, !dbg !644
  br i1 %29, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !644

for.body.i:                                       ; preds = %for.body.i, %invertL67.i
  %idx.i = phi i64 [ 0, %invertL67.i ], [ %idx.next.i, %for.body.i ], !dbg !644
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %26, i64 %idx.i, !dbg !644
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !644
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !644
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %27, i64 %idx.i, !dbg !644
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !644
  %30 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !644
  store double %30, double addrspace(13)* %src.i.i, align 1, !dbg !644
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !644
  %31 = icmp eq i64 %28, %idx.next.i, !dbg !644
  br i1 %31, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !644

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL67.i, %for.body.i
  br label %invertL59.i

invertL72.i:                                      ; preds = %invertjulia_materialize__6344_inner.exit, %invertL92.i.lr.ph
  %.not_unwrap = icmp eq {} addrspace(11)* %12, %13
  %.not25_unwrap = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 4
  br i1 %.not_unwrap, label %invertL55.i, label %staging

invertL92.i.lr.ph:                                ; preds = %invertL92.i_phimerge
  br label %invertL72.i

invertL92.i:                                      ; preds = %mergeinvertL92.i_julia_materialize__6344_inner.exit.loopexit, %incinvertL92.i
  %32 = load i64, i64* %"iv'ac", align 8, !dbg !682
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*, !dbg !682
  %"'ipc20_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !682
  %"arrayptr33.i24'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc20_unwrap", align 16, !tbaa !105, !alias.scope !665, !noalias !668, !nonnull !15, !invariant.group !670
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr33.i24'ipl_unwrap", i64 %32, !dbg !682
  %33 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !682, !tbaa !158, !alias.scope !686, !noalias !689
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !682, !tbaa !158, !alias.scope !686, !noalias !689
  %34 = load double, double* %"arrayref.i'de", align 8, !dbg !682
  %35 = fadd fast double %34, %33, !dbg !682
  store double %35, double* %"arrayref.i'de", align 8, !dbg !682
  %36 = load double, double* %"arrayref.i'de", align 8, !dbg !675
  store double 0.000000e+00, double* %"arrayref.i'de", align 8, !dbg !675
  %37 = load i64, i64* %"iv'ac", align 8, !dbg !675
  %.not_unwrap30 = icmp eq {} addrspace(11)* %12, %13, !dbg !675
  %.not25_unwrap38 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 4, !dbg !675
  br i1 %.not_unwrap30, label %invertL92.i_phirc32, label %invertL92.i_phisplt, !dbg !675

invertL92.i_phisplt:                              ; preds = %invertL92.i
  br i1 %.not25_unwrap38, label %invertL92.i_phirc, label %invertL92.i_phirc31, !dbg !675

invertL92.i_phirc:                                ; preds = %invertL92.i_phisplt
  %"'ip_phi3_unwrap" = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 1
  %"'ipc23_unwrap" = bitcast {} addrspace(10)* %"'ip_phi3_unwrap" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  br label %invertL92.i_phimerge

invertL92.i_phirc31:                              ; preds = %invertL92.i_phisplt
  br label %invertL92.i_phimerge

invertL92.i_phirc32:                              ; preds = %invertL92.i
  br label %invertL92.i_phimerge

invertL92.i_phimerge:                             ; preds = %invertL92.i_phirc32, %invertL92.i_phirc31, %invertL92.i_phirc
  %38 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc23_unwrap", %invertL92.i_phirc ], [ %"'ipc24", %invertL92.i_phirc31 ], [ %"'ipc24", %invertL92.i_phirc32 ], !dbg !675
  %"'ipc25_unwrap" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %38 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !675
  %"'ipc26_unwrap" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc25_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !675
  %"arrayptr.i23'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc26_unwrap", align 8, !tbaa !105, !alias.scope !659, !noalias !662, !nonnull !15, !invariant.group !664
  %_unwrap39 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 6, !dbg !675
  %_unwrap = select i1 %_unwrap39, i64 0, i64 %37, !dbg !675
  %"'ipg29_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr.i23'ipl_unwrap", i64 %_unwrap, !dbg !675
  %39 = load double, double addrspace(13)* %"'ipg29_unwrap", align 8, !dbg !675, !tbaa !158, !alias.scope !691, !noalias !694
  %40 = fadd fast double %39, %36, !dbg !675
  store double %40, double addrspace(13)* %"'ipg29_unwrap", align 8, !dbg !675, !tbaa !158, !alias.scope !691, !noalias !694
  %41 = load i64, i64* %"iv'ac", align 8
  %42 = icmp eq i64 %41, 0
  %43 = xor i1 %42, true
  br i1 %42, label %invertL92.i.lr.ph, label %incinvertL92.i

incinvertL92.i:                                   ; preds = %invertL92.i_phimerge
  %44 = load i64, i64* %"iv'ac", align 8
  %45 = add nsw i64 %44, -1
  store i64 %45, i64* %"iv'ac", align 8
  br label %invertL92.i

invertjulia_materialize__6344_inner.exit.loopexit: ; preds = %invertjulia_materialize__6344_inner.exit
  %_unwrap34 = add nsw i64 %arraylen.i, -1
  br label %mergeinvertL92.i_julia_materialize__6344_inner.exit.loopexit

mergeinvertL92.i_julia_materialize__6344_inner.exit.loopexit: ; preds = %invertjulia_materialize__6344_inner.exit.loopexit
  store i64 %_unwrap34, i64* %"iv'ac", align 8
  br label %invertL92.i

invertjulia_materialize__6344_inner.exit:         ; preds = %julia_materialize__6344_inner.exit
  %46 = load i8, i8* %_cache35, align 1, !invariant.group !636
  switch i8 %46, label %invertL52.i [
    i8 0, label %invertL72.i
    i8 1, label %invertjulia_materialize__6344_inner.exit.loopexit
  ]

staging:                                          ; preds = %invertL72.i
  br i1 %.not25_unwrap, label %invertL67.i, label %invertL59.i
}

ERROR: LoadError: AssertionError: Enzyme Mutability Error
Stacktrace:
  [1] runtime_generic_rev(activity::Type{Val{(false, true, true)}}, width::Val{1}, ModifiedBetween::Val{(true, true, true)}, tape::Enzyme.Compiler.Tape{Nothing, Base.RefValue{Float64}, Float64}, shadow_ptr::Tuple{Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, f::typeof(/), df::Nothing, primal_1::Float64, shadow_1_1::Float64, primal_2::Float64, shadow_2_1::Base.RefValue{Float64})
    @ Enzyme.Compiler ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/rules/jitrules.jl:246
  [2] q_true
    @ ~/Documents/GitHub/data_assimilation_2/three_mass_spring/exp_5_param.jl:346 [inlined]
  [3] q_kf
    @ ~/Documents/GitHub/data_assimilation_2/three_mass_spring/exp_5_param.jl:348 [inlined]
  [4] integrate1
    @ ~/Documents/GitHub/data_assimilation_2/three_mass_spring/exp_5_param.jl:36 [inlined]
  [5] diffejulia_integrate1_1957wrap
    @ ~/Documents/GitHub/data_assimilation_2/three_mass_spring/exp_5_param.jl:0
  [6] macro expansion
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/compiler.jl:5230 [inlined]
  [7] enzyme_call
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/compiler.jl:4908 [inlined]
  [8] CombinedAdjointThunk
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/compiler.jl:4870 [inlined]
  [9] autodiff
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/Enzyme.jl:215 [inlined]
 [10] autodiff
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/Enzyme.jl:238 [inlined]
 [11] autodiff
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/Enzyme.jl:224 [inlined]
 [12] enzyme_check_param(; k_guess::Float64)
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/exp_5_param.jl:432
 [13] enzyme_check_param()
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/exp_5_param.jl:341
 [14] top-level scope
    @ ~/Documents/GitHub/data_assimilation_2/three_mass_spring/debugging3.jl:6
in expression starting at /Users/swilliamson/Documents/GitHub/data_assimilation_2/three_mass_spring/debugging3.jl:6
params_adjoint2 = Main.ThreeMassSpring.mso_params_ops{Main.ThreeMassSpring.var"#q_kf#36"{Main.ThreeMassSpring.var"#q_true#35"}}
  T: Int64 10000
  t: Int64 0
  dt: Float64 0.001
  x: Array{Float64}((6,)) [1.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  u: Array{Float64}((6, 10001)) [0.053789363540378256 -0.034477948177364076 … -0.14986767532029263 0.20624645389996643; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  n: Array{Float64}((6, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  k: Float64 20.0
  r: Float64 0.5
  q: q_kf (function of type Main.ThreeMassSpring.var"#q_kf#36"{Main.ThreeMassSpring.var"#q_true#35"})
  J: Float64 0.0
  data_steps: Array{Int64}((21,)) [3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800  …  5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000]
  data: Array{Float64}((6, 10001)) [0.99990874916679 1.153662067810838 … -0.9571195397042735 -1.100676445843749; -3.174525549058001e-5 1.9232965189829104e-5 … 0.7732345424757039 0.7719635416570036; … ; -0.0001260456441650153 0.020048621447258965 … -1.2843958254226309 -1.3063042728740202; -0.00012361397362475215 -8.813508269354106e-5 … 1.395158739478939 1.323931700479082]
  states: Array{Float64}((6, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  energy: Array{Float64}((3, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  A: Array{Float64}((6, 6)) [1.0 0.0 … 0.0 0.0; 0.0 1.0 … 0.001 0.0; … ; 0.02 -0.06 … 0.9995 0.0; 0.0 0.02 … 0.0 0.9995]
  B: Array{Float64}((6, 6)) [1.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Gamma: Array{Float64}((6, 6)) [1.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  E: Array{Float64}((6, 6)) [1.0 0.0 … 0.0 0.0; 0.0 1.0 … 0.0 0.0; … ; 0.0 0.0 … 1.0 0.0; 0.0 0.0 … 0.0 1.0]
  Q: Array{Float64}((6, 6)) [0.001653213969959386 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Q_inv: Float64 0.0
  R: Array{Float64}((6, 6)) [1.0009134387242822e-8 0.0 … 0.0 0.0; 0.0 1.0009134387242822e-8 … 0.0 0.0; … ; 0.0 0.0 … 1.0009134387242822e-8 0.0; 0.0 0.0 … 0.0 1.0009134387242822e-8]
  R_inv: Array{Float64}((6, 6)) [9.990873948845702e7 0.0 … 0.0 0.0; 0.0 9.990873948845702e7 … 0.0 0.0; … ; 0.0 0.0 … 9.990873948845702e7 0.0; 0.0 0.0 … 0.0 9.990873948845702e7]
  K: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Kc: Array{Float64}((3, 3)) [-40.0 20.0 0.0; 20.0 -60.0 20.0; 0.0 20.0 -40.0]

(i, xi, ty, tup, Base.which(EnzymeCore.make_zero, tup)) = (3, 0.0, Float64, Tuple{Type{Float64}, IdDict{Any, Any}, Float64, Val{false}}, make_zero(::Type{RT}, seen::IdDict, prev::RT, ::Val{copy_if_inactive}) where {copy_if_inactive, RT<:AbstractFloat} @ Enzyme.Compiler ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/compiler.jl:1216)
dparams_adjoint2 = Main.ThreeMassSpring.mso_params_ops{Main.ThreeMassSpring.var"#q_kf#36"{Main.ThreeMassSpring.var"#q_true#35"}}
  T: Int64 10000
  t: Int64 0
  dt: Float64 0.0
  x: Array{Float64}((6,)) [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  u: Array{Float64}((6, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  n: Array{Float64}((6, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  k: Float64 0.0
  r: Float64 0.0
  q: q_kf (function of type Main.ThreeMassSpring.var"#q_kf#36"{Main.ThreeMassSpring.var"#q_true#35"})
  J: Float64 0.0
  data_steps: Array{Int64}((21,)) [3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800  …  5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000]
  data: Array{Float64}((6, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  states: Array{Float64}((6, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  energy: Array{Float64}((3, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  A: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  B: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Gamma: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  E: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Q: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Q_inv: Float64 0.0
  R: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  R_inv: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  K: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Kc: Array{Float64}((3, 3)) [0.0 0.0 0.0; 0.0 0.0 0.0; 0.0 0.0 0.0]

