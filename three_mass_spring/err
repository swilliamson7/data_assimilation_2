┌ Warning: Using fallback BLAS replacements, performance may be degraded
└ @ Enzyme.Compiler ~/.julia/packages/GPUCompiler/U36Ed/src/utils.jl:59
after simplification :
; Function Attrs: mustprogress willreturn
define void @preprocess_julia_integrate1_1954({} addrspace(10)* noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #55 !dbg !2393 {
top:
  %newstruct23 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct62 = alloca [1 x [1 x i64]], align 8
  %1 = alloca [3 x double], align 8
  %newstruct102 = alloca [1 x [1 x i64]], align 8
  %newstruct103 = alloca { [1 x [1 x i64]], i64 }, align 8
  %2 = alloca { i64, {} addrspace(10)* }, align 8
  %newstruct309 = alloca [2 x [1 x i64]], align 8
  %3 = alloca [1 x {} addrspace(10)*], align 8
  %newstruct391 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct397 = alloca [1 x [1 x i64]], align 8
  %newstruct444 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct500 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct506 = alloca [1 x [1 x i64]], align 8
  %newstruct562 = alloca [1 x [1 x i64]], align 8
  %4 = alloca [1 x {} addrspace(10)*], align 8
  %5 = alloca [3 x double], align 8
  %newstruct618 = alloca [1 x [1 x i64]], align 8
  %newstruct619 = alloca { [1 x [1 x i64]], i64 }, align 8
  %6 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %7 = alloca [1 x {} addrspace(10)*], align 8
  %8 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %newstruct734 = alloca [2 x [1 x i64]], align 8
  %9 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %10 = alloca [1 x {} addrspace(10)*], align 8
  %11 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %12 = call {}*** @julia.get_pgcstack() #56
  %ptls_field792 = getelementptr inbounds {}**, {}*** %12, i64 2
  %13 = bitcast {}*** %ptls_field792 to i64***
  %ptls_load793794 = load i64**, i64*** %13, align 8, !tbaa !69
  %14 = getelementptr inbounds i64*, i64** %ptls_load793794, i64 2
  %safepoint = load i64*, i64** %14, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #56, !dbg !2394
  fence syncscope("singlethread") seq_cst
  %15 = bitcast {} addrspace(10)* %0 to i8 addrspace(10)*, !dbg !2395
  %getfield_addr795 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 120, !dbg !2395
  %16 = bitcast i8 addrspace(10)* %getfield_addr795 to {} addrspace(10)* addrspace(10)*, !dbg !2395
  %17 = addrspacecast {} addrspace(10)* addrspace(10)* %16 to {} addrspace(10)* addrspace(11)*, !dbg !2395
  %getfield = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %17 unordered, align 8, !dbg !2395, !tbaa !307, !alias.scope !117, !noalias !271, !nonnull !68, !dereferenceable !453, !align !454
  %getfield_addr2796 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 128, !dbg !2395
  %18 = bitcast i8 addrspace(10)* %getfield_addr2796 to {} addrspace(10)* addrspace(10)*, !dbg !2395
  %19 = addrspacecast {} addrspace(10)* addrspace(10)* %18 to {} addrspace(10)* addrspace(11)*, !dbg !2395
  %getfield3 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %19 unordered, align 8, !dbg !2395, !tbaa !307, !alias.scope !117, !noalias !271, !nonnull !68, !dereferenceable !453, !align !454
  %getfield_addr4797 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 136, !dbg !2395
  %20 = bitcast i8 addrspace(10)* %getfield_addr4797 to {} addrspace(10)* addrspace(10)*, !dbg !2395
  %21 = addrspacecast {} addrspace(10)* addrspace(10)* %20 to {} addrspace(10)* addrspace(11)*, !dbg !2395
  %getfield5 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %21 unordered, align 8, !dbg !2395, !tbaa !307, !alias.scope !117, !noalias !271, !nonnull !68, !dereferenceable !453, !align !454
  %getfield_addr6798 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 168, !dbg !2395
  %22 = bitcast i8 addrspace(10)* %getfield_addr6798 to {} addrspace(10)* addrspace(10)*, !dbg !2395
  %23 = addrspacecast {} addrspace(10)* addrspace(10)* %22 to {} addrspace(10)* addrspace(11)*, !dbg !2395
  %getfield7 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %23 unordered, align 8, !dbg !2395, !tbaa !307, !alias.scope !117, !noalias !271, !nonnull !68, !dereferenceable !453, !align !454
  %getfield_addr8799 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 184, !dbg !2395
  %24 = bitcast i8 addrspace(10)* %getfield_addr8799 to {} addrspace(10)* addrspace(10)*, !dbg !2395
  %25 = addrspacecast {} addrspace(10)* addrspace(10)* %24 to {} addrspace(10)* addrspace(11)*, !dbg !2395
  %getfield9 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25 unordered, align 8, !dbg !2395, !tbaa !307, !alias.scope !117, !noalias !271, !nonnull !68, !dereferenceable !453, !align !454
  %26 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 56, !dbg !2399
  %27 = bitcast i8 addrspace(10)* %26 to double addrspace(10)*, !dbg !2399
  %28 = addrspacecast double addrspace(10)* %27 to double addrspace(11)*, !dbg !2399
  %29 = load double, double addrspace(11)* %28, align 8, !dbg !2399, !tbaa !307, !alias.scope !117, !noalias !271
  %30 = bitcast {} addrspace(10)* %0 to i64 addrspace(10)*, !dbg !2403
  %31 = addrspacecast i64 addrspace(10)* %30 to i64 addrspace(11)*, !dbg !2403
  %32 = load i64, i64 addrspace(11)* %31, align 8, !dbg !2403, !tbaa !307, !alias.scope !117, !noalias !271
  %getfield_addr10800 = getelementptr inbounds i64, i64 addrspace(10)* %30, i64 3, !dbg !2403
  %33 = bitcast i64 addrspace(10)* %getfield_addr10800 to {} addrspace(10)* addrspace(10)*, !dbg !2403
  %34 = addrspacecast {} addrspace(10)* addrspace(10)* %33 to {} addrspace(10)* addrspace(11)*, !dbg !2403
  %getfield11 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %34 unordered, align 8, !dbg !2403, !tbaa !307, !alias.scope !117, !noalias !271, !nonnull !68, !dereferenceable !453, !align !454
  %getfield_addr12801 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 32, !dbg !2403
  %35 = bitcast i8 addrspace(10)* %getfield_addr12801 to {} addrspace(10)* addrspace(10)*, !dbg !2403
  %36 = addrspacecast {} addrspace(10)* addrspace(10)* %35 to {} addrspace(10)* addrspace(11)*, !dbg !2403
  %getfield13 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %36 unordered, align 8, !dbg !2403, !tbaa !307, !alias.scope !117, !noalias !271, !nonnull !68, !dereferenceable !453, !align !454
  %37 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 16, !dbg !2403
  %38 = bitcast i8 addrspace(10)* %37 to double addrspace(10)*, !dbg !2403
  %39 = addrspacecast double addrspace(10)* %38 to double addrspace(11)*, !dbg !2403
  %40 = load double, double addrspace(11)* %39, align 8, !dbg !2403, !tbaa !307, !alias.scope !117, !noalias !271
  %getfield_addr14802 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 96, !dbg !2403
  %41 = bitcast i8 addrspace(10)* %getfield_addr14802 to {} addrspace(10)* addrspace(10)*, !dbg !2403
  %42 = addrspacecast {} addrspace(10)* addrspace(10)* %41 to {} addrspace(10)* addrspace(11)*, !dbg !2403
  %getfield15 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %42 unordered, align 8, !dbg !2403, !tbaa !307, !alias.scope !117, !noalias !271, !nonnull !68, !dereferenceable !453, !align !454
  %getfield_addr16803 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 88, !dbg !2403
  %43 = bitcast i8 addrspace(10)* %getfield_addr16803 to {} addrspace(10)* addrspace(10)*, !dbg !2403
  %44 = addrspacecast {} addrspace(10)* addrspace(10)* %43 to {} addrspace(10)* addrspace(11)*, !dbg !2403
  %getfield17 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %44 unordered, align 8, !dbg !2403, !tbaa !307, !alias.scope !117, !noalias !271, !nonnull !68, !dereferenceable !453, !align !454
  %getfield_addr18804 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 104, !dbg !2403
  %45 = bitcast i8 addrspace(10)* %getfield_addr18804 to {} addrspace(10)* addrspace(10)*, !dbg !2403
  %46 = addrspacecast {} addrspace(10)* addrspace(10)* %45 to {} addrspace(10)* addrspace(11)*, !dbg !2403
  %getfield19 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %46 unordered, align 8, !dbg !2403, !tbaa !307, !alias.scope !117, !noalias !271, !nonnull !68, !dereferenceable !453, !align !454
  %47 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 64, !dbg !2403
  %48 = bitcast i8 addrspace(10)* %47 to {} addrspace(10)* addrspace(10)*, !dbg !2403
  %49 = addrspacecast {} addrspace(10)* addrspace(10)* %48 to {} addrspace(10)* addrspace(11)*, !dbg !2403
  %.unpack.unpack = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %49, align 8, !dbg !2403, !tbaa !307, !alias.scope !117, !noalias !271
  %getfield_addr20806 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 80, !dbg !2407
  %50 = bitcast i8 addrspace(10)* %getfield_addr20806 to {} addrspace(10)* addrspace(10)*, !dbg !2407
  %51 = addrspacecast {} addrspace(10)* addrspace(10)* %50 to {} addrspace(10)* addrspace(11)*, !dbg !2407
  %getfield21 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %51 unordered, align 8, !dbg !2407, !tbaa !307, !alias.scope !117, !noalias !271, !nonnull !68, !dereferenceable !453, !align !454
  %52 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 48, !dbg !2411
  %53 = bitcast i8 addrspace(10)* %52 to double addrspace(10)*, !dbg !2411
  %54 = addrspacecast double addrspace(10)* %53 to double addrspace(11)*, !dbg !2411
  %55 = load double, double addrspace(11)* %54, align 8, !dbg !2411, !tbaa !307, !alias.scope !117, !noalias !271
  %56 = bitcast {} addrspace(10)* %getfield15 to {} addrspace(10)* addrspace(10)*, !dbg !2413
  %57 = addrspacecast {} addrspace(10)* addrspace(10)* %56 to {} addrspace(10)* addrspace(11)*, !dbg !2413
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %57, i64 3, !dbg !2413
  %58 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*, !dbg !2413
  %arraysize = load i64, i64 addrspace(11)* %58, align 8, !dbg !2413, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %memcpy_refined_dst25 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct23, i64 0, i32 0, i64 0, i64 0, !dbg !2420
  store i64 %arraysize, i64* %memcpy_refined_dst25, align 8, !dbg !2420, !tbaa !133, !alias.scope !135, !noalias !2422
  %memcpy_refined_dst26 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct23, i64 0, i32 1, !dbg !2420
  store i64 1, i64* %memcpy_refined_dst26, align 8, !dbg !2420, !tbaa !133, !alias.scope !135, !noalias !2422
  %arraysize_ptr27 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %57, i64 4, !dbg !2425
  %59 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr27 to i64 addrspace(11)*, !dbg !2425
  %arraysize28 = load i64, i64 addrspace(11)* %59, align 16, !dbg !2425, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %.not = icmp eq i64 %arraysize28, 0, !dbg !2429
  br i1 %.not, label %L33, label %L36, !dbg !2428

L33:                                              ; preds = %top
  %60 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct23 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !2428
  call fastcc void @julia_throw_boundserror_1989({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield15, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %60) #57, !dbg !2428
  unreachable, !dbg !2428

L36:                                              ; preds = %top
  %61 = bitcast {} addrspace(10)* %getfield11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2433
  %62 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %61 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2433
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %62, i64 0, i32 1, !dbg !2433
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !2433, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %63 = icmp eq i64 %arraysize, %arraylen, !dbg !2439
  %64 = icmp eq i64 %arraylen, 1, !dbg !2441
  %value_phi.in = or i1 %63, %64, !dbg !2441
  br i1 %value_phi.in, label %L75, label %L60, !dbg !2442

L60:                                              ; preds = %L36
  %65 = call fastcc [1 x {} addrspace(10)*] @julia_DimensionMismatch_1976() #56, !dbg !2442
  %current_task786949 = getelementptr inbounds {}**, {}*** %12, i64 -14, !dbg !2442
  %current_task786 = bitcast {}*** %current_task786949 to {}**, !dbg !2442
  %box787 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task786, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #58, !dbg !2442
  %66 = bitcast {} addrspace(10)* %box787 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !2442
  %67 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %66, i64 0, i64 0, !dbg !2442
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267317456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %67, align 8, !dbg !2442, !tbaa !113, !alias.scope !117, !noalias !2443
  %68 = addrspacecast {} addrspace(10)* %box787 to {} addrspace(12)*, !dbg !2442
  call void @ijl_throw({} addrspace(12)* %68) #57, !dbg !2442
  unreachable, !dbg !2442

L75:                                              ; preds = %L36
  br i1 %63, label %L86, label %L105, !dbg !2444

L86:                                              ; preds = %L75
  %.not813 = icmp eq i64 %arraysize, 0, !dbg !2446
  br i1 %.not813, label %L209, label %L90, !dbg !2448

L90:                                              ; preds = %L86
  %69 = addrspacecast {} addrspace(10)* %getfield15 to {} addrspace(11)*, !dbg !2450
  %70 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %69) #59, !dbg !2450
  %71 = bitcast {}* %70 to i8**, !dbg !2450
  %arrayptr755 = load i8*, i8** %71, align 8, !dbg !2450, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68
  %72 = addrspacecast {} addrspace(10)* %getfield11 to {} addrspace(11)*, !dbg !2457
  %73 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %72) #59, !dbg !2457
  %74 = bitcast {}* %73 to i8**, !dbg !2457
  %arrayptr757 = load i8*, i8** %74, align 8, !dbg !2457, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %.not933.not = icmp eq i8* %arrayptr755, %arrayptr757, !dbg !2460
  br i1 %.not933.not, label %L98, label %L101, !dbg !2455

L98:                                              ; preds = %L90
  %75 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %getfield11) #56, !dbg !2463
  br label %L101, !dbg !2465

L101:                                             ; preds = %L98, %L90
  %value_phi758 = phi {} addrspace(10)* [ %75, %L98 ], [ %getfield11, %L90 ]
  %.repack934 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %11, i64 0, i32 0, !dbg !2473
  store {} addrspace(10)* %getfield15, {} addrspace(10)** %.repack934, align 8, !dbg !2473, !noalias !2474
  %76 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %11, i64 0, i32 1, i32 0, i64 0, i64 0, !dbg !2473
  store i64 %arraysize, i64* %76, align 8, !dbg !2473, !noalias !2474
  %.repack935.repack941 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %11, i64 0, i32 1, i32 1, !dbg !2473
  store i64 1, i64* %.repack935.repack941, align 8, !dbg !2473, !noalias !2474
  %.repack937 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %11, i64 0, i32 2, !dbg !2473
  store i64 0, i64* %.repack937, align 8, !dbg !2473, !noalias !2474
  %.repack939 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %11, i64 0, i32 3, !dbg !2473
  store i64 1, i64* %.repack939, align 8, !dbg !2473, !noalias !2474
  %77 = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %11 to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !2473
  call fastcc void @julia_copyto_unaliased__1984({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree noundef nonnull writeonly sret({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }) align 8 dereferenceable(40) %9, [1 x {} addrspace(10)*]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) "enzymejl_returnRoots" %10, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(40) %77, {} addrspace(10)* nocapture noundef nonnull readonly align 16 dereferenceable(40) %value_phi758) #56, !dbg !2473
  br label %L209, !dbg !2473

L105:                                             ; preds = %L75
  %78 = addrspacecast {} addrspace(10)* %getfield15 to {} addrspace(11)*, !dbg !2475
  %79 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %78) #59, !dbg !2475
  %80 = bitcast {}* %79 to i8**, !dbg !2475
  %arrayptr760 = load i8*, i8** %80, align 8, !dbg !2475, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68
  %81 = addrspacecast {} addrspace(10)* %getfield11 to {} addrspace(11)*, !dbg !2486
  %82 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %81) #59, !dbg !2486
  %83 = bitcast {}* %82 to i8**, !dbg !2486
  %arrayptr762 = load i8*, i8** %83, align 8, !dbg !2486, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %.not943.not = icmp eq i8* %arrayptr760, %arrayptr762, !dbg !2489
  br i1 %.not943.not, label %L113, label %L118, !dbg !2480

L113:                                             ; preds = %L105
  %84 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %getfield11) #56, !dbg !2492
  %.phi.trans.insert = bitcast {} addrspace(10)* %84 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert961 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr764.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert961, i64 0, i32 1
  %arraylen765.pre = load i64, i64 addrspace(11)* %arraylen_ptr764.phi.trans.insert, align 8, !dbg !2494, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  br label %L118, !dbg !2465

L118:                                             ; preds = %L113, %L105
  %arraylen765 = phi i64 [ %arraylen765.pre, %L113 ], [ %arraylen, %L105 ], !dbg !2494
  %value_phi763 = phi {} addrspace(10)* [ %84, %L113 ], [ %getfield11, %L105 ]
  %.not946 = icmp eq i64 %arraylen765, 1, !dbg !2498
  %.not944 = icmp eq i64 %arraysize, 0, !dbg !2502
  br i1 %.not944, label %L209, label %L160.lr.ph, !dbg !2503

L160.lr.ph:                                       ; preds = %L118
  %85 = bitcast {} addrspace(10)* %value_phi763 to double addrspace(13)* addrspace(10)*
  %86 = addrspacecast double addrspace(13)* addrspace(10)* %85 to double addrspace(13)* addrspace(11)*
  %arrayptr773947 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %86, align 8, !tbaa !382, !alias.scope !2505, !noalias !336, !nonnull !68
  %87 = bitcast {} addrspace(10)* %getfield15 to double addrspace(13)* addrspace(10)*
  %88 = addrspacecast double addrspace(13)* addrspace(10)* %87 to double addrspace(13)* addrspace(11)*
  %arrayptr777948 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %88, align 16, !tbaa !73, !invariant.load !68, !alias.scope !2506, !noalias !97, !nonnull !68
  br label %L160, !dbg !2507

L160:                                             ; preds = %L160, %L160.lr.ph
  %iv = phi i64 [ %iv.next, %L160 ], [ 0, %L160.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !2508
  %89 = select i1 %.not946, i64 0, i64 %iv, !dbg !2508
  %90 = getelementptr inbounds double, double addrspace(13)* %arrayptr773947, i64 %89, !dbg !2508
  %arrayref774 = load double, double addrspace(13)* %90, align 8, !dbg !2508, !tbaa !269, !alias.scope !117, !noalias !271
  %91 = getelementptr inbounds double, double addrspace(13)* %arrayptr777948, i64 %iv, !dbg !2515
  store double %arrayref774, double addrspace(13)* %91, align 8, !dbg !2515, !tbaa !269, !alias.scope !117, !noalias !2443
  %exitcond1044.not = icmp eq i64 %iv.next, %arraysize, !dbg !2517
  br i1 %exitcond1044.not, label %L209.loopexit, label %L160, !dbg !2507, !llvm.loop !2518

L209.loopexit:                                    ; preds = %L160
  br label %L209, !dbg !2519

L209:                                             ; preds = %L209.loopexit, %L118, %L101, %L86
  %memcpy_refined_dst64 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct62, i64 0, i64 0, i64 0, !dbg !2519
  store i64 %arraysize, i64* %memcpy_refined_dst64, align 8, !dbg !2519, !tbaa !133, !alias.scope !135, !noalias !2422
  %92 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize) #60, !dbg !2522
  %93 = bitcast {} addrspace(10)* %92 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2527
  %94 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %93 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2527
  %arraylen_ptr65 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %94, i64 0, i32 1, !dbg !2527
  %arraylen66 = load i64, i64 addrspace(11)* %arraylen_ptr65, align 8, !dbg !2527, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not815 = icmp eq i64 %arraylen66, %arraysize, !dbg !2530
  br i1 %.not815, label %L222, label %L275, !dbg !2529

L222:                                             ; preds = %L209
  %.not816 = icmp eq i64 %arraysize, 0, !dbg !2533
  br i1 %.not816, label %pass.2, label %L243.preheader, !dbg !2538

L243.preheader:                                   ; preds = %L222
  %95 = bitcast {} addrspace(10)* %getfield15 to double addrspace(13)* addrspace(10)*
  %96 = addrspacecast double addrspace(13)* addrspace(10)* %95 to double addrspace(13)* addrspace(11)*
  %arrayptr742930 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %96, align 16
  %97 = bitcast {} addrspace(10)* %92 to double addrspace(13)* addrspace(10)*
  %98 = addrspacecast double addrspace(13)* addrspace(10)* %97 to double addrspace(13)* addrspace(11)*
  br label %L243, !dbg !2539

L243:                                             ; preds = %L250, %L243.preheader
  %iv1 = phi i64 [ %iv.next2, %L250 ], [ 0, %L243.preheader ]
  %value_phi78.off0 = phi i1 [ %103, %L250 ], [ false, %L243.preheader ]
  %value_phi79 = phi i64 [ %value_phi748, %L250 ], [ 1, %L243.preheader ]
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !2539
  br i1 %value_phi78.off0, label %pass.2.loopexit, label %L250, !dbg !2539

L250:                                             ; preds = %L243
  %99 = add nsw i64 %iv.next2, -1, !dbg !2541
  %100 = getelementptr inbounds double, double addrspace(13)* %arrayptr742930, i64 %99, !dbg !2541
  %arrayref743 = load double, double addrspace(13)* %100, align 8, !dbg !2541, !tbaa !269, !alias.scope !117, !noalias !271
  %101 = add i64 %value_phi79, -1, !dbg !2543
  %arrayptr745931 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %98, align 8, !dbg !2543, !tbaa !382, !alias.scope !2505, !noalias !336, !nonnull !68
  %102 = getelementptr inbounds double, double addrspace(13)* %arrayptr745931, i64 %101, !dbg !2543
  store double %arrayref743, double addrspace(13)* %102, align 8, !dbg !2543, !tbaa !269, !alias.scope !117, !noalias !2443
  %103 = icmp eq i64 %value_phi79, %arraysize, !dbg !2544
  %104 = add i64 %value_phi79, 1, !dbg !2545
  %value_phi748 = select i1 %103, i64 undef, i64 %104, !dbg !2545
  %.not932 = icmp eq i64 %iv.next2, %arraysize, !dbg !2547
  %105 = add nuw nsw i64 %iv.next2, 1, !dbg !2465
  br i1 %.not932, label %pass.2.loopexit, label %L243, !dbg !2467

L275:                                             ; preds = %L209
  %106 = addrspacecast [1 x [1 x i64]]* %newstruct62 to [1 x [1 x i64]] addrspace(11)*, !dbg !2529
  call fastcc void @julia_throw_checksize_error_1987({} addrspace(10)* nocapture noundef nonnull readonly align 16 dereferenceable(40) %92, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %106) #57, !dbg !2529
  unreachable, !dbg !2529

L322:                                             ; preds = %pass.2
  %107 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct103 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !2548
  call fastcc void @julia_throw_boundserror_1989({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield19, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %107) #57, !dbg !2548
  unreachable, !dbg !2548

L325:                                             ; preds = %pass.2
  %108 = addrspacecast [1 x [1 x i64]]* %newstruct102 to [1 x [1 x i64]] addrspace(11)*, !dbg !2552
  call fastcc void @julia__unsafe_setindex__2077({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield19, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %334, [1 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %108, i64 noundef signext 1) #56, !dbg !2552
  %109 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 6189285392 to {}*) to {} addrspace(10)*), i64 noundef 6, i64 noundef 6) #60, !dbg !2553
  %110 = bitcast {} addrspace(10)* %109 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2559
  %111 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %110 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2559
  %arraylen_ptr110 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %111, i64 0, i32 1, !dbg !2559
  %arraylen111 = load i64, i64 addrspace(11)* %arraylen_ptr110, align 8, !dbg !2559, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %.not822 = icmp eq i64 %arraylen111, 0, !dbg !2564
  br i1 %.not822, label %L359, label %L325.L341_crit_edge, !dbg !2562

L325.L341_crit_edge:                              ; preds = %L325
  %112 = bitcast {} addrspace(10)* %109 to i8 addrspace(13)* addrspace(10)*, !dbg !2568
  %113 = addrspacecast i8 addrspace(13)* addrspace(10)* %112 to i8 addrspace(13)* addrspace(11)*, !dbg !2568
  %arrayptr119823.pre1025 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %113, align 8, !dbg !2568, !tbaa !73, !invariant.load !68, !alias.scope !2506, !noalias !97
  %114 = shl nuw i64 %arraylen111, 3, !dbg !2562
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr119823.pre1025, i8 0, i64 %114, i1 false) #56, !dbg !2568, !tbaa !269, !alias.scope !117, !noalias !2443
  br label %L359, !dbg !2570

L359:                                             ; preds = %L325.L341_crit_edge, %L325
  %115 = bitcast {} addrspace(10)* %109 to {} addrspace(10)* addrspace(10)*, !dbg !2570
  %116 = addrspacecast {} addrspace(10)* addrspace(10)* %115 to {} addrspace(10)* addrspace(11)*, !dbg !2570
  %arraysize_ptr124 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %116, i64 3, !dbg !2570
  %117 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr124 to i64 addrspace(11)*, !dbg !2570
  %arraysize125 = load i64, i64 addrspace(11)* %117, align 8, !dbg !2570, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %inbounds.not = icmp eq i64 %arraysize125, 0, !dbg !2570
  br i1 %inbounds.not, label %oob, label %ib, !dbg !2570

L394:                                             ; preds = %idxend284.L394_crit_edge, %L394
  %iv3 = phi i64 [ 0, %idxend284.L394_crit_edge ], [ %iv.next4, %L394 ]
  %iv.next4 = add nuw nsw i64 %iv3, 1, !dbg !2572
  %118 = add nsw i64 %iv.next4, -1, !dbg !2572
  %memcpy_refined_dst297 = getelementptr inbounds double, double addrspace(13)* %arrayptr296852.pre, i64 %118, !dbg !2572
  store double 1.000000e+00, double addrspace(13)* %memcpy_refined_dst297, align 8, !dbg !2572, !tbaa !269, !alias.scope !117, !noalias !2443
  %.not853 = icmp eq i64 %iv.next4, %arraylen288, !dbg !2578
  %119 = add nuw nsw i64 %iv.next4, 1, !dbg !2579
  br i1 %.not853, label %L412.loopexit, label %L394, !dbg !2580

L412.loopexit:                                    ; preds = %L394
  br label %L412, !dbg !2581

L412:                                             ; preds = %L412.loopexit, %idxend258
  %.repack = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* }* %2, i64 0, i32 0, !dbg !2581
  store i64 0, i64* %.repack, align 8, !dbg !2581, !noalias !2474
  %.repack854 = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* }* %2, i64 0, i32 1, !dbg !2581
  store {} addrspace(10)* %387, {} addrspace(10)** %.repack854, align 8, !dbg !2581, !noalias !2474
  %120 = addrspacecast { i64, {} addrspace(10)* }* %2 to { i64, {} addrspace(10)* } addrspace(11)*, !dbg !2581
  %121 = call fastcc nonnull {} addrspace(10)* @julia__diagm_2062({ i64, {} addrspace(10)* } addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %120) #56, !dbg !2581
  %122 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct309, i64 0, i64 1, i64 0, !dbg !2583
  store i64 %arraysize127, i64* %122, align 8, !dbg !2583, !tbaa !133, !alias.scope !135, !noalias !2422
  %memcpy_refined_dst311 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct309, i64 0, i64 0, i64 0, !dbg !2591
  store i64 %arraysize125, i64* %memcpy_refined_dst311, align 8, !dbg !2591, !tbaa !133, !alias.scope !135, !noalias !2422
  %123 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6189285392 to {}*) to {} addrspace(10)*), i64 %arraysize125, i64 %arraysize127) #60, !dbg !2593
  %124 = bitcast {} addrspace(10)* %123 to {} addrspace(10)* addrspace(10)*, !dbg !2601
  %125 = addrspacecast {} addrspace(10)* addrspace(10)* %124 to {} addrspace(10)* addrspace(11)*, !dbg !2601
  %arraysize_ptr320 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %125, i64 3, !dbg !2601
  %126 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr320 to i64 addrspace(11)*, !dbg !2601
  %arraysize321 = load i64, i64 addrspace(11)* %126, align 8, !dbg !2601, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %.not856 = icmp eq i64 %arraysize321, %arraysize125, !dbg !2605
  br i1 %.not856, label %L457, label %L446.L584_crit_edge, !dbg !2609

L446.L584_crit_edge:                              ; preds = %L412
  %arraysize_ptr728.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %125, i64 4
  %.phi.trans.insert967 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr728.phi.trans.insert to i64 addrspace(11)*
  %arraysize729.pre = load i64, i64 addrspace(11)* %.phi.trans.insert967, align 8, !dbg !2601, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  br label %L584, !dbg !2609

L457:                                             ; preds = %L412
  %arraysize_ptr322 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %125, i64 4, !dbg !2601
  %127 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr322 to i64 addrspace(11)*, !dbg !2601
  %arraysize323 = load i64, i64 addrspace(11)* %127, align 8, !dbg !2601, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %.not929 = icmp eq i64 %arraysize323, %arraysize127, !dbg !2610
  br i1 %.not929, label %L467, label %L584, !dbg !2603

L467:                                             ; preds = %L457
  %128 = addrspacecast {} addrspace(10)* %123 to {} addrspace(11)*, !dbg !2614
  %129 = addrspacecast {} addrspace(10)* %109 to {} addrspace(11)*, !dbg !2614
  %.not857 = icmp eq {} addrspace(11)* %128, %129, !dbg !2614
  %130 = bitcast double addrspace(13)* addrspace(10)* %346 to {} addrspace(10)*, !dbg !2614
  br i1 %.not857, label %L483, label %L470, !dbg !2614

L470:                                             ; preds = %L467
  %131 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %128) #59, !dbg !2620
  %132 = bitcast {}* %131 to i8**, !dbg !2620
  %arrayptr722 = load i8*, i8** %132, align 8, !dbg !2620, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68
  %133 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %129) #59, !dbg !2620
  %134 = bitcast {}* %133 to i8**, !dbg !2620
  %arrayptr724 = load i8*, i8** %134, align 8, !dbg !2620, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68
  %.not928.not = icmp eq i8* %arrayptr722, %arrayptr724, !dbg !2625
  %135 = bitcast double addrspace(13)* addrspace(10)* %346 to {} addrspace(10)*, !dbg !2624
  br i1 %.not928.not, label %L478, label %L483, !dbg !2624

L478:                                             ; preds = %L470
  %136 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %109) #56, !dbg !2628
  %.phi.trans.insert969 = bitcast {} addrspace(10)* %136 to {} addrspace(10)* addrspace(10)*
  %.phi.trans.insert970 = addrspacecast {} addrspace(10)* addrspace(10)* %.phi.trans.insert969 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr328.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert970, i64 3
  %.phi.trans.insert971 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr328.phi.trans.insert to i64 addrspace(11)*
  %arraysize329.pre = load i64, i64 addrspace(11)* %.phi.trans.insert971, align 8, !dbg !2630, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %arraysize_ptr330.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert970, i64 4
  %.phi.trans.insert973 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr330.phi.trans.insert to i64 addrspace(11)*
  %arraysize331.pre = load i64, i64 addrspace(11)* %.phi.trans.insert973, align 8, !dbg !2630, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %.pre = bitcast {} addrspace(10)* %136 to double addrspace(13)* addrspace(10)*
  %.pre1045 = addrspacecast double addrspace(13)* addrspace(10)* %.pre to double addrspace(13)* addrspace(11)*
  %arrayptr353863.pre.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.pre1045, align 8, !tbaa !73, !invariant.load !68, !alias.scope !2506, !noalias !97
  %137 = bitcast double addrspace(13)* addrspace(10)* %.pre to {} addrspace(10)*, !dbg !2634
  br label %L483, !dbg !2634

L483:                                             ; preds = %L478, %L470, %L467
  %nodecayed.arrayptr353863.pre = phi {} addrspace(10)* [ %137, %L478 ], [ %135, %L470 ], [ %130, %L467 ]
  %arraysize331 = phi i64 [ %arraysize331.pre, %L478 ], [ %arraysize127, %L470 ], [ %arraysize127, %L467 ], !dbg !2630
  %arraysize350 = phi i64 [ %arraysize329.pre, %L478 ], [ %arraysize125, %L470 ], [ %arraysize125, %L467 ], !dbg !2630
  %138 = bitcast {} addrspace(10)* %nodecayed.arrayptr353863.pre to double addrspace(13)* addrspace(10)*, !dbg !2642
  %139 = addrspacecast double addrspace(13)* addrspace(10)* %138 to double addrspace(13)* addrspace(11)*, !dbg !2642
  %140 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %139, align 8, !dbg !2642
  %.not862 = icmp eq i64 %arraysize331, 1, !dbg !2642
  %.not861 = icmp eq i64 %arraysize350, 1, !dbg !2647
  %141 = bitcast {} addrspace(10)* %123 to double addrspace(13)* addrspace(10)*
  %142 = addrspacecast double addrspace(13)* addrspace(10)* %141 to double addrspace(13)* addrspace(11)*
  %umax1042 = call i64 @llvm.umax.i64(i64 %arraysize125, i64 1) #56, !dbg !2650
  %arrayptr358864.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %142, align 8, !tbaa !73, !invariant.load !68, !alias.scope !2506, !noalias !97
  %umax1078 = call i64 @llvm.umax.i64(i64 %arraysize127, i64 1) #56, !dbg !2650
  br label %L558.lr.ph, !dbg !2650

L558.lr.ph:                                       ; preds = %L562, %L483
  %iv5 = phi i64 [ %iv.next6, %L562 ], [ 0, %L483 ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  %value_phi341.op = add nsw i64 %iv.next6, -1
  %143 = select i1 %.not862, i64 0, i64 %value_phi341.op
  %144 = mul i64 %143, %arraysize350
  %145 = mul i64 %value_phi341.op, %arraysize125
  br label %L558, !dbg !2652

L558:                                             ; preds = %L558, %L558.lr.ph
  %iv7 = phi i64 [ %iv.next8, %L558 ], [ 0, %L558.lr.ph ]
  %iv.next8 = add nuw nsw i64 %iv7, 1, !dbg !2653
  %146 = select i1 %.not861, i64 0, i64 %iv7, !dbg !2653
  %147 = add i64 %146, %144, !dbg !2653
  %148 = getelementptr inbounds double, double addrspace(13)* %140, i64 %147, !dbg !2653
  %arrayref = load double, double addrspace(13)* %148, align 8, !dbg !2653, !tbaa !269, !alias.scope !117, !noalias !271
  %149 = fmul double %40, %arrayref, !dbg !2662
  %150 = add i64 %iv7, %145, !dbg !2665
  %151 = getelementptr inbounds double, double addrspace(13)* %arrayptr358864.pre, i64 %150, !dbg !2665
  store double %149, double addrspace(13)* %151, align 8, !dbg !2665, !tbaa !269, !alias.scope !117, !noalias !2443
  %exitcond1043.not = icmp eq i64 %iv.next8, %umax1042, !dbg !2667
  br i1 %exitcond1043.not, label %L562, label %L558, !dbg !2652, !llvm.loop !2668

L562:                                             ; preds = %L558
  %152 = add nuw nsw i64 %iv.next6, 1, !dbg !2669
  %exitcond.not1079 = icmp eq i64 %iv.next6, %umax1078, !dbg !2673
  br i1 %exitcond.not1079, label %L598, label %L558.lr.ph, !dbg !2672

L584:                                             ; preds = %L457, %L446.L584_crit_edge
  %arraysize729 = phi i64 [ %arraysize729.pre, %L446.L584_crit_edge ], [ %arraysize323, %L457 ], !dbg !2601
  %153 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct734, i64 0, i64 0, i64 0, !dbg !2677
  store i64 %arraysize321, i64* %153, align 8, !dbg !2677, !tbaa !133, !alias.scope !135, !noalias !2422
  %154 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct734, i64 0, i64 1, i64 0, !dbg !2677
  store i64 %arraysize729, i64* %154, align 8, !dbg !2677, !tbaa !133, !alias.scope !135, !noalias !2422
  %155 = addrspacecast [2 x [1 x i64]]* %newstruct734 to [2 x [1 x i64]] addrspace(11)*, !dbg !2603
  %156 = addrspacecast [2 x [1 x i64]]* %newstruct309 to [2 x [1 x i64]] addrspace(11)*, !dbg !2603
  call fastcc void @julia_throwdm_1974([2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %155, [2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %156) #57, !dbg !2603
  unreachable, !dbg !2603

L598:                                             ; preds = %L562
  %157 = call fastcc nonnull {} addrspace(10)* @julia___2053({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %121, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %123) #56, !dbg !2577
  %158 = add i64 %32, 1, !dbg !2681
  %159 = call i64 @llvm.smax.i64(i64 %158, i64 1) #56, !dbg !2683
  %160 = icmp ugt i64 %159, 1, !dbg !2684
  br i1 %160, label %L616.preheader, label %L1354, !dbg !2682

L616.preheader:                                   ; preds = %L598
  %161 = bitcast {} addrspace(10)* %157 to {} addrspace(10)* addrspace(10)*
  %162 = addrspacecast {} addrspace(10)* addrspace(10)* %161 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr382 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %162, i64 3
  %163 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr382 to i64 addrspace(11)*
  %arraysize383 = load i64, i64 addrspace(11)* %163, align 8, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %164 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %3, i64 0, i64 0
  %165 = addrspacecast [1 x {} addrspace(10)*]* %3 to [1 x {} addrspace(10)*] addrspace(11)*
  %166 = bitcast {} addrspace(10)* %getfield13 to {} addrspace(10)* addrspace(10)*
  %167 = addrspacecast {} addrspace(10)* addrspace(10)* %166 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr384 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %167, i64 3
  %168 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr384 to i64 addrspace(11)*
  %arraysize385 = load i64, i64 addrspace(11)* %168, align 8
  %memcpy_refined_dst393 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct391, i64 0, i32 0, i64 0, i64 0
  %169 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct391, i64 0, i32 1
  %arraysize_ptr394 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %167, i64 4
  %170 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr394 to i64 addrspace(11)*
  %arraysize395 = load i64, i64 addrspace(11)* %170, align 8
  %memcpy_refined_dst399 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct397, i64 0, i64 0, i64 0
  %.not867 = icmp eq i64 %arraysize385, 0
  %171 = bitcast {} addrspace(10)* %getfield13 to double addrspace(13)* addrspace(10)*
  %172 = addrspacecast double addrspace(13)* addrspace(10)* %171 to double addrspace(13)* addrspace(11)*
  %173 = bitcast {} addrspace(10)* %getfield3 to {} addrspace(10)* addrspace(10)*
  %174 = addrspacecast {} addrspace(10)* addrspace(10)* %173 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr427 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %174, i64 3
  %175 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr427 to i64 addrspace(11)*
  %arraysize428 = load i64, i64 addrspace(11)* %175, align 8
  %current_task429870 = getelementptr inbounds {}**, {}*** %12, i64 -14
  %current_task429 = bitcast {}*** %current_task429870 to {}**
  %memcpy_refined_dst446 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct444, i64 0, i32 0, i64 0, i64 0
  %176 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct444, i64 0, i32 1
  %177 = addrspacecast {} addrspace(10)* %getfield15 to {} addrspace(11)*
  %178 = bitcast {} addrspace(10)* %getfield15 to double addrspace(13)* addrspace(10)*
  %179 = addrspacecast double addrspace(13)* addrspace(10)* %178 to double addrspace(13)* addrspace(11)*
  %arrayptr692923 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %179, align 16
  %.repack909 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %8, i64 0, i32 0
  %180 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %8, i64 0, i32 1, i32 0, i64 0, i64 0
  %.repack910.repack916 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %8, i64 0, i32 1, i32 1
  %.repack912 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %8, i64 0, i32 2
  %.repack914 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %8, i64 0, i32 3
  %181 = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %8 to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*
  %182 = bitcast {} addrspace(10)* %getfield21 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %183 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %182 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr471 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %183, i64 0, i32 1
  %184 = bitcast {} addrspace(10)* %getfield21 to i64 addrspace(13)* addrspace(10)*
  %185 = addrspacecast i64 addrspace(13)* addrspace(10)* %184 to i64 addrspace(13)* addrspace(11)*
  %186 = getelementptr inbounds i8, i8 addrspace(10)* %15, i64 72
  %187 = bitcast i8 addrspace(10)* %186 to double addrspace(10)*
  %188 = addrspacecast double addrspace(10)* %187 to double addrspace(11)*
  %189 = bitcast {} addrspace(10)* %getfield5 to {} addrspace(10)* addrspace(10)*
  %190 = addrspacecast {} addrspace(10)* addrspace(10)* %189 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr491 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %190, i64 3
  %191 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr491 to i64 addrspace(11)*
  %arraysize492 = load i64, i64 addrspace(11)* %191, align 8
  %192 = bitcast {} addrspace(10)* %getfield17 to {} addrspace(10)* addrspace(10)*
  %193 = addrspacecast {} addrspace(10)* addrspace(10)* %192 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr493 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %193, i64 3
  %194 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr493 to i64 addrspace(11)*
  %arraysize494 = load i64, i64 addrspace(11)* %194, align 8
  %memcpy_refined_dst502 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct500, i64 0, i32 0, i64 0, i64 0
  %195 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct500, i64 0, i32 1
  %arraysize_ptr503 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %193, i64 4
  %196 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr503 to i64 addrspace(11)*
  %arraysize504 = load i64, i64 addrspace(11)* %196, align 8
  %memcpy_refined_dst508 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct506, i64 0, i64 0, i64 0
  %.not888 = icmp eq i64 %arraysize494, 0
  %197 = bitcast {} addrspace(10)* %getfield17 to double addrspace(13)* addrspace(10)*
  %198 = addrspacecast double addrspace(13)* addrspace(10)* %197 to double addrspace(13)* addrspace(11)*
  %memcpy_refined_dst564 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct562, i64 0, i64 0, i64 0
  %199 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %4, i64 0, i64 0
  %200 = addrspacecast [1 x {} addrspace(10)*]* %4 to [1 x {} addrspace(10)*] addrspace(11)*
  %memcpy_refined_src595 = getelementptr inbounds [3 x double], [3 x double]* %5, i64 0, i64 0
  %memcpy_refined_src597 = getelementptr inbounds [3 x double], [3 x double]* %5, i64 0, i64 1
  %memcpy_refined_src599 = getelementptr inbounds [3 x double], [3 x double]* %5, i64 0, i64 2
  %201 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct618, i64 0, i64 0, i64 0
  %memcpy_refined_dst621 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct619, i64 0, i32 0, i64 0, i64 0
  %202 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct619, i64 0, i32 1
  %203 = addrspacecast [1 x [1 x i64]]* %newstruct618 to [1 x [1 x i64]] addrspace(11)*
  %204 = add i64 %arraysize395, 2, !dbg !2683
  %umax = call i64 @llvm.umax.i64(i64 %arraysize28, i64 1) #56, !dbg !2683
  %205 = add nuw nsw i64 %umax, 1, !dbg !2683
  %umax1040 = call i64 @llvm.umax.i64(i64 %arraysize108, i64 1) #56, !dbg !2683
  %206 = add nuw nsw i64 %umax1040, 1, !dbg !2683
  br label %L616, !dbg !2683

L616:                                             ; preds = %L1340, %L616.preheader
  %iv9 = phi i64 [ %iv.next10, %L1340 ], [ 0, %L616.preheader ]
  %value_phi372 = phi double [ %279, %L1340 ], [ 0.000000e+00, %L616.preheader ]
  %207 = add i64 %iv9, 2, !dbg !2688
  %iv.next10 = add nuw nsw i64 %iv9, 1, !dbg !2688
  %208 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize383) #60, !dbg !2688
  %209 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1994({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %208, i32 noundef zeroext 1308622848, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %157, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield11) #56, !dbg !2693
  store {} addrspace(10)* %.unpack.unpack, {} addrspace(10)** %164, align 8, !dbg !2696, !noalias !2474
  %210 = call fastcc nonnull {} addrspace(10)* @julia_q_true_2051([1 x {} addrspace(10)*] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %165, double %value_phi372) #56, !dbg !2696
  %211 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5139467504 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %210, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*)) #61, !dbg !2641
  %212 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138639312 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %getfield, {} addrspace(10)* nonnull %211) #61, !dbg !2641
  %213 = add nsw i64 %207, -1, !dbg !2697
  store i64 %arraysize385, i64* %memcpy_refined_dst393, align 8, !dbg !2698, !tbaa !133, !alias.scope !135, !noalias !2422
  store i64 %213, i64* %169, align 8, !dbg !2698, !tbaa !133, !alias.scope !135, !noalias !2422
  %214 = add nsw i64 %207, -2, !dbg !2700
  %exitcond1038.not = icmp eq i64 %207, %204, !dbg !2706
  br i1 %exitcond1038.not, label %L668, label %L671, !dbg !2705

L668:                                             ; preds = %L616
  %215 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct391 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !2705
  call fastcc void @julia_throw_boundserror_1989({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield13, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %215) #57, !dbg !2705
  unreachable, !dbg !2705

L671:                                             ; preds = %L616
  store i64 %arraysize385, i64* %memcpy_refined_dst399, align 8, !dbg !2707, !tbaa !133, !alias.scope !135, !noalias !2422
  %216 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize385) #60, !dbg !2710
  %217 = bitcast {} addrspace(10)* %216 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2715
  %218 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %217 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2715
  %arraylen_ptr400 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %218, i64 0, i32 1, !dbg !2715
  %arraylen401 = load i64, i64 addrspace(11)* %arraylen_ptr400, align 8, !dbg !2715, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not866 = icmp eq i64 %arraylen401, %arraysize385, !dbg !2718
  br i1 %.not866, label %L684, label %L737, !dbg !2717

L684:                                             ; preds = %L671
  br i1 %.not867, label %L741.L742_crit_edge, label %L705.preheader, !dbg !2721

L705.preheader:                                   ; preds = %L684
  %219 = mul i64 %214, %arraysize385, !dbg !2722
  %220 = add i64 %219, -1, !dbg !2722
  %arrayptr709925 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %172, align 16
  %221 = bitcast {} addrspace(10)* %216 to double addrspace(13)* addrspace(10)*
  %222 = addrspacecast double addrspace(13)* addrspace(10)* %221 to double addrspace(13)* addrspace(11)*
  br label %L705, !dbg !2725

L705:                                             ; preds = %L712, %L705.preheader
  %iv11 = phi i64 [ %iv.next12, %L712 ], [ 0, %L705.preheader ]
  %value_phi413.off0 = phi i1 [ %227, %L712 ], [ false, %L705.preheader ]
  %value_phi414 = phi i64 [ %value_phi715, %L712 ], [ 1, %L705.preheader ]
  %iv.next12 = add nuw nsw i64 %iv11, 1, !dbg !2725
  br i1 %value_phi413.off0, label %L741.L742_crit_edge.loopexit, label %L712, !dbg !2725

L712:                                             ; preds = %L705
  %223 = add i64 %220, %iv.next12, !dbg !2722
  %224 = getelementptr inbounds double, double addrspace(13)* %arrayptr709925, i64 %223, !dbg !2722
  %arrayref710 = load double, double addrspace(13)* %224, align 8, !dbg !2722, !tbaa !269, !alias.scope !117, !noalias !271
  %225 = add i64 %value_phi414, -1, !dbg !2726
  %arrayptr712926 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %222, align 8, !dbg !2726, !tbaa !382, !alias.scope !2505, !noalias !336, !nonnull !68
  %226 = getelementptr inbounds double, double addrspace(13)* %arrayptr712926, i64 %225, !dbg !2726
  store double %arrayref710, double addrspace(13)* %226, align 8, !dbg !2726, !tbaa !269, !alias.scope !117, !noalias !2443
  %227 = icmp eq i64 %value_phi414, %arraysize385, !dbg !2727
  %228 = add i64 %value_phi414, 1, !dbg !2728
  %value_phi715 = select i1 %227, i64 undef, i64 %228, !dbg !2728
  %.not927 = icmp eq i64 %iv.next12, %arraysize385, !dbg !2730
  %229 = add i64 %iv.next12, 1, !dbg !2634
  br i1 %.not927, label %L741.L742_crit_edge.loopexit, label %L705, !dbg !2636

L737:                                             ; preds = %L671
  %230 = addrspacecast [1 x [1 x i64]]* %newstruct397 to [1 x [1 x i64]] addrspace(11)*, !dbg !2717
  call fastcc void @julia_throw_checksize_error_1987({} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %216, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %230) #57, !dbg !2717
  unreachable, !dbg !2717

L741.L742_crit_edge.loopexit:                     ; preds = %L705, %L712
  br label %L741.L742_crit_edge, !dbg !2688

L741.L742_crit_edge:                              ; preds = %L741.L742_crit_edge.loopexit, %L684
  %231 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize428) #60, !dbg !2688
  %232 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1994({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %231, i32 noundef zeroext 1308622848, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield3, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %216) #56, !dbg !2693
  %233 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5140980816 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %209, {} addrspace(10)* nonnull %212, {} addrspace(10)* nonnull %232) #61, !dbg !2641
  %234 = call {} addrspace(10)* @julia.typeof({} addrspace(10)* nonnull %233) #59, !dbg !2641
  %235 = addrspacecast {} addrspace(10)* %234 to {} addrspace(11)*, !dbg !2641
  %236 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %235) #59, !dbg !2641
  %exactly_isa.not = icmp eq {}* %236, inttoptr (i64 11208048192 to {}*), !dbg !2641
  br i1 %exactly_isa.not, label %L770, label %L777, !dbg !2641

L770:                                             ; preds = %L741.L742_crit_edge
  %237 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5206735824 to {}*) to {} addrspace(10)*), i64 32) #60, !dbg !2731
  %newstruct430 = call noalias nonnull dereferenceable(24) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task429, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134423536 to {}*) to {} addrspace(10)*)) #58, !dbg !2732
  %238 = bitcast {} addrspace(10)* %newstruct430 to {} addrspace(10)* addrspace(10)*, !dbg !2732
  %239 = addrspacecast {} addrspace(10)* addrspace(10)* %238 to {} addrspace(10)* addrspace(11)*, !dbg !2732
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %239, align 8, !dbg !2732, !tbaa !307, !alias.scope !117, !noalias !2443
  store atomic {} addrspace(10)* %237, {} addrspace(10)* addrspace(11)* %239 release, align 8, !dbg !2732, !tbaa !307, !alias.scope !117, !noalias !2443
  %240 = bitcast {} addrspace(10)* %newstruct430 to i8 addrspace(10)*, !dbg !2732
  %241 = addrspacecast i8 addrspace(10)* %240 to i8 addrspace(11)*, !dbg !2732
  %242 = getelementptr inbounds i8, i8 addrspace(11)* %241, i64 8, !dbg !2732
  %243 = bitcast {} addrspace(10)* %233 to [2 x {} addrspace(10)*] addrspace(10)*, !dbg !2735
  %244 = addrspacecast [2 x {} addrspace(10)*] addrspace(10)* %243 to [2 x {} addrspace(10)*] addrspace(11)*, !dbg !2735
  %getfield_addr433 = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(11)* %244, i64 0, i64 1, !dbg !2735
  call void @llvm.memset.p11i8.i64(i8 addrspace(11)* noundef align 8 dereferenceable(16) %242, i8 0, i64 16, i1 false) #56, !dbg !2732
  %getfield434 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %getfield_addr433 unordered, align 8, !dbg !2735, !tbaa !894, !alias.scope !117, !noalias !271, !nonnull !68
  %box = call noalias nonnull dereferenceable(16) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task429, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11208048192 to {}*) to {} addrspace(10)*)) #58, !dbg !2736
  %245 = bitcast {} addrspace(10)* %box to [2 x {} addrspace(10)*] addrspace(10)*, !dbg !2736
  %.repack872 = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(10)* %245, i64 0, i64 0, !dbg !2736
  store {} addrspace(10)* %newstruct430, {} addrspace(10)* addrspace(10)* %.repack872, align 8, !dbg !2736, !tbaa !113, !alias.scope !117, !noalias !2443
  %.repack873 = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(10)* %245, i64 0, i64 1, !dbg !2736
  store {} addrspace(10)* %getfield434, {} addrspace(10)* addrspace(10)* %.repack873, align 8, !dbg !2736, !tbaa !113, !alias.scope !117, !noalias !2443
  %246 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11210561216 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136487904 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134803728 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* nonnull %233) #61, !dbg !2736
  br label %L779, !dbg !2737

L777:                                             ; preds = %L741.L742_crit_edge
  %247 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5140568784 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134803728 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %233) #61, !dbg !2641
  br label %L779, !dbg !2737

L779:                                             ; preds = %L777, %L770
  %value_phi436 = phi {} addrspace(10)* [ %246, %L770 ], [ %247, %L777 ]
  %248 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138755328 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %getfield11, {} addrspace(10)* nonnull %value_phi436) #61, !dbg !2641
  store i64 %arraysize, i64* %memcpy_refined_dst446, align 8, !dbg !2743, !tbaa !133, !alias.scope !135, !noalias !2422
  store i64 %207, i64* %176, align 8, !dbg !2743, !tbaa !133, !alias.scope !135, !noalias !2422
  %exitcond1039.not = icmp eq i64 %207, %205, !dbg !2748
  br i1 %exitcond1039.not, label %L799, label %L802, !dbg !2753

L799:                                             ; preds = %L779
  %249 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct444 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !2753
  call fastcc void @julia_throw_boundserror_1989({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield15, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %249) #57, !dbg !2753
  unreachable, !dbg !2753

L802:                                             ; preds = %L779
  %250 = mul i64 %213, %arraysize, !dbg !2754
  %251 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %getfield11) #56, !dbg !2764
  %252 = bitcast {} addrspace(10)* %251 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2765
  %253 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %252 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2765
  %arraylen_ptr460 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %253, i64 0, i32 1, !dbg !2765
  %arraylen461 = load i64, i64 addrspace(11)* %arraylen_ptr460, align 8, !dbg !2765, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %254 = icmp eq i64 %arraysize, %arraylen461, !dbg !2771
  %255 = icmp eq i64 %arraylen461, 1, !dbg !2773
  %value_phi463.in = or i1 %254, %255, !dbg !2773
  br i1 %value_phi463.in, label %L843, label %L828, !dbg !2774

L828:                                             ; preds = %L802
  %256 = call fastcc [1 x {} addrspace(10)*] @julia_DimensionMismatch_1976() #56, !dbg !2774
  %box702 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task429, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #58, !dbg !2774
  %257 = bitcast {} addrspace(10)* %box702 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !2774
  %258 = extractvalue [1 x {} addrspace(10)*] %256, 0, !dbg !2774
  %259 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %257, i64 0, i64 0, !dbg !2774
  store {} addrspace(10)* %258, {} addrspace(10)* addrspace(10)* %259, align 8, !dbg !2774, !tbaa !113, !alias.scope !117, !noalias !2443
  %260 = addrspacecast {} addrspace(10)* %box702 to {} addrspace(12)*, !dbg !2774
  call void @ijl_throw({} addrspace(12)* %260) #56, !dbg !2774
  unreachable, !dbg !2774

L843:                                             ; preds = %L802
  br i1 %254, label %L854, label %L873, !dbg !2775

L854:                                             ; preds = %L843
  br i1 %.not816, label %L956, label %L858, !dbg !2777

L858:                                             ; preds = %L854
  %261 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %177) #59, !dbg !2779
  %262 = bitcast {}* %261 to i8**, !dbg !2779
  %arrayptr670 = load i8*, i8** %262, align 8, !dbg !2779, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68
  %263 = addrspacecast {} addrspace(10)* %251 to {} addrspace(11)*, !dbg !2786
  %264 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %263) #59, !dbg !2786
  %265 = bitcast {}* %264 to i8**, !dbg !2786
  %arrayptr672 = load i8*, i8** %265, align 8, !dbg !2786, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %.not908.not = icmp eq i8* %arrayptr670, %arrayptr672, !dbg !2789
  br i1 %.not908.not, label %L866, label %L869, !dbg !2784

L866:                                             ; preds = %L858
  %266 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %251) #56, !dbg !2792
  br label %L869, !dbg !2794

L869:                                             ; preds = %L866, %L858
  %value_phi673 = phi {} addrspace(10)* [ %266, %L866 ], [ %251, %L858 ]
  store {} addrspace(10)* %getfield15, {} addrspace(10)** %.repack909, align 8, !dbg !2797, !noalias !2474
  store i64 %arraysize, i64* %180, align 8, !dbg !2797, !noalias !2474
  store i64 %207, i64* %.repack910.repack916, align 8, !dbg !2797, !noalias !2474
  store i64 %250, i64* %.repack912, align 8, !dbg !2797, !noalias !2474
  store i64 1, i64* %.repack914, align 8, !dbg !2797, !noalias !2474
  call fastcc void @julia_copyto_unaliased__1984({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree noundef nonnull writeonly sret({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }) align 8 dereferenceable(40) %6, [1 x {} addrspace(10)*]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) "enzymejl_returnRoots" %7, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(40) %181, {} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %value_phi673) #56, !dbg !2797
  br label %L956, !dbg !2797

L873:                                             ; preds = %L843
  %267 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %177) #59, !dbg !2798
  %268 = bitcast {}* %267 to i8**, !dbg !2798
  %arrayptr675 = load i8*, i8** %268, align 8, !dbg !2798, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68
  %269 = addrspacecast {} addrspace(10)* %251 to {} addrspace(11)*, !dbg !2809
  %270 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %269) #59, !dbg !2809
  %271 = bitcast {}* %270 to i8**, !dbg !2809
  %arrayptr677 = load i8*, i8** %271, align 8, !dbg !2809, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %.not918.not = icmp eq i8* %arrayptr675, %arrayptr677, !dbg !2812
  br i1 %.not918.not, label %L881, label %L886, !dbg !2803

L881:                                             ; preds = %L873
  %272 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %251) #56, !dbg !2815
  %.phi.trans.insert976 = bitcast {} addrspace(10)* %272 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert977 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert976 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr679.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert977, i64 0, i32 1
  %arraylen680.pre = load i64, i64 addrspace(11)* %arraylen_ptr679.phi.trans.insert, align 8, !dbg !2817, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  br label %L886, !dbg !2794

L886:                                             ; preds = %L881, %L873
  %arraylen680 = phi i64 [ %arraylen680.pre, %L881 ], [ %arraylen461, %L873 ], !dbg !2817
  %value_phi678 = phi {} addrspace(10)* [ %272, %L881 ], [ %251, %L873 ]
  %.not921 = icmp eq i64 %arraylen680, 1, !dbg !2821
  br i1 %.not816, label %L956, label %L928.lr.ph, !dbg !2825

L928.lr.ph:                                       ; preds = %L886
  %273 = bitcast {} addrspace(10)* %value_phi678 to double addrspace(13)* addrspace(10)*
  %274 = addrspacecast double addrspace(13)* addrspace(10)* %273 to double addrspace(13)* addrspace(11)*
  %arrayptr688922 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %274, align 8, !tbaa !382, !alias.scope !2505, !noalias !336, !nonnull !68
  br label %L928, !dbg !2827

L928:                                             ; preds = %L928, %L928.lr.ph
  %iv13 = phi i64 [ %iv.next14, %L928 ], [ 0, %L928.lr.ph ]
  %iv.next14 = add nuw nsw i64 %iv13, 1, !dbg !2828
  %275 = select i1 %.not921, i64 0, i64 %iv13, !dbg !2828
  %276 = getelementptr inbounds double, double addrspace(13)* %arrayptr688922, i64 %275, !dbg !2828
  %arrayref689 = load double, double addrspace(13)* %276, align 8, !dbg !2828, !tbaa !269, !alias.scope !117, !noalias !271
  %277 = add i64 %iv13, %250, !dbg !2835
  %278 = getelementptr inbounds double, double addrspace(13)* %arrayptr692923, i64 %277, !dbg !2835
  store double %arrayref689, double addrspace(13)* %278, align 8, !dbg !2835, !tbaa !269, !alias.scope !117, !noalias !2443
  %exitcond.not = icmp eq i64 %iv.next14, %arraysize, !dbg !2837
  br i1 %exitcond.not, label %L956.loopexit, label %L928, !dbg !2827, !llvm.loop !2838

L956.loopexit:                                    ; preds = %L928
  br label %L956, !dbg !2839

L956:                                             ; preds = %L956.loopexit, %L886, %L869, %L854
  %279 = fadd double %40, %value_phi372, !dbg !2839
  %arraylen472 = load i64, i64 addrspace(11)* %arraylen_ptr471, align 8, !dbg !2841, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not883 = icmp eq i64 %arraylen472, 0, !dbg !2845
  br i1 %.not883, label %pass606.2, label %L973, !dbg !2842

L973:                                             ; preds = %L956
  %arrayptr474884 = load i64 addrspace(13)*, i64 addrspace(13)* addrspace(11)* %185, align 16, !dbg !2847, !tbaa !382, !alias.scope !2505, !noalias !336, !nonnull !68
  %value_phi4791017 = load i64, i64 addrspace(13)* %arrayptr474884, align 8, !dbg !2848, !tbaa !269, !alias.scope !117, !noalias !271
  %.not8851018 = icmp eq i64 %value_phi4791017, %207, !dbg !2849
  br i1 %.not8851018, label %L1001.critedge, label %L980.lr.ph, !dbg !2851

L980.lr.ph:                                       ; preds = %L973
  %280 = add nuw nsw i64 %arraylen472, 1, !dbg !2851
  br label %L980, !dbg !2851

L980:                                             ; preds = %L992, %L980.lr.ph
  %iv15 = phi i64 [ %iv.next16, %L992 ], [ 0, %L980.lr.ph ]
  %281 = add i64 %iv15, 2, !dbg !2852
  %iv.next16 = add nuw nsw i64 %iv15, 1, !dbg !2852
  %exitcond1037.not = icmp eq i64 %281, %280, !dbg !2852
  br i1 %exitcond1037.not, label %pass606.2.loopexit, label %L992, !dbg !2794

L992:                                             ; preds = %L980
  %282 = add nsw i64 %281, -1, !dbg !2854
  %283 = getelementptr inbounds i64, i64 addrspace(13)* %arrayptr474884, i64 %282, !dbg !2856
  %284 = add nuw i64 %281, 1, !dbg !2857
  %value_phi479 = load i64, i64 addrspace(13)* %283, align 8, !dbg !2848, !tbaa !269, !alias.scope !117, !noalias !271
  %.not885 = icmp eq i64 %value_phi479, %207, !dbg !2849
  br i1 %.not885, label %L1001.critedge.loopexit, label %L980, !dbg !2851

L1001.critedge.loopexit:                          ; preds = %L992
  br label %L1001.critedge, !dbg !2858

L1001.critedge:                                   ; preds = %L1001.critedge.loopexit, %L973
  %285 = load double, double addrspace(11)* %188, align 8, !dbg !2858, !tbaa !307, !alias.scope !117, !noalias !271
  %286 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize492) #60, !dbg !2860
  %287 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1994({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %286, i32 noundef zeroext 1308622848, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield5, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield11) #56, !dbg !2865
  store i64 %arraysize494, i64* %memcpy_refined_dst502, align 8, !dbg !2868, !tbaa !133, !alias.scope !135, !noalias !2422
  store i64 %207, i64* %195, align 8, !dbg !2868, !tbaa !133, !alias.scope !135, !noalias !2422
  %.not886 = icmp ult i64 %213, %arraysize504, !dbg !2871
  br i1 %.not886, label %L1049, label %L1046, !dbg !2876

L1046:                                            ; preds = %L1001.critedge
  %288 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct500 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !2876
  call fastcc void @julia_throw_boundserror_1989({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield17, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %288) #57, !dbg !2876
  unreachable, !dbg !2876

L1049:                                            ; preds = %L1001.critedge
  store i64 %arraysize494, i64* %memcpy_refined_dst508, align 8, !dbg !2877, !tbaa !133, !alias.scope !135, !noalias !2422
  %289 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize494) #60, !dbg !2881
  %290 = bitcast {} addrspace(10)* %289 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2886
  %291 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %290 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2886
  %arraylen_ptr509 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %291, i64 0, i32 1, !dbg !2886
  %arraylen510 = load i64, i64 addrspace(11)* %arraylen_ptr509, align 8, !dbg !2886, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not887 = icmp eq i64 %arraylen510, %arraysize494, !dbg !2889
  br i1 %.not887, label %L1062, label %L1115, !dbg !2888

L1062:                                            ; preds = %L1049
  br i1 %.not888, label %L1119.L1120_crit_edge, label %L1083.preheader, !dbg !2892

L1083.preheader:                                  ; preds = %L1062
  %292 = mul i64 %213, %arraysize494, !dbg !2895
  %293 = add i64 %292, -1, !dbg !2895
  %arrayptr649903 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %198, align 16
  %294 = bitcast {} addrspace(10)* %289 to double addrspace(13)* addrspace(10)*
  %295 = addrspacecast double addrspace(13)* addrspace(10)* %294 to double addrspace(13)* addrspace(11)*
  br label %L1083, !dbg !2898

L1083:                                            ; preds = %L1090, %L1083.preheader
  %iv17 = phi i64 [ %iv.next18, %L1090 ], [ 0, %L1083.preheader ]
  %value_phi522.off0 = phi i1 [ %300, %L1090 ], [ false, %L1083.preheader ]
  %value_phi523 = phi i64 [ %value_phi655, %L1090 ], [ 1, %L1083.preheader ]
  %iv.next18 = add nuw nsw i64 %iv17, 1, !dbg !2898
  br i1 %value_phi522.off0, label %L1119.L1120_crit_edge.loopexit, label %L1090, !dbg !2898

L1090:                                            ; preds = %L1083
  %296 = add i64 %293, %iv.next18, !dbg !2895
  %297 = getelementptr inbounds double, double addrspace(13)* %arrayptr649903, i64 %296, !dbg !2895
  %arrayref650 = load double, double addrspace(13)* %297, align 8, !dbg !2895, !tbaa !269, !alias.scope !117, !noalias !271
  %298 = add i64 %value_phi523, -1, !dbg !2899
  %arrayptr652904 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %295, align 8, !dbg !2899, !tbaa !382, !alias.scope !2505, !noalias !336, !nonnull !68
  %299 = getelementptr inbounds double, double addrspace(13)* %arrayptr652904, i64 %298, !dbg !2899
  store double %arrayref650, double addrspace(13)* %299, align 8, !dbg !2899, !tbaa !269, !alias.scope !117, !noalias !2443
  %300 = icmp eq i64 %value_phi523, %arraysize494, !dbg !2900
  %301 = add i64 %value_phi523, 1, !dbg !2901
  %value_phi655 = select i1 %300, i64 undef, i64 %301, !dbg !2901
  %.not905 = icmp eq i64 %iv.next18, %arraysize494, !dbg !2903
  %302 = add i64 %iv.next18, 1, !dbg !2904
  br i1 %.not905, label %L1119.L1120_crit_edge.loopexit, label %L1083, !dbg !2906

L1115:                                            ; preds = %L1049
  %303 = addrspacecast [1 x [1 x i64]]* %newstruct506 to [1 x [1 x i64]] addrspace(11)*, !dbg !2888
  call fastcc void @julia_throw_checksize_error_1987({} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %289, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %303) #57, !dbg !2888
  unreachable, !dbg !2888

L1119.L1120_crit_edge.loopexit:                   ; preds = %L1083, %L1090
  br label %L1119.L1120_crit_edge, !dbg !2860

L1119.L1120_crit_edge:                            ; preds = %L1119.L1120_crit_edge.loopexit, %L1062
  %304 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize492) #60, !dbg !2860
  %305 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1994({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %304, i32 noundef zeroext 1308622848, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield5, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %289) #56, !dbg !2865
  %306 = call fastcc nonnull {} addrspace(10)* @julia___2044({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %287, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %305) #56, !dbg !2859
  %307 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize492) #60, !dbg !2860
  %308 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1994({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %307, i32 noundef zeroext 1308622848, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield5, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield11) #56, !dbg !2865
  store i64 %arraysize494, i64* %memcpy_refined_dst564, align 8, !dbg !2877, !tbaa !133, !alias.scope !135, !noalias !2422
  %309 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize494) #60, !dbg !2881
  %310 = bitcast {} addrspace(10)* %309 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2886
  %311 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %310 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2886
  %arraylen_ptr565 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %311, i64 0, i32 1, !dbg !2886
  %arraylen566 = load i64, i64 addrspace(11)* %arraylen_ptr565, align 8, !dbg !2886, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not892 = icmp eq i64 %arraylen566, %arraysize494, !dbg !2889
  br i1 %.not892, label %L1207, label %L1260, !dbg !2888

L1207:                                            ; preds = %L1119.L1120_crit_edge
  br i1 %.not888, label %L1264.L1265_crit_edge, label %L1228.preheader, !dbg !2892

L1228.preheader:                                  ; preds = %L1207
  %312 = mul i64 %213, %arraysize494, !dbg !2895
  %313 = add i64 %312, -1, !dbg !2895
  %arrayptr633900 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %198, align 16
  %314 = bitcast {} addrspace(10)* %309 to double addrspace(13)* addrspace(10)*
  %315 = addrspacecast double addrspace(13)* addrspace(10)* %314 to double addrspace(13)* addrspace(11)*
  br label %L1228, !dbg !2898

L1228:                                            ; preds = %L1235, %L1228.preheader
  %iv19 = phi i64 [ %iv.next20, %L1235 ], [ 0, %L1228.preheader ]
  %value_phi578.off0 = phi i1 [ %320, %L1235 ], [ false, %L1228.preheader ]
  %value_phi579 = phi i64 [ %value_phi639, %L1235 ], [ 1, %L1228.preheader ]
  %iv.next20 = add nuw nsw i64 %iv19, 1, !dbg !2898
  br i1 %value_phi578.off0, label %L1264.L1265_crit_edge.loopexit, label %L1235, !dbg !2898

L1235:                                            ; preds = %L1228
  %316 = add i64 %313, %iv.next20, !dbg !2895
  %317 = getelementptr inbounds double, double addrspace(13)* %arrayptr633900, i64 %316, !dbg !2895
  %arrayref634 = load double, double addrspace(13)* %317, align 8, !dbg !2895, !tbaa !269, !alias.scope !117, !noalias !271
  %318 = add i64 %value_phi579, -1, !dbg !2899
  %arrayptr636901 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %315, align 8, !dbg !2899, !tbaa !382, !alias.scope !2505, !noalias !336, !nonnull !68
  %319 = getelementptr inbounds double, double addrspace(13)* %arrayptr636901, i64 %318, !dbg !2899
  store double %arrayref634, double addrspace(13)* %319, align 8, !dbg !2899, !tbaa !269, !alias.scope !117, !noalias !2443
  %320 = icmp eq i64 %value_phi579, %arraysize494, !dbg !2900
  %321 = add i64 %value_phi579, 1, !dbg !2901
  %value_phi639 = select i1 %320, i64 undef, i64 %321, !dbg !2901
  %.not902 = icmp eq i64 %iv.next20, %arraysize494, !dbg !2903
  %322 = add i64 %iv.next20, 1, !dbg !2904
  br i1 %.not902, label %L1264.L1265_crit_edge.loopexit, label %L1228, !dbg !2906

L1260:                                            ; preds = %L1119.L1120_crit_edge
  %323 = addrspacecast [1 x [1 x i64]]* %newstruct562 to [1 x [1 x i64]] addrspace(11)*, !dbg !2888
  call fastcc void @julia_throw_checksize_error_1987({} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %309, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %323) #57, !dbg !2888
  unreachable, !dbg !2888

L1264.L1265_crit_edge.loopexit:                   ; preds = %L1228, %L1235
  br label %L1264.L1265_crit_edge, !dbg !2860

L1264.L1265_crit_edge:                            ; preds = %L1264.L1265_crit_edge.loopexit, %L1207
  %324 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize492) #60, !dbg !2860
  %325 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1994({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %324, i32 noundef zeroext 1308622848, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield5, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %309) #56, !dbg !2865
  %326 = call fastcc nonnull {} addrspace(10)* @julia___2044({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %308, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %325) #56, !dbg !2859
  store {} addrspace(10)* %306, {} addrspace(10)** %199, align 8, !dbg !2859, !noalias !2474
  %327 = call fastcc double @julia___1991([1 x {} addrspace(10)*] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %200, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield7, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %326) #56, !dbg !2859
  %328 = fadd double %285, %327, !dbg !2907
  store double %328, double addrspace(11)* %188, align 8, !dbg !2908, !tbaa !307, !alias.scope !117, !noalias !2443
  br label %pass606.2, !dbg !2908

L1337:                                            ; preds = %pass606.2
  %329 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct619 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !2909
  call fastcc void @julia_throw_boundserror_1989({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield19, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %329) #57, !dbg !2909
  unreachable, !dbg !2909

L1340:                                            ; preds = %pass606.2
  call fastcc void @julia__unsafe_setindex__2077({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield19, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %393, [1 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %203, i64 signext %207) #56, !dbg !2913
  %.not899 = icmp eq i64 %207, %159, !dbg !2914
  %330 = add nuw i64 %207, 1, !dbg !2915
  br i1 %.not899, label %L1354.loopexit, label %L616, !dbg !2916

L1354.loopexit:                                   ; preds = %L1340
  br label %L1354, !dbg !2917

L1354:                                            ; preds = %L1354.loopexit, %L598
  ret void, !dbg !2917

pass.2.loopexit:                                  ; preds = %L243, %L250
  br label %pass.2, !dbg !2472

pass.2:                                           ; preds = %pass.2.loopexit, %L222
  call fastcc void @julia_compute_energy_2128([3 x double]* noalias nocapture nofree noundef nonnull writeonly sret([3 x double]) align 8 dereferenceable(24) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %92, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield9) #56, !dbg !2472
  %memcpy_refined_src84 = getelementptr inbounds [3 x double], [3 x double]* %1, i64 0, i64 0, !dbg !2918
  %memcpy_refined_src86 = getelementptr inbounds [3 x double], [3 x double]* %1, i64 0, i64 1, !dbg !2919
  %memcpy_refined_src88 = getelementptr inbounds [3 x double], [3 x double]* %1, i64 0, i64 2, !dbg !2919
  %331 = load double, double* %memcpy_refined_src84, align 8, !dbg !2920, !tbaa !133, !alias.scope !135, !noalias !1099
  %332 = load double, double* %memcpy_refined_src86, align 8, !dbg !2920, !tbaa !133, !alias.scope !135, !noalias !1099
  %333 = load double, double* %memcpy_refined_src88, align 8, !dbg !2920, !tbaa !133, !alias.scope !135, !noalias !1099
  %334 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #60, !dbg !2921
  %335 = bitcast {} addrspace(10)* %334 to double addrspace(13)* addrspace(10)*
  %336 = addrspacecast double addrspace(13)* addrspace(10)* %335 to double addrspace(13)* addrspace(11)*
  %arrayptr819 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %336, align 8, !tbaa !382, !alias.scope !2505, !noalias !336, !nonnull !68
  store double %331, double addrspace(13)* %arrayptr819, align 8, !dbg !2927, !tbaa !269, !alias.scope !117, !noalias !2443
  %memcpy_refined_dst94.1 = getelementptr inbounds double, double addrspace(13)* %arrayptr819, i64 1, !dbg !2927
  store double %332, double addrspace(13)* %memcpy_refined_dst94.1, align 8, !dbg !2927, !tbaa !269, !alias.scope !117, !noalias !2443
  %memcpy_refined_dst94.2 = getelementptr inbounds double, double addrspace(13)* %arrayptr819, i64 2, !dbg !2927
  store double %333, double addrspace(13)* %memcpy_refined_dst94.2, align 8, !dbg !2927, !tbaa !269, !alias.scope !117, !noalias !2443
  %337 = bitcast {} addrspace(10)* %getfield19 to {} addrspace(10)* addrspace(10)*, !dbg !2928
  %338 = addrspacecast {} addrspace(10)* addrspace(10)* %337 to {} addrspace(10)* addrspace(11)*, !dbg !2928
  %arraysize_ptr98 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %338, i64 3, !dbg !2928
  %339 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr98 to i64 addrspace(11)*, !dbg !2928
  %arraysize99 = load i64, i64 addrspace(11)* %339, align 8, !dbg !2928, !tbaa !86, !range !87, !alias.scope !88, !noalias !92
  %340 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct102, i64 0, i64 0, i64 0, !dbg !2931
  store i64 %arraysize99, i64* %340, align 8, !dbg !2931, !tbaa !133, !alias.scope !135, !noalias !2422
  %memcpy_refined_dst105 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct103, i64 0, i32 0, i64 0, i64 0, !dbg !2935
  store i64 %arraysize99, i64* %memcpy_refined_dst105, align 8, !dbg !2935, !tbaa !133, !alias.scope !135, !noalias !2422
  %memcpy_refined_dst106 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct103, i64 0, i32 1, !dbg !2935
  store i64 1, i64* %memcpy_refined_dst106, align 8, !dbg !2935, !tbaa !133, !alias.scope !135, !noalias !2422
  %arraysize_ptr107 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %338, i64 4, !dbg !2936
  %341 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr107 to i64 addrspace(11)*, !dbg !2936
  %arraysize108 = load i64, i64 addrspace(11)* %341, align 16, !dbg !2936, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %.not821 = icmp eq i64 %arraysize108, 0, !dbg !2939
  br i1 %.not821, label %L322, label %L325, !dbg !2548

ib:                                               ; preds = %L359
  %arraysize_ptr126 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %116, i64 4, !dbg !2570
  %342 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr126 to i64 addrspace(11)*, !dbg !2570
  %arraysize127 = load i64, i64 addrspace(11)* %342, align 8, !dbg !2570, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %inbounds128 = icmp ugt i64 %arraysize127, 3, !dbg !2570
  br i1 %inbounds128, label %idxend, label %oob, !dbg !2570

oob:                                              ; preds = %ib, %L359
  %errorbox825 = alloca [2 x i64], align 8, !dbg !2570
  %errorbox825.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox825, i64 0, i64 0
  store i64 1, i64* %errorbox825.sub, align 8, !dbg !2570, !noalias !2474
  %343 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox825, i64 0, i64 1, !dbg !2570
  store i64 4, i64* %343, align 8, !dbg !2570, !noalias !2474
  %344 = addrspacecast {} addrspace(10)* %109 to {} addrspace(12)*, !dbg !2570
  call void @ijl_bounds_error_ints({} addrspace(12)* %344, i64* nonnull align 8 %errorbox825.sub, i64 2) #56, !dbg !2570
  unreachable, !dbg !2570

idxend:                                           ; preds = %ib
  %345 = mul i64 %arraysize125, 3, !dbg !2570
  %346 = bitcast {} addrspace(10)* %109 to double addrspace(13)* addrspace(10)*, !dbg !2570
  %347 = addrspacecast double addrspace(13)* addrspace(10)* %346 to double addrspace(13)* addrspace(11)*, !dbg !2570
  %arrayptr130826 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %347, align 8, !dbg !2570, !tbaa !73, !invariant.load !68, !alias.scope !2506, !noalias !97, !nonnull !68
  %348 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %345, !dbg !2570
  store double 1.000000e+00, double addrspace(13)* %348, align 8, !dbg !2570, !tbaa !269, !alias.scope !117, !noalias !2443
  %inbounds133 = icmp ugt i64 %arraysize125, 1, !dbg !2943
  %inbounds138 = icmp ne i64 %arraysize127, 4, !dbg !2943
  %or.cond = select i1 %inbounds133, i1 %inbounds138, i1 false, !dbg !2943
  br i1 %or.cond, label %idxend141, label %oob139, !dbg !2943

oob139:                                           ; preds = %idxend
  %errorbox140827 = alloca [2 x i64], align 8, !dbg !2943
  %errorbox140827.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox140827, i64 0, i64 0
  store i64 2, i64* %errorbox140827.sub, align 8, !dbg !2943, !noalias !2474
  %349 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox140827, i64 0, i64 1, !dbg !2943
  store i64 5, i64* %349, align 8, !dbg !2943, !noalias !2474
  %350 = addrspacecast {} addrspace(10)* %109 to {} addrspace(12)*, !dbg !2943
  call void @ijl_bounds_error_ints({} addrspace(12)* %350, i64* nonnull align 8 %errorbox140827.sub, i64 2) #56, !dbg !2943
  unreachable, !dbg !2943

idxend141:                                        ; preds = %idxend
  %351 = shl i64 %arraysize125, 2, !dbg !2943
  %352 = or i64 %351, 1, !dbg !2943
  %353 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %352, !dbg !2943
  store double 1.000000e+00, double addrspace(13)* %353, align 8, !dbg !2943, !tbaa !269, !alias.scope !117, !noalias !2443
  %inbounds146 = icmp ugt i64 %arraysize125, 2, !dbg !2945
  %inbounds151 = icmp ugt i64 %arraysize127, 5, !dbg !2945
  %or.cond993 = select i1 %inbounds146, i1 %inbounds151, i1 false, !dbg !2945
  br i1 %or.cond993, label %idxend154, label %oob152, !dbg !2945

oob152:                                           ; preds = %idxend141
  %errorbox153829 = alloca [2 x i64], align 8, !dbg !2945
  %errorbox153829.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox153829, i64 0, i64 0
  store i64 3, i64* %errorbox153829.sub, align 8, !dbg !2945, !noalias !2474
  %354 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox153829, i64 0, i64 1, !dbg !2945
  store i64 6, i64* %354, align 8, !dbg !2945, !noalias !2474
  %355 = addrspacecast {} addrspace(10)* %109 to {} addrspace(12)*, !dbg !2945
  call void @ijl_bounds_error_ints({} addrspace(12)* %355, i64* nonnull align 8 %errorbox153829.sub, i64 2) #56, !dbg !2945
  unreachable, !dbg !2945

idxend154:                                        ; preds = %idxend141
  %356 = mul i64 %arraysize125, 5, !dbg !2945
  %357 = add i64 %356, 2, !dbg !2945
  %358 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %357, !dbg !2945
  store double 1.000000e+00, double addrspace(13)* %358, align 8, !dbg !2945, !tbaa !269, !alias.scope !117, !noalias !2443
  %359 = fmul double %55, -2.000000e+00, !dbg !2947
  %inbounds159 = icmp ugt i64 %arraysize125, 3, !dbg !2950
  br i1 %inbounds159, label %idxend180, label %oob165, !dbg !2950

oob165:                                           ; preds = %idxend154
  %errorbox166831 = alloca [2 x i64], align 8, !dbg !2950
  %errorbox166831.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox166831, i64 0, i64 0
  store i64 4, i64* %errorbox166831.sub, align 8, !dbg !2950, !noalias !2474
  %360 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox166831, i64 0, i64 1, !dbg !2950
  store i64 1, i64* %360, align 8, !dbg !2950, !noalias !2474
  %361 = addrspacecast {} addrspace(10)* %109 to {} addrspace(12)*, !dbg !2950
  call void @ijl_bounds_error_ints({} addrspace(12)* %361, i64* nonnull align 8 %errorbox166831.sub, i64 2) #56, !dbg !2950
  unreachable, !dbg !2950

idxend180:                                        ; preds = %idxend154
  %362 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 3, !dbg !2950
  store double %359, double addrspace(13)* %362, align 8, !dbg !2950, !tbaa !269, !alias.scope !117, !noalias !2443
  %363 = add nuw i64 %arraysize125, 3, !dbg !2951
  %364 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %363, !dbg !2951
  store double %55, double addrspace(13)* %364, align 8, !dbg !2951, !tbaa !269, !alias.scope !117, !noalias !2443
  %365 = fneg double %29, !dbg !2953
  %366 = add i64 %345, 3, !dbg !2955
  %367 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %366, !dbg !2955
  store double %365, double addrspace(13)* %367, align 8, !dbg !2955, !tbaa !269, !alias.scope !117, !noalias !2443
  %inbounds198.not = icmp eq i64 %arraysize125, 4, !dbg !2956
  br i1 %inbounds198.not, label %oob204, label %idxend232, !dbg !2956

oob204:                                           ; preds = %idxend180
  %errorbox205837 = alloca [2 x i64], align 8, !dbg !2956
  %errorbox205837.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox205837, i64 0, i64 0
  store i64 5, i64* %errorbox205837.sub, align 8, !dbg !2956, !noalias !2474
  %368 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox205837, i64 0, i64 1, !dbg !2956
  store i64 1, i64* %368, align 8, !dbg !2956, !noalias !2474
  %369 = addrspacecast {} addrspace(10)* %109 to {} addrspace(12)*, !dbg !2956
  call void @ijl_bounds_error_ints({} addrspace(12)* %369, i64* nonnull align 8 %errorbox205837.sub, i64 2) #56, !dbg !2956
  unreachable, !dbg !2956

idxend232:                                        ; preds = %idxend180
  %370 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 4, !dbg !2956
  store double %55, double addrspace(13)* %370, align 8, !dbg !2956, !tbaa !269, !alias.scope !117, !noalias !2443
  %371 = fmul double %55, -3.000000e+00, !dbg !2958
  %372 = add nuw i64 %arraysize125, 4, !dbg !2961
  %373 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %372, !dbg !2961
  store double %371, double addrspace(13)* %373, align 8, !dbg !2961, !tbaa !269, !alias.scope !117, !noalias !2443
  %374 = shl nuw i64 %arraysize125, 1, !dbg !2962
  %375 = add i64 %374, 4, !dbg !2962
  %376 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %375, !dbg !2962
  store double %55, double addrspace(13)* %376, align 8, !dbg !2962, !tbaa !269, !alias.scope !117, !noalias !2443
  %377 = add i64 %351, 4, !dbg !2964
  %378 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %377, !dbg !2964
  store double %365, double addrspace(13)* %378, align 8, !dbg !2964, !tbaa !269, !alias.scope !117, !noalias !2443
  %inbounds250 = icmp ugt i64 %arraysize125, 5, !dbg !2966
  br i1 %inbounds250, label %idxend258, label %oob256, !dbg !2966

oob256:                                           ; preds = %idxend232
  %errorbox257845 = alloca [2 x i64], align 8, !dbg !2966
  %errorbox257845.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox257845, i64 0, i64 0
  store i64 6, i64* %errorbox257845.sub, align 8, !dbg !2966, !noalias !2474
  %379 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox257845, i64 0, i64 1, !dbg !2966
  store i64 2, i64* %379, align 8, !dbg !2966, !noalias !2474
  %380 = addrspacecast {} addrspace(10)* %109 to {} addrspace(12)*, !dbg !2966
  call void @ijl_bounds_error_ints({} addrspace(12)* %380, i64* nonnull align 8 %errorbox257845.sub, i64 2) #56, !dbg !2966
  unreachable, !dbg !2966

idxend258:                                        ; preds = %idxend232
  %381 = add nuw i64 %arraysize125, 5, !dbg !2966
  %382 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %381, !dbg !2966
  store double %55, double addrspace(13)* %382, align 8, !dbg !2966, !tbaa !269, !alias.scope !117, !noalias !2443
  %383 = add i64 %374, 5, !dbg !2968
  %384 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %383, !dbg !2968
  store double %359, double addrspace(13)* %384, align 8, !dbg !2968, !tbaa !269, !alias.scope !117, !noalias !2443
  %385 = add i64 %356, 5, !dbg !2970
  %386 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %385, !dbg !2970
  store double %365, double addrspace(13)* %386, align 8, !dbg !2970, !tbaa !269, !alias.scope !117, !noalias !2443
  %387 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 6) #60, !dbg !2972
  %388 = bitcast {} addrspace(10)* %387 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !2975
  %389 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %388 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !2975
  %arraylen_ptr287 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %389, i64 0, i32 1, !dbg !2975
  %arraylen288 = load i64, i64 addrspace(11)* %arraylen_ptr287, align 8, !dbg !2975, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not851 = icmp eq i64 %arraylen288, 0, !dbg !2980
  br i1 %.not851, label %L412, label %idxend284.L394_crit_edge, !dbg !2979

idxend284.L394_crit_edge:                         ; preds = %idxend258
  %.phi.trans.insert965 = bitcast {} addrspace(10)* %387 to double addrspace(13)* addrspace(10)*
  %.phi.trans.insert966 = addrspacecast double addrspace(13)* addrspace(10)* %.phi.trans.insert965 to double addrspace(13)* addrspace(11)*
  %arrayptr296852.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert966, align 8, !dbg !2572, !tbaa !382, !alias.scope !2505, !noalias !336
  br label %L394, !dbg !2979

pass606.2.loopexit:                               ; preds = %L980
  br label %pass606.2, !dbg !2984

pass606.2:                                        ; preds = %pass606.2.loopexit, %L1264.L1265_crit_edge, %L956
  call fastcc void @julia_compute_energy_2128([3 x double]* noalias nocapture nofree noundef nonnull writeonly sret([3 x double]) align 8 dereferenceable(24) %5, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield11, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield9) #56, !dbg !2984
  %390 = load double, double* %memcpy_refined_src595, align 8, !dbg !2985, !tbaa !133, !alias.scope !135, !noalias !1099
  %391 = load double, double* %memcpy_refined_src597, align 8, !dbg !2985, !tbaa !133, !alias.scope !135, !noalias !1099
  %392 = load double, double* %memcpy_refined_src599, align 8, !dbg !2985, !tbaa !133, !alias.scope !135, !noalias !1099
  %393 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 3) #60, !dbg !2986
  %394 = bitcast {} addrspace(10)* %393 to double addrspace(13)* addrspace(10)*
  %395 = addrspacecast double addrspace(13)* addrspace(10)* %394 to double addrspace(13)* addrspace(11)*
  %arrayptr608896 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %395, align 8, !tbaa !382, !alias.scope !2505, !noalias !336, !nonnull !68
  store double %390, double addrspace(13)* %arrayptr608896, align 8, !dbg !2992, !tbaa !269, !alias.scope !117, !noalias !2443
  %memcpy_refined_dst610.1 = getelementptr inbounds double, double addrspace(13)* %arrayptr608896, i64 1, !dbg !2992
  store double %391, double addrspace(13)* %memcpy_refined_dst610.1, align 8, !dbg !2992, !tbaa !269, !alias.scope !117, !noalias !2443
  %memcpy_refined_dst610.2 = getelementptr inbounds double, double addrspace(13)* %arrayptr608896, i64 2, !dbg !2992
  store double %392, double addrspace(13)* %memcpy_refined_dst610.2, align 8, !dbg !2992, !tbaa !269, !alias.scope !117, !noalias !2443
  store i64 %arraysize99, i64* %201, align 8, !dbg !2993, !tbaa !133, !alias.scope !135, !noalias !2422
  store i64 %arraysize99, i64* %memcpy_refined_dst621, align 8, !dbg !2999, !tbaa !133, !alias.scope !135, !noalias !2422
  store i64 %207, i64* %202, align 8, !dbg !2999, !tbaa !133, !alias.scope !135, !noalias !2422
  %exitcond1041.not = icmp eq i64 %207, %206, !dbg !3000
  br i1 %exitcond1041.not, label %L1337, label %L1340, !dbg !2909
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia_copyto_unaliased__1984({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree noundef nonnull writeonly sret({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }) align 8 dereferenceable(40) %0, [1 x {} addrspace(10)*]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) "enzyme_inactive" "enzymejl_returnRoots" %1, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(40) %2, {} addrspace(10)* nocapture noundef nonnull readonly align 16 dereferenceable(40) %3) unnamed_addr #57 !dbg !3662 {
top:
  %4 = call {}*** @julia.get_pgcstack() #58
  %ptls_field29 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field29 to i64***
  %ptls_load3031 = load i64**, i64*** %5, align 8, !tbaa !69
  %6 = getelementptr inbounds i64*, i64** %ptls_load3031, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #58, !dbg !3663
  fence syncscope("singlethread") seq_cst
  %7 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3664
  %8 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %7 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3664
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %8, i64 0, i32 1, !dbg !3664
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !3664, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not = icmp eq i64 %arraylen, 0, !dbg !3667
  br i1 %.not, label %L4, label %L5, !dbg !3666

common.ret:                                       ; preds = %L82, %L4
  ret void, !dbg !3668

L4:                                               ; preds = %top
  %9 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 0, !dbg !3666
  %10 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %9, align 8, !dbg !3666
  %11 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %1, i64 0, i64 0, !dbg !3666
  store {} addrspace(10)* %10, {} addrspace(10)** %11, align 8, !dbg !3666, !noalias !3669
  %12 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %0 to i8*, !dbg !3666
  %13 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !3666
  call void @llvm.memcpy.p0i8.p11i8.i64(i8* nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) %12, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %13, i64 noundef 40, i1 noundef false) #58, !dbg !3666, !noalias !3669
  br label %common.ret

L5:                                               ; preds = %top
  %14 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 1, i32 0, i64 0, i64 0, !dbg !3672
  %unbox = load i64, i64 addrspace(11)* %14, align 8, !dbg !3682, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97
  %15 = icmp slt i64 %unbox, 1, !dbg !3687
  %16 = call i64 @llvm.smax.i64(i64 %unbox, i64 noundef 0) #58, !dbg !3689
  %17 = add nsw i64 %arraylen, -1, !dbg !3690
  %18 = icmp uge i64 %17, %16, !dbg !3687
  %19 = or i1 %15, %18, !dbg !3681
  br i1 %19, label %L85, label %L31.L44_crit_edge, !dbg !3681

L31.L44_crit_edge:                                ; preds = %L5
  %.phi.trans.insert = bitcast {} addrspace(10)* %3 to double addrspace(13)* addrspace(10)*
  %.phi.trans.insert42 = addrspacecast double addrspace(13)* addrspace(10)* %.phi.trans.insert to double addrspace(13)* addrspace(11)*
  %arrayptr33.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert42, align 16, !dbg !3691, !tbaa !382, !alias.scope !3693, !noalias !336
  %.phi.trans.insert43 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to double addrspace(13)* addrspace(10)* addrspace(11)*
  %getfield3436.pre = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %.phi.trans.insert43 unordered, align 8, !dbg !3694, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97
  %.phi.trans.insert44 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 2
  %unbox17.pre = load i64, i64 addrspace(11)* %.phi.trans.insert44, align 8, !dbg !3696, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97
  %.phi.trans.insert45 = addrspacecast double addrspace(13)* addrspace(10)* %getfield3436.pre to double addrspace(13)* addrspace(11)*
  %arrayptr1935.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert45, align 8, !dbg !3697, !tbaa !73, !invariant.load !68, !alias.scope !3698, !noalias !97
  br label %L44, !dbg !3699

L44:                                              ; preds = %L44, %L31.L44_crit_edge
  %iv = phi i64 [ %iv.next, %L44 ], [ 0, %L31.L44_crit_edge ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !3691
  %20 = add nsw i64 %iv.next, -1, !dbg !3691
  %21 = getelementptr inbounds double, double addrspace(13)* %arrayptr33.pre, i64 %20, !dbg !3691
  %arrayref = load double, double addrspace(13)* %21, align 8, !dbg !3691, !tbaa !269, !alias.scope !117, !noalias !271
  %22 = add i64 %20, %unbox17.pre, !dbg !3697
  %23 = getelementptr inbounds double, double addrspace(13)* %arrayptr1935.pre, i64 %22, !dbg !3697
  store double %arrayref, double addrspace(13)* %23, align 8, !dbg !3697, !tbaa !269, !alias.scope !117, !noalias !3700
  %.not37 = icmp eq i64 %iv.next, %arraylen, !dbg !3701
  %24 = add nuw nsw i64 %iv.next, 1, !dbg !3702
  br i1 %.not37, label %L82, label %L44, !dbg !3704

L82:                                              ; preds = %L44
  %25 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 0, !dbg !3705
  %26 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, align 8, !dbg !3705
  %27 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %1, i64 0, i64 0, !dbg !3705
  store {} addrspace(10)* %26, {} addrspace(10)** %27, align 8, !dbg !3705, !noalias !3669
  %28 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %0 to i8*, !dbg !3705
  %29 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !3705
  call void @llvm.memcpy.p0i8.p11i8.i64(i8* nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) %28, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %29, i64 noundef 40, i1 noundef false) #58, !dbg !3705, !noalias !3669
  br label %common.ret

L85:                                              ; preds = %L5
  %current_task2438 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !3681
  %current_task24 = bitcast {}*** %current_task2438 to {}**, !dbg !3681
  %box = call noalias nonnull dereferenceable(40) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 noundef 40, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4359181264 to {}*) to {} addrspace(10)*)) #59, !dbg !3681
  %30 = bitcast {} addrspace(10)* %box to i8 addrspace(10)*, !dbg !3681
  %31 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !3681
  call void @llvm.memcpy.p10i8.p11i8.i64(i8 addrspace(10)* nocapture nofree noundef nonnull align 8 dereferenceable(40) %30, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %31, i64 noundef 40, i1 noundef false) #58, !dbg !3681, !tbaa !86, !alias.scope !315, !noalias !3706
  %box26 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5179920144 to {}*) to {} addrspace(10)*)) #59, !dbg !3681
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box26 to i64 addrspace(10)*, !dbg !3681
  store i64 %arraylen, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !3681, !tbaa !113, !alias.scope !117, !noalias !3700
  %32 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5166733984 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5205578368 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* nonnull %box26) #60, !dbg !3681
  %33 = addrspacecast {} addrspace(10)* %32 to {} addrspace(12)*, !dbg !3681
  call void @ijl_throw({} addrspace(12)* %33) #61, !dbg !3681
  unreachable, !dbg !3681
}

; Function Attrs: mustprogress willreturn
define internal fastcc i64 @augmented_julia_copyto_unaliased__1984({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) "enzyme_sret" %0, [1 x {} addrspace(10)*]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) "enzyme_inactive" "enzymejl_returnRoots" %1, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(40) %2, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'", {} addrspace(10)* nocapture noundef nonnull readonly align 16 dereferenceable(40) %3, {} addrspace(10)* nocapture align 16 %"'1") unnamed_addr #57 !dbg !3707 {
top:
  %4 = alloca i64, align 8
  %"iv'ac" = alloca i64, align 8
  %5 = call {}*** @julia.get_pgcstack() #58
  %ptls_field29 = getelementptr inbounds {}**, {}*** %5, i64 2
  %6 = bitcast {}*** %ptls_field29 to i64***
  %ptls_load3031 = load i64**, i64*** %6, align 8, !tbaa !69, !alias.scope !3708, !noalias !3711
  %7 = getelementptr inbounds i64*, i64** %ptls_load3031, i64 2
  %safepoint = load i64*, i64** %7, align 8, !tbaa !73, !invariant.load !68, !alias.scope !3713, !noalias !3716
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #58, !dbg !3718
  fence syncscope("singlethread") seq_cst
  %8 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3719
  %9 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %8 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3719
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %9, i64 0, i32 1, !dbg !3719
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !3719, !tbaa !332, !range !87, !alias.scope !3722, !noalias !3725
  store i64 %arraylen, i64* %4, align 8, !dbg !3727
  %.not = icmp eq i64 %arraylen, 0, !dbg !3727
  br i1 %.not, label %L4, label %L5, !dbg !3721

common.ret:                                       ; preds = %L82, %L4
  %10 = load i64, i64* %4, align 8, !dbg !3728
  ret i64 %10, !dbg !3728

L4:                                               ; preds = %top
  %11 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 0, !dbg !3721
  %12 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %11, align 8, !dbg !3721, !alias.scope !3729, !noalias !3732
  %13 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %1, i64 0, i64 0, !dbg !3721
  store {} addrspace(10)* %12, {} addrspace(10)** %13, align 8, !dbg !3721, !noalias !3734
  %14 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %0 to i8*, !dbg !3721
  %15 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !3721
  call void @llvm.memcpy.p0i8.p11i8.i64(i8* nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) %14, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %15, i64 noundef 40, i1 noundef false) #58, !dbg !3721, !noalias !3734
  br label %common.ret

L5:                                               ; preds = %top
  %16 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 1, i32 0, i64 0, i64 0, !dbg !3737
  %unbox = load i64, i64 addrspace(11)* %16, align 8, !dbg !3747, !tbaa !73, !invariant.load !68, !alias.scope !3752, !noalias !3753
  %17 = icmp slt i64 %unbox, 1, !dbg !3754
  %18 = call i64 @llvm.smax.i64(i64 %unbox, i64 noundef 0) #58, !dbg !3756
  %19 = add nsw i64 %arraylen, -1, !dbg !3757
  %20 = icmp uge i64 %19, %18, !dbg !3754
  %21 = or i1 %17, %20, !dbg !3746
  br i1 %21, label %L85, label %L31.L44_crit_edge, !dbg !3746

L31.L44_crit_edge:                                ; preds = %L5
  %".phi.trans.insert'ipc" = bitcast {} addrspace(10)* %"'1" to double addrspace(13)* addrspace(10)*
  %.phi.trans.insert = bitcast {} addrspace(10)* %3 to double addrspace(13)* addrspace(10)*
  %".phi.trans.insert42'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert'ipc" to double addrspace(13)* addrspace(11)*
  %.phi.trans.insert42 = addrspacecast double addrspace(13)* addrspace(10)* %.phi.trans.insert to double addrspace(13)* addrspace(11)*
  %"arrayptr33.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert42'ipc", align 16, !dbg !3758, !tbaa !382, !alias.scope !3760, !noalias !3763
  %arrayptr33.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert42, align 16, !dbg !3758, !tbaa !382, !alias.scope !3764, !noalias !3725
  %".phi.trans.insert43'ipc" = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %"'" to double addrspace(13)* addrspace(10)* addrspace(11)*
  %.phi.trans.insert43 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to double addrspace(13)* addrspace(10)* addrspace(11)*
  %"getfield3436.pre'ipl" = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %".phi.trans.insert43'ipc" unordered, align 8, !dbg !3765, !tbaa !73, !alias.scope !3767, !noalias !3768
  %getfield3436.pre = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %.phi.trans.insert43 unordered, align 8, !dbg !3765, !tbaa !73, !invariant.load !68, !alias.scope !3752, !noalias !3753
  %.phi.trans.insert44 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 2
  %unbox17.pre = load i64, i64 addrspace(11)* %.phi.trans.insert44, align 8, !dbg !3769, !tbaa !73, !invariant.load !68, !alias.scope !3752, !noalias !3753
  %".phi.trans.insert45'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %"getfield3436.pre'ipl" to double addrspace(13)* addrspace(11)*
  %.phi.trans.insert45 = addrspacecast double addrspace(13)* addrspace(10)* %getfield3436.pre to double addrspace(13)* addrspace(11)*
  %"arrayptr1935.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert45'ipc", align 8, !dbg !3770, !tbaa !73, !alias.scope !3771, !noalias !3774
  %arrayptr1935.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert45, align 8, !dbg !3770, !tbaa !73, !invariant.load !68, !alias.scope !3776, !noalias !3777
  br label %L44, !dbg !3778

L44:                                              ; preds = %L44, %L31.L44_crit_edge
  %iv = phi i64 [ %iv.next, %L44 ], [ 0, %L31.L44_crit_edge ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !3758
  %22 = add nsw i64 %iv.next, -1, !dbg !3758
  %23 = getelementptr inbounds double, double addrspace(13)* %arrayptr33.pre, i64 %22, !dbg !3758
  %arrayref = load double, double addrspace(13)* %23, align 8, !dbg !3758, !tbaa !269, !alias.scope !3779, !noalias !3782
  %24 = add i64 %22, %unbox17.pre, !dbg !3770
  %25 = getelementptr inbounds double, double addrspace(13)* %arrayptr1935.pre, i64 %24, !dbg !3770
  store double %arrayref, double addrspace(13)* %25, align 8, !dbg !3770, !tbaa !269, !alias.scope !3784, !noalias !3787
  %.not37 = icmp eq i64 %iv.next, %arraylen, !dbg !3789
  br i1 %.not37, label %L82, label %L44, !dbg !3792

L82:                                              ; preds = %L44
  %26 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 0, !dbg !3793
  %27 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %26, align 8, !dbg !3793, !alias.scope !3729, !noalias !3732
  %28 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %1, i64 0, i64 0, !dbg !3793
  store {} addrspace(10)* %27, {} addrspace(10)** %28, align 8, !dbg !3793, !noalias !3734
  %29 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %0 to i8*, !dbg !3793
  %30 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !3793
  call void @llvm.memcpy.p0i8.p11i8.i64(i8* nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) %29, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %30, i64 noundef 40, i1 noundef false) #58, !dbg !3793, !noalias !3734
  br label %common.ret

L85:                                              ; preds = %L5
  %current_task2438 = getelementptr inbounds {}**, {}*** %5, i64 -14, !dbg !3746
  %current_task24 = bitcast {}*** %current_task2438 to {}**, !dbg !3746
  %box = call noalias nonnull dereferenceable(40) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 noundef 40, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4359181264 to {}*) to {} addrspace(10)*)) #59, !dbg !3746
  %31 = bitcast {} addrspace(10)* %box to i8 addrspace(10)*, !dbg !3746
  %32 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !3746
  call void @llvm.memcpy.p10i8.p11i8.i64(i8 addrspace(10)* nocapture nofree noundef nonnull align 8 dereferenceable(40) %31, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %32, i64 noundef 40, i1 noundef false) #58, !dbg !3746, !tbaa !86, !alias.scope !315, !noalias !3794
  %box26 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5179920144 to {}*) to {} addrspace(10)*)) #59, !dbg !3746
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box26 to i64 addrspace(10)*, !dbg !3746
  store i64 %arraylen, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !3746, !tbaa !113, !alias.scope !117, !noalias !3795
  %33 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5166733984 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5205578368 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* nonnull %box26) #60, !dbg !3746
  %34 = addrspacecast {} addrspace(10)* %33 to {} addrspace(12)*, !dbg !3746
  call void @ijl_throw({} addrspace(12)* %34) #61, !dbg !3746
  unreachable, !dbg !3746
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_copyto_unaliased__1984({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree writeonly align 8 dereferenceable(40) "enzyme_sret" %0, [1 x {} addrspace(10)*]* noalias nocapture nofree writeonly align 8 dereferenceable(8) "enzyme_inactive" "enzymejl_returnRoots" %1, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree readonly align 8 dereferenceable(40) %2, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'", {} addrspace(10)* nocapture readonly align 16 dereferenceable(40) %3, {} addrspace(10)* nocapture align 16 %"'1", i64 %arraylen) unnamed_addr #57 !dbg !3796 {
top:
  %"iv'ac" = alloca i64, align 8
  %"arrayref'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %5 = call {}*** @julia.get_pgcstack() #58
  %.not = icmp eq i64 %arraylen, 0, !dbg !3797
  br i1 %.not, label %L4, label %L5, !dbg !3799

common.ret:                                       ; preds = %L82, %L4
  br label %invertcommon.ret, !dbg !3800

L4:                                               ; preds = %top
  br label %common.ret

L5:                                               ; preds = %top
  %6 = add nsw i64 %arraylen, -1, !dbg !3801
  br i1 false, label %L85, label %L31.L44_crit_edge, !dbg !3804

L31.L44_crit_edge:                                ; preds = %L5
  %".phi.trans.insert'ipc" = bitcast {} addrspace(10)* %"'1" to double addrspace(13)* addrspace(10)*
  %".phi.trans.insert42'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr33.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert42'ipc", align 16, !dbg !3805, !tbaa !382, !alias.scope !3807, !noalias !3810, !invariant.group !3812
  %".phi.trans.insert43'ipc" = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %"'" to double addrspace(13)* addrspace(10)* addrspace(11)*
  %"getfield3436.pre'ipl" = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %".phi.trans.insert43'ipc" unordered, align 8, !dbg !3813, !tbaa !73, !alias.scope !3815, !noalias !3818, !invariant.group !3820
  %.phi.trans.insert44 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 2
  %unbox17.pre = load i64, i64 addrspace(11)* %.phi.trans.insert44, align 8, !dbg !3821, !tbaa !73, !invariant.load !68, !alias.scope !3822, !noalias !3823, !invariant.group !3824
  %".phi.trans.insert45'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %"getfield3436.pre'ipl" to double addrspace(13)* addrspace(11)*
  %"arrayptr1935.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert45'ipc", align 8, !dbg !3825, !tbaa !73, !alias.scope !3826, !noalias !3829, !invariant.group !3831
  br label %L44, !dbg !3832

L44:                                              ; preds = %L44, %L31.L44_crit_edge
  %iv = phi i64 [ %iv.next, %L44 ], [ 0, %L31.L44_crit_edge ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !3805
  %7 = add nsw i64 %iv.next, -1, !dbg !3805
  %"'ipg19" = getelementptr inbounds double, double addrspace(13)* %"arrayptr33.pre'ipl", i64 %7, !dbg !3805
  %8 = add i64 %7, %unbox17.pre, !dbg !3825
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr1935.pre'ipl", i64 %8, !dbg !3825
  %.not37 = icmp eq i64 %iv.next, %arraylen, !dbg !3833
  br i1 %.not37, label %L82, label %L44, !dbg !3836

L82:                                              ; preds = %L44
  br label %common.ret

L85:                                              ; preds = %L5
  unreachable

inverttop:                                        ; preds = %invertL5, %invertL4
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertcommon.ret:                                 ; preds = %common.ret
  br i1 %.not, label %invertL4, label %invertL82

invertL4:                                         ; preds = %invertcommon.ret
  br label %inverttop

invertL5:                                         ; preds = %invertL31.L44_crit_edge
  br label %inverttop

invertL31.L44_crit_edge:                          ; preds = %invertL44
  br label %invertL5

invertL44:                                        ; preds = %mergeinvertL44_L82, %incinvertL44
  %9 = load i64, i64* %"iv'ac", align 8, !dbg !3825
  %".phi.trans.insert43'ipc_unwrap" = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %"'" to double addrspace(13)* addrspace(10)* addrspace(11)*, !dbg !3825
  %"getfield3436.pre'ipl_unwrap" = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %".phi.trans.insert43'ipc_unwrap" unordered, align 8, !dbg !3813, !tbaa !73, !alias.scope !3815, !noalias !3818, !invariant.group !3820
  %".phi.trans.insert45'ipc_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"getfield3436.pre'ipl_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3825
  %"arrayptr1935.pre'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert45'ipc_unwrap", align 8, !dbg !3825, !tbaa !73, !alias.scope !3826, !noalias !3829, !invariant.group !3831
  %iv.next_unwrap = add nuw nsw i64 %9, 1, !dbg !3825
  %_unwrap = add nsw i64 %iv.next_unwrap, -1, !dbg !3825
  %.phi.trans.insert44_unwrap = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 2, !dbg !3825
  %unbox17.pre_unwrap = load i64, i64 addrspace(11)* %.phi.trans.insert44_unwrap, align 8, !dbg !3821, !tbaa !73, !alias.scope !3822, !noalias !3823, !invariant.group !3824
  %_unwrap17 = add i64 %_unwrap, %unbox17.pre_unwrap, !dbg !3825
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr1935.pre'ipl_unwrap", i64 %_unwrap17, !dbg !3825
  %10 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !3825, !tbaa !269, !alias.scope !3837, !noalias !3840
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !3825, !tbaa !269, !alias.scope !3837, !noalias !3840
  %11 = load double, double* %"arrayref'de", align 8, !dbg !3825
  %12 = fadd fast double %11, %10, !dbg !3825
  store double %12, double* %"arrayref'de", align 8, !dbg !3825
  %13 = load double, double* %"arrayref'de", align 8, !dbg !3805
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !3805
  %14 = load i64, i64* %"iv'ac", align 8, !dbg !3805
  %".phi.trans.insert'ipc_unwrap" = bitcast {} addrspace(10)* %"'1" to double addrspace(13)* addrspace(10)*, !dbg !3805
  %".phi.trans.insert42'ipc_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3805
  %"arrayptr33.pre'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert42'ipc_unwrap", align 16, !dbg !3805, !tbaa !382, !alias.scope !3807, !noalias !3810, !invariant.group !3812
  %"'ipg19_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr33.pre'ipl_unwrap", i64 %_unwrap, !dbg !3805
  %15 = load double, double addrspace(13)* %"'ipg19_unwrap", align 8, !dbg !3805, !tbaa !269, !alias.scope !3842, !noalias !3845
  %16 = fadd fast double %15, %13, !dbg !3805
  store double %16, double addrspace(13)* %"'ipg19_unwrap", align 8, !dbg !3805, !tbaa !269, !alias.scope !3842, !noalias !3845
  %17 = load i64, i64* %"iv'ac", align 8
  %18 = icmp eq i64 %17, 0
  %19 = xor i1 %18, true
  br i1 %18, label %invertL31.L44_crit_edge, label %incinvertL44

incinvertL44:                                     ; preds = %invertL44
  %20 = load i64, i64* %"iv'ac", align 8
  %21 = add nsw i64 %20, -1
  store i64 %21, i64* %"iv'ac", align 8
  br label %invertL44

invertL82:                                        ; preds = %invertcommon.ret
  %_unwrap26 = add nsw i64 %arraylen, -1
  br label %mergeinvertL44_L82

mergeinvertL44_L82:                               ; preds = %invertL82
  store i64 %_unwrap26, i64* %"iv'ac", align 8
  br label %invertL44
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia__unsafe_setindex__2077({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) "enzyme_inactive" %2, i64 signext "enzyme_inactive" %3) unnamed_addr #59 !dbg !3923 {
top:
  %4 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !306
  %newstruct35 = bitcast i8* %4 to [2 x i64]*, !enzyme_caststack !68
  %5 = call {}*** @julia.get_pgcstack() #60
  %memcpy_refined_src = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]] addrspace(11)* %2, i64 0, i64 0, i64 0
  %6 = load i64, i64 addrspace(11)* %memcpy_refined_src, align 8, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97
  %ptls_field40 = getelementptr inbounds {}**, {}*** %5, i64 2
  %7 = bitcast {}*** %ptls_field40 to i64***
  %ptls_load4142 = load i64**, i64*** %7, align 8, !tbaa !69
  %8 = getelementptr inbounds i64*, i64** %ptls_load4142, i64 2
  %safepoint = load i64*, i64** %8, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #60, !dbg !3924
  fence syncscope("singlethread") seq_cst
  %9 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !3925
  %10 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %9) #61, !dbg !3925
  %11 = bitcast {}* %10 to i8**, !dbg !3925
  %arrayptr = load i8*, i8** %11, align 8, !dbg !3925, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68
  %12 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !3925
  %13 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %12) #61, !dbg !3925
  %14 = bitcast {}* %13 to i8**, !dbg !3925
  %arrayptr3 = load i8*, i8** %14, align 8, !dbg !3925, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %.not.not = icmp eq i8* %arrayptr, %arrayptr3, !dbg !3931
  br i1 %.not.not, label %L9, label %L12, !dbg !3929

L9:                                               ; preds = %top
  %15 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %1) #60, !dbg !3934
  br label %L12, !dbg !3929

L12:                                              ; preds = %L9, %top
  %value_phi = phi {} addrspace(10)* [ %15, %L9 ], [ %1, %top ]
  %16 = bitcast {} addrspace(10)* %value_phi to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3936
  %17 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %16 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3936
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %17, i64 0, i32 1, !dbg !3936
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !3936, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not = icmp eq i64 %arraylen, %6, !dbg !3939
  br i1 %.not, label %L25, label %L22, !dbg !3937

L22:                                              ; preds = %L12
  %memcpy_refined_dst37 = getelementptr inbounds [2 x i64], [2 x i64]* %newstruct35, i64 0, i64 0, !dbg !3937
  store i64 %6, i64* %memcpy_refined_dst37, align 8, !dbg !3937, !tbaa !133, !alias.scope !135, !noalias !3940
  %memcpy_refined_dst38 = getelementptr inbounds [2 x i64], [2 x i64]* %newstruct35, i64 0, i64 1, !dbg !3937
  store i64 1, i64* %memcpy_refined_dst38, align 8, !dbg !3937, !tbaa !133, !alias.scope !135, !noalias !3940
  %18 = addrspacecast [2 x i64]* %newstruct35 to [2 x i64] addrspace(11)*, !dbg !3937
  call fastcc void @julia_throw_setindex_mismatch_2080({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %value_phi, [2 x i64] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %18) #62, !dbg !3937
  unreachable, !dbg !3937

L25:                                              ; preds = %L12
  %.not43 = icmp eq i64 %6, 0, !dbg !3943
  br i1 %.not43, label %L92, label %L42, !dbg !3945

L42:                                              ; preds = %L25
  %19 = bitcast {} addrspace(10)* %value_phi to double addrspace(13)* addrspace(10)*, !dbg !3948
  %20 = addrspacecast double addrspace(13)* addrspace(10)* %19 to double addrspace(13)* addrspace(11)*, !dbg !3948
  %arrayptr744 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %20, align 8, !dbg !3948, !tbaa !382, !alias.scope !3949, !noalias !336, !nonnull !68
  %arrayref = load double, double addrspace(13)* %arrayptr744, align 8, !dbg !3948, !tbaa !269, !alias.scope !117, !noalias !271
  %21 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*
  %22 = addrspacecast {} addrspace(10)* addrspace(10)* %21 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %22, i64 3
  %23 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*
  %arraysize = load i64, i64 addrspace(11)* %23, align 8
  %24 = add i64 %3, -1
  %25 = mul i64 %arraysize, %24
  %26 = bitcast {} addrspace(10)* %0 to double addrspace(13)* addrspace(10)*
  %27 = addrspacecast double addrspace(13)* addrspace(10)* %26 to double addrspace(13)* addrspace(11)*
  %arrayptr2246 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %27, align 16
  %28 = add i64 %25, -1
  br label %L54, !dbg !3950

L54:                                              ; preds = %L74, %L42
  %iv = phi i64 [ %iv.next, %L74 ], [ 0, %L42 ]
  %value_phi15.off0 = phi i1 [ false, %L42 ], [ %32, %L74 ]
  %value_phi16 = phi double [ %arrayref, %L42 ], [ %value_phi30, %L74 ]
  %value_phi17 = phi i64 [ 2, %L42 ], [ %value_phi29, %L74 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !3952
  br i1 %value_phi15.off0, label %L92.loopexit, label %L61, !dbg !3952

L61:                                              ; preds = %L54
  %29 = add i64 %28, %iv.next, !dbg !3954
  %30 = getelementptr inbounds double, double addrspace(13)* %arrayptr2246, i64 %29, !dbg !3954
  store double %value_phi16, double addrspace(13)* %30, align 8, !dbg !3954, !tbaa !269, !alias.scope !117, !noalias !3956
  %31 = add i64 %value_phi17, -1, !dbg !3957
  %32 = icmp uge i64 %31, %6, !dbg !3961
  br i1 %32, label %L74, label %L70, !dbg !3959

L70:                                              ; preds = %L61
  %33 = getelementptr inbounds double, double addrspace(13)* %arrayptr744, i64 %31, !dbg !3963
  %arrayref27 = load double, double addrspace(13)* %33, align 8, !dbg !3963, !tbaa !269, !alias.scope !117, !noalias !271
  %34 = add i64 %value_phi17, 1, !dbg !3964
  br label %L74, !dbg !3945

L74:                                              ; preds = %L70, %L61
  %value_phi29 = phi i64 [ %34, %L70 ], [ undef, %L61 ]
  %value_phi30 = phi double [ %arrayref27, %L70 ], [ undef, %L61 ]
  %.not48 = icmp eq i64 %iv.next, %6, !dbg !3965
  %35 = add i64 %iv.next, 1, !dbg !3966
  br i1 %.not48, label %L92.loopexit, label %L54, !dbg !3968

L92.loopexit:                                     ; preds = %L54, %L74
  br label %L92, !dbg !3969

L92:                                              ; preds = %L92.loopexit, %L25
  ret void, !dbg !3969
}

; Function Attrs: mustprogress willreturn
define internal fastcc { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } @augmented_julia__unsafe_setindex__2077({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", [1 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) "enzyme_inactive" %2, i64 signext "enzyme_inactive" %3) unnamed_addr #59 !dbg !3970 {
top:
  %4 = alloca { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, align 8
  %5 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %"iv'ac" = alloca i64, align 8
  %loopLimit_cache = alloca i64, align 8
  %newstruct35 = alloca [2 x i64], i64 1, align 8
  %7 = bitcast [2 x i64]* %newstruct35 to i8*
  %_cache = alloca i64*, align 8
  %8 = bitcast i8* %7 to [2 x i64]*, !enzyme_caststack !68
  %9 = call {}*** @julia.get_pgcstack() #60
  %memcpy_refined_src = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]] addrspace(11)* %2, i64 0, i64 0, i64 0
  %10 = load i64, i64 addrspace(11)* %memcpy_refined_src, align 8, !tbaa !73, !invariant.load !68, !alias.scope !3971, !noalias !3974
  %ptls_field40 = getelementptr inbounds {}**, {}*** %9, i64 2
  %11 = bitcast {}*** %ptls_field40 to i64***
  %ptls_load4142 = load i64**, i64*** %11, align 8, !tbaa !69, !alias.scope !3976, !noalias !3979
  %12 = getelementptr inbounds i64*, i64** %ptls_load4142, i64 2
  %safepoint = load i64*, i64** %12, align 8, !tbaa !73, !invariant.load !68, !alias.scope !3981, !noalias !3984
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #60, !dbg !3986
  fence syncscope("singlethread") seq_cst
  %13 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !3987
  %14 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %13) #61, !dbg !3987
  %15 = bitcast {}* %14 to i8**, !dbg !3987
  %arrayptr = load i8*, i8** %15, align 8, !dbg !3987, !tbaa !73, !invariant.load !68, !alias.scope !3993, !noalias !3996, !nonnull !68
  %16 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !3987
  %17 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %16) #61, !dbg !3987
  %18 = bitcast {}* %17 to i8**, !dbg !3987
  %arrayptr3 = load i8*, i8** %18, align 8, !dbg !3987, !tbaa !382, !alias.scope !3998, !noalias !4001, !nonnull !68
  %.not.not = icmp eq i8* %arrayptr, %arrayptr3, !dbg !4003
  %19 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i32 0, i32 2, !dbg !3991
  store i1 %.not.not, i1* %19, align 1, !dbg !3991
  br i1 %.not.not, label %L9, label %L12, !dbg !3991

L9:                                               ; preds = %top
  %20 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'1"), !dbg !4006
  %21 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i32 0, i32 0, !dbg !4006
  store {} addrspace(10)* %20, {} addrspace(10)** %21, align 8, !dbg !4006
  %22 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4006
  %23 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %22, i32 0, i32 3, !dbg !4006
  %24 = load i16, i16 addrspace(10)* %23, align 2, !dbg !4006
  %25 = zext i16 %24 to i64, !dbg !4006
  %26 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4006
  %27 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %26, i32 0, i32 1, !dbg !4006
  %28 = load i64, i64 addrspace(10)* %27, align 8, !dbg !4006
  %29 = mul i64 %28, %25, !dbg !4006
  %30 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !4006
  %31 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %30, align 8, !dbg !4006
  %32 = bitcast {} addrspace(10)* %20 to i8 addrspace(13)* addrspace(10)*, !dbg !4006
  %33 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %32, align 8, !dbg !4006
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %33, i8 0, i64 %29, i1 false), !dbg !4006
  %34 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %1) #60, !dbg !4006
  %35 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i32 0, i32 1, !dbg !3991
  store {} addrspace(10)* %34, {} addrspace(10)** %35, align 8, !dbg !3991
  br label %L12, !dbg !3991

L12:                                              ; preds = %L9, %top
  %36 = phi {} addrspace(10)* [ %20, %L9 ], [ %"'1", %top ]
  %value_phi = phi {} addrspace(10)* [ %34, %L9 ], [ %1, %top ]
  %37 = bitcast {} addrspace(10)* %value_phi to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !4008
  %38 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %37 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !4008
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %38, i64 0, i32 1, !dbg !4008
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !4008, !tbaa !332, !range !87, !alias.scope !4011, !noalias !4014
  %.not = icmp eq i64 %arraylen, %10, !dbg !4016
  br i1 %.not, label %L25, label %L22, !dbg !4009

L22:                                              ; preds = %L12
  %memcpy_refined_dst37 = getelementptr inbounds [2 x i64], [2 x i64]* %8, i64 0, i64 0, !dbg !4009
  store i64 %10, i64* %memcpy_refined_dst37, align 8, !dbg !4009, !tbaa !133, !alias.scope !135, !noalias !4017
  %memcpy_refined_dst38 = getelementptr inbounds [2 x i64], [2 x i64]* %8, i64 0, i64 1, !dbg !4009
  store i64 1, i64* %memcpy_refined_dst38, align 8, !dbg !4009, !tbaa !133, !alias.scope !135, !noalias !4017
  %39 = addrspacecast [2 x i64]* %8 to [2 x i64] addrspace(11)*, !dbg !4009
  call fastcc void @julia_throw_setindex_mismatch_2080({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %value_phi, [2 x i64] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %39) #62, !dbg !4009
  unreachable, !dbg !4009

L25:                                              ; preds = %L12
  %.not43 = icmp eq i64 %10, 0, !dbg !4020
  br i1 %.not43, label %L92, label %L42, !dbg !4022

L42:                                              ; preds = %L25
  %"'ipc5" = bitcast {} addrspace(10)* %36 to double addrspace(13)* addrspace(10)*, !dbg !4025
  %40 = bitcast {} addrspace(10)* %value_phi to double addrspace(13)* addrspace(10)*, !dbg !4025
  %"'ipc6" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc5" to double addrspace(13)* addrspace(11)*, !dbg !4025
  %41 = addrspacecast double addrspace(13)* addrspace(10)* %40 to double addrspace(13)* addrspace(11)*, !dbg !4025
  %"arrayptr744'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc6", align 8, !dbg !4025, !tbaa !382, !alias.scope !4026, !noalias !4029, !nonnull !68
  %arrayptr744 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %41, align 8, !dbg !4025, !tbaa !382, !alias.scope !4030, !noalias !4014, !nonnull !68
  %arrayref = load double, double addrspace(13)* %arrayptr744, align 8, !dbg !4025, !tbaa !269, !alias.scope !4031, !noalias !4034
  %42 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*
  %43 = addrspacecast {} addrspace(10)* addrspace(10)* %42 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %43, i64 3
  %44 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*
  %arraysize = load i64, i64 addrspace(11)* %44, align 8, !alias.scope !4036, !noalias !4037
  %45 = add i64 %3, -1
  %46 = mul i64 %arraysize, %45
  %"'ipc" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*
  %47 = bitcast {} addrspace(10)* %0 to double addrspace(13)* addrspace(10)*
  %"'ipc4" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %48 = addrspacecast double addrspace(13)* addrspace(10)* %47 to double addrspace(13)* addrspace(11)*
  %"arrayptr2246'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc4", align 16, !alias.scope !4037, !noalias !4036
  %arrayptr2246 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %48, align 16, !alias.scope !4036, !noalias !4037
  %49 = add i64 %46, -1
  %50 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i32 0, i32 3, !dbg !4038
  store i64 %49, i64* %50, align 8, !dbg !4038
  store i64* null, i64** %_cache, align 8, !dbg !4038
  br label %L54, !dbg !4038

L54:                                              ; preds = %L74, %L42
  %iv = phi i64 [ %iv.next, %L74 ], [ 0, %L42 ]
  %value_phi15.off0 = phi i1 [ false, %L42 ], [ %75, %L74 ]
  %value_phi16 = phi double [ %arrayref, %L42 ], [ %value_phi30, %L74 ]
  %value_phi17 = phi i64 [ 2, %L42 ], [ %value_phi29, %L74 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4040
  %51 = load i64*, i64** %_cache, align 8, !dbg !4040
  %52 = bitcast i64* %51 to i8*, !dbg !4040
  %53 = and i64 %iv.next, 1, !dbg !4040
  %54 = icmp ne i64 %53, 0, !dbg !4040
  %55 = call i64 @llvm.ctpop.i64(i64 %iv.next), !dbg !4040
  %56 = icmp ult i64 %55, 3, !dbg !4040
  %57 = and i1 %56, %54, !dbg !4040
  br i1 %57, label %grow.i, label %__enzyme_exponentialallocationzero.exit, !dbg !4040

grow.i:                                           ; preds = %L54
  %58 = call i64 @llvm.ctlz.i64(i64 %iv.next, i1 true), !dbg !4040
  %59 = sub nuw nsw i64 64, %58, !dbg !4040
  %60 = shl i64 8, %59, !dbg !4040
  %61 = icmp eq i64 %iv.next, 1, !dbg !4040
  %62 = lshr i64 %60, 1, !dbg !4040
  %63 = select i1 %61, i64 0, i64 %62, !dbg !4040
  %64 = call i8* @realloc(i8* %52, i64 %60) #63, !dbg !4040
  %65 = sub i64 %60, %63, !dbg !4040
  %66 = getelementptr inbounds i8, i8* %64, i64 %63, !dbg !4040
  call void @llvm.memset.p0i8.i64(i8* %66, i8 0, i64 %65, i1 false), !dbg !4040
  br label %__enzyme_exponentialallocationzero.exit, !dbg !4040

__enzyme_exponentialallocationzero.exit:          ; preds = %L54, %grow.i
  %67 = phi i8* [ %64, %grow.i ], [ %52, %L54 ], !dbg !4040
  %68 = bitcast i8* %67 to i64*, !dbg !4040
  %69 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, i32 0, i32 4, !dbg !4040
  store i64* %68, i64** %69, align 8, !dbg !4040
  store i64* %68, i64** %_cache, align 8, !dbg !4040
  br i1 %value_phi15.off0, label %L92.loopexit, label %L61, !dbg !4040

L61:                                              ; preds = %__enzyme_exponentialallocationzero.exit
  %70 = add i64 %49, %iv.next, !dbg !4042
  %71 = getelementptr inbounds double, double addrspace(13)* %arrayptr2246, i64 %70, !dbg !4042
  store double %value_phi16, double addrspace(13)* %71, align 8, !dbg !4042, !tbaa !269, !alias.scope !4044, !noalias !4047
  %72 = add i64 %value_phi17, -1, !dbg !4049
  %73 = load i64*, i64** %_cache, align 8, !dbg !4053, !dereferenceable !306, !invariant.group !4055
  %74 = getelementptr inbounds i64, i64* %73, i64 %iv, !dbg !4053
  store i64 %72, i64* %74, align 8, !dbg !4053, !invariant.group !4056
  %75 = icmp uge i64 %72, %10, !dbg !4053
  br i1 %75, label %L74, label %L70, !dbg !4051

L70:                                              ; preds = %L61
  %76 = getelementptr inbounds double, double addrspace(13)* %arrayptr744, i64 %72, !dbg !4057
  %arrayref27 = load double, double addrspace(13)* %76, align 8, !dbg !4057, !tbaa !269, !alias.scope !4031, !noalias !4034
  %77 = add i64 %value_phi17, 1, !dbg !4058
  br label %L74, !dbg !4022

L74:                                              ; preds = %L70, %L61
  %value_phi29 = phi i64 [ %77, %L70 ], [ undef, %L61 ]
  %value_phi30 = phi double [ %arrayref27, %L70 ], [ undef, %L61 ]
  %.not48 = icmp eq i64 %iv.next, %10, !dbg !4059
  br i1 %.not48, label %L92.loopexit, label %L54, !dbg !4062

L92.loopexit:                                     ; preds = %L74, %__enzyme_exponentialallocationzero.exit
  %78 = phi i64 [ %iv, %L74 ], [ %iv, %__enzyme_exponentialallocationzero.exit ], !dbg !4063
  store i64 %78, i64* %loopLimit_cache, align 8, !dbg !4063, !invariant.group !4064
  br label %L92, !dbg !4063

L92:                                              ; preds = %L92.loopexit, %L25
  %79 = load { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* }* %4, align 8, !dbg !4063
  ret { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %79, !dbg !4063
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia__unsafe_setindex__2077({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", [1 x [1 x i64]] addrspace(11)* nocapture readonly align 8 dereferenceable(8) "enzyme_inactive" %2, i64 signext "enzyme_inactive" %3, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg) unnamed_addr #59 !dbg !4065 {
top:
  %"iv'ac" = alloca i64, align 8
  %loopLimit_cache = alloca i64, align 8
  %"arrayref'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %"value_phi16'de" = alloca double, align 8
  %5 = getelementptr double, double* %"value_phi16'de", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"value_phi30'de" = alloca double, align 8
  %6 = getelementptr double, double* %"value_phi30'de", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"arrayref27'de" = alloca double, align 8
  %7 = getelementptr double, double* %"arrayref27'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %_cache33 = alloca i64*, align 8
  %8 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 4
  %mdyncache_fromtape_cache = alloca i64*, align 8
  store i64* %8, i64** %mdyncache_fromtape_cache, align 8
  %9 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %10 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %9, i32 0, i32 3
  %11 = load i16, i16 addrspace(10)* %10, align 2
  %12 = zext i16 %11 to i64
  %13 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %14 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %13, i32 0, i32 1
  %15 = load i64, i64 addrspace(10)* %14, align 8
  %16 = mul i64 %15, %12
  %17 = call {}*** @julia.get_pgcstack() #60
  %memcpy_refined_src = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]] addrspace(11)* %2, i64 0, i64 0, i64 0
  %18 = load i64, i64 addrspace(11)* %memcpy_refined_src, align 8, !tbaa !73, !invariant.load !68, !alias.scope !4066, !noalias !4069
  %.not.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 2, !dbg !4071
  br i1 %.not.not, label %L9, label %L12, !dbg !4071

L9:                                               ; preds = %top
  %"'ip_phi3" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 0, !dbg !4073
  %19 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 1, !dbg !4073
  br label %L12, !dbg !4071

L12:                                              ; preds = %L9, %top
  %20 = phi {} addrspace(10)* [ %"'ip_phi3", %L9 ], [ %"'1", %top ]
  br i1 true, label %L25, label %L22, !dbg !4075

L22:                                              ; preds = %L12
  unreachable

L25:                                              ; preds = %L12
  %.not43 = icmp eq i64 %18, 0, !dbg !4077
  br i1 %.not43, label %L92, label %L42, !dbg !4079

L42:                                              ; preds = %L25
  %"'ipc23" = bitcast {} addrspace(10)* %20 to double addrspace(13)* addrspace(10)*, !dbg !4082
  %"'ipc24" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc23" to double addrspace(13)* addrspace(11)*, !dbg !4082
  %"arrayptr744'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc24", align 8, !dbg !4082, !tbaa !382, !alias.scope !4083, !noalias !4086, !nonnull !68, !invariant.group !4088
  %"'ipc" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*
  %"'ipc15" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr2246'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc15", align 16, !alias.scope !4089, !noalias !4092, !invariant.group !4094
  %21 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 3, !dbg !4095
  br label %L54, !dbg !4095

L54:                                              ; preds = %L74, %L42
  %iv = phi i64 [ %iv.next, %L74 ], [ 0, %L42 ]
  %value_phi15.off0 = phi i1 [ false, %L42 ], [ %27, %L74 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4097
  %22 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 4, !dbg !4097
  br i1 %value_phi15.off0, label %L92.loopexit, label %L61, !dbg !4097

L61:                                              ; preds = %L54
  %23 = add i64 %21, %iv.next, !dbg !4099
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr2246'ipl", i64 %23, !dbg !4099
  %24 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dbg !4101, !dereferenceable !306, !invariant.group !4105
  %25 = getelementptr inbounds i64, i64* %24, i64 %iv, !dbg !4101
  %26 = load i64, i64* %25, align 8, !dbg !4101, !invariant.group !4106
  %27 = icmp uge i64 %26, %18, !dbg !4101
  br i1 %27, label %L74, label %L70, !dbg !4103

L70:                                              ; preds = %L61
  %"'ipg30" = getelementptr inbounds double, double addrspace(13)* %"arrayptr744'ipl", i64 %26, !dbg !4107
  br label %L74, !dbg !4079

L74:                                              ; preds = %L70, %L61
  %.not48 = icmp eq i64 %iv.next, %18, !dbg !4108
  br i1 %.not48, label %L92.loopexit, label %L54, !dbg !4111

L92.loopexit:                                     ; preds = %L74, %L54
  %"value_phi15.off0!manual_lcssa" = phi i1 [ %value_phi15.off0, %L74 ], [ %value_phi15.off0, %L54 ], !dbg !4112
  %28 = phi i64 [ %iv, %L74 ], [ %iv, %L54 ], !dbg !4112
  store i64 %28, i64* %loopLimit_cache, align 8, !dbg !4112, !invariant.group !4113
  br label %L92, !dbg !4112

L92:                                              ; preds = %L92.loopexit, %L25
  br label %invertL92, !dbg !4112

inverttop:                                        ; preds = %invertL12, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL9:                                         ; preds = %invertL12
  %29 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 0, !dbg !4073
  %30 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !4073
  %31 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %30, align 8, !dbg !4073
  %32 = bitcast {} addrspace(10)* %29 to i8 addrspace(13)* addrspace(10)*, !dbg !4073
  %33 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %32, align 8, !dbg !4073
  %34 = bitcast i8 addrspace(13)* %33 to double addrspace(13)*, !dbg !4073
  %35 = bitcast i8 addrspace(13)* %31 to double addrspace(13)*, !dbg !4073
  %36 = udiv i64 %16, 8, !dbg !4073
  %37 = icmp eq i64 %36, 0, !dbg !4073
  br i1 %37, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !4073

for.body.i:                                       ; preds = %for.body.i, %invertL9
  %idx.i = phi i64 [ 0, %invertL9 ], [ %idx.next.i, %for.body.i ], !dbg !4073
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %34, i64 %idx.i, !dbg !4073
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !4073
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !4073
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %35, i64 %idx.i, !dbg !4073
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !4073
  %38 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !4073
  store double %38, double addrspace(13)* %src.i.i, align 1, !dbg !4073
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !4073
  %39 = icmp eq i64 %36, %idx.next.i, !dbg !4073
  br i1 %39, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !4073

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL9, %for.body.i
  br label %inverttop

invertL12:                                        ; preds = %invertL25
  br i1 %.not.not, label %invertL9, label %inverttop

invertL25:                                        ; preds = %invertL92, %invertL42
  br label %invertL12

invertL42:                                        ; preds = %invertL54
  %40 = load double, double* %"arrayref'de", align 8, !dbg !4082
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !4082
  %"'ipc23_unwrap" = bitcast {} addrspace(10)* %20 to double addrspace(13)* addrspace(10)*, !dbg !4082
  %"'ipc24_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc23_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4082
  %"arrayptr744'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc24_unwrap", align 8, !dbg !4082, !tbaa !382, !alias.scope !4083, !noalias !4086, !nonnull !68
  %41 = load double, double addrspace(13)* %"arrayptr744'il_phi_unwrap", align 8, !dbg !4082, !tbaa !269, !alias.scope !4114, !noalias !4117
  %42 = fadd fast double %41, %40, !dbg !4082
  store double %42, double addrspace(13)* %"arrayptr744'il_phi_unwrap", align 8, !dbg !4082, !tbaa !269, !alias.scope !4114, !noalias !4117
  %43 = load i64, i64* %"iv'ac", align 8
  %44 = load i64, i64* %"iv'ac", align 8
  %forfree40 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dereferenceable !306, !invariant.group !4105
  %45 = bitcast i64* %forfree40 to i8*
  call void @free(i8* nonnull %45), !dbg !4119
  br label %invertL25

invertL54:                                        ; preds = %mergeinvertL54_L92.loopexit37, %invertL61
  %46 = load double, double* %"value_phi16'de", align 8
  store double 0.000000e+00, double* %"value_phi16'de", align 8
  %47 = load i64, i64* %"iv'ac", align 8
  %48 = icmp eq i64 %47, 0
  %49 = xor i1 %48, true
  %50 = select fast i1 %49, double %46, double 0.000000e+00
  %51 = load double, double* %"value_phi30'de", align 8
  %52 = fadd fast double %51, %46
  %53 = select fast i1 %48, double %51, double %52
  store double %53, double* %"value_phi30'de", align 8
  %54 = select fast i1 %48, double %46, double 0.000000e+00
  %55 = load double, double* %"arrayref'de", align 8
  %56 = fadd fast double %55, %46
  %57 = select fast i1 %48, double %56, double %55
  store double %57, double* %"arrayref'de", align 8
  br i1 %48, label %invertL42, label %incinvertL54

incinvertL54:                                     ; preds = %invertL54
  %58 = load i64, i64* %"iv'ac", align 8
  %59 = add nsw i64 %58, -1
  store i64 %59, i64* %"iv'ac", align 8
  br label %invertL74

invertL61:                                        ; preds = %invertL74, %invertL70
  %60 = load i64, i64* %"iv'ac", align 8, !dbg !4099
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*, !dbg !4099
  %"'ipc15_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4099
  %"arrayptr2246'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc15_unwrap", align 16, !alias.scope !4089, !noalias !4092, !invariant.group !4094
  %_unwrap41 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 3, !dbg !4099
  %iv.next_unwrap = add nuw nsw i64 %60, 1, !dbg !4099
  %_unwrap = add i64 %_unwrap41, %iv.next_unwrap, !dbg !4099
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr2246'ipl_unwrap", i64 %_unwrap, !dbg !4099
  %61 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4099, !tbaa !269, !alias.scope !4120, !noalias !4123
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4099, !tbaa !269, !alias.scope !4120, !noalias !4123
  %62 = load double, double* %"value_phi16'de", align 8, !dbg !4099
  %63 = fadd fast double %62, %61, !dbg !4099
  store double %63, double* %"value_phi16'de", align 8, !dbg !4099
  br label %invertL54

invertL70:                                        ; preds = %invertL74
  %64 = load double, double* %"arrayref27'de", align 8, !dbg !4107
  store double 0.000000e+00, double* %"arrayref27'de", align 8, !dbg !4107
  %65 = load i64, i64* %"iv'ac", align 8, !dbg !4107
  %"'ipc23_unwrap31" = bitcast {} addrspace(10)* %20 to double addrspace(13)* addrspace(10)*, !dbg !4107
  %"'ipc24_unwrap32" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc23_unwrap31" to double addrspace(13)* addrspace(11)*, !dbg !4107
  %"arrayptr744'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc24_unwrap32", align 8, !dbg !4082, !tbaa !382, !alias.scope !4083, !noalias !4086, !nonnull !68, !invariant.group !4088
  %66 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 4, !dbg !4107
  %67 = getelementptr inbounds i64, i64* %66, i64 %65, !dbg !4107
  %68 = load i64, i64* %67, align 8, !dbg !4107, !invariant.group !4125
  %"'ipg30_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr744'ipl_unwrap", i64 %68, !dbg !4107
  %69 = load double, double addrspace(13)* %"'ipg30_unwrap", align 8, !dbg !4107, !tbaa !269, !alias.scope !4114, !noalias !4117
  %70 = fadd fast double %69, %64, !dbg !4107
  store double %70, double addrspace(13)* %"'ipg30_unwrap", align 8, !dbg !4107, !tbaa !269, !alias.scope !4114, !noalias !4117
  br label %invertL61

invertL74:                                        ; preds = %mergeinvertL54_L92.loopexit, %incinvertL54
  %71 = load double, double* %"value_phi30'de", align 8
  store double 0.000000e+00, double* %"value_phi30'de", align 8
  %72 = load i64, i64* %"iv'ac", align 8
  %73 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 4
  %74 = getelementptr inbounds i64, i64* %73, i64 %72
  %75 = load i64, i64* %74, align 8, !invariant.group !4125
  %_unwrap36 = icmp uge i64 %75, %18
  %76 = xor i1 %_unwrap36, true
  %77 = select fast i1 %76, double %71, double 0.000000e+00
  %78 = load double, double* %"arrayref27'de", align 8
  %79 = fadd fast double %78, %71
  %80 = select fast i1 %_unwrap36, double %78, double %79
  store double %80, double* %"arrayref27'de", align 8
  br i1 %_unwrap36, label %invertL61, label %invertL70

invertL92.loopexit:                               ; preds = %invertL92
  %81 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !4113
  %82 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !4113
  %83 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !4113
  %84 = icmp ne i64 %83, 0
  br i1 %84, label %invertL92.loopexit_phirc, label %invertL92.loopexit_phirc39

invertL92.loopexit_phirc:                         ; preds = %invertL92.loopexit
  %85 = sub nuw i64 %83, 1
  %86 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %tapeArg, 4
  %87 = getelementptr inbounds i64, i64* %86, i64 %85
  %88 = load i64, i64* %87, align 8, !invariant.group !4125
  %_unwrap38 = icmp uge i64 %88, %18
  br label %invertL92.loopexit_phimerge

invertL92.loopexit_phirc39:                       ; preds = %invertL92.loopexit
  br label %invertL92.loopexit_phimerge

invertL92.loopexit_phimerge:                      ; preds = %invertL92.loopexit_phirc39, %invertL92.loopexit_phirc
  %89 = phi i1 [ %_unwrap38, %invertL92.loopexit_phirc ], [ false, %invertL92.loopexit_phirc39 ]
  br i1 %89, label %mergeinvertL54_L92.loopexit37, label %mergeinvertL54_L92.loopexit

mergeinvertL54_L92.loopexit37:                    ; preds = %invertL92.loopexit_phimerge
  store i64 %82, i64* %"iv'ac", align 8
  br label %invertL54

mergeinvertL54_L92.loopexit:                      ; preds = %invertL92.loopexit_phimerge
  store i64 %81, i64* %"iv'ac", align 8
  br label %invertL74

invertL92:                                        ; preds = %L92
  br i1 %.not43, label %invertL25, label %invertL92.loopexit
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia__diagm_2062({ i64, {} addrspace(10)* } addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %0) unnamed_addr #60 !dbg !4146 {
top:
  %1 = call noalias nonnull dereferenceable(24) dereferenceable_or_null(24) i8* @malloc(i64 24), !enzyme_fromstack !306
  %2 = bitcast i8* %1 to [3 x i64]*, !enzyme_caststack !68
  %3 = call noalias nonnull dereferenceable(24) dereferenceable_or_null(24) i8* @malloc(i64 24), !enzyme_fromstack !306
  %4 = bitcast i8* %3 to [3 x i64]*, !enzyme_caststack !68
  %5 = call noalias nonnull dereferenceable(24) dereferenceable_or_null(24) i8* @malloc(i64 24), !enzyme_fromstack !306
  %6 = bitcast i8* %5 to [3 x i64]*, !enzyme_caststack !68
  %7 = call noalias nonnull dereferenceable(24) dereferenceable_or_null(24) i8* @malloc(i64 24), !enzyme_fromstack !306
  %8 = bitcast i8* %7 to [3 x i64]*, !enzyme_caststack !68
  %9 = call {}*** @julia.get_pgcstack() #61
  %unbox.elt = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %0, i64 0, i32 0
  %unbox.unpack = load i64, i64 addrspace(11)* %unbox.elt, align 8, !tbaa !73, !alias.scope !96, !noalias !97
  %unbox.elt85 = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %0, i64 0, i32 1
  %unbox.unpack86 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %unbox.elt85, align 8, !tbaa !73, !alias.scope !96, !noalias !97
  %ptls_field92 = getelementptr inbounds {}**, {}*** %9, i64 2
  %10 = bitcast {}*** %ptls_field92 to i64***
  %ptls_load9394 = load i64**, i64*** %10, align 8, !tbaa !69
  %11 = getelementptr inbounds i64*, i64** %ptls_load9394, i64 2
  %safepoint = load i64*, i64** %11, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #61, !dbg !4147
  fence syncscope("singlethread") seq_cst
  %12 = icmp ne {} addrspace(10)* %unbox.unpack86, null
  call void @llvm.assume(i1 noundef %12) #61
  %13 = bitcast {} addrspace(10)* %unbox.unpack86 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !4148
  %14 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %13 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !4162
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %14, i64 0, i32 1, !dbg !4162
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !4162, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %15 = call i64 @llvm.abs.i64(i64 %unbox.unpack, i1 false) #61, !dbg !4163
  %16 = add nuw i64 %arraylen, %15, !dbg !4165
  %17 = call i64 @llvm.smax.i64(i64 %16, i64 noundef 0) #61, !dbg !4166
  %18 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 6189285392 to {}*) to {} addrspace(10)*), i64 %17, i64 %17) #62, !dbg !4169
  %19 = bitcast {} addrspace(10)* %18 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !4173
  %20 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %19 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !4173
  %arraylen_ptr4 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %20, i64 0, i32 1, !dbg !4173
  %arraylen5 = load i64, i64 addrspace(11)* %arraylen_ptr4, align 8, !dbg !4173, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %.not = icmp eq i64 %arraylen5, 0, !dbg !4178
  br i1 %.not, label %L47, label %top.L22_crit_edge, !dbg !4176

top.L22_crit_edge:                                ; preds = %top
  %21 = bitcast {} addrspace(10)* %18 to i8 addrspace(13)* addrspace(10)*, !dbg !4182
  %22 = addrspacecast i8 addrspace(13)* addrspace(10)* %21 to i8 addrspace(13)* addrspace(11)*, !dbg !4182
  %arrayptr96.pre134 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %22, align 8, !dbg !4182, !tbaa !73, !invariant.load !68, !alias.scope !4184, !noalias !97
  %23 = shl nuw i64 %arraylen5, 3, !dbg !4176
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr96.pre134, i8 noundef 0, i64 %23, i1 noundef false) #61, !dbg !4182, !tbaa !269, !alias.scope !117, !noalias !4187
  br label %L47, !dbg !4188

L47:                                              ; preds = %top.L22_crit_edge, %top
  %24 = bitcast {} addrspace(10)* %18 to {} addrspace(10)* addrspace(10)*, !dbg !4188
  %25 = addrspacecast {} addrspace(10)* addrspace(10)* %24 to {} addrspace(10)* addrspace(11)*, !dbg !4188
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 3, !dbg !4188
  %26 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*, !dbg !4188
  %arraysize = load i64, i64 addrspace(11)* %26, align 8, !dbg !4188, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %arraysize_ptr14 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 4, !dbg !4188
  %27 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr14 to i64 addrspace(11)*, !dbg !4188
  %arraysize15 = load i64, i64 addrspace(11)* %27, align 8, !dbg !4188, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %28 = icmp sgt i64 %unbox.unpack, 0, !dbg !4191
  br i1 %28, label %L59, label %L52, !dbg !4192

L52:                                              ; preds = %L47
  %29 = sub i64 1, %unbox.unpack, !dbg !4193
  %30 = add nuw nsw i64 %arraysize, 1, !dbg !4194
  %31 = add nsw i64 %arraysize, %unbox.unpack, !dbg !4194
  %32 = call i64 @llvm.smin.i64(i64 %arraysize15, i64 %31) #61, !dbg !4195
  call fastcc void @julia_range_start_step_length_2068([3 x i64]* noalias nocapture noundef nonnull sret([3 x i64]) align 8 dereferenceable(24) %6, i64 signext %29, i64 signext %30, i64 signext %32) #61, !dbg !4197
  %.0.sroa_cast106 = bitcast [3 x i64]* %2 to i8*, !dbg !4200
  %.0.sroa_cast3 = bitcast [3 x i64]* %2 to i8*, !dbg !4200
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %.0.sroa_cast3), !dbg !4200
  %33 = bitcast [3 x i64]* %6 to i8*, !dbg !4200
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %.0.sroa_cast106, i8* noundef nonnull align 8 dereferenceable(24) %33, i64 24, i1 false) #61, !dbg !4200, !tbaa !133, !alias.scope !135, !noalias !4202
  br label %L67, !dbg !4200

L59:                                              ; preds = %L47
  %34 = mul i64 %arraysize, %unbox.unpack, !dbg !4203
  %35 = add i64 %34, 1, !dbg !4194
  %36 = add nuw nsw i64 %arraysize, 1, !dbg !4194
  %37 = sub nsw i64 %arraysize15, %unbox.unpack, !dbg !4193
  %38 = call i64 @llvm.smin.i64(i64 %37, i64 %arraysize) #61, !dbg !4195
  call fastcc void @julia_range_start_step_length_2068([3 x i64]* noalias nocapture noundef nonnull sret([3 x i64]) align 8 dereferenceable(24) %8, i64 signext %35, i64 signext %36, i64 signext %38) #61, !dbg !4197
  %.0.sroa_cast107 = bitcast [3 x i64]* %2 to i8*, !dbg !4200
  %.0.sroa_cast4 = bitcast [3 x i64]* %2 to i8*, !dbg !4200
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %.0.sroa_cast4), !dbg !4200
  %39 = bitcast [3 x i64]* %8 to i8*, !dbg !4200
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %.0.sroa_cast107, i8* noundef nonnull align 8 dereferenceable(24) %39, i64 24, i1 false) #61, !dbg !4200, !tbaa !133, !alias.scope !135, !noalias !4202
  br label %L67, !dbg !4200

L67:                                              ; preds = %L59, %L52
  %.pre-phi.pre-phi.pre-phi.pre-phi.pre-phi = bitcast [3 x i64]* %2 to i8*, !dbg !4189
  %40 = bitcast [3 x i64]* %4 to i8*, !dbg !4189
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %40, i8* noundef nonnull align 8 dereferenceable(24) %.pre-phi.pre-phi.pre-phi.pre-phi.pre-phi, i64 24, i1 false) #61, !dbg !4189, !noalias !4204
  %.0.sroa_cast5 = bitcast [3 x i64]* %2 to i8*, !dbg !4189
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %.0.sroa_cast5), !dbg !4189
  %arraylen23 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !4205, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not99 = icmp eq i64 %arraylen23, 0, !dbg !4211
  br i1 %.not99, label %L160, label %L87.L98_crit_edge, !dbg !4206

L87.L98_crit_edge:                                ; preds = %L67
  %.phi.trans.insert112 = getelementptr inbounds [3 x i64], [3 x i64]* %4, i64 0, i64 1
  %unbox39.pre = load i64, i64* %.phi.trans.insert112, align 8, !dbg !4213, !tbaa !133, !alias.scope !135, !noalias !1099
  %.phi.trans.insert113 = getelementptr inbounds [3 x i64], [3 x i64]* %4, i64 0, i64 0
  %unbox40.pre = load i64, i64* %.phi.trans.insert113, align 8, !dbg !4216, !tbaa !133, !alias.scope !135, !noalias !1099
  %.phi.trans.insert115 = getelementptr inbounds [3 x i64], [3 x i64]* %4, i64 0, i64 2
  %unbox42.pre = load i64, i64* %.phi.trans.insert115, align 8, !dbg !4217, !tbaa !133, !alias.scope !135, !noalias !1099
  %41 = icmp slt i64 %unbox39.pre, 1, !dbg !4219
  %42 = icmp sle i64 %unbox40.pre, %unbox42.pre, !dbg !4217
  %43 = icmp sle i64 %unbox42.pre, %unbox40.pre, !dbg !4221
  %.v129 = select i1 %41, i1 %43, i1 %42, !dbg !4223
  br i1 %.v129, label %L128.lr.ph, label %L125, !dbg !4224

L128.lr.ph:                                       ; preds = %L87.L98_crit_edge
  %44 = bitcast {} addrspace(10)* %unbox.unpack86 to double addrspace(13)* addrspace(10)*, !dbg !4225
  %45 = addrspacecast double addrspace(13)* addrspace(10)* %44 to double addrspace(13)* addrspace(11)*, !dbg !4225
  %arrayptr25100 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %45, align 8, !dbg !4225, !tbaa !382, !alias.scope !4226, !noalias !336, !nonnull !68
  %46 = bitcast {} addrspace(10)* %18 to double addrspace(13)* addrspace(10)*
  %47 = addrspacecast double addrspace(13)* addrspace(10)* %46 to double addrspace(13)* addrspace(11)*
  %48 = add nuw nsw i64 %arraylen23, 1, !dbg !4224
  %49 = bitcast double addrspace(13)* addrspace(10)* %44 to {} addrspace(10)*, !dbg !4224
  br label %L128, !dbg !4224

L125.loopexit:                                    ; preds = %L143
  br label %L125, !dbg !4224

L125:                                             ; preds = %L125.loopexit, %L87.L98_crit_edge
  %value_phi35.lcssa = phi i64 [ 1, %L87.L98_crit_edge ], [ %51, %L125.loopexit ]
  %50 = addrspacecast [3 x i64]* %4 to [3 x i64] addrspace(11)*, !dbg !4224
  call fastcc void @julia_throw_boundserror_2066([3 x i64] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(24) %50, i64 signext %value_phi35.lcssa) #63, !dbg !4224
  unreachable, !dbg !4224

L128:                                             ; preds = %L143, %L128.lr.ph
  %iv = phi i64 [ %iv.next, %L143 ], [ 0, %L128.lr.ph ]
  %nodecayed.value_phi36132.in = phi {} addrspace(10)* [ %49, %L128.lr.ph ], [ %77, %L143 ]
  %51 = add i64 %iv, 2, !dbg !4227
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4227
  %52 = shl i64 %iv, 3, !dbg !4227
  %53 = mul i64 %unbox39.pre, %iv, !dbg !4227
  %54 = add i64 %unbox40.pre, %53, !dbg !4227
  %55 = bitcast {} addrspace(10)* %nodecayed.value_phi36132.in to double addrspace(13)* addrspace(10)*, !dbg !4227
  %56 = addrspacecast double addrspace(13)* addrspace(10)* %55 to double addrspace(13)* addrspace(11)*, !dbg !4227
  %57 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %56, align 8, !dbg !4227
  %58 = bitcast double addrspace(13)* %57 to i8 addrspace(13)*, !dbg !4227
  %59 = getelementptr i8, i8 addrspace(13)* %58, i64 %52, !dbg !4227
  %60 = bitcast i8 addrspace(13)* %59 to double addrspace(13)*, !dbg !4227
  %61 = add i64 %54, -1, !dbg !4227
  %inbounds = icmp ult i64 %61, %arraylen5, !dbg !4227
  br i1 %inbounds, label %idxend57, label %oob, !dbg !4227

L143:                                             ; preds = %idxend57
  %62 = add nsw i64 %51, -1, !dbg !4228
  %63 = getelementptr inbounds double, double addrspace(13)* %arrayptr25100, i64 %62, !dbg !4233
  %64 = add nuw i64 %51, 1, !dbg !4234
  %65 = mul i64 %62, %unbox39.pre, !dbg !4213
  %66 = add i64 %65, %unbox40.pre, !dbg !4216
  %67 = icmp sle i64 %66, %unbox42.pre, !dbg !4217
  %68 = icmp sle i64 %unbox40.pre, %66, !dbg !4221
  %69 = and i1 %67, %68, !dbg !4235
  %70 = icmp sle i64 %66, %unbox40.pre, !dbg !4217
  %71 = icmp sle i64 %unbox42.pre, %66, !dbg !4221
  %72 = and i1 %70, %71, !dbg !4235
  %.v = select i1 %41, i1 %72, i1 %69, !dbg !4223
  %73 = mul i64 %62, 8, !dbg !4224
  %74 = add i64 0, %73, !dbg !4224
  %75 = add nuw i64 0, %74, !dbg !4224
  %76 = bitcast double addrspace(13)* addrspace(10)* %44 to double addrspace(10)*, !dbg !4224
  %77 = bitcast double addrspace(10)* %76 to {} addrspace(10)*, !dbg !4224
  br i1 %.v, label %L128, label %L125.loopexit, !dbg !4224

L160.loopexit:                                    ; preds = %idxend57
  br label %L160, !dbg !4236

L160:                                             ; preds = %L160.loopexit, %L67
  ret {} addrspace(10)* %18, !dbg !4236

oob:                                              ; preds = %L128
  %errorbox = alloca i64, align 8, !dbg !4227
  store i64 %54, i64* %errorbox, align 8, !dbg !4227, !noalias !4204
  %78 = addrspacecast {} addrspace(10)* %18 to {} addrspace(12)*, !dbg !4227
  call void @ijl_bounds_error_ints({} addrspace(12)* %78, i64* nonnull align 8 %errorbox, i64 1) #61, !dbg !4227
  unreachable, !dbg !4227

idxend57:                                         ; preds = %L128
  %value_phi36132 = load double, double addrspace(13)* %60, align 8, !dbg !4237, !tbaa !269, !alias.scope !117, !noalias !271
  %arrayptr50101 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %47, align 8, !dbg !4227, !tbaa !73, !invariant.load !68, !alias.scope !4184, !noalias !97, !nonnull !68
  %79 = getelementptr inbounds double, double addrspace(13)* %arrayptr50101, i64 %61, !dbg !4227
  %arrayref51 = load double, double addrspace(13)* %79, align 8, !dbg !4227, !tbaa !269, !alias.scope !117, !noalias !271
  %80 = fadd double %value_phi36132, %arrayref51, !dbg !4238
  store double %80, double addrspace(13)* %79, align 8, !dbg !4239, !tbaa !269, !alias.scope !117, !noalias !4187
  %exitcond.not = icmp eq i64 %51, %48, !dbg !4240
  br i1 %exitcond.not, label %L160.loopexit, label %L143, !dbg !4230
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia__diagm_2062({ i64, {} addrspace(10)* } addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %0, { i64, {} addrspace(10)* } addrspace(11)* nocapture align 8 %"'") unnamed_addr #60 !dbg !4242 {
top:
  %1 = alloca { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %2 = getelementptr inbounds { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %1, i32 0, i32 0
  %3 = getelementptr { {} addrspace(10)*, i64, i8*, i64, i64 }, { {} addrspace(10)*, i64, i8*, i64, i64 }* %2, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %3, align 8
  %"iv'ac" = alloca i64, align 8
  %4 = alloca [3 x i64], i64 1, align 8
  %5 = bitcast [3 x i64]* %4 to i8*
  %6 = alloca [3 x i64], i64 1, align 8
  %7 = bitcast [3 x i64]* %6 to i8*
  %8 = alloca [3 x i64], i64 1, align 8
  %9 = bitcast [3 x i64]* %8 to i8*
  %10 = bitcast i8* %9 to [3 x i64]*, !enzyme_caststack !68
  %11 = call noalias nonnull dereferenceable(24) dereferenceable_or_null(24) i8* @malloc(i64 24), !enzyme_fromstack !306
  %12 = getelementptr inbounds { {} addrspace(10)*, i64, i8*, i64, i64 }, { {} addrspace(10)*, i64, i8*, i64, i64 }* %2, i32 0, i32 2
  store i8* %11, i8** %12, align 8
  %13 = bitcast i8* %11 to [3 x i64]*, !enzyme_caststack !68
  %14 = bitcast i8* %7 to [3 x i64]*, !enzyme_caststack !68
  %15 = bitcast i8* %5 to [3 x i64]*, !enzyme_caststack !68
  %16 = call {}*** @julia.get_pgcstack() #61
  %unbox.elt = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %0, i64 0, i32 0
  %unbox.unpack = load i64, i64 addrspace(11)* %unbox.elt, align 8, !tbaa !73, !alias.scope !4243, !noalias !4246
  %"unbox.elt85'ipg" = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %"'", i64 0, i32 1
  %unbox.elt85 = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %0, i64 0, i32 1
  %"unbox.unpack86'ipl" = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"unbox.elt85'ipg", align 8, !tbaa !73, !alias.scope !4248, !noalias !4249
  %unbox.unpack86 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %unbox.elt85, align 8, !tbaa !73, !alias.scope !4243, !noalias !4246
  %ptls_field92 = getelementptr inbounds {}**, {}*** %16, i64 2
  %17 = bitcast {}*** %ptls_field92 to i64***
  %ptls_load9394 = load i64**, i64*** %17, align 8, !tbaa !69, !alias.scope !4250, !noalias !4253
  %18 = getelementptr inbounds i64*, i64** %ptls_load9394, i64 2
  %safepoint = load i64*, i64** %18, align 8, !tbaa !73, !invariant.load !68, !alias.scope !4255, !noalias !4258
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #61, !dbg !4260
  fence syncscope("singlethread") seq_cst
  %19 = icmp ne {} addrspace(10)* %unbox.unpack86, null
  call void @llvm.assume(i1 noundef %19) #61
  %20 = bitcast {} addrspace(10)* %unbox.unpack86 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !4261
  %21 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %20 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !4275
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %21, i64 0, i32 1, !dbg !4275
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !4275, !tbaa !332, !range !87, !alias.scope !4276, !noalias !4279
  %22 = call i64 @llvm.abs.i64(i64 %unbox.unpack, i1 false) #61, !dbg !4281
  %23 = add nuw i64 %arraylen, %22, !dbg !4283
  %24 = call i64 @llvm.smax.i64(i64 %23, i64 noundef 0) #61, !dbg !4284
  %25 = getelementptr inbounds { {} addrspace(10)*, i64, i8*, i64, i64 }, { {} addrspace(10)*, i64, i8*, i64, i64 }* %2, i32 0, i32 1, !dbg !4287
  store i64 %24, i64* %25, align 8, !dbg !4287
  %26 = call {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6189285392 to {}*) to {} addrspace(10)*), i64 %24, i64 %24), !dbg !4287
  %27 = getelementptr inbounds { {} addrspace(10)*, i64, i8*, i64, i64 }, { {} addrspace(10)*, i64, i8*, i64, i64 }* %2, i32 0, i32 0, !dbg !4287
  store {} addrspace(10)* %26, {} addrspace(10)** %27, align 8, !dbg !4287
  %28 = bitcast {} addrspace(10)* %26 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4287
  %29 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %28, i32 0, i32 1, !dbg !4287
  %30 = load i64, i64 addrspace(10)* %29, align 8, !dbg !4287
  %31 = mul i64 %30, 8, !dbg !4287
  %32 = bitcast {} addrspace(10)* %26 to i8 addrspace(13)* addrspace(10)*, !dbg !4287
  %33 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %32, align 8, !dbg !4287
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %33, i8 0, i64 %31, i1 false), !dbg !4287
  %34 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 6189285392 to {}*) to {} addrspace(10)*), i64 %24, i64 %24) #62, !dbg !4287
  %35 = bitcast {} addrspace(10)* %34 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !4291
  %36 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %35 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !4291
  %arraylen_ptr4 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %36, i64 0, i32 1, !dbg !4291
  %arraylen5 = load i64, i64 addrspace(11)* %arraylen_ptr4, align 8, !dbg !4291, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !4296, !noalias !4299
  %37 = getelementptr inbounds { {} addrspace(10)*, i64, i8*, i64, i64 }, { {} addrspace(10)*, i64, i8*, i64, i64 }* %2, i32 0, i32 3, !dbg !4301
  store i64 %arraylen5, i64* %37, align 8, !dbg !4301
  %.not = icmp eq i64 %arraylen5, 0, !dbg !4301
  br i1 %.not, label %L47, label %top.L22_crit_edge, !dbg !4294

top.L22_crit_edge:                                ; preds = %top
  %"'ipc" = bitcast {} addrspace(10)* %26 to i8 addrspace(13)* addrspace(10)*, !dbg !4305
  %38 = bitcast {} addrspace(10)* %34 to i8 addrspace(13)* addrspace(10)*, !dbg !4305
  %"'ipc1" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc" to i8 addrspace(13)* addrspace(11)*, !dbg !4305
  %39 = addrspacecast i8 addrspace(13)* addrspace(10)* %38 to i8 addrspace(13)* addrspace(11)*, !dbg !4305
  %"arrayptr96.pre134'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc1", align 8, !dbg !4305, !tbaa !73, !alias.scope !4307, !noalias !4310
  %arrayptr96.pre134 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %39, align 8, !dbg !4305, !tbaa !73, !invariant.load !68, !alias.scope !4311, !noalias !4299
  %40 = shl nuw i64 %arraylen5, 3, !dbg !4294
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr96.pre134, i8 noundef 0, i64 %40, i1 noundef false) #61, !dbg !4305, !tbaa !269, !alias.scope !117, !noalias !4312
  br label %L47, !dbg !4315

L47:                                              ; preds = %top.L22_crit_edge, %top
  %41 = bitcast {} addrspace(10)* %34 to {} addrspace(10)* addrspace(10)*, !dbg !4315
  %42 = addrspacecast {} addrspace(10)* addrspace(10)* %41 to {} addrspace(10)* addrspace(11)*, !dbg !4315
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %42, i64 3, !dbg !4315
  %43 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*, !dbg !4315
  %arraysize = load i64, i64 addrspace(11)* %43, align 8, !dbg !4315, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !4296, !noalias !4299
  %arraysize_ptr14 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %42, i64 4, !dbg !4315
  %44 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr14 to i64 addrspace(11)*, !dbg !4315
  %arraysize15 = load i64, i64 addrspace(11)* %44, align 8, !dbg !4315, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !4296, !noalias !4299
  %45 = icmp sgt i64 %unbox.unpack, 0, !dbg !4318
  br i1 %45, label %L59, label %L52, !dbg !4319

L52:                                              ; preds = %L47
  %46 = sub i64 1, %unbox.unpack, !dbg !4320
  %47 = add nuw nsw i64 %arraysize, 1, !dbg !4321
  %48 = add nsw i64 %arraysize, %unbox.unpack, !dbg !4321
  %49 = call i64 @llvm.smin.i64(i64 %arraysize15, i64 %48) #61, !dbg !4322
  call fastcc void @julia_range_start_step_length_2068([3 x i64]* noalias nocapture noundef nonnull sret([3 x i64]) align 8 dereferenceable(24) %14, i64 signext %46, i64 signext %47, i64 signext %49) #61, !dbg !4324
  %.0.sroa_cast106 = bitcast [3 x i64]* %10 to i8*, !dbg !4327
  %50 = bitcast [3 x i64]* %14 to i8*, !dbg !4327
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %.0.sroa_cast106, i8* noundef nonnull align 8 dereferenceable(24) %50, i64 24, i1 false) #61, !dbg !4327, !tbaa !133, !alias.scope !135, !noalias !4329
  br label %L67, !dbg !4327

L59:                                              ; preds = %L47
  %51 = mul i64 %arraysize, %unbox.unpack, !dbg !4330
  %52 = add i64 %51, 1, !dbg !4321
  %53 = add nuw nsw i64 %arraysize, 1, !dbg !4321
  %54 = sub nsw i64 %arraysize15, %unbox.unpack, !dbg !4320
  %55 = call i64 @llvm.smin.i64(i64 %54, i64 %arraysize) #61, !dbg !4322
  call fastcc void @julia_range_start_step_length_2068([3 x i64]* noalias nocapture noundef nonnull sret([3 x i64]) align 8 dereferenceable(24) %15, i64 signext %52, i64 signext %53, i64 signext %55) #61, !dbg !4324
  %.0.sroa_cast107 = bitcast [3 x i64]* %10 to i8*, !dbg !4327
  %56 = bitcast [3 x i64]* %15 to i8*, !dbg !4327
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %.0.sroa_cast107, i8* noundef nonnull align 8 dereferenceable(24) %56, i64 24, i1 false) #61, !dbg !4327, !tbaa !133, !alias.scope !135, !noalias !4329
  br label %L67, !dbg !4327

L67:                                              ; preds = %L59, %L52
  %.pre-phi.pre-phi.pre-phi.pre-phi.pre-phi = bitcast [3 x i64]* %10 to i8*, !dbg !4316
  %57 = bitcast [3 x i64]* %13 to i8*, !dbg !4316
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %57, i8* noundef nonnull align 8 dereferenceable(24) %.pre-phi.pre-phi.pre-phi.pre-phi.pre-phi, i64 24, i1 false) #61, !dbg !4316, !noalias !4331
  %arraylen23 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !4332, !tbaa !332, !range !87, !alias.scope !4276, !noalias !4279
  %58 = getelementptr inbounds { {} addrspace(10)*, i64, i8*, i64, i64 }, { {} addrspace(10)*, i64, i8*, i64, i64 }* %2, i32 0, i32 4, !dbg !4338
  store i64 %arraylen23, i64* %58, align 8, !dbg !4338
  %.not99 = icmp eq i64 %arraylen23, 0, !dbg !4338
  br i1 %.not99, label %L160, label %L87.L98_crit_edge, !dbg !4333

L87.L98_crit_edge:                                ; preds = %L67
  %.phi.trans.insert112 = getelementptr inbounds [3 x i64], [3 x i64]* %13, i64 0, i64 1
  %unbox39.pre = load i64, i64* %.phi.trans.insert112, align 8, !dbg !4340, !tbaa !133, !alias.scope !4343, !noalias !4346
  %.phi.trans.insert113 = getelementptr inbounds [3 x i64], [3 x i64]* %13, i64 0, i64 0
  %unbox40.pre = load i64, i64* %.phi.trans.insert113, align 8, !dbg !4348, !tbaa !133, !alias.scope !4343, !noalias !4346
  %.phi.trans.insert115 = getelementptr inbounds [3 x i64], [3 x i64]* %13, i64 0, i64 2
  %unbox42.pre = load i64, i64* %.phi.trans.insert115, align 8, !dbg !4349, !tbaa !133, !alias.scope !4343, !noalias !4346
  %59 = icmp slt i64 %unbox39.pre, 1, !dbg !4351
  %60 = icmp sle i64 %unbox40.pre, %unbox42.pre, !dbg !4349
  %61 = icmp sle i64 %unbox42.pre, %unbox40.pre, !dbg !4353
  %.v129 = select i1 %59, i1 %61, i1 %60, !dbg !4355
  br i1 %.v129, label %L128.lr.ph, label %L125, !dbg !4356

L128.lr.ph:                                       ; preds = %L87.L98_crit_edge
  %"'ipc2" = bitcast {} addrspace(10)* %"unbox.unpack86'ipl" to double addrspace(13)* addrspace(10)*, !dbg !4357
  %62 = bitcast {} addrspace(10)* %unbox.unpack86 to double addrspace(13)* addrspace(10)*, !dbg !4357
  %"'ipc13" = bitcast {} addrspace(10)* %26 to double addrspace(13)* addrspace(10)*
  %63 = bitcast {} addrspace(10)* %34 to double addrspace(13)* addrspace(10)*
  %"'ipc14" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc13" to double addrspace(13)* addrspace(11)*
  %64 = addrspacecast double addrspace(13)* addrspace(10)* %63 to double addrspace(13)* addrspace(11)*
  %65 = add nuw nsw i64 %arraylen23, 1, !dbg !4356
  %"'ipc3" = bitcast double addrspace(13)* addrspace(10)* %"'ipc2" to {} addrspace(10)*, !dbg !4356
  %66 = bitcast double addrspace(13)* addrspace(10)* %62 to {} addrspace(10)*, !dbg !4356
  %67 = add nsw i64 %arraylen23, -1, !dbg !4356
  br label %L128, !dbg !4356

L125.loopexit:                                    ; preds = %L143
  br label %L125, !dbg !4356

L125:                                             ; preds = %L125.loopexit, %L87.L98_crit_edge
  %value_phi35.lcssa = phi i64 [ 1, %L87.L98_crit_edge ], [ %70, %L125.loopexit ]
  %68 = addrspacecast [3 x i64]* %13 to [3 x i64] addrspace(11)*, !dbg !4356
  call fastcc void @julia_throw_boundserror_2066([3 x i64] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(24) %68, i64 signext %value_phi35.lcssa) #63, !dbg !4356
  unreachable, !dbg !4356

L128:                                             ; preds = %L143, %L128.lr.ph
  %iv = phi i64 [ %iv.next, %L143 ], [ 0, %L128.lr.ph ]
  %69 = phi {} addrspace(10)* [ %"'ipc3", %L128.lr.ph ], [ %"'ipc5", %L143 ]
  %nodecayed.value_phi36132.in = phi {} addrspace(10)* [ %66, %L128.lr.ph ], [ %91, %L143 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4358
  %70 = add i64 %iv, 2, !dbg !4358
  %71 = shl i64 %iv, 3, !dbg !4358
  %72 = mul i64 %unbox39.pre, %iv, !dbg !4358
  %73 = add i64 %unbox40.pre, %72, !dbg !4358
  %"'ipc6" = bitcast {} addrspace(10)* %69 to double addrspace(13)* addrspace(10)*, !dbg !4358
  %74 = bitcast {} addrspace(10)* %nodecayed.value_phi36132.in to double addrspace(13)* addrspace(10)*, !dbg !4358
  %"'ipc7" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc6" to double addrspace(13)* addrspace(11)*, !dbg !4358
  %75 = addrspacecast double addrspace(13)* addrspace(10)* %74 to double addrspace(13)* addrspace(11)*, !dbg !4358
  %"'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc7", align 8, !dbg !4358, !alias.scope !4359, !noalias !4362
  %76 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %75, align 8, !dbg !4358, !alias.scope !4362, !noalias !4359
  %77 = bitcast double addrspace(13)* %76 to i8 addrspace(13)*, !dbg !4358
  %78 = getelementptr i8, i8 addrspace(13)* %77, i64 %71, !dbg !4358
  %79 = bitcast i8 addrspace(13)* %78 to double addrspace(13)*, !dbg !4358
  %80 = add i64 %73, -1, !dbg !4358
  %inbounds = icmp ult i64 %80, %arraylen5, !dbg !4358
  br i1 %inbounds, label %idxend57, label %oob, !dbg !4358

L143:                                             ; preds = %idxend57
  %81 = add nsw i64 %70, -1, !dbg !4364
  %82 = mul i64 %81, %unbox39.pre, !dbg !4340
  %83 = add i64 %82, %unbox40.pre, !dbg !4348
  %84 = icmp sle i64 %83, %unbox42.pre, !dbg !4349
  %85 = icmp sle i64 %unbox40.pre, %83, !dbg !4353
  %86 = and i1 %84, %85, !dbg !4369
  %87 = icmp sle i64 %83, %unbox40.pre, !dbg !4349
  %88 = icmp sle i64 %unbox42.pre, %83, !dbg !4353
  %89 = and i1 %87, %88, !dbg !4369
  %.v = select i1 %59, i1 %89, i1 %86, !dbg !4355
  %"'ipc4" = bitcast double addrspace(13)* addrspace(10)* %"'ipc2" to double addrspace(10)*, !dbg !4356
  %90 = bitcast double addrspace(13)* addrspace(10)* %62 to double addrspace(10)*, !dbg !4356
  %"'ipc5" = bitcast double addrspace(10)* %"'ipc4" to {} addrspace(10)*, !dbg !4356
  %91 = bitcast double addrspace(10)* %90 to {} addrspace(10)*, !dbg !4356
  br i1 %.v, label %L128, label %L125.loopexit, !dbg !4356

L160.loopexit:                                    ; preds = %idxend57
  br label %L160, !dbg !4370

L160:                                             ; preds = %L160.loopexit, %L67
  %92 = getelementptr inbounds { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %1, i32 0, i32 1, !dbg !4370
  store {} addrspace(10)* %34, {} addrspace(10)** %92, align 8, !dbg !4370
  %93 = getelementptr inbounds { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %1, i32 0, i32 2, !dbg !4370
  store {} addrspace(10)* %26, {} addrspace(10)** %93, align 8, !dbg !4370
  %94 = load { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %1, align 8, !dbg !4370
  ret { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* } %94, !dbg !4370

oob:                                              ; preds = %L128
  %errorbox = alloca i64, align 8, !dbg !4358
  store i64 %73, i64* %errorbox, align 8, !dbg !4358, !noalias !4331
  %95 = addrspacecast {} addrspace(10)* %34 to {} addrspace(12)*, !dbg !4358
  call void @ijl_bounds_error_ints({} addrspace(12)* %95, i64* nonnull align 8 %errorbox, i64 1) #61, !dbg !4358
  unreachable, !dbg !4358

idxend57:                                         ; preds = %L128
  %value_phi36132 = load double, double addrspace(13)* %79, align 8, !dbg !4371, !tbaa !269, !alias.scope !4372, !noalias !4375
  %"arrayptr50101'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc14", align 8, !dbg !4358, !tbaa !73, !alias.scope !4307, !noalias !4310, !nonnull !68
  %arrayptr50101 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %64, align 8, !dbg !4358, !tbaa !73, !invariant.load !68, !alias.scope !4311, !noalias !4299, !nonnull !68
  %96 = getelementptr inbounds double, double addrspace(13)* %arrayptr50101, i64 %80, !dbg !4358
  %arrayref51 = load double, double addrspace(13)* %96, align 8, !dbg !4358, !tbaa !269, !alias.scope !4377, !noalias !4380
  %97 = fadd double %value_phi36132, %arrayref51, !dbg !4382
  store double %97, double addrspace(13)* %96, align 8, !dbg !4383, !tbaa !269, !alias.scope !4377, !noalias !4384
  %exitcond.not = icmp eq i64 %70, %65, !dbg !4385
  br i1 %exitcond.not, label %L160.loopexit, label %L143, !dbg !4366
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia__diagm_2062({ i64, {} addrspace(10)* } addrspace(11)* nocapture readonly align 8 dereferenceable(16) %0, { i64, {} addrspace(10)* } addrspace(11)* nocapture align 8 %"'", { {} addrspace(10)*, i64, i8*, i64, i64 } %tapeArg) unnamed_addr #60 !dbg !4387 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %1 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %1, align 8
  %"value_phi36132'de" = alloca double, align 8
  %2 = getelementptr double, double* %"value_phi36132'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"arrayref51'de" = alloca double, align 8
  %3 = getelementptr double, double* %"arrayref51'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %4 = extractvalue { {} addrspace(10)*, i64, i8*, i64, i64 } %tapeArg, 2
  %5 = bitcast i8* %4 to [3 x i64]*, !enzyme_caststack !68
  %6 = call {}*** @julia.get_pgcstack() #61
  %unbox.elt = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %0, i64 0, i32 0
  %unbox.unpack = load i64, i64 addrspace(11)* %unbox.elt, align 8, !tbaa !73, !alias.scope !4388, !noalias !4391
  %"unbox.elt85'ipg" = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %"'", i64 0, i32 1
  %unbox.elt85 = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* } addrspace(11)* %0, i64 0, i32 1
  %"unbox.unpack86'ipl" = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"unbox.elt85'ipg", align 8, !tbaa !73, !alias.scope !4393, !noalias !4394
  %unbox.unpack86 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %unbox.elt85, align 8, !tbaa !73, !alias.scope !4388, !noalias !4391
  %7 = extractvalue { {} addrspace(10)*, i64, i8*, i64, i64 } %tapeArg, 1, !dbg !4395
  %8 = extractvalue { {} addrspace(10)*, i64, i8*, i64, i64 } %tapeArg, 0, !dbg !4410
  %arraylen5 = extractvalue { {} addrspace(10)*, i64, i8*, i64, i64 } %tapeArg, 3, !dbg !4414
  %.not = icmp eq i64 %arraylen5, 0, !dbg !4414
  br i1 %.not, label %L47, label %top.L22_crit_edge, !dbg !4418

top.L22_crit_edge:                                ; preds = %top
  %"'ipc" = bitcast {} addrspace(10)* %8 to i8 addrspace(13)* addrspace(10)*, !dbg !4420
  %"'ipc16" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc" to i8 addrspace(13)* addrspace(11)*, !dbg !4420
  %"arrayptr96.pre134'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc16", align 8, !dbg !4420, !tbaa !73, !alias.scope !4422, !noalias !4425
  %9 = shl nuw i64 %arraylen5, 3, !dbg !4418
  br label %L47, !dbg !4427

L47:                                              ; preds = %top.L22_crit_edge, %top
  %10 = icmp sgt i64 %unbox.unpack, 0, !dbg !4430
  br i1 %10, label %L59, label %L52, !dbg !4431

L52:                                              ; preds = %L47
  br label %L67, !dbg !4432

L59:                                              ; preds = %L47
  br label %L67, !dbg !4432

L67:                                              ; preds = %L59, %L52
  %arraylen23 = extractvalue { {} addrspace(10)*, i64, i8*, i64, i64 } %tapeArg, 4, !dbg !4434
  %.not99 = icmp eq i64 %arraylen23, 0, !dbg !4434
  br i1 %.not99, label %L160, label %L87.L98_crit_edge, !dbg !4436

L87.L98_crit_edge:                                ; preds = %L67
  %.phi.trans.insert112 = getelementptr inbounds [3 x i64], [3 x i64]* %5, i64 0, i64 1
  %unbox39.pre = load i64, i64* %.phi.trans.insert112, align 8, !dbg !4441, !tbaa !133, !alias.scope !4444, !noalias !4447, !invariant.group !4449
  %.phi.trans.insert113 = getelementptr inbounds [3 x i64], [3 x i64]* %5, i64 0, i64 0
  %unbox40.pre = load i64, i64* %.phi.trans.insert113, align 8, !dbg !4450, !tbaa !133, !alias.scope !4444, !noalias !4447, !invariant.group !4451
  br i1 true, label %L128.lr.ph, label %L125, !dbg !4452

L128.lr.ph:                                       ; preds = %L87.L98_crit_edge
  %"'ipc45" = bitcast {} addrspace(10)* %"unbox.unpack86'ipl" to double addrspace(13)* addrspace(10)*, !dbg !4453
  %11 = bitcast {} addrspace(10)* %unbox.unpack86 to double addrspace(13)* addrspace(10)*, !dbg !4453
  %"'ipc70" = bitcast {} addrspace(10)* %8 to double addrspace(13)* addrspace(10)*
  %"'ipc71" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc70" to double addrspace(13)* addrspace(11)*
  %12 = add nuw nsw i64 %arraylen23, 1, !dbg !4452
  %"'ipc46" = bitcast double addrspace(13)* addrspace(10)* %"'ipc45" to {} addrspace(10)*, !dbg !4452
  %13 = bitcast double addrspace(13)* addrspace(10)* %11 to {} addrspace(10)*, !dbg !4452
  %14 = add nsw i64 %arraylen23, -1, !dbg !4452
  br label %L128, !dbg !4452

L125.loopexit:                                    ; preds = %L143
  unreachable

L125:                                             ; preds = %L87.L98_crit_edge
  unreachable

L128:                                             ; preds = %L143, %L128.lr.ph
  %iv = phi i64 [ %iv.next, %L143 ], [ 0, %L128.lr.ph ]
  %15 = phi {} addrspace(10)* [ %"'ipc46", %L128.lr.ph ], [ %"'ipc48", %L143 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4454
  %16 = add i64 %iv, 2, !dbg !4454
  %17 = shl i64 %iv, 3, !dbg !4454
  %18 = mul i64 %unbox39.pre, %iv, !dbg !4454
  %19 = add i64 %unbox40.pre, %18, !dbg !4454
  %"'ipc49" = bitcast {} addrspace(10)* %15 to double addrspace(13)* addrspace(10)*, !dbg !4454
  %"'ipc50" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc49" to double addrspace(13)* addrspace(11)*, !dbg !4454
  %"'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc50", align 8, !dbg !4454, !alias.scope !4455, !noalias !4458, !invariant.group !4460
  %"'ipc77" = bitcast double addrspace(13)* %"'ipl" to i8 addrspace(13)*, !dbg !4454
  %"'ipg78" = getelementptr i8, i8 addrspace(13)* %"'ipc77", i64 %17, !dbg !4454
  %"'ipc79" = bitcast i8 addrspace(13)* %"'ipg78" to double addrspace(13)*, !dbg !4454
  %20 = add i64 %19, -1, !dbg !4454
  br i1 true, label %idxend57, label %oob, !dbg !4454

L143:                                             ; preds = %idxend57
  %"'ipc47" = bitcast double addrspace(13)* addrspace(10)* %"'ipc45" to double addrspace(10)*, !dbg !4452
  %21 = bitcast double addrspace(13)* addrspace(10)* %11 to double addrspace(10)*, !dbg !4452
  %"'ipc48" = bitcast double addrspace(10)* %"'ipc47" to {} addrspace(10)*, !dbg !4452
  %22 = bitcast double addrspace(10)* %21 to {} addrspace(10)*, !dbg !4452
  br i1 true, label %L128, label %L125.loopexit, !dbg !4452

L160.loopexit:                                    ; preds = %idxend57
  br label %L160, !dbg !4461

L160:                                             ; preds = %L160.loopexit, %L67
  br label %invertL160, !dbg !4461

oob:                                              ; preds = %L128
  unreachable

idxend57:                                         ; preds = %L128
  %"arrayptr50101'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc71", align 8, !dbg !4454, !tbaa !73, !alias.scope !4422, !noalias !4425, !nonnull !68
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr50101'ipl", i64 %20, !dbg !4454
  %exitcond.not = icmp eq i64 %16, %12, !dbg !4462
  br i1 %exitcond.not, label %L160.loopexit, label %L143, !dbg !4464

inverttop:                                        ; preds = %invertL47, %inverttop.L22_crit_edge
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  call void @free(i8* %4)
  ret void

inverttop.L22_crit_edge:                          ; preds = %invertL47
  %_unwrap = shl nuw i64 %arraylen5, 3, !dbg !4420
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %8 to i8 addrspace(13)* addrspace(10)*, !dbg !4420
  %"'ipc16_unwrap" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc_unwrap" to i8 addrspace(13)* addrspace(11)*, !dbg !4420
  %"arrayptr96.pre134'il_phi_unwrap" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc16_unwrap", align 8, !dbg !4420, !tbaa !73, !alias.scope !4422, !noalias !4425
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %"arrayptr96.pre134'il_phi_unwrap", i8 noundef 0, i64 %_unwrap, i1 noundef false) #61, !dbg !4420, !tbaa !269, !noalias !4187
  br label %inverttop

invertL47:                                        ; preds = %invertL59, %invertL52
  br i1 %.not, label %inverttop, label %inverttop.L22_crit_edge

invertL52:                                        ; preds = %invertL67
  br label %invertL47

invertL59:                                        ; preds = %invertL67
  br label %invertL47

invertL67:                                        ; preds = %invertL160, %invertL87.L98_crit_edge
  br i1 %10, label %invertL59, label %invertL52

invertL87.L98_crit_edge:                          ; preds = %invertL128.lr.ph
  br label %invertL67

invertL128.lr.ph:                                 ; preds = %invertL128
  br label %invertL87.L98_crit_edge

invertL128:                                       ; preds = %invertidxend57_phimerge
  %23 = load i64, i64* %"iv'ac", align 8
  %24 = icmp eq i64 %23, 0
  %25 = xor i1 %24, true
  br i1 %24, label %invertL128.lr.ph, label %incinvertL128

incinvertL128:                                    ; preds = %invertL128
  %26 = load i64, i64* %"iv'ac", align 8
  %27 = add nsw i64 %26, -1
  store i64 %27, i64* %"iv'ac", align 8
  br label %invertL143

invertL143:                                       ; preds = %incinvertL128
  br label %invertidxend57

invertL160.loopexit:                              ; preds = %invertL160
  %_unwrap68 = add nsw i64 %arraylen23, -1
  br label %mergeinvertL128_L160.loopexit

mergeinvertL128_L160.loopexit:                    ; preds = %invertL160.loopexit
  store i64 %_unwrap68, i64* %"iv'ac", align 8
  br label %invertidxend57

invertL160:                                       ; preds = %L160
  br i1 %.not99, label %invertL67, label %invertL160.loopexit

invertidxend57:                                   ; preds = %mergeinvertL128_L160.loopexit, %invertL143
  %28 = load i64, i64* %"iv'ac", align 8, !dbg !4467
  %"'ipc70_unwrap" = bitcast {} addrspace(10)* %8 to double addrspace(13)* addrspace(10)*, !dbg !4467
  %"'ipc71_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc70_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4467
  %"arrayptr50101'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc71_unwrap", align 8, !dbg !4454, !tbaa !73, !alias.scope !4422, !noalias !4425, !nonnull !68
  %.phi.trans.insert113_unwrap = getelementptr inbounds [3 x i64], [3 x i64]* %5, i64 0, i64 0, !dbg !4467
  %unbox40.pre_unwrap = load i64, i64* %.phi.trans.insert113_unwrap, align 8, !dbg !4450, !tbaa !133, !alias.scope !4444, !noalias !4447, !invariant.group !4451
  %.phi.trans.insert112_unwrap = getelementptr inbounds [3 x i64], [3 x i64]* %5, i64 0, i64 1, !dbg !4467
  %unbox39.pre_unwrap = load i64, i64* %.phi.trans.insert112_unwrap, align 8, !dbg !4441, !tbaa !133, !alias.scope !4444, !noalias !4447, !invariant.group !4449
  %_unwrap72 = mul i64 %unbox39.pre_unwrap, %28, !dbg !4467
  %_unwrap73 = add i64 %unbox40.pre_unwrap, %_unwrap72, !dbg !4467
  %_unwrap74 = add i64 %_unwrap73, -1, !dbg !4467
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr50101'il_phi_unwrap", i64 %_unwrap74, !dbg !4467
  %29 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4467, !tbaa !269, !alias.scope !4468, !noalias !4471
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4467, !tbaa !269, !alias.scope !4468, !noalias !4471
  %30 = load double, double* %"'de", align 8, !dbg !4467
  %31 = fadd fast double %30, %29, !dbg !4467
  store double %31, double* %"'de", align 8, !dbg !4467
  %32 = load double, double* %"'de", align 8, !dbg !4473
  store double 0.000000e+00, double* %"'de", align 8, !dbg !4473
  %33 = load double, double* %"value_phi36132'de", align 8, !dbg !4473
  %34 = fadd fast double %33, %32, !dbg !4473
  store double %34, double* %"value_phi36132'de", align 8, !dbg !4473
  %35 = load double, double* %"arrayref51'de", align 8, !dbg !4473
  %36 = fadd fast double %35, %32, !dbg !4473
  store double %36, double* %"arrayref51'de", align 8, !dbg !4473
  %37 = load double, double* %"arrayref51'de", align 8, !dbg !4454
  store double 0.000000e+00, double* %"arrayref51'de", align 8, !dbg !4454
  %38 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4454, !tbaa !269, !alias.scope !4468, !noalias !4474
  %39 = fadd fast double %38, %37, !dbg !4454
  store double %39, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4454, !tbaa !269, !alias.scope !4468, !noalias !4474
  %40 = load double, double* %"value_phi36132'de", align 8, !dbg !4475
  store double 0.000000e+00, double* %"value_phi36132'de", align 8, !dbg !4475
  %41 = load i64, i64* %"iv'ac", align 8, !dbg !4475
  %"'ipc45_unwrap81" = bitcast {} addrspace(10)* %"unbox.unpack86'ipl" to double addrspace(13)* addrspace(10)*, !dbg !4475
  %"'ipc46_unwrap" = bitcast double addrspace(13)* addrspace(10)* %"'ipc45_unwrap81" to {} addrspace(10)*, !dbg !4475
  %42 = icmp ne i64 %41, 0, !dbg !4475
  br i1 %42, label %invertidxend57_phirc, label %invertidxend57_phirc80, !dbg !4475

invertidxend57_phirc:                             ; preds = %invertidxend57
  %43 = sub nuw i64 %41, 1
  %"'ipc45_unwrap" = bitcast {} addrspace(10)* %"unbox.unpack86'ipl" to double addrspace(13)* addrspace(10)*
  %"'ipc47_unwrap" = bitcast double addrspace(13)* addrspace(10)* %"'ipc45_unwrap" to double addrspace(10)*
  %"'ipc48_unwrap" = bitcast double addrspace(10)* %"'ipc47_unwrap" to {} addrspace(10)*
  br label %invertidxend57_phimerge

invertidxend57_phirc80:                           ; preds = %invertidxend57
  br label %invertidxend57_phimerge

invertidxend57_phimerge:                          ; preds = %invertidxend57_phirc80, %invertidxend57_phirc
  %44 = phi {} addrspace(10)* [ %"'ipc48_unwrap", %invertidxend57_phirc ], [ %"'ipc46_unwrap", %invertidxend57_phirc80 ], !dbg !4475
  %"'ipc49_unwrap" = bitcast {} addrspace(10)* %44 to double addrspace(13)* addrspace(10)*, !dbg !4475
  %"'ipc50_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc49_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4475
  %"'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc50_unwrap", align 8, !dbg !4454, !alias.scope !4455, !noalias !4458, !invariant.group !4460
  %"'ipc77_unwrap" = bitcast double addrspace(13)* %"'ipl_unwrap" to i8 addrspace(13)*, !dbg !4475
  %_unwrap82 = shl i64 %41, 3, !dbg !4475
  %"'ipg78_unwrap" = getelementptr i8, i8 addrspace(13)* %"'ipc77_unwrap", i64 %_unwrap82, !dbg !4475
  %"'ipc79_unwrap" = bitcast i8 addrspace(13)* %"'ipg78_unwrap" to double addrspace(13)*, !dbg !4475
  %45 = load double, double addrspace(13)* %"'ipc79_unwrap", align 8, !dbg !4475, !tbaa !269, !alias.scope !4476, !noalias !4479
  %46 = fadd fast double %45, %40, !dbg !4475
  store double %46, double addrspace(13)* %"'ipc79_unwrap", align 8, !dbg !4475, !tbaa !269, !alias.scope !4476, !noalias !4479
  br label %invertL128
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia___2053({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1) unnamed_addr #61 !dbg !4524 {
top:
  %2 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !306
  %newstruct58 = bitcast i8* %2 to [2 x [1 x i64]]*, !enzyme_caststack !68
  %3 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !306
  %newstruct172 = bitcast i8* %3 to [2 x [1 x i64]]*, !enzyme_caststack !68
  %4 = call {}*** @julia.get_pgcstack() #62
  %ptls_field211 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field211 to i64***
  %ptls_load212213 = load i64**, i64*** %5, align 8, !tbaa !69
  %6 = getelementptr inbounds i64*, i64** %ptls_load212213, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #62, !dbg !4525
  fence syncscope("singlethread") seq_cst
  %7 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*, !dbg !4526
  %arraysize_ptr214 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 3, !dbg !4526
  %8 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr214 to i64 addrspace(10)*, !dbg !4526
  %9 = addrspacecast i64 addrspace(10)* %8 to i64 addrspace(11)*, !dbg !4526
  %arraysize = load i64, i64 addrspace(11)* %9, align 8, !dbg !4526, !tbaa !86, !range !87, !alias.scope !88, !noalias !92
  %arraysize_ptr2215 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 4, !dbg !4526
  %10 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr2215 to i64 addrspace(10)*, !dbg !4526
  %11 = addrspacecast i64 addrspace(10)* %10 to i64 addrspace(11)*, !dbg !4526
  %arraysize3 = load i64, i64 addrspace(11)* %11, align 16, !dbg !4526, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %12 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !4526
  %13 = addrspacecast {} addrspace(10)* addrspace(10)* %12 to {} addrspace(10)* addrspace(11)*, !dbg !4526
  %arraysize_ptr7 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %13, i64 3, !dbg !4526
  %14 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr7 to i64 addrspace(11)*, !dbg !4526
  %arraysize8 = load i64, i64 addrspace(11)* %14, align 8, !dbg !4526, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %arraysize_ptr9 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %13, i64 4, !dbg !4526
  %15 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr9 to i64 addrspace(11)*, !dbg !4526
  %arraysize10 = load i64, i64 addrspace(11)* %15, align 8, !dbg !4526, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %.not = icmp eq i64 %arraysize, %arraysize8, !dbg !4530
  br i1 %.not, label %pass18.1, label %L36, !dbg !4533

L36:                                              ; preds = %pass18.1, %top
  %value_phi15.lcssa279 = phi i64 [ 1, %top ], [ 2, %pass18.1 ]
  %current_task20216 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !4534
  %current_task20 = bitcast {}*** %current_task20216 to {}**, !dbg !4534
  %box = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task20, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5184880720 to {}*) to {} addrspace(10)*)) #63, !dbg !4534
  %16 = bitcast {} addrspace(10)* %box to i8 addrspace(10)*, !dbg !4534
  %newstruct6.sroa.0.0..sroa_cast = bitcast {} addrspace(10)* %box to i64 addrspace(10)*, !dbg !4534
  store i64 %arraysize, i64 addrspace(10)* %newstruct6.sroa.0.0..sroa_cast, align 8, !dbg !4534, !tbaa !86, !alias.scope !109, !noalias !4535
  %newstruct6.sroa.2.0..sroa_idx = getelementptr inbounds i8, i8 addrspace(10)* %16, i64 8, !dbg !4534
  %newstruct6.sroa.2.0..sroa_cast = bitcast i8 addrspace(10)* %newstruct6.sroa.2.0..sroa_idx to i64 addrspace(10)*, !dbg !4534
  store i64 %arraysize3, i64 addrspace(10)* %newstruct6.sroa.2.0..sroa_cast, align 8, !dbg !4534, !tbaa !86, !alias.scope !109, !noalias !4535
  %box22 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task20, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5184880720 to {}*) to {} addrspace(10)*)) #63, !dbg !4534
  %17 = bitcast {} addrspace(10)* %box22 to i8 addrspace(10)*, !dbg !4534
  %newstruct14.sroa.0.0..sroa_cast = bitcast {} addrspace(10)* %box22 to i64 addrspace(10)*, !dbg !4534
  store i64 %arraysize8, i64 addrspace(10)* %newstruct14.sroa.0.0..sroa_cast, align 8, !dbg !4534, !tbaa !86, !alias.scope !109, !noalias !4535
  %newstruct14.sroa.3.0..sroa_idx = getelementptr inbounds i8, i8 addrspace(10)* %17, i64 8, !dbg !4534
  %newstruct14.sroa.3.0..sroa_cast = bitcast i8 addrspace(10)* %newstruct14.sroa.3.0..sroa_idx to i64 addrspace(10)*, !dbg !4534
  store i64 %arraysize10, i64 addrspace(10)* %newstruct14.sroa.3.0..sroa_cast, align 8, !dbg !4534, !tbaa !86, !alias.scope !109, !noalias !4535
  %18 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %value_phi15.lcssa279) #64, !dbg !4534
  %19 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5184898928 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5139351968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972800 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972768 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box22, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972736 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %18) #65, !dbg !4534
  %box24 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task20, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #63, !dbg !4534
  %20 = bitcast {} addrspace(10)* %box24 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !4534
  %21 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %20, i64 0, i64 0, !dbg !4534
  store {} addrspace(10)* %19, {} addrspace(10)* addrspace(10)* %21, align 8, !dbg !4534, !tbaa !113, !alias.scope !117, !noalias !4538
  %22 = addrspacecast {} addrspace(10)* %box24 to {} addrspace(12)*, !dbg !4534
  call void @ijl_throw({} addrspace(12)* %22) #62, !dbg !4534
  unreachable, !dbg !4534

pass18.1:                                         ; preds = %top
  %.not.1 = icmp eq i64 %arraysize3, %arraysize10, !dbg !4530
  br i1 %.not.1, label %L117, label %L36, !dbg !4533

L117:                                             ; preds = %pass18.1
  %memcpy_refined_dst = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct58, i64 0, i64 0, i64 0, !dbg !4539
  store i64 %arraysize, i64* %memcpy_refined_dst, align 8, !dbg !4539, !tbaa !133, !alias.scope !135, !noalias !4546
  %memcpy_refined_dst60 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct58, i64 0, i64 1, i64 0, !dbg !4539
  store i64 %arraysize3, i64* %memcpy_refined_dst60, align 8, !dbg !4539, !tbaa !133, !alias.scope !135, !noalias !4546
  %23 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6189285392 to {}*) to {} addrspace(10)*), i64 %arraysize, i64 %arraysize3) #64, !dbg !4547
  %24 = bitcast {} addrspace(10)* %23 to {} addrspace(10)* addrspace(10)*, !dbg !4555
  %25 = addrspacecast {} addrspace(10)* addrspace(10)* %24 to {} addrspace(10)* addrspace(11)*, !dbg !4555
  %arraysize_ptr69 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 3, !dbg !4555
  %26 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr69 to i64 addrspace(11)*, !dbg !4555
  %arraysize70 = load i64, i64 addrspace(11)* %26, align 8, !dbg !4555, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %.not222 = icmp eq i64 %arraysize70, %arraysize, !dbg !4559
  br i1 %.not222, label %L164, label %L153.L324_crit_edge, !dbg !4563

L153.L324_crit_edge:                              ; preds = %L117
  %arraysize_ptr166.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 4
  %.phi.trans.insert = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr166.phi.trans.insert to i64 addrspace(11)*
  %arraysize167.pre = load i64, i64 addrspace(11)* %.phi.trans.insert, align 8, !dbg !4555, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  br label %L324, !dbg !4563

L164:                                             ; preds = %L117
  %arraysize_ptr71 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 4, !dbg !4555
  %27 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr71 to i64 addrspace(11)*, !dbg !4555
  %arraysize72 = load i64, i64 addrspace(11)* %27, align 8, !dbg !4555, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %.not242 = icmp eq i64 %arraysize72, %arraysize3, !dbg !4564
  br i1 %.not242, label %L174, label %L324, !dbg !4557

L174:                                             ; preds = %L164
  %28 = addrspacecast {} addrspace(10)* %23 to {} addrspace(11)*, !dbg !4568
  %29 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !4568
  %.not223 = icmp eq {} addrspace(11)* %28, %29, !dbg !4568
  br i1 %.not223, label %L190, label %L177, !dbg !4568

L177:                                             ; preds = %L174
  %30 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %28) #66, !dbg !4573
  %31 = bitcast {}* %30 to i8**, !dbg !4573
  %arrayptr160 = load i8*, i8** %31, align 8, !dbg !4573, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68
  %32 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %29) #66, !dbg !4573
  %33 = bitcast {}* %32 to i8**, !dbg !4573
  %arrayptr162 = load i8*, i8** %33, align 8, !dbg !4573, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68
  %.not241.not = icmp eq i8* %arrayptr160, %arrayptr162, !dbg !4578
  br i1 %.not241.not, label %L185, label %L190, !dbg !4577

L185:                                             ; preds = %L177
  %34 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %0) #62, !dbg !4581
  %.pre = bitcast {} addrspace(10)* %34 to {} addrspace(10)* addrspace(10)*, !dbg !4583
  %arraysize_ptr77271.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %.pre, i64 3
  %.phi.trans.insert282 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr77271.phi.trans.insert to i64 addrspace(10)*
  %.phi.trans.insert283 = addrspacecast i64 addrspace(10)* %.phi.trans.insert282 to i64 addrspace(11)*
  %arraysize78.pre = load i64, i64 addrspace(11)* %.phi.trans.insert283, align 8, !dbg !4583, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %arraysize_ptr79272.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %.pre, i64 4
  %.phi.trans.insert285 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr79272.phi.trans.insert to i64 addrspace(10)*
  %.phi.trans.insert286 = addrspacecast i64 addrspace(10)* %.phi.trans.insert285 to i64 addrspace(11)*
  %arraysize80.pre = load i64, i64 addrspace(11)* %.phi.trans.insert286, align 8, !dbg !4583, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  br label %L190, !dbg !4587

L190:                                             ; preds = %L185, %L177, %L174
  %arraysize80 = phi i64 [ %arraysize80.pre, %L185 ], [ %arraysize3, %L174 ], [ %arraysize3, %L177 ], !dbg !4583
  %arraysize78 = phi i64 [ %arraysize78.pre, %L185 ], [ %arraysize, %L174 ], [ %arraysize, %L177 ], !dbg !4583
  %value_phi76 = phi {} addrspace(10)* [ %34, %L185 ], [ %0, %L174 ], [ %0, %L177 ]
  %.not229 = icmp eq i64 %arraysize80, 1, !dbg !4590
  %.not228 = icmp eq i64 %arraysize78, 1, !dbg !4595
  %35 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !4598
  %.not224 = icmp eq {} addrspace(11)* %28, %35, !dbg !4598
  br i1 %.not224, label %L220, label %L207, !dbg !4598

L207:                                             ; preds = %L190
  %36 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %28) #66, !dbg !4601
  %37 = bitcast {}* %36 to i8**, !dbg !4601
  %arrayptr155 = load i8*, i8** %37, align 8, !dbg !4601, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68
  %38 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %35) #66, !dbg !4601
  %39 = bitcast {}* %38 to i8**, !dbg !4601
  %arrayptr157 = load i8*, i8** %39, align 8, !dbg !4601, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68
  %.not240.not = icmp eq i8* %arrayptr155, %arrayptr157, !dbg !4606
  br i1 %.not240.not, label %L215, label %L220, !dbg !4605

L215:                                             ; preds = %L207
  %40 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %1) #62, !dbg !4609
  %.phi.trans.insert260 = bitcast {} addrspace(10)* %40 to {} addrspace(10)* addrspace(10)*
  %.phi.trans.insert261 = addrspacecast {} addrspace(10)* addrspace(10)* %.phi.trans.insert260 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr88.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert261, i64 4
  %.phi.trans.insert262 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr88.phi.trans.insert to i64 addrspace(11)*
  %arraysize89.pre = load i64, i64 addrspace(11)* %.phi.trans.insert262, align 8, !dbg !4611, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %arraysize_ptr86.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert261, i64 3
  %.phi.trans.insert264 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr86.phi.trans.insert to i64 addrspace(11)*
  %arraysize87.pre = load i64, i64 addrspace(11)* %.phi.trans.insert264, align 8, !dbg !4611, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  br label %L220, !dbg !4587

L220:                                             ; preds = %L215, %L207, %L190
  %arraysize87 = phi i64 [ %arraysize, %L190 ], [ %arraysize87.pre, %L215 ], [ %arraysize, %L207 ], !dbg !4611
  %arraysize89 = phi i64 [ %arraysize3, %L190 ], [ %arraysize89.pre, %L215 ], [ %arraysize3, %L207 ], !dbg !4611
  %value_phi85 = phi {} addrspace(10)* [ %1, %L190 ], [ %40, %L215 ], [ %1, %L207 ]
  %.not232 = icmp eq i64 %arraysize89, 1, !dbg !4615
  %.not231 = icmp eq i64 %arraysize87, 1, !dbg !4620
  %.not225.not = icmp eq i64 %arraysize3, 0, !dbg !4623
  br i1 %.not225.not, label %L397, label %L251.preheader, !dbg !4627

L251.preheader:                                   ; preds = %L220
  %.not226 = icmp eq i64 %arraysize, 0
  %41 = bitcast {} addrspace(10)* %value_phi76 to double addrspace(13)* addrspace(10)*
  %42 = addrspacecast double addrspace(13)* addrspace(10)* %41 to double addrspace(13)* addrspace(11)*
  %43 = bitcast {} addrspace(10)* %value_phi85 to double addrspace(13)* addrspace(10)*
  %44 = addrspacecast double addrspace(13)* addrspace(10)* %43 to double addrspace(13)* addrspace(11)*
  %45 = bitcast {} addrspace(10)* %23 to double addrspace(13)* addrspace(10)*
  %46 = addrspacecast double addrspace(13)* addrspace(10)* %45 to double addrspace(13)* addrspace(11)*
  br label %L251, !dbg !4628

L251:                                             ; preds = %L302, %L251.preheader
  %iv = phi i64 [ %iv.next, %L302 ], [ 0, %L251.preheader ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4628
  br i1 %.not226, label %L302, label %L298.lr.ph, !dbg !4628

L298.lr.ph:                                       ; preds = %L251
  %arrayptr230 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %42, align 8, !tbaa !73, !invariant.load !68, !alias.scope !4629, !noalias !97, !nonnull !68
  %value_phi99.op = add nsw i64 %iv.next, -1
  %47 = select i1 %.not229, i64 0, i64 %value_phi99.op
  %48 = mul i64 %47, %arraysize78
  %arrayptr115234 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %44, align 8, !tbaa !73, !invariant.load !68, !alias.scope !4629, !noalias !97, !nonnull !68
  %49 = select i1 %.not232, i64 0, i64 %value_phi99.op
  %50 = mul i64 %49, %arraysize87
  %51 = mul i64 %value_phi99.op, %arraysize
  %arrayptr121235 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %46, align 8, !tbaa !73, !invariant.load !68, !alias.scope !4629, !noalias !97, !nonnull !68
  br label %L298, !dbg !4630

L298:                                             ; preds = %L298, %L298.lr.ph
  %iv1 = phi i64 [ %iv.next2, %L298 ], [ 0, %L298.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !4631
  %52 = select i1 %.not228, i64 0, i64 %iv1, !dbg !4631
  %53 = add i64 %52, %48, !dbg !4631
  %54 = getelementptr inbounds double, double addrspace(13)* %arrayptr230, i64 %53, !dbg !4631
  %arrayref = load double, double addrspace(13)* %54, align 8, !dbg !4631, !tbaa !269, !alias.scope !117, !noalias !271
  %55 = select i1 %.not231, i64 0, i64 %iv1, !dbg !4639
  %56 = add i64 %55, %50, !dbg !4639
  %57 = getelementptr inbounds double, double addrspace(13)* %arrayptr115234, i64 %56, !dbg !4639
  %arrayref116 = load double, double addrspace(13)* %57, align 8, !dbg !4639, !tbaa !269, !alias.scope !117, !noalias !271
  %58 = fadd double %arrayref, %arrayref116, !dbg !4643
  %59 = add i64 %iv1, %51, !dbg !4646
  %60 = getelementptr inbounds double, double addrspace(13)* %arrayptr121235, i64 %59, !dbg !4646
  store double %58, double addrspace(13)* %60, align 8, !dbg !4646, !tbaa !269, !alias.scope !117, !noalias !4538
  %exitcond.not = icmp eq i64 %iv.next2, %arraysize, !dbg !4648
  br i1 %exitcond.not, label %L302.loopexit, label %L298, !dbg !4630, !llvm.loop !4649

L302.loopexit:                                    ; preds = %L298
  br label %L302, !dbg !4650

L302:                                             ; preds = %L302.loopexit, %L251
  %61 = add nuw nsw i64 %iv.next, 1, !dbg !4650
  %exitcond281.not = icmp eq i64 %iv.next, %arraysize3, !dbg !4653
  br i1 %exitcond281.not, label %L397.loopexit, label %L251, !dbg !4588

L324:                                             ; preds = %L164, %L153.L324_crit_edge
  %arraysize167 = phi i64 [ %arraysize167.pre, %L153.L324_crit_edge ], [ %arraysize72, %L164 ], !dbg !4555
  %62 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct172, i64 0, i64 0, i64 0, !dbg !4654
  store i64 %arraysize70, i64* %62, align 8, !dbg !4654, !tbaa !133, !alias.scope !135, !noalias !4546
  %63 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct172, i64 0, i64 1, i64 0, !dbg !4654
  store i64 %arraysize167, i64* %63, align 8, !dbg !4654, !tbaa !133, !alias.scope !135, !noalias !4546
  %64 = addrspacecast [2 x [1 x i64]]* %newstruct172 to [2 x [1 x i64]] addrspace(11)*, !dbg !4557
  %65 = addrspacecast [2 x [1 x i64]]* %newstruct58 to [2 x [1 x i64]] addrspace(11)*, !dbg !4557
  call fastcc void @julia_throwdm_1974([2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %64, [2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %65) #67, !dbg !4557
  unreachable, !dbg !4557

L397.loopexit:                                    ; preds = %L302
  br label %L397, !dbg !4545

L397:                                             ; preds = %L397.loopexit, %L220
  ret {} addrspace(10)* %23, !dbg !4545
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2053({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1") unnamed_addr #61 !dbg !4658 {
top:
  %2 = alloca { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %3 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 0
  %4 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i64 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i64 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %newstruct172 = alloca [2 x [1 x i64]], i64 1, align 8
  %10 = bitcast [2 x [1 x i64]]* %newstruct172 to i8*
  %newstruct58 = alloca [2 x [1 x i64]], i64 1, align 8
  %11 = bitcast [2 x [1 x i64]]* %newstruct58 to i8*
  %_cache = alloca i64*, align 8
  %_cache12 = alloca i64*, align 8
  %12 = bitcast i8* %11 to [2 x [1 x i64]]*, !enzyme_caststack !68
  %13 = bitcast i8* %10 to [2 x [1 x i64]]*, !enzyme_caststack !68
  %14 = call {}*** @julia.get_pgcstack() #62
  %ptls_field211 = getelementptr inbounds {}**, {}*** %14, i64 2
  %15 = bitcast {}*** %ptls_field211 to i64***
  %ptls_load212213 = load i64**, i64*** %15, align 8, !tbaa !69, !alias.scope !4659, !noalias !4662
  %16 = getelementptr inbounds i64*, i64** %ptls_load212213, i64 2
  %safepoint = load i64*, i64** %16, align 8, !tbaa !73, !invariant.load !68, !alias.scope !4664, !noalias !4667
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #62, !dbg !4669
  fence syncscope("singlethread") seq_cst
  %17 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*, !dbg !4670
  %arraysize_ptr214 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %17, i64 3, !dbg !4670
  %18 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr214 to i64 addrspace(10)*, !dbg !4670
  %19 = addrspacecast i64 addrspace(10)* %18 to i64 addrspace(11)*, !dbg !4670
  %arraysize = load i64, i64 addrspace(11)* %19, align 8, !dbg !4670, !tbaa !86, !range !87, !alias.scope !4674, !noalias !4677
  %20 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 6, !dbg !4670
  store i64 %arraysize, i64* %20, align 8, !dbg !4670
  %arraysize_ptr2215 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %17, i64 4, !dbg !4670
  %21 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr2215 to i64 addrspace(10)*, !dbg !4670
  %22 = addrspacecast i64 addrspace(10)* %21 to i64 addrspace(11)*, !dbg !4670
  %arraysize3 = load i64, i64 addrspace(11)* %22, align 16, !dbg !4670, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !4679, !noalias !4680
  %23 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 7, !dbg !4670
  store i64 %arraysize3, i64* %23, align 8, !dbg !4670
  %24 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !4670
  %25 = addrspacecast {} addrspace(10)* addrspace(10)* %24 to {} addrspace(10)* addrspace(11)*, !dbg !4670
  %arraysize_ptr7 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 3, !dbg !4670
  %26 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr7 to i64 addrspace(11)*, !dbg !4670
  %arraysize8 = load i64, i64 addrspace(11)* %26, align 8, !dbg !4670, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !4681, !noalias !4684
  %arraysize_ptr9 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 4, !dbg !4670
  %27 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr9 to i64 addrspace(11)*, !dbg !4670
  %arraysize10 = load i64, i64 addrspace(11)* %27, align 8, !dbg !4670, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !4681, !noalias !4684
  %.not = icmp eq i64 %arraysize, %arraysize8, !dbg !4686
  br i1 %.not, label %pass18.1, label %L36, !dbg !4689

L36:                                              ; preds = %pass18.1, %top
  %value_phi15.lcssa279 = phi i64 [ 1, %top ], [ 2, %pass18.1 ]
  %current_task20216 = getelementptr inbounds {}**, {}*** %14, i64 -14, !dbg !4690
  %current_task20 = bitcast {}*** %current_task20216 to {}**, !dbg !4690
  %box = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task20, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5184880720 to {}*) to {} addrspace(10)*)) #63, !dbg !4690
  %28 = bitcast {} addrspace(10)* %box to i8 addrspace(10)*, !dbg !4690
  %newstruct6.sroa.0.0..sroa_cast = bitcast {} addrspace(10)* %box to i64 addrspace(10)*, !dbg !4690
  store i64 %arraysize, i64 addrspace(10)* %newstruct6.sroa.0.0..sroa_cast, align 8, !dbg !4690, !tbaa !86, !alias.scope !109, !noalias !4691
  %newstruct6.sroa.2.0..sroa_idx = getelementptr inbounds i8, i8 addrspace(10)* %28, i64 8, !dbg !4690
  %newstruct6.sroa.2.0..sroa_cast = bitcast i8 addrspace(10)* %newstruct6.sroa.2.0..sroa_idx to i64 addrspace(10)*, !dbg !4690
  store i64 %arraysize3, i64 addrspace(10)* %newstruct6.sroa.2.0..sroa_cast, align 8, !dbg !4690, !tbaa !86, !alias.scope !109, !noalias !4691
  %box22 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task20, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5184880720 to {}*) to {} addrspace(10)*)) #63, !dbg !4690
  %29 = bitcast {} addrspace(10)* %box22 to i8 addrspace(10)*, !dbg !4690
  %newstruct14.sroa.0.0..sroa_cast = bitcast {} addrspace(10)* %box22 to i64 addrspace(10)*, !dbg !4690
  store i64 %arraysize8, i64 addrspace(10)* %newstruct14.sroa.0.0..sroa_cast, align 8, !dbg !4690, !tbaa !86, !alias.scope !109, !noalias !4691
  %newstruct14.sroa.3.0..sroa_idx = getelementptr inbounds i8, i8 addrspace(10)* %29, i64 8, !dbg !4690
  %newstruct14.sroa.3.0..sroa_cast = bitcast i8 addrspace(10)* %newstruct14.sroa.3.0..sroa_idx to i64 addrspace(10)*, !dbg !4690
  store i64 %arraysize10, i64 addrspace(10)* %newstruct14.sroa.3.0..sroa_cast, align 8, !dbg !4690, !tbaa !86, !alias.scope !109, !noalias !4691
  %30 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %value_phi15.lcssa279) #64, !dbg !4690
  %31 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5184898928 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5139351968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972800 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972768 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box22, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972736 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %30) #65, !dbg !4690
  %box24 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task20, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #63, !dbg !4690
  %32 = bitcast {} addrspace(10)* %box24 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !4690
  %33 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %32, i64 0, i64 0, !dbg !4690
  store {} addrspace(10)* %31, {} addrspace(10)* addrspace(10)* %33, align 8, !dbg !4690, !tbaa !113, !alias.scope !117, !noalias !4694
  %34 = addrspacecast {} addrspace(10)* %box24 to {} addrspace(12)*, !dbg !4690
  call void @ijl_throw({} addrspace(12)* %34) #62, !dbg !4690
  unreachable, !dbg !4690

pass18.1:                                         ; preds = %top
  %.not.1 = icmp eq i64 %arraysize3, %arraysize10, !dbg !4686
  br i1 %.not.1, label %L117, label %L36, !dbg !4689

L117:                                             ; preds = %pass18.1
  %memcpy_refined_dst = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %12, i64 0, i64 0, i64 0, !dbg !4695
  store i64 %arraysize, i64* %memcpy_refined_dst, align 8, !dbg !4695, !tbaa !133, !alias.scope !135, !noalias !4702
  %memcpy_refined_dst60 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %12, i64 0, i64 1, i64 0, !dbg !4695
  store i64 %arraysize3, i64* %memcpy_refined_dst60, align 8, !dbg !4695, !tbaa !133, !alias.scope !135, !noalias !4702
  %35 = call {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6189285392 to {}*) to {} addrspace(10)*), i64 %arraysize, i64 %arraysize3), !dbg !4703
  %36 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 0, !dbg !4703
  store {} addrspace(10)* %35, {} addrspace(10)** %36, align 8, !dbg !4703
  %37 = bitcast {} addrspace(10)* %35 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4703
  %38 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %37, i32 0, i32 1, !dbg !4703
  %39 = load i64, i64 addrspace(10)* %38, align 8, !dbg !4703
  %40 = mul i64 %39, 8, !dbg !4703
  %41 = bitcast {} addrspace(10)* %35 to i8 addrspace(13)* addrspace(10)*, !dbg !4703
  %42 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %41, align 8, !dbg !4703
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %42, i8 0, i64 %40, i1 false), !dbg !4703
  %43 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6189285392 to {}*) to {} addrspace(10)*), i64 %arraysize, i64 %arraysize3) #64, !dbg !4703
  %44 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 1, !dbg !4711
  store {} addrspace(10)* %43, {} addrspace(10)** %44, align 8, !dbg !4711
  %45 = bitcast {} addrspace(10)* %43 to {} addrspace(10)* addrspace(10)*, !dbg !4711
  %46 = addrspacecast {} addrspace(10)* addrspace(10)* %45 to {} addrspace(10)* addrspace(11)*, !dbg !4711
  %arraysize_ptr69 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %46, i64 3, !dbg !4711
  %47 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr69 to i64 addrspace(11)*, !dbg !4711
  %arraysize70 = load i64, i64 addrspace(11)* %47, align 8, !dbg !4711, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !4715, !noalias !4718
  %.not222 = icmp eq i64 %arraysize70, %arraysize, !dbg !4720
  br i1 %.not222, label %L164, label %L153.L324_crit_edge, !dbg !4724

L153.L324_crit_edge:                              ; preds = %L117
  %arraysize_ptr166.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %46, i64 4
  %.phi.trans.insert = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr166.phi.trans.insert to i64 addrspace(11)*
  %arraysize167.pre = load i64, i64 addrspace(11)* %.phi.trans.insert, align 8, !dbg !4711, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  br label %L324, !dbg !4724

L164:                                             ; preds = %L117
  %arraysize_ptr71 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %46, i64 4, !dbg !4711
  %48 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr71 to i64 addrspace(11)*, !dbg !4711
  %arraysize72 = load i64, i64 addrspace(11)* %48, align 8, !dbg !4711, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !4715, !noalias !4718
  %.not242 = icmp eq i64 %arraysize72, %arraysize3, !dbg !4725
  br i1 %.not242, label %L174, label %L324, !dbg !4713

L174:                                             ; preds = %L164
  %49 = addrspacecast {} addrspace(10)* %43 to {} addrspace(11)*, !dbg !4729
  %50 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !4729
  %.not223 = icmp eq {} addrspace(11)* %49, %50, !dbg !4729
  br i1 %.not223, label %L190, label %L177, !dbg !4729

L177:                                             ; preds = %L174
  %51 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %49) #66, !dbg !4734
  %52 = bitcast {}* %51 to i8**, !dbg !4734
  %arrayptr160 = load i8*, i8** %52, align 8, !dbg !4734, !tbaa !73, !invariant.load !68, !alias.scope !4715, !noalias !4718, !nonnull !68
  %53 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %50) #66, !dbg !4734
  %54 = bitcast {}* %53 to i8**, !dbg !4734
  %arrayptr162 = load i8*, i8** %54, align 8, !dbg !4734, !tbaa !73, !invariant.load !68, !alias.scope !4679, !noalias !4680, !nonnull !68
  %.not241.not = icmp eq i8* %arrayptr160, %arrayptr162, !dbg !4739
  %55 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 8, !dbg !4738
  store i1 %.not241.not, i1* %55, align 1, !dbg !4738
  br i1 %.not241.not, label %L185, label %L190, !dbg !4738

L185:                                             ; preds = %L177
  %56 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'"), !dbg !4742
  %57 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 2, !dbg !4742
  store {} addrspace(10)* %56, {} addrspace(10)** %57, align 8, !dbg !4742
  %58 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4742
  %59 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %58, i32 0, i32 3, !dbg !4742
  %60 = load i16, i16 addrspace(10)* %59, align 2, !dbg !4742
  %61 = zext i16 %60 to i64, !dbg !4742
  %62 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4742
  %63 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %62, i32 0, i32 1, !dbg !4742
  %64 = load i64, i64 addrspace(10)* %63, align 8, !dbg !4742
  %65 = mul i64 %64, %61, !dbg !4742
  %66 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !4742
  %67 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %66, align 8, !dbg !4742
  %68 = bitcast {} addrspace(10)* %56 to i8 addrspace(13)* addrspace(10)*, !dbg !4742
  %69 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %68, align 8, !dbg !4742
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %69, i8 0, i64 %65, i1 false), !dbg !4742
  %70 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %0) #62, !dbg !4742
  %71 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 3, !dbg !4744
  store {} addrspace(10)* %70, {} addrspace(10)** %71, align 8, !dbg !4744
  %.pre = bitcast {} addrspace(10)* %70 to {} addrspace(10)* addrspace(10)*, !dbg !4744
  %arraysize_ptr77271.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %.pre, i64 3
  %.phi.trans.insert282 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr77271.phi.trans.insert to i64 addrspace(10)*
  %.phi.trans.insert283 = addrspacecast i64 addrspace(10)* %.phi.trans.insert282 to i64 addrspace(11)*
  %arraysize78.pre = load i64, i64 addrspace(11)* %.phi.trans.insert283, align 8, !dbg !4744, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !4748, !noalias !4751
  %arraysize_ptr79272.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %.pre, i64 4
  %.phi.trans.insert285 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr79272.phi.trans.insert to i64 addrspace(10)*
  %.phi.trans.insert286 = addrspacecast i64 addrspace(10)* %.phi.trans.insert285 to i64 addrspace(11)*
  %arraysize80.pre = load i64, i64 addrspace(11)* %.phi.trans.insert286, align 8, !dbg !4744, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !4748, !noalias !4751
  br label %L190, !dbg !4753

L190:                                             ; preds = %L185, %L177, %L174
  %arraysize80 = phi i64 [ %arraysize80.pre, %L185 ], [ %arraysize3, %L174 ], [ %arraysize3, %L177 ], !dbg !4744
  %arraysize78 = phi i64 [ %arraysize78.pre, %L185 ], [ %arraysize, %L174 ], [ %arraysize, %L177 ], !dbg !4744
  %72 = phi {} addrspace(10)* [ %56, %L185 ], [ %"'", %L174 ], [ %"'", %L177 ]
  %value_phi76 = phi {} addrspace(10)* [ %70, %L185 ], [ %0, %L174 ], [ %0, %L177 ]
  %.not229 = icmp eq i64 %arraysize80, 1, !dbg !4756
  %.not228 = icmp eq i64 %arraysize78, 1, !dbg !4761
  %73 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !4764
  %.not224 = icmp eq {} addrspace(11)* %49, %73, !dbg !4764
  br i1 %.not224, label %L220, label %L207, !dbg !4764

L207:                                             ; preds = %L190
  %74 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %49) #66, !dbg !4767
  %75 = bitcast {}* %74 to i8**, !dbg !4767
  %arrayptr155 = load i8*, i8** %75, align 8, !dbg !4767, !tbaa !73, !invariant.load !68, !alias.scope !4715, !noalias !4718, !nonnull !68
  %76 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %73) #66, !dbg !4767
  %77 = bitcast {}* %76 to i8**, !dbg !4767
  %arrayptr157 = load i8*, i8** %77, align 8, !dbg !4767, !tbaa !73, !invariant.load !68, !alias.scope !4681, !noalias !4684, !nonnull !68
  %.not240.not = icmp eq i8* %arrayptr155, %arrayptr157, !dbg !4772
  %78 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 9, !dbg !4771
  store i1 %.not240.not, i1* %78, align 1, !dbg !4771
  br i1 %.not240.not, label %L215, label %L220, !dbg !4771

L215:                                             ; preds = %L207
  %79 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'1"), !dbg !4775
  %80 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 4, !dbg !4775
  store {} addrspace(10)* %79, {} addrspace(10)** %80, align 8, !dbg !4775
  %81 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4775
  %82 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %81, i32 0, i32 3, !dbg !4775
  %83 = load i16, i16 addrspace(10)* %82, align 2, !dbg !4775
  %84 = zext i16 %83 to i64, !dbg !4775
  %85 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !4775
  %86 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %85, i32 0, i32 1, !dbg !4775
  %87 = load i64, i64 addrspace(10)* %86, align 8, !dbg !4775
  %88 = mul i64 %87, %84, !dbg !4775
  %89 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !4775
  %90 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %89, align 8, !dbg !4775
  %91 = bitcast {} addrspace(10)* %79 to i8 addrspace(13)* addrspace(10)*, !dbg !4775
  %92 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %91, align 8, !dbg !4775
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %92, i8 0, i64 %88, i1 false), !dbg !4775
  %93 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %1) #62, !dbg !4775
  %94 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 5
  store {} addrspace(10)* %93, {} addrspace(10)** %94, align 8
  %.phi.trans.insert260 = bitcast {} addrspace(10)* %93 to {} addrspace(10)* addrspace(10)*
  %.phi.trans.insert261 = addrspacecast {} addrspace(10)* addrspace(10)* %.phi.trans.insert260 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr88.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert261, i64 4
  %.phi.trans.insert262 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr88.phi.trans.insert to i64 addrspace(11)*
  %arraysize89.pre = load i64, i64 addrspace(11)* %.phi.trans.insert262, align 8, !dbg !4777, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !4781, !noalias !4784
  %arraysize_ptr86.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert261, i64 3
  %.phi.trans.insert264 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr86.phi.trans.insert to i64 addrspace(11)*
  %arraysize87.pre = load i64, i64 addrspace(11)* %.phi.trans.insert264, align 8, !dbg !4777, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !4781, !noalias !4784
  br label %L220, !dbg !4753

L220:                                             ; preds = %L215, %L207, %L190
  %arraysize87 = phi i64 [ %arraysize, %L190 ], [ %arraysize87.pre, %L215 ], [ %arraysize, %L207 ], !dbg !4777
  %arraysize89 = phi i64 [ %arraysize3, %L190 ], [ %arraysize89.pre, %L215 ], [ %arraysize3, %L207 ], !dbg !4777
  %95 = phi {} addrspace(10)* [ %"'1", %L190 ], [ %79, %L215 ], [ %"'1", %L207 ]
  %value_phi85 = phi {} addrspace(10)* [ %1, %L190 ], [ %93, %L215 ], [ %1, %L207 ]
  %.not232 = icmp eq i64 %arraysize89, 1, !dbg !4786
  %.not231 = icmp eq i64 %arraysize87, 1, !dbg !4791
  %.not225.not = icmp eq i64 %arraysize3, 0, !dbg !4794
  br i1 %.not225.not, label %L397, label %L251.preheader, !dbg !4798

L251.preheader:                                   ; preds = %L220
  %.not226 = icmp eq i64 %arraysize, 0
  %"'ipc10" = bitcast {} addrspace(10)* %72 to double addrspace(13)* addrspace(10)*
  %96 = bitcast {} addrspace(10)* %value_phi76 to double addrspace(13)* addrspace(10)*
  %"'ipc11" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc10" to double addrspace(13)* addrspace(11)*
  %97 = addrspacecast double addrspace(13)* addrspace(10)* %96 to double addrspace(13)* addrspace(11)*
  %"'ipc8" = bitcast {} addrspace(10)* %95 to double addrspace(13)* addrspace(10)*
  %98 = bitcast {} addrspace(10)* %value_phi85 to double addrspace(13)* addrspace(10)*
  %"'ipc9" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc8" to double addrspace(13)* addrspace(11)*
  %99 = addrspacecast double addrspace(13)* addrspace(10)* %98 to double addrspace(13)* addrspace(11)*
  %"'ipc" = bitcast {} addrspace(10)* %35 to double addrspace(13)* addrspace(10)*
  %100 = bitcast {} addrspace(10)* %43 to double addrspace(13)* addrspace(10)*
  %"'ipc7" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %101 = addrspacecast double addrspace(13)* addrspace(10)* %100 to double addrspace(13)* addrspace(11)*
  %102 = add nsw i64 %arraysize3, -1, !dbg !4799
  %103 = add nsw i64 %arraysize, -1, !dbg !4799
  %104 = add nuw i64 %102, 1, !dbg !4799
  %105 = add nuw i64 %103, 1, !dbg !4799
  %106 = mul nuw nsw i64 %105, %104, !dbg !4799
  %107 = mul nuw i64 %106, 8, !dbg !4799
  %108 = call noalias nonnull i8* @malloc(i64 %107), !dbg !4799
  %_malloccache = bitcast i8* %108 to i64*, !dbg !4799
  %109 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 10, !dbg !4799
  store i64* %_malloccache, i64** %109, align 8, !dbg !4799
  store i64* %_malloccache, i64** %_cache, align 8, !dbg !4799, !invariant.group !4800
  %110 = mul nuw i64 %106, 8, !dbg !4799
  %111 = call noalias nonnull i8* @malloc(i64 %110), !dbg !4799
  %_malloccache13 = bitcast i8* %111 to i64*, !dbg !4799
  %112 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }* %3, i32 0, i32 11, !dbg !4799
  store i64* %_malloccache13, i64** %112, align 8, !dbg !4799
  store i64* %_malloccache13, i64** %_cache12, align 8, !dbg !4799, !invariant.group !4801
  br label %L251, !dbg !4799

L251:                                             ; preds = %L302, %L251.preheader
  %iv = phi i64 [ %iv.next, %L302 ], [ 0, %L251.preheader ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4799
  br i1 %.not226, label %L302, label %L298.lr.ph, !dbg !4799

L298.lr.ph:                                       ; preds = %L251
  %"arrayptr230'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc11", align 8, !tbaa !73, !alias.scope !4802, !noalias !4807, !nonnull !68
  %arrayptr230 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %97, align 8, !tbaa !73, !invariant.load !68, !alias.scope !4809, !noalias !4810, !nonnull !68
  %value_phi99.op = add nsw i64 %iv.next, -1
  %113 = select i1 %.not229, i64 0, i64 %value_phi99.op
  %114 = mul i64 %113, %arraysize78
  %"arrayptr115234'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc9", align 8, !tbaa !73, !alias.scope !4811, !noalias !4814, !nonnull !68
  %arrayptr115234 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %99, align 8, !tbaa !73, !invariant.load !68, !alias.scope !4816, !noalias !4817, !nonnull !68
  %115 = select i1 %.not232, i64 0, i64 %value_phi99.op
  %116 = mul i64 %115, %arraysize87
  %117 = mul i64 %value_phi99.op, %arraysize
  %"arrayptr121235'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc7", align 8, !tbaa !73, !alias.scope !4818, !noalias !4819, !nonnull !68
  %arrayptr121235 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %101, align 8, !tbaa !73, !invariant.load !68, !alias.scope !4820, !noalias !4718, !nonnull !68
  br label %L298, !dbg !4821

L298:                                             ; preds = %L298, %L298.lr.ph
  %iv1 = phi i64 [ %iv.next2, %L298 ], [ 0, %L298.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !4822
  %118 = select i1 %.not228, i64 0, i64 %iv1, !dbg !4822
  %119 = add i64 %118, %114, !dbg !4822
  %120 = getelementptr inbounds double, double addrspace(13)* %arrayptr230, i64 %119, !dbg !4822
  %arrayref = load double, double addrspace(13)* %120, align 8, !dbg !4822, !tbaa !269, !alias.scope !4830, !noalias !4833
  %121 = select i1 %.not231, i64 0, i64 %iv1, !dbg !4835
  %122 = add i64 %121, %116, !dbg !4835
  %123 = getelementptr inbounds double, double addrspace(13)* %arrayptr115234, i64 %122, !dbg !4835
  %arrayref116 = load double, double addrspace(13)* %123, align 8, !dbg !4835, !tbaa !269, !alias.scope !4839, !noalias !4842
  %124 = fadd double %arrayref, %arrayref116, !dbg !4844
  %125 = add i64 %iv1, %117, !dbg !4847
  %126 = getelementptr inbounds double, double addrspace(13)* %arrayptr121235, i64 %125, !dbg !4847
  store double %124, double addrspace(13)* %126, align 8, !dbg !4847, !tbaa !269, !alias.scope !4849, !noalias !4852
  %127 = load i64*, i64** %_cache12, align 8, !dbg !4854, !dereferenceable !306, !invariant.group !4801
  %128 = mul nuw nsw i64 %105, %104, !dbg !4854
  %129 = mul nuw nsw i64 %iv, %105, !dbg !4854
  %130 = add nuw nsw i64 %iv1, %129, !dbg !4854
  %131 = getelementptr inbounds i64, i64* %127, i64 %130, !dbg !4854
  store i64 %122, i64* %131, align 8, !dbg !4854, !invariant.group !4855
  %132 = load i64*, i64** %_cache, align 8, !dbg !4854, !dereferenceable !306, !invariant.group !4800
  %133 = mul nuw nsw i64 %105, %104, !dbg !4854
  %134 = mul nuw nsw i64 %iv, %105, !dbg !4854
  %135 = add nuw nsw i64 %iv1, %134, !dbg !4854
  %136 = getelementptr inbounds i64, i64* %132, i64 %135, !dbg !4854
  store i64 %119, i64* %136, align 8, !dbg !4854, !invariant.group !4856
  %exitcond.not = icmp eq i64 %iv.next2, %arraysize, !dbg !4854
  br i1 %exitcond.not, label %L302.loopexit, label %L298, !dbg !4821, !llvm.loop !4857

L302.loopexit:                                    ; preds = %L298
  br label %L302, !dbg !4858

L302:                                             ; preds = %L302.loopexit, %L251
  %exitcond281.not = icmp eq i64 %iv.next, %arraysize3, !dbg !4861
  br i1 %exitcond281.not, label %L397.loopexit, label %L251, !dbg !4754

L324:                                             ; preds = %L164, %L153.L324_crit_edge
  %arraysize167 = phi i64 [ %arraysize167.pre, %L153.L324_crit_edge ], [ %arraysize72, %L164 ], !dbg !4711
  %137 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %13, i64 0, i64 0, i64 0, !dbg !4862
  store i64 %arraysize70, i64* %137, align 8, !dbg !4862, !tbaa !133, !alias.scope !135, !noalias !4702
  %138 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %13, i64 0, i64 1, i64 0, !dbg !4862
  store i64 %arraysize167, i64* %138, align 8, !dbg !4862, !tbaa !133, !alias.scope !135, !noalias !4702
  %139 = addrspacecast [2 x [1 x i64]]* %13 to [2 x [1 x i64]] addrspace(11)*, !dbg !4713
  %140 = addrspacecast [2 x [1 x i64]]* %12 to [2 x [1 x i64]] addrspace(11)*, !dbg !4713
  call fastcc void @julia_throwdm_1974([2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %139, [2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %140) #67, !dbg !4713
  unreachable, !dbg !4713

L397.loopexit:                                    ; preds = %L302
  br label %L397, !dbg !4701

L397:                                             ; preds = %L397.loopexit, %L220
  %141 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 1, !dbg !4701
  store {} addrspace(10)* %43, {} addrspace(10)** %141, align 8, !dbg !4701
  %142 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 2, !dbg !4701
  store {} addrspace(10)* %35, {} addrspace(10)** %142, align 8, !dbg !4701
  %143 = load { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* }* %2, align 8, !dbg !4701
  ret { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* } %143, !dbg !4701
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia___2053({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg) unnamed_addr #61 !dbg !4866 {
top:
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %2 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"arrayref'de" = alloca double, align 8
  %3 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"arrayref116'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref116'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache = alloca i64*, align 8
  %_cache63 = alloca i64*, align 8
  %5 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 10
  %mdyncache_fromtape_cache = alloca i64*, align 8
  store i64* %5, i64** %mdyncache_fromtape_cache, align 8
  %6 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 11
  %mdyncache_fromtape_cache76 = alloca i64*, align 8
  store i64* %6, i64** %mdyncache_fromtape_cache76, align 8
  %7 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %8 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %7, i32 0, i32 3
  %9 = load i16, i16 addrspace(10)* %8, align 2
  %10 = zext i16 %9 to i64
  %11 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %12 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %11, i32 0, i32 1
  %13 = load i64, i64 addrspace(10)* %12, align 8
  %14 = mul i64 %13, %10
  %15 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %16 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %15, i32 0, i32 3
  %17 = load i16, i16 addrspace(10)* %16, align 2
  %18 = zext i16 %17 to i64
  %19 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %20 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %19, i32 0, i32 1
  %21 = load i64, i64 addrspace(10)* %20, align 8
  %22 = mul i64 %21, %18
  %23 = call {}*** @julia.get_pgcstack() #62
  %arraysize = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 6, !dbg !4867
  %arraysize3 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 7, !dbg !4867
  br i1 true, label %pass18.1, label %L36, !dbg !4871

L36:                                              ; preds = %pass18.1, %top
  unreachable

pass18.1:                                         ; preds = %top
  br i1 true, label %L117, label %L36, !dbg !4871

L117:                                             ; preds = %pass18.1
  %24 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 0, !dbg !4872
  %25 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 1, !dbg !4872
  br i1 true, label %L164, label %L153.L324_crit_edge, !dbg !4883

L153.L324_crit_edge:                              ; preds = %L117
  unreachable

L164:                                             ; preds = %L117
  br i1 true, label %L174, label %L324, !dbg !4885

L174:                                             ; preds = %L164
  %26 = addrspacecast {} addrspace(10)* %25 to {} addrspace(11)*, !dbg !4887
  %27 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !4887
  %.not223 = icmp eq {} addrspace(11)* %26, %27, !dbg !4887
  br i1 %.not223, label %L190, label %L177, !dbg !4887

L177:                                             ; preds = %L174
  %.not241.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 8, !dbg !4892
  br i1 %.not241.not, label %L185, label %L190, !dbg !4892

L185:                                             ; preds = %L177
  %"'ip_phi3" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 2, !dbg !4893
  %28 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 3, !dbg !4893
  br label %L190, !dbg !4895

L190:                                             ; preds = %L185, %L177, %L174
  %29 = phi {} addrspace(10)* [ %"'ip_phi3", %L185 ], [ %"'", %L174 ], [ %"'", %L177 ]
  %30 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !4898
  %.not224 = icmp eq {} addrspace(11)* %26, %30, !dbg !4898
  br i1 %.not224, label %L220, label %L207, !dbg !4898

L207:                                             ; preds = %L190
  %.not240.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 9, !dbg !4901
  br i1 %.not240.not, label %L215, label %L220, !dbg !4901

L215:                                             ; preds = %L207
  %"'ip_phi6" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 4, !dbg !4902
  %31 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 5, !dbg !4902
  br label %L220, !dbg !4895

L220:                                             ; preds = %L215, %L207, %L190
  %32 = phi {} addrspace(10)* [ %"'1", %L190 ], [ %"'ip_phi6", %L215 ], [ %"'1", %L207 ]
  %.not225.not = icmp eq i64 %arraysize3, 0, !dbg !4904
  br i1 %.not225.not, label %L397, label %L251.preheader, !dbg !4908

L251.preheader:                                   ; preds = %L220
  %.not226 = icmp eq i64 %arraysize, 0
  %"'ipc52" = bitcast {} addrspace(10)* %29 to double addrspace(13)* addrspace(10)*
  %"'ipc53" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc52" to double addrspace(13)* addrspace(11)*
  %"'ipc48" = bitcast {} addrspace(10)* %32 to double addrspace(13)* addrspace(10)*
  %"'ipc49" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc48" to double addrspace(13)* addrspace(11)*
  %"'ipc" = bitcast {} addrspace(10)* %24 to double addrspace(13)* addrspace(10)*
  %"'ipc45" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %33 = add nsw i64 %arraysize3, -1, !dbg !4909
  %34 = add nsw i64 %arraysize, -1, !dbg !4909
  %35 = add nuw i64 %33, 1, !dbg !4909
  %36 = add nuw i64 %34, 1, !dbg !4909
  %37 = mul nuw nsw i64 %36, %35, !dbg !4909
  %38 = mul nuw i64 %37, 8, !dbg !4909
  %39 = mul nuw i64 %37, 8, !dbg !4909
  br label %L251, !dbg !4909

L251:                                             ; preds = %L302, %L251.preheader
  %iv = phi i64 [ %iv.next, %L302 ], [ 0, %L251.preheader ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !4909
  br i1 %.not226, label %L302, label %L298.lr.ph, !dbg !4909

L298.lr.ph:                                       ; preds = %L251
  %"arrayptr230'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc53", align 8, !tbaa !73, !alias.scope !4910, !noalias !4913, !nonnull !68, !invariant.group !4915
  %value_phi99.op = add nsw i64 %iv.next, -1
  %"arrayptr115234'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc49", align 8, !tbaa !73, !alias.scope !4916, !noalias !4919, !nonnull !68, !invariant.group !4921
  %40 = mul i64 %value_phi99.op, %arraysize
  %"arrayptr121235'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc45", align 8, !tbaa !73, !alias.scope !4922, !noalias !4925, !nonnull !68, !invariant.group !4927
  br label %L298, !dbg !4928

L298:                                             ; preds = %L298, %L298.lr.ph
  %iv1 = phi i64 [ %iv.next2, %L298 ], [ 0, %L298.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !4929
  %41 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dbg !4929, !dereferenceable !306, !invariant.group !4937
  %42 = mul nuw nsw i64 %36, %35, !dbg !4929
  %43 = mul nuw nsw i64 %iv, %36, !dbg !4929
  %44 = add nuw nsw i64 %iv1, %43, !dbg !4929
  %45 = getelementptr inbounds i64, i64* %41, i64 %44, !dbg !4929
  %46 = load i64, i64* %45, align 8, !dbg !4929, !invariant.group !4938
  %"'ipg62" = getelementptr inbounds double, double addrspace(13)* %"arrayptr230'ipl", i64 %46, !dbg !4929
  %47 = load i64*, i64** %mdyncache_fromtape_cache76, align 8, !dbg !4939, !dereferenceable !306, !invariant.group !4943
  %48 = mul nuw nsw i64 %36, %35, !dbg !4939
  %49 = mul nuw nsw i64 %iv, %36, !dbg !4939
  %50 = add nuw nsw i64 %iv1, %49, !dbg !4939
  %51 = getelementptr inbounds i64, i64* %47, i64 %50, !dbg !4939
  %52 = load i64, i64* %51, align 8, !dbg !4939, !invariant.group !4944
  %53 = mul nuw nsw i64 %36, %35, !dbg !4939
  %54 = mul nuw nsw i64 %iv, %36, !dbg !4939
  %55 = add nuw nsw i64 %iv1, %54, !dbg !4939
  %56 = mul nuw nsw i64 %36, %35, !dbg !4939
  %57 = mul nuw nsw i64 %iv, %36, !dbg !4939
  %58 = add nuw nsw i64 %iv1, %57, !dbg !4939
  %"'ipg57" = getelementptr inbounds double, double addrspace(13)* %"arrayptr115234'ipl", i64 %52, !dbg !4939
  %59 = add i64 %iv1, %40, !dbg !4945
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr121235'ipl", i64 %59, !dbg !4945
  %exitcond.not = icmp eq i64 %iv.next2, %arraysize, !dbg !4947
  br i1 %exitcond.not, label %L302.loopexit, label %L298, !dbg !4928, !llvm.loop !4948

L302.loopexit:                                    ; preds = %L298
  br label %L302, !dbg !4949

L302:                                             ; preds = %L302.loopexit, %L251
  %exitcond281.not = icmp eq i64 %iv.next, %arraysize3, !dbg !4952
  br i1 %exitcond281.not, label %L397.loopexit, label %L251, !dbg !4896

L324:                                             ; preds = %L164
  unreachable

L397.loopexit:                                    ; preds = %L302
  br label %L397, !dbg !4882

L397:                                             ; preds = %L397.loopexit, %L220
  br label %invertL397, !dbg !4882

inverttop:                                        ; preds = %invertpass18.1
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertpass18.1:                                   ; preds = %invertL117
  br label %inverttop

invertL117:                                       ; preds = %invertL164
  br label %invertpass18.1

invertL164:                                       ; preds = %invertL174
  br label %invertL117

invertL174:                                       ; preds = %invertL190, %invertL177
  br label %invertL164

invertL177:                                       ; preds = %staging, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  br label %invertL174

invertL185:                                       ; preds = %staging
  %60 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 2, !dbg !4893
  %61 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !4893
  %62 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %61, align 8, !dbg !4893
  %63 = bitcast {} addrspace(10)* %60 to i8 addrspace(13)* addrspace(10)*, !dbg !4893
  %64 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %63, align 8, !dbg !4893
  %65 = bitcast i8 addrspace(13)* %64 to double addrspace(13)*, !dbg !4893
  %66 = bitcast i8 addrspace(13)* %62 to double addrspace(13)*, !dbg !4893
  %67 = udiv i64 %22, 8, !dbg !4893
  %68 = icmp eq i64 %67, 0, !dbg !4893
  br i1 %68, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !4893

for.body.i:                                       ; preds = %for.body.i, %invertL185
  %idx.i = phi i64 [ 0, %invertL185 ], [ %idx.next.i, %for.body.i ], !dbg !4893
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %65, i64 %idx.i, !dbg !4893
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !4893
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !4893
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %66, i64 %idx.i, !dbg !4893
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !4893
  %69 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !4893
  store double %69, double addrspace(13)* %src.i.i, align 1, !dbg !4893
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !4893
  %70 = icmp eq i64 %67, %idx.next.i, !dbg !4893
  br i1 %70, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !4893

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL185, %for.body.i
  br label %invertL177

invertL190:                                       ; preds = %invertL220, %invertL207
  %.not241.not_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 8
  br i1 %.not223, label %invertL174, label %staging

invertL207:                                       ; preds = %staging38, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit86
  br label %invertL190

invertL215:                                       ; preds = %staging38
  %71 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 4, !dbg !4902
  %72 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !4902
  %73 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %72, align 8, !dbg !4902
  %74 = bitcast {} addrspace(10)* %71 to i8 addrspace(13)* addrspace(10)*, !dbg !4902
  %75 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %74, align 8, !dbg !4902
  %76 = bitcast i8 addrspace(13)* %75 to double addrspace(13)*, !dbg !4902
  %77 = bitcast i8 addrspace(13)* %73 to double addrspace(13)*, !dbg !4902
  %78 = udiv i64 %14, 8, !dbg !4902
  %79 = icmp eq i64 %78, 0, !dbg !4902
  br i1 %79, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit86, label %for.body.i85, !dbg !4902

for.body.i85:                                     ; preds = %for.body.i85, %invertL215
  %idx.i79 = phi i64 [ 0, %invertL215 ], [ %idx.next.i84, %for.body.i85 ], !dbg !4902
  %dst.i.i80 = getelementptr inbounds double, double addrspace(13)* %76, i64 %idx.i79, !dbg !4902
  %dst.i.l.i81 = load double, double addrspace(13)* %dst.i.i80, align 1, !dbg !4902
  store double 0.000000e+00, double addrspace(13)* %dst.i.i80, align 1, !dbg !4902
  %src.i.i82 = getelementptr inbounds double, double addrspace(13)* %77, i64 %idx.i79, !dbg !4902
  %src.i.l.i83 = load double, double addrspace(13)* %src.i.i82, align 1, !dbg !4902
  %80 = fadd fast double %src.i.l.i83, %dst.i.l.i81, !dbg !4902
  store double %80, double addrspace(13)* %src.i.i82, align 1, !dbg !4902
  %idx.next.i84 = add nuw i64 %idx.i79, 1, !dbg !4902
  %81 = icmp eq i64 %78, %idx.next.i84, !dbg !4902
  br i1 %81, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit86, label %for.body.i85, !dbg !4902

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit86: ; preds = %invertL215, %for.body.i85
  br label %invertL207

invertL220:                                       ; preds = %invertL397, %invertL251.preheader
  %.not240.not_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 9
  br i1 %.not224, label %invertL190, label %staging38

invertL251.preheader:                             ; preds = %invertL251
  %82 = load i64, i64* %"iv'ac", align 8
  %83 = load i64, i64* %"iv1'ac", align 8
  %84 = load i64, i64* %"iv'ac", align 8
  %85 = load i64, i64* %"iv1'ac", align 8
  %86 = load i64, i64* %"iv'ac", align 8
  %87 = load i64, i64* %"iv1'ac", align 8
  %forfree75 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dereferenceable !306, !invariant.group !4937
  %88 = bitcast i64* %forfree75 to i8*
  call void @free(i8* nonnull %88), !dbg !4953
  %89 = load i64, i64* %"iv'ac", align 8
  %90 = load i64, i64* %"iv1'ac", align 8
  %forfree77 = load i64*, i64** %mdyncache_fromtape_cache76, align 8, !dereferenceable !306, !invariant.group !4943
  %91 = bitcast i64* %forfree77 to i8*
  call void @free(i8* nonnull %91), !dbg !4953
  br label %invertL220

invertL251:                                       ; preds = %invertL302, %invertL298.lr.ph
  %92 = load i64, i64* %"iv'ac", align 8
  %93 = icmp eq i64 %92, 0
  %94 = xor i1 %93, true
  br i1 %93, label %invertL251.preheader, label %incinvertL251

incinvertL251:                                    ; preds = %invertL251
  %95 = load i64, i64* %"iv'ac", align 8
  %96 = add nsw i64 %95, -1
  store i64 %96, i64* %"iv'ac", align 8
  br label %invertL302

invertL298.lr.ph:                                 ; preds = %invertL298
  br label %invertL251

invertL298:                                       ; preds = %mergeinvertL298_L302.loopexit, %incinvertL298
  %97 = load i64, i64* %"iv1'ac", align 8, !dbg !4945
  %98 = load i64, i64* %"iv'ac", align 8, !dbg !4945
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %24 to double addrspace(13)* addrspace(10)*, !dbg !4945
  %"'ipc45_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4945
  %"arrayptr121235'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc45_unwrap", align 8, !tbaa !73, !alias.scope !4922, !noalias !4925, !nonnull !68, !invariant.group !4927
  %iv.next_unwrap = add nuw nsw i64 %98, 1, !dbg !4945
  %value_phi99.op_unwrap = add nsw i64 %iv.next_unwrap, -1, !dbg !4945
  %_unwrap = mul i64 %value_phi99.op_unwrap, %arraysize, !dbg !4945
  %_unwrap54 = add i64 %97, %_unwrap, !dbg !4945
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr121235'ipl_unwrap", i64 %_unwrap54, !dbg !4945
  %99 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4945, !tbaa !269, !alias.scope !4954, !noalias !4957
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !4945, !tbaa !269, !alias.scope !4954, !noalias !4957
  %100 = load double, double* %"'de", align 8, !dbg !4945
  %101 = fadd fast double %100, %99, !dbg !4945
  store double %101, double* %"'de", align 8, !dbg !4945
  %102 = load double, double* %"'de", align 8, !dbg !4959
  store double 0.000000e+00, double* %"'de", align 8, !dbg !4959
  %103 = load double, double* %"arrayref'de", align 8, !dbg !4959
  %104 = fadd fast double %103, %102, !dbg !4959
  store double %104, double* %"arrayref'de", align 8, !dbg !4959
  %105 = load double, double* %"arrayref116'de", align 8, !dbg !4959
  %106 = fadd fast double %105, %102, !dbg !4959
  store double %106, double* %"arrayref116'de", align 8, !dbg !4959
  %107 = load double, double* %"arrayref116'de", align 8, !dbg !4939
  store double 0.000000e+00, double* %"arrayref116'de", align 8, !dbg !4939
  %108 = load i64, i64* %"iv1'ac", align 8, !dbg !4939
  %109 = load i64, i64* %"iv'ac", align 8, !dbg !4939
  %"'ipc48_unwrap" = bitcast {} addrspace(10)* %32 to double addrspace(13)* addrspace(10)*, !dbg !4939
  %"'ipc49_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc48_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4939
  %"arrayptr115234'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc49_unwrap", align 8, !tbaa !73, !alias.scope !4916, !noalias !4919, !nonnull !68, !invariant.group !4921
  %arraysize3_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 7, !dbg !4939
  %_unwrap58 = add nsw i64 %arraysize3_unwrap, -1, !dbg !4939
  %110 = add nuw i64 %_unwrap58, 1, !dbg !4939
  %arraysize_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 6, !dbg !4939
  %_unwrap59 = add nsw i64 %arraysize_unwrap, -1, !dbg !4939
  %111 = add nuw i64 %_unwrap59, 1, !dbg !4939
  %112 = mul nuw nsw i64 %111, %110, !dbg !4939
  %113 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 11, !dbg !4939
  %114 = mul nuw nsw i64 %111, %110, !dbg !4939
  %115 = mul nuw nsw i64 %109, %111, !dbg !4939
  %116 = add nuw nsw i64 %108, %115, !dbg !4939
  %117 = getelementptr inbounds i64, i64* %113, i64 %116, !dbg !4939
  %118 = load i64, i64* %117, align 8, !dbg !4939, !invariant.group !4962
  %"'ipg57_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr115234'ipl_unwrap", i64 %118, !dbg !4939
  %119 = load double, double addrspace(13)* %"'ipg57_unwrap", align 8, !dbg !4939, !tbaa !269, !alias.scope !4963, !noalias !4966
  %120 = fadd fast double %119, %107, !dbg !4939
  store double %120, double addrspace(13)* %"'ipg57_unwrap", align 8, !dbg !4939, !tbaa !269, !alias.scope !4963, !noalias !4966
  %121 = load double, double* %"arrayref'de", align 8, !dbg !4929
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !4929
  %122 = load i64, i64* %"iv1'ac", align 8, !dbg !4929
  %123 = load i64, i64* %"iv'ac", align 8, !dbg !4929
  %"'ipc52_unwrap" = bitcast {} addrspace(10)* %29 to double addrspace(13)* addrspace(10)*, !dbg !4929
  %"'ipc53_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc52_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4929
  %"arrayptr230'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc53_unwrap", align 8, !tbaa !73, !alias.scope !4910, !noalias !4913, !nonnull !68, !invariant.group !4915
  %124 = add nuw i64 %_unwrap58, 1, !dbg !4929
  %125 = add nuw i64 %_unwrap59, 1, !dbg !4929
  %126 = mul nuw nsw i64 %125, %124, !dbg !4929
  %127 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %tapeArg, 10, !dbg !4929
  %128 = mul nuw nsw i64 %125, %124, !dbg !4929
  %129 = mul nuw nsw i64 %123, %125, !dbg !4929
  %130 = add nuw nsw i64 %122, %129, !dbg !4929
  %131 = getelementptr inbounds i64, i64* %127, i64 %130, !dbg !4929
  %132 = load i64, i64* %131, align 8, !dbg !4929, !invariant.group !4968
  %"'ipg62_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr230'ipl_unwrap", i64 %132, !dbg !4929
  %133 = load double, double addrspace(13)* %"'ipg62_unwrap", align 8, !dbg !4929, !tbaa !269, !alias.scope !4969, !noalias !4972
  %134 = fadd fast double %133, %121, !dbg !4929
  store double %134, double addrspace(13)* %"'ipg62_unwrap", align 8, !dbg !4929, !tbaa !269, !alias.scope !4969, !noalias !4972
  %135 = load i64, i64* %"iv1'ac", align 8
  %136 = icmp eq i64 %135, 0
  %137 = xor i1 %136, true
  br i1 %136, label %invertL298.lr.ph, label %incinvertL298

incinvertL298:                                    ; preds = %invertL298
  %138 = load i64, i64* %"iv1'ac", align 8
  %139 = add nsw i64 %138, -1
  store i64 %139, i64* %"iv1'ac", align 8
  br label %invertL298

invertL302.loopexit:                              ; preds = %invertL302
  %140 = load i64, i64* %"iv'ac", align 8
  %_unwrap68 = add nsw i64 %arraysize, -1
  br label %mergeinvertL298_L302.loopexit

mergeinvertL298_L302.loopexit:                    ; preds = %invertL302.loopexit
  store i64 %_unwrap68, i64* %"iv1'ac", align 8
  br label %invertL298

invertL302:                                       ; preds = %mergeinvertL251_L397.loopexit, %incinvertL251
  %141 = load i64, i64* %"iv'ac", align 8
  %.not226_unwrap = icmp eq i64 %arraysize, 0
  br i1 %.not226_unwrap, label %invertL251, label %invertL302.loopexit

invertL397.loopexit:                              ; preds = %invertL397
  %_unwrap74 = add nsw i64 %arraysize3, -1
  br label %mergeinvertL251_L397.loopexit

mergeinvertL251_L397.loopexit:                    ; preds = %invertL397.loopexit
  store i64 %_unwrap74, i64* %"iv'ac", align 8
  br label %invertL302

invertL397:                                       ; preds = %L397
  br i1 %.not225.not, label %invertL220, label %invertL397.loopexit

staging:                                          ; preds = %invertL190
  br i1 %.not241.not_unwrap, label %invertL185, label %invertL177

staging38:                                        ; preds = %invertL220
  br i1 %.not240.not_unwrap, label %invertL215, label %invertL207
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia_q_true_2051([1 x {} addrspace(10)*] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %0, double %1) unnamed_addr #63 !dbg !5017 {
top:
  %2 = call {}*** @julia.get_pgcstack() #64
  %ptls_field6 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field6 to i64***
  %ptls_load78 = load i64**, i64*** %3, align 8, !tbaa !69
  %4 = getelementptr inbounds i64*, i64** %ptls_load78, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #64, !dbg !5018
  fence syncscope("singlethread") seq_cst
  %5 = bitcast [1 x {} addrspace(10)*] addrspace(11)* %0 to {} addrspace(10)* addrspace(10)* addrspace(11)*, !dbg !5018
  %getfield10 = load atomic {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)* addrspace(11)* %5 unordered, align 8, !dbg !5018, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68, !dereferenceable !306, !align !306
  %6 = addrspacecast {} addrspace(10)* addrspace(10)* %getfield10 to {} addrspace(10)* addrspace(11)*, !dbg !5018
  %7 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %6 unordered, align 8, !dbg !5018, !tbaa !307, !alias.scope !117, !noalias !271
  %isdefined.not = icmp eq {} addrspace(10)* %7, null, !dbg !5018
  br i1 %isdefined.not, label %err, label %pass, !dbg !5018

pass:                                             ; preds = %top
  %8 = fmul double %1, 0x401921FB54442D18, !dbg !5019
  %9 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5140509616 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11436072592 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %7) #65, !dbg !5018
  %current_task49 = getelementptr inbounds {}**, {}*** %2, i64 -14, !dbg !5018
  %current_task4 = bitcast {}*** %current_task49 to {}**, !dbg !5018
  %box = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task4, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5206732832 to {}*) to {} addrspace(10)*)) #66, !dbg !5018
  %10 = bitcast {} addrspace(10)* %box to double addrspace(10)*, !dbg !5018
  store double %8, double addrspace(10)* %10, align 8, !dbg !5018, !tbaa !113, !alias.scope !117, !noalias !5021
  %11 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5140509616 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* nonnull %9) #65, !dbg !5018
  %12 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5170544208 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %11) #65, !dbg !5018
  %13 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138639312 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5194774400 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %12) #65, !dbg !5018
  ret {} addrspace(10)* %13, !dbg !5018

err:                                              ; preds = %top
  call void @ijl_undefined_var_error({} addrspace(12)* addrspacecast ({}* inttoptr (i64 4346906024 to {}*) to {} addrspace(12)*)) #64, !dbg !5018
  unreachable, !dbg !5018
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_q_true_2051([1 x {} addrspace(10)*] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %0, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'", double %1) unnamed_addr #63 !dbg !5024 {
top:
  %2 = alloca { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %3 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 0
  %4 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 1
  %6 = bitcast {} addrspace(10)* addrspace(10)** %5 to {} addrspace(10)**
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %10 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %10, align 8
  %11 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 6
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %11, align 8
  %12 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 7
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %12, align 8
  %13 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %13, align 8
  %14 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 9
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %14, align 8
  %15 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 10
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %15, align 8
  %16 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 11
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %16, align 8
  %17 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 12
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %17, align 8
  %18 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 13
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %18, align 8
  %19 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 14
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %19, align 8
  %20 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i64 0, i32 15
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %20, align 8
  %21 = call {}*** @julia.get_pgcstack() #64
  %ptls_field6 = getelementptr inbounds {}**, {}*** %21, i64 2
  %22 = bitcast {}*** %ptls_field6 to i64***
  %ptls_load78 = load i64**, i64*** %22, align 8, !tbaa !69, !alias.scope !5025, !noalias !5028
  %23 = getelementptr inbounds i64*, i64** %ptls_load78, i64 2
  %safepoint = load i64*, i64** %23, align 8, !tbaa !73, !invariant.load !68, !alias.scope !5030, !noalias !5033
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #64, !dbg !5035
  fence syncscope("singlethread") seq_cst
  %"'ipc4" = bitcast [1 x {} addrspace(10)*] addrspace(11)* %"'" to {} addrspace(10)* addrspace(10)* addrspace(11)*, !dbg !5035
  %24 = bitcast [1 x {} addrspace(10)*] addrspace(11)* %0 to {} addrspace(10)* addrspace(10)* addrspace(11)*, !dbg !5035
  %"getfield10'ipl" = load atomic {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)* addrspace(11)* %"'ipc4" unordered, align 8, !dbg !5035, !tbaa !73, !alias.scope !5036, !noalias !5039, !nonnull !68, !dereferenceable !306
  %25 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 1, !dbg !5035
  store {} addrspace(10)* addrspace(10)* %"getfield10'ipl", {} addrspace(10)* addrspace(10)** %25, align 8, !dbg !5035
  %getfield10 = load atomic {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)* addrspace(11)* %24 unordered, align 8, !dbg !5035, !tbaa !73, !invariant.load !68, !alias.scope !5041, !noalias !5042, !nonnull !68, !dereferenceable !306, !align !306
  %"'ipc" = addrspacecast {} addrspace(10)* addrspace(10)* %"getfield10'ipl" to {} addrspace(10)* addrspace(11)*, !dbg !5035
  %26 = addrspacecast {} addrspace(10)* addrspace(10)* %getfield10 to {} addrspace(10)* addrspace(11)*, !dbg !5035
  %"'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc" unordered, align 8, !dbg !5035, !tbaa !307, !alias.scope !5043, !noalias !5046
  %27 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 0, !dbg !5035
  store {} addrspace(10)* %"'ipl", {} addrspace(10)** %27, align 8, !dbg !5035
  %28 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %26 unordered, align 8, !dbg !5035, !tbaa !307, !alias.scope !5048, !noalias !5049
  %29 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 15, !dbg !5035
  store {} addrspace(10)* %28, {} addrspace(10)** %29, align 8, !dbg !5035
  %isdefined.not = icmp eq {} addrspace(10)* %28, null, !dbg !5035
  br i1 %isdefined.not, label %err, label %pass, !dbg !5035

pass:                                             ; preds = %top
  %30 = fmul double %1, 0x401921FB54442D18, !dbg !5050
  %31 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5551489632 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11465234128 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5140509616 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11436072592 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %28, {} addrspace(10)* %"'ipl"), !dbg !5035
  %32 = addrspacecast {} addrspace(10)* %31 to {} addrspace(11)*, !dbg !5035
  %33 = bitcast {} addrspace(11)* %32 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !5035
  %34 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %33, i64 0, i64 1, !dbg !5035
  %35 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %34, align 8, !dbg !5035
  %36 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 13, !dbg !5035
  store {} addrspace(10)* %35, {} addrspace(10)** %36, align 8, !dbg !5035
  %37 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %33, i64 0, i64 0, !dbg !5035
  %38 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %37, align 8, !dbg !5035
  %39 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 14, !dbg !5035
  store {} addrspace(10)* %38, {} addrspace(10)** %39, align 8, !dbg !5035
  %40 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %33, i64 0, i64 2, !dbg !5035
  %41 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %40, align 8, !dbg !5035
  %42 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 12, !dbg !5035
  store {} addrspace(10)* %41, {} addrspace(10)** %42, align 8, !dbg !5035
  %current_task49 = getelementptr inbounds {}**, {}*** %21, i64 -14, !dbg !5035
  %current_task4 = bitcast {}*** %current_task49 to {}**, !dbg !5035
  %"box'mi" = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task4, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5206732832 to {}*) to {} addrspace(10)*)) #65, !dbg !5035
  %43 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 10, !dbg !5035
  store {} addrspace(10)* %"box'mi", {} addrspace(10)** %43, align 8, !dbg !5035
  %44 = bitcast {} addrspace(10)* %"box'mi" to i8 addrspace(10)*, !dbg !5035
  call void @llvm.memset.p10i8.i64(i8 addrspace(10)* nonnull dereferenceable(8) dereferenceable_or_null(8) %44, i8 0, i64 8, i1 false), !dbg !5035
  %box = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task4, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5206732832 to {}*) to {} addrspace(10)*)) #65, !dbg !5035
  %45 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 11, !dbg !5035
  store {} addrspace(10)* %box, {} addrspace(10)** %45, align 8, !dbg !5035
  %46 = bitcast {} addrspace(10)* %box to double addrspace(10)*, !dbg !5035
  store double %30, double addrspace(10)* %46, align 8, !dbg !5035, !tbaa !113, !alias.scope !5052, !noalias !5055
  %47 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5551489632 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6224791504 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5140509616 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %box, {} addrspace(10)* %"box'mi", {} addrspace(10)* %38, {} addrspace(10)* %35), !dbg !5035
  %48 = addrspacecast {} addrspace(10)* %47 to {} addrspace(11)*, !dbg !5035
  %49 = bitcast {} addrspace(11)* %48 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !5035
  %50 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %49, i64 0, i64 1, !dbg !5035
  %51 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %50, align 8, !dbg !5035
  %52 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 8, !dbg !5035
  store {} addrspace(10)* %51, {} addrspace(10)** %52, align 8, !dbg !5035
  %53 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %49, i64 0, i64 0, !dbg !5035
  %54 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %53, align 8, !dbg !5035
  %55 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 9, !dbg !5035
  store {} addrspace(10)* %54, {} addrspace(10)** %55, align 8, !dbg !5035
  %56 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %49, i64 0, i64 2, !dbg !5035
  %57 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %56, align 8, !dbg !5035
  %58 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 7, !dbg !5035
  store {} addrspace(10)* %57, {} addrspace(10)** %58, align 8, !dbg !5035
  %59 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5551489632 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11466622160 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227532784 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5170544208 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %54, {} addrspace(10)* %51), !dbg !5035
  %60 = addrspacecast {} addrspace(10)* %59 to {} addrspace(11)*, !dbg !5035
  %61 = bitcast {} addrspace(11)* %60 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !5035
  %62 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %61, i64 0, i64 1, !dbg !5035
  %63 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %62, align 8, !dbg !5035
  %64 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 5, !dbg !5035
  store {} addrspace(10)* %63, {} addrspace(10)** %64, align 8, !dbg !5035
  %65 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %61, i64 0, i64 0, !dbg !5035
  %66 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %65, align 8, !dbg !5035
  %67 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 6, !dbg !5035
  store {} addrspace(10)* %66, {} addrspace(10)** %67, align 8, !dbg !5035
  %68 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %61, i64 0, i64 2, !dbg !5035
  %69 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %68, align 8, !dbg !5035
  %70 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 4, !dbg !5035
  store {} addrspace(10)* %69, {} addrspace(10)** %70, align 8, !dbg !5035
  %71 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5551489632 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11465234128 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138639312 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5194774400 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %66, {} addrspace(10)* %63), !dbg !5035
  %72 = addrspacecast {} addrspace(10)* %71 to {} addrspace(11)*, !dbg !5035
  %73 = bitcast {} addrspace(11)* %72 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !5035
  %74 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %73, i64 0, i64 1, !dbg !5035
  %75 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %74, align 8, !dbg !5035
  %76 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 3, !dbg !5035
  store {} addrspace(10)* %75, {} addrspace(10)** %76, align 8, !dbg !5035
  %77 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %73, i64 0, i64 0, !dbg !5035
  %78 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %77, align 8, !dbg !5035
  %79 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %73, i64 0, i64 2, !dbg !5035
  %80 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %79, align 8, !dbg !5035
  %81 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 2, !dbg !5035
  store {} addrspace(10)* %80, {} addrspace(10)** %81, align 8, !dbg !5035
  %82 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 1, !dbg !5035
  store {} addrspace(10)* %78, {} addrspace(10)** %82, align 8, !dbg !5035
  %83 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 2, !dbg !5035
  store {} addrspace(10)* %75, {} addrspace(10)** %83, align 8, !dbg !5035
  %84 = load { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* }* %2, align 8, !dbg !5035
  ret { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* } %84, !dbg !5035

err:                                              ; preds = %top
  call void @ijl_undefined_var_error({} addrspace(12)* addrspacecast ({}* inttoptr (i64 4346906024 to {}*) to {} addrspace(12)*)) #64, !dbg !5035
  unreachable, !dbg !5035
}

; Function Attrs: mustprogress willreturn
define internal fastcc { double } @diffejulia_q_true_2051([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 dereferenceable(8) %0, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'", double %1, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg) unnamed_addr #63 !dbg !5059 {
top:
  %"'de" = alloca double, align 8
  %2 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"'de8" = alloca double, align 8
  %3 = getelementptr double, double* %"'de8", i64 0
  store double 0.000000e+00, double* %3, align 8
  %4 = call {}*** @julia.get_pgcstack()
  %5 = call {}*** @julia.get_pgcstack()
  %6 = call {}*** @julia.get_pgcstack()
  %7 = call {}*** @julia.get_pgcstack()
  %8 = call {}*** @julia.get_pgcstack() #64
  %"getfield10'il_phi" = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 1, !dbg !5060
  %"'il_phi" = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 0, !dbg !5060
  %9 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 15, !dbg !5060
  br i1 false, label %err, label %pass, !dbg !5060

pass:                                             ; preds = %top
  %10 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 12, !dbg !5060
  %"'ip_phi" = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 13, !dbg !5060
  %11 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 14, !dbg !5060
  %current_task49 = getelementptr inbounds {}**, {}*** %8, i64 -14, !dbg !5060
  %current_task4 = bitcast {}*** %current_task49 to {}**, !dbg !5060
  %"box'mi" = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 10, !dbg !5060
  %box = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 11, !dbg !5060
  %"'ipc" = bitcast {} addrspace(10)* %"box'mi" to double addrspace(10)*, !dbg !5060
  %12 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 7, !dbg !5060
  %"'ip_phi1" = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 8, !dbg !5060
  %13 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 9, !dbg !5060
  %14 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 4, !dbg !5060
  %"'ip_phi2" = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 5, !dbg !5060
  %15 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 6, !dbg !5060
  %16 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 2, !dbg !5060
  %"'ip_phi3" = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %tapeArg, 3, !dbg !5060
  br label %invertpass, !dbg !5060

err:                                              ; preds = %top
  unreachable

inverttop:                                        ; preds = %invertpass
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  %17 = load double, double* %"'de", align 8
  %18 = insertvalue { double } undef, double %17, 0
  ret { double } %18

invertpass:                                       ; preds = %pass
  %19 = bitcast {}*** %7 to {}**, !dbg !5060
  %20 = getelementptr inbounds {}*, {}** %19, i64 -14, !dbg !5060
  %21 = getelementptr inbounds {}*, {}** %20, i64 16, !dbg !5060
  %22 = bitcast {}** %21 to i8**, !dbg !5060
  %23 = load i8*, i8** %22, align 8, !dbg !5060
  %24 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %20, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5985126160 to {}*) to {} addrspace(10)*)), !dbg !5060
  %25 = addrspacecast {} addrspace(10)* %24 to {} addrspace(11)*, !dbg !5060
  %26 = bitcast {} addrspace(11)* %25 to [3 x i64] addrspace(11)*, !dbg !5060
  %27 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !5060
  %28 = ptrtoint {}* %27 to i64, !dbg !5060
  %29 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %26, i64 0, i64 0, !dbg !5060
  store i64 %28, i64 addrspace(11)* %29, align 8, !dbg !5060
  %30 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !5060
  %31 = ptrtoint {}* %30 to i64, !dbg !5060
  %32 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %26, i64 0, i64 1, !dbg !5060
  store i64 %31, i64 addrspace(11)* %32, align 8, !dbg !5060
  %33 = addrspacecast {} addrspace(10)* %"'ip_phi2" to {} addrspace(11)*, !dbg !5060
  %34 = call {}* @julia.pointer_from_objref({} addrspace(11)* %33), !dbg !5060
  %35 = ptrtoint {}* %34 to i64, !dbg !5060
  %36 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %26, i64 0, i64 2, !dbg !5060
  store i64 %35, i64 addrspace(11)* %36, align 8, !dbg !5060
  %37 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5548675696 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11465234128 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530968 to {}*) to {} addrspace(10)*), {} addrspace(10)* %16, {} addrspace(10)* %24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138639312 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5194774400 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %15, {} addrspace(10)* %"'ip_phi2"), !dbg !5060
  %38 = bitcast {}*** %6 to {}**, !dbg !5060
  %39 = getelementptr inbounds {}*, {}** %38, i64 -14, !dbg !5060
  %40 = getelementptr inbounds {}*, {}** %39, i64 16, !dbg !5060
  %41 = bitcast {}** %40 to i8**, !dbg !5060
  %42 = load i8*, i8** %41, align 8, !dbg !5060
  %43 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %39, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6247079632 to {}*) to {} addrspace(10)*)), !dbg !5060
  %44 = addrspacecast {} addrspace(10)* %43 to {} addrspace(11)*, !dbg !5060
  %45 = bitcast {} addrspace(11)* %44 to [2 x i64] addrspace(11)*, !dbg !5060
  %46 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !5060
  %47 = ptrtoint {}* %46 to i64, !dbg !5060
  %48 = getelementptr inbounds [2 x i64], [2 x i64] addrspace(11)* %45, i64 0, i64 0, !dbg !5060
  store i64 %47, i64 addrspace(11)* %48, align 8, !dbg !5060
  %49 = addrspacecast {} addrspace(10)* %"'ip_phi1" to {} addrspace(11)*, !dbg !5060
  %50 = call {}* @julia.pointer_from_objref({} addrspace(11)* %49), !dbg !5060
  %51 = ptrtoint {}* %50 to i64, !dbg !5060
  %52 = getelementptr inbounds [2 x i64], [2 x i64] addrspace(11)* %45, i64 0, i64 1, !dbg !5060
  store i64 %51, i64 addrspace(11)* %52, align 8, !dbg !5060
  %53 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5548675696 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11466622160 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227532784 to {}*) to {} addrspace(10)*), {} addrspace(10)* %14, {} addrspace(10)* %43, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5170544208 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %13, {} addrspace(10)* %"'ip_phi1"), !dbg !5060
  %54 = bitcast {}*** %5 to {}**, !dbg !5060
  %55 = getelementptr inbounds {}*, {}** %54, i64 -14, !dbg !5060
  %56 = getelementptr inbounds {}*, {}** %55, i64 16, !dbg !5060
  %57 = bitcast {}** %56 to i8**, !dbg !5060
  %58 = load i8*, i8** %57, align 8, !dbg !5060
  %59 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %55, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5985126160 to {}*) to {} addrspace(10)*)), !dbg !5060
  %60 = addrspacecast {} addrspace(10)* %59 to {} addrspace(11)*, !dbg !5060
  %61 = bitcast {} addrspace(11)* %60 to [3 x i64] addrspace(11)*, !dbg !5060
  %62 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !5060
  %63 = ptrtoint {}* %62 to i64, !dbg !5060
  %64 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %61, i64 0, i64 0, !dbg !5060
  store i64 %63, i64 addrspace(11)* %64, align 8, !dbg !5060
  %65 = addrspacecast {} addrspace(10)* %"box'mi" to {} addrspace(11)*, !dbg !5060
  %66 = call {}* @julia.pointer_from_objref({} addrspace(11)* %65), !dbg !5060
  %67 = ptrtoint {}* %66 to i64, !dbg !5060
  %68 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %61, i64 0, i64 1, !dbg !5060
  store i64 %67, i64 addrspace(11)* %68, align 8, !dbg !5060
  %69 = addrspacecast {} addrspace(10)* %"'ip_phi" to {} addrspace(11)*, !dbg !5060
  %70 = call {}* @julia.pointer_from_objref({} addrspace(11)* %69), !dbg !5060
  %71 = ptrtoint {}* %70 to i64, !dbg !5060
  %72 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %61, i64 0, i64 2, !dbg !5060
  store i64 %71, i64 addrspace(11)* %72, align 8, !dbg !5060
  %73 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5548675696 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6224791504 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530968 to {}*) to {} addrspace(10)*), {} addrspace(10)* %12, {} addrspace(10)* %59, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5140509616 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %box, {} addrspace(10)* %"box'mi", {} addrspace(10)* %11, {} addrspace(10)* %"'ip_phi"), !dbg !5060
  %74 = load double, double addrspace(10)* %"'ipc", align 8, !dbg !5060, !tbaa !113, !alias.scope !5061, !noalias !5064
  store double 0.000000e+00, double addrspace(10)* %"'ipc", align 8, !dbg !5060, !tbaa !113, !alias.scope !5061, !noalias !5064
  %75 = load double, double* %"'de8", align 8, !dbg !5060
  %76 = fadd fast double %75, %74, !dbg !5060
  store double %76, double* %"'de8", align 8, !dbg !5060
  %77 = bitcast {}*** %4 to {}**, !dbg !5060
  %78 = getelementptr inbounds {}*, {}** %77, i64 -14, !dbg !5060
  %79 = getelementptr inbounds {}*, {}** %78, i64 16, !dbg !5060
  %80 = bitcast {}** %79 to i8**, !dbg !5060
  %81 = load i8*, i8** %80, align 8, !dbg !5060
  %82 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %78, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5985126160 to {}*) to {} addrspace(10)*)), !dbg !5060
  %83 = addrspacecast {} addrspace(10)* %82 to {} addrspace(11)*, !dbg !5060
  %84 = bitcast {} addrspace(11)* %83 to [3 x i64] addrspace(11)*, !dbg !5060
  %85 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !5060
  %86 = ptrtoint {}* %85 to i64, !dbg !5060
  %87 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %84, i64 0, i64 0, !dbg !5060
  store i64 %86, i64 addrspace(11)* %87, align 8, !dbg !5060
  %88 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !5060
  %89 = ptrtoint {}* %88 to i64, !dbg !5060
  %90 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %84, i64 0, i64 1, !dbg !5060
  store i64 %89, i64 addrspace(11)* %90, align 8, !dbg !5060
  %91 = addrspacecast {} addrspace(10)* %"'il_phi" to {} addrspace(11)*, !dbg !5060
  %92 = call {}* @julia.pointer_from_objref({} addrspace(11)* %91), !dbg !5060
  %93 = ptrtoint {}* %92 to i64, !dbg !5060
  %94 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %84, i64 0, i64 2, !dbg !5060
  store i64 %93, i64 addrspace(11)* %94, align 8, !dbg !5060
  %95 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5548675696 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11465234128 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530968 to {}*) to {} addrspace(10)*), {} addrspace(10)* %10, {} addrspace(10)* %82, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5140509616 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11436072592 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %9, {} addrspace(10)* %"'il_phi"), !dbg !5060
  %96 = load double, double* %"'de8", align 8, !dbg !5066
  store double 0.000000e+00, double* %"'de8", align 8, !dbg !5066
  %97 = fmul fast double %96, 0x401921FB54442D18, !dbg !5066
  %98 = load double, double* %"'de", align 8, !dbg !5066
  %99 = fadd fast double %98, %97, !dbg !5066
  store double %99, double* %"'de", align 8, !dbg !5066
  br label %inverttop
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia_gemv__1994({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, i32 zeroext "enzyme_inactive" %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3) unnamed_addr #64 !dbg !5082 {
top:
  %4 = call {}*** @julia.get_pgcstack() #65
  %ptls_field159 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field159 to i64***
  %ptls_load160161 = load i64**, i64*** %5, align 8, !tbaa !69
  %6 = getelementptr inbounds i64*, i64** %ptls_load160161, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #65, !dbg !5083
  fence syncscope("singlethread") seq_cst
  %.not = icmp eq i32 %1, 1308622848, !dbg !5084
  %. = select i1 %.not, i64 3, i64 4, !dbg !5088
  %7 = bitcast {} addrspace(10)* %2 to {} addrspace(10)* addrspace(10)*, !dbg !5089
  %arraysize_ptr228 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 %., !dbg !5089
  %8 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr228 to i64 addrspace(10)*, !dbg !5089
  %9 = addrspacecast i64 addrspace(10)* %8 to i64 addrspace(11)*, !dbg !5089
  %arraysize = load i64, i64 addrspace(11)* %9, align 8, !dbg !5089, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %value_phi4 = select i1 %.not, i64 4, i64 3, !dbg !5086
  %arraysize_ptr11227 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 %value_phi4, !dbg !5089
  %10 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr11227 to i64 addrspace(10)*, !dbg !5089
  %11 = addrspacecast i64 addrspace(10)* %10 to i64 addrspace(11)*, !dbg !5089
  %arraysize12 = load i64, i64 addrspace(11)* %11, align 8, !dbg !5089, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %12 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5090
  %13 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %12 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5090
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %13, i64 0, i32 1, !dbg !5090
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5090, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not163 = icmp eq i64 %arraysize12, %arraylen, !dbg !5092
  br i1 %.not163, label %L28, label %L22, !dbg !5091

L22:                                              ; preds = %top
  %current_task17164 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5094
  %current_task17 = bitcast {}*** %current_task17164 to {}**, !dbg !5094
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #66, !dbg !5094
  %14 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !5094
  %15 = addrspacecast {} addrspace(10)* addrspace(10)* %14 to {} addrspace(10)* addrspace(11)*, !dbg !5094
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %15, align 8, !dbg !5094, !tbaa !307, !alias.scope !117, !noalias !5095
  %16 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %15, i64 1, !dbg !5094
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %16, align 8, !dbg !5094, !tbaa !307, !alias.scope !117, !noalias !5095
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #66, !dbg !5094
  %17 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5094
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %17, i64 0, i32 0, !dbg !5094
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249126016 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !5094, !tbaa !113, !alias.scope !117, !noalias !5095
  %.repack166 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %17, i64 0, i32 1, !dbg !5094
  store i64 %arraysize12, i64 addrspace(10)* %.repack166, align 8, !dbg !5094, !tbaa !113, !alias.scope !117, !noalias !5095
  %.repack168 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %17, i64 0, i32 2, !dbg !5094
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249125968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack168, align 8, !dbg !5094, !tbaa !113, !alias.scope !117, !noalias !5095
  %.repack170 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %17, i64 0, i32 3, !dbg !5094
  store i64 %arraylen, i64 addrspace(10)* %.repack170, align 8, !dbg !5094, !tbaa !113, !alias.scope !117, !noalias !5095
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %15 release, align 8, !dbg !5094, !tbaa !307, !alias.scope !117, !noalias !5095
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #67, !dbg !5094
  %18 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !5094
  %19 = addrspacecast i8 addrspace(10)* %18 to i8 addrspace(11)*, !dbg !5094
  %20 = getelementptr inbounds i8, i8 addrspace(11)* %19, i64 8, !dbg !5094
  %21 = bitcast i8 addrspace(11)* %20 to {} addrspace(10)* addrspace(11)*, !dbg !5094
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %21 release, align 8, !dbg !5094, !tbaa !307, !alias.scope !117, !noalias !5095
  %box20 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #66, !dbg !5091
  %22 = bitcast {} addrspace(10)* %box20 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5091
  %23 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %22, i64 0, i64 0, !dbg !5091
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %23, align 8, !dbg !5091, !tbaa !113, !alias.scope !117, !noalias !5095
  %24 = addrspacecast {} addrspace(10)* %box20 to {} addrspace(12)*, !dbg !5091
  call void @ijl_throw({} addrspace(12)* %24) #65, !dbg !5091
  unreachable, !dbg !5091

L28:                                              ; preds = %top
  %25 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5098
  %26 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %25 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5098
  %arraylen_ptr21 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %26, i64 0, i32 1, !dbg !5098
  %arraylen22 = load i64, i64 addrspace(11)* %arraylen_ptr21, align 8, !dbg !5098, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not173 = icmp eq i64 %arraysize, %arraylen22, !dbg !5100
  br i1 %.not173, label %L38, label %L32, !dbg !5099

L32:                                              ; preds = %L28
  %current_task25174 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5102
  %current_task25 = bitcast {}*** %current_task25174 to {}**, !dbg !5102
  %newstruct26 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #66, !dbg !5102
  %27 = bitcast {} addrspace(10)* %newstruct26 to {} addrspace(10)* addrspace(10)*, !dbg !5102
  %28 = addrspacecast {} addrspace(10)* addrspace(10)* %27 to {} addrspace(10)* addrspace(11)*, !dbg !5102
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %28, align 8, !dbg !5102, !tbaa !307, !alias.scope !117, !noalias !5095
  %29 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %28, i64 1, !dbg !5102
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %29, align 8, !dbg !5102, !tbaa !307, !alias.scope !117, !noalias !5095
  %box28 = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #66, !dbg !5102
  %30 = bitcast {} addrspace(10)* %box28 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5102
  %.repack176 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %30, i64 0, i32 0, !dbg !5102
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249125920 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack176, align 8, !dbg !5102, !tbaa !113, !alias.scope !117, !noalias !5095
  %.repack177 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %30, i64 0, i32 1, !dbg !5102
  store i64 %arraysize, i64 addrspace(10)* %.repack177, align 8, !dbg !5102, !tbaa !113, !alias.scope !117, !noalias !5095
  %.repack179 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %30, i64 0, i32 2, !dbg !5102
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249125872 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack179, align 8, !dbg !5102, !tbaa !113, !alias.scope !117, !noalias !5095
  %.repack181 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %30, i64 0, i32 3, !dbg !5102
  store i64 %arraylen22, i64 addrspace(10)* %.repack181, align 8, !dbg !5102, !tbaa !113, !alias.scope !117, !noalias !5095
  store atomic {} addrspace(10)* %box28, {} addrspace(10)* addrspace(11)* %28 release, align 8, !dbg !5102, !tbaa !307, !alias.scope !117, !noalias !5095
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct26, {} addrspace(10)* nonnull %box28) #67, !dbg !5102
  %31 = bitcast {} addrspace(10)* %newstruct26 to i8 addrspace(10)*, !dbg !5102
  %32 = addrspacecast i8 addrspace(10)* %31 to i8 addrspace(11)*, !dbg !5102
  %33 = getelementptr inbounds i8, i8 addrspace(11)* %32, i64 8, !dbg !5102
  %34 = bitcast i8 addrspace(11)* %33 to {} addrspace(10)* addrspace(11)*, !dbg !5102
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %34 release, align 8, !dbg !5102, !tbaa !307, !alias.scope !117, !noalias !5095
  %box30 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #66, !dbg !5099
  %35 = bitcast {} addrspace(10)* %box30 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5099
  %36 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %35, i64 0, i64 0, !dbg !5099
  store {} addrspace(10)* %newstruct26, {} addrspace(10)* addrspace(10)* %36, align 8, !dbg !5099, !tbaa !113, !alias.scope !117, !noalias !5095
  %37 = addrspacecast {} addrspace(10)* %box30 to {} addrspace(12)*, !dbg !5099
  call void @ijl_throw({} addrspace(12)* %37) #65, !dbg !5099
  unreachable, !dbg !5099

L38:                                              ; preds = %L28
  %.not184 = icmp eq i64 %arraysize, 0, !dbg !5103
  br i1 %.not184, label %common.ret, label %L41, !dbg !5104

common.ret:                                       ; preds = %L182.critedge, %L152.critedge, %L49.L61_crit_edge, %L38
  %common.ret.op = phi {} addrspace(10)* [ %41, %L152.critedge ], [ %42, %L182.critedge ], [ %0, %L38 ], [ %0, %L49.L61_crit_edge ]
  ret {} addrspace(10)* %common.ret.op, !dbg !5088

L41:                                              ; preds = %L38
  %.not185 = icmp eq i64 %arraysize12, 0, !dbg !5105
  br i1 %.not185, label %L49.L61_crit_edge, label %L112, !dbg !5106

L49.L61_crit_edge:                                ; preds = %L41
  %38 = bitcast {} addrspace(10)* %0 to i8 addrspace(13)* addrspace(10)*, !dbg !5107
  %39 = addrspacecast i8 addrspace(13)* addrspace(10)* %38 to i8 addrspace(13)* addrspace(11)*, !dbg !5107
  %arrayptr189.pre257 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %39, align 16, !dbg !5107, !tbaa !382, !alias.scope !5110, !noalias !336
  %40 = shl nuw i64 %arraysize, 3, !dbg !5111
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr189.pre257, i8 0, i64 %40, i1 false) #65, !dbg !5107, !tbaa !269, !alias.scope !117, !noalias !5095
  br label %common.ret, !dbg !5088

L112:                                             ; preds = %L41
  switch i32 %1, label %L228 [
    i32 1409286144, label %L152.critedge
    i32 1308622848, label %L152.critedge
    i32 1124073472, label %L152.critedge
    i32 1392508928, label %L182.critedge
    i32 1929379840, label %L182.critedge.fold.split
    i32 1207959552, label %L219.critedge
    i32 1744830464, label %L219.critedge.fold.split
  ], !dbg !5112

L152.critedge:                                    ; preds = %L112, %L112, %L112
  %41 = call fastcc nonnull {} addrspace(10)* @julia_gemv__2035(i32 zeroext %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0) #65, !dbg !5114
  br label %common.ret

L182.critedge.fold.split:                         ; preds = %L112
  br label %L182.critedge, !dbg !5115

L182.critedge:                                    ; preds = %L182.critedge.fold.split, %L112
  %value_phi67 = phi i32 [ 1275068416, %L182.critedge.fold.split ], [ 1426063360, %L112 ], !dbg !5115
  %42 = call fastcc nonnull {} addrspace(10)* @julia_symv__2024(i32 noundef zeroext %value_phi67, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0) #65, !dbg !5115
  br label %common.ret

L219.critedge.fold.split:                         ; preds = %L112
  br label %L219.critedge, !dbg !5116

L219.critedge:                                    ; preds = %L219.critedge.fold.split, %L112
  %value_phi71 = phi i32 [ 1275068416, %L219.critedge.fold.split ], [ 1426063360, %L112 ], !dbg !5116
  %43 = call nonnull {} addrspace(10)* @ijl_box_char(i32 zeroext %value_phi71) #65, !dbg !5116
  %current_task72203 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5116
  %current_task72 = bitcast {}*** %current_task72203 to {}**, !dbg !5116
  %box73 = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task72, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5206732832 to {}*) to {} addrspace(10)*)) #66, !dbg !5116
  %44 = bitcast {} addrspace(10)* %box73 to double addrspace(10)*, !dbg !5116
  store double 1.000000e+00, double addrspace(10)* %44, align 8, !dbg !5116, !tbaa !113, !alias.scope !117, !noalias !5095
  %box75 = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task72, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5206732832 to {}*) to {} addrspace(10)*)) #66, !dbg !5116
  %45 = bitcast {} addrspace(10)* %box75 to double addrspace(10)*, !dbg !5116
  store double 0.000000e+00, double addrspace(10)* %45, align 8, !dbg !5116, !tbaa !113, !alias.scope !117, !noalias !5095
  %46 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5190854848 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %43, {} addrspace(10)* nonnull %box73, {} addrspace(10)* nonnull %2, {} addrspace(10)* nonnull %3, {} addrspace(10)* nonnull %box75, {} addrspace(10)* nonnull %0) #68, !dbg !5116
  unreachable, !dbg !5116

L228:                                             ; preds = %L112
  call void @ijl_type_error(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_j_str6, i64 0, i64 0), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5206733568 to {}*) to {} addrspace(10)*), {} addrspace(12)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(12)*)) #65, !dbg !5116
  unreachable, !dbg !5116
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia_gemv__2035(i32 zeroext "enzyme_inactive" %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3) unnamed_addr #65 !dbg !5179 {
top:
  %4 = call {}*** @julia.get_pgcstack() #66
  %ptls_field134 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field134 to i64***
  %ptls_load135136 = load i64**, i64*** %5, align 8, !tbaa !69
  %6 = getelementptr inbounds i64*, i64** %ptls_load135136, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #66, !dbg !5180
  fence syncscope("singlethread") seq_cst
  %7 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !5181
  %arraysize_ptr137 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 3, !dbg !5181
  %8 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr137 to i64 addrspace(10)*, !dbg !5181
  %9 = addrspacecast i64 addrspace(10)* %8 to i64 addrspace(11)*, !dbg !5181
  %arraysize = load i64, i64 addrspace(11)* %9, align 8, !dbg !5181, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %arraysize_ptr2138 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 4, !dbg !5181
  %10 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr2138 to i64 addrspace(10)*, !dbg !5181
  %11 = addrspacecast i64 addrspace(10)* %10 to i64 addrspace(11)*, !dbg !5181
  %arraysize3 = load i64, i64 addrspace(11)* %11, align 8, !dbg !5181, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  switch i32 %0, label %L69 [
    i32 1308622848, label %L7
    i32 1124073472, label %top.L31_crit_edge
    i32 1409286144, label %L52
  ], !dbg !5183

top.L31_crit_edge:                                ; preds = %top
  %.phi.trans.insert = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert243 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr17.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert243, i64 0, i32 1
  %arraylen18.pre = load i64, i64 addrspace(11)* %arraylen_ptr17.phi.trans.insert, align 8, !dbg !5184, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.phi.trans.insert245 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert246 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert245 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr129.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert246, i64 0, i32 1
  %arraylen130.pre = load i64, i64 addrspace(11)* %arraylen_ptr129.phi.trans.insert, align 8, !dbg !5185
  %12 = icmp ne i64 %arraylen18.pre, %arraysize, !dbg !5186
  %13 = icmp ne i64 %arraylen130.pre, %arraysize3, !dbg !5185
  %value_phi19.in = select i1 %12, i1 true, i1 %13, !dbg !5185
  br i1 %value_phi19.in, label %L41, label %L69, !dbg !5185

L7:                                               ; preds = %top
  %14 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5188
  %15 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %14 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5188
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %15, i64 0, i32 1, !dbg !5188
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5188, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %16 = icmp ne i64 %arraylen, %arraysize3, !dbg !5189
  %17 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5183
  %18 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5183
  %arraylen_ptr131 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %18, i64 0, i32 1, !dbg !5183
  %arraylen132 = load i64, i64 addrspace(11)* %arraylen_ptr131, align 8, !dbg !5183
  %19 = icmp ne i64 %arraylen132, %arraysize, !dbg !5183
  %value_phi.in = select i1 %16, i1 true, i1 %19, !dbg !5183
  br i1 %value_phi.in, label %L17, label %L69, !dbg !5183

L17:                                              ; preds = %L7
  %current_task12144 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5191
  %current_task12 = bitcast {}*** %current_task12144 to {}**, !dbg !5191
  %newstruct13 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #67, !dbg !5191
  %20 = bitcast {} addrspace(10)* %newstruct13 to {} addrspace(10)* addrspace(10)*, !dbg !5191
  %21 = addrspacecast {} addrspace(10)* addrspace(10)* %20 to {} addrspace(10)* addrspace(11)*, !dbg !5191
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %21, align 8, !dbg !5191, !tbaa !307, !alias.scope !117, !noalias !5193
  %22 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %21, i64 1, !dbg !5191
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %22, align 8, !dbg !5191, !tbaa !307, !alias.scope !117, !noalias !5193
  %box = call noalias nonnull dereferenceable(56) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 56, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4374493072 to {}*) to {} addrspace(10)*)) #67, !dbg !5191
  %23 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5191
  %.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 0, !dbg !5191
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513488 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !5191, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack146.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 1, i64 0, !dbg !5191
  store i64 %arraysize, i64 addrspace(10)* %.repack146.repack, align 8, !dbg !5191, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack146.repack156 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 1, i64 1, !dbg !5191
  store i64 %arraysize3, i64 addrspace(10)* %.repack146.repack156, align 8, !dbg !5191, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack148 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 2, !dbg !5191
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack148, align 8, !dbg !5191, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack150 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 3, !dbg !5191
  store i64 %arraylen, i64 addrspace(10)* %.repack150, align 8, !dbg !5191, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack152 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 4, !dbg !5191
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513408 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack152, align 8, !dbg !5191, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack154 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 5, !dbg !5191
  store i64 %arraylen132, i64 addrspace(10)* %.repack154, align 8, !dbg !5191, !tbaa !113, !alias.scope !117, !noalias !5193
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %21 release, align 8, !dbg !5191, !tbaa !307, !alias.scope !117, !noalias !5193
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct13, {} addrspace(10)* nonnull %box) #68, !dbg !5191
  %24 = bitcast {} addrspace(10)* %newstruct13 to i8 addrspace(10)*, !dbg !5191
  %25 = addrspacecast i8 addrspace(10)* %24 to i8 addrspace(11)*, !dbg !5191
  %26 = getelementptr inbounds i8, i8 addrspace(11)* %25, i64 8, !dbg !5191
  %27 = bitcast i8 addrspace(11)* %26 to {} addrspace(10)* addrspace(11)*, !dbg !5191
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %27 release, align 8, !dbg !5191, !tbaa !307, !alias.scope !117, !noalias !5193
  %box16 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #67, !dbg !5192
  %28 = bitcast {} addrspace(10)* %box16 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5192
  %29 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %28, i64 0, i64 0, !dbg !5192
  store {} addrspace(10)* %newstruct13, {} addrspace(10)* addrspace(10)* %29, align 8, !dbg !5192, !tbaa !113, !alias.scope !117, !noalias !5193
  %30 = addrspacecast {} addrspace(10)* %box16 to {} addrspace(12)*, !dbg !5192
  call void @ijl_throw({} addrspace(12)* %30) #66, !dbg !5192
  unreachable, !dbg !5192

L41:                                              ; preds = %top.L31_crit_edge
  %current_task24160 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5196
  %current_task24 = bitcast {}*** %current_task24160 to {}**, !dbg !5196
  %newstruct25 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #67, !dbg !5196
  %31 = bitcast {} addrspace(10)* %newstruct25 to {} addrspace(10)* addrspace(10)*, !dbg !5196
  %32 = addrspacecast {} addrspace(10)* addrspace(10)* %31 to {} addrspace(10)* addrspace(11)*, !dbg !5196
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %32, align 8, !dbg !5196, !tbaa !307, !alias.scope !117, !noalias !5193
  %33 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %32, i64 1, !dbg !5196
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %33, align 8, !dbg !5196, !tbaa !307, !alias.scope !117, !noalias !5193
  %box27 = call noalias nonnull dereferenceable(64) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 64, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4374575120 to {}*) to {} addrspace(10)*)) #67, !dbg !5196
  %34 = bitcast {} addrspace(10)* %box27 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5196
  %.repack162 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 0, !dbg !5196
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513344 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack162, align 8, !dbg !5196, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack163 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 1, !dbg !5196
  store i64 %arraysize3, i64 addrspace(10)* %.repack163, align 8, !dbg !5196, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack165 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 2, !dbg !5196
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513312 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack165, align 8, !dbg !5196, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack167 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 3, !dbg !5196
  store i64 %arraysize, i64 addrspace(10)* %.repack167, align 8, !dbg !5196, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack169 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 4, !dbg !5196
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack169, align 8, !dbg !5196, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack171 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 5, !dbg !5196
  store i64 %arraylen18.pre, i64 addrspace(10)* %.repack171, align 8, !dbg !5196, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack173 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 6, !dbg !5196
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513408 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack173, align 8, !dbg !5196, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack175 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %34, i64 0, i32 7, !dbg !5196
  store i64 %arraylen130.pre, i64 addrspace(10)* %.repack175, align 8, !dbg !5196, !tbaa !113, !alias.scope !117, !noalias !5193
  store atomic {} addrspace(10)* %box27, {} addrspace(10)* addrspace(11)* %32 release, align 8, !dbg !5196, !tbaa !307, !alias.scope !117, !noalias !5193
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct25, {} addrspace(10)* nonnull %box27) #68, !dbg !5196
  %35 = bitcast {} addrspace(10)* %newstruct25 to i8 addrspace(10)*, !dbg !5196
  %36 = addrspacecast i8 addrspace(10)* %35 to i8 addrspace(11)*, !dbg !5196
  %37 = getelementptr inbounds i8, i8 addrspace(11)* %36, i64 8, !dbg !5196
  %38 = bitcast i8 addrspace(11)* %37 to {} addrspace(10)* addrspace(11)*, !dbg !5196
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %38 release, align 8, !dbg !5196, !tbaa !307, !alias.scope !117, !noalias !5193
  %box29 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #67, !dbg !5197
  %39 = bitcast {} addrspace(10)* %box29 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5197
  %40 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %39, i64 0, i64 0, !dbg !5197
  store {} addrspace(10)* %newstruct25, {} addrspace(10)* addrspace(10)* %40, align 8, !dbg !5197, !tbaa !113, !alias.scope !117, !noalias !5193
  %41 = addrspacecast {} addrspace(10)* %box29 to {} addrspace(12)*, !dbg !5197
  call void @ijl_throw({} addrspace(12)* %41) #66, !dbg !5197
  unreachable, !dbg !5197

L52:                                              ; preds = %top
  %.phi.trans.insert248 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert249 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert248 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr32.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert249, i64 0, i32 1
  %arraylen33.pre = load i64, i64 addrspace(11)* %arraylen_ptr32.phi.trans.insert, align 8, !dbg !5198, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.phi.trans.insert251 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert252 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert251 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr127.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert252, i64 0, i32 1
  %arraylen128.pre = load i64, i64 addrspace(11)* %arraylen_ptr127.phi.trans.insert, align 8, !dbg !5199
  %42 = icmp ne i64 %arraylen33.pre, %arraysize, !dbg !5200
  %43 = icmp ne i64 %arraylen128.pre, %arraysize3, !dbg !5199
  %value_phi34.in = select i1 %42, i1 true, i1 %43, !dbg !5199
  br i1 %value_phi34.in, label %L62, label %L69, !dbg !5199

L62:                                              ; preds = %L52
  %current_task39179 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5202
  %current_task39 = bitcast {}*** %current_task39179 to {}**, !dbg !5202
  %newstruct40 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task39, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #67, !dbg !5202
  %44 = bitcast {} addrspace(10)* %newstruct40 to {} addrspace(10)* addrspace(10)*, !dbg !5202
  %45 = addrspacecast {} addrspace(10)* addrspace(10)* %44 to {} addrspace(10)* addrspace(11)*, !dbg !5202
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %45, align 8, !dbg !5202, !tbaa !307, !alias.scope !117, !noalias !5193
  %46 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %45, i64 1, !dbg !5202
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %46, align 8, !dbg !5202, !tbaa !307, !alias.scope !117, !noalias !5193
  %box42 = call noalias nonnull dereferenceable(64) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task39, i64 64, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4374575120 to {}*) to {} addrspace(10)*)) #67, !dbg !5202
  %47 = bitcast {} addrspace(10)* %box42 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5202
  %.repack181 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 0, !dbg !5202
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack181, align 8, !dbg !5202, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack182 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 1, !dbg !5202
  store i64 %arraysize3, i64 addrspace(10)* %.repack182, align 8, !dbg !5202, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack184 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 2, !dbg !5202
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513312 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack184, align 8, !dbg !5202, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack186 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 3, !dbg !5202
  store i64 %arraysize, i64 addrspace(10)* %.repack186, align 8, !dbg !5202, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack188 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 4, !dbg !5202
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack188, align 8, !dbg !5202, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack190 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 5, !dbg !5202
  store i64 %arraylen33.pre, i64 addrspace(10)* %.repack190, align 8, !dbg !5202, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack192 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 6, !dbg !5202
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513408 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack192, align 8, !dbg !5202, !tbaa !113, !alias.scope !117, !noalias !5193
  %.repack194 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %47, i64 0, i32 7, !dbg !5202
  store i64 %arraylen128.pre, i64 addrspace(10)* %.repack194, align 8, !dbg !5202, !tbaa !113, !alias.scope !117, !noalias !5193
  store atomic {} addrspace(10)* %box42, {} addrspace(10)* addrspace(11)* %45 release, align 8, !dbg !5202, !tbaa !307, !alias.scope !117, !noalias !5193
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct40, {} addrspace(10)* nonnull %box42) #68, !dbg !5202
  %48 = bitcast {} addrspace(10)* %newstruct40 to i8 addrspace(10)*, !dbg !5202
  %49 = addrspacecast i8 addrspace(10)* %48 to i8 addrspace(11)*, !dbg !5202
  %50 = getelementptr inbounds i8, i8 addrspace(11)* %49, i64 8, !dbg !5202
  %51 = bitcast i8 addrspace(11)* %50 to {} addrspace(10)* addrspace(11)*, !dbg !5202
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %51 release, align 8, !dbg !5202, !tbaa !307, !alias.scope !117, !noalias !5193
  %box44 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task39, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #67, !dbg !5203
  %52 = bitcast {} addrspace(10)* %box44 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5203
  %53 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %52, i64 0, i64 0, !dbg !5203
  store {} addrspace(10)* %newstruct40, {} addrspace(10)* addrspace(10)* %53, align 8, !dbg !5203, !tbaa !113, !alias.scope !117, !noalias !5193
  %54 = addrspacecast {} addrspace(10)* %box44 to {} addrspace(12)*, !dbg !5203
  call void @ijl_throw({} addrspace(12)* %54) #66, !dbg !5203
  unreachable, !dbg !5203

L69:                                              ; preds = %L52, %L7, %top.L31_crit_edge, %top
  %55 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !5204
  %56 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %55) #69, !dbg !5204
  %57 = bitcast {}* %56 to double**, !dbg !5204
  %arrayptr215 = load double*, double** %57, align 8, !dbg !5204, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %58 = addrspacecast {} addrspace(10)* %3 to {} addrspace(11)*, !dbg !5208
  %59 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %58) #69, !dbg !5208
  %60 = bitcast {}* %59 to double**, !dbg !5208
  %arrayptr50216 = load double*, double** %60, align 8, !dbg !5208, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %arrayptr50216274 = bitcast double* %arrayptr50216 to i8*, !dbg !5212
  %61 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !5212
  %62 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %61) #69, !dbg !5212
  %63 = bitcast {}* %62 to double**, !dbg !5212
  %arrayptr52218 = load double*, double** %63, align 8, !dbg !5212, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68
  %.not203 = icmp eq i64 %arraysize, 0, !dbg !5215
  %64 = select i1 %.not203, i64 1, i64 %arraysize, !dbg !5219
  %65 = call i64 @llvm.smax.i64(i64 %arraysize, i64 %64) #66, !dbg !5219
  %66 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %1, {} addrspace(10)* nonnull %2, {} addrspace(10)* nonnull %3) #66, !dbg !5220
  %67 = icmp slt i32 %0, 0, !dbg !5221
  br i1 %67, label %L120, label %L115, !dbg !5224

L115:                                             ; preds = %L69
  %68 = lshr i32 %0, 24, !dbg !5229
  br label %L133, !dbg !5224

L120:                                             ; preds = %L69
  %69 = call fastcc i32 @julia_UInt32_cold_2030(i32 zeroext %0) #66, !dbg !5224
  %70 = icmp ugt i32 %69, 255, !dbg !5231
  br i1 %70, label %L126, label %L133, !dbg !5231

L126:                                             ; preds = %L120
  call fastcc void @julia_throw_inexacterror_2028(i32 zeroext %69) #70, !dbg !5231
  unreachable, !dbg !5231

L133:                                             ; preds = %L120, %L115
  %value_phi64.in = phi i32 [ %68, %L115 ], [ %69, %L120 ]
  %value_phi64 = trunc i32 %value_phi64.in to i8, !dbg !5234
  switch i8 %value_phi64, label %.thread.fold.split [
    i8 78, label %.thread
    i8 110, label %.thread
    i8 84, label %71
    i8 116, label %72
    i8 67, label %select.unfold
    i8 99, label %select.unfold
  ], !dbg !5220

71:                                               ; preds = %L133
  br label %.thread, !dbg !5220

72:                                               ; preds = %L133
  br label %.thread, !dbg !5220

select.unfold:                                    ; preds = %L133, %L133
  br label %.thread, !dbg !5220

.thread.fold.split:                               ; preds = %L133
  br label %.thread, !dbg !5220

.thread:                                          ; preds = %.thread.fold.split, %select.unfold, %72, %71, %L133, %L133
  %73 = phi i32 [ 0, %L133 ], [ 0, %L133 ], [ 2, %.thread.fold.split ], [ 0, %72 ], [ 0, %71 ], [ 0, %select.unfold ]
  %74 = phi i1 [ true, %L133 ], [ true, %L133 ], [ false, %.thread.fold.split ], [ false, %72 ], [ false, %71 ], [ false, %select.unfold ]
  %75 = phi i1 [ false, %L133 ], [ false, %L133 ], [ false, %.thread.fold.split ], [ true, %72 ], [ true, %71 ], [ true, %select.unfold ]
  %76 = trunc i64 %arraysize to i32, !dbg !5220
  %77 = trunc i64 %arraysize3 to i32, !dbg !5220
  %78 = trunc i64 %65 to i32, !dbg !5220
  %79 = icmp slt i32 %76, 0, !dbg !5220
  %80 = select i1 %79, i32 3, i32 %73, !dbg !5220
  %81 = icmp slt i32 %77, 0, !dbg !5220
  %82 = select i1 %81, i32 4, i32 %80, !dbg !5220
  %83 = call i32 @llvm.smax.i32(i32 %76, i32 1) #66, !dbg !5220
  %84 = icmp sgt i32 %83, %78, !dbg !5220
  %85 = select i1 %84, i32 7, i32 %82, !dbg !5220
  %86 = icmp eq i32 %85, 0, !dbg !5220
  call void @llvm.assume(i1 %86), !dbg !5220
  %87 = icmp eq i32 %76, 0, !dbg !5220
  %88 = icmp eq i32 %77, 0, !dbg !5220
  %89 = or i1 %87, %88, !dbg !5220
  br i1 %89, label %dgemv_64_.exit, label %90, !dbg !5220

90:                                               ; preds = %.thread
  %91 = select i1 %74, i32 %77, i32 %76, !dbg !5220
  %92 = select i1 %74, i32 %76, i32 %77, !dbg !5220
  %93 = icmp sgt i32 %92, 0, !dbg !5220
  br i1 %93, label %.preheader, label %.loopexit273, !dbg !5220

.preheader:                                       ; preds = %90
  %94 = zext i32 %92 to i64, !dbg !5220
  %95 = shl nuw nsw i64 %94, 3, !dbg !5220
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %arrayptr50216274, i8 0, i64 %95, i1 false) #66, !dbg !5220, !tbaa !1731, !noalias !5235
  br label %.loopexit273, !dbg !5220

.loopexit273:                                     ; preds = %90, %.preheader
  br i1 %75, label %96, label %120, !dbg !5220

96:                                               ; preds = %.loopexit273
  %97 = icmp sgt i32 %92, 0, !dbg !5220
  br i1 %97, label %98, label %dgemv_64_.exit, !dbg !5220

98:                                               ; preds = %96
  %99 = icmp sgt i32 %91, 0, !dbg !5220
  %sext264 = shl i64 %65, 32, !dbg !5220
  %100 = ashr exact i64 %sext264, 32, !dbg !5220
  %101 = zext i32 %92 to i64, !dbg !5220
  %102 = zext i32 %91 to i64, !dbg !5220
  br label %103, !dbg !5220

103:                                              ; preds = %.loopexit, %98
  %iv4 = phi i64 [ %iv.next5, %.loopexit ], [ 0, %98 ], !dbg !5220
  %iv.next5 = add nuw nsw i64 %iv4, 1, !dbg !5220
  br i1 %99, label %104, label %.loopexit, !dbg !5220

104:                                              ; preds = %103
  %105 = mul nsw i64 %iv4, %100, !dbg !5220
  br label %106, !dbg !5220

106:                                              ; preds = %106, %104
  %iv6 = phi i64 [ %iv.next7, %106 ], [ 0, %104 ], !dbg !5220
  %107 = phi double [ 0.000000e+00, %104 ], [ %113, %106 ], !dbg !5220
  %iv.next7 = add nuw nsw i64 %iv6, 1, !dbg !5220
  %108 = getelementptr inbounds double, double* %arrayptr215, i64 %iv6, !dbg !5220
  %109 = load double, double* %108, align 8, !dbg !5220, !tbaa !1731
  %110 = add nsw i64 %iv6, %105, !dbg !5220
  %111 = getelementptr inbounds double, double* %arrayptr52218, i64 %110, !dbg !5220
  %112 = load double, double* %111, align 8, !dbg !5220, !tbaa !1731
  %113 = call double @llvm.fmuladd.f64(double %109, double %112, double %107) #66, !dbg !5220
  %114 = icmp eq i64 %iv.next7, %102, !dbg !5220
  br i1 %114, label %.loopexit.loopexit, label %106, !dbg !5220, !llvm.loop !5236

.loopexit.loopexit:                               ; preds = %106
  br label %.loopexit, !dbg !5220

.loopexit:                                        ; preds = %.loopexit.loopexit, %103
  %115 = phi double [ 0.000000e+00, %103 ], [ %113, %.loopexit.loopexit ], !dbg !5220
  %116 = getelementptr inbounds double, double* %arrayptr50216, i64 %iv4, !dbg !5220
  %117 = load double, double* %116, align 8, !dbg !5220, !tbaa !1731
  %118 = fadd double %115, %117, !dbg !5220
  store double %118, double* %116, align 8, !dbg !5220, !tbaa !1731, !noalias !5235
  %119 = icmp eq i64 %iv.next5, %101, !dbg !5220
  br i1 %119, label %dgemv_64_.exit.loopexit, label %103, !dbg !5220, !llvm.loop !5237

120:                                              ; preds = %.loopexit273
  call void @llvm.assume(i1 %74), !dbg !5220
  %121 = icmp sgt i32 %91, 0, !dbg !5220
  br i1 %121, label %122, label %dgemv_64_.exit, !dbg !5220

122:                                              ; preds = %120
  %123 = icmp sgt i32 %92, 0, !dbg !5220
  %sext = shl i64 %65, 32, !dbg !5220
  %124 = ashr exact i64 %sext, 32, !dbg !5220
  %125 = zext i32 %91 to i64, !dbg !5220
  %126 = zext i32 %92 to i64, !dbg !5220
  br label %127, !dbg !5220

127:                                              ; preds = %.loopexit269, %122
  %iv = phi i64 [ %iv.next, %.loopexit269 ], [ 0, %122 ], !dbg !5220
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5220
  %128 = getelementptr inbounds double, double* %arrayptr215, i64 %iv, !dbg !5220
  %129 = load double, double* %128, align 8, !dbg !5220, !tbaa !1731
  br i1 %123, label %130, label %.loopexit269, !dbg !5220

130:                                              ; preds = %127
  %131 = mul nsw i64 %iv, %124, !dbg !5220
  br label %132, !dbg !5220

132:                                              ; preds = %132, %130
  %iv2 = phi i64 [ %iv.next3, %132 ], [ 0, %130 ], !dbg !5220
  %iv.next3 = add nuw nsw i64 %iv2, 1, !dbg !5220
  %133 = add nsw i64 %iv2, %131, !dbg !5220
  %134 = getelementptr inbounds double, double* %arrayptr52218, i64 %133, !dbg !5220
  %135 = load double, double* %134, align 8, !dbg !5220, !tbaa !1731
  %136 = getelementptr inbounds double, double* %arrayptr50216, i64 %iv2, !dbg !5220
  %137 = load double, double* %136, align 8, !dbg !5220, !tbaa !1731
  %138 = call double @llvm.fmuladd.f64(double %129, double %135, double %137) #66, !dbg !5220
  store double %138, double* %136, align 8, !dbg !5220, !tbaa !1731, !noalias !5235
  %139 = icmp eq i64 %iv.next3, %126, !dbg !5220
  br i1 %139, label %.loopexit269.loopexit, label %132, !dbg !5220, !llvm.loop !5238

.loopexit269.loopexit:                            ; preds = %132
  br label %.loopexit269, !dbg !5220

.loopexit269:                                     ; preds = %.loopexit269.loopexit, %127
  %140 = icmp eq i64 %iv.next, %125, !dbg !5220
  br i1 %140, label %dgemv_64_.exit.loopexit1, label %127, !dbg !5220, !llvm.loop !5239

dgemv_64_.exit.loopexit:                          ; preds = %.loopexit
  br label %dgemv_64_.exit, !dbg !5220

dgemv_64_.exit.loopexit1:                         ; preds = %.loopexit269
  br label %dgemv_64_.exit, !dbg !5220

dgemv_64_.exit:                                   ; preds = %dgemv_64_.exit.loopexit1, %dgemv_64_.exit.loopexit, %120, %96, %.thread
  call void @llvm.julia.gc_preserve_end(token %66) #66, !dbg !5220
  ret {} addrspace(10)* %3, !dbg !5240
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__2035(i32 zeroext "enzyme_inactive" %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3, {} addrspace(10)* align 16 %"'2") unnamed_addr #65 !dbg !5241 {
top:
  %4 = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %5 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 0
  %"iv4'ac" = alloca i64, align 8
  %"iv6'ac" = alloca i64, align 8
  %"iv'ac" = alloca i64, align 8
  %"iv2'ac" = alloca i64, align 8
  %_cache = alloca double*, align 8
  %_cache10 = alloca double*, align 8
  %_cache12 = alloca double*, align 8
  %_cache14 = alloca double*, align 8
  %6 = call {}*** @julia.get_pgcstack() #66
  %ptls_field134 = getelementptr inbounds {}**, {}*** %6, i64 2
  %7 = bitcast {}*** %ptls_field134 to i64***
  %ptls_load135136 = load i64**, i64*** %7, align 8, !tbaa !69, !alias.scope !5242, !noalias !5245
  %8 = getelementptr inbounds i64*, i64** %ptls_load135136, i64 2
  %safepoint = load i64*, i64** %8, align 8, !tbaa !73, !invariant.load !68, !alias.scope !5247, !noalias !5250
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #66, !dbg !5252
  fence syncscope("singlethread") seq_cst
  %9 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !5253
  %arraysize_ptr137 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %9, i64 3, !dbg !5253
  %10 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr137 to i64 addrspace(10)*, !dbg !5253
  %11 = addrspacecast i64 addrspace(10)* %10 to i64 addrspace(11)*, !dbg !5253
  %arraysize = load i64, i64 addrspace(11)* %11, align 8, !dbg !5253, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !5255, !noalias !5258
  %12 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 3, !dbg !5253
  store i64 %arraysize, i64* %12, align 8, !dbg !5253
  %arraysize_ptr2138 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %9, i64 4, !dbg !5253
  %13 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr2138 to i64 addrspace(10)*, !dbg !5253
  %14 = addrspacecast i64 addrspace(10)* %13 to i64 addrspace(11)*, !dbg !5253
  %arraysize3 = load i64, i64 addrspace(11)* %14, align 8, !dbg !5253, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !5255, !noalias !5258
  switch i32 %0, label %L69 [
    i32 1308622848, label %L7
    i32 1124073472, label %top.L31_crit_edge
    i32 1409286144, label %L52
  ], !dbg !5260

top.L31_crit_edge:                                ; preds = %top
  %.phi.trans.insert = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert243 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr17.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert243, i64 0, i32 1
  %arraylen18.pre = load i64, i64 addrspace(11)* %arraylen_ptr17.phi.trans.insert, align 8, !dbg !5261, !tbaa !332, !range !87, !alias.scope !5263, !noalias !5266
  %.phi.trans.insert245 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert246 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert245 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr129.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert246, i64 0, i32 1
  %arraylen130.pre = load i64, i64 addrspace(11)* %arraylen_ptr129.phi.trans.insert, align 8, !dbg !5262, !alias.scope !5268, !noalias !5271
  %15 = icmp ne i64 %arraylen18.pre, %arraysize, !dbg !5273
  %16 = icmp ne i64 %arraylen130.pre, %arraysize3, !dbg !5262
  %value_phi19.in = select i1 %15, i1 true, i1 %16, !dbg !5262
  br i1 %value_phi19.in, label %L41, label %L69, !dbg !5262

L7:                                               ; preds = %top
  %17 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5275
  %18 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5275
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %18, i64 0, i32 1, !dbg !5275
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5275, !tbaa !332, !range !87, !alias.scope !5263, !noalias !5266
  %19 = icmp ne i64 %arraylen, %arraysize3, !dbg !5276
  %20 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5260
  %21 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %20 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5260
  %arraylen_ptr131 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %21, i64 0, i32 1, !dbg !5260
  %arraylen132 = load i64, i64 addrspace(11)* %arraylen_ptr131, align 8, !dbg !5260, !alias.scope !5268, !noalias !5271
  %22 = icmp ne i64 %arraylen132, %arraysize, !dbg !5260
  %value_phi.in = select i1 %19, i1 true, i1 %22, !dbg !5260
  br i1 %value_phi.in, label %L17, label %L69, !dbg !5260

L17:                                              ; preds = %L7
  %current_task12144 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5278
  %current_task12 = bitcast {}*** %current_task12144 to {}**, !dbg !5278
  %newstruct13 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #67, !dbg !5278
  %23 = bitcast {} addrspace(10)* %newstruct13 to {} addrspace(10)* addrspace(10)*, !dbg !5278
  %24 = addrspacecast {} addrspace(10)* addrspace(10)* %23 to {} addrspace(10)* addrspace(11)*, !dbg !5278
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %24, align 8, !dbg !5278, !tbaa !307, !alias.scope !117, !noalias !5280
  %25 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %24, i64 1, !dbg !5278
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %25, align 8, !dbg !5278, !tbaa !307, !alias.scope !117, !noalias !5280
  %box = call noalias nonnull dereferenceable(56) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 56, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4374493072 to {}*) to {} addrspace(10)*)) #67, !dbg !5278
  %26 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5278
  %.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 0, !dbg !5278
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513488 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !5278, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack146.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 1, i64 0, !dbg !5278
  store i64 %arraysize, i64 addrspace(10)* %.repack146.repack, align 8, !dbg !5278, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack146.repack156 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 1, i64 1, !dbg !5278
  store i64 %arraysize3, i64 addrspace(10)* %.repack146.repack156, align 8, !dbg !5278, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack148 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 2, !dbg !5278
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack148, align 8, !dbg !5278, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack150 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 3, !dbg !5278
  store i64 %arraylen, i64 addrspace(10)* %.repack150, align 8, !dbg !5278, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack152 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 4, !dbg !5278
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513408 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack152, align 8, !dbg !5278, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack154 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %26, i64 0, i32 5, !dbg !5278
  store i64 %arraylen132, i64 addrspace(10)* %.repack154, align 8, !dbg !5278, !tbaa !113, !alias.scope !117, !noalias !5280
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %24 release, align 8, !dbg !5278, !tbaa !307, !alias.scope !117, !noalias !5280
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct13, {} addrspace(10)* nonnull %box) #68, !dbg !5278
  %27 = bitcast {} addrspace(10)* %newstruct13 to i8 addrspace(10)*, !dbg !5278
  %28 = addrspacecast i8 addrspace(10)* %27 to i8 addrspace(11)*, !dbg !5278
  %29 = getelementptr inbounds i8, i8 addrspace(11)* %28, i64 8, !dbg !5278
  %30 = bitcast i8 addrspace(11)* %29 to {} addrspace(10)* addrspace(11)*, !dbg !5278
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %30 release, align 8, !dbg !5278, !tbaa !307, !alias.scope !117, !noalias !5280
  %box16 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #67, !dbg !5279
  %31 = bitcast {} addrspace(10)* %box16 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5279
  %32 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %31, i64 0, i64 0, !dbg !5279
  store {} addrspace(10)* %newstruct13, {} addrspace(10)* addrspace(10)* %32, align 8, !dbg !5279, !tbaa !113, !alias.scope !117, !noalias !5280
  %33 = addrspacecast {} addrspace(10)* %box16 to {} addrspace(12)*, !dbg !5279
  call void @ijl_throw({} addrspace(12)* %33) #66, !dbg !5279
  unreachable, !dbg !5279

L41:                                              ; preds = %top.L31_crit_edge
  %current_task24160 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5283
  %current_task24 = bitcast {}*** %current_task24160 to {}**, !dbg !5283
  %newstruct25 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #67, !dbg !5283
  %34 = bitcast {} addrspace(10)* %newstruct25 to {} addrspace(10)* addrspace(10)*, !dbg !5283
  %35 = addrspacecast {} addrspace(10)* addrspace(10)* %34 to {} addrspace(10)* addrspace(11)*, !dbg !5283
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %35, align 8, !dbg !5283, !tbaa !307, !alias.scope !117, !noalias !5280
  %36 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %35, i64 1, !dbg !5283
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %36, align 8, !dbg !5283, !tbaa !307, !alias.scope !117, !noalias !5280
  %box27 = call noalias nonnull dereferenceable(64) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 64, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4374575120 to {}*) to {} addrspace(10)*)) #67, !dbg !5283
  %37 = bitcast {} addrspace(10)* %box27 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5283
  %.repack162 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 0, !dbg !5283
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513344 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack162, align 8, !dbg !5283, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack163 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 1, !dbg !5283
  store i64 %arraysize3, i64 addrspace(10)* %.repack163, align 8, !dbg !5283, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack165 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 2, !dbg !5283
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513312 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack165, align 8, !dbg !5283, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack167 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 3, !dbg !5283
  store i64 %arraysize, i64 addrspace(10)* %.repack167, align 8, !dbg !5283, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack169 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 4, !dbg !5283
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack169, align 8, !dbg !5283, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack171 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 5, !dbg !5283
  store i64 %arraylen18.pre, i64 addrspace(10)* %.repack171, align 8, !dbg !5283, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack173 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 6, !dbg !5283
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513408 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack173, align 8, !dbg !5283, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack175 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 7, !dbg !5283
  store i64 %arraylen130.pre, i64 addrspace(10)* %.repack175, align 8, !dbg !5283, !tbaa !113, !alias.scope !117, !noalias !5280
  store atomic {} addrspace(10)* %box27, {} addrspace(10)* addrspace(11)* %35 release, align 8, !dbg !5283, !tbaa !307, !alias.scope !117, !noalias !5280
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct25, {} addrspace(10)* nonnull %box27) #68, !dbg !5283
  %38 = bitcast {} addrspace(10)* %newstruct25 to i8 addrspace(10)*, !dbg !5283
  %39 = addrspacecast i8 addrspace(10)* %38 to i8 addrspace(11)*, !dbg !5283
  %40 = getelementptr inbounds i8, i8 addrspace(11)* %39, i64 8, !dbg !5283
  %41 = bitcast i8 addrspace(11)* %40 to {} addrspace(10)* addrspace(11)*, !dbg !5283
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %41 release, align 8, !dbg !5283, !tbaa !307, !alias.scope !117, !noalias !5280
  %box29 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #67, !dbg !5284
  %42 = bitcast {} addrspace(10)* %box29 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5284
  %43 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %42, i64 0, i64 0, !dbg !5284
  store {} addrspace(10)* %newstruct25, {} addrspace(10)* addrspace(10)* %43, align 8, !dbg !5284, !tbaa !113, !alias.scope !117, !noalias !5280
  %44 = addrspacecast {} addrspace(10)* %box29 to {} addrspace(12)*, !dbg !5284
  call void @ijl_throw({} addrspace(12)* %44) #66, !dbg !5284
  unreachable, !dbg !5284

L52:                                              ; preds = %top
  %.phi.trans.insert248 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert249 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert248 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr32.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert249, i64 0, i32 1
  %arraylen33.pre = load i64, i64 addrspace(11)* %arraylen_ptr32.phi.trans.insert, align 8, !dbg !5285, !tbaa !332, !range !87, !alias.scope !5263, !noalias !5266
  %.phi.trans.insert251 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert252 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert251 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr127.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert252, i64 0, i32 1
  %arraylen128.pre = load i64, i64 addrspace(11)* %arraylen_ptr127.phi.trans.insert, align 8, !dbg !5286, !alias.scope !5268, !noalias !5271
  %45 = icmp ne i64 %arraylen33.pre, %arraysize, !dbg !5287
  %46 = icmp ne i64 %arraylen128.pre, %arraysize3, !dbg !5286
  %value_phi34.in = select i1 %45, i1 true, i1 %46, !dbg !5286
  br i1 %value_phi34.in, label %L62, label %L69, !dbg !5286

L62:                                              ; preds = %L52
  %current_task39179 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5289
  %current_task39 = bitcast {}*** %current_task39179 to {}**, !dbg !5289
  %newstruct40 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task39, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #67, !dbg !5289
  %47 = bitcast {} addrspace(10)* %newstruct40 to {} addrspace(10)* addrspace(10)*, !dbg !5289
  %48 = addrspacecast {} addrspace(10)* addrspace(10)* %47 to {} addrspace(10)* addrspace(11)*, !dbg !5289
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %48, align 8, !dbg !5289, !tbaa !307, !alias.scope !117, !noalias !5280
  %49 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %48, i64 1, !dbg !5289
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %49, align 8, !dbg !5289, !tbaa !307, !alias.scope !117, !noalias !5280
  %box42 = call noalias nonnull dereferenceable(64) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task39, i64 64, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4374575120 to {}*) to {} addrspace(10)*)) #67, !dbg !5289
  %50 = bitcast {} addrspace(10)* %box42 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5289
  %.repack181 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 0, !dbg !5289
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack181, align 8, !dbg !5289, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack182 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 1, !dbg !5289
  store i64 %arraysize3, i64 addrspace(10)* %.repack182, align 8, !dbg !5289, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack184 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 2, !dbg !5289
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513312 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack184, align 8, !dbg !5289, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack186 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 3, !dbg !5289
  store i64 %arraysize, i64 addrspace(10)* %.repack186, align 8, !dbg !5289, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack188 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 4, !dbg !5289
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack188, align 8, !dbg !5289, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack190 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 5, !dbg !5289
  store i64 %arraylen33.pre, i64 addrspace(10)* %.repack190, align 8, !dbg !5289, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack192 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 6, !dbg !5289
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513408 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack192, align 8, !dbg !5289, !tbaa !113, !alias.scope !117, !noalias !5280
  %.repack194 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %50, i64 0, i32 7, !dbg !5289
  store i64 %arraylen128.pre, i64 addrspace(10)* %.repack194, align 8, !dbg !5289, !tbaa !113, !alias.scope !117, !noalias !5280
  store atomic {} addrspace(10)* %box42, {} addrspace(10)* addrspace(11)* %48 release, align 8, !dbg !5289, !tbaa !307, !alias.scope !117, !noalias !5280
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct40, {} addrspace(10)* nonnull %box42) #68, !dbg !5289
  %51 = bitcast {} addrspace(10)* %newstruct40 to i8 addrspace(10)*, !dbg !5289
  %52 = addrspacecast i8 addrspace(10)* %51 to i8 addrspace(11)*, !dbg !5289
  %53 = getelementptr inbounds i8, i8 addrspace(11)* %52, i64 8, !dbg !5289
  %54 = bitcast i8 addrspace(11)* %53 to {} addrspace(10)* addrspace(11)*, !dbg !5289
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %54 release, align 8, !dbg !5289, !tbaa !307, !alias.scope !117, !noalias !5280
  %box44 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task39, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #67, !dbg !5290
  %55 = bitcast {} addrspace(10)* %box44 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5290
  %56 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %55, i64 0, i64 0, !dbg !5290
  store {} addrspace(10)* %newstruct40, {} addrspace(10)* addrspace(10)* %56, align 8, !dbg !5290, !tbaa !113, !alias.scope !117, !noalias !5280
  %57 = addrspacecast {} addrspace(10)* %box44 to {} addrspace(12)*, !dbg !5290
  call void @ijl_throw({} addrspace(12)* %57) #66, !dbg !5290
  unreachable, !dbg !5290

L69:                                              ; preds = %L52, %L7, %top.L31_crit_edge, %top
  %"'ipc9" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !5291
  %58 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !5291
  %59 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc9"), !dbg !5291
  %60 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %58) #69, !dbg !5291
  %"'ipc8" = bitcast {}* %59 to double**, !dbg !5291
  %61 = bitcast {}* %60 to double**, !dbg !5291
  %"arrayptr215'ipl" = load double*, double** %"'ipc8", align 8, !dbg !5291, !tbaa !382, !alias.scope !5295, !noalias !5296, !nonnull !68
  %62 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 2, !dbg !5291
  store double* %"arrayptr215'ipl", double** %62, align 8, !dbg !5291
  %arrayptr215 = load double*, double** %61, align 8, !dbg !5291, !tbaa !382, !alias.scope !5263, !noalias !5266, !nonnull !68
  %"'ipc7" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !5297
  %63 = addrspacecast {} addrspace(10)* %3 to {} addrspace(11)*, !dbg !5297
  %64 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc7"), !dbg !5297
  %65 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %63) #69, !dbg !5297
  %"'ipc6" = bitcast {}* %64 to double**, !dbg !5297
  %66 = bitcast {}* %65 to double**, !dbg !5297
  %"arrayptr50216'ipl" = load double*, double** %"'ipc6", align 8, !dbg !5297, !tbaa !382, !alias.scope !5301, !noalias !5302, !nonnull !68
  %67 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 1, !dbg !5297
  store double* %"arrayptr50216'ipl", double** %67, align 8, !dbg !5297
  %arrayptr50216 = load double*, double** %66, align 8, !dbg !5297, !tbaa !382, !alias.scope !5303, !noalias !5304, !nonnull !68
  %"arrayptr50216274'ipc" = bitcast double* %"arrayptr50216'ipl" to i8*, !dbg !5305
  %arrayptr50216274 = bitcast double* %arrayptr50216 to i8*, !dbg !5305
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !5305
  %68 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !5305
  %69 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !5305
  %70 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %68) #69, !dbg !5305
  %"'ipc" = bitcast {}* %69 to double**, !dbg !5305
  %71 = bitcast {}* %70 to double**, !dbg !5305
  %"arrayptr52218'ipl" = load double*, double** %"'ipc", align 8, !dbg !5305, !tbaa !73, !alias.scope !5308, !noalias !5309, !nonnull !68
  %72 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 0, !dbg !5305
  store double* %"arrayptr52218'ipl", double** %72, align 8, !dbg !5305
  %arrayptr52218 = load double*, double** %71, align 8, !dbg !5305, !tbaa !73, !invariant.load !68, !alias.scope !5255, !noalias !5258, !nonnull !68
  %.not203 = icmp eq i64 %arraysize, 0, !dbg !5310
  %73 = select i1 %.not203, i64 1, i64 %arraysize, !dbg !5314
  %74 = call i64 @llvm.smax.i64(i64 %arraysize, i64 %73) #66, !dbg !5314
  %75 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'", {} addrspace(10)* %2, {} addrspace(10)* %"'1", {} addrspace(10)* %3, {} addrspace(10)* %"'2"), !dbg !5315
  %76 = icmp slt i32 %0, 0, !dbg !5316
  br i1 %76, label %L120, label %L115, !dbg !5319

L115:                                             ; preds = %L69
  %77 = lshr i32 %0, 24, !dbg !5324
  br label %L133, !dbg !5319

L120:                                             ; preds = %L69
  %78 = call fastcc i32 @julia_UInt32_cold_2030(i32 zeroext %0) #66, !dbg !5319
  %79 = icmp ugt i32 %78, 255, !dbg !5326
  br i1 %79, label %L126, label %L133, !dbg !5326

L126:                                             ; preds = %L120
  call fastcc void @julia_throw_inexacterror_2028(i32 zeroext %78) #70, !dbg !5326
  unreachable, !dbg !5326

L133:                                             ; preds = %L120, %L115
  %value_phi64.in = phi i32 [ %77, %L115 ], [ %78, %L120 ]
  %value_phi64 = trunc i32 %value_phi64.in to i8, !dbg !5329
  %80 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 4, !dbg !5315
  store i8 %value_phi64, i8* %80, align 1, !dbg !5315
  switch i8 %value_phi64, label %.thread.fold.split [
    i8 78, label %.thread
    i8 110, label %.thread
    i8 84, label %81
    i8 116, label %82
    i8 67, label %select.unfold
    i8 99, label %select.unfold
  ], !dbg !5315

81:                                               ; preds = %L133
  br label %.thread, !dbg !5315

82:                                               ; preds = %L133
  br label %.thread, !dbg !5315

select.unfold:                                    ; preds = %L133, %L133
  br label %.thread, !dbg !5315

.thread.fold.split:                               ; preds = %L133
  br label %.thread, !dbg !5315

.thread:                                          ; preds = %.thread.fold.split, %select.unfold, %82, %81, %L133, %L133
  %83 = phi i32 [ 0, %L133 ], [ 0, %L133 ], [ 2, %.thread.fold.split ], [ 0, %82 ], [ 0, %81 ], [ 0, %select.unfold ]
  %84 = phi i1 [ true, %L133 ], [ true, %L133 ], [ false, %.thread.fold.split ], [ false, %82 ], [ false, %81 ], [ false, %select.unfold ]
  %85 = phi i1 [ false, %L133 ], [ false, %L133 ], [ false, %.thread.fold.split ], [ true, %82 ], [ true, %81 ], [ true, %select.unfold ]
  %86 = trunc i64 %arraysize to i32, !dbg !5315
  %87 = trunc i64 %arraysize3 to i32, !dbg !5315
  %88 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 5, !dbg !5315
  store i32 %87, i32* %88, align 4, !dbg !5315
  %89 = trunc i64 %74 to i32, !dbg !5315
  %90 = icmp slt i32 %86, 0, !dbg !5315
  %91 = select i1 %90, i32 3, i32 %83, !dbg !5315
  %92 = icmp slt i32 %87, 0, !dbg !5315
  %93 = select i1 %92, i32 4, i32 %91, !dbg !5315
  %94 = call i32 @llvm.smax.i32(i32 %86, i32 1) #66, !dbg !5315
  %95 = icmp sgt i32 %94, %89, !dbg !5315
  %96 = select i1 %95, i32 7, i32 %93, !dbg !5315
  %97 = icmp eq i32 %96, 0, !dbg !5315
  call void @llvm.assume(i1 %97), !dbg !5315
  %98 = icmp eq i32 %86, 0, !dbg !5315
  %99 = icmp eq i32 %87, 0, !dbg !5315
  %100 = or i1 %98, %99, !dbg !5315
  br i1 %100, label %dgemv_64_.exit, label %101, !dbg !5315

101:                                              ; preds = %.thread
  %102 = select i1 %84, i32 %87, i32 %86, !dbg !5315
  %103 = select i1 %84, i32 %86, i32 %87, !dbg !5315
  %104 = icmp sgt i32 %103, 0, !dbg !5315
  br i1 %104, label %.preheader, label %.loopexit273, !dbg !5315

.preheader:                                       ; preds = %101
  %105 = zext i32 %103 to i64, !dbg !5315
  %106 = shl nuw nsw i64 %105, 3, !dbg !5315
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %arrayptr50216274, i8 0, i64 %106, i1 false) #66, !dbg !5315, !tbaa !1731, !noalias !5330
  br label %.loopexit273, !dbg !5315

.loopexit273:                                     ; preds = %.preheader, %101
  br i1 %85, label %107, label %152, !dbg !5315

107:                                              ; preds = %.loopexit273
  %108 = icmp sgt i32 %103, 0, !dbg !5315
  br i1 %108, label %109, label %dgemv_64_.exit, !dbg !5315

109:                                              ; preds = %107
  %110 = icmp sgt i32 %102, 0, !dbg !5315
  %sext264 = shl i64 %74, 32, !dbg !5315
  %111 = ashr exact i64 %sext264, 32, !dbg !5315
  %112 = zext i32 %103 to i64, !dbg !5315
  %113 = zext i32 %102 to i64, !dbg !5315
  %114 = add nsw i64 %112, -1, !dbg !5315
  %115 = add nsw i64 %113, -1, !dbg !5315
  %116 = add nuw i64 %114, 1, !dbg !5315
  %117 = add nuw i64 %115, 1, !dbg !5315
  %118 = mul nuw nsw i64 %117, %116, !dbg !5315
  %119 = mul nuw i64 %118, 8, !dbg !5315
  %120 = call noalias nonnull i8* @malloc(i64 %119), !dbg !5315
  %_malloccache = bitcast i8* %120 to double*, !dbg !5315
  %121 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 6, !dbg !5315
  store double* %_malloccache, double** %121, align 8, !dbg !5315
  store double* %_malloccache, double** %_cache, align 8, !dbg !5315, !invariant.group !5331
  %122 = mul nuw i64 %118, 8, !dbg !5315
  %123 = call noalias nonnull i8* @malloc(i64 %122), !dbg !5315
  %_malloccache11 = bitcast i8* %123 to double*, !dbg !5315
  %124 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 7, !dbg !5315
  store double* %_malloccache11, double** %124, align 8, !dbg !5315
  store double* %_malloccache11, double** %_cache10, align 8, !dbg !5315, !invariant.group !5332
  br label %125, !dbg !5315

125:                                              ; preds = %.loopexit, %109
  %iv4 = phi i64 [ %iv.next5, %.loopexit ], [ 0, %109 ], !dbg !5315
  %iv.next5 = add nuw nsw i64 %iv4, 1, !dbg !5315
  br i1 %110, label %126, label %.loopexit, !dbg !5315

126:                                              ; preds = %125
  %127 = mul nsw i64 %iv4, %111, !dbg !5315
  br label %128, !dbg !5315

128:                                              ; preds = %128, %126
  %iv6 = phi i64 [ %iv.next7, %128 ], [ 0, %126 ], !dbg !5315
  %129 = phi double [ 0.000000e+00, %126 ], [ %145, %128 ], !dbg !5315
  %iv.next7 = add nuw nsw i64 %iv6, 1, !dbg !5315
  %130 = getelementptr inbounds double, double* %arrayptr215, i64 %iv6, !dbg !5315
  %131 = load double, double* %130, align 8, !dbg !5315, !tbaa !1731, !alias.scope !5333, !noalias !5336
  %132 = load double*, double** %_cache, align 8, !dbg !5315, !dereferenceable !306, !invariant.group !5331
  %133 = mul nuw nsw i64 %117, %116, !dbg !5315
  %134 = mul nuw nsw i64 %iv4, %117, !dbg !5315
  %135 = add nuw nsw i64 %iv6, %134, !dbg !5315
  %136 = getelementptr inbounds double, double* %132, i64 %135, !dbg !5315
  store double %131, double* %136, align 8, !dbg !5315, !tbaa !1731, !invariant.group !5338
  %137 = add nsw i64 %iv6, %127, !dbg !5315
  %138 = getelementptr inbounds double, double* %arrayptr52218, i64 %137, !dbg !5315
  %139 = load double, double* %138, align 8, !dbg !5315, !tbaa !1731, !alias.scope !5339, !noalias !5342
  %140 = load double*, double** %_cache10, align 8, !dbg !5315, !dereferenceable !306, !invariant.group !5332
  %141 = mul nuw nsw i64 %117, %116, !dbg !5315
  %142 = mul nuw nsw i64 %iv4, %117, !dbg !5315
  %143 = add nuw nsw i64 %iv6, %142, !dbg !5315
  %144 = getelementptr inbounds double, double* %140, i64 %143, !dbg !5315
  store double %139, double* %144, align 8, !dbg !5315, !tbaa !1731, !invariant.group !5344
  %145 = call double @llvm.fmuladd.f64(double %131, double %139, double %129) #66, !dbg !5315
  %146 = icmp eq i64 %iv.next7, %113, !dbg !5315
  br i1 %146, label %.loopexit.loopexit, label %128, !dbg !5315, !llvm.loop !5345

.loopexit.loopexit:                               ; preds = %128
  br label %.loopexit, !dbg !5315

.loopexit:                                        ; preds = %.loopexit.loopexit, %125
  %147 = phi double [ 0.000000e+00, %125 ], [ %145, %.loopexit.loopexit ], !dbg !5315
  %148 = getelementptr inbounds double, double* %arrayptr50216, i64 %iv4, !dbg !5315
  %149 = load double, double* %148, align 8, !dbg !5315, !tbaa !1731, !alias.scope !5346, !noalias !5349
  %150 = fadd double %147, %149, !dbg !5315
  store double %150, double* %148, align 8, !dbg !5315, !tbaa !1731, !alias.scope !5346, !noalias !5351
  %151 = icmp eq i64 %iv.next5, %112, !dbg !5315
  br i1 %151, label %dgemv_64_.exit.loopexit, label %125, !dbg !5315, !llvm.loop !5354

152:                                              ; preds = %.loopexit273
  call void @llvm.assume(i1 %84), !dbg !5315
  %153 = icmp sgt i32 %102, 0, !dbg !5315
  br i1 %153, label %154, label %dgemv_64_.exit, !dbg !5315

154:                                              ; preds = %152
  %155 = icmp sgt i32 %103, 0, !dbg !5315
  %sext = shl i64 %74, 32, !dbg !5315
  %156 = ashr exact i64 %sext, 32, !dbg !5315
  %157 = zext i32 %102 to i64, !dbg !5315
  %158 = zext i32 %103 to i64, !dbg !5315
  %159 = add nsw i64 %157, -1, !dbg !5315
  %160 = add nsw i64 %158, -1, !dbg !5315
  %161 = add nuw i64 %159, 1, !dbg !5315
  %162 = mul nuw i64 %161, 8, !dbg !5315
  %163 = call noalias nonnull i8* @malloc(i64 %162), !dbg !5315
  %_malloccache13 = bitcast i8* %163 to double*, !dbg !5315
  %164 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 8, !dbg !5315
  store double* %_malloccache13, double** %164, align 8, !dbg !5315
  store double* %_malloccache13, double** %_cache12, align 8, !dbg !5315, !invariant.group !5355
  %165 = add nuw i64 %160, 1, !dbg !5315
  %166 = mul nuw nsw i64 %165, %161, !dbg !5315
  %167 = mul nuw i64 %166, 8, !dbg !5315
  %168 = call noalias nonnull i8* @malloc(i64 %167), !dbg !5315
  %_malloccache15 = bitcast i8* %168 to double*, !dbg !5315
  %169 = getelementptr inbounds { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %5, i32 0, i32 9, !dbg !5315
  store double* %_malloccache15, double** %169, align 8, !dbg !5315
  store double* %_malloccache15, double** %_cache14, align 8, !dbg !5315, !invariant.group !5356
  br label %170, !dbg !5315

170:                                              ; preds = %.loopexit269, %154
  %iv = phi i64 [ %iv.next, %.loopexit269 ], [ 0, %154 ], !dbg !5315
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5315
  %171 = getelementptr inbounds double, double* %arrayptr215, i64 %iv, !dbg !5315
  %172 = load double, double* %171, align 8, !dbg !5315, !tbaa !1731, !alias.scope !5333, !noalias !5336
  %173 = load double*, double** %_cache12, align 8, !dbg !5315, !dereferenceable !306, !invariant.group !5355
  %174 = getelementptr inbounds double, double* %173, i64 %iv, !dbg !5315
  store double %172, double* %174, align 8, !dbg !5315, !tbaa !1731, !invariant.group !5357
  br i1 %155, label %175, label %.loopexit269, !dbg !5315

175:                                              ; preds = %170
  %176 = mul nsw i64 %iv, %156, !dbg !5315
  br label %177, !dbg !5315

177:                                              ; preds = %177, %175
  %iv2 = phi i64 [ %iv.next3, %177 ], [ 0, %175 ], !dbg !5315
  %iv.next3 = add nuw nsw i64 %iv2, 1, !dbg !5315
  %178 = add nsw i64 %iv2, %176, !dbg !5315
  %179 = getelementptr inbounds double, double* %arrayptr52218, i64 %178, !dbg !5315
  %180 = load double, double* %179, align 8, !dbg !5315, !tbaa !1731, !alias.scope !5339, !noalias !5342
  %181 = getelementptr inbounds double, double* %arrayptr50216, i64 %iv2, !dbg !5315
  %182 = load double, double* %181, align 8, !dbg !5315, !tbaa !1731, !alias.scope !5346, !noalias !5349
  %183 = call double @llvm.fmuladd.f64(double %172, double %180, double %182) #66, !dbg !5315
  store double %183, double* %181, align 8, !dbg !5315, !tbaa !1731, !alias.scope !5346, !noalias !5351
  %184 = load double*, double** %_cache14, align 8, !dbg !5315, !dereferenceable !306, !invariant.group !5356
  %185 = mul nuw nsw i64 %165, %161, !dbg !5315
  %186 = mul nuw nsw i64 %iv, %165, !dbg !5315
  %187 = add nuw nsw i64 %iv2, %186, !dbg !5315
  %188 = getelementptr inbounds double, double* %184, i64 %187, !dbg !5315
  store double %180, double* %188, align 8, !dbg !5315, !tbaa !1731, !invariant.group !5358
  %189 = icmp eq i64 %iv.next3, %158, !dbg !5315
  br i1 %189, label %.loopexit269.loopexit, label %177, !dbg !5315, !llvm.loop !5359

.loopexit269.loopexit:                            ; preds = %177
  br label %.loopexit269, !dbg !5315

.loopexit269:                                     ; preds = %.loopexit269.loopexit, %170
  %190 = icmp eq i64 %iv.next, %157, !dbg !5315
  br i1 %190, label %dgemv_64_.exit.loopexit1, label %170, !dbg !5315, !llvm.loop !5360

dgemv_64_.exit.loopexit:                          ; preds = %.loopexit
  br label %dgemv_64_.exit, !dbg !5315

dgemv_64_.exit.loopexit1:                         ; preds = %.loopexit269
  br label %dgemv_64_.exit, !dbg !5315

dgemv_64_.exit:                                   ; preds = %dgemv_64_.exit.loopexit1, %dgemv_64_.exit.loopexit, %152, %107, %.thread
  call void @llvm.julia.gc_preserve_end(token %75) #66, !dbg !5315
  %191 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 1, !dbg !5361
  store {} addrspace(10)* %3, {} addrspace(10)** %191, align 8, !dbg !5361
  %192 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 2, !dbg !5361
  store {} addrspace(10)* %"'2", {} addrspace(10)** %192, align 8, !dbg !5361
  %193 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, align 8, !dbg !5361
  ret { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %193, !dbg !5361
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia_symv__2024(i32 zeroext "enzyme_inactive" %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3) unnamed_addr #66 !dbg !5362 {
top:
  %4 = call {}*** @julia.get_pgcstack() #67
  %ptls_field106 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field106 to i64***
  %ptls_load107108 = load i64**, i64*** %5, align 8, !tbaa !69
  %6 = getelementptr inbounds i64*, i64** %ptls_load107108, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #67, !dbg !5363
  fence syncscope("singlethread") seq_cst
  switch i32 %0, label %L12 [
    i32 1426063360, label %L18
    i32 1275068416, label %L18
  ], !dbg !5364

L12:                                              ; preds = %top
  %7 = insertvalue { {} addrspace(10)*, i32 } { {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5235121072 to {}*) to {} addrspace(10)*), i32 0 }, i32 %0, 1, !dbg !5366
  %current_task2109 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5366
  %current_task2 = bitcast {}*** %current_task2109 to {}**, !dbg !5366
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task2, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #68, !dbg !5366
  %8 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !5366
  %9 = addrspacecast {} addrspace(10)* addrspace(10)* %8 to {} addrspace(10)* addrspace(11)*, !dbg !5366
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %9, align 8, !dbg !5366, !tbaa !307, !alias.scope !117, !noalias !5368
  %10 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %9, i64 1, !dbg !5366
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %10, align 8, !dbg !5366, !tbaa !307, !alias.scope !117, !noalias !5368
  %box = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task2, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134809104 to {}*) to {} addrspace(10)*)) #68, !dbg !5366
  %11 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i32 } addrspace(10)*, !dbg !5366
  store { {} addrspace(10)*, i32 } %7, { {} addrspace(10)*, i32 } addrspace(10)* %11, align 8, !dbg !5366, !tbaa !113, !alias.scope !117, !noalias !5368
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %9 release, align 8, !dbg !5366, !tbaa !307, !alias.scope !117, !noalias !5368
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #69, !dbg !5366
  %12 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !5366
  %13 = addrspacecast i8 addrspace(10)* %12 to i8 addrspace(11)*, !dbg !5366
  %14 = getelementptr inbounds i8, i8 addrspace(11)* %13, i64 8, !dbg !5366
  %15 = bitcast i8 addrspace(11)* %14 to {} addrspace(10)* addrspace(11)*, !dbg !5366
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %15 release, align 8, !dbg !5366, !tbaa !307, !alias.scope !117, !noalias !5368
  %box5 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task2, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5205579072 to {}*) to {} addrspace(10)*)) #68, !dbg !5367
  %16 = bitcast {} addrspace(10)* %box5 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5367
  %17 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %16, i64 0, i64 0, !dbg !5367
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %17, align 8, !dbg !5367, !tbaa !113, !alias.scope !117, !noalias !5368
  %18 = addrspacecast {} addrspace(10)* %box5 to {} addrspace(12)*, !dbg !5367
  call void @ijl_throw({} addrspace(12)* %18) #67, !dbg !5367
  unreachable, !dbg !5367

L18:                                              ; preds = %top, %top
  %19 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !5371
  %arraysize_ptr112 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %19, i64 3, !dbg !5371
  %20 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr112 to i64 addrspace(10)*, !dbg !5371
  %21 = addrspacecast i64 addrspace(10)* %20 to i64 addrspace(11)*, !dbg !5371
  %arraysize = load i64, i64 addrspace(11)* %21, align 8, !dbg !5371, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %arraysize_ptr6113 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %19, i64 4, !dbg !5371
  %22 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr6113 to i64 addrspace(10)*, !dbg !5371
  %23 = addrspacecast i64 addrspace(10)* %22 to i64 addrspace(11)*, !dbg !5371
  %arraysize7 = load i64, i64 addrspace(11)* %23, align 8, !dbg !5371, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %.not = icmp eq i64 %arraysize, %arraysize7, !dbg !5373
  br i1 %.not, label %L28, label %L23, !dbg !5375

L23:                                              ; preds = %L18
  %current_task8114 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5376
  %current_task8 = bitcast {}*** %current_task8114 to {}**, !dbg !5376
  %newstruct9 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task8, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #68, !dbg !5376
  %24 = bitcast {} addrspace(10)* %newstruct9 to {} addrspace(10)* addrspace(10)*, !dbg !5376
  %25 = addrspacecast {} addrspace(10)* addrspace(10)* %24 to {} addrspace(10)* addrspace(11)*, !dbg !5376
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %25, align 8, !dbg !5376, !tbaa !307, !alias.scope !117, !noalias !5368
  %26 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %25, i64 1, !dbg !5376
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %26, align 8, !dbg !5376, !tbaa !307, !alias.scope !117, !noalias !5368
  %box11 = call noalias nonnull dereferenceable(40) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task8, i64 40, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5150199392 to {}*) to {} addrspace(10)*)) #68, !dbg !5376
  %27 = bitcast {} addrspace(10)* %box11 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)*, !dbg !5376
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %27, i64 0, i32 0, !dbg !5376
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495648 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !5376, !tbaa !113, !alias.scope !117, !noalias !5368
  %.repack116 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %27, i64 0, i32 1, !dbg !5376
  store i64 %arraysize, i64 addrspace(10)* %.repack116, align 8, !dbg !5376, !tbaa !113, !alias.scope !117, !noalias !5368
  %.repack118 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %27, i64 0, i32 2, !dbg !5376
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495616 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack118, align 8, !dbg !5376, !tbaa !113, !alias.scope !117, !noalias !5368
  %.repack120 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %27, i64 0, i32 3, !dbg !5376
  store i64 %arraysize7, i64 addrspace(10)* %.repack120, align 8, !dbg !5376, !tbaa !113, !alias.scope !117, !noalias !5368
  %.repack122 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %27, i64 0, i32 4, !dbg !5376
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495568 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack122, align 8, !dbg !5376, !tbaa !113, !alias.scope !117, !noalias !5368
  store atomic {} addrspace(10)* %box11, {} addrspace(10)* addrspace(11)* %25 release, align 8, !dbg !5376, !tbaa !307, !alias.scope !117, !noalias !5368
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct9, {} addrspace(10)* nonnull %box11) #69, !dbg !5376
  %28 = bitcast {} addrspace(10)* %newstruct9 to i8 addrspace(10)*, !dbg !5376
  %29 = addrspacecast i8 addrspace(10)* %28 to i8 addrspace(11)*, !dbg !5376
  %30 = getelementptr inbounds i8, i8 addrspace(11)* %29, i64 8, !dbg !5376
  %31 = bitcast i8 addrspace(11)* %30 to {} addrspace(10)* addrspace(11)*, !dbg !5376
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %31 release, align 8, !dbg !5376, !tbaa !307, !alias.scope !117, !noalias !5368
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task8, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #68, !dbg !5377
  %32 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5377
  %33 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %32, i64 0, i64 0, !dbg !5377
  store {} addrspace(10)* %newstruct9, {} addrspace(10)* addrspace(10)* %33, align 8, !dbg !5377, !tbaa !113, !alias.scope !117, !noalias !5368
  %34 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !5377
  call void @ijl_throw({} addrspace(12)* %34) #67, !dbg !5377
  unreachable, !dbg !5377

L28:                                              ; preds = %L18
  %35 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5378
  %36 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %35 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5378
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %36, i64 0, i32 1, !dbg !5378
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5378, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not125 = icmp eq i64 %arraysize, %arraylen, !dbg !5380
  br i1 %.not125, label %L41, label %L32, !dbg !5379

L32:                                              ; preds = %L28
  %current_task23131 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5382
  %current_task23 = bitcast {}*** %current_task23131 to {}**, !dbg !5382
  %newstruct24 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task23, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #68, !dbg !5382
  %37 = bitcast {} addrspace(10)* %newstruct24 to {} addrspace(10)* addrspace(10)*, !dbg !5382
  %38 = addrspacecast {} addrspace(10)* addrspace(10)* %37 to {} addrspace(10)* addrspace(11)*, !dbg !5382
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %38, align 8, !dbg !5382, !tbaa !307, !alias.scope !117, !noalias !5368
  %39 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %38, i64 1, !dbg !5382
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %39, align 8, !dbg !5382, !tbaa !307, !alias.scope !117, !noalias !5368
  %box26 = call noalias nonnull dereferenceable(40) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task23, i64 40, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5161715216 to {}*) to {} addrspace(10)*)) #68, !dbg !5382
  %40 = bitcast {} addrspace(10)* %box26 to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5382
  %.repack133 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %40, i64 0, i32 0, !dbg !5382
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495536 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack133, align 8, !dbg !5382, !tbaa !113, !alias.scope !117, !noalias !5368
  %.repack134.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %40, i64 0, i32 1, i64 0, !dbg !5382
  store i64 %arraysize, i64 addrspace(10)* %.repack134.repack, align 8, !dbg !5382, !tbaa !113, !alias.scope !117, !noalias !5368
  %.repack134.repack140 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %40, i64 0, i32 1, i64 1, !dbg !5382
  store i64 %arraysize, i64 addrspace(10)* %.repack134.repack140, align 8, !dbg !5382, !tbaa !113, !alias.scope !117, !noalias !5368
  %.repack136 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %40, i64 0, i32 2, !dbg !5382
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495488 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack136, align 8, !dbg !5382, !tbaa !113, !alias.scope !117, !noalias !5368
  %.repack138 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %40, i64 0, i32 3, !dbg !5382
  store i64 %arraylen, i64 addrspace(10)* %.repack138, align 8, !dbg !5382, !tbaa !113, !alias.scope !117, !noalias !5368
  store atomic {} addrspace(10)* %box26, {} addrspace(10)* addrspace(11)* %38 release, align 8, !dbg !5382, !tbaa !307, !alias.scope !117, !noalias !5368
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct24, {} addrspace(10)* nonnull %box26) #69, !dbg !5382
  %41 = bitcast {} addrspace(10)* %newstruct24 to i8 addrspace(10)*, !dbg !5382
  %42 = addrspacecast i8 addrspace(10)* %41 to i8 addrspace(11)*, !dbg !5382
  %43 = getelementptr inbounds i8, i8 addrspace(11)* %42, i64 8, !dbg !5382
  %44 = bitcast i8 addrspace(11)* %43 to {} addrspace(10)* addrspace(11)*, !dbg !5382
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %44 release, align 8, !dbg !5382, !tbaa !307, !alias.scope !117, !noalias !5368
  %box28 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task23, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #68, !dbg !5383
  %45 = bitcast {} addrspace(10)* %box28 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5383
  %46 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %45, i64 0, i64 0, !dbg !5383
  store {} addrspace(10)* %newstruct24, {} addrspace(10)* addrspace(10)* %46, align 8, !dbg !5383, !tbaa !113, !alias.scope !117, !noalias !5368
  %47 = addrspacecast {} addrspace(10)* %box28 to {} addrspace(12)*, !dbg !5383
  call void @ijl_throw({} addrspace(12)* %47) #67, !dbg !5383
  unreachable, !dbg !5383

L41:                                              ; preds = %L28
  %48 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5384
  %49 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %48 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5384
  %arraylen_ptr31 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %49, i64 0, i32 1, !dbg !5384
  %arraylen32 = load i64, i64 addrspace(11)* %arraylen_ptr31, align 8, !dbg !5384, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not143 = icmp eq i64 %arraysize, %arraylen32, !dbg !5386
  br i1 %.not143, label %L79, label %L45, !dbg !5385

L45:                                              ; preds = %L41
  %current_task41149 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !5388
  %current_task41 = bitcast {}*** %current_task41149 to {}**, !dbg !5388
  %newstruct42 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task41, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #68, !dbg !5388
  %50 = bitcast {} addrspace(10)* %newstruct42 to {} addrspace(10)* addrspace(10)*, !dbg !5388
  %51 = addrspacecast {} addrspace(10)* addrspace(10)* %50 to {} addrspace(10)* addrspace(11)*, !dbg !5388
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %51, align 8, !dbg !5388, !tbaa !307, !alias.scope !117, !noalias !5368
  %52 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %51, i64 1, !dbg !5388
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %52, align 8, !dbg !5388, !tbaa !307, !alias.scope !117, !noalias !5368
  %box44 = call noalias nonnull dereferenceable(40) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task41, i64 40, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5161715216 to {}*) to {} addrspace(10)*)) #68, !dbg !5388
  %53 = bitcast {} addrspace(10)* %box44 to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5388
  %.repack151 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %53, i64 0, i32 0, !dbg !5388
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495536 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack151, align 8, !dbg !5388, !tbaa !113, !alias.scope !117, !noalias !5368
  %.repack152.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %53, i64 0, i32 1, i64 0, !dbg !5388
  store i64 %arraysize, i64 addrspace(10)* %.repack152.repack, align 8, !dbg !5388, !tbaa !113, !alias.scope !117, !noalias !5368
  %.repack152.repack158 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %53, i64 0, i32 1, i64 1, !dbg !5388
  store i64 %arraysize, i64 addrspace(10)* %.repack152.repack158, align 8, !dbg !5388, !tbaa !113, !alias.scope !117, !noalias !5368
  %.repack154 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %53, i64 0, i32 2, !dbg !5388
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495440 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack154, align 8, !dbg !5388, !tbaa !113, !alias.scope !117, !noalias !5368
  %.repack156 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %53, i64 0, i32 3, !dbg !5388
  store i64 %arraylen32, i64 addrspace(10)* %.repack156, align 8, !dbg !5388, !tbaa !113, !alias.scope !117, !noalias !5368
  store atomic {} addrspace(10)* %box44, {} addrspace(10)* addrspace(11)* %51 release, align 8, !dbg !5388, !tbaa !307, !alias.scope !117, !noalias !5368
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct42, {} addrspace(10)* nonnull %box44) #69, !dbg !5388
  %54 = bitcast {} addrspace(10)* %newstruct42 to i8 addrspace(10)*, !dbg !5388
  %55 = addrspacecast i8 addrspace(10)* %54 to i8 addrspace(11)*, !dbg !5388
  %56 = getelementptr inbounds i8, i8 addrspace(11)* %55, i64 8, !dbg !5388
  %57 = bitcast i8 addrspace(11)* %56 to {} addrspace(10)* addrspace(11)*, !dbg !5388
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %57 release, align 8, !dbg !5388, !tbaa !307, !alias.scope !117, !noalias !5368
  %box46 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task41, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #68, !dbg !5389
  %58 = bitcast {} addrspace(10)* %box46 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5389
  %59 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %58, i64 0, i64 0, !dbg !5389
  store {} addrspace(10)* %newstruct42, {} addrspace(10)* addrspace(10)* %59, align 8, !dbg !5389, !tbaa !113, !alias.scope !117, !noalias !5368
  %60 = addrspacecast {} addrspace(10)* %box46 to {} addrspace(12)*, !dbg !5389
  call void @ijl_throw({} addrspace(12)* %60) #67, !dbg !5389
  unreachable, !dbg !5389

L79:                                              ; preds = %L41
  %61 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !5390
  %62 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %61) #70, !dbg !5390
  %63 = bitcast {}* %62 to double**, !dbg !5390
  %arrayptr171 = load double*, double** %63, align 8, !dbg !5390, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %64 = addrspacecast {} addrspace(10)* %3 to {} addrspace(11)*, !dbg !5394
  %65 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %64) #70, !dbg !5394
  %66 = bitcast {}* %65 to double**, !dbg !5394
  %arrayptr50172 = load double*, double** %66, align 8, !dbg !5394, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %arrayptr50172195 = bitcast double* %arrayptr50172 to i8*, !dbg !5398
  %67 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %2, {} addrspace(10)* nonnull %3) #67, !dbg !5398
  %68 = lshr i32 %0, 24, !dbg !5399
  %value_phi51 = trunc i32 %68 to i8, !dbg !5406
  %.not165 = icmp eq i64 %arraysize, 0, !dbg !5407
  %69 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !5409
  %70 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %69) #70, !dbg !5409
  %71 = bitcast {}* %70 to double**, !dbg !5409
  %arrayptr81170 = load double*, double** %71, align 8, !dbg !5409, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68
  switch i8 %value_phi51, label %72 [
    i8 85, label %75
    i8 76, label %73
  ], !dbg !5398

72:                                               ; preds = %L79
  br label %73, !dbg !5398

73:                                               ; preds = %72, %L79
  %74 = phi i32 [ -1, %72 ], [ 122, %L79 ], !dbg !5398
  br label %75, !dbg !5398

75:                                               ; preds = %73, %L79
  %76 = phi i32 [ %74, %73 ], [ 121, %L79 ], !dbg !5398
  %77 = trunc i64 %arraysize to i32, !dbg !5398
  %78 = select i1 %.not165, i32 1, i32 %77, !dbg !5398
  %79 = add nsw i32 %76, -123, !dbg !5398
  %80 = icmp ult i32 %79, -2, !dbg !5398
  %81 = select i1 %80, i32 2, i32 0, !dbg !5398
  %82 = icmp slt i32 %77, 0, !dbg !5398
  %83 = select i1 %82, i32 3, i32 %81, !dbg !5398
  %84 = call i32 @llvm.smax.i32(i32 %77, i32 1) #67, !dbg !5398
  %85 = icmp sgt i32 %84, %78, !dbg !5398
  %86 = select i1 %85, i32 6, i32 %83, !dbg !5398
  %87 = icmp eq i32 %86, 0, !dbg !5398
  call void @llvm.assume(i1 %87), !dbg !5398
  %88 = icmp sgt i32 %77, 0, !dbg !5398
  br i1 %88, label %.preheader187, label %.loopexit189, !dbg !5398

.preheader187:                                    ; preds = %75
  %89 = shl i64 %arraysize, 3, !dbg !5398
  %90 = and i64 %89, 34359738360, !dbg !5398
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %arrayptr50172195, i8 0, i64 %90, i1 false) #67, !dbg !5398, !tbaa !1731, !noalias !5410
  br label %.loopexit189, !dbg !5398

.loopexit189:                                     ; preds = %75, %.preheader187
  switch i32 %76, label %191 [
    i32 122, label %91
    i32 121, label %137
  ], !dbg !5398

91:                                               ; preds = %.loopexit189
  %92 = icmp sgt i32 %77, 0, !dbg !5398
  br i1 %92, label %93, label %dsymv_64_.exit, !dbg !5398

93:                                               ; preds = %91
  %sext185 = shl i64 %arraysize, 32, !dbg !5398
  %94 = ashr exact i64 %sext185, 32, !dbg !5398
  %95 = sext i32 %78 to i64, !dbg !5398
  %96 = and i64 %arraysize, 4294967295, !dbg !5398
  br label %97, !dbg !5398

97:                                               ; preds = %131, %93
  %iv3 = phi i64 [ %iv.next4, %131 ], [ 0, %93 ], !dbg !5398
  %98 = add i64 %iv3, 1, !dbg !5398
  %99 = add i64 %iv3, 1, !dbg !5398
  %100 = trunc i64 %99 to i32, !dbg !5398
  %101 = sext i32 %100 to i64, !dbg !5398
  %iv.next4 = add nuw nsw i64 %iv3, 1, !dbg !5398
  %102 = getelementptr inbounds double, double* %arrayptr171, i64 %iv3, !dbg !5398
  %103 = load double, double* %102, align 8, !dbg !5398, !tbaa !1731
  %104 = mul nsw i64 %iv3, %95, !dbg !5398
  %105 = add nsw i64 %104, %iv3, !dbg !5398
  %106 = getelementptr inbounds double, double* %arrayptr81170, i64 %105, !dbg !5398
  %107 = load double, double* %106, align 8, !dbg !5398, !tbaa !1731
  %108 = getelementptr inbounds double, double* %arrayptr50172, i64 %iv3, !dbg !5398
  %109 = load double, double* %108, align 8, !dbg !5398, !tbaa !1731
  %110 = call double @llvm.fmuladd.f64(double %103, double %107, double %109) #67, !dbg !5398
  store double %110, double* %108, align 8, !dbg !5398, !tbaa !1731, !noalias !5410
  %111 = icmp slt i64 %iv.next4, %94, !dbg !5398
  br i1 %111, label %112, label %131, !dbg !5398

112:                                              ; preds = %97
  %sext212 = shl i64 %iv.next4, 32, !dbg !5398
  %113 = ashr exact i64 %sext212, 32, !dbg !5398
  br label %114, !dbg !5398

114:                                              ; preds = %114, %112
  %iv5 = phi i64 [ %iv.next6, %114 ], [ 0, %112 ], !dbg !5398
  %115 = phi double [ 0.000000e+00, %112 ], [ %127, %114 ], !dbg !5398
  %116 = add i64 %98, %iv5, !dbg !5398
  %iv.next6 = add nuw nsw i64 %iv5, 1, !dbg !5398
  %117 = add i64 %101, %iv5, !dbg !5398
  %118 = add nsw i64 %116, %104, !dbg !5398
  %119 = getelementptr inbounds double, double* %arrayptr81170, i64 %118, !dbg !5398
  %120 = load double, double* %119, align 8, !dbg !5398, !tbaa !1731
  %121 = getelementptr inbounds double, double* %arrayptr50172, i64 %117, !dbg !5398
  %122 = load double, double* %121, align 8, !dbg !5398, !tbaa !1731
  %123 = call double @llvm.fmuladd.f64(double %103, double %120, double %122) #67, !dbg !5398
  store double %123, double* %121, align 8, !dbg !5398, !tbaa !1731, !noalias !5410
  %124 = getelementptr inbounds double, double* %arrayptr171, i64 %117, !dbg !5398
  %125 = load double, double* %124, align 8, !dbg !5398, !tbaa !1731
  %126 = load double, double* %119, align 8, !dbg !5398, !tbaa !1731
  %127 = call double @llvm.fmuladd.f64(double %125, double %126, double %115) #67, !dbg !5398
  %128 = add i64 %117, 1, !dbg !5398
  %129 = add nuw nsw i64 %116, 1, !dbg !5398
  %130 = icmp eq i64 %129, %96, !dbg !5398
  br i1 %130, label %._crit_edge183, label %114, !dbg !5398, !llvm.loop !5411

._crit_edge183:                                   ; preds = %114
  %.pre184 = load double, double* %108, align 8, !dbg !5398, !tbaa !1731
  br label %131, !dbg !5398

131:                                              ; preds = %._crit_edge183, %97
  %132 = phi double [ %110, %97 ], [ %.pre184, %._crit_edge183 ], !dbg !5398
  %133 = phi double [ 0.000000e+00, %97 ], [ %127, %._crit_edge183 ], !dbg !5398
  %134 = fadd double %133, %132, !dbg !5398
  store double %134, double* %108, align 8, !dbg !5398, !tbaa !1731, !noalias !5410
  %135 = add nuw nsw i64 %iv.next4, 1, !dbg !5398
  %136 = icmp eq i64 %iv.next4, %96, !dbg !5398
  br i1 %136, label %dsymv_64_.exit.loopexit, label %97, !dbg !5398, !llvm.loop !5412

137:                                              ; preds = %.loopexit189
  %138 = icmp sgt i32 %77, 0, !dbg !5398
  br i1 %138, label %139, label %dsymv_64_.exit, !dbg !5398

139:                                              ; preds = %137
  %sext = shl i64 %arraysize, 32, !dbg !5398
  %140 = ashr exact i64 %sext, 32, !dbg !5398
  %141 = sext i32 %78 to i64, !dbg !5398
  %indvars.iv217 = add nsw i64 %140, -1, !dbg !5398
  %142 = getelementptr inbounds double, double* %arrayptr171, i64 %indvars.iv217, !dbg !5398
  %143 = load double, double* %142, align 8, !dbg !5398, !tbaa !1731
  %144 = mul nsw i64 %indvars.iv217, %141, !dbg !5398
  %145 = add nsw i64 %144, %indvars.iv217, !dbg !5398
  %146 = getelementptr inbounds double, double* %arrayptr81170, i64 %145, !dbg !5398
  %147 = load double, double* %146, align 8, !dbg !5398, !tbaa !1731
  %148 = getelementptr inbounds double, double* %arrayptr50172, i64 %indvars.iv217, !dbg !5398
  %149 = load double, double* %148, align 8, !dbg !5398, !tbaa !1731
  %150 = call double @llvm.fmuladd.f64(double %143, double %147, double %149) #67, !dbg !5398
  store double %150, double* %148, align 8, !dbg !5398, !tbaa !1731, !noalias !5410
  %151 = icmp sgt i64 %sext, 4294967296, !dbg !5398
  br i1 %151, label %.preheader.preheader.lr.ph, label %.thread, !dbg !5398

.preheader.preheader.lr.ph:                       ; preds = %139
  %152 = add nuw i64 %arraysize, 4294967295, !dbg !5398
  %153 = and i64 %152, 4294967295, !dbg !5398
  %154 = sub i64 0, %141, !dbg !5398
  br label %.preheader.preheader, !dbg !5398

.preheader.preheader:                             ; preds = %177, %.preheader.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %177 ], [ 0, %.preheader.preheader.lr.ph ]
  %155 = phi double [ %143, %.preheader.preheader.lr.ph ], [ %182, %177 ]
  %156 = mul nsw i64 %iv, -1, !dbg !5398
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5398
  %157 = add i64 %153, %156, !dbg !5398
  %158 = mul nsw i64 %iv, -1, !dbg !5398
  %159 = add i64 %indvars.iv217, %158, !dbg !5398
  %160 = mul i64 %154, %iv, !dbg !5398
  %161 = add i64 %144, %160, !dbg !5398
  %162 = mul nsw i64 %iv, -1, !dbg !5398
  %163 = add i64 %indvars.iv217, %162, !dbg !5398
  %scevgep = getelementptr double, double* %arrayptr50172, i64 %163, !dbg !5398
  br label %.preheader, !dbg !5398

.thread.loopexit:                                 ; preds = %177
  br label %.thread, !dbg !5398

.thread:                                          ; preds = %.thread.loopexit, %139
  %.lcssa216 = phi double [ %150, %139 ], [ %189, %.thread.loopexit ], !dbg !5398
  %164 = fadd double %.lcssa216, 0.000000e+00, !dbg !5398
  store double %164, double* %arrayptr50172, align 8, !dbg !5398, !tbaa !1731, !noalias !5410
  br label %dsymv_64_.exit, !dbg !5398

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv1 = phi i64 [ %iv.next2, %.preheader ], [ 0, %.preheader.preheader ], !dbg !5398
  %165 = phi double [ %175, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !5398
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !5398
  %166 = add nsw i64 %iv1, %161, !dbg !5398
  %167 = getelementptr inbounds double, double* %arrayptr81170, i64 %166, !dbg !5398
  %168 = load double, double* %167, align 8, !dbg !5398, !tbaa !1731
  %169 = getelementptr inbounds double, double* %arrayptr50172, i64 %iv1, !dbg !5398
  %170 = load double, double* %169, align 8, !dbg !5398, !tbaa !1731
  %171 = call double @llvm.fmuladd.f64(double %155, double %168, double %170) #67, !dbg !5398
  store double %171, double* %169, align 8, !dbg !5398, !tbaa !1731, !noalias !5410
  %172 = getelementptr inbounds double, double* %arrayptr171, i64 %iv1, !dbg !5398
  %173 = load double, double* %172, align 8, !dbg !5398, !tbaa !1731
  %174 = load double, double* %167, align 8, !dbg !5398, !tbaa !1731
  %175 = call double @llvm.fmuladd.f64(double %173, double %174, double %165) #67, !dbg !5398
  %176 = icmp eq i64 %iv.next2, %157, !dbg !5398
  br i1 %176, label %177, label %.preheader, !dbg !5398, !llvm.loop !5413

177:                                              ; preds = %.preheader
  %.pre = load double, double* %scevgep, align 8, !dbg !5398, !tbaa !1731
  %178 = fadd double %175, %.pre, !dbg !5398
  store double %178, double* %scevgep, align 8, !dbg !5398, !tbaa !1731, !noalias !5410
  %179 = add nsw i64 %157, -1, !dbg !5398
  %180 = add nsw i64 %159, -1, !dbg !5398
  %181 = getelementptr inbounds double, double* %arrayptr171, i64 %180, !dbg !5398
  %182 = load double, double* %181, align 8, !dbg !5398, !tbaa !1731
  %183 = mul nsw i64 %180, %141, !dbg !5398
  %184 = add nsw i64 %183, %180, !dbg !5398
  %185 = getelementptr inbounds double, double* %arrayptr81170, i64 %184, !dbg !5398
  %186 = load double, double* %185, align 8, !dbg !5398, !tbaa !1731
  %187 = getelementptr inbounds double, double* %arrayptr50172, i64 %180, !dbg !5398
  %188 = load double, double* %187, align 8, !dbg !5398, !tbaa !1731
  %189 = call double @llvm.fmuladd.f64(double %182, double %186, double %188) #67, !dbg !5398
  store double %189, double* %187, align 8, !dbg !5398, !tbaa !1731, !noalias !5410
  %190 = icmp sgt i64 %159, 1, !dbg !5398
  br i1 %190, label %.preheader.preheader, label %.thread.loopexit, !dbg !5398

191:                                              ; preds = %.loopexit189
  unreachable, !dbg !5398

dsymv_64_.exit.loopexit:                          ; preds = %131
  br label %dsymv_64_.exit, !dbg !5398

dsymv_64_.exit:                                   ; preds = %dsymv_64_.exit.loopexit, %.thread, %137, %91
  call void @llvm.julia.gc_preserve_end(token %67) #67, !dbg !5398
  ret {} addrspace(10)* %3, !dbg !5414
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_symv__2024(i32 zeroext "enzyme_inactive" %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3, {} addrspace(10)* align 16 %"'2") unnamed_addr #66 !dbg !5415 {
top:
  %4 = alloca { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %5 = getelementptr inbounds { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 0
  %"iv3'ac" = alloca i64, align 8
  %"iv5'ac" = alloca i64, align 8
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %_cache = alloca double*, align 8
  %_cache13 = alloca double*, align 8
  %_cache15 = alloca double**, align 8
  %_cache18 = alloca double**, align 8
  %_cache21 = alloca double**, align 8
  %_cache24 = alloca double**, align 8
  %_cache27 = alloca double**, align 8
  %_cache30 = alloca double**, align 8
  %_cache33 = alloca double*, align 8
  %_cache35 = alloca double*, align 8
  %6 = call {}*** @julia.get_pgcstack() #67
  %ptls_field106 = getelementptr inbounds {}**, {}*** %6, i64 2
  %7 = bitcast {}*** %ptls_field106 to i64***
  %ptls_load107108 = load i64**, i64*** %7, align 8, !tbaa !69, !alias.scope !5416, !noalias !5419
  %8 = getelementptr inbounds i64*, i64** %ptls_load107108, i64 2
  %safepoint = load i64*, i64** %8, align 8, !tbaa !73, !invariant.load !68, !alias.scope !5421, !noalias !5424
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #67, !dbg !5426
  fence syncscope("singlethread") seq_cst
  switch i32 %0, label %L12 [
    i32 1426063360, label %L18
    i32 1275068416, label %L18
  ], !dbg !5427

L12:                                              ; preds = %top
  %9 = insertvalue { {} addrspace(10)*, i32 } { {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5235121072 to {}*) to {} addrspace(10)*), i32 0 }, i32 %0, 1, !dbg !5429
  %current_task2109 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5429
  %current_task2 = bitcast {}*** %current_task2109 to {}**, !dbg !5429
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task2, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #68, !dbg !5429
  %10 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !5429
  %11 = addrspacecast {} addrspace(10)* addrspace(10)* %10 to {} addrspace(10)* addrspace(11)*, !dbg !5429
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %11, align 8, !dbg !5429, !tbaa !307, !alias.scope !117, !noalias !5431
  %12 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %11, i64 1, !dbg !5429
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %12, align 8, !dbg !5429, !tbaa !307, !alias.scope !117, !noalias !5431
  %box = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task2, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134809104 to {}*) to {} addrspace(10)*)) #68, !dbg !5429
  %13 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i32 } addrspace(10)*, !dbg !5429
  store { {} addrspace(10)*, i32 } %9, { {} addrspace(10)*, i32 } addrspace(10)* %13, align 8, !dbg !5429, !tbaa !113, !alias.scope !117, !noalias !5431
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %11 release, align 8, !dbg !5429, !tbaa !307, !alias.scope !117, !noalias !5431
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #69, !dbg !5429
  %14 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !5429
  %15 = addrspacecast i8 addrspace(10)* %14 to i8 addrspace(11)*, !dbg !5429
  %16 = getelementptr inbounds i8, i8 addrspace(11)* %15, i64 8, !dbg !5429
  %17 = bitcast i8 addrspace(11)* %16 to {} addrspace(10)* addrspace(11)*, !dbg !5429
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %17 release, align 8, !dbg !5429, !tbaa !307, !alias.scope !117, !noalias !5431
  %box5 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task2, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5205579072 to {}*) to {} addrspace(10)*)) #68, !dbg !5430
  %18 = bitcast {} addrspace(10)* %box5 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5430
  %19 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %18, i64 0, i64 0, !dbg !5430
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %19, align 8, !dbg !5430, !tbaa !113, !alias.scope !117, !noalias !5431
  %20 = addrspacecast {} addrspace(10)* %box5 to {} addrspace(12)*, !dbg !5430
  call void @ijl_throw({} addrspace(12)* %20) #67, !dbg !5430
  unreachable, !dbg !5430

L18:                                              ; preds = %top, %top
  %21 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !5434
  %arraysize_ptr112 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %21, i64 3, !dbg !5434
  %22 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr112 to i64 addrspace(10)*, !dbg !5434
  %23 = addrspacecast i64 addrspace(10)* %22 to i64 addrspace(11)*, !dbg !5434
  %arraysize = load i64, i64 addrspace(11)* %23, align 8, !dbg !5434, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !5436, !noalias !5439
  %24 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 3, !dbg !5434
  store i64 %arraysize, i64* %24, align 8, !dbg !5434
  %arraysize_ptr6113 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %21, i64 4, !dbg !5434
  %25 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr6113 to i64 addrspace(10)*, !dbg !5434
  %26 = addrspacecast i64 addrspace(10)* %25 to i64 addrspace(11)*, !dbg !5434
  %arraysize7 = load i64, i64 addrspace(11)* %26, align 8, !dbg !5434, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !5436, !noalias !5439
  %.not = icmp eq i64 %arraysize, %arraysize7, !dbg !5441
  br i1 %.not, label %L28, label %L23, !dbg !5443

L23:                                              ; preds = %L18
  %current_task8114 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5444
  %current_task8 = bitcast {}*** %current_task8114 to {}**, !dbg !5444
  %newstruct9 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task8, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #68, !dbg !5444
  %27 = bitcast {} addrspace(10)* %newstruct9 to {} addrspace(10)* addrspace(10)*, !dbg !5444
  %28 = addrspacecast {} addrspace(10)* addrspace(10)* %27 to {} addrspace(10)* addrspace(11)*, !dbg !5444
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %28, align 8, !dbg !5444, !tbaa !307, !alias.scope !117, !noalias !5431
  %29 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %28, i64 1, !dbg !5444
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %29, align 8, !dbg !5444, !tbaa !307, !alias.scope !117, !noalias !5431
  %box11 = call noalias nonnull dereferenceable(40) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task8, i64 40, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5150199392 to {}*) to {} addrspace(10)*)) #68, !dbg !5444
  %30 = bitcast {} addrspace(10)* %box11 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)*, !dbg !5444
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %30, i64 0, i32 0, !dbg !5444
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495648 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !5444, !tbaa !113, !alias.scope !117, !noalias !5431
  %.repack116 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %30, i64 0, i32 1, !dbg !5444
  store i64 %arraysize, i64 addrspace(10)* %.repack116, align 8, !dbg !5444, !tbaa !113, !alias.scope !117, !noalias !5431
  %.repack118 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %30, i64 0, i32 2, !dbg !5444
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495616 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack118, align 8, !dbg !5444, !tbaa !113, !alias.scope !117, !noalias !5431
  %.repack120 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %30, i64 0, i32 3, !dbg !5444
  store i64 %arraysize7, i64 addrspace(10)* %.repack120, align 8, !dbg !5444, !tbaa !113, !alias.scope !117, !noalias !5431
  %.repack122 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64, {} addrspace(10)* } addrspace(10)* %30, i64 0, i32 4, !dbg !5444
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495568 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack122, align 8, !dbg !5444, !tbaa !113, !alias.scope !117, !noalias !5431
  store atomic {} addrspace(10)* %box11, {} addrspace(10)* addrspace(11)* %28 release, align 8, !dbg !5444, !tbaa !307, !alias.scope !117, !noalias !5431
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct9, {} addrspace(10)* nonnull %box11) #69, !dbg !5444
  %31 = bitcast {} addrspace(10)* %newstruct9 to i8 addrspace(10)*, !dbg !5444
  %32 = addrspacecast i8 addrspace(10)* %31 to i8 addrspace(11)*, !dbg !5444
  %33 = getelementptr inbounds i8, i8 addrspace(11)* %32, i64 8, !dbg !5444
  %34 = bitcast i8 addrspace(11)* %33 to {} addrspace(10)* addrspace(11)*, !dbg !5444
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %34 release, align 8, !dbg !5444, !tbaa !307, !alias.scope !117, !noalias !5431
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task8, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #68, !dbg !5445
  %35 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5445
  %36 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %35, i64 0, i64 0, !dbg !5445
  store {} addrspace(10)* %newstruct9, {} addrspace(10)* addrspace(10)* %36, align 8, !dbg !5445, !tbaa !113, !alias.scope !117, !noalias !5431
  %37 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !5445
  call void @ijl_throw({} addrspace(12)* %37) #67, !dbg !5445
  unreachable, !dbg !5445

L28:                                              ; preds = %L18
  %38 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5446
  %39 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %38 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5446
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %39, i64 0, i32 1, !dbg !5446
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5446, !tbaa !332, !range !87, !alias.scope !5448, !noalias !5451
  %.not125 = icmp eq i64 %arraysize, %arraylen, !dbg !5453
  br i1 %.not125, label %L41, label %L32, !dbg !5447

L32:                                              ; preds = %L28
  %current_task23131 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5455
  %current_task23 = bitcast {}*** %current_task23131 to {}**, !dbg !5455
  %newstruct24 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task23, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #68, !dbg !5455
  %40 = bitcast {} addrspace(10)* %newstruct24 to {} addrspace(10)* addrspace(10)*, !dbg !5455
  %41 = addrspacecast {} addrspace(10)* addrspace(10)* %40 to {} addrspace(10)* addrspace(11)*, !dbg !5455
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %41, align 8, !dbg !5455, !tbaa !307, !alias.scope !117, !noalias !5431
  %42 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %41, i64 1, !dbg !5455
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %42, align 8, !dbg !5455, !tbaa !307, !alias.scope !117, !noalias !5431
  %box26 = call noalias nonnull dereferenceable(40) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task23, i64 40, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5161715216 to {}*) to {} addrspace(10)*)) #68, !dbg !5455
  %43 = bitcast {} addrspace(10)* %box26 to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5455
  %.repack133 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %43, i64 0, i32 0, !dbg !5455
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495536 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack133, align 8, !dbg !5455, !tbaa !113, !alias.scope !117, !noalias !5431
  %.repack134.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %43, i64 0, i32 1, i64 0, !dbg !5455
  store i64 %arraysize, i64 addrspace(10)* %.repack134.repack, align 8, !dbg !5455, !tbaa !113, !alias.scope !117, !noalias !5431
  %.repack134.repack140 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %43, i64 0, i32 1, i64 1, !dbg !5455
  store i64 %arraysize, i64 addrspace(10)* %.repack134.repack140, align 8, !dbg !5455, !tbaa !113, !alias.scope !117, !noalias !5431
  %.repack136 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %43, i64 0, i32 2, !dbg !5455
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495488 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack136, align 8, !dbg !5455, !tbaa !113, !alias.scope !117, !noalias !5431
  %.repack138 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %43, i64 0, i32 3, !dbg !5455
  store i64 %arraylen, i64 addrspace(10)* %.repack138, align 8, !dbg !5455, !tbaa !113, !alias.scope !117, !noalias !5431
  store atomic {} addrspace(10)* %box26, {} addrspace(10)* addrspace(11)* %41 release, align 8, !dbg !5455, !tbaa !307, !alias.scope !117, !noalias !5431
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct24, {} addrspace(10)* nonnull %box26) #69, !dbg !5455
  %44 = bitcast {} addrspace(10)* %newstruct24 to i8 addrspace(10)*, !dbg !5455
  %45 = addrspacecast i8 addrspace(10)* %44 to i8 addrspace(11)*, !dbg !5455
  %46 = getelementptr inbounds i8, i8 addrspace(11)* %45, i64 8, !dbg !5455
  %47 = bitcast i8 addrspace(11)* %46 to {} addrspace(10)* addrspace(11)*, !dbg !5455
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %47 release, align 8, !dbg !5455, !tbaa !307, !alias.scope !117, !noalias !5431
  %box28 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task23, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #68, !dbg !5456
  %48 = bitcast {} addrspace(10)* %box28 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5456
  %49 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %48, i64 0, i64 0, !dbg !5456
  store {} addrspace(10)* %newstruct24, {} addrspace(10)* addrspace(10)* %49, align 8, !dbg !5456, !tbaa !113, !alias.scope !117, !noalias !5431
  %50 = addrspacecast {} addrspace(10)* %box28 to {} addrspace(12)*, !dbg !5456
  call void @ijl_throw({} addrspace(12)* %50) #67, !dbg !5456
  unreachable, !dbg !5456

L41:                                              ; preds = %L28
  %51 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5457
  %52 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %51 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5457
  %arraylen_ptr31 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %52, i64 0, i32 1, !dbg !5457
  %arraylen32 = load i64, i64 addrspace(11)* %arraylen_ptr31, align 8, !dbg !5457, !tbaa !332, !range !87, !alias.scope !5459, !noalias !5462
  %.not143 = icmp eq i64 %arraysize, %arraylen32, !dbg !5464
  br i1 %.not143, label %L79, label %L45, !dbg !5458

L45:                                              ; preds = %L41
  %current_task41149 = getelementptr inbounds {}**, {}*** %6, i64 -14, !dbg !5466
  %current_task41 = bitcast {}*** %current_task41149 to {}**, !dbg !5466
  %newstruct42 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task41, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #68, !dbg !5466
  %53 = bitcast {} addrspace(10)* %newstruct42 to {} addrspace(10)* addrspace(10)*, !dbg !5466
  %54 = addrspacecast {} addrspace(10)* addrspace(10)* %53 to {} addrspace(10)* addrspace(11)*, !dbg !5466
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %54, align 8, !dbg !5466, !tbaa !307, !alias.scope !117, !noalias !5431
  %55 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %54, i64 1, !dbg !5466
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %55, align 8, !dbg !5466, !tbaa !307, !alias.scope !117, !noalias !5431
  %box44 = call noalias nonnull dereferenceable(40) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task41, i64 40, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5161715216 to {}*) to {} addrspace(10)*)) #68, !dbg !5466
  %56 = bitcast {} addrspace(10)* %box44 to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5466
  %.repack151 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %56, i64 0, i32 0, !dbg !5466
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495536 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack151, align 8, !dbg !5466, !tbaa !113, !alias.scope !117, !noalias !5431
  %.repack152.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %56, i64 0, i32 1, i64 0, !dbg !5466
  store i64 %arraysize, i64 addrspace(10)* %.repack152.repack, align 8, !dbg !5466, !tbaa !113, !alias.scope !117, !noalias !5431
  %.repack152.repack158 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %56, i64 0, i32 1, i64 1, !dbg !5466
  store i64 %arraysize, i64 addrspace(10)* %.repack152.repack158, align 8, !dbg !5466, !tbaa !113, !alias.scope !117, !noalias !5431
  %.repack154 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %56, i64 0, i32 2, !dbg !5466
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269495440 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack154, align 8, !dbg !5466, !tbaa !113, !alias.scope !117, !noalias !5431
  %.repack156 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64 } addrspace(10)* %56, i64 0, i32 3, !dbg !5466
  store i64 %arraylen32, i64 addrspace(10)* %.repack156, align 8, !dbg !5466, !tbaa !113, !alias.scope !117, !noalias !5431
  store atomic {} addrspace(10)* %box44, {} addrspace(10)* addrspace(11)* %54 release, align 8, !dbg !5466, !tbaa !307, !alias.scope !117, !noalias !5431
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct42, {} addrspace(10)* nonnull %box44) #69, !dbg !5466
  %57 = bitcast {} addrspace(10)* %newstruct42 to i8 addrspace(10)*, !dbg !5466
  %58 = addrspacecast i8 addrspace(10)* %57 to i8 addrspace(11)*, !dbg !5466
  %59 = getelementptr inbounds i8, i8 addrspace(11)* %58, i64 8, !dbg !5466
  %60 = bitcast i8 addrspace(11)* %59 to {} addrspace(10)* addrspace(11)*, !dbg !5466
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %60 release, align 8, !dbg !5466, !tbaa !307, !alias.scope !117, !noalias !5431
  %box46 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task41, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #68, !dbg !5467
  %61 = bitcast {} addrspace(10)* %box46 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5467
  %62 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %61, i64 0, i64 0, !dbg !5467
  store {} addrspace(10)* %newstruct42, {} addrspace(10)* addrspace(10)* %62, align 8, !dbg !5467, !tbaa !113, !alias.scope !117, !noalias !5431
  %63 = addrspacecast {} addrspace(10)* %box46 to {} addrspace(12)*, !dbg !5467
  call void @ijl_throw({} addrspace(12)* %63) #67, !dbg !5467
  unreachable, !dbg !5467

L79:                                              ; preds = %L41
  %"'ipc9" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !5468
  %64 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !5468
  %65 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc9"), !dbg !5468
  %66 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %64) #70, !dbg !5468
  %"'ipc8" = bitcast {}* %65 to double**, !dbg !5468
  %67 = bitcast {}* %66 to double**, !dbg !5468
  %"arrayptr171'ipl" = load double*, double** %"'ipc8", align 8, !dbg !5468, !tbaa !382, !alias.scope !5472, !noalias !5473, !nonnull !68
  %68 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 2, !dbg !5468
  store double* %"arrayptr171'ipl", double** %68, align 8, !dbg !5468
  %arrayptr171 = load double*, double** %67, align 8, !dbg !5468, !tbaa !382, !alias.scope !5448, !noalias !5451, !nonnull !68
  %"'ipc7" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !5474
  %69 = addrspacecast {} addrspace(10)* %3 to {} addrspace(11)*, !dbg !5474
  %70 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc7"), !dbg !5474
  %71 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %69) #70, !dbg !5474
  %"'ipc6" = bitcast {}* %70 to double**, !dbg !5474
  %72 = bitcast {}* %71 to double**, !dbg !5474
  %"arrayptr50172'ipl" = load double*, double** %"'ipc6", align 8, !dbg !5474, !tbaa !382, !alias.scope !5478, !noalias !5479, !nonnull !68
  %73 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 1, !dbg !5474
  store double* %"arrayptr50172'ipl", double** %73, align 8, !dbg !5474
  %arrayptr50172 = load double*, double** %72, align 8, !dbg !5474, !tbaa !382, !alias.scope !5459, !noalias !5462, !nonnull !68
  %"arrayptr50172195'ipc" = bitcast double* %"arrayptr50172'ipl" to i8*, !dbg !5480
  %arrayptr50172195 = bitcast double* %arrayptr50172 to i8*, !dbg !5480
  %74 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %2, {} addrspace(10)* %"'1", {} addrspace(10)* %3, {} addrspace(10)* %"'2"), !dbg !5480
  %75 = lshr i32 %0, 24, !dbg !5481
  %value_phi51 = trunc i32 %75 to i8, !dbg !5488
  %.not165 = icmp eq i64 %arraysize, 0, !dbg !5489
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !5491
  %76 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !5491
  %77 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !5491
  %78 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %76) #70, !dbg !5491
  %"'ipc" = bitcast {}* %77 to double**, !dbg !5491
  %79 = bitcast {}* %78 to double**, !dbg !5491
  %"arrayptr81170'ipl" = load double*, double** %"'ipc", align 8, !dbg !5491, !tbaa !73, !alias.scope !5492, !noalias !5493, !nonnull !68
  %80 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 0, !dbg !5491
  store double* %"arrayptr81170'ipl", double** %80, align 8, !dbg !5491
  %arrayptr81170 = load double*, double** %79, align 8, !dbg !5491, !tbaa !73, !invariant.load !68, !alias.scope !5436, !noalias !5439, !nonnull !68
  switch i8 %value_phi51, label %81 [
    i8 85, label %84
    i8 76, label %82
  ], !dbg !5480

81:                                               ; preds = %L79
  br label %82, !dbg !5480

82:                                               ; preds = %81, %L79
  %83 = phi i32 [ -1, %81 ], [ 122, %L79 ], !dbg !5480
  br label %84, !dbg !5480

84:                                               ; preds = %82, %L79
  %85 = phi i32 [ %83, %82 ], [ 121, %L79 ], !dbg !5480
  %86 = trunc i64 %arraysize to i32, !dbg !5480
  %87 = select i1 %.not165, i32 1, i32 %86, !dbg !5480
  %88 = add nsw i32 %85, -123, !dbg !5480
  %89 = icmp ult i32 %88, -2, !dbg !5480
  %90 = select i1 %89, i32 2, i32 0, !dbg !5480
  %91 = icmp slt i32 %86, 0, !dbg !5480
  %92 = select i1 %91, i32 3, i32 %90, !dbg !5480
  %93 = call i32 @llvm.smax.i32(i32 %86, i32 1) #67, !dbg !5480
  %94 = icmp sgt i32 %93, %87, !dbg !5480
  %95 = select i1 %94, i32 6, i32 %92, !dbg !5480
  %96 = icmp eq i32 %95, 0, !dbg !5480
  call void @llvm.assume(i1 %96), !dbg !5480
  %97 = icmp sgt i32 %86, 0, !dbg !5480
  br i1 %97, label %.preheader187, label %.loopexit189, !dbg !5480

.preheader187:                                    ; preds = %84
  %98 = shl i64 %arraysize, 3, !dbg !5480
  %99 = and i64 %98, 34359738360, !dbg !5480
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %arrayptr50172195, i8 0, i64 %99, i1 false) #67, !dbg !5480, !tbaa !1731, !noalias !5494
  br label %.loopexit189, !dbg !5480

.loopexit189:                                     ; preds = %.preheader187, %84
  switch i32 %85, label %298 [
    i32 122, label %100
    i32 121, label %192
  ], !dbg !5480

100:                                              ; preds = %.loopexit189
  %101 = icmp sgt i32 %86, 0, !dbg !5480
  br i1 %101, label %102, label %dsymv_64_.exit, !dbg !5480

102:                                              ; preds = %100
  %sext185 = shl i64 %arraysize, 32, !dbg !5480
  %103 = ashr exact i64 %sext185, 32, !dbg !5480
  %104 = sext i32 %87 to i64, !dbg !5480
  %105 = and i64 %arraysize, 4294967295, !dbg !5480
  %106 = add nsw i64 %105, -1, !dbg !5480
  %107 = add nsw i64 %105, -2, !dbg !5480
  %108 = add nuw i64 %106, 1, !dbg !5480
  %109 = mul nuw i64 %108, 8, !dbg !5480
  %110 = call noalias nonnull i8* @malloc(i64 %109), !dbg !5480
  %_malloccache = bitcast i8* %110 to double*, !dbg !5480
  %111 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 4, !dbg !5480
  store double* %_malloccache, double** %111, align 8, !dbg !5480
  store double* %_malloccache, double** %_cache, align 8, !dbg !5480, !invariant.group !5495
  %112 = mul nuw i64 %108, 8, !dbg !5480
  %113 = call noalias nonnull i8* @malloc(i64 %112), !dbg !5480
  %_malloccache14 = bitcast i8* %113 to double*, !dbg !5480
  %114 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 5, !dbg !5480
  store double* %_malloccache14, double** %114, align 8, !dbg !5480
  store double* %_malloccache14, double** %_cache13, align 8, !dbg !5480, !invariant.group !5496
  %115 = mul nuw i64 %108, 8, !dbg !5480
  %116 = call noalias nonnull i8* @malloc(i64 %115), !dbg !5480
  %_malloccache16 = bitcast i8* %116 to double**, !dbg !5480
  %117 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 6, !dbg !5480
  store double** %_malloccache16, double*** %117, align 8, !dbg !5480
  store double** %_malloccache16, double*** %_cache15, align 8, !dbg !5480, !invariant.group !5497
  %118 = mul nuw i64 %108, 8, !dbg !5480
  %119 = call noalias nonnull i8* @malloc(i64 %118), !dbg !5480
  %_malloccache19 = bitcast i8* %119 to double**, !dbg !5480
  %120 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 7, !dbg !5480
  store double** %_malloccache19, double*** %120, align 8, !dbg !5480
  store double** %_malloccache19, double*** %_cache18, align 8, !dbg !5480, !invariant.group !5498
  %121 = mul nuw i64 %108, 8, !dbg !5480
  %122 = call noalias nonnull i8* @malloc(i64 %121), !dbg !5480
  %_malloccache22 = bitcast i8* %122 to double**, !dbg !5480
  %123 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 8, !dbg !5480
  store double** %_malloccache22, double*** %123, align 8, !dbg !5480
  store double** %_malloccache22, double*** %_cache21, align 8, !dbg !5480, !invariant.group !5499
  br label %124, !dbg !5480

124:                                              ; preds = %187, %102
  %iv3 = phi i64 [ %iv.next4, %187 ], [ 0, %102 ], !dbg !5480
  %125 = mul nsw i64 %iv3, -1, !dbg !5480
  %126 = add i64 %107, %125, !dbg !5480
  %iv.next4 = add nuw nsw i64 %iv3, 1, !dbg !5480
  %127 = add i64 %iv3, 1, !dbg !5480
  %128 = add i64 %iv3, 1, !dbg !5480
  %129 = trunc i64 %128 to i32, !dbg !5480
  %130 = sext i32 %129 to i64, !dbg !5480
  %131 = getelementptr inbounds double, double* %arrayptr171, i64 %iv3, !dbg !5480
  %132 = load double, double* %131, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5500, !noalias !5503
  %133 = mul nsw i64 %iv3, %104, !dbg !5480
  %134 = add nsw i64 %133, %iv3, !dbg !5480
  %135 = getelementptr inbounds double, double* %arrayptr81170, i64 %134, !dbg !5480
  %136 = load double, double* %135, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5505, !noalias !5508
  %137 = getelementptr inbounds double, double* %arrayptr50172, i64 %iv3, !dbg !5480
  %138 = load double, double* %137, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5513
  %139 = call double @llvm.fmuladd.f64(double %132, double %136, double %138) #67, !dbg !5480
  store double %139, double* %137, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5515
  %140 = load double*, double** %_cache13, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5496
  %141 = getelementptr inbounds double, double* %140, i64 %iv3, !dbg !5480
  store double %136, double* %141, align 8, !dbg !5480, !tbaa !1731, !invariant.group !5518
  %142 = load double*, double** %_cache, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5495
  %143 = getelementptr inbounds double, double* %142, i64 %iv3, !dbg !5480
  store double %132, double* %143, align 8, !dbg !5480, !tbaa !1731, !invariant.group !5519
  %144 = icmp slt i64 %iv.next4, %103, !dbg !5480
  br i1 %144, label %145, label %187, !dbg !5480

145:                                              ; preds = %124
  %146 = add nuw i64 %126, 1, !dbg !5480
  %147 = load double**, double*** %_cache15, align 8, !dbg !5480
  %148 = getelementptr inbounds double*, double** %147, i64 %iv3, !dbg !5480
  %149 = mul nuw i64 %146, 8, !dbg !5480
  %150 = call noalias nonnull i8* @malloc(i64 %149), !dbg !5480
  %_malloccache17 = bitcast i8* %150 to double*, !dbg !5480
  store double* %_malloccache17, double** %148, align 8, !dbg !5480, !invariant.group !5520
  %151 = load double**, double*** %_cache18, align 8, !dbg !5480
  %152 = getelementptr inbounds double*, double** %151, i64 %iv3, !dbg !5480
  %153 = mul nuw i64 %146, 8, !dbg !5480
  %154 = call noalias nonnull i8* @malloc(i64 %153), !dbg !5480
  %_malloccache20 = bitcast i8* %154 to double*, !dbg !5480
  store double* %_malloccache20, double** %152, align 8, !dbg !5480, !invariant.group !5521
  %155 = load double**, double*** %_cache21, align 8, !dbg !5480
  %156 = getelementptr inbounds double*, double** %155, i64 %iv3, !dbg !5480
  %157 = mul nuw i64 %146, 8, !dbg !5480
  %158 = call noalias nonnull i8* @malloc(i64 %157), !dbg !5480
  %_malloccache23 = bitcast i8* %158 to double*, !dbg !5480
  store double* %_malloccache23, double** %156, align 8, !dbg !5480, !invariant.group !5522
  br label %159, !dbg !5480

159:                                              ; preds = %159, %145
  %iv5 = phi i64 [ %iv.next6, %159 ], [ 0, %145 ], !dbg !5480
  %160 = phi double [ 0.000000e+00, %145 ], [ %184, %159 ], !dbg !5480
  %iv.next6 = add nuw nsw i64 %iv5, 1, !dbg !5480
  %161 = add i64 %127, %iv5, !dbg !5480
  %162 = add i64 %130, %iv5, !dbg !5480
  %163 = add nsw i64 %161, %133, !dbg !5480
  %164 = getelementptr inbounds double, double* %arrayptr81170, i64 %163, !dbg !5480
  %165 = load double, double* %164, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5505, !noalias !5508
  %166 = getelementptr inbounds double, double* %arrayptr50172, i64 %162, !dbg !5480
  %167 = load double, double* %166, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5513
  %168 = call double @llvm.fmuladd.f64(double %132, double %165, double %167) #67, !dbg !5480
  store double %168, double* %166, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5515
  %169 = load double**, double*** %_cache15, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5497
  %170 = getelementptr inbounds double*, double** %169, i64 %iv3, !dbg !5480
  %171 = load double*, double** %170, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5520
  %172 = getelementptr inbounds double, double* %171, i64 %iv5, !dbg !5480
  store double %165, double* %172, align 8, !dbg !5480, !tbaa !1731, !invariant.group !5523
  %173 = getelementptr inbounds double, double* %arrayptr171, i64 %162, !dbg !5480
  %174 = load double, double* %173, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5500, !noalias !5503
  %175 = load double**, double*** %_cache18, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5498
  %176 = getelementptr inbounds double*, double** %175, i64 %iv3, !dbg !5480
  %177 = load double*, double** %176, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5521
  %178 = getelementptr inbounds double, double* %177, i64 %iv5, !dbg !5480
  store double %174, double* %178, align 8, !dbg !5480, !tbaa !1731, !invariant.group !5524
  %179 = load double, double* %164, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5505, !noalias !5508
  %180 = load double**, double*** %_cache21, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5499
  %181 = getelementptr inbounds double*, double** %180, i64 %iv3, !dbg !5480
  %182 = load double*, double** %181, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5522
  %183 = getelementptr inbounds double, double* %182, i64 %iv5, !dbg !5480
  store double %179, double* %183, align 8, !dbg !5480, !tbaa !1731, !invariant.group !5525
  %184 = call double @llvm.fmuladd.f64(double %174, double %179, double %160) #67, !dbg !5480
  %185 = add nuw nsw i64 %161, 1, !dbg !5480
  %186 = icmp eq i64 %185, %105, !dbg !5480
  br i1 %186, label %._crit_edge183, label %159, !dbg !5480, !llvm.loop !5526

._crit_edge183:                                   ; preds = %159
  %.pre184 = load double, double* %137, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5513
  br label %187, !dbg !5480

187:                                              ; preds = %._crit_edge183, %124
  %188 = phi double [ %139, %124 ], [ %.pre184, %._crit_edge183 ], !dbg !5480
  %189 = phi double [ 0.000000e+00, %124 ], [ %184, %._crit_edge183 ], !dbg !5480
  %190 = fadd double %189, %188, !dbg !5480
  store double %190, double* %137, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5515
  %191 = icmp eq i64 %iv.next4, %105, !dbg !5480
  br i1 %191, label %dsymv_64_.exit.loopexit, label %124, !dbg !5480, !llvm.loop !5527

192:                                              ; preds = %.loopexit189
  %193 = icmp sgt i32 %86, 0, !dbg !5480
  br i1 %193, label %194, label %dsymv_64_.exit, !dbg !5480

194:                                              ; preds = %192
  %sext = shl i64 %arraysize, 32, !dbg !5480
  %195 = ashr exact i64 %sext, 32, !dbg !5480
  %196 = sext i32 %87 to i64, !dbg !5480
  %indvars.iv217 = add nsw i64 %195, -1, !dbg !5480
  %197 = getelementptr inbounds double, double* %arrayptr171, i64 %indvars.iv217, !dbg !5480
  %198 = load double, double* %197, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5500, !noalias !5503
  %199 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 9, !dbg !5480
  store double %198, double* %199, align 8, !dbg !5480
  %200 = mul nsw i64 %indvars.iv217, %196, !dbg !5480
  %201 = add nsw i64 %200, %indvars.iv217, !dbg !5480
  %202 = getelementptr inbounds double, double* %arrayptr81170, i64 %201, !dbg !5480
  %203 = load double, double* %202, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5505, !noalias !5508
  %204 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 10, !dbg !5480
  store double %203, double* %204, align 8, !dbg !5480
  %205 = getelementptr inbounds double, double* %arrayptr50172, i64 %indvars.iv217, !dbg !5480
  %206 = load double, double* %205, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5513
  %207 = call double @llvm.fmuladd.f64(double %198, double %203, double %206) #67, !dbg !5480
  store double %207, double* %205, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5515
  %208 = icmp sgt i64 %sext, 4294967296, !dbg !5480
  br i1 %208, label %.preheader.preheader.lr.ph, label %.thread, !dbg !5480

.preheader.preheader.lr.ph:                       ; preds = %194
  %209 = add nuw i64 %arraysize, 4294967295, !dbg !5480
  %210 = and i64 %209, 4294967295, !dbg !5480
  %211 = sub i64 0, %196, !dbg !5480
  %212 = add i64 %195, -1, !dbg !5480
  %213 = add nsw i64 %195, -1, !dbg !5480
  %smin = call i64 @llvm.smin.i64(i64 %213, i64 1), !dbg !5480
  %214 = sub i64 %212, %smin, !dbg !5480
  %215 = add nsw i64 %210, -1, !dbg !5480
  %216 = add nuw i64 %214, 1, !dbg !5480
  %217 = mul nuw i64 %216, 8, !dbg !5480
  %218 = call noalias nonnull i8* @malloc(i64 %217), !dbg !5480
  %_malloccache25 = bitcast i8* %218 to double**, !dbg !5480
  %219 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 11, !dbg !5480
  store double** %_malloccache25, double*** %219, align 8, !dbg !5480
  store double** %_malloccache25, double*** %_cache24, align 8, !dbg !5480, !invariant.group !5528
  %220 = mul nuw i64 %216, 8, !dbg !5480
  %221 = call noalias nonnull i8* @malloc(i64 %220), !dbg !5480
  %_malloccache28 = bitcast i8* %221 to double**, !dbg !5480
  %222 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 12, !dbg !5480
  store double** %_malloccache28, double*** %222, align 8, !dbg !5480
  store double** %_malloccache28, double*** %_cache27, align 8, !dbg !5480, !invariant.group !5529
  %223 = mul nuw i64 %216, 8, !dbg !5480
  %224 = call noalias nonnull i8* @malloc(i64 %223), !dbg !5480
  %_malloccache31 = bitcast i8* %224 to double**, !dbg !5480
  %225 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 13, !dbg !5480
  store double** %_malloccache31, double*** %225, align 8, !dbg !5480
  store double** %_malloccache31, double*** %_cache30, align 8, !dbg !5480, !invariant.group !5530
  %226 = mul nuw i64 %216, 8, !dbg !5480
  %227 = call noalias nonnull i8* @malloc(i64 %226), !dbg !5480
  %_malloccache34 = bitcast i8* %227 to double*, !dbg !5480
  %228 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 14, !dbg !5480
  store double* %_malloccache34, double** %228, align 8, !dbg !5480
  store double* %_malloccache34, double** %_cache33, align 8, !dbg !5480, !invariant.group !5531
  %229 = mul nuw i64 %216, 8, !dbg !5480
  %230 = call noalias nonnull i8* @malloc(i64 %229), !dbg !5480
  %_malloccache36 = bitcast i8* %230 to double*, !dbg !5480
  %231 = getelementptr inbounds { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %5, i32 0, i32 15, !dbg !5480
  store double* %_malloccache36, double** %231, align 8, !dbg !5480
  store double* %_malloccache36, double** %_cache35, align 8, !dbg !5480, !invariant.group !5532
  br label %.preheader.preheader, !dbg !5480

.preheader.preheader:                             ; preds = %281, %.preheader.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %281 ], [ 0, %.preheader.preheader.lr.ph ]
  %232 = phi double [ %198, %.preheader.preheader.lr.ph ], [ %285, %281 ]
  %233 = mul nsw i64 %iv, -1, !dbg !5480
  %234 = add i64 %215, %233, !dbg !5480
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5480
  %235 = mul nsw i64 %iv, -1, !dbg !5480
  %236 = add i64 %210, %235, !dbg !5480
  %237 = mul nsw i64 %iv, -1, !dbg !5480
  %238 = add i64 %indvars.iv217, %237, !dbg !5480
  %239 = mul i64 %211, %iv, !dbg !5480
  %240 = add i64 %200, %239, !dbg !5480
  %241 = mul nsw i64 %iv, -1, !dbg !5480
  %242 = add i64 %indvars.iv217, %241, !dbg !5480
  %scevgep = getelementptr double, double* %arrayptr50172, i64 %242, !dbg !5480
  %243 = add nuw i64 %234, 1, !dbg !5480
  %244 = load double**, double*** %_cache24, align 8, !dbg !5480
  %245 = getelementptr inbounds double*, double** %244, i64 %iv, !dbg !5480
  %246 = mul nuw i64 %243, 8, !dbg !5480
  %247 = call noalias nonnull i8* @malloc(i64 %246), !dbg !5480
  %_malloccache26 = bitcast i8* %247 to double*, !dbg !5480
  store double* %_malloccache26, double** %245, align 8, !dbg !5480, !invariant.group !5533
  %248 = load double**, double*** %_cache27, align 8, !dbg !5480
  %249 = getelementptr inbounds double*, double** %248, i64 %iv, !dbg !5480
  %250 = mul nuw i64 %243, 8, !dbg !5480
  %251 = call noalias nonnull i8* @malloc(i64 %250), !dbg !5480
  %_malloccache29 = bitcast i8* %251 to double*, !dbg !5480
  store double* %_malloccache29, double** %249, align 8, !dbg !5480, !invariant.group !5534
  %252 = load double**, double*** %_cache30, align 8, !dbg !5480
  %253 = getelementptr inbounds double*, double** %252, i64 %iv, !dbg !5480
  %254 = mul nuw i64 %243, 8, !dbg !5480
  %255 = call noalias nonnull i8* @malloc(i64 %254), !dbg !5480
  %_malloccache32 = bitcast i8* %255 to double*, !dbg !5480
  store double* %_malloccache32, double** %253, align 8, !dbg !5480, !invariant.group !5535
  br label %.preheader, !dbg !5480

.thread.loopexit:                                 ; preds = %281
  br label %.thread, !dbg !5480

.thread:                                          ; preds = %.thread.loopexit, %194
  %.lcssa216 = phi double [ %207, %194 ], [ %292, %.thread.loopexit ], !dbg !5480
  %256 = fadd double %.lcssa216, 0.000000e+00, !dbg !5480
  store double %256, double* %arrayptr50172, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5515
  br label %dsymv_64_.exit, !dbg !5480

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv1 = phi i64 [ %iv.next2, %.preheader ], [ 0, %.preheader.preheader ], !dbg !5480
  %257 = phi double [ %279, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !5480
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !5480
  %258 = add nsw i64 %iv1, %240, !dbg !5480
  %259 = getelementptr inbounds double, double* %arrayptr81170, i64 %258, !dbg !5480
  %260 = load double, double* %259, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5505, !noalias !5508
  %261 = getelementptr inbounds double, double* %arrayptr50172, i64 %iv1, !dbg !5480
  %262 = load double, double* %261, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5513
  %263 = call double @llvm.fmuladd.f64(double %232, double %260, double %262) #67, !dbg !5480
  store double %263, double* %261, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5515
  %264 = load double**, double*** %_cache24, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5528
  %265 = getelementptr inbounds double*, double** %264, i64 %iv, !dbg !5480
  %266 = load double*, double** %265, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5533
  %267 = getelementptr inbounds double, double* %266, i64 %iv1, !dbg !5480
  store double %260, double* %267, align 8, !dbg !5480, !tbaa !1731, !invariant.group !5536
  %268 = getelementptr inbounds double, double* %arrayptr171, i64 %iv1, !dbg !5480
  %269 = load double, double* %268, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5500, !noalias !5503
  %270 = load double**, double*** %_cache27, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5529
  %271 = getelementptr inbounds double*, double** %270, i64 %iv, !dbg !5480
  %272 = load double*, double** %271, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5534
  %273 = getelementptr inbounds double, double* %272, i64 %iv1, !dbg !5480
  store double %269, double* %273, align 8, !dbg !5480, !tbaa !1731, !invariant.group !5537
  %274 = load double, double* %259, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5505, !noalias !5508
  %275 = load double**, double*** %_cache30, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5530
  %276 = getelementptr inbounds double*, double** %275, i64 %iv, !dbg !5480
  %277 = load double*, double** %276, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5535
  %278 = getelementptr inbounds double, double* %277, i64 %iv1, !dbg !5480
  store double %274, double* %278, align 8, !dbg !5480, !tbaa !1731, !invariant.group !5538
  %279 = call double @llvm.fmuladd.f64(double %269, double %274, double %257) #67, !dbg !5480
  %280 = icmp eq i64 %iv.next2, %236, !dbg !5480
  br i1 %280, label %281, label %.preheader, !dbg !5480, !llvm.loop !5539

281:                                              ; preds = %.preheader
  %.pre = load double, double* %scevgep, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5513
  %282 = fadd double %279, %.pre, !dbg !5480
  store double %282, double* %scevgep, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5515
  %283 = add nsw i64 %238, -1, !dbg !5480
  %284 = getelementptr inbounds double, double* %arrayptr171, i64 %283, !dbg !5480
  %285 = load double, double* %284, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5500, !noalias !5503
  %286 = mul nsw i64 %283, %196, !dbg !5480
  %287 = add nsw i64 %286, %283, !dbg !5480
  %288 = getelementptr inbounds double, double* %arrayptr81170, i64 %287, !dbg !5480
  %289 = load double, double* %288, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5505, !noalias !5508
  %290 = getelementptr inbounds double, double* %arrayptr50172, i64 %283, !dbg !5480
  %291 = load double, double* %290, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5513
  %292 = call double @llvm.fmuladd.f64(double %285, double %289, double %291) #67, !dbg !5480
  store double %292, double* %290, align 8, !dbg !5480, !tbaa !1731, !alias.scope !5510, !noalias !5515
  %293 = load double*, double** %_cache35, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5532
  %294 = getelementptr inbounds double, double* %293, i64 %iv, !dbg !5480
  store double %289, double* %294, align 8, !dbg !5480, !tbaa !1731, !invariant.group !5540
  %295 = load double*, double** %_cache33, align 8, !dbg !5480, !dereferenceable !306, !invariant.group !5531
  %296 = getelementptr inbounds double, double* %295, i64 %iv, !dbg !5480
  store double %285, double* %296, align 8, !dbg !5480, !tbaa !1731, !invariant.group !5541
  %297 = icmp sgt i64 %238, 1, !dbg !5480
  br i1 %297, label %.preheader.preheader, label %.thread.loopexit, !dbg !5480

298:                                              ; preds = %.loopexit189
  unreachable, !dbg !5480

dsymv_64_.exit.loopexit:                          ; preds = %187
  br label %dsymv_64_.exit, !dbg !5480

dsymv_64_.exit:                                   ; preds = %dsymv_64_.exit.loopexit, %.thread, %192, %100
  call void @llvm.julia.gc_preserve_end(token %74) #67, !dbg !5480
  %299 = getelementptr inbounds { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 1, !dbg !5542
  store {} addrspace(10)* %3, {} addrspace(10)** %299, align 8, !dbg !5542
  %300 = getelementptr inbounds { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 2, !dbg !5542
  store {} addrspace(10)* %"'2", {} addrspace(10)** %300, align 8, !dbg !5542
  %301 = load { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }, { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* }* %4, align 8, !dbg !5542
  ret { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %301, !dbg !5542
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1994({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", i32 zeroext "enzyme_inactive" %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %3, {} addrspace(10)* align 16 %"'2") unnamed_addr #64 !dbg !5481 {
top:
  %4 = alloca { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %5 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 0
  %6 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i64 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i64 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %10 = call {}*** @julia.get_pgcstack() #67
  %ptls_field159 = getelementptr inbounds {}**, {}*** %10, i64 2
  %11 = bitcast {}*** %ptls_field159 to i64***
  %ptls_load160161 = load i64**, i64*** %11, align 8, !tbaa !69, !alias.scope !5482, !noalias !5485
  %12 = getelementptr inbounds i64*, i64** %ptls_load160161, i64 2
  %safepoint = load i64*, i64** %12, align 8, !tbaa !73, !invariant.load !68, !alias.scope !5487, !noalias !5490
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #67, !dbg !5492
  fence syncscope("singlethread") seq_cst
  %.not = icmp eq i32 %1, 1308622848, !dbg !5493
  %. = select i1 %.not, i64 3, i64 4, !dbg !5497
  %13 = bitcast {} addrspace(10)* %2 to {} addrspace(10)* addrspace(10)*, !dbg !5498
  %arraysize_ptr228 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %13, i64 %., !dbg !5498
  %14 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr228 to i64 addrspace(10)*, !dbg !5498
  %15 = addrspacecast i64 addrspace(10)* %14 to i64 addrspace(11)*, !dbg !5498
  %arraysize = load i64, i64 addrspace(11)* %15, align 8, !dbg !5498, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !5499, !noalias !5502
  %16 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 6, !dbg !5495
  store i64 %arraysize, i64* %16, align 8, !dbg !5495
  %value_phi4 = select i1 %.not, i64 4, i64 3, !dbg !5495
  %arraysize_ptr11227 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %13, i64 %value_phi4, !dbg !5498
  %17 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr11227 to i64 addrspace(10)*, !dbg !5498
  %18 = addrspacecast i64 addrspace(10)* %17 to i64 addrspace(11)*, !dbg !5498
  %arraysize12 = load i64, i64 addrspace(11)* %18, align 8, !dbg !5498, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !5499, !noalias !5502
  %19 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5504
  %20 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %19 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5504
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %20, i64 0, i32 1, !dbg !5504
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5504, !tbaa !332, !range !87, !alias.scope !5506, !noalias !5509
  %.not163 = icmp eq i64 %arraysize12, %arraylen, !dbg !5511
  br i1 %.not163, label %L28, label %L22, !dbg !5505

L22:                                              ; preds = %top
  %current_task17164 = getelementptr inbounds {}**, {}*** %10, i64 -14, !dbg !5513
  %current_task17 = bitcast {}*** %current_task17164 to {}**, !dbg !5513
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #68, !dbg !5513
  %21 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !5513
  %22 = addrspacecast {} addrspace(10)* addrspace(10)* %21 to {} addrspace(10)* addrspace(11)*, !dbg !5513
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %22, align 8, !dbg !5513, !tbaa !307, !alias.scope !117, !noalias !5514
  %23 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %22, i64 1, !dbg !5513
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %23, align 8, !dbg !5513, !tbaa !307, !alias.scope !117, !noalias !5514
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #68, !dbg !5513
  %24 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5513
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %24, i64 0, i32 0, !dbg !5513
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249126016 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !5513, !tbaa !113, !alias.scope !117, !noalias !5514
  %.repack166 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %24, i64 0, i32 1, !dbg !5513
  store i64 %arraysize12, i64 addrspace(10)* %.repack166, align 8, !dbg !5513, !tbaa !113, !alias.scope !117, !noalias !5514
  %.repack168 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %24, i64 0, i32 2, !dbg !5513
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249125968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack168, align 8, !dbg !5513, !tbaa !113, !alias.scope !117, !noalias !5514
  %.repack170 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %24, i64 0, i32 3, !dbg !5513
  store i64 %arraylen, i64 addrspace(10)* %.repack170, align 8, !dbg !5513, !tbaa !113, !alias.scope !117, !noalias !5514
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %22 release, align 8, !dbg !5513, !tbaa !307, !alias.scope !117, !noalias !5514
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #69, !dbg !5513
  %25 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !5513
  %26 = addrspacecast i8 addrspace(10)* %25 to i8 addrspace(11)*, !dbg !5513
  %27 = getelementptr inbounds i8, i8 addrspace(11)* %26, i64 8, !dbg !5513
  %28 = bitcast i8 addrspace(11)* %27 to {} addrspace(10)* addrspace(11)*, !dbg !5513
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %28 release, align 8, !dbg !5513, !tbaa !307, !alias.scope !117, !noalias !5514
  %box20 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #68, !dbg !5505
  %29 = bitcast {} addrspace(10)* %box20 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5505
  %30 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %29, i64 0, i64 0, !dbg !5505
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %30, align 8, !dbg !5505, !tbaa !113, !alias.scope !117, !noalias !5514
  %31 = addrspacecast {} addrspace(10)* %box20 to {} addrspace(12)*, !dbg !5505
  call void @ijl_throw({} addrspace(12)* %31) #67, !dbg !5505
  unreachable, !dbg !5505

L28:                                              ; preds = %top
  %32 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5517
  %33 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %32 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5517
  %arraylen_ptr21 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %33, i64 0, i32 1, !dbg !5517
  %arraylen22 = load i64, i64 addrspace(11)* %arraylen_ptr21, align 8, !dbg !5517, !tbaa !332, !range !87, !alias.scope !5519, !noalias !5522
  %.not173 = icmp eq i64 %arraysize, %arraylen22, !dbg !5524
  br i1 %.not173, label %L38, label %L32, !dbg !5518

L32:                                              ; preds = %L28
  %current_task25174 = getelementptr inbounds {}**, {}*** %10, i64 -14, !dbg !5526
  %current_task25 = bitcast {}*** %current_task25174 to {}**, !dbg !5526
  %newstruct26 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #68, !dbg !5526
  %34 = bitcast {} addrspace(10)* %newstruct26 to {} addrspace(10)* addrspace(10)*, !dbg !5526
  %35 = addrspacecast {} addrspace(10)* addrspace(10)* %34 to {} addrspace(10)* addrspace(11)*, !dbg !5526
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %35, align 8, !dbg !5526, !tbaa !307, !alias.scope !117, !noalias !5514
  %36 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %35, i64 1, !dbg !5526
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %36, align 8, !dbg !5526, !tbaa !307, !alias.scope !117, !noalias !5514
  %box28 = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #68, !dbg !5526
  %37 = bitcast {} addrspace(10)* %box28 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !5526
  %.repack176 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 0, !dbg !5526
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249125920 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack176, align 8, !dbg !5526, !tbaa !113, !alias.scope !117, !noalias !5514
  %.repack177 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 1, !dbg !5526
  store i64 %arraysize, i64 addrspace(10)* %.repack177, align 8, !dbg !5526, !tbaa !113, !alias.scope !117, !noalias !5514
  %.repack179 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 2, !dbg !5526
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249125872 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack179, align 8, !dbg !5526, !tbaa !113, !alias.scope !117, !noalias !5514
  %.repack181 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %37, i64 0, i32 3, !dbg !5526
  store i64 %arraylen22, i64 addrspace(10)* %.repack181, align 8, !dbg !5526, !tbaa !113, !alias.scope !117, !noalias !5514
  store atomic {} addrspace(10)* %box28, {} addrspace(10)* addrspace(11)* %35 release, align 8, !dbg !5526, !tbaa !307, !alias.scope !117, !noalias !5514
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct26, {} addrspace(10)* nonnull %box28) #69, !dbg !5526
  %38 = bitcast {} addrspace(10)* %newstruct26 to i8 addrspace(10)*, !dbg !5526
  %39 = addrspacecast i8 addrspace(10)* %38 to i8 addrspace(11)*, !dbg !5526
  %40 = getelementptr inbounds i8, i8 addrspace(11)* %39, i64 8, !dbg !5526
  %41 = bitcast i8 addrspace(11)* %40 to {} addrspace(10)* addrspace(11)*, !dbg !5526
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %41 release, align 8, !dbg !5526, !tbaa !307, !alias.scope !117, !noalias !5514
  %box30 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #68, !dbg !5518
  %42 = bitcast {} addrspace(10)* %box30 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !5518
  %43 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %42, i64 0, i64 0, !dbg !5518
  store {} addrspace(10)* %newstruct26, {} addrspace(10)* addrspace(10)* %43, align 8, !dbg !5518, !tbaa !113, !alias.scope !117, !noalias !5514
  %44 = addrspacecast {} addrspace(10)* %box30 to {} addrspace(12)*, !dbg !5518
  call void @ijl_throw({} addrspace(12)* %44) #67, !dbg !5518
  unreachable, !dbg !5518

L38:                                              ; preds = %L28
  %.not184 = icmp eq i64 %arraysize, 0, !dbg !5527
  br i1 %.not184, label %common.ret, label %L41, !dbg !5528

common.ret:                                       ; preds = %L182.critedge, %L152.critedge, %L49.L61_crit_edge, %L38
  %45 = phi {} addrspace(10)* [ %"'ac", %L152.critedge ], [ %"'ac7", %L182.critedge ], [ %"'", %L38 ], [ %"'", %L49.L61_crit_edge ]
  %common.ret.op = phi {} addrspace(10)* [ %54, %L152.critedge ], [ %58, %L182.critedge ], [ %0, %L38 ], [ %0, %L49.L61_crit_edge ]
  %46 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 1, !dbg !5497
  store {} addrspace(10)* %common.ret.op, {} addrspace(10)** %46, align 8, !dbg !5497
  %47 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %4, i32 0, i32 2, !dbg !5497
  store {} addrspace(10)* %45, {} addrspace(10)** %47, align 8, !dbg !5497
  %48 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %4, align 8, !dbg !5497
  ret { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %48, !dbg !5497

L41:                                              ; preds = %L38
  %.not185 = icmp eq i64 %arraysize12, 0, !dbg !5529
  %49 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 7, !dbg !5530
  store i1 %.not185, i1* %49, align 1, !dbg !5530
  br i1 %.not185, label %L49.L61_crit_edge, label %L112, !dbg !5530

L49.L61_crit_edge:                                ; preds = %L41
  %"'ipc" = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !5531
  %50 = bitcast {} addrspace(10)* %0 to i8 addrspace(13)* addrspace(10)*, !dbg !5531
  %"'ipc4" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc" to i8 addrspace(13)* addrspace(11)*, !dbg !5531
  %51 = addrspacecast i8 addrspace(13)* addrspace(10)* %50 to i8 addrspace(13)* addrspace(11)*, !dbg !5531
  %"arrayptr189.pre257'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc4", align 16, !dbg !5531, !tbaa !382, !alias.scope !5534, !noalias !5537
  %arrayptr189.pre257 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %51, align 16, !dbg !5531, !tbaa !382, !alias.scope !5538, !noalias !5522
  %52 = shl nuw i64 %arraysize, 3, !dbg !5539
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr189.pre257, i8 0, i64 %52, i1 false) #67, !dbg !5531, !tbaa !269, !alias.scope !117, !noalias !5514
  br label %common.ret, !dbg !5497

L112:                                             ; preds = %L41
  switch i32 %1, label %L228 [
    i32 1409286144, label %L152.critedge
    i32 1308622848, label %L152.critedge
    i32 1124073472, label %L152.critedge
    i32 1392508928, label %L182.critedge
    i32 1929379840, label %L182.critedge.fold.split
    i32 1207959552, label %L219.critedge
    i32 1744830464, label %L219.critedge.fold.split
  ], !dbg !5540

L152.critedge:                                    ; preds = %L112, %L112, %L112
  %_augmented = call fastcc { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__2035(i32 zeroext %1, {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %3, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'"), !dbg !5542
  %subcache = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 0, !dbg !5542
  %53 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 0, !dbg !5542
  store { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %subcache, { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }* %53, align 8, !dbg !5542
  %54 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 1, !dbg !5542
  %55 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 1, !dbg !5542
  store {} addrspace(10)* %54, {} addrspace(10)** %55, align 8, !dbg !5542
  %"'ac" = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 2, !dbg !5542
  %56 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 2
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %56, align 8
  br label %common.ret

L182.critedge.fold.split:                         ; preds = %L112
  br label %L182.critedge, !dbg !5543

L182.critedge:                                    ; preds = %L182.critedge.fold.split, %L112
  %value_phi67 = phi i32 [ 1275068416, %L182.critedge.fold.split ], [ 1426063360, %L112 ], !dbg !5543
  %_augmented5 = call fastcc { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_symv__2024(i32 zeroext %value_phi67, {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %3, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'"), !dbg !5543
  %subcache6 = extractvalue { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented5, 0, !dbg !5543
  %57 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 3, !dbg !5543
  store { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %subcache6, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }* %57, align 8, !dbg !5543
  %58 = extractvalue { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented5, 1, !dbg !5543
  %59 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 4, !dbg !5543
  store {} addrspace(10)* %58, {} addrspace(10)** %59, align 8, !dbg !5543
  %"'ac7" = extractvalue { { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented5, 2, !dbg !5543
  %60 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %5, i32 0, i32 5
  store {} addrspace(10)* %"'ac7", {} addrspace(10)** %60, align 8
  br label %common.ret

L219.critedge.fold.split:                         ; preds = %L112
  br label %L219.critedge, !dbg !5544

L219.critedge:                                    ; preds = %L219.critedge.fold.split, %L112
  %value_phi71 = phi i32 [ 1275068416, %L219.critedge.fold.split ], [ 1426063360, %L112 ], !dbg !5544
  %61 = call nonnull {} addrspace(10)* @ijl_box_char(i32 zeroext %value_phi71) #67, !dbg !5544
  %current_task72203 = getelementptr inbounds {}**, {}*** %10, i64 -14, !dbg !5544
  %current_task72 = bitcast {}*** %current_task72203 to {}**, !dbg !5544
  %box73 = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task72, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5206732832 to {}*) to {} addrspace(10)*)) #68, !dbg !5544
  %62 = bitcast {} addrspace(10)* %box73 to double addrspace(10)*, !dbg !5544
  store double 1.000000e+00, double addrspace(10)* %62, align 8, !dbg !5544, !tbaa !113, !alias.scope !117, !noalias !5514
  %box75 = call noalias nonnull dereferenceable(8) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task72, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5206732832 to {}*) to {} addrspace(10)*)) #68, !dbg !5544
  %63 = bitcast {} addrspace(10)* %box75 to double addrspace(10)*, !dbg !5544
  store double 0.000000e+00, double addrspace(10)* %63, align 8, !dbg !5544, !tbaa !113, !alias.scope !117, !noalias !5514
  %64 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* nonnull @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5190854848 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %61, {} addrspace(10)* nonnull %box73, {} addrspace(10)* nonnull %2, {} addrspace(10)* nonnull %3, {} addrspace(10)* nonnull %box75, {} addrspace(10)* nonnull %0) #70, !dbg !5544
  unreachable, !dbg !5544

L228:                                             ; preds = %L112
  call void @ijl_type_error(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_j_str6, i64 0, i64 0), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5206733568 to {}*) to {} addrspace(10)*), {} addrspace(12)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(12)*)) #67, !dbg !5544
  unreachable, !dbg !5544
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_gemv__2035(i32 zeroext "enzyme_inactive" %0, {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %3, {} addrspace(10)* align 16 %"'2", { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg) unnamed_addr #65 !dbg !5589 {
top:
  %"iv4'ac" = alloca i64, align 8
  %"iv6'ac" = alloca i64, align 8
  %"iv'ac" = alloca i64, align 8
  %"iv2'ac" = alloca i64, align 8
  %_cache = alloca i8, align 1
  %"'de" = alloca double, align 8
  %4 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache95 = alloca double*, align 8
  %"'de103" = alloca double, align 8
  %5 = getelementptr double, double* %"'de103", i64 0
  store double 0.000000e+00, double* %5, align 8
  %_cache104 = alloca double*, align 8
  %"'de107" = alloca double, align 8
  %6 = getelementptr double, double* %"'de107", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"'de108" = alloca double, align 8
  %7 = getelementptr double, double* %"'de108", i64 0
  store double 0.000000e+00, double* %7, align 8
  %"'de120" = alloca double, align 8
  %8 = getelementptr double, double* %"'de120", i64 0
  store double 0.000000e+00, double* %8, align 8
  %"'de122" = alloca double, align 8
  %9 = getelementptr double, double* %"'de122", i64 0
  store double 0.000000e+00, double* %9, align 8
  %"'de123" = alloca double, align 8
  %10 = getelementptr double, double* %"'de123", i64 0
  store double 0.000000e+00, double* %10, align 8
  %"'de129" = alloca double, align 8
  %11 = getelementptr double, double* %"'de129", i64 0
  store double 0.000000e+00, double* %11, align 8
  %"'de133" = alloca double, align 8
  %12 = getelementptr double, double* %"'de133", i64 0
  store double 0.000000e+00, double* %12, align 8
  %_cache135 = alloca double*, align 8
  %_cache147 = alloca double*, align 8
  %"'de150" = alloca double, align 8
  %13 = getelementptr double, double* %"'de150", i64 0
  store double 0.000000e+00, double* %13, align 8
  %"'de151" = alloca double, align 8
  %14 = getelementptr double, double* %"'de151", i64 0
  store double 0.000000e+00, double* %14, align 8
  %_cache170 = alloca i8, align 1
  %15 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 6
  %mdyncache_fromtape_cache = alloca double*, align 8
  store double* %15, double** %mdyncache_fromtape_cache, align 8
  %16 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 7
  %mdyncache_fromtape_cache172 = alloca double*, align 8
  store double* %16, double** %mdyncache_fromtape_cache172, align 8
  %17 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 8
  %mdyncache_fromtape_cache174 = alloca double*, align 8
  store double* %17, double** %mdyncache_fromtape_cache174, align 8
  %18 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 9
  %mdyncache_fromtape_cache175 = alloca double*, align 8
  store double* %18, double** %mdyncache_fromtape_cache175, align 8
  %19 = call {}*** @julia.get_pgcstack() #67
  %arraysize = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 3, !dbg !5590
  switch i32 %0, label %L69 [
    i32 1308622848, label %L7
    i32 1124073472, label %top.L31_crit_edge
    i32 1409286144, label %L52
  ], !dbg !5592

top.L31_crit_edge:                                ; preds = %top
  br i1 false, label %L41, label %L69, !dbg !5593

L7:                                               ; preds = %top
  br i1 false, label %L17, label %L69, !dbg !5592

L17:                                              ; preds = %L7
  unreachable

L41:                                              ; preds = %top.L31_crit_edge
  unreachable

L52:                                              ; preds = %top
  br i1 false, label %L62, label %L69, !dbg !5594

L62:                                              ; preds = %L52
  unreachable

L69:                                              ; preds = %L52, %L7, %top.L31_crit_edge, %top
  %"'ipc74" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !5595
  %20 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc74"), !dbg !5595
  %"arrayptr215'il_phi" = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 2, !dbg !5595
  %"'ipc70" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !5599
  %21 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc70"), !dbg !5599
  %"arrayptr50216'il_phi" = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 1, !dbg !5599
  %"arrayptr50216274'ipc" = bitcast double* %"arrayptr50216'il_phi" to i8*, !dbg !5603
  %"'ipc" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !5603
  %22 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !5603
  %"arrayptr52218'il_phi" = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 0, !dbg !5603
  %.not203 = icmp eq i64 %arraysize, 0, !dbg !5606
  %23 = select i1 %.not203, i64 1, i64 %arraysize, !dbg !5610
  %24 = call i64 @llvm.smax.i64(i64 %arraysize, i64 %23) #67, !dbg !5610
  %25 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'", {} addrspace(10)* %2, {} addrspace(10)* %"'1", {} addrspace(10)* %3, {} addrspace(10)* %"'2"), !dbg !5611
  %26 = icmp slt i32 %0, 0, !dbg !5612
  br i1 %26, label %L120, label %L115, !dbg !5615

L115:                                             ; preds = %L69
  br label %L133, !dbg !5615

L120:                                             ; preds = %L69
  br i1 false, label %L126, label %L133, !dbg !5620

L126:                                             ; preds = %L120
  unreachable

L133:                                             ; preds = %L120, %L115
  %value_phi64 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 4, !dbg !5611
  store i8 0, i8* %_cache, align 1, !dbg !5611, !invariant.group !5623
  switch i8 %value_phi64, label %.thread.fold.split [
    i8 78, label %.thread
    i8 110, label %.thread
    i8 84, label %27
    i8 116, label %28
    i8 67, label %select.unfold
    i8 99, label %select.unfold
  ], !dbg !5611

27:                                               ; preds = %L133
  store i8 1, i8* %_cache, align 1, !dbg !5611, !invariant.group !5623
  br label %.thread, !dbg !5611

28:                                               ; preds = %L133
  store i8 2, i8* %_cache, align 1, !dbg !5611, !invariant.group !5623
  br label %.thread, !dbg !5611

select.unfold:                                    ; preds = %L133, %L133
  store i8 3, i8* %_cache, align 1, !dbg !5611, !invariant.group !5623
  br label %.thread, !dbg !5611

.thread.fold.split:                               ; preds = %L133
  store i8 4, i8* %_cache, align 1, !dbg !5611, !invariant.group !5623
  br label %.thread, !dbg !5611

.thread:                                          ; preds = %.thread.fold.split, %select.unfold, %28, %27, %L133, %L133
  %29 = phi i1 [ true, %L133 ], [ true, %L133 ], [ false, %.thread.fold.split ], [ false, %28 ], [ false, %27 ], [ false, %select.unfold ]
  %30 = phi i1 [ false, %L133 ], [ false, %L133 ], [ false, %.thread.fold.split ], [ true, %28 ], [ true, %27 ], [ true, %select.unfold ]
  %31 = trunc i64 %arraysize to i32, !dbg !5611
  %32 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 5, !dbg !5611
  %33 = icmp eq i32 %31, 0, !dbg !5611
  %34 = icmp eq i32 %32, 0, !dbg !5611
  %35 = or i1 %33, %34, !dbg !5611
  store i8 0, i8* %_cache170, align 1, !dbg !5611, !invariant.group !5624
  br i1 %35, label %dgemv_64_.exit, label %36, !dbg !5611

36:                                               ; preds = %.thread
  %37 = select i1 %29, i32 %32, i32 %31, !dbg !5611
  %38 = select i1 %29, i32 %31, i32 %32, !dbg !5611
  %39 = icmp sgt i32 %38, 0, !dbg !5611
  br i1 %39, label %.preheader, label %.loopexit273, !dbg !5611

.preheader:                                       ; preds = %36
  %40 = zext i32 %38 to i64, !dbg !5611
  %41 = shl nuw nsw i64 %40, 3, !dbg !5611
  br label %.loopexit273, !dbg !5611

.loopexit273:                                     ; preds = %.preheader, %36
  br i1 %30, label %42, label %81, !dbg !5611

42:                                               ; preds = %.loopexit273
  %43 = icmp sgt i32 %38, 0, !dbg !5611
  store i8 1, i8* %_cache170, align 1, !dbg !5611, !invariant.group !5624
  br i1 %43, label %44, label %dgemv_64_.exit, !dbg !5611

44:                                               ; preds = %42
  %45 = icmp sgt i32 %37, 0, !dbg !5611
  %sext264 = shl i64 %24, 32, !dbg !5611
  %46 = ashr exact i64 %sext264, 32, !dbg !5611
  %47 = zext i32 %38 to i64, !dbg !5611
  %48 = zext i32 %37 to i64, !dbg !5611
  %49 = add nsw i64 %47, -1, !dbg !5611
  %50 = add nsw i64 %48, -1, !dbg !5611
  %51 = add nuw i64 %49, 1, !dbg !5611
  %52 = add nuw i64 %50, 1, !dbg !5611
  %53 = mul nuw nsw i64 %52, %51, !dbg !5611
  %54 = mul nuw i64 %53, 8, !dbg !5611
  %55 = mul nuw i64 %53, 8, !dbg !5611
  br label %56, !dbg !5611

56:                                               ; preds = %.loopexit, %44
  %iv4 = phi i64 [ %iv.next5, %.loopexit ], [ 0, %44 ], !dbg !5611
  %iv.next5 = add nuw nsw i64 %iv4, 1, !dbg !5611
  br i1 %45, label %57, label %.loopexit, !dbg !5611

57:                                               ; preds = %56
  %58 = mul nsw i64 %iv4, %46, !dbg !5611
  br label %59, !dbg !5611

59:                                               ; preds = %59, %57
  %iv6 = phi i64 [ %iv.next7, %59 ], [ 0, %57 ], !dbg !5611
  %iv.next7 = add nuw nsw i64 %iv6, 1, !dbg !5611
  %"'ipg113" = getelementptr inbounds double, double* %"arrayptr215'il_phi", i64 %iv6, !dbg !5611
  %60 = load double*, double** %mdyncache_fromtape_cache, align 8, !dbg !5611, !dereferenceable !306, !invariant.group !5625
  %61 = mul nuw nsw i64 %52, %51, !dbg !5611
  %62 = mul nuw nsw i64 %iv4, %52, !dbg !5611
  %63 = add nuw nsw i64 %iv6, %62, !dbg !5611
  %64 = getelementptr inbounds double, double* %60, i64 %63, !dbg !5611
  %65 = load double, double* %64, align 8, !dbg !5611, !invariant.group !5626
  %66 = add nsw i64 %iv6, %58, !dbg !5611
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr52218'il_phi", i64 %66, !dbg !5611
  %67 = load double*, double** %mdyncache_fromtape_cache172, align 8, !dbg !5611, !dereferenceable !306, !invariant.group !5627
  %68 = mul nuw nsw i64 %52, %51, !dbg !5611
  %69 = mul nuw nsw i64 %iv4, %52, !dbg !5611
  %70 = add nuw nsw i64 %iv6, %69, !dbg !5611
  %71 = getelementptr inbounds double, double* %67, i64 %70, !dbg !5611
  %72 = load double, double* %71, align 8, !dbg !5611, !invariant.group !5628
  %73 = mul nuw nsw i64 %52, %51, !dbg !5611
  %74 = mul nuw nsw i64 %iv4, %52, !dbg !5611
  %75 = add nuw nsw i64 %iv6, %74, !dbg !5611
  %76 = mul nuw nsw i64 %52, %51, !dbg !5611
  %77 = mul nuw nsw i64 %iv4, %52, !dbg !5611
  %78 = add nuw nsw i64 %iv6, %77, !dbg !5611
  %79 = icmp eq i64 %iv.next7, %48, !dbg !5611
  br i1 %79, label %.loopexit.loopexit, label %59, !dbg !5611, !llvm.loop !5629

.loopexit.loopexit:                               ; preds = %59
  br label %.loopexit, !dbg !5611

.loopexit:                                        ; preds = %.loopexit.loopexit, %56
  %"'ipg119" = getelementptr inbounds double, double* %"arrayptr50216'il_phi", i64 %iv4, !dbg !5611
  %80 = icmp eq i64 %iv.next5, %47, !dbg !5611
  br i1 %80, label %dgemv_64_.exit.loopexit, label %56, !dbg !5611, !llvm.loop !5630

81:                                               ; preds = %.loopexit273
  %82 = icmp sgt i32 %37, 0, !dbg !5611
  store i8 2, i8* %_cache170, align 1, !dbg !5611, !invariant.group !5624
  br i1 %82, label %83, label %dgemv_64_.exit, !dbg !5611

83:                                               ; preds = %81
  %84 = icmp sgt i32 %38, 0, !dbg !5611
  %sext = shl i64 %24, 32, !dbg !5611
  %85 = ashr exact i64 %sext, 32, !dbg !5611
  %86 = zext i32 %37 to i64, !dbg !5611
  %87 = zext i32 %38 to i64, !dbg !5611
  %88 = add nsw i64 %86, -1, !dbg !5611
  %89 = add nsw i64 %87, -1, !dbg !5611
  %90 = add nuw i64 %88, 1, !dbg !5611
  %91 = add nuw i64 %89, 1, !dbg !5611
  %92 = mul nuw nsw i64 %91, %90, !dbg !5611
  %93 = mul nuw i64 %92, 8, !dbg !5611
  %94 = mul nuw i64 %90, 8, !dbg !5611
  br label %95, !dbg !5611

95:                                               ; preds = %.loopexit269, %83
  %iv = phi i64 [ %iv.next, %.loopexit269 ], [ 0, %83 ], !dbg !5611
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5611
  %"'ipg130" = getelementptr inbounds double, double* %"arrayptr215'il_phi", i64 %iv, !dbg !5611
  %96 = load double*, double** %mdyncache_fromtape_cache174, align 8, !dbg !5611, !dereferenceable !306, !invariant.group !5631
  %97 = getelementptr inbounds double, double* %96, i64 %iv, !dbg !5611
  %98 = load double, double* %97, align 8, !dbg !5611, !invariant.group !5632
  br i1 %84, label %99, label %.loopexit269, !dbg !5611

99:                                               ; preds = %95
  %100 = mul nsw i64 %iv, %85, !dbg !5611
  br label %101, !dbg !5611

101:                                              ; preds = %101, %99
  %iv2 = phi i64 [ %iv.next3, %101 ], [ 0, %99 ], !dbg !5611
  %iv.next3 = add nuw nsw i64 %iv2, 1, !dbg !5611
  %102 = add nsw i64 %iv2, %100, !dbg !5611
  %"'ipg154" = getelementptr inbounds double, double* %"arrayptr52218'il_phi", i64 %102, !dbg !5611
  %103 = load double*, double** %mdyncache_fromtape_cache175, align 8, !dbg !5611, !dereferenceable !306, !invariant.group !5633
  %104 = mul nuw nsw i64 %91, %90, !dbg !5611
  %105 = mul nuw nsw i64 %iv, %91, !dbg !5611
  %106 = add nuw nsw i64 %iv2, %105, !dbg !5611
  %107 = getelementptr inbounds double, double* %103, i64 %106, !dbg !5611
  %108 = load double, double* %107, align 8, !dbg !5611, !invariant.group !5634
  %109 = mul nuw nsw i64 %91, %90, !dbg !5611
  %110 = mul nuw nsw i64 %iv, %91, !dbg !5611
  %111 = add nuw nsw i64 %iv2, %110, !dbg !5611
  %"'ipg132" = getelementptr inbounds double, double* %"arrayptr50216'il_phi", i64 %iv2, !dbg !5611
  %112 = icmp eq i64 %iv.next3, %87, !dbg !5611
  br i1 %112, label %.loopexit269.loopexit, label %101, !dbg !5611, !llvm.loop !5635

.loopexit269.loopexit:                            ; preds = %101
  br label %.loopexit269, !dbg !5611

.loopexit269:                                     ; preds = %.loopexit269.loopexit, %95
  %113 = icmp eq i64 %iv.next, %86, !dbg !5611
  br i1 %113, label %dgemv_64_.exit.loopexit1, label %95, !dbg !5611, !llvm.loop !5636

dgemv_64_.exit.loopexit:                          ; preds = %.loopexit
  store i8 3, i8* %_cache170, align 1, !dbg !5611, !invariant.group !5624
  br label %dgemv_64_.exit, !dbg !5611

dgemv_64_.exit.loopexit1:                         ; preds = %.loopexit269
  store i8 4, i8* %_cache170, align 1, !dbg !5611, !invariant.group !5624
  br label %dgemv_64_.exit, !dbg !5611

dgemv_64_.exit:                                   ; preds = %dgemv_64_.exit.loopexit1, %dgemv_64_.exit.loopexit, %81, %42, %.thread
  call void @llvm.julia.gc_preserve_end(token %25) #67, !dbg !5611
  br label %invertdgemv_64_.exit, !dbg !5637

inverttop:                                        ; preds = %invertL69, %invertL52, %invertL7, %inverttop.L31_crit_edge
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

inverttop.L31_crit_edge:                          ; preds = %invertL69
  br label %inverttop

invertL7:                                         ; preds = %invertL69
  br label %inverttop

invertL52:                                        ; preds = %invertL69
  br label %inverttop

invertL69:                                        ; preds = %invertL120, %invertL115
  call void @llvm.julia.gc_preserve_end(token %263), !dbg !5611
  switch i32 %0, label %inverttop [
    i32 1308622848, label %invertL7
    i32 1124073472, label %inverttop.L31_crit_edge
    i32 1409286144, label %invertL52
  ]

invertL115:                                       ; preds = %invertL133
  br label %invertL69

invertL120:                                       ; preds = %invertL133
  br label %invertL69

invertL133:                                       ; preds = %invert.thread, %invert.thread.fold.split, %invertselect.unfold, %invert3, %invert
  br i1 %26, label %invertL120, label %invertL115

invert:                                           ; preds = %invert.thread
  br label %invertL133

invert3:                                          ; preds = %invert.thread
  br label %invertL133

invertselect.unfold:                              ; preds = %invert.thread
  br label %invertL133

invert.thread.fold.split:                         ; preds = %invert.thread
  br label %invertL133

invert.thread:                                    ; preds = %invertdgemv_64_.exit, %invert4
  %114 = load i8, i8* %_cache, align 1, !invariant.group !5623
  switch i8 %114, label %invert.thread.fold.split [
    i8 0, label %invertL133
    i8 1, label %invert
    i8 2, label %invert3
    i8 3, label %invertselect.unfold
  ]

invert4:                                          ; preds = %invert.loopexit273, %invert.preheader
  br label %invert.thread

invert.preheader:                                 ; preds = %invert.loopexit273
  %_unwrap = select i1 %29, i32 %31, i32 %32, !dbg !5611
  %_unwrap90 = zext i32 %_unwrap to i64, !dbg !5611
  %_unwrap91 = shl nuw nsw i64 %_unwrap90, 3, !dbg !5611
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %"arrayptr50216274'ipc", i8 0, i64 %_unwrap91, i1 false) #67, !dbg !5611, !tbaa !1731, !noalias !5173
  br label %invert4

invert.loopexit273:                               ; preds = %invert10, %invert5
  %_unwrap92 = select i1 %29, i32 %31, i32 %32
  %_unwrap93 = icmp sgt i32 %_unwrap92, 0
  br i1 %_unwrap93, label %invert.preheader, label %invert4

invert5:                                          ; preds = %invertdgemv_64_.exit, %invert6
  br label %invert.loopexit273

invert6:                                          ; preds = %invert7
  %115 = load i64, i64* %"iv4'ac", align 8
  %116 = load i64, i64* %"iv6'ac", align 8
  %117 = load i64, i64* %"iv4'ac", align 8
  %118 = load i64, i64* %"iv6'ac", align 8
  %119 = load i64, i64* %"iv4'ac", align 8
  %120 = load i64, i64* %"iv6'ac", align 8
  %forfree171 = load double*, double** %mdyncache_fromtape_cache, align 8, !dereferenceable !306, !invariant.group !5625
  %121 = bitcast double* %forfree171 to i8*
  call void @free(i8* nonnull %121), !dbg !5638
  %122 = load i64, i64* %"iv4'ac", align 8
  %123 = load i64, i64* %"iv6'ac", align 8
  %forfree173 = load double*, double** %mdyncache_fromtape_cache172, align 8, !dereferenceable !306, !invariant.group !5627
  %124 = bitcast double* %forfree173 to i8*
  call void @free(i8* nonnull %124), !dbg !5638
  br label %invert5

invert7:                                          ; preds = %invert.loopexit, %invert8
  %125 = load i64, i64* %"iv4'ac", align 8
  %126 = icmp eq i64 %125, 0
  %127 = xor i1 %126, true
  br i1 %126, label %invert6, label %incinvert7

incinvert7:                                       ; preds = %invert7
  %128 = load i64, i64* %"iv4'ac", align 8
  %129 = add nsw i64 %128, -1
  store i64 %129, i64* %"iv4'ac", align 8
  br label %invert.loopexit

invert8:                                          ; preds = %invert9
  br label %invert7

invert9:                                          ; preds = %mergeinvert9_.loopexit.loopexit, %incinvert9
  %130 = load double, double* %"'de", align 8, !dbg !5611
  store double 0.000000e+00, double* %"'de", align 8, !dbg !5611
  %131 = load i64, i64* %"iv6'ac", align 8, !dbg !5611
  %132 = load i64, i64* %"iv4'ac", align 8, !dbg !5611
  %arraysize_unwrap = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 3, !dbg !5611
  %_unwrap96 = trunc i64 %arraysize_unwrap to i32, !dbg !5611
  %_unwrap177 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 5, !dbg !5611
  %_unwrap97 = select i1 %29, i32 %_unwrap96, i32 %_unwrap177, !dbg !5611
  %_unwrap98 = zext i32 %_unwrap97 to i64, !dbg !5611
  %_unwrap99 = add nsw i64 %_unwrap98, -1, !dbg !5611
  %133 = add nuw i64 %_unwrap99, 1, !dbg !5611
  %_unwrap100 = select i1 %29, i32 %_unwrap177, i32 %_unwrap96, !dbg !5611
  %_unwrap101 = zext i32 %_unwrap100 to i64, !dbg !5611
  %_unwrap102 = add nsw i64 %_unwrap101, -1, !dbg !5611
  %134 = add nuw i64 %_unwrap102, 1, !dbg !5611
  %135 = mul nuw nsw i64 %134, %133, !dbg !5611
  %136 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 7, !dbg !5611
  %137 = mul nuw nsw i64 %134, %133, !dbg !5611
  %138 = mul nuw nsw i64 %132, %134, !dbg !5611
  %139 = add nuw nsw i64 %131, %138, !dbg !5611
  %140 = getelementptr inbounds double, double* %136, i64 %139, !dbg !5611
  %141 = load double, double* %140, align 8, !dbg !5611, !tbaa !1731, !invariant.group !5639
  %142 = fmul fast double %130, %141, !dbg !5611
  %143 = load double, double* %"'de103", align 8, !dbg !5611
  %144 = fadd fast double %143, %142, !dbg !5611
  store double %144, double* %"'de103", align 8, !dbg !5611
  %145 = load i64, i64* %"iv6'ac", align 8, !dbg !5611
  %146 = load i64, i64* %"iv4'ac", align 8, !dbg !5611
  %147 = add nuw i64 %_unwrap99, 1, !dbg !5611
  %148 = add nuw i64 %_unwrap102, 1, !dbg !5611
  %149 = mul nuw nsw i64 %148, %147, !dbg !5611
  %150 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 6, !dbg !5611
  %151 = mul nuw nsw i64 %148, %147, !dbg !5611
  %152 = mul nuw nsw i64 %146, %148, !dbg !5611
  %153 = add nuw nsw i64 %145, %152, !dbg !5611
  %154 = getelementptr inbounds double, double* %150, i64 %153, !dbg !5611
  %155 = load double, double* %154, align 8, !dbg !5611, !tbaa !1731, !invariant.group !5640
  %156 = fmul fast double %130, %155, !dbg !5611
  %157 = load double, double* %"'de107", align 8, !dbg !5611
  %158 = fadd fast double %157, %156, !dbg !5611
  store double %158, double* %"'de107", align 8, !dbg !5611
  %159 = load double, double* %"'de108", align 8, !dbg !5611
  %160 = fadd fast double %159, %130, !dbg !5611
  store double %160, double* %"'de108", align 8, !dbg !5611
  %161 = load double, double* %"'de107", align 8, !dbg !5611
  store double 0.000000e+00, double* %"'de107", align 8, !dbg !5611
  %162 = load i64, i64* %"iv6'ac", align 8, !dbg !5611
  %163 = load i64, i64* %"iv4'ac", align 8, !dbg !5611
  %sext264_unwrap = shl i64 %24, 32, !dbg !5611
  %_unwrap109 = ashr exact i64 %sext264_unwrap, 32, !dbg !5611
  %_unwrap110 = mul nsw i64 %163, %_unwrap109, !dbg !5611
  %_unwrap111 = add nsw i64 %162, %_unwrap110, !dbg !5611
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr52218'il_phi", i64 %_unwrap111, !dbg !5611
  %164 = load double, double* %"'ipg_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5641, !noalias !5644
  %165 = fadd fast double %164, %161, !dbg !5611
  store double %165, double* %"'ipg_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5641, !noalias !5644
  %166 = load double, double* %"'de103", align 8, !dbg !5611
  store double 0.000000e+00, double* %"'de103", align 8, !dbg !5611
  %167 = load i64, i64* %"iv6'ac", align 8, !dbg !5611
  %168 = load i64, i64* %"iv4'ac", align 8, !dbg !5611
  %"'ipg113_unwrap" = getelementptr inbounds double, double* %"arrayptr215'il_phi", i64 %167, !dbg !5611
  %169 = load double, double* %"'ipg113_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5646, !noalias !5649
  %170 = fadd fast double %169, %166, !dbg !5611
  store double %170, double* %"'ipg113_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5646, !noalias !5649
  %171 = load double, double* %"'de108", align 8
  store double 0.000000e+00, double* %"'de108", align 8
  %172 = load i64, i64* %"iv6'ac", align 8
  %173 = icmp eq i64 %172, 0
  %174 = xor i1 %173, true
  %175 = select fast i1 %174, double %171, double 0.000000e+00
  %176 = load double, double* %"'de", align 8
  %177 = fadd fast double %176, %171
  %178 = select fast i1 %173, double %176, double %177
  store double %178, double* %"'de", align 8
  br i1 %173, label %invert8, label %incinvert9

incinvert9:                                       ; preds = %invert9
  %179 = load i64, i64* %"iv6'ac", align 8
  %180 = add nsw i64 %179, -1
  store i64 %180, i64* %"iv6'ac", align 8
  br label %invert9

invert.loopexit.loopexit:                         ; preds = %invert.loopexit
  %181 = load i64, i64* %"iv4'ac", align 8
  %_unwrap116 = select i1 %29, i32 %32, i32 %31
  %_unwrap117 = zext i32 %_unwrap116 to i64
  %_unwrap118 = add nsw i64 %_unwrap117, -1
  br label %mergeinvert9_.loopexit.loopexit

mergeinvert9_.loopexit.loopexit:                  ; preds = %invert.loopexit.loopexit
  store i64 %_unwrap118, i64* %"iv6'ac", align 8
  br label %invert9

invert.loopexit:                                  ; preds = %mergeinvert7_dgemv_64_.exit.loopexit, %incinvert7
  %182 = load i64, i64* %"iv4'ac", align 8, !dbg !5611
  %"'ipg119_unwrap" = getelementptr inbounds double, double* %"arrayptr50216'il_phi", i64 %182, !dbg !5611
  %183 = load double, double* %"'ipg119_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5651, !noalias !5654
  store double 0.000000e+00, double* %"'ipg119_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5651, !noalias !5654
  %184 = load double, double* %"'de120", align 8, !dbg !5611
  %185 = fadd fast double %184, %183, !dbg !5611
  store double %185, double* %"'de120", align 8, !dbg !5611
  %186 = load double, double* %"'de120", align 8, !dbg !5611
  store double 0.000000e+00, double* %"'de120", align 8, !dbg !5611
  %187 = load double, double* %"'de122", align 8, !dbg !5611
  %188 = fadd fast double %187, %186, !dbg !5611
  store double %188, double* %"'de122", align 8, !dbg !5611
  %189 = load double, double* %"'de123", align 8, !dbg !5611
  %190 = fadd fast double %189, %186, !dbg !5611
  store double %190, double* %"'de123", align 8, !dbg !5611
  %191 = load double, double* %"'de123", align 8, !dbg !5611
  store double 0.000000e+00, double* %"'de123", align 8, !dbg !5611
  %192 = load double, double* %"'ipg119_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5651, !noalias !5656
  %193 = fadd fast double %192, %191, !dbg !5611
  store double %193, double* %"'ipg119_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5651, !noalias !5656
  %194 = load double, double* %"'de122", align 8
  store double 0.000000e+00, double* %"'de122", align 8
  %195 = load i64, i64* %"iv4'ac", align 8
  %_unwrap127 = select i1 %29, i32 %32, i32 %31
  %_unwrap128 = icmp sgt i32 %_unwrap127, 0
  %196 = select fast i1 %_unwrap128, double %194, double 0.000000e+00
  %197 = load double, double* %"'de", align 8
  %198 = fadd fast double %197, %194
  %199 = select fast i1 %_unwrap128, double %198, double %197
  store double %199, double* %"'de", align 8
  br i1 %_unwrap128, label %invert.loopexit.loopexit, label %invert7

invert10:                                         ; preds = %invertdgemv_64_.exit, %invert11
  br label %invert.loopexit273

invert11:                                         ; preds = %invert12
  %200 = load i64, i64* %"iv'ac", align 8
  %201 = load i64, i64* %"iv2'ac", align 8
  %202 = load i64, i64* %"iv'ac", align 8
  %203 = load i64, i64* %"iv'ac", align 8
  %forfree = load double*, double** %mdyncache_fromtape_cache174, align 8, !dereferenceable !306, !invariant.group !5631
  %204 = bitcast double* %forfree to i8*
  call void @free(i8* nonnull %204), !dbg !5638
  %205 = load i64, i64* %"iv'ac", align 8
  %206 = load i64, i64* %"iv2'ac", align 8
  %forfree176 = load double*, double** %mdyncache_fromtape_cache175, align 8, !dereferenceable !306, !invariant.group !5633
  %207 = bitcast double* %forfree176 to i8*
  call void @free(i8* nonnull %207), !dbg !5638
  br label %invert10

invert12:                                         ; preds = %invert.loopexit269, %invert13
  %208 = load double, double* %"'de129", align 8, !dbg !5611
  store double 0.000000e+00, double* %"'de129", align 8, !dbg !5611
  %209 = load i64, i64* %"iv'ac", align 8, !dbg !5611
  %"'ipg130_unwrap" = getelementptr inbounds double, double* %"arrayptr215'il_phi", i64 %209, !dbg !5611
  %210 = load double, double* %"'ipg130_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5646, !noalias !5649
  %211 = fadd fast double %210, %208, !dbg !5611
  store double %211, double* %"'ipg130_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5646, !noalias !5649
  %212 = load i64, i64* %"iv'ac", align 8
  %213 = icmp eq i64 %212, 0
  %214 = xor i1 %213, true
  br i1 %213, label %invert11, label %incinvert12

incinvert12:                                      ; preds = %invert12
  %215 = load i64, i64* %"iv'ac", align 8
  %216 = add nsw i64 %215, -1
  store i64 %216, i64* %"iv'ac", align 8
  br label %invert.loopexit269

invert13:                                         ; preds = %invert14
  br label %invert12

invert14:                                         ; preds = %mergeinvert14_.loopexit269.loopexit, %incinvert14
  %217 = load i64, i64* %"iv2'ac", align 8, !dbg !5611
  %218 = load i64, i64* %"iv'ac", align 8, !dbg !5611
  %"'ipg132_unwrap" = getelementptr inbounds double, double* %"arrayptr50216'il_phi", i64 %217, !dbg !5611
  %219 = load double, double* %"'ipg132_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5651, !noalias !5654
  store double 0.000000e+00, double* %"'ipg132_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5651, !noalias !5654
  %220 = load double, double* %"'de133", align 8, !dbg !5611
  %221 = fadd fast double %220, %219, !dbg !5611
  store double %221, double* %"'de133", align 8, !dbg !5611
  %222 = load double, double* %"'de133", align 8, !dbg !5611
  store double 0.000000e+00, double* %"'de133", align 8, !dbg !5611
  %223 = load i64, i64* %"iv2'ac", align 8, !dbg !5611
  %224 = load i64, i64* %"iv'ac", align 8, !dbg !5611
  %_unwrap178 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 5, !dbg !5611
  %arraysize_unwrap179 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 3, !dbg !5611
  %_unwrap140 = trunc i64 %arraysize_unwrap179 to i32, !dbg !5611
  %_unwrap141 = select i1 %29, i32 %_unwrap178, i32 %_unwrap140, !dbg !5611
  %_unwrap142 = zext i32 %_unwrap141 to i64, !dbg !5611
  %_unwrap143 = add nsw i64 %_unwrap142, -1, !dbg !5611
  %225 = add nuw i64 %_unwrap143, 1, !dbg !5611
  %_unwrap144 = select i1 %29, i32 %_unwrap140, i32 %_unwrap178, !dbg !5611
  %_unwrap145 = zext i32 %_unwrap144 to i64, !dbg !5611
  %_unwrap146 = add nsw i64 %_unwrap145, -1, !dbg !5611
  %226 = add nuw i64 %_unwrap146, 1, !dbg !5611
  %227 = mul nuw nsw i64 %226, %225, !dbg !5611
  %228 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 9, !dbg !5611
  %229 = mul nuw nsw i64 %226, %225, !dbg !5611
  %230 = mul nuw nsw i64 %224, %226, !dbg !5611
  %231 = add nuw nsw i64 %223, %230, !dbg !5611
  %232 = getelementptr inbounds double, double* %228, i64 %231, !dbg !5611
  %233 = load double, double* %232, align 8, !dbg !5611, !tbaa !1731, !invariant.group !5657
  %234 = fmul fast double %222, %233, !dbg !5611
  %235 = load double, double* %"'de129", align 8, !dbg !5611
  %236 = fadd fast double %235, %234, !dbg !5611
  store double %236, double* %"'de129", align 8, !dbg !5611
  %237 = load i64, i64* %"iv2'ac", align 8, !dbg !5611
  %238 = load i64, i64* %"iv'ac", align 8, !dbg !5611
  %239 = add nuw i64 %_unwrap143, 1, !dbg !5611
  %240 = extractvalue { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg, 8, !dbg !5611
  %241 = getelementptr inbounds double, double* %240, i64 %238, !dbg !5611
  %242 = load double, double* %241, align 8, !dbg !5611, !tbaa !1731, !alias.scope !5649, !noalias !5646, !invariant.group !5658
  %243 = fmul fast double %222, %242, !dbg !5611
  %244 = load double, double* %"'de150", align 8, !dbg !5611
  %245 = fadd fast double %244, %243, !dbg !5611
  store double %245, double* %"'de150", align 8, !dbg !5611
  %246 = load double, double* %"'de151", align 8, !dbg !5611
  %247 = fadd fast double %246, %222, !dbg !5611
  store double %247, double* %"'de151", align 8, !dbg !5611
  %248 = load double, double* %"'de151", align 8, !dbg !5611
  store double 0.000000e+00, double* %"'de151", align 8, !dbg !5611
  %249 = load double, double* %"'ipg132_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5651, !noalias !5656
  %250 = fadd fast double %249, %248, !dbg !5611
  store double %250, double* %"'ipg132_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5651, !noalias !5656
  %251 = load double, double* %"'de150", align 8, !dbg !5611
  store double 0.000000e+00, double* %"'de150", align 8, !dbg !5611
  %252 = load i64, i64* %"iv2'ac", align 8, !dbg !5611
  %253 = load i64, i64* %"iv'ac", align 8, !dbg !5611
  %sext_unwrap = shl i64 %24, 32, !dbg !5611
  %_unwrap155 = ashr exact i64 %sext_unwrap, 32, !dbg !5611
  %_unwrap156 = mul nsw i64 %253, %_unwrap155, !dbg !5611
  %_unwrap157 = add nsw i64 %252, %_unwrap156, !dbg !5611
  %"'ipg154_unwrap" = getelementptr inbounds double, double* %"arrayptr52218'il_phi", i64 %_unwrap157, !dbg !5611
  %254 = load double, double* %"'ipg154_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5641, !noalias !5644
  %255 = fadd fast double %254, %251, !dbg !5611
  store double %255, double* %"'ipg154_unwrap", align 8, !dbg !5611, !tbaa !1731, !alias.scope !5641, !noalias !5644
  %256 = load i64, i64* %"iv2'ac", align 8
  %257 = icmp eq i64 %256, 0
  %258 = xor i1 %257, true
  br i1 %257, label %invert13, label %incinvert14

incinvert14:                                      ; preds = %invert14
  %259 = load i64, i64* %"iv2'ac", align 8
  %260 = add nsw i64 %259, -1
  store i64 %260, i64* %"iv2'ac", align 8
  br label %invert14

invert.loopexit269.loopexit:                      ; preds = %invert.loopexit269
  %261 = load i64, i64* %"iv'ac", align 8
  %_unwrap159 = select i1 %29, i32 %31, i32 %32
  %_unwrap160 = zext i32 %_unwrap159 to i64
  %_unwrap161 = add nsw i64 %_unwrap160, -1
  br label %mergeinvert14_.loopexit269.loopexit

mergeinvert14_.loopexit269.loopexit:              ; preds = %invert.loopexit269.loopexit
  store i64 %_unwrap161, i64* %"iv2'ac", align 8
  br label %invert14

invert.loopexit269:                               ; preds = %mergeinvert12_dgemv_64_.exit.loopexit1, %incinvert12
  %262 = load i64, i64* %"iv'ac", align 8
  %_unwrap162 = select i1 %29, i32 %31, i32 %32
  %_unwrap163 = icmp sgt i32 %_unwrap162, 0
  br i1 %_unwrap163, label %invert.loopexit269.loopexit, label %invert12

invertdgemv_64_.exit.loopexit:                    ; preds = %invertdgemv_64_.exit
  %_unwrap164 = select i1 %29, i32 %31, i32 %32
  %_unwrap165 = zext i32 %_unwrap164 to i64
  %_unwrap166 = add nsw i64 %_unwrap165, -1
  br label %mergeinvert7_dgemv_64_.exit.loopexit

mergeinvert7_dgemv_64_.exit.loopexit:             ; preds = %invertdgemv_64_.exit.loopexit
  store i64 %_unwrap166, i64* %"iv4'ac", align 8
  br label %invert.loopexit

invertdgemv_64_.exit.loopexit1:                   ; preds = %invertdgemv_64_.exit
  %_unwrap167 = select i1 %29, i32 %32, i32 %31
  %_unwrap168 = zext i32 %_unwrap167 to i64
  %_unwrap169 = add nsw i64 %_unwrap168, -1
  br label %mergeinvert12_dgemv_64_.exit.loopexit1

mergeinvert12_dgemv_64_.exit.loopexit1:           ; preds = %invertdgemv_64_.exit.loopexit1
  store i64 %_unwrap169, i64* %"iv'ac", align 8
  br label %invert.loopexit269

invertdgemv_64_.exit:                             ; preds = %dgemv_64_.exit
  %263 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'", {} addrspace(10)* %2, {} addrspace(10)* %"'1", {} addrspace(10)* %3, {} addrspace(10)* %"'2"), !dbg !5611
  %264 = load i8, i8* %_cache170, align 1, !invariant.group !5624
  switch i8 %264, label %invertdgemv_64_.exit.loopexit1 [
    i8 0, label %invert.thread
    i8 1, label %invert5
    i8 2, label %invert10
    i8 3, label %invertdgemv_64_.exit.loopexit
  ]
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_symv__2024(i32 zeroext "enzyme_inactive" %0, {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %3, {} addrspace(10)* align 16 %"'2", { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg) unnamed_addr #66 !dbg !5660 {
top:
  %"iv3'ac" = alloca i64, align 8
  %"iv5'ac" = alloca i64, align 8
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %_cache = alloca i1, align 1
  %_cache92 = alloca i1, align 1
  %"'de" = alloca double, align 8
  %4 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache95 = alloca double*, align 8
  %"'de98" = alloca double, align 8
  %5 = getelementptr double, double* %"'de98", i64 0
  store double 0.000000e+00, double* %5, align 8
  %_cache99 = alloca double*, align 8
  %"'de102" = alloca double, align 8
  %6 = getelementptr double, double* %"'de102", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"'de103" = alloca double, align 8
  %7 = getelementptr double, double* %"'de103", i64 0
  store double 0.000000e+00, double* %7, align 8
  %"'de116" = alloca double, align 8
  %8 = getelementptr double, double* %"'de116", i64 0
  store double 0.000000e+00, double* %8, align 8
  %_cache117 = alloca double**, align 8
  %"'de132" = alloca double, align 8
  %9 = getelementptr double, double* %"'de132", i64 0
  store double 0.000000e+00, double* %9, align 8
  %_cache133 = alloca double**, align 8
  %"'de140" = alloca double, align 8
  %10 = getelementptr double, double* %"'de140", i64 0
  store double 0.000000e+00, double* %10, align 8
  %"'de141" = alloca double, align 8
  %11 = getelementptr double, double* %"'de141", i64 0
  store double 0.000000e+00, double* %11, align 8
  %"'de155" = alloca double, align 8
  %12 = getelementptr double, double* %"'de155", i64 0
  store double 0.000000e+00, double* %12, align 8
  %_cache157 = alloca double**, align 8
  %"'de164" = alloca double, align 8
  %13 = getelementptr double, double* %"'de164", i64 0
  store double 0.000000e+00, double* %13, align 8
  %"'de165" = alloca double, align 8
  %14 = getelementptr double, double* %"'de165", i64 0
  store double 0.000000e+00, double* %14, align 8
  %".pre184'de" = alloca double, align 8
  %15 = getelementptr double, double* %".pre184'de", i64 0
  store double 0.000000e+00, double* %15, align 8
  %"'de177" = alloca double, align 8
  %16 = getelementptr double, double* %"'de177", i64 0
  store double 0.000000e+00, double* %16, align 8
  %"'de179" = alloca double, align 8
  %17 = getelementptr double, double* %"'de179", i64 0
  store double 0.000000e+00, double* %17, align 8
  %"'de180" = alloca double, align 8
  %18 = getelementptr double, double* %"'de180", i64 0
  store double 0.000000e+00, double* %18, align 8
  %"'de188" = alloca double, align 8
  %19 = getelementptr double, double* %"'de188", i64 0
  store double 0.000000e+00, double* %19, align 8
  %"'de191" = alloca double, align 8
  %20 = getelementptr double, double* %"'de191", i64 0
  store double 0.000000e+00, double* %20, align 8
  %"'de193" = alloca double, align 8
  %21 = getelementptr double, double* %"'de193", i64 0
  store double 0.000000e+00, double* %21, align 8
  %"'de194" = alloca double, align 8
  %22 = getelementptr double, double* %"'de194", i64 0
  store double 0.000000e+00, double* %22, align 8
  %"'de204" = alloca double, align 8
  %23 = getelementptr double, double* %"'de204", i64 0
  store double 0.000000e+00, double* %23, align 8
  %"'de205" = alloca double, align 8
  %24 = getelementptr double, double* %"'de205", i64 0
  store double 0.000000e+00, double* %24, align 8
  %"'de212" = alloca double, align 8
  %25 = getelementptr double, double* %"'de212", i64 0
  store double 0.000000e+00, double* %25, align 8
  %".lcssa216'de" = alloca double, align 8
  %26 = getelementptr double, double* %".lcssa216'de", i64 0
  store double 0.000000e+00, double* %26, align 8
  %"'de214" = alloca double, align 8
  %27 = getelementptr double, double* %"'de214", i64 0
  store double 0.000000e+00, double* %27, align 8
  %"'de219" = alloca double, align 8
  %28 = getelementptr double, double* %"'de219", i64 0
  store double 0.000000e+00, double* %28, align 8
  %_cache220 = alloca double**, align 8
  %"'de239" = alloca double, align 8
  %29 = getelementptr double, double* %"'de239", i64 0
  store double 0.000000e+00, double* %29, align 8
  %_cache240 = alloca double**, align 8
  %"'de247" = alloca double, align 8
  %30 = getelementptr double, double* %"'de247", i64 0
  store double 0.000000e+00, double* %30, align 8
  %"'de248" = alloca double, align 8
  %31 = getelementptr double, double* %"'de248", i64 0
  store double 0.000000e+00, double* %31, align 8
  %"'de262" = alloca double, align 8
  %32 = getelementptr double, double* %"'de262", i64 0
  store double 0.000000e+00, double* %32, align 8
  %_cache264 = alloca double**, align 8
  %_cache271 = alloca double*, align 8
  %"'de281" = alloca double, align 8
  %33 = getelementptr double, double* %"'de281", i64 0
  store double 0.000000e+00, double* %33, align 8
  %"'de282" = alloca double, align 8
  %34 = getelementptr double, double* %"'de282", i64 0
  store double 0.000000e+00, double* %34, align 8
  %_cache295 = alloca double*, align 8
  %"'de304" = alloca double, align 8
  %35 = getelementptr double, double* %"'de304", i64 0
  store double 0.000000e+00, double* %35, align 8
  %"'de305" = alloca double, align 8
  %36 = getelementptr double, double* %"'de305", i64 0
  store double 0.000000e+00, double* %36, align 8
  %"'de318" = alloca double, align 8
  %37 = getelementptr double, double* %"'de318", i64 0
  store double 0.000000e+00, double* %37, align 8
  %".pre'de" = alloca double, align 8
  %38 = getelementptr double, double* %".pre'de", i64 0
  store double 0.000000e+00, double* %38, align 8
  %_cache327 = alloca i8, align 1
  %39 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 14
  %mdyncache_fromtape_cache = alloca double*, align 8
  store double* %39, double** %mdyncache_fromtape_cache, align 8
  %40 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 15
  %mdyncache_fromtape_cache329 = alloca double*, align 8
  store double* %40, double** %mdyncache_fromtape_cache329, align 8
  %41 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 11
  %mdyncache_fromtape_cache331 = alloca double**, align 8
  store double** %41, double*** %mdyncache_fromtape_cache331, align 8
  %42 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 12
  %mdyncache_fromtape_cache336 = alloca double**, align 8
  store double** %42, double*** %mdyncache_fromtape_cache336, align 8
  %43 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 13
  %mdyncache_fromtape_cache341 = alloca double**, align 8
  store double** %43, double*** %mdyncache_fromtape_cache341, align 8
  %44 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 5
  %mdyncache_fromtape_cache346 = alloca double*, align 8
  store double* %44, double** %mdyncache_fromtape_cache346, align 8
  %45 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 6
  %mdyncache_fromtape_cache348 = alloca double**, align 8
  store double** %45, double*** %mdyncache_fromtape_cache348, align 8
  %46 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 7
  %mdyncache_fromtape_cache352 = alloca double**, align 8
  store double** %46, double*** %mdyncache_fromtape_cache352, align 8
  %47 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 8
  %mdyncache_fromtape_cache357 = alloca double**, align 8
  store double** %47, double*** %mdyncache_fromtape_cache357, align 8
  %48 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 4
  %mdyncache_fromtape_cache362 = alloca double*, align 8
  store double* %48, double** %mdyncache_fromtape_cache362, align 8
  %49 = call {}*** @julia.get_pgcstack() #67
  switch i32 %0, label %L12 [
    i32 1426063360, label %L18
    i32 1275068416, label %L18
  ], !dbg !5661

L12:                                              ; preds = %top
  unreachable

L18:                                              ; preds = %top, %top
  %arraysize = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5663
  br i1 true, label %L28, label %L23, !dbg !5665

L23:                                              ; preds = %L18
  unreachable

L28:                                              ; preds = %L18
  br i1 true, label %L41, label %L32, !dbg !5666

L32:                                              ; preds = %L28
  unreachable

L41:                                              ; preds = %L28
  br i1 true, label %L79, label %L45, !dbg !5667

L45:                                              ; preds = %L41
  unreachable

L79:                                              ; preds = %L41
  %"'ipc80" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !5668
  %50 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc80"), !dbg !5668
  %"arrayptr171'il_phi" = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 2, !dbg !5668
  %"'ipc76" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !5672
  %51 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc76"), !dbg !5672
  %"arrayptr50172'il_phi" = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 1, !dbg !5672
  %"arrayptr50172195'ipc" = bitcast double* %"arrayptr50172'il_phi" to i8*, !dbg !5676
  %52 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %2, {} addrspace(10)* %"'1", {} addrspace(10)* %3, {} addrspace(10)* %"'2"), !dbg !5676
  %53 = lshr i32 %0, 24, !dbg !5677
  %value_phi51 = trunc i32 %53 to i8, !dbg !5684
  %.not165 = icmp eq i64 %arraysize, 0, !dbg !5685
  %"'ipc" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !5687
  %54 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !5687
  %"arrayptr81170'il_phi" = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 0, !dbg !5687
  store i1 false, i1* %_cache, align 1, !dbg !5676, !invariant.group !5688
  store i1 false, i1* %_cache92, align 1, !dbg !5676, !invariant.group !5689
  switch i8 %value_phi51, label %55 [
    i8 85, label %58
    i8 76, label %56
  ], !dbg !5676

55:                                               ; preds = %L79
  store i1 true, i1* %_cache, align 1, !dbg !5676, !invariant.group !5688
  br label %56, !dbg !5676

56:                                               ; preds = %55, %L79
  %57 = phi i32 [ -1, %55 ], [ 122, %L79 ], !dbg !5676
  store i1 true, i1* %_cache92, align 1, !dbg !5676, !invariant.group !5689
  br label %58, !dbg !5676

58:                                               ; preds = %56, %L79
  %59 = phi i32 [ %57, %56 ], [ 121, %L79 ], !dbg !5676
  %60 = trunc i64 %arraysize to i32, !dbg !5676
  %61 = select i1 %.not165, i32 1, i32 %60, !dbg !5676
  %62 = icmp sgt i32 %60, 0, !dbg !5676
  br i1 %62, label %.preheader187, label %.loopexit189, !dbg !5676

.preheader187:                                    ; preds = %58
  %63 = shl i64 %arraysize, 3, !dbg !5676
  %64 = and i64 %63, 34359738360, !dbg !5676
  br label %.loopexit189, !dbg !5676

.loopexit189:                                     ; preds = %.preheader187, %58
  switch i32 %59, label %213 [
    i32 122, label %65
    i32 121, label %135
  ], !dbg !5676

65:                                               ; preds = %.loopexit189
  %66 = icmp sgt i32 %60, 0, !dbg !5676
  store i8 0, i8* %_cache327, align 1, !dbg !5676, !invariant.group !5690
  br i1 %66, label %67, label %dsymv_64_.exit, !dbg !5676

67:                                               ; preds = %65
  %sext185 = shl i64 %arraysize, 32, !dbg !5676
  %68 = ashr exact i64 %sext185, 32, !dbg !5676
  %69 = sext i32 %61 to i64, !dbg !5676
  %70 = and i64 %arraysize, 4294967295, !dbg !5676
  %71 = add nsw i64 %70, -1, !dbg !5676
  %72 = add nsw i64 %70, -2, !dbg !5676
  %73 = add nuw i64 %71, 1, !dbg !5676
  %74 = mul nuw i64 %73, 8, !dbg !5676
  %75 = mul nuw i64 %73, 8, !dbg !5676
  %76 = mul nuw i64 %73, 8, !dbg !5676
  %77 = mul nuw i64 %73, 8, !dbg !5676
  %78 = mul nuw i64 %73, 8, !dbg !5676
  br label %79, !dbg !5676

79:                                               ; preds = %133, %67
  %iv3 = phi i64 [ %iv.next4, %133 ], [ 0, %67 ], !dbg !5676
  %80 = mul nsw i64 %iv3, -1, !dbg !5676
  %81 = add i64 %72, %80, !dbg !5676
  %iv.next4 = add nuw nsw i64 %iv3, 1, !dbg !5676
  %82 = add i64 %iv3, 1, !dbg !5676
  %83 = add i64 %iv3, 1, !dbg !5676
  %84 = trunc i64 %83 to i32, !dbg !5676
  %85 = sext i32 %84 to i64, !dbg !5676
  %"'ipg111" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %iv3, !dbg !5676
  %86 = load double*, double** %mdyncache_fromtape_cache362, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5691
  %87 = getelementptr inbounds double, double* %86, i64 %iv3, !dbg !5676
  %88 = load double, double* %87, align 8, !dbg !5676, !invariant.group !5692
  %89 = mul nsw i64 %iv3, %69, !dbg !5676
  %90 = add nsw i64 %89, %iv3, !dbg !5676
  %"'ipg106" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %90, !dbg !5676
  %91 = load double*, double** %mdyncache_fromtape_cache346, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5693
  %92 = getelementptr inbounds double, double* %91, i64 %iv3, !dbg !5676
  %93 = load double, double* %92, align 8, !dbg !5676, !invariant.group !5694
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %iv3, !dbg !5676
  %94 = icmp slt i64 %iv.next4, %68, !dbg !5676
  br i1 %94, label %95, label %133, !dbg !5676

95:                                               ; preds = %79
  %96 = add nuw i64 %81, 1, !dbg !5676
  %97 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 8, !dbg !5676
  %98 = getelementptr inbounds double*, double** %97, i64 %iv3, !dbg !5676
  %99 = mul nuw i64 %96, 8, !dbg !5676
  %100 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 7, !dbg !5676
  %101 = getelementptr inbounds double*, double** %100, i64 %iv3, !dbg !5676
  %102 = mul nuw i64 %96, 8, !dbg !5676
  %103 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 6, !dbg !5676
  %104 = getelementptr inbounds double*, double** %103, i64 %iv3, !dbg !5676
  %105 = mul nuw i64 %96, 8, !dbg !5676
  %106 = load double**, double*** %mdyncache_fromtape_cache348, align 8, !dbg !5676, !invariant.group !5695
  %107 = getelementptr inbounds double*, double** %106, i64 %iv3, !dbg !5676
  %108 = load double**, double*** %mdyncache_fromtape_cache352, align 8, !dbg !5676, !invariant.group !5696
  %109 = getelementptr inbounds double*, double** %108, i64 %iv3, !dbg !5676
  %110 = load double**, double*** %mdyncache_fromtape_cache357, align 8, !dbg !5676, !invariant.group !5697
  %111 = getelementptr inbounds double*, double** %110, i64 %iv3, !dbg !5676
  br label %112, !dbg !5676

112:                                              ; preds = %112, %95
  %iv5 = phi i64 [ %iv.next6, %112 ], [ 0, %95 ], !dbg !5676
  %iv.next6 = add nuw nsw i64 %iv5, 1, !dbg !5676
  %113 = add i64 %82, %iv5, !dbg !5676
  %114 = add i64 %85, %iv5, !dbg !5676
  %115 = add nsw i64 %113, %89, !dbg !5676
  %"'ipg142" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %115, !dbg !5676
  %116 = load double**, double*** %mdyncache_fromtape_cache348, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5698
  %117 = getelementptr inbounds double*, double** %116, i64 %iv3, !dbg !5676
  %118 = load double*, double** %117, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5699
  %119 = getelementptr inbounds double, double* %118, i64 %iv5, !dbg !5676
  %120 = load double, double* %119, align 8, !dbg !5676, !invariant.group !5700
  %"'ipg154" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %114, !dbg !5676
  %"'ipg148" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %114, !dbg !5676
  %121 = load double**, double*** %mdyncache_fromtape_cache352, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5701
  %122 = getelementptr inbounds double*, double** %121, i64 %iv3, !dbg !5676
  %123 = load double*, double** %122, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5702
  %124 = getelementptr inbounds double, double* %123, i64 %iv5, !dbg !5676
  %125 = load double, double* %124, align 8, !dbg !5676, !invariant.group !5703
  %126 = load double**, double*** %mdyncache_fromtape_cache357, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5704
  %127 = getelementptr inbounds double*, double** %126, i64 %iv3, !dbg !5676
  %128 = load double*, double** %127, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5705
  %129 = getelementptr inbounds double, double* %128, i64 %iv5, !dbg !5676
  %130 = load double, double* %129, align 8, !dbg !5676, !invariant.group !5706
  %131 = add nuw nsw i64 %113, 1, !dbg !5676
  %132 = icmp eq i64 %131, %70, !dbg !5676
  br i1 %132, label %._crit_edge183, label %112, !dbg !5676, !llvm.loop !5707

._crit_edge183:                                   ; preds = %112
  br label %133, !dbg !5676

133:                                              ; preds = %._crit_edge183, %79
  %134 = icmp eq i64 %iv.next4, %70, !dbg !5676
  br i1 %134, label %dsymv_64_.exit.loopexit, label %79, !dbg !5676, !llvm.loop !5708

135:                                              ; preds = %.loopexit189
  %136 = icmp sgt i32 %60, 0, !dbg !5676
  store i8 1, i8* %_cache327, align 1, !dbg !5676, !invariant.group !5690
  br i1 %136, label %137, label %dsymv_64_.exit, !dbg !5676

137:                                              ; preds = %135
  %sext = shl i64 %arraysize, 32, !dbg !5676
  %138 = ashr exact i64 %sext, 32, !dbg !5676
  %139 = sext i32 %61 to i64, !dbg !5676
  %indvars.iv217 = add nsw i64 %138, -1, !dbg !5676
  %"'ipg202" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %indvars.iv217, !dbg !5676
  %140 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 9, !dbg !5676
  %141 = mul nsw i64 %indvars.iv217, %139, !dbg !5676
  %142 = add nsw i64 %141, %indvars.iv217, !dbg !5676
  %"'ipg197" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %142, !dbg !5676
  %143 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 10, !dbg !5676
  %"'ipg186" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %indvars.iv217, !dbg !5676
  %144 = icmp sgt i64 %sext, 4294967296, !dbg !5676
  br i1 %144, label %.preheader.preheader.lr.ph, label %.thread, !dbg !5676

.preheader.preheader.lr.ph:                       ; preds = %137
  %145 = add nuw i64 %arraysize, 4294967295, !dbg !5676
  %146 = and i64 %145, 4294967295, !dbg !5676
  %147 = sub i64 0, %139, !dbg !5676
  %148 = add i64 %138, -1, !dbg !5676
  %149 = add nsw i64 %138, -1, !dbg !5676
  %smin = call i64 @llvm.smin.i64(i64 %149, i64 1), !dbg !5676
  %150 = sub i64 %148, %smin, !dbg !5676
  %151 = add nsw i64 %146, -1, !dbg !5676
  %152 = add nuw i64 %150, 1, !dbg !5676
  %153 = mul nuw i64 %152, 8, !dbg !5676
  %154 = mul nuw i64 %152, 8, !dbg !5676
  %155 = mul nuw i64 %152, 8, !dbg !5676
  %156 = mul nuw i64 %152, 8, !dbg !5676
  %157 = mul nuw i64 %152, 8, !dbg !5676
  br label %.preheader.preheader, !dbg !5676

.preheader.preheader:                             ; preds = %202, %.preheader.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %202 ], [ 0, %.preheader.preheader.lr.ph ]
  %158 = phi double [ %140, %.preheader.preheader.lr.ph ], [ %206, %202 ]
  %159 = mul nsw i64 %iv, -1, !dbg !5676
  %160 = add i64 %151, %159, !dbg !5676
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5676
  %161 = mul nsw i64 %iv, -1, !dbg !5676
  %162 = add i64 %146, %161, !dbg !5676
  %163 = mul nsw i64 %iv, -1, !dbg !5676
  %164 = add i64 %indvars.iv217, %163, !dbg !5676
  %165 = mul i64 %147, %iv, !dbg !5676
  %166 = add i64 %141, %165, !dbg !5676
  %167 = mul nsw i64 %iv, -1, !dbg !5676
  %168 = add i64 %indvars.iv217, %167, !dbg !5676
  %"scevgep'ipg" = getelementptr double, double* %"arrayptr50172'il_phi", i64 %168, !dbg !5676
  %169 = add nuw i64 %160, 1, !dbg !5676
  %170 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 13, !dbg !5676
  %171 = getelementptr inbounds double*, double** %170, i64 %iv, !dbg !5676
  %172 = mul nuw i64 %169, 8, !dbg !5676
  %173 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 12, !dbg !5676
  %174 = getelementptr inbounds double*, double** %173, i64 %iv, !dbg !5676
  %175 = mul nuw i64 %169, 8, !dbg !5676
  %176 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 11, !dbg !5676
  %177 = getelementptr inbounds double*, double** %176, i64 %iv, !dbg !5676
  %178 = mul nuw i64 %169, 8, !dbg !5676
  %179 = load double**, double*** %mdyncache_fromtape_cache331, align 8, !dbg !5676, !invariant.group !5709
  %180 = getelementptr inbounds double*, double** %179, i64 %iv, !dbg !5676
  %181 = load double**, double*** %mdyncache_fromtape_cache336, align 8, !dbg !5676, !invariant.group !5710
  %182 = getelementptr inbounds double*, double** %181, i64 %iv, !dbg !5676
  %183 = load double**, double*** %mdyncache_fromtape_cache341, align 8, !dbg !5676, !invariant.group !5711
  %184 = getelementptr inbounds double*, double** %183, i64 %iv, !dbg !5676
  br label %.preheader, !dbg !5676

.thread.loopexit:                                 ; preds = %202
  br label %.thread, !dbg !5676

.thread:                                          ; preds = %.thread.loopexit, %137
  store i8 2, i8* %_cache327, align 1, !dbg !5676, !invariant.group !5690
  br label %dsymv_64_.exit, !dbg !5676

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv1 = phi i64 [ %iv.next2, %.preheader ], [ 0, %.preheader.preheader ], !dbg !5676
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !5676
  %185 = add nsw i64 %iv1, %166, !dbg !5676
  %"'ipg249" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %185, !dbg !5676
  %186 = load double**, double*** %mdyncache_fromtape_cache331, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5712
  %187 = getelementptr inbounds double*, double** %186, i64 %iv, !dbg !5676
  %188 = load double*, double** %187, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5713
  %189 = getelementptr inbounds double, double* %188, i64 %iv1, !dbg !5676
  %190 = load double, double* %189, align 8, !dbg !5676, !invariant.group !5714
  %"'ipg261" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %iv1, !dbg !5676
  %"'ipg259" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %iv1, !dbg !5676
  %191 = load double**, double*** %mdyncache_fromtape_cache336, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5715
  %192 = getelementptr inbounds double*, double** %191, i64 %iv, !dbg !5676
  %193 = load double*, double** %192, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5716
  %194 = getelementptr inbounds double, double* %193, i64 %iv1, !dbg !5676
  %195 = load double, double* %194, align 8, !dbg !5676, !invariant.group !5717
  %196 = load double**, double*** %mdyncache_fromtape_cache341, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5718
  %197 = getelementptr inbounds double*, double** %196, i64 %iv, !dbg !5676
  %198 = load double*, double** %197, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5719
  %199 = getelementptr inbounds double, double* %198, i64 %iv1, !dbg !5676
  %200 = load double, double* %199, align 8, !dbg !5676, !invariant.group !5720
  %201 = icmp eq i64 %iv.next2, %162, !dbg !5676
  br i1 %201, label %202, label %.preheader, !dbg !5676, !llvm.loop !5721

202:                                              ; preds = %.preheader
  %203 = add nsw i64 %164, -1, !dbg !5676
  %"'ipg313" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %203, !dbg !5676
  %204 = load double*, double** %mdyncache_fromtape_cache, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5722
  %205 = getelementptr inbounds double, double* %204, i64 %iv, !dbg !5676
  %206 = load double, double* %205, align 8, !dbg !5676, !invariant.group !5723
  %207 = mul nsw i64 %203, %139, !dbg !5676
  %208 = add nsw i64 %207, %203, !dbg !5676
  %"'ipg308" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %208, !dbg !5676
  %209 = load double*, double** %mdyncache_fromtape_cache329, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5724
  %210 = getelementptr inbounds double, double* %209, i64 %iv, !dbg !5676
  %211 = load double, double* %210, align 8, !dbg !5676, !invariant.group !5725
  %"'ipg287" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %203, !dbg !5676
  %212 = icmp sgt i64 %164, 1, !dbg !5676
  br i1 %212, label %.preheader.preheader, label %.thread.loopexit, !dbg !5676

213:                                              ; preds = %.loopexit189
  unreachable

dsymv_64_.exit.loopexit:                          ; preds = %133
  store i8 3, i8* %_cache327, align 1, !dbg !5676, !invariant.group !5690
  br label %dsymv_64_.exit, !dbg !5676

dsymv_64_.exit:                                   ; preds = %dsymv_64_.exit.loopexit, %.thread, %135, %65
  call void @llvm.julia.gc_preserve_end(token %52) #67, !dbg !5676
  br label %invertdsymv_64_.exit, !dbg !5726

inverttop:                                        ; preds = %invertL18
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL18:                                        ; preds = %invertL28
  br label %inverttop

invertL28:                                        ; preds = %invertL41
  br label %invertL18

invertL41:                                        ; preds = %invertL79
  br label %invertL28

invertL79:                                        ; preds = %invert4, %invert3, %invert
  call void @llvm.julia.gc_preserve_end(token %614), !dbg !5676
  br label %invertL41

invert:                                           ; preds = %invert3
  br label %invertL79

invert3:                                          ; preds = %invert4
  %214 = load i1, i1* %_cache, align 1, !invariant.group !5688
  br i1 %214, label %invert, label %invertL79

invert4:                                          ; preds = %invert.loopexit189, %invert.preheader187
  %215 = load i1, i1* %_cache92, align 1, !invariant.group !5689
  br i1 %215, label %invert3, label %invertL79

invert.preheader187:                              ; preds = %invert.loopexit189
  %_unwrap = shl i64 %arraysize, 3, !dbg !5676
  %_unwrap93 = and i64 %_unwrap, 34359738360, !dbg !5676
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %"arrayptr50172195'ipc", i8 0, i64 %_unwrap93, i1 false) #67, !dbg !5676, !tbaa !1731, !noalias !5348
  br label %invert4

invert.loopexit189:                               ; preds = %invert11, %invert5
  br i1 %62, label %invert.preheader187, label %invert4

invert5:                                          ; preds = %invertdsymv_64_.exit, %invert6
  br label %invert.loopexit189

invert6:                                          ; preds = %invert7
  %216 = load i64, i64* %"iv3'ac", align 8
  %217 = load i64, i64* %"iv3'ac", align 8
  %218 = load i64, i64* %"iv3'ac", align 8
  %219 = load i64, i64* %"iv3'ac", align 8
  %220 = load i64, i64* %"iv3'ac", align 8
  %221 = load i64, i64* %"iv3'ac", align 8
  %forfree347 = load double*, double** %mdyncache_fromtape_cache346, align 8, !dereferenceable !306, !invariant.group !5693
  %222 = bitcast double* %forfree347 to i8*
  call void @free(i8* nonnull %222), !dbg !5727
  %223 = load i64, i64* %"iv3'ac", align 8
  %forfree = load double**, double*** %mdyncache_fromtape_cache348, align 8, !dereferenceable !306, !invariant.group !5698
  %224 = bitcast double** %forfree to i8*
  call void @free(i8* nonnull %224), !dbg !5727
  %225 = load i64, i64* %"iv3'ac", align 8
  %forfree353 = load double**, double*** %mdyncache_fromtape_cache352, align 8, !dereferenceable !306, !invariant.group !5701
  %226 = bitcast double** %forfree353 to i8*
  call void @free(i8* nonnull %226), !dbg !5727
  %227 = load i64, i64* %"iv3'ac", align 8
  %forfree358 = load double**, double*** %mdyncache_fromtape_cache357, align 8, !dereferenceable !306, !invariant.group !5704
  %228 = bitcast double** %forfree358 to i8*
  call void @free(i8* nonnull %228), !dbg !5727
  %229 = load i64, i64* %"iv3'ac", align 8
  %forfree363 = load double*, double** %mdyncache_fromtape_cache362, align 8, !dereferenceable !306, !invariant.group !5691
  %230 = bitcast double* %forfree363 to i8*
  call void @free(i8* nonnull %230), !dbg !5727
  br label %invert5

invert7:                                          ; preds = %invert10, %invert8
  %231 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %231, !dbg !5676
  %232 = load double, double* %"'ipg_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  store double 0.000000e+00, double* %"'ipg_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  %233 = load double, double* %"'de", align 8, !dbg !5676
  %234 = fadd fast double %233, %232, !dbg !5676
  store double %234, double* %"'de", align 8, !dbg !5676
  %235 = load double, double* %"'de", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de", align 8, !dbg !5676
  %236 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %arraysize_unwrap368 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5676
  %_unwrap96 = and i64 %arraysize_unwrap368, 4294967295, !dbg !5676
  %_unwrap97 = add nsw i64 %_unwrap96, -1, !dbg !5676
  %237 = add nuw i64 %_unwrap97, 1, !dbg !5676
  %238 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 5, !dbg !5676
  %239 = getelementptr inbounds double, double* %238, i64 %236, !dbg !5676
  %240 = load double, double* %239, align 8, !dbg !5676, !tbaa !1731, !invariant.group !5733
  %241 = fmul fast double %235, %240, !dbg !5676
  %242 = load double, double* %"'de98", align 8, !dbg !5676
  %243 = fadd fast double %242, %241, !dbg !5676
  store double %243, double* %"'de98", align 8, !dbg !5676
  %244 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %245 = add nuw i64 %_unwrap97, 1, !dbg !5676
  %246 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 4, !dbg !5676
  %247 = getelementptr inbounds double, double* %246, i64 %244, !dbg !5676
  %248 = load double, double* %247, align 8, !dbg !5676, !tbaa !1731, !invariant.group !5734
  %249 = fmul fast double %235, %248, !dbg !5676
  %250 = load double, double* %"'de102", align 8, !dbg !5676
  %251 = fadd fast double %250, %249, !dbg !5676
  store double %251, double* %"'de102", align 8, !dbg !5676
  %252 = load double, double* %"'de103", align 8, !dbg !5676
  %253 = fadd fast double %252, %235, !dbg !5676
  store double %253, double* %"'de103", align 8, !dbg !5676
  %254 = load double, double* %"'de103", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de103", align 8, !dbg !5676
  %255 = load double, double* %"'ipg_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %256 = fadd fast double %255, %254, !dbg !5676
  store double %256, double* %"'ipg_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %257 = load double, double* %"'de102", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de102", align 8, !dbg !5676
  %258 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %_unwrap107 = sext i32 %61 to i64, !dbg !5676
  %_unwrap108 = mul nsw i64 %258, %_unwrap107, !dbg !5676
  %_unwrap109 = add nsw i64 %_unwrap108, %258, !dbg !5676
  %"'ipg106_unwrap" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %_unwrap109, !dbg !5676
  %259 = load double, double* %"'ipg106_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %260 = fadd fast double %259, %257, !dbg !5676
  store double %260, double* %"'ipg106_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %261 = load double, double* %"'de98", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de98", align 8, !dbg !5676
  %262 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %"'ipg111_unwrap" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %262, !dbg !5676
  %263 = load double, double* %"'ipg111_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5741, !noalias !5744
  %264 = fadd fast double %263, %261, !dbg !5676
  store double %264, double* %"'ipg111_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5741, !noalias !5744
  %265 = load i64, i64* %"iv3'ac", align 8
  %266 = icmp eq i64 %265, 0
  %267 = xor i1 %266, true
  br i1 %266, label %invert6, label %incinvert7

incinvert7:                                       ; preds = %invert7
  %268 = load i64, i64* %"iv3'ac", align 8
  %269 = add nsw i64 %268, -1
  store i64 %269, i64* %"iv3'ac", align 8
  br label %invert10

invert8:                                          ; preds = %invert9
  %270 = load i64, i64* %"iv5'ac", align 8
  %271 = load i64, i64* %"iv5'ac", align 8
  %272 = load i64, i64* %"iv5'ac", align 8
  %273 = load i64, i64* %"iv3'ac", align 8
  %274 = load i64, i64* %"iv5'ac", align 8
  %_unwrap349 = load double**, double*** %mdyncache_fromtape_cache348, align 8, !dbg !5676, !invariant.group !5695
  %_unwrap350 = getelementptr inbounds double*, double** %_unwrap349, i64 %273
  %forfree351 = load double*, double** %_unwrap350, align 8, !dereferenceable !306, !invariant.group !5699
  %275 = bitcast double* %forfree351 to i8*
  call void @free(i8* nonnull %275), !dbg !5727
  %276 = load i64, i64* %"iv3'ac", align 8
  %277 = load i64, i64* %"iv5'ac", align 8
  %_unwrap354 = load double**, double*** %mdyncache_fromtape_cache352, align 8, !dbg !5676, !invariant.group !5696
  %_unwrap355 = getelementptr inbounds double*, double** %_unwrap354, i64 %276
  %forfree356 = load double*, double** %_unwrap355, align 8, !dereferenceable !306, !invariant.group !5702
  %278 = bitcast double* %forfree356 to i8*
  call void @free(i8* nonnull %278), !dbg !5727
  %279 = load i64, i64* %"iv3'ac", align 8
  %280 = load i64, i64* %"iv5'ac", align 8
  %_unwrap359 = load double**, double*** %mdyncache_fromtape_cache357, align 8, !dbg !5676, !invariant.group !5697
  %_unwrap360 = getelementptr inbounds double*, double** %_unwrap359, i64 %279
  %forfree361 = load double*, double** %_unwrap360, align 8, !dereferenceable !306, !invariant.group !5705
  %281 = bitcast double* %forfree361 to i8*
  call void @free(i8* nonnull %281), !dbg !5727
  br label %invert7

invert9:                                          ; preds = %mergeinvert9_._crit_edge183, %incinvert9
  %282 = load double, double* %"'de116", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de116", align 8, !dbg !5676
  %283 = load i64, i64* %"iv5'ac", align 8, !dbg !5676
  %284 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %arraysize_unwrap371 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5676
  %_unwrap125 = and i64 %arraysize_unwrap371, 4294967295, !dbg !5676
  %_unwrap126 = add nsw i64 %_unwrap125, -1, !dbg !5676
  %285 = add nuw i64 %_unwrap126, 1, !dbg !5676
  %286 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %arraysize_unwrap369 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5676
  %_unwrap128 = and i64 %arraysize_unwrap369, 4294967295, !dbg !5676
  %_unwrap129 = add nsw i64 %_unwrap128, -2, !dbg !5676
  %_unwrap130 = mul nsw i64 %286, -1, !dbg !5676
  %_unwrap131 = add i64 %_unwrap129, %_unwrap130, !dbg !5676
  %287 = add nuw i64 %_unwrap131, 1, !dbg !5676
  %288 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 8, !dbg !5676
  %289 = getelementptr inbounds double*, double** %288, i64 %284, !dbg !5676
  %290 = load double*, double** %289, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5746
  %291 = getelementptr inbounds double, double* %290, i64 %283, !dbg !5676
  %292 = load double, double* %291, align 8, !dbg !5676, !tbaa !1731, !invariant.group !5747
  %293 = fmul fast double %282, %292, !dbg !5676
  %294 = load double, double* %"'de132", align 8, !dbg !5676
  %295 = fadd fast double %294, %293, !dbg !5676
  store double %295, double* %"'de132", align 8, !dbg !5676
  %296 = load i64, i64* %"iv5'ac", align 8, !dbg !5676
  %297 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %298 = add nuw i64 %_unwrap126, 1, !dbg !5676
  %299 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %300 = add nuw i64 %_unwrap131, 1, !dbg !5676
  %301 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 7, !dbg !5676
  %302 = getelementptr inbounds double*, double** %301, i64 %297, !dbg !5676
  %303 = load double*, double** %302, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5748
  %304 = getelementptr inbounds double, double* %303, i64 %296, !dbg !5676
  %305 = load double, double* %304, align 8, !dbg !5676, !tbaa !1731, !invariant.group !5749
  %306 = fmul fast double %282, %305, !dbg !5676
  %307 = load double, double* %"'de140", align 8, !dbg !5676
  %308 = fadd fast double %307, %306, !dbg !5676
  store double %308, double* %"'de140", align 8, !dbg !5676
  %309 = load double, double* %"'de141", align 8, !dbg !5676
  %310 = fadd fast double %309, %282, !dbg !5676
  store double %310, double* %"'de141", align 8, !dbg !5676
  %311 = load double, double* %"'de140", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de140", align 8, !dbg !5676
  %312 = load i64, i64* %"iv5'ac", align 8, !dbg !5676
  %313 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %_unwrap143 = add i64 %313, 1, !dbg !5676
  %_unwrap144 = add i64 %_unwrap143, %312, !dbg !5676
  %_unwrap145 = sext i32 %61 to i64, !dbg !5676
  %_unwrap146 = mul nsw i64 %313, %_unwrap145, !dbg !5676
  %_unwrap147 = add nsw i64 %_unwrap144, %_unwrap146, !dbg !5676
  %"'ipg142_unwrap" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %_unwrap147, !dbg !5676
  %314 = load double, double* %"'ipg142_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %315 = fadd fast double %314, %311, !dbg !5676
  store double %315, double* %"'ipg142_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %316 = load double, double* %"'de132", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de132", align 8, !dbg !5676
  %317 = load i64, i64* %"iv5'ac", align 8, !dbg !5676
  %318 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %_unwrap149 = add i64 %318, 1, !dbg !5676
  %_unwrap150 = trunc i64 %_unwrap149 to i32, !dbg !5676
  %_unwrap151 = sext i32 %_unwrap150 to i64, !dbg !5676
  %_unwrap152 = add i64 %_unwrap151, %317, !dbg !5676
  %"'ipg148_unwrap" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %_unwrap152, !dbg !5676
  %319 = load double, double* %"'ipg148_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5741, !noalias !5744
  %320 = fadd fast double %319, %316, !dbg !5676
  store double %320, double* %"'ipg148_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5741, !noalias !5744
  %321 = load i64, i64* %"iv5'ac", align 8, !dbg !5676
  %322 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %"'ipg154_unwrap" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %_unwrap152, !dbg !5676
  %323 = load double, double* %"'ipg154_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  store double 0.000000e+00, double* %"'ipg154_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  %324 = load double, double* %"'de155", align 8, !dbg !5676
  %325 = fadd fast double %324, %323, !dbg !5676
  store double %325, double* %"'de155", align 8, !dbg !5676
  %326 = load double, double* %"'de155", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de155", align 8, !dbg !5676
  %327 = load i64, i64* %"iv5'ac", align 8, !dbg !5676
  %328 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %329 = add nuw i64 %_unwrap126, 1, !dbg !5676
  %330 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %331 = add nuw i64 %_unwrap131, 1, !dbg !5676
  %332 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 6, !dbg !5676
  %333 = getelementptr inbounds double*, double** %332, i64 %328, !dbg !5676
  %334 = load double*, double** %333, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5750
  %335 = getelementptr inbounds double, double* %334, i64 %327, !dbg !5676
  %336 = load double, double* %335, align 8, !dbg !5676, !tbaa !1731, !invariant.group !5751
  %337 = fmul fast double %326, %336, !dbg !5676
  %338 = load double, double* %"'de98", align 8, !dbg !5676
  %339 = fadd fast double %338, %337, !dbg !5676
  store double %339, double* %"'de98", align 8, !dbg !5676
  %340 = load i64, i64* %"iv5'ac", align 8, !dbg !5676
  %341 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %342 = add nuw i64 %_unwrap126, 1, !dbg !5676
  %343 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 4, !dbg !5676
  %344 = getelementptr inbounds double, double* %343, i64 %341, !dbg !5676
  %345 = load double, double* %344, align 8, !dbg !5676, !tbaa !1731, !alias.scope !5744, !noalias !5741, !invariant.group !5734
  %346 = fmul fast double %326, %345, !dbg !5676
  %347 = load double, double* %"'de164", align 8, !dbg !5676
  %348 = fadd fast double %347, %346, !dbg !5676
  store double %348, double* %"'de164", align 8, !dbg !5676
  %349 = load double, double* %"'de165", align 8, !dbg !5676
  %350 = fadd fast double %349, %326, !dbg !5676
  store double %350, double* %"'de165", align 8, !dbg !5676
  %351 = load double, double* %"'de165", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de165", align 8, !dbg !5676
  %352 = load double, double* %"'ipg154_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %353 = fadd fast double %352, %351, !dbg !5676
  store double %353, double* %"'ipg154_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %354 = load double, double* %"'de164", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de164", align 8, !dbg !5676
  %355 = load double, double* %"'ipg142_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %356 = fadd fast double %355, %354, !dbg !5676
  store double %356, double* %"'ipg142_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %357 = load double, double* %"'de141", align 8
  store double 0.000000e+00, double* %"'de141", align 8
  %358 = load i64, i64* %"iv5'ac", align 8
  %359 = icmp eq i64 %358, 0
  %360 = xor i1 %359, true
  %361 = select fast i1 %360, double %357, double 0.000000e+00
  %362 = load double, double* %"'de116", align 8
  %363 = fadd fast double %362, %357
  %364 = select fast i1 %359, double %362, double %363
  store double %364, double* %"'de116", align 8
  br i1 %359, label %invert8, label %incinvert9

incinvert9:                                       ; preds = %invert9
  %365 = load i64, i64* %"iv5'ac", align 8
  %366 = add nsw i64 %365, -1
  store i64 %366, i64* %"iv5'ac", align 8
  br label %invert9

invert._crit_edge183:                             ; preds = %invert10
  %367 = load double, double* %".pre184'de", align 8, !dbg !5676
  store double 0.000000e+00, double* %".pre184'de", align 8, !dbg !5676
  %368 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %"'ipg_unwrap170" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %368, !dbg !5676
  %369 = load double, double* %"'ipg_unwrap170", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %370 = fadd fast double %369, %367, !dbg !5676
  store double %370, double* %"'ipg_unwrap170", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %371 = load i64, i64* %"iv3'ac", align 8
  %_unwrap171 = and i64 %arraysize, 4294967295
  %_unwrap172 = add nsw i64 %_unwrap171, -2
  %_unwrap173 = mul nsw i64 %371, -1
  %_unwrap174 = add i64 %_unwrap172, %_unwrap173
  br label %mergeinvert9_._crit_edge183

mergeinvert9_._crit_edge183:                      ; preds = %invert._crit_edge183
  store i64 %_unwrap174, i64* %"iv5'ac", align 8
  br label %invert9

invert10:                                         ; preds = %mergeinvert7_dsymv_64_.exit.loopexit, %incinvert7
  %372 = load i64, i64* %"iv3'ac", align 8, !dbg !5676
  %"'ipg_unwrap176" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %372, !dbg !5676
  %373 = load double, double* %"'ipg_unwrap176", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  store double 0.000000e+00, double* %"'ipg_unwrap176", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  %374 = load double, double* %"'de177", align 8, !dbg !5676
  %375 = fadd fast double %374, %373, !dbg !5676
  store double %375, double* %"'de177", align 8, !dbg !5676
  %376 = load double, double* %"'de177", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de177", align 8, !dbg !5676
  %377 = load double, double* %"'de179", align 8, !dbg !5676
  %378 = fadd fast double %377, %376, !dbg !5676
  store double %378, double* %"'de179", align 8, !dbg !5676
  %379 = load double, double* %"'de180", align 8, !dbg !5676
  %380 = fadd fast double %379, %376, !dbg !5676
  store double %380, double* %"'de180", align 8, !dbg !5676
  %381 = load double, double* %"'de180", align 8
  store double 0.000000e+00, double* %"'de180", align 8
  %382 = load i64, i64* %"iv3'ac", align 8
  %iv.next4_unwrap = add nuw nsw i64 %382, 1
  %sext185_unwrap = shl i64 %arraysize, 32
  %_unwrap184 = ashr exact i64 %sext185_unwrap, 32
  %_unwrap185 = icmp slt i64 %iv.next4_unwrap, %_unwrap184
  %383 = xor i1 %_unwrap185, true
  %384 = select fast i1 %_unwrap185, double %381, double 0.000000e+00
  %385 = load double, double* %".pre184'de", align 8
  %386 = fadd fast double %385, %381
  %387 = select fast i1 %_unwrap185, double %386, double %385
  store double %387, double* %".pre184'de", align 8
  %388 = select fast i1 %383, double %381, double 0.000000e+00
  %389 = load double, double* %"'de", align 8
  %390 = fadd fast double %389, %381
  %391 = select fast i1 %_unwrap185, double %389, double %390
  store double %391, double* %"'de", align 8
  %392 = load double, double* %"'de179", align 8
  store double 0.000000e+00, double* %"'de179", align 8
  %393 = select fast i1 %_unwrap185, double %392, double 0.000000e+00
  %394 = load double, double* %"'de116", align 8
  %395 = fadd fast double %394, %392
  %396 = select fast i1 %_unwrap185, double %395, double %394
  store double %396, double* %"'de116", align 8
  br i1 %_unwrap185, label %invert._crit_edge183, label %invert7

invert11:                                         ; preds = %invertdsymv_64_.exit, %invert12
  br label %invert.loopexit189

invert12:                                         ; preds = %invert.thread, %invert.preheader.preheader.lr.ph
  %sext_unwrap = shl i64 %arraysize, 32, !dbg !5676
  %_unwrap187 = ashr exact i64 %sext_unwrap, 32, !dbg !5676
  %indvars.iv217_unwrap = add nsw i64 %_unwrap187, -1, !dbg !5676
  %"'ipg186_unwrap" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %indvars.iv217_unwrap, !dbg !5676
  %397 = load double, double* %"'ipg186_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  store double 0.000000e+00, double* %"'ipg186_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  %398 = load double, double* %"'de188", align 8, !dbg !5676
  %399 = fadd fast double %398, %397, !dbg !5676
  store double %399, double* %"'de188", align 8, !dbg !5676
  %400 = load double, double* %"'de188", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de188", align 8, !dbg !5676
  %_unwrap374 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 10, !dbg !5676
  %401 = fmul fast double %400, %_unwrap374, !dbg !5676
  %402 = load double, double* %"'de191", align 8, !dbg !5676
  %403 = fadd fast double %402, %401, !dbg !5676
  store double %403, double* %"'de191", align 8, !dbg !5676
  %_unwrap373 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 9, !dbg !5676
  %404 = fmul fast double %400, %_unwrap373, !dbg !5676
  %405 = load double, double* %"'de193", align 8, !dbg !5676
  %406 = fadd fast double %405, %404, !dbg !5676
  store double %406, double* %"'de193", align 8, !dbg !5676
  %407 = load double, double* %"'de194", align 8, !dbg !5676
  %408 = fadd fast double %407, %400, !dbg !5676
  store double %408, double* %"'de194", align 8, !dbg !5676
  %409 = load double, double* %"'de194", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de194", align 8, !dbg !5676
  %410 = load double, double* %"'ipg186_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %411 = fadd fast double %410, %409, !dbg !5676
  store double %411, double* %"'ipg186_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %412 = load double, double* %"'de193", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de193", align 8, !dbg !5676
  %_unwrap198 = sext i32 %61 to i64, !dbg !5676
  %_unwrap199 = mul nsw i64 %indvars.iv217_unwrap, %_unwrap198, !dbg !5676
  %_unwrap200 = add nsw i64 %_unwrap199, %indvars.iv217_unwrap, !dbg !5676
  %"'ipg197_unwrap" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %_unwrap200, !dbg !5676
  %413 = load double, double* %"'ipg197_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %414 = fadd fast double %413, %412, !dbg !5676
  store double %414, double* %"'ipg197_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %415 = load double, double* %"'de191", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de191", align 8, !dbg !5676
  %"'ipg202_unwrap" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %indvars.iv217_unwrap, !dbg !5676
  %416 = load double, double* %"'ipg202_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5741, !noalias !5744
  %417 = fadd fast double %416, %415, !dbg !5676
  store double %417, double* %"'ipg202_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5741, !noalias !5744
  br label %invert11

invert.preheader.preheader.lr.ph:                 ; preds = %invert.preheader.preheader
  %418 = load i64, i64* %"iv'ac", align 8
  %419 = load i64, i64* %"iv'ac", align 8
  %420 = load i64, i64* %"iv'ac", align 8
  %421 = load i64, i64* %"iv'ac", align 8
  %422 = load i64, i64* %"iv'ac", align 8
  %423 = load i64, i64* %"iv'ac", align 8
  %forfree328 = load double*, double** %mdyncache_fromtape_cache, align 8, !dereferenceable !306, !invariant.group !5722
  %424 = bitcast double* %forfree328 to i8*
  call void @free(i8* nonnull %424), !dbg !5727
  %425 = load i64, i64* %"iv'ac", align 8
  %forfree330 = load double*, double** %mdyncache_fromtape_cache329, align 8, !dereferenceable !306, !invariant.group !5724
  %426 = bitcast double* %forfree330 to i8*
  call void @free(i8* nonnull %426), !dbg !5727
  %427 = load i64, i64* %"iv'ac", align 8
  %forfree332 = load double**, double*** %mdyncache_fromtape_cache331, align 8, !dereferenceable !306, !invariant.group !5712
  %428 = bitcast double** %forfree332 to i8*
  call void @free(i8* nonnull %428), !dbg !5727
  %429 = load i64, i64* %"iv'ac", align 8
  %forfree337 = load double**, double*** %mdyncache_fromtape_cache336, align 8, !dereferenceable !306, !invariant.group !5715
  %430 = bitcast double** %forfree337 to i8*
  call void @free(i8* nonnull %430), !dbg !5727
  %431 = load i64, i64* %"iv'ac", align 8
  %forfree342 = load double**, double*** %mdyncache_fromtape_cache341, align 8, !dereferenceable !306, !invariant.group !5718
  %432 = bitcast double** %forfree342 to i8*
  call void @free(i8* nonnull %432), !dbg !5727
  br label %invert12

invert.preheader.preheader:                       ; preds = %invert.preheader_phimerge
  %433 = load double, double* %"'de204", align 8
  store double 0.000000e+00, double* %"'de204", align 8
  %434 = load i64, i64* %"iv'ac", align 8
  %435 = icmp eq i64 %434, 0
  %436 = xor i1 %435, true
  %437 = select fast i1 %436, double %433, double 0.000000e+00
  %438 = load double, double* %"'de205", align 8
  %439 = fadd fast double %438, %433
  %440 = select fast i1 %435, double %438, double %439
  store double %440, double* %"'de205", align 8
  %441 = select fast i1 %435, double %433, double 0.000000e+00
  %442 = load double, double* %"'de191", align 8
  %443 = fadd fast double %442, %433
  %444 = select fast i1 %435, double %443, double %442
  store double %444, double* %"'de191", align 8
  %445 = load i64, i64* %"iv1'ac", align 8
  %446 = load i64, i64* %"iv1'ac", align 8
  %447 = load i64, i64* %"iv1'ac", align 8
  %448 = load i64, i64* %"iv'ac", align 8
  %449 = load i64, i64* %"iv1'ac", align 8
  %_unwrap333 = load double**, double*** %mdyncache_fromtape_cache331, align 8, !dbg !5676, !invariant.group !5709
  %_unwrap334 = getelementptr inbounds double*, double** %_unwrap333, i64 %448
  %forfree335 = load double*, double** %_unwrap334, align 8, !dereferenceable !306, !invariant.group !5713
  %450 = bitcast double* %forfree335 to i8*
  call void @free(i8* nonnull %450), !dbg !5727
  %451 = load i64, i64* %"iv'ac", align 8
  %452 = load i64, i64* %"iv1'ac", align 8
  %_unwrap338 = load double**, double*** %mdyncache_fromtape_cache336, align 8, !dbg !5676, !invariant.group !5710
  %_unwrap339 = getelementptr inbounds double*, double** %_unwrap338, i64 %451
  %forfree340 = load double*, double** %_unwrap339, align 8, !dereferenceable !306, !invariant.group !5716
  %453 = bitcast double* %forfree340 to i8*
  call void @free(i8* nonnull %453), !dbg !5727
  %454 = load i64, i64* %"iv'ac", align 8
  %455 = load i64, i64* %"iv1'ac", align 8
  %_unwrap343 = load double**, double*** %mdyncache_fromtape_cache341, align 8, !dbg !5676, !invariant.group !5711
  %_unwrap344 = getelementptr inbounds double*, double** %_unwrap343, i64 %454
  %forfree345 = load double*, double** %_unwrap344, align 8, !dereferenceable !306, !invariant.group !5719
  %456 = bitcast double* %forfree345 to i8*
  call void @free(i8* nonnull %456), !dbg !5727
  br i1 %435, label %invert.preheader.preheader.lr.ph, label %incinvert.preheader.preheader

incinvert.preheader.preheader:                    ; preds = %invert.preheader.preheader
  %457 = load i64, i64* %"iv'ac", align 8
  %458 = add nsw i64 %457, -1
  store i64 %458, i64* %"iv'ac", align 8
  br label %invert13

invert.thread.loopexit:                           ; preds = %invert.thread
  %sext_unwrap207 = shl i64 %arraysize, 32
  %_unwrap208 = ashr exact i64 %sext_unwrap207, 32
  %_unwrap209 = add i64 %_unwrap208, -1
  %_unwrap210 = add nsw i64 %_unwrap208, -1
  %459 = call i64 @llvm.smin.i64(i64 %_unwrap210, i64 1), !dbg !5676
  %_unwrap211 = sub i64 %_unwrap209, %459
  br label %mergeinvert.preheader.preheader_.thread.loopexit

mergeinvert.preheader.preheader_.thread.loopexit: ; preds = %invert.thread.loopexit
  store i64 %_unwrap211, i64* %"iv'ac", align 8
  br label %invert13

invert.thread:                                    ; preds = %invertdsymv_64_.exit
  %460 = load double, double* %"arrayptr50172'il_phi", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  store double 0.000000e+00, double* %"arrayptr50172'il_phi", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  %461 = load double, double* %"'de212", align 8, !dbg !5676
  %462 = fadd fast double %461, %460, !dbg !5676
  store double %462, double* %"'de212", align 8, !dbg !5676
  %463 = load double, double* %"'de212", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de212", align 8, !dbg !5676
  %464 = load double, double* %".lcssa216'de", align 8, !dbg !5676
  %465 = fadd fast double %464, %463, !dbg !5676
  store double %465, double* %".lcssa216'de", align 8, !dbg !5676
  %466 = load double, double* %".lcssa216'de", align 8
  store double 0.000000e+00, double* %".lcssa216'de", align 8
  %sext_unwrap216 = shl i64 %arraysize, 32
  %_unwrap217 = icmp sgt i64 %sext_unwrap216, 4294967296
  %467 = xor i1 %_unwrap217, true
  %468 = select fast i1 %_unwrap217, double %466, double 0.000000e+00
  %469 = load double, double* %"'de214", align 8
  %470 = fadd fast double %469, %466
  %471 = select fast i1 %_unwrap217, double %470, double %469
  store double %471, double* %"'de214", align 8
  %472 = select fast i1 %467, double %466, double 0.000000e+00
  %473 = load double, double* %"'de188", align 8
  %474 = fadd fast double %473, %466
  %475 = select fast i1 %_unwrap217, double %473, double %474
  store double %475, double* %"'de188", align 8
  br i1 %_unwrap217, label %invert.thread.loopexit, label %invert12

invert.preheader:                                 ; preds = %mergeinvert.preheader_, %incinvert.preheader
  %476 = load double, double* %"'de219", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de219", align 8, !dbg !5676
  %477 = load i64, i64* %"iv1'ac", align 8, !dbg !5676
  %478 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %arraysize_unwrap367 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5676
  %sext_unwrap228 = shl i64 %arraysize_unwrap367, 32, !dbg !5676
  %_unwrap229 = ashr exact i64 %sext_unwrap228, 32, !dbg !5676
  %_unwrap230 = add i64 %_unwrap229, -1, !dbg !5676
  %_unwrap231 = add nsw i64 %_unwrap229, -1, !dbg !5676
  %479 = call i64 @llvm.smin.i64(i64 %_unwrap231, i64 1), !dbg !5676
  %_unwrap232 = sub i64 %_unwrap230, %479, !dbg !5676
  %480 = add nuw i64 %_unwrap232, 1, !dbg !5676
  %481 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %arraysize_unwrap370 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5676
  %_unwrap234 = add nuw i64 %arraysize_unwrap370, 4294967295, !dbg !5676
  %_unwrap235 = and i64 %_unwrap234, 4294967295, !dbg !5676
  %_unwrap236 = add nsw i64 %_unwrap235, -1, !dbg !5676
  %_unwrap237 = mul nsw i64 %481, -1, !dbg !5676
  %_unwrap238 = add i64 %_unwrap236, %_unwrap237, !dbg !5676
  %482 = add nuw i64 %_unwrap238, 1, !dbg !5676
  %483 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 13, !dbg !5676
  %484 = getelementptr inbounds double*, double** %483, i64 %478, !dbg !5676
  %485 = load double*, double** %484, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5752
  %486 = getelementptr inbounds double, double* %485, i64 %477, !dbg !5676
  %487 = load double, double* %486, align 8, !dbg !5676, !tbaa !1731, !invariant.group !5753
  %488 = fmul fast double %476, %487, !dbg !5676
  %489 = load double, double* %"'de239", align 8, !dbg !5676
  %490 = fadd fast double %489, %488, !dbg !5676
  store double %490, double* %"'de239", align 8, !dbg !5676
  %491 = load i64, i64* %"iv1'ac", align 8, !dbg !5676
  %492 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %493 = add nuw i64 %_unwrap232, 1, !dbg !5676
  %494 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %495 = add nuw i64 %_unwrap238, 1, !dbg !5676
  %496 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 12, !dbg !5676
  %497 = getelementptr inbounds double*, double** %496, i64 %492, !dbg !5676
  %498 = load double*, double** %497, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5754
  %499 = getelementptr inbounds double, double* %498, i64 %491, !dbg !5676
  %500 = load double, double* %499, align 8, !dbg !5676, !tbaa !1731, !invariant.group !5755
  %501 = fmul fast double %476, %500, !dbg !5676
  %502 = load double, double* %"'de247", align 8, !dbg !5676
  %503 = fadd fast double %502, %501, !dbg !5676
  store double %503, double* %"'de247", align 8, !dbg !5676
  %504 = load double, double* %"'de248", align 8, !dbg !5676
  %505 = fadd fast double %504, %476, !dbg !5676
  store double %505, double* %"'de248", align 8, !dbg !5676
  %506 = load double, double* %"'de247", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de247", align 8, !dbg !5676
  %507 = load i64, i64* %"iv1'ac", align 8, !dbg !5676
  %508 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %sext_unwrap250 = shl i64 %arraysize, 32, !dbg !5676
  %_unwrap251 = ashr exact i64 %sext_unwrap250, 32, !dbg !5676
  %indvars.iv217_unwrap252 = add nsw i64 %_unwrap251, -1, !dbg !5676
  %_unwrap253 = sext i32 %61 to i64, !dbg !5676
  %_unwrap254 = mul nsw i64 %indvars.iv217_unwrap252, %_unwrap253, !dbg !5676
  %_unwrap255 = sub i64 0, %_unwrap253, !dbg !5676
  %_unwrap256 = mul i64 %_unwrap255, %508, !dbg !5676
  %_unwrap257 = add i64 %_unwrap254, %_unwrap256, !dbg !5676
  %_unwrap258 = add nsw i64 %507, %_unwrap257, !dbg !5676
  %"'ipg249_unwrap" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %_unwrap258, !dbg !5676
  %509 = load double, double* %"'ipg249_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %510 = fadd fast double %509, %506, !dbg !5676
  store double %510, double* %"'ipg249_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %511 = load double, double* %"'de239", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de239", align 8, !dbg !5676
  %512 = load i64, i64* %"iv1'ac", align 8, !dbg !5676
  %513 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %"'ipg259_unwrap" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %512, !dbg !5676
  %514 = load double, double* %"'ipg259_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5741, !noalias !5744
  %515 = fadd fast double %514, %511, !dbg !5676
  store double %515, double* %"'ipg259_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5741, !noalias !5744
  %516 = load i64, i64* %"iv1'ac", align 8, !dbg !5676
  %517 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %"'ipg261_unwrap" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %516, !dbg !5676
  %518 = load double, double* %"'ipg261_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  store double 0.000000e+00, double* %"'ipg261_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  %519 = load double, double* %"'de262", align 8, !dbg !5676
  %520 = fadd fast double %519, %518, !dbg !5676
  store double %520, double* %"'de262", align 8, !dbg !5676
  %521 = load double, double* %"'de262", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de262", align 8, !dbg !5676
  %522 = load i64, i64* %"iv1'ac", align 8, !dbg !5676
  %523 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %524 = add nuw i64 %_unwrap232, 1, !dbg !5676
  %525 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %526 = add nuw i64 %_unwrap238, 1, !dbg !5676
  %527 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 11, !dbg !5676
  %528 = getelementptr inbounds double*, double** %527, i64 %523, !dbg !5676
  %529 = load double*, double** %528, align 8, !dbg !5676, !dereferenceable !306, !invariant.group !5756
  %530 = getelementptr inbounds double, double* %529, i64 %522, !dbg !5676
  %531 = load double, double* %530, align 8, !dbg !5676, !tbaa !1731, !invariant.group !5757
  %532 = fmul fast double %521, %531, !dbg !5676
  %533 = load double, double* %"'de204", align 8, !dbg !5676
  %534 = fadd fast double %533, %532, !dbg !5676
  store double %534, double* %"'de204", align 8, !dbg !5676
  %535 = load i64, i64* %"iv1'ac", align 8, !dbg !5676
  %536 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %537 = icmp ne i64 %536, 0, !dbg !5676
  br i1 %537, label %invert.preheader_phirc, label %invert.preheader_phirc280, !dbg !5676

invert.preheader_phirc:                           ; preds = %invert.preheader
  %538 = sub nuw i64 %536, 1
  %arraysize_unwrap = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3
  %sext_unwrap275 = shl i64 %arraysize_unwrap, 32
  %_unwrap276 = ashr exact i64 %sext_unwrap275, 32
  %_unwrap277 = add i64 %_unwrap276, -1
  %_unwrap278 = add nsw i64 %_unwrap276, -1
  %539 = call i64 @llvm.smin.i64(i64 %_unwrap278, i64 1), !dbg !5676
  %_unwrap279 = sub i64 %_unwrap277, %539
  %540 = add nuw i64 %_unwrap279, 1
  %541 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 14
  %542 = getelementptr inbounds double, double* %541, i64 %538
  %543 = load double, double* %542, align 8, !dbg !5676, !tbaa !1731, !invariant.group !5758
  br label %invert.preheader_phimerge

invert.preheader_phirc280:                        ; preds = %invert.preheader
  %_unwrap372 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 9, !dbg !5676
  br label %invert.preheader_phimerge

invert.preheader_phimerge:                        ; preds = %invert.preheader_phirc280, %invert.preheader_phirc
  %544 = phi fast double [ %543, %invert.preheader_phirc ], [ %_unwrap372, %invert.preheader_phirc280 ], !dbg !5676
  %545 = fmul fast double %521, %544, !dbg !5676
  %546 = load double, double* %"'de281", align 8, !dbg !5676
  %547 = fadd fast double %546, %545, !dbg !5676
  store double %547, double* %"'de281", align 8, !dbg !5676
  %548 = load double, double* %"'de282", align 8, !dbg !5676
  %549 = fadd fast double %548, %521, !dbg !5676
  store double %549, double* %"'de282", align 8, !dbg !5676
  %550 = load double, double* %"'de282", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de282", align 8, !dbg !5676
  %551 = load double, double* %"'ipg261_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %552 = fadd fast double %551, %550, !dbg !5676
  store double %552, double* %"'ipg261_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %553 = load double, double* %"'de281", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de281", align 8, !dbg !5676
  %554 = load double, double* %"'ipg249_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %555 = fadd fast double %554, %553, !dbg !5676
  store double %555, double* %"'ipg249_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %556 = load double, double* %"'de248", align 8
  store double 0.000000e+00, double* %"'de248", align 8
  %557 = load i64, i64* %"iv1'ac", align 8
  %558 = icmp eq i64 %557, 0
  %559 = xor i1 %558, true
  %560 = select fast i1 %559, double %556, double 0.000000e+00
  %561 = load double, double* %"'de219", align 8
  %562 = fadd fast double %561, %556
  %563 = select fast i1 %558, double %561, double %562
  store double %563, double* %"'de219", align 8
  br i1 %558, label %invert.preheader.preheader, label %incinvert.preheader

incinvert.preheader:                              ; preds = %invert.preheader_phimerge
  %564 = load i64, i64* %"iv1'ac", align 8
  %565 = add nsw i64 %564, -1
  store i64 %565, i64* %"iv1'ac", align 8
  br label %invert.preheader

invert13:                                         ; preds = %mergeinvert.preheader.preheader_.thread.loopexit, %incinvert.preheader.preheader
  %566 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %sext_unwrap288 = shl i64 %arraysize, 32, !dbg !5676
  %_unwrap289 = ashr exact i64 %sext_unwrap288, 32, !dbg !5676
  %indvars.iv217_unwrap290 = add nsw i64 %_unwrap289, -1, !dbg !5676
  %_unwrap291 = mul nsw i64 %566, -1, !dbg !5676
  %_unwrap292 = add i64 %indvars.iv217_unwrap290, %_unwrap291, !dbg !5676
  %_unwrap293 = add nsw i64 %_unwrap292, -1, !dbg !5676
  %"'ipg287_unwrap" = getelementptr inbounds double, double* %"arrayptr50172'il_phi", i64 %_unwrap293, !dbg !5676
  %567 = load double, double* %"'ipg287_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  store double 0.000000e+00, double* %"'ipg287_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  %568 = load double, double* %"'de214", align 8, !dbg !5676
  %569 = fadd fast double %568, %567, !dbg !5676
  store double %569, double* %"'de214", align 8, !dbg !5676
  %570 = load double, double* %"'de214", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de214", align 8, !dbg !5676
  %571 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %arraysize_unwrap366 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 3, !dbg !5676
  %sext_unwrap299 = shl i64 %arraysize_unwrap366, 32, !dbg !5676
  %_unwrap300 = ashr exact i64 %sext_unwrap299, 32, !dbg !5676
  %_unwrap301 = add i64 %_unwrap300, -1, !dbg !5676
  %_unwrap302 = add nsw i64 %_unwrap300, -1, !dbg !5676
  %572 = call i64 @llvm.smin.i64(i64 %_unwrap302, i64 1), !dbg !5676
  %_unwrap303 = sub i64 %_unwrap301, %572, !dbg !5676
  %573 = add nuw i64 %_unwrap303, 1, !dbg !5676
  %574 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 15, !dbg !5676
  %575 = getelementptr inbounds double, double* %574, i64 %571, !dbg !5676
  %576 = load double, double* %575, align 8, !dbg !5676, !tbaa !1731, !invariant.group !5759
  %577 = fmul fast double %570, %576, !dbg !5676
  %578 = load double, double* %"'de205", align 8, !dbg !5676
  %579 = fadd fast double %578, %577, !dbg !5676
  store double %579, double* %"'de205", align 8, !dbg !5676
  %580 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %581 = add nuw i64 %_unwrap303, 1, !dbg !5676
  %582 = extractvalue { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg, 14, !dbg !5676
  %583 = getelementptr inbounds double, double* %582, i64 %580, !dbg !5676
  %584 = load double, double* %583, align 8, !dbg !5676, !tbaa !1731, !invariant.group !5758
  %585 = fmul fast double %570, %584, !dbg !5676
  %586 = load double, double* %"'de304", align 8, !dbg !5676
  %587 = fadd fast double %586, %585, !dbg !5676
  store double %587, double* %"'de304", align 8, !dbg !5676
  %588 = load double, double* %"'de305", align 8, !dbg !5676
  %589 = fadd fast double %588, %570, !dbg !5676
  store double %589, double* %"'de305", align 8, !dbg !5676
  %590 = load double, double* %"'de305", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de305", align 8, !dbg !5676
  %591 = load double, double* %"'ipg287_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %592 = fadd fast double %591, %590, !dbg !5676
  store double %592, double* %"'ipg287_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %593 = load double, double* %"'de304", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de304", align 8, !dbg !5676
  %594 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %_unwrap309 = sext i32 %61 to i64, !dbg !5676
  %_unwrap310 = mul nsw i64 %_unwrap293, %_unwrap309, !dbg !5676
  %_unwrap311 = add nsw i64 %_unwrap310, %_unwrap293, !dbg !5676
  %"'ipg308_unwrap" = getelementptr inbounds double, double* %"arrayptr81170'il_phi", i64 %_unwrap311, !dbg !5676
  %595 = load double, double* %"'ipg308_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %596 = fadd fast double %595, %593, !dbg !5676
  store double %596, double* %"'ipg308_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5736, !noalias !5739
  %597 = load double, double* %"'de205", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de205", align 8, !dbg !5676
  %598 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %"'ipg313_unwrap" = getelementptr inbounds double, double* %"arrayptr171'il_phi", i64 %_unwrap293, !dbg !5676
  %599 = load double, double* %"'ipg313_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5741, !noalias !5744
  %600 = fadd fast double %599, %597, !dbg !5676
  store double %600, double* %"'ipg313_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5741, !noalias !5744
  %601 = load i64, i64* %"iv'ac", align 8, !dbg !5676
  %_unwrap316 = mul nsw i64 %601, -1, !dbg !5676
  %_unwrap317 = add i64 %indvars.iv217_unwrap290, %_unwrap316, !dbg !5676
  %"scevgep'ipg_unwrap" = getelementptr double, double* %"arrayptr50172'il_phi", i64 %_unwrap317, !dbg !5676
  %602 = load double, double* %"scevgep'ipg_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  store double 0.000000e+00, double* %"scevgep'ipg_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5731
  %603 = load double, double* %"'de318", align 8, !dbg !5676
  %604 = fadd fast double %603, %602, !dbg !5676
  store double %604, double* %"'de318", align 8, !dbg !5676
  %605 = load double, double* %"'de318", align 8, !dbg !5676
  store double 0.000000e+00, double* %"'de318", align 8, !dbg !5676
  %606 = load double, double* %"'de219", align 8, !dbg !5676
  %607 = fadd fast double %606, %605, !dbg !5676
  store double %607, double* %"'de219", align 8, !dbg !5676
  %608 = load double, double* %".pre'de", align 8, !dbg !5676
  %609 = fadd fast double %608, %605, !dbg !5676
  store double %609, double* %".pre'de", align 8, !dbg !5676
  %610 = load double, double* %".pre'de", align 8, !dbg !5676
  store double 0.000000e+00, double* %".pre'de", align 8, !dbg !5676
  %611 = load double, double* %"scevgep'ipg_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %612 = fadd fast double %611, %610, !dbg !5676
  store double %612, double* %"scevgep'ipg_unwrap", align 8, !dbg !5676, !tbaa !1731, !alias.scope !5728, !noalias !5735
  %613 = load i64, i64* %"iv'ac", align 8
  %_unwrap320 = add nuw i64 %arraysize, 4294967295
  %_unwrap321 = and i64 %_unwrap320, 4294967295
  %_unwrap322 = add nsw i64 %_unwrap321, -1
  %_unwrap323 = mul nsw i64 %613, -1
  %_unwrap324 = add i64 %_unwrap322, %_unwrap323
  br label %mergeinvert.preheader_

mergeinvert.preheader_:                           ; preds = %invert13
  store i64 %_unwrap324, i64* %"iv1'ac", align 8
  br label %invert.preheader

invertdsymv_64_.exit.loopexit:                    ; preds = %invertdsymv_64_.exit
  %_unwrap325 = and i64 %arraysize, 4294967295
  %_unwrap326 = add nsw i64 %_unwrap325, -1
  br label %mergeinvert7_dsymv_64_.exit.loopexit

mergeinvert7_dsymv_64_.exit.loopexit:             ; preds = %invertdsymv_64_.exit.loopexit
  store i64 %_unwrap326, i64* %"iv3'ac", align 8
  br label %invert10

invertdsymv_64_.exit:                             ; preds = %dsymv_64_.exit
  %614 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %2, {} addrspace(10)* %"'1", {} addrspace(10)* %3, {} addrspace(10)* %"'2"), !dbg !5676
  %615 = load i8, i8* %_cache327, align 1, !invariant.group !5690
  switch i8 %615, label %invertdsymv_64_.exit.loopexit [
    i8 0, label %invert5
    i8 1, label %invert11
    i8 2, label %invert.thread
  ]
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_gemv__1994({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", i32 zeroext "enzyme_inactive" %1, {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %3, {} addrspace(10)* align 16 %"'2", { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg) unnamed_addr #64 !dbg !5545 {
top:
  %_cache = alloca i8, align 1
  %value_phi67_cache = alloca i32, align 4
  %_cache41 = alloca i1, align 1
  %4 = call {}*** @julia.get_pgcstack() #67
  %arraysize = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 6, !dbg !5546
  br i1 true, label %L28, label %L22, !dbg !5548

L22:                                              ; preds = %top
  unreachable

L28:                                              ; preds = %top
  br i1 true, label %L38, label %L32, !dbg !5549

L32:                                              ; preds = %L28
  unreachable

L38:                                              ; preds = %L28
  %.not184 = icmp eq i64 %arraysize, 0, !dbg !5550
  store i8 0, i8* %_cache, align 1, !dbg !5551, !invariant.group !5552
  br i1 %.not184, label %common.ret, label %L41, !dbg !5551

common.ret:                                       ; preds = %L182.critedge, %L152.critedge, %L49.L61_crit_edge, %L38
  br label %invertcommon.ret, !dbg !5553

L41:                                              ; preds = %L38
  %.not185 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 7, !dbg !5554
  br i1 %.not185, label %L49.L61_crit_edge, label %L112, !dbg !5554

L49.L61_crit_edge:                                ; preds = %L41
  %"'ipc" = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !5555
  %"'ipc36" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc" to i8 addrspace(13)* addrspace(11)*, !dbg !5555
  %"arrayptr189.pre257'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc36", align 16, !dbg !5555, !tbaa !382, !alias.scope !5558, !noalias !5561
  %5 = shl nuw i64 %arraysize, 3, !dbg !5563
  store i8 1, i8* %_cache, align 1, !dbg !5553, !invariant.group !5552
  br label %common.ret, !dbg !5553

L112:                                             ; preds = %L41
  store i1 false, i1* %_cache41, align 1, !dbg !5564, !invariant.group !5566
  switch i32 %1, label %L228 [
    i32 1409286144, label %L152.critedge
    i32 1308622848, label %L152.critedge
    i32 1124073472, label %L152.critedge
    i32 1392508928, label %L182.critedge
    i32 1929379840, label %L182.critedge.fold.split
    i32 1207959552, label %L219.critedge
    i32 1744830464, label %L219.critedge.fold.split
  ], !dbg !5564

L152.critedge:                                    ; preds = %L112, %L112, %L112
  %tapeArg39 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 0, !dbg !5567
  %6 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 1, !dbg !5567
  %"'ip_phi" = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 2, !dbg !5567
  store i8 2, i8* %_cache, align 1, !invariant.group !5552
  br label %common.ret

L182.critedge.fold.split:                         ; preds = %L112
  store i1 true, i1* %_cache41, align 1, !dbg !5568, !invariant.group !5566
  br label %L182.critedge, !dbg !5568

L182.critedge:                                    ; preds = %L182.critedge.fold.split, %L112
  %value_phi67 = phi i32 [ 1275068416, %L182.critedge.fold.split ], [ 1426063360, %L112 ], !dbg !5568
  %tapeArg40 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 3, !dbg !5568
  %7 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 4, !dbg !5568
  %"'ip_phi3" = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 5, !dbg !5568
  store i8 3, i8* %_cache, align 1, !invariant.group !5552
  store i32 %value_phi67, i32* %value_phi67_cache, align 4, !invariant.group !5569
  br label %common.ret

L219.critedge.fold.split:                         ; preds = %L112
  unreachable

L219.critedge:                                    ; preds = %L112
  unreachable

L228:                                             ; preds = %L112
  unreachable

inverttop:                                        ; preds = %invertL28
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL28:                                        ; preds = %invertL38
  br label %inverttop

invertL38:                                        ; preds = %invertL41, %invertcommon.ret
  br label %invertL28

invertcommon.ret:                                 ; preds = %common.ret
  %8 = load i8, i8* %_cache, align 1, !invariant.group !5552
  switch i8 %8, label %invertL182.critedge [
    i8 0, label %invertL38
    i8 1, label %invertL49.L61_crit_edge
    i8 2, label %invertL152.critedge
  ]

invertL41:                                        ; preds = %invertL112, %invertL49.L61_crit_edge
  br label %invertL38

invertL49.L61_crit_edge:                          ; preds = %invertcommon.ret
  %_unwrap = shl nuw i64 %arraysize, 3, !dbg !5555
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !5555
  %"'ipc36_unwrap" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc_unwrap" to i8 addrspace(13)* addrspace(11)*, !dbg !5555
  %"arrayptr189.pre257'il_phi_unwrap" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc36_unwrap", align 16, !dbg !5555, !tbaa !382, !alias.scope !5558, !noalias !5561
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %"arrayptr189.pre257'il_phi_unwrap", i8 0, i64 %_unwrap, i1 false) #67, !dbg !5555, !tbaa !269, !noalias !5095
  br label %invertL41

invertL112:                                       ; preds = %invertL182.critedge, %invertL182.critedge.fold.split, %invertL152.critedge
  br label %invertL41

invertL152.critedge:                              ; preds = %invertcommon.ret
  %tapeArg39_unwrap = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 0, !dbg !5567
  call fastcc void @diffejulia_gemv__2035(i32 zeroext %1, {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %3, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* } %tapeArg39_unwrap), !dbg !5567
  br label %invertL112

invertL182.critedge.fold.split:                   ; preds = %invertL182.critedge
  br label %invertL112

invertL182.critedge:                              ; preds = %invertcommon.ret
  %9 = load i32, i32* %value_phi67_cache, align 4, !dbg !5568, !invariant.group !5569
  %tapeArg40_unwrap = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg, 3, !dbg !5568
  call fastcc void @diffejulia_symv__2024(i32 zeroext %9, {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %3, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* } %tapeArg40_unwrap), !dbg !5568
  %10 = load i1, i1* %_cache41, align 1, !invariant.group !5566
  br i1 %10, label %invertL182.critedge.fold.split, label %invertL112
}

; Function Attrs: mustprogress willreturn
define internal fastcc { double addrspace(13)* addrspace(10)*, i64, i64 } @augmented_julia_copyto_unaliased__1984.202({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) "enzyme_sret" %0, [1 x {} addrspace(10)*]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) "enzyme_inactive" "enzymejl_returnRoots" %1, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(40) %2, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'", {} addrspace(10)* nocapture noundef nonnull readonly align 16 dereferenceable(40) %3, {} addrspace(10)* nocapture align 16 %"'1") unnamed_addr #57 !dbg !5869 {
top:
  %4 = alloca { double addrspace(13)* addrspace(10)*, i64, i64 }, align 8
  %5 = getelementptr { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 }* %4, i64 0, i32 0
  %6 = bitcast double addrspace(13)* addrspace(10)** %5 to {} addrspace(10)**
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %"iv'ac" = alloca i64, align 8
  %7 = call {}*** @julia.get_pgcstack() #67
  %ptls_field29 = getelementptr inbounds {}**, {}*** %7, i64 2
  %8 = bitcast {}*** %ptls_field29 to i64***
  %ptls_load3031 = load i64**, i64*** %8, align 8, !tbaa !69, !alias.scope !5870, !noalias !5873
  %9 = getelementptr inbounds i64*, i64** %ptls_load3031, i64 2
  %safepoint = load i64*, i64** %9, align 8, !tbaa !73, !invariant.load !68, !alias.scope !5875, !noalias !5878
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #67, !dbg !5880
  fence syncscope("singlethread") seq_cst
  %10 = bitcast {} addrspace(10)* %3 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !5881
  %11 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %10 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !5881
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %11, i64 0, i32 1, !dbg !5881
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !5881, !tbaa !332, !range !87, !alias.scope !5884, !noalias !5887
  %12 = getelementptr inbounds { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 }* %4, i32 0, i32 1, !dbg !5889
  store i64 %arraylen, i64* %12, align 8, !dbg !5889
  %.not = icmp eq i64 %arraylen, 0, !dbg !5889
  br i1 %.not, label %L4, label %L5, !dbg !5883

common.ret:                                       ; preds = %L82, %L4
  %13 = load { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 }* %4, align 8, !dbg !5890
  ret { double addrspace(13)* addrspace(10)*, i64, i64 } %13, !dbg !5890

L4:                                               ; preds = %top
  %14 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 0, !dbg !5883
  %15 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %14, align 8, !dbg !5883, !alias.scope !5891, !noalias !5894
  %16 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %1, i64 0, i64 0, !dbg !5883
  store {} addrspace(10)* %15, {} addrspace(10)** %16, align 8, !dbg !5883, !noalias !5896
  %17 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %0 to i8*, !dbg !5883
  %18 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !5883
  call void @llvm.memcpy.p0i8.p11i8.i64(i8* nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) %17, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %18, i64 noundef 40, i1 noundef false) #67, !dbg !5883, !noalias !5896
  br label %common.ret

L5:                                               ; preds = %top
  %19 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 1, i32 0, i64 0, i64 0, !dbg !5899
  %unbox = load i64, i64 addrspace(11)* %19, align 8, !dbg !5909, !tbaa !73, !invariant.load !68, !alias.scope !5914, !noalias !5915
  %20 = icmp slt i64 %unbox, 1, !dbg !5916
  %21 = call i64 @llvm.smax.i64(i64 %unbox, i64 noundef 0) #67, !dbg !5918
  %22 = add nsw i64 %arraylen, -1, !dbg !5919
  %23 = icmp uge i64 %22, %21, !dbg !5916
  %24 = or i1 %20, %23, !dbg !5908
  br i1 %24, label %L85, label %L31.L44_crit_edge, !dbg !5908

L31.L44_crit_edge:                                ; preds = %L5
  %".phi.trans.insert'ipc" = bitcast {} addrspace(10)* %"'1" to double addrspace(13)* addrspace(10)*
  %.phi.trans.insert = bitcast {} addrspace(10)* %3 to double addrspace(13)* addrspace(10)*
  %".phi.trans.insert42'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert'ipc" to double addrspace(13)* addrspace(11)*
  %.phi.trans.insert42 = addrspacecast double addrspace(13)* addrspace(10)* %.phi.trans.insert to double addrspace(13)* addrspace(11)*
  %"arrayptr33.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert42'ipc", align 16, !dbg !5920, !tbaa !382, !alias.scope !5922, !noalias !5925
  %arrayptr33.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert42, align 16, !dbg !5920, !tbaa !382, !alias.scope !5926, !noalias !5887
  %".phi.trans.insert43'ipc" = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %"'" to double addrspace(13)* addrspace(10)* addrspace(11)*
  %.phi.trans.insert43 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to double addrspace(13)* addrspace(10)* addrspace(11)*
  %"getfield3436.pre'ipl" = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %".phi.trans.insert43'ipc" unordered, align 8, !dbg !5927, !tbaa !73, !alias.scope !5929, !noalias !5930
  %25 = getelementptr inbounds { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 }* %4, i32 0, i32 0, !dbg !5927
  store double addrspace(13)* addrspace(10)* %"getfield3436.pre'ipl", double addrspace(13)* addrspace(10)** %25, align 8, !dbg !5927
  %getfield3436.pre = load atomic double addrspace(13)* addrspace(10)*, double addrspace(13)* addrspace(10)* addrspace(11)* %.phi.trans.insert43 unordered, align 8, !dbg !5927, !tbaa !73, !invariant.load !68, !alias.scope !5914, !noalias !5915
  %.phi.trans.insert44 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 2
  %unbox17.pre = load i64, i64 addrspace(11)* %.phi.trans.insert44, align 8, !dbg !5931, !tbaa !73, !invariant.load !68, !alias.scope !5914, !noalias !5915
  %26 = getelementptr inbounds { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 }* %4, i32 0, i32 2
  store i64 %unbox17.pre, i64* %26, align 8
  %".phi.trans.insert45'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %"getfield3436.pre'ipl" to double addrspace(13)* addrspace(11)*
  %.phi.trans.insert45 = addrspacecast double addrspace(13)* addrspace(10)* %getfield3436.pre to double addrspace(13)* addrspace(11)*
  %"arrayptr1935.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert45'ipc", align 8, !dbg !5932, !tbaa !73, !alias.scope !5933, !noalias !5936
  %arrayptr1935.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert45, align 8, !dbg !5932, !tbaa !73, !invariant.load !68, !alias.scope !5938, !noalias !5939
  br label %L44, !dbg !5940

L44:                                              ; preds = %L44, %L31.L44_crit_edge
  %iv = phi i64 [ %iv.next, %L44 ], [ 0, %L31.L44_crit_edge ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5920
  %27 = add nsw i64 %iv.next, -1, !dbg !5920
  %28 = getelementptr inbounds double, double addrspace(13)* %arrayptr33.pre, i64 %27, !dbg !5920
  %arrayref = load double, double addrspace(13)* %28, align 8, !dbg !5920, !tbaa !269, !alias.scope !5941, !noalias !5944
  %29 = add i64 %27, %unbox17.pre, !dbg !5932
  %30 = getelementptr inbounds double, double addrspace(13)* %arrayptr1935.pre, i64 %29, !dbg !5932
  store double %arrayref, double addrspace(13)* %30, align 8, !dbg !5932, !tbaa !269, !alias.scope !5946, !noalias !5949
  %.not37 = icmp eq i64 %iv.next, %arraylen, !dbg !5951
  br i1 %.not37, label %L82, label %L44, !dbg !5954

L82:                                              ; preds = %L44
  %31 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2, i64 0, i32 0, !dbg !5955
  %32 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %31, align 8, !dbg !5955, !alias.scope !5891, !noalias !5894
  %33 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %1, i64 0, i64 0, !dbg !5955
  store {} addrspace(10)* %32, {} addrspace(10)** %33, align 8, !dbg !5955, !noalias !5896
  %34 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %0 to i8*, !dbg !5955
  %35 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !5955
  call void @llvm.memcpy.p0i8.p11i8.i64(i8* nocapture nofree noundef nonnull writeonly align 8 dereferenceable(40) %34, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %35, i64 noundef 40, i1 noundef false) #67, !dbg !5955, !noalias !5896
  br label %common.ret

L85:                                              ; preds = %L5
  %current_task2438 = getelementptr inbounds {}**, {}*** %7, i64 -14, !dbg !5908
  %current_task24 = bitcast {}*** %current_task2438 to {}**, !dbg !5908
  %box = call noalias nonnull dereferenceable(40) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 noundef 40, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4359181264 to {}*) to {} addrspace(10)*)) #68, !dbg !5908
  %36 = bitcast {} addrspace(10)* %box to i8 addrspace(10)*, !dbg !5908
  %37 = bitcast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* %2 to i8 addrspace(11)*, !dbg !5908
  call void @llvm.memcpy.p10i8.p11i8.i64(i8 addrspace(10)* nocapture nofree noundef nonnull align 8 dereferenceable(40) %36, i8 addrspace(11)* nofree noundef nonnull align 8 dereferenceable(40) %37, i64 noundef 40, i1 noundef false) #67, !dbg !5908, !tbaa !86, !alias.scope !315, !noalias !5956
  %box26 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task24, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5179920144 to {}*) to {} addrspace(10)*)) #68, !dbg !5908
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box26 to i64 addrspace(10)*, !dbg !5908
  store i64 %arraylen, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !5908, !tbaa !113, !alias.scope !117, !noalias !5957
  %38 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5166733984 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5205578368 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* nonnull %box26) #69, !dbg !5908
  %39 = addrspacecast {} addrspace(10)* %38 to {} addrspace(12)*, !dbg !5908
  call void @ijl_throw({} addrspace(12)* %39) #70, !dbg !5908
  unreachable, !dbg !5908
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_copyto_unaliased__1984.203({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* noalias nocapture nofree writeonly align 8 dereferenceable(40) "enzyme_sret" %0, [1 x {} addrspace(10)*]* noalias nocapture nofree writeonly align 8 dereferenceable(8) "enzyme_inactive" "enzymejl_returnRoots" %1, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree readonly align 8 dereferenceable(40) %2, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'", {} addrspace(10)* nocapture readonly align 16 dereferenceable(40) %3, {} addrspace(10)* nocapture align 16 %"'1", { double addrspace(13)* addrspace(10)*, i64, i64 } %tapeArg) unnamed_addr #57 !dbg !5958 {
top:
  %"iv'ac" = alloca i64, align 8
  %"arrayref'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %5 = call {}*** @julia.get_pgcstack() #67
  %arraylen = extractvalue { double addrspace(13)* addrspace(10)*, i64, i64 } %tapeArg, 1, !dbg !5959
  %.not = icmp eq i64 %arraylen, 0, !dbg !5959
  br i1 %.not, label %L4, label %L5, !dbg !5961

common.ret:                                       ; preds = %L82, %L4
  br label %invertcommon.ret, !dbg !5962

L4:                                               ; preds = %top
  br label %common.ret

L5:                                               ; preds = %top
  %6 = add nsw i64 %arraylen, -1, !dbg !5963
  br i1 false, label %L85, label %L31.L44_crit_edge, !dbg !5966

L31.L44_crit_edge:                                ; preds = %L5
  %".phi.trans.insert'ipc" = bitcast {} addrspace(10)* %"'1" to double addrspace(13)* addrspace(10)*
  %".phi.trans.insert42'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr33.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert42'ipc", align 16, !dbg !5967, !tbaa !382, !alias.scope !5969, !noalias !5972, !invariant.group !5974
  %"getfield3436.pre'il_phi" = extractvalue { double addrspace(13)* addrspace(10)*, i64, i64 } %tapeArg, 0, !dbg !5975
  %unbox17.pre = extractvalue { double addrspace(13)* addrspace(10)*, i64, i64 } %tapeArg, 2
  %".phi.trans.insert45'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %"getfield3436.pre'il_phi" to double addrspace(13)* addrspace(11)*
  %"arrayptr1935.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert45'ipc", align 8, !dbg !5977, !tbaa !73, !alias.scope !5978, !noalias !5981, !invariant.group !5983
  br label %L44, !dbg !5984

L44:                                              ; preds = %L44, %L31.L44_crit_edge
  %iv = phi i64 [ %iv.next, %L44 ], [ 0, %L31.L44_crit_edge ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !5967
  %7 = add nsw i64 %iv.next, -1, !dbg !5967
  %"'ipg19" = getelementptr inbounds double, double addrspace(13)* %"arrayptr33.pre'ipl", i64 %7, !dbg !5967
  %8 = add i64 %7, %unbox17.pre, !dbg !5977
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr1935.pre'ipl", i64 %8, !dbg !5977
  %.not37 = icmp eq i64 %iv.next, %arraylen, !dbg !5985
  br i1 %.not37, label %L82, label %L44, !dbg !5988

L82:                                              ; preds = %L44
  br label %common.ret

L85:                                              ; preds = %L5
  unreachable

inverttop:                                        ; preds = %invertL5, %invertL4
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertcommon.ret:                                 ; preds = %common.ret
  br i1 %.not, label %invertL4, label %invertL82

invertL4:                                         ; preds = %invertcommon.ret
  br label %inverttop

invertL5:                                         ; preds = %invertL31.L44_crit_edge
  br label %inverttop

invertL31.L44_crit_edge:                          ; preds = %invertL44
  br label %invertL5

invertL44:                                        ; preds = %mergeinvertL44_L82, %incinvertL44
  %9 = load i64, i64* %"iv'ac", align 8, !dbg !5977
  %"getfield3436.pre'il_phi_unwrap" = extractvalue { double addrspace(13)* addrspace(10)*, i64, i64 } %tapeArg, 0, !dbg !5977
  %".phi.trans.insert45'ipc_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"getfield3436.pre'il_phi_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !5977
  %"arrayptr1935.pre'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert45'ipc_unwrap", align 8, !dbg !5977, !tbaa !73, !alias.scope !5978, !noalias !5981, !invariant.group !5983
  %iv.next_unwrap = add nuw nsw i64 %9, 1, !dbg !5977
  %_unwrap = add nsw i64 %iv.next_unwrap, -1, !dbg !5977
  %unbox17.pre_unwrap = extractvalue { double addrspace(13)* addrspace(10)*, i64, i64 } %tapeArg, 2, !dbg !5989
  %_unwrap17 = add i64 %_unwrap, %unbox17.pre_unwrap, !dbg !5977
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr1935.pre'ipl_unwrap", i64 %_unwrap17, !dbg !5977
  %10 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !5977, !tbaa !269, !alias.scope !5990, !noalias !5993
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !5977, !tbaa !269, !alias.scope !5990, !noalias !5993
  %11 = load double, double* %"arrayref'de", align 8, !dbg !5977
  %12 = fadd fast double %11, %10, !dbg !5977
  store double %12, double* %"arrayref'de", align 8, !dbg !5977
  %13 = load double, double* %"arrayref'de", align 8, !dbg !5967
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !5967
  %14 = load i64, i64* %"iv'ac", align 8, !dbg !5967
  %".phi.trans.insert'ipc_unwrap" = bitcast {} addrspace(10)* %"'1" to double addrspace(13)* addrspace(10)*, !dbg !5967
  %".phi.trans.insert42'ipc_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !5967
  %"arrayptr33.pre'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert42'ipc_unwrap", align 16, !dbg !5967, !tbaa !382, !alias.scope !5969, !noalias !5972, !invariant.group !5974
  %"'ipg19_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr33.pre'ipl_unwrap", i64 %_unwrap, !dbg !5967
  %15 = load double, double addrspace(13)* %"'ipg19_unwrap", align 8, !dbg !5967, !tbaa !269, !alias.scope !5995, !noalias !5998
  %16 = fadd fast double %15, %13, !dbg !5967
  store double %16, double addrspace(13)* %"'ipg19_unwrap", align 8, !dbg !5967, !tbaa !269, !alias.scope !5995, !noalias !5998
  %17 = load i64, i64* %"iv'ac", align 8
  %18 = icmp eq i64 %17, 0
  %19 = xor i1 %18, true
  br i1 %18, label %invertL31.L44_crit_edge, label %incinvertL44

incinvertL44:                                     ; preds = %invertL44
  %20 = load i64, i64* %"iv'ac", align 8
  %21 = add nsw i64 %20, -1
  store i64 %21, i64* %"iv'ac", align 8
  br label %invertL44

invertL82:                                        ; preds = %invertcommon.ret
  %_unwrap26 = add nsw i64 %arraylen, -1
  br label %mergeinvertL44_L82

mergeinvertL44_L82:                               ; preds = %invertL82
  store i64 %_unwrap26, i64* %"iv'ac", align 8
  br label %invertL44
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia___2044({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1) unnamed_addr #67 !dbg !6130 {
top:
  %2 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) i8* @malloc(i64 8), !enzyme_fromstack !306
  %newstruct26 = bitcast i8* %2 to [1 x [1 x i64]]*, !enzyme_caststack !68
  %3 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) i8* @malloc(i64 8), !enzyme_fromstack !306
  %newstruct86 = bitcast i8* %3 to [1 x [1 x i64]]*, !enzyme_caststack !68
  %4 = call {}*** @julia.get_pgcstack() #68
  %ptls_field105 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field105 to i64***
  %ptls_load106107 = load i64**, i64*** %5, align 8, !tbaa !69
  %6 = getelementptr inbounds i64*, i64** %ptls_load106107, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #68, !dbg !6131
  fence syncscope("singlethread") seq_cst
  %7 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6132
  %8 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %7 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6132
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %8, i64 0, i32 1, !dbg !6132
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6132, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %9 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6132
  %10 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %9 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6132
  %arraylen_ptr3 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %10, i64 0, i32 1, !dbg !6132
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr3, align 8, !dbg !6132, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not = icmp eq i64 %arraylen, %arraylen4, !dbg !6136
  br i1 %.not, label %L50, label %L15, !dbg !6139

L15:                                              ; preds = %top
  %current_task7108 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !6140
  %current_task7 = bitcast {}*** %current_task7108 to {}**, !dbg !6140
  %box = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task7, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187409184 to {}*) to {} addrspace(10)*)) #69, !dbg !6140
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box to i64 addrspace(10)*, !dbg !6140
  store i64 %arraylen, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !6140, !tbaa !113, !alias.scope !117, !noalias !6141
  %box9 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task7, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187409184 to {}*) to {} addrspace(10)*)) #69, !dbg !6140
  %memcpy_refined_dst11 = bitcast {} addrspace(10)* %box9 to i64 addrspace(10)*, !dbg !6140
  store i64 %arraylen4, i64 addrspace(10)* %memcpy_refined_dst11, align 8, !dbg !6140, !tbaa !113, !alias.scope !117, !noalias !6141
  %11 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5184905104 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5139351968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972800 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972768 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box9, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972736 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346233184 to {}*) to {} addrspace(10)*)) #70, !dbg !6140
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task7, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #69, !dbg !6140
  %12 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !6140
  %13 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %12, i64 0, i64 0, !dbg !6140
  store {} addrspace(10)* %11, {} addrspace(10)* addrspace(10)* %13, align 8, !dbg !6140, !tbaa !113, !alias.scope !117, !noalias !6141
  %14 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !6140
  call void @ijl_throw({} addrspace(12)* %14) #68, !dbg !6140
  unreachable, !dbg !6140

L50:                                              ; preds = %top
  %memcpy_refined_dst28 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct26, i64 0, i64 0, i64 0, !dbg !6144
  store i64 %arraylen, i64* %memcpy_refined_dst28, align 8, !dbg !6144, !tbaa !133, !alias.scope !135, !noalias !6151
  %15 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraylen) #71, !dbg !6152
  %16 = bitcast {} addrspace(10)* %15 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6160
  %17 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %16 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6160
  %arraylen_ptr33 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %17, i64 0, i32 1, !dbg !6160
  %arraylen34 = load i64, i64 addrspace(11)* %arraylen_ptr33, align 8, !dbg !6160, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not111 = icmp eq i64 %arraylen34, %arraylen, !dbg !6164
  br i1 %.not111, label %L96, label %L193, !dbg !6162

L96:                                              ; preds = %L50
  %18 = addrspacecast {} addrspace(10)* %15 to {} addrspace(11)*, !dbg !6168
  %19 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !6168
  %.not112 = icmp eq {} addrspace(11)* %18, %19, !dbg !6168
  br i1 %.not112, label %L112, label %L99, !dbg !6168

L99:                                              ; preds = %L96
  %20 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %18) #72, !dbg !6173
  %21 = bitcast {}* %20 to i8**, !dbg !6173
  %arrayptr78 = load i8*, i8** %21, align 8, !dbg !6173, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %22 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %19) #72, !dbg !6173
  %23 = bitcast {}* %22 to i8**, !dbg !6173
  %arrayptr80 = load i8*, i8** %23, align 8, !dbg !6173, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %.not123.not = icmp eq i8* %arrayptr78, %arrayptr80, !dbg !6178
  br i1 %.not123.not, label %L107, label %L112, !dbg !6177

L107:                                             ; preds = %L99
  %24 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %0) #68, !dbg !6181
  %.phi.trans.insert = bitcast {} addrspace(10)* %24 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert141 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr38.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert141, i64 0, i32 1
  %arraylen39.pre = load i64, i64 addrspace(11)* %arraylen_ptr38.phi.trans.insert, align 8, !dbg !6183, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  br label %L112, !dbg !6187

L112:                                             ; preds = %L107, %L99, %L96
  %arraylen39 = phi i64 [ %arraylen39.pre, %L107 ], [ %arraylen, %L96 ], [ %arraylen, %L99 ], !dbg !6183
  %value_phi37 = phi {} addrspace(10)* [ %24, %L107 ], [ %0, %L96 ], [ %0, %L99 ]
  %.not116 = icmp eq i64 %arraylen39, 1, !dbg !6194
  %25 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !6198
  %.not113 = icmp eq {} addrspace(11)* %18, %25, !dbg !6198
  br i1 %.not113, label %L137, label %L124, !dbg !6198

L124:                                             ; preds = %L112
  %26 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %18) #72, !dbg !6201
  %27 = bitcast {}* %26 to i8**, !dbg !6201
  %arrayptr73 = load i8*, i8** %27, align 8, !dbg !6201, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %28 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %25) #72, !dbg !6201
  %29 = bitcast {}* %28 to i8**, !dbg !6201
  %arrayptr75 = load i8*, i8** %29, align 8, !dbg !6201, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %.not122.not = icmp eq i8* %arrayptr73, %arrayptr75, !dbg !6206
  br i1 %.not122.not, label %L132, label %L137, !dbg !6205

L132:                                             ; preds = %L124
  %30 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %1) #68, !dbg !6209
  %.pre = bitcast {} addrspace(10)* %30 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6211
  %.pre145 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.pre to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6211
  br label %L137, !dbg !6187

L137:                                             ; preds = %L132, %L124, %L112
  %nodecayed..pre-phi146 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %.pre, %L132 ], [ %9, %L112 ], [ %9, %L124 ], !dbg !6211
  %value_phi42 = phi {} addrspace(10)* [ %30, %L132 ], [ %1, %L112 ], [ %1, %L124 ]
  %31 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi146 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6211
  %arraylen_ptr43 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %31, i64 0, i32 1, !dbg !6211
  %arraylen44 = load i64, i64 addrspace(11)* %arraylen_ptr43, align 8, !dbg !6211, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not118 = icmp eq i64 %arraylen44, 1, !dbg !6215
  %.not114 = icmp eq i64 %arraylen, 0, !dbg !6219
  br i1 %.not114, label %L203, label %L187.lr.ph, !dbg !6220

L187.lr.ph:                                       ; preds = %L137
  %32 = bitcast {} addrspace(10)* %value_phi37 to double addrspace(13)* addrspace(10)*
  %33 = addrspacecast double addrspace(13)* addrspace(10)* %32 to double addrspace(13)* addrspace(11)*
  %arrayptr117 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %33, align 8, !tbaa !382, !alias.scope !6222, !noalias !336, !nonnull !68
  %34 = bitcast {} addrspace(10)* %value_phi42 to double addrspace(13)* addrspace(10)*
  %35 = addrspacecast double addrspace(13)* addrspace(10)* %34 to double addrspace(13)* addrspace(11)*
  %arrayptr53119 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %35, align 8, !tbaa !382, !alias.scope !6222, !noalias !336, !nonnull !68
  %36 = bitcast {} addrspace(10)* %15 to double addrspace(13)* addrspace(10)*
  %37 = addrspacecast double addrspace(13)* addrspace(10)* %36 to double addrspace(13)* addrspace(11)*
  %arrayptr56120 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %37, align 8, !tbaa !382, !alias.scope !6222, !noalias !336, !nonnull !68
  br label %L187, !dbg !6223

L187:                                             ; preds = %L187, %L187.lr.ph
  %iv = phi i64 [ %iv.next, %L187 ], [ 0, %L187.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6224
  %38 = select i1 %.not116, i64 0, i64 %iv, !dbg !6224
  %39 = getelementptr inbounds double, double addrspace(13)* %arrayptr117, i64 %38, !dbg !6224
  %arrayref = load double, double addrspace(13)* %39, align 8, !dbg !6224, !tbaa !269, !alias.scope !117, !noalias !271
  %40 = select i1 %.not118, i64 0, i64 %iv, !dbg !6231
  %41 = getelementptr inbounds double, double addrspace(13)* %arrayptr53119, i64 %40, !dbg !6231
  %arrayref54 = load double, double addrspace(13)* %41, align 8, !dbg !6231, !tbaa !269, !alias.scope !117, !noalias !271
  %42 = fsub double %arrayref, %arrayref54, !dbg !6234
  %43 = getelementptr inbounds double, double addrspace(13)* %arrayptr56120, i64 %iv, !dbg !6237
  store double %42, double addrspace(13)* %43, align 8, !dbg !6237, !tbaa !269, !alias.scope !117, !noalias !6141
  %exitcond.not = icmp eq i64 %iv.next, %arraylen, !dbg !6238
  br i1 %exitcond.not, label %L203.loopexit, label %L187, !dbg !6223, !llvm.loop !6239

L193:                                             ; preds = %L50
  %44 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct86, i64 0, i64 0, i64 0, !dbg !6240
  store i64 %arraylen34, i64* %44, align 8, !dbg !6240, !tbaa !133, !alias.scope !135, !noalias !6151
  %45 = addrspacecast [1 x [1 x i64]]* %newstruct86 to [1 x [1 x i64]] addrspace(11)*, !dbg !6162
  %46 = addrspacecast [1 x [1 x i64]]* %newstruct26 to [1 x [1 x i64]] addrspace(11)*, !dbg !6162
  call fastcc void @julia_throwdm_1978([1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %45, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %46) #73, !dbg !6162
  unreachable, !dbg !6162

L203.loopexit:                                    ; preds = %L187
  br label %L203, !dbg !6244

L203:                                             ; preds = %L203.loopexit, %L137
  %arraylen61 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6244, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %arraylen64 = load i64, i64 addrspace(11)* %arraylen_ptr3, align 8, !dbg !6244, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %47 = icmp eq i64 %arraylen64, %arraylen61, !dbg !6250
  %48 = icmp eq i64 %arraylen61, 1, !dbg !6252
  %value_phi66.in = or i1 %48, %47, !dbg !6252
  %49 = icmp eq i64 %arraylen64, 1
  %or.cond = or i1 %49, %value_phi66.in, !dbg !6253
  br i1 %or.cond, label %L235, label %L225, !dbg !6253

L225:                                             ; preds = %L203
  %50 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen61) #71, !dbg !6253
  %51 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen64) #71, !dbg !6253
  %52 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5184092592 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5139351968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5228993744 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %50, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5228993712 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %51) #70, !dbg !6253
  %current_task68121 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !6253
  %current_task68 = bitcast {}*** %current_task68121 to {}**, !dbg !6253
  %box69 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task68, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #69, !dbg !6253
  %53 = bitcast {} addrspace(10)* %box69 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !6253
  %54 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %53, i64 0, i64 0, !dbg !6253
  store {} addrspace(10)* %52, {} addrspace(10)* addrspace(10)* %54, align 8, !dbg !6253, !tbaa !113, !alias.scope !117, !noalias !6141
  %55 = addrspacecast {} addrspace(10)* %box69 to {} addrspace(12)*, !dbg !6253
  call void @ijl_throw({} addrspace(12)* %55) #68, !dbg !6253
  unreachable, !dbg !6253

L235:                                             ; preds = %L203
  ret {} addrspace(10)* %15, !dbg !6150
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2044({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1") unnamed_addr #67 !dbg !6256 {
top:
  %2 = alloca { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %3 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 0
  %4 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i64 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i64 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %"iv'ac" = alloca i64, align 8
  %newstruct86 = alloca [1 x [1 x i64]], i64 1, align 8
  %10 = bitcast [1 x [1 x i64]]* %newstruct86 to i8*
  %newstruct26 = alloca [1 x [1 x i64]], i64 1, align 8
  %11 = bitcast [1 x [1 x i64]]* %newstruct26 to i8*
  %12 = bitcast i8* %11 to [1 x [1 x i64]]*, !enzyme_caststack !68
  %13 = bitcast i8* %10 to [1 x [1 x i64]]*, !enzyme_caststack !68
  %14 = call {}*** @julia.get_pgcstack() #68
  %ptls_field105 = getelementptr inbounds {}**, {}*** %14, i64 2
  %15 = bitcast {}*** %ptls_field105 to i64***
  %ptls_load106107 = load i64**, i64*** %15, align 8, !tbaa !69, !alias.scope !6257, !noalias !6260
  %16 = getelementptr inbounds i64*, i64** %ptls_load106107, i64 2
  %safepoint = load i64*, i64** %16, align 8, !tbaa !73, !invariant.load !68, !alias.scope !6262, !noalias !6265
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #68, !dbg !6267
  fence syncscope("singlethread") seq_cst
  %17 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6268
  %18 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6268
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %18, i64 0, i32 1, !dbg !6268
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6268, !tbaa !332, !range !87, !alias.scope !6272, !noalias !6275
  %19 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 6, !dbg !6268
  store i64 %arraylen, i64* %19, align 8, !dbg !6268
  %20 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6268
  %21 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %20 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6268
  %arraylen_ptr3 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %21, i64 0, i32 1, !dbg !6268
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr3, align 8, !dbg !6268, !tbaa !332, !range !87, !alias.scope !6277, !noalias !6280
  %.not = icmp eq i64 %arraylen, %arraylen4, !dbg !6282
  br i1 %.not, label %L50, label %L15, !dbg !6285

L15:                                              ; preds = %top
  %current_task7108 = getelementptr inbounds {}**, {}*** %14, i64 -14, !dbg !6286
  %current_task7 = bitcast {}*** %current_task7108 to {}**, !dbg !6286
  %box = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task7, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187409184 to {}*) to {} addrspace(10)*)) #69, !dbg !6286
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box to i64 addrspace(10)*, !dbg !6286
  store i64 %arraylen, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !6286, !tbaa !113, !alias.scope !117, !noalias !6287
  %box9 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task7, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187409184 to {}*) to {} addrspace(10)*)) #69, !dbg !6286
  %memcpy_refined_dst11 = bitcast {} addrspace(10)* %box9 to i64 addrspace(10)*, !dbg !6286
  store i64 %arraylen4, i64 addrspace(10)* %memcpy_refined_dst11, align 8, !dbg !6286, !tbaa !113, !alias.scope !117, !noalias !6287
  %22 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5184905104 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5139351968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972800 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972768 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box9, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972736 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346233184 to {}*) to {} addrspace(10)*)) #70, !dbg !6286
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task7, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #69, !dbg !6286
  %23 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !6286
  %24 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %23, i64 0, i64 0, !dbg !6286
  store {} addrspace(10)* %22, {} addrspace(10)* addrspace(10)* %24, align 8, !dbg !6286, !tbaa !113, !alias.scope !117, !noalias !6287
  %25 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !6286
  call void @ijl_throw({} addrspace(12)* %25) #68, !dbg !6286
  unreachable, !dbg !6286

L50:                                              ; preds = %top
  %memcpy_refined_dst28 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %12, i64 0, i64 0, i64 0, !dbg !6290
  store i64 %arraylen, i64* %memcpy_refined_dst28, align 8, !dbg !6290, !tbaa !133, !alias.scope !135, !noalias !6297
  %26 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraylen), !dbg !6298
  %27 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 0, !dbg !6298
  store {} addrspace(10)* %26, {} addrspace(10)** %27, align 8, !dbg !6298
  %28 = mul i64 %arraylen, 8, !dbg !6298
  %29 = bitcast {} addrspace(10)* %26 to i8 addrspace(13)* addrspace(10)*, !dbg !6298
  %30 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %29, align 8, !dbg !6298
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %30, i8 0, i64 %28, i1 false), !dbg !6298
  %31 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraylen) #71, !dbg !6298
  %32 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 1, !dbg !6306
  store {} addrspace(10)* %31, {} addrspace(10)** %32, align 8, !dbg !6306
  %33 = bitcast {} addrspace(10)* %31 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6306
  %34 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %33 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6306
  %arraylen_ptr33 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %34, i64 0, i32 1, !dbg !6306
  %arraylen34 = load i64, i64 addrspace(11)* %arraylen_ptr33, align 8, !dbg !6306, !tbaa !332, !range !87, !alias.scope !6310, !noalias !6313
  %.not111 = icmp eq i64 %arraylen34, %arraylen, !dbg !6315
  br i1 %.not111, label %L96, label %L193, !dbg !6308

L96:                                              ; preds = %L50
  %35 = addrspacecast {} addrspace(10)* %31 to {} addrspace(11)*, !dbg !6319
  %36 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !6319
  %.not112 = icmp eq {} addrspace(11)* %35, %36, !dbg !6319
  br i1 %.not112, label %L112, label %L99, !dbg !6319

L99:                                              ; preds = %L96
  %37 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %35) #72, !dbg !6324
  %38 = bitcast {}* %37 to i8**, !dbg !6324
  %arrayptr78 = load i8*, i8** %38, align 8, !dbg !6324, !tbaa !382, !alias.scope !6310, !noalias !6313, !nonnull !68
  %39 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %36) #72, !dbg !6324
  %40 = bitcast {}* %39 to i8**, !dbg !6324
  %arrayptr80 = load i8*, i8** %40, align 8, !dbg !6324, !tbaa !382, !alias.scope !6272, !noalias !6275, !nonnull !68
  %.not123.not = icmp eq i8* %arrayptr78, %arrayptr80, !dbg !6329
  %41 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 7, !dbg !6328
  store i1 %.not123.not, i1* %41, align 1, !dbg !6328
  br i1 %.not123.not, label %L107, label %L112, !dbg !6328

L107:                                             ; preds = %L99
  %42 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'"), !dbg !6332
  %43 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 2, !dbg !6332
  store {} addrspace(10)* %42, {} addrspace(10)** %43, align 8, !dbg !6332
  %44 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !6332
  %45 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %44, i32 0, i32 3, !dbg !6332
  %46 = load i16, i16 addrspace(10)* %45, align 2, !dbg !6332
  %47 = zext i16 %46 to i64, !dbg !6332
  %48 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !6332
  %49 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %48, i32 0, i32 1, !dbg !6332
  %50 = load i64, i64 addrspace(10)* %49, align 8, !dbg !6332
  %51 = mul i64 %50, %47, !dbg !6332
  %52 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !6332
  %53 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %52, align 8, !dbg !6332
  %54 = bitcast {} addrspace(10)* %42 to i8 addrspace(13)* addrspace(10)*, !dbg !6332
  %55 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %54, align 8, !dbg !6332
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %55, i8 0, i64 %51, i1 false), !dbg !6332
  %56 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %0) #68, !dbg !6332
  %57 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 3
  store {} addrspace(10)* %56, {} addrspace(10)** %57, align 8
  %.phi.trans.insert = bitcast {} addrspace(10)* %56 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert141 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr38.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert141, i64 0, i32 1
  %arraylen39.pre = load i64, i64 addrspace(11)* %arraylen_ptr38.phi.trans.insert, align 8, !dbg !6334, !tbaa !332, !range !87, !alias.scope !6338, !noalias !6341
  br label %L112, !dbg !6343

L112:                                             ; preds = %L107, %L99, %L96
  %arraylen39 = phi i64 [ %arraylen39.pre, %L107 ], [ %arraylen, %L96 ], [ %arraylen, %L99 ], !dbg !6334
  %58 = phi {} addrspace(10)* [ %42, %L107 ], [ %"'", %L96 ], [ %"'", %L99 ]
  %value_phi37 = phi {} addrspace(10)* [ %56, %L107 ], [ %0, %L96 ], [ %0, %L99 ]
  %.not116 = icmp eq i64 %arraylen39, 1, !dbg !6350
  %59 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 8, !dbg !6354
  store i1 %.not116, i1* %59, align 1, !dbg !6354
  %60 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !6354
  %.not113 = icmp eq {} addrspace(11)* %35, %60, !dbg !6354
  br i1 %.not113, label %L137, label %L124, !dbg !6354

L124:                                             ; preds = %L112
  %61 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %35) #72, !dbg !6357
  %62 = bitcast {}* %61 to i8**, !dbg !6357
  %arrayptr73 = load i8*, i8** %62, align 8, !dbg !6357, !tbaa !382, !alias.scope !6310, !noalias !6313, !nonnull !68
  %63 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %60) #72, !dbg !6357
  %64 = bitcast {}* %63 to i8**, !dbg !6357
  %arrayptr75 = load i8*, i8** %64, align 8, !dbg !6357, !tbaa !382, !alias.scope !6277, !noalias !6280, !nonnull !68
  %.not122.not = icmp eq i8* %arrayptr73, %arrayptr75, !dbg !6362
  %65 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 9, !dbg !6361
  store i1 %.not122.not, i1* %65, align 1, !dbg !6361
  br i1 %.not122.not, label %L132, label %L137, !dbg !6361

L132:                                             ; preds = %L124
  %66 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'1"), !dbg !6365
  %67 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 4, !dbg !6365
  store {} addrspace(10)* %66, {} addrspace(10)** %67, align 8, !dbg !6365
  %68 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !6365
  %69 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %68, i32 0, i32 3, !dbg !6365
  %70 = load i16, i16 addrspace(10)* %69, align 2, !dbg !6365
  %71 = zext i16 %70 to i64, !dbg !6365
  %72 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !6365
  %73 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %72, i32 0, i32 1, !dbg !6365
  %74 = load i64, i64 addrspace(10)* %73, align 8, !dbg !6365
  %75 = mul i64 %74, %71, !dbg !6365
  %76 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !6365
  %77 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %76, align 8, !dbg !6365
  %78 = bitcast {} addrspace(10)* %66 to i8 addrspace(13)* addrspace(10)*, !dbg !6365
  %79 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %78, align 8, !dbg !6365
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %79, i8 0, i64 %75, i1 false), !dbg !6365
  %80 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %1) #68, !dbg !6365
  %81 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 5, !dbg !6367
  store {} addrspace(10)* %80, {} addrspace(10)** %81, align 8, !dbg !6367
  %.pre = bitcast {} addrspace(10)* %80 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6367
  br label %L137, !dbg !6343

L137:                                             ; preds = %L132, %L124, %L112
  %nodecayed..pre-phi146 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %.pre, %L132 ], [ %20, %L112 ], [ %20, %L124 ], !dbg !6367
  %82 = phi {} addrspace(10)* [ %66, %L132 ], [ %"'1", %L112 ], [ %"'1", %L124 ]
  %value_phi42 = phi {} addrspace(10)* [ %80, %L132 ], [ %1, %L112 ], [ %1, %L124 ]
  %83 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi146 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6367
  %arraylen_ptr43 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %83, i64 0, i32 1, !dbg !6367
  %arraylen44 = load i64, i64 addrspace(11)* %arraylen_ptr43, align 8, !dbg !6367, !tbaa !332, !range !87, !alias.scope !6371, !noalias !6374
  %.not118 = icmp eq i64 %arraylen44, 1, !dbg !6376
  %84 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }* %3, i32 0, i32 10, !dbg !6380
  store i1 %.not118, i1* %84, align 1, !dbg !6380
  %.not114 = icmp eq i64 %arraylen, 0, !dbg !6380
  br i1 %.not114, label %L203, label %L187.lr.ph, !dbg !6381

L187.lr.ph:                                       ; preds = %L137
  %"'ipc10" = bitcast {} addrspace(10)* %58 to double addrspace(13)* addrspace(10)*
  %85 = bitcast {} addrspace(10)* %value_phi37 to double addrspace(13)* addrspace(10)*
  %"'ipc11" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc10" to double addrspace(13)* addrspace(11)*
  %86 = addrspacecast double addrspace(13)* addrspace(10)* %85 to double addrspace(13)* addrspace(11)*
  %"arrayptr117'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc11", align 8, !tbaa !382, !alias.scope !6383, !noalias !6388, !nonnull !68
  %arrayptr117 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %86, align 8, !tbaa !382, !alias.scope !6390, !noalias !6391, !nonnull !68
  %"'ipc8" = bitcast {} addrspace(10)* %82 to double addrspace(13)* addrspace(10)*
  %87 = bitcast {} addrspace(10)* %value_phi42 to double addrspace(13)* addrspace(10)*
  %"'ipc9" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc8" to double addrspace(13)* addrspace(11)*
  %88 = addrspacecast double addrspace(13)* addrspace(10)* %87 to double addrspace(13)* addrspace(11)*
  %"arrayptr53119'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc9", align 8, !tbaa !382, !alias.scope !6392, !noalias !6395, !nonnull !68
  %arrayptr53119 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %88, align 8, !tbaa !382, !alias.scope !6397, !noalias !6398, !nonnull !68
  %"'ipc" = bitcast {} addrspace(10)* %26 to double addrspace(13)* addrspace(10)*
  %89 = bitcast {} addrspace(10)* %31 to double addrspace(13)* addrspace(10)*
  %"'ipc7" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %90 = addrspacecast double addrspace(13)* addrspace(10)* %89 to double addrspace(13)* addrspace(11)*
  %"arrayptr56120'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc7", align 8, !tbaa !382, !alias.scope !6399, !noalias !6400, !nonnull !68
  %arrayptr56120 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %90, align 8, !tbaa !382, !alias.scope !6401, !noalias !6313, !nonnull !68
  %91 = add nsw i64 %arraylen, -1, !dbg !6402
  br label %L187, !dbg !6402

L187:                                             ; preds = %L187, %L187.lr.ph
  %iv = phi i64 [ %iv.next, %L187 ], [ 0, %L187.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6403
  %92 = select i1 %.not116, i64 0, i64 %iv, !dbg !6403
  %93 = getelementptr inbounds double, double addrspace(13)* %arrayptr117, i64 %92, !dbg !6403
  %arrayref = load double, double addrspace(13)* %93, align 8, !dbg !6403, !tbaa !269, !alias.scope !6410, !noalias !6413
  %94 = select i1 %.not118, i64 0, i64 %iv, !dbg !6415
  %95 = getelementptr inbounds double, double addrspace(13)* %arrayptr53119, i64 %94, !dbg !6415
  %arrayref54 = load double, double addrspace(13)* %95, align 8, !dbg !6415, !tbaa !269, !alias.scope !6418, !noalias !6421
  %96 = fsub double %arrayref, %arrayref54, !dbg !6423
  %97 = getelementptr inbounds double, double addrspace(13)* %arrayptr56120, i64 %iv, !dbg !6426
  store double %96, double addrspace(13)* %97, align 8, !dbg !6426, !tbaa !269, !alias.scope !6427, !noalias !6430
  %exitcond.not = icmp eq i64 %iv.next, %arraylen, !dbg !6432
  br i1 %exitcond.not, label %L203.loopexit, label %L187, !dbg !6402, !llvm.loop !6433

L193:                                             ; preds = %L50
  %98 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %13, i64 0, i64 0, i64 0, !dbg !6434
  store i64 %arraylen34, i64* %98, align 8, !dbg !6434, !tbaa !133, !alias.scope !135, !noalias !6297
  %99 = addrspacecast [1 x [1 x i64]]* %13 to [1 x [1 x i64]] addrspace(11)*, !dbg !6308
  %100 = addrspacecast [1 x [1 x i64]]* %12 to [1 x [1 x i64]] addrspace(11)*, !dbg !6308
  call fastcc void @julia_throwdm_1978([1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %99, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %100) #73, !dbg !6308
  unreachable, !dbg !6308

L203.loopexit:                                    ; preds = %L187
  br label %L203, !dbg !6438

L203:                                             ; preds = %L203.loopexit, %L137
  %arraylen61 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6438, !tbaa !332, !range !87, !alias.scope !6272, !noalias !6275
  %arraylen64 = load i64, i64 addrspace(11)* %arraylen_ptr3, align 8, !dbg !6438, !tbaa !332, !range !87, !alias.scope !6277, !noalias !6280
  %101 = icmp eq i64 %arraylen64, %arraylen61, !dbg !6444
  %102 = icmp eq i64 %arraylen61, 1, !dbg !6446
  %value_phi66.in = or i1 %102, %101, !dbg !6446
  %103 = icmp eq i64 %arraylen64, 1
  %or.cond = or i1 %103, %value_phi66.in, !dbg !6447
  br i1 %or.cond, label %L235, label %L225, !dbg !6447

L225:                                             ; preds = %L203
  %104 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen61) #71, !dbg !6447
  %105 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen64) #71, !dbg !6447
  %106 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* nonnull @ijl_invoke, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5184092592 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5139351968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5228993744 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %104, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5228993712 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %105) #70, !dbg !6447
  %current_task68121 = getelementptr inbounds {}**, {}*** %14, i64 -14, !dbg !6447
  %current_task68 = bitcast {}*** %current_task68121 to {}**, !dbg !6447
  %box69 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task68, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #69, !dbg !6447
  %107 = bitcast {} addrspace(10)* %box69 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !6447
  %108 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %107, i64 0, i64 0, !dbg !6447
  store {} addrspace(10)* %106, {} addrspace(10)* addrspace(10)* %108, align 8, !dbg !6447, !tbaa !113, !alias.scope !117, !noalias !6287
  %109 = addrspacecast {} addrspace(10)* %box69 to {} addrspace(12)*, !dbg !6447
  call void @ijl_throw({} addrspace(12)* %109) #68, !dbg !6447
  unreachable, !dbg !6447

L235:                                             ; preds = %L203
  %110 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 1, !dbg !6296
  store {} addrspace(10)* %31, {} addrspace(10)** %110, align 8, !dbg !6296
  %111 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 2, !dbg !6296
  store {} addrspace(10)* %26, {} addrspace(10)** %111, align 8, !dbg !6296
  %112 = load { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, align 8, !dbg !6296
  ret { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %112, !dbg !6296
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia___2044({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg) unnamed_addr #67 !dbg !6450 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %2 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"arrayref'de" = alloca double, align 8
  %3 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"arrayref54'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref54'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %5 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %6 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %5, i32 0, i32 3
  %7 = load i16, i16 addrspace(10)* %6, align 2
  %8 = zext i16 %7 to i64
  %9 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %10 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %9, i32 0, i32 1
  %11 = load i64, i64 addrspace(10)* %10, align 8
  %12 = mul i64 %11, %8
  %13 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %14 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %13, i32 0, i32 3
  %15 = load i16, i16 addrspace(10)* %14, align 2
  %16 = zext i16 %15 to i64
  %17 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %18 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %17, i32 0, i32 1
  %19 = load i64, i64 addrspace(10)* %18, align 8
  %20 = mul i64 %19, %16
  %21 = call {}*** @julia.get_pgcstack() #68
  %arraylen = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 6, !dbg !6451
  br i1 true, label %L50, label %L15, !dbg !6455

L15:                                              ; preds = %top
  unreachable

L50:                                              ; preds = %top
  %22 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 0, !dbg !6456
  %23 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 1, !dbg !6456
  br i1 true, label %L96, label %L193, !dbg !6467

L96:                                              ; preds = %L50
  %24 = addrspacecast {} addrspace(10)* %23 to {} addrspace(11)*, !dbg !6469
  %25 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !6469
  %.not112 = icmp eq {} addrspace(11)* %24, %25, !dbg !6469
  br i1 %.not112, label %L112, label %L99, !dbg !6469

L99:                                              ; preds = %L96
  %.not123.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 7, !dbg !6474
  br i1 %.not123.not, label %L107, label %L112, !dbg !6474

L107:                                             ; preds = %L99
  %"'ip_phi3" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 2, !dbg !6475
  %26 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 3, !dbg !6475
  br label %L112, !dbg !6477

L112:                                             ; preds = %L107, %L99, %L96
  %27 = phi {} addrspace(10)* [ %"'ip_phi3", %L107 ], [ %"'", %L96 ], [ %"'", %L99 ]
  %.not116 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 8, !dbg !6484
  %28 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !6484
  %.not113 = icmp eq {} addrspace(11)* %24, %28, !dbg !6484
  br i1 %.not113, label %L137, label %L124, !dbg !6484

L124:                                             ; preds = %L112
  %.not122.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 9, !dbg !6487
  br i1 %.not122.not, label %L132, label %L137, !dbg !6487

L132:                                             ; preds = %L124
  %"'ip_phi6" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 4, !dbg !6488
  %29 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 5, !dbg !6488
  br label %L137, !dbg !6477

L137:                                             ; preds = %L132, %L124, %L112
  %30 = phi {} addrspace(10)* [ %"'ip_phi6", %L132 ], [ %"'1", %L112 ], [ %"'1", %L124 ]
  %.not118 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 10, !dbg !6490
  %.not114 = icmp eq i64 %arraylen, 0, !dbg !6490
  br i1 %.not114, label %L203, label %L187.lr.ph, !dbg !6491

L187.lr.ph:                                       ; preds = %L137
  %"'ipc37" = bitcast {} addrspace(10)* %27 to double addrspace(13)* addrspace(10)*
  %"'ipc38" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc37" to double addrspace(13)* addrspace(11)*
  %"arrayptr117'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc38", align 8, !tbaa !382, !alias.scope !6493, !noalias !6496, !nonnull !68, !invariant.group !6498
  %"'ipc33" = bitcast {} addrspace(10)* %30 to double addrspace(13)* addrspace(10)*
  %"'ipc34" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc33" to double addrspace(13)* addrspace(11)*
  %"arrayptr53119'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc34", align 8, !tbaa !382, !alias.scope !6499, !noalias !6502, !nonnull !68, !invariant.group !6504
  %"'ipc" = bitcast {} addrspace(10)* %22 to double addrspace(13)* addrspace(10)*
  %"'ipc30" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr56120'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc30", align 8, !tbaa !382, !alias.scope !6505, !noalias !6508, !nonnull !68, !invariant.group !6510
  %31 = add nsw i64 %arraylen, -1, !dbg !6511
  br label %L187, !dbg !6511

L187:                                             ; preds = %L187, %L187.lr.ph
  %iv = phi i64 [ %iv.next, %L187 ], [ 0, %L187.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6512
  %32 = select i1 %.not116, i64 0, i64 %iv, !dbg !6512
  %"'ipg45" = getelementptr inbounds double, double addrspace(13)* %"arrayptr117'ipl", i64 %32, !dbg !6512
  %33 = select i1 %.not118, i64 0, i64 %iv, !dbg !6519
  %"'ipg43" = getelementptr inbounds double, double addrspace(13)* %"arrayptr53119'ipl", i64 %33, !dbg !6519
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr56120'ipl", i64 %iv, !dbg !6522
  %exitcond.not = icmp eq i64 %iv.next, %arraylen, !dbg !6523
  br i1 %exitcond.not, label %L203.loopexit, label %L187, !dbg !6511, !llvm.loop !6524

L193:                                             ; preds = %L50
  unreachable

L203.loopexit:                                    ; preds = %L187
  br label %L203, !dbg !6525

L203:                                             ; preds = %L203.loopexit, %L137
  br i1 true, label %L235, label %L225, !dbg !6531

L225:                                             ; preds = %L203
  unreachable

L235:                                             ; preds = %L203
  br label %invertL235, !dbg !6466

inverttop:                                        ; preds = %invertL50
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL50:                                        ; preds = %invertL96
  br label %inverttop

invertL96:                                        ; preds = %invertL112, %invertL99
  br label %invertL50

invertL99:                                        ; preds = %staging, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  br label %invertL96

invertL107:                                       ; preds = %staging
  %34 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 2, !dbg !6475
  %35 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !6475
  %36 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %35, align 8, !dbg !6475
  %37 = bitcast {} addrspace(10)* %34 to i8 addrspace(13)* addrspace(10)*, !dbg !6475
  %38 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %37, align 8, !dbg !6475
  %39 = bitcast i8 addrspace(13)* %38 to double addrspace(13)*, !dbg !6475
  %40 = bitcast i8 addrspace(13)* %36 to double addrspace(13)*, !dbg !6475
  %41 = udiv i64 %20, 8, !dbg !6475
  %42 = icmp eq i64 %41, 0, !dbg !6475
  br i1 %42, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !6475

for.body.i:                                       ; preds = %for.body.i, %invertL107
  %idx.i = phi i64 [ 0, %invertL107 ], [ %idx.next.i, %for.body.i ], !dbg !6475
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %39, i64 %idx.i, !dbg !6475
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !6475
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !6475
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %40, i64 %idx.i, !dbg !6475
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !6475
  %43 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !6475
  store double %43, double addrspace(13)* %src.i.i, align 1, !dbg !6475
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !6475
  %44 = icmp eq i64 %41, %idx.next.i, !dbg !6475
  br i1 %44, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !6475

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL107, %for.body.i
  br label %invertL99

invertL112:                                       ; preds = %invertL137, %invertL124
  %.not123.not_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 7
  br i1 %.not112, label %invertL96, label %staging

invertL124:                                       ; preds = %staging29, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit69
  br label %invertL112

invertL132:                                       ; preds = %staging29
  %45 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 4, !dbg !6488
  %46 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !6488
  %47 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %46, align 8, !dbg !6488
  %48 = bitcast {} addrspace(10)* %45 to i8 addrspace(13)* addrspace(10)*, !dbg !6488
  %49 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %48, align 8, !dbg !6488
  %50 = bitcast i8 addrspace(13)* %49 to double addrspace(13)*, !dbg !6488
  %51 = bitcast i8 addrspace(13)* %47 to double addrspace(13)*, !dbg !6488
  %52 = udiv i64 %12, 8, !dbg !6488
  %53 = icmp eq i64 %52, 0, !dbg !6488
  br i1 %53, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit69, label %for.body.i68, !dbg !6488

for.body.i68:                                     ; preds = %for.body.i68, %invertL132
  %idx.i62 = phi i64 [ 0, %invertL132 ], [ %idx.next.i67, %for.body.i68 ], !dbg !6488
  %dst.i.i63 = getelementptr inbounds double, double addrspace(13)* %50, i64 %idx.i62, !dbg !6488
  %dst.i.l.i64 = load double, double addrspace(13)* %dst.i.i63, align 1, !dbg !6488
  store double 0.000000e+00, double addrspace(13)* %dst.i.i63, align 1, !dbg !6488
  %src.i.i65 = getelementptr inbounds double, double addrspace(13)* %51, i64 %idx.i62, !dbg !6488
  %src.i.l.i66 = load double, double addrspace(13)* %src.i.i65, align 1, !dbg !6488
  %54 = fadd fast double %src.i.l.i66, %dst.i.l.i64, !dbg !6488
  store double %54, double addrspace(13)* %src.i.i65, align 1, !dbg !6488
  %idx.next.i67 = add nuw i64 %idx.i62, 1, !dbg !6488
  %55 = icmp eq i64 %52, %idx.next.i67, !dbg !6488
  br i1 %55, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit69, label %for.body.i68, !dbg !6488

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit69: ; preds = %invertL132, %for.body.i68
  br label %invertL124

invertL137:                                       ; preds = %invertL203, %invertL187.lr.ph
  %.not122.not_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %tapeArg, 9
  br i1 %.not113, label %invertL112, label %staging29

invertL187.lr.ph:                                 ; preds = %invertL187
  br label %invertL137

invertL187:                                       ; preds = %mergeinvertL187_L203.loopexit, %incinvertL187
  %56 = load i64, i64* %"iv'ac", align 8, !dbg !6522
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %22 to double addrspace(13)* addrspace(10)*, !dbg !6522
  %"'ipc30_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !6522
  %"arrayptr56120'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc30_unwrap", align 8, !tbaa !382, !alias.scope !6505, !noalias !6508, !nonnull !68, !invariant.group !6510
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr56120'ipl_unwrap", i64 %56, !dbg !6522
  %57 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !6522, !tbaa !269, !alias.scope !6534, !noalias !6537
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !6522, !tbaa !269, !alias.scope !6534, !noalias !6537
  %58 = load double, double* %"'de", align 8, !dbg !6522
  %59 = fadd fast double %58, %57, !dbg !6522
  store double %59, double* %"'de", align 8, !dbg !6522
  %60 = load double, double* %"'de", align 8, !dbg !6539
  store double 0.000000e+00, double* %"'de", align 8, !dbg !6539
  %61 = load double, double* %"arrayref'de", align 8, !dbg !6539
  %62 = fadd fast double %61, %60, !dbg !6539
  store double %62, double* %"arrayref'de", align 8, !dbg !6539
  %63 = fneg fast double %60, !dbg !6539
  %64 = load double, double* %"arrayref54'de", align 8, !dbg !6539
  %65 = fadd fast double %64, %63, !dbg !6539
  store double %65, double* %"arrayref54'de", align 8, !dbg !6539
  %66 = load double, double* %"arrayref54'de", align 8, !dbg !6519
  store double 0.000000e+00, double* %"arrayref54'de", align 8, !dbg !6519
  %67 = load i64, i64* %"iv'ac", align 8, !dbg !6519
  %"'ipc33_unwrap" = bitcast {} addrspace(10)* %30 to double addrspace(13)* addrspace(10)*, !dbg !6519
  %"'ipc34_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc33_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !6519
  %"arrayptr53119'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc34_unwrap", align 8, !tbaa !382, !alias.scope !6499, !noalias !6502, !nonnull !68, !invariant.group !6504
  %_unwrap = select i1 %.not118, i64 0, i64 %67, !dbg !6519
  %"'ipg43_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr53119'ipl_unwrap", i64 %_unwrap, !dbg !6519
  %68 = load double, double addrspace(13)* %"'ipg43_unwrap", align 8, !dbg !6519, !tbaa !269, !alias.scope !6542, !noalias !6545
  %69 = fadd fast double %68, %66, !dbg !6519
  store double %69, double addrspace(13)* %"'ipg43_unwrap", align 8, !dbg !6519, !tbaa !269, !alias.scope !6542, !noalias !6545
  %70 = load double, double* %"arrayref'de", align 8, !dbg !6512
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !6512
  %71 = load i64, i64* %"iv'ac", align 8, !dbg !6512
  %"'ipc37_unwrap" = bitcast {} addrspace(10)* %27 to double addrspace(13)* addrspace(10)*, !dbg !6512
  %"'ipc38_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc37_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !6512
  %"arrayptr117'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc38_unwrap", align 8, !tbaa !382, !alias.scope !6493, !noalias !6496, !nonnull !68, !invariant.group !6498
  %_unwrap46 = select i1 %.not116, i64 0, i64 %71, !dbg !6512
  %"'ipg45_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr117'ipl_unwrap", i64 %_unwrap46, !dbg !6512
  %72 = load double, double addrspace(13)* %"'ipg45_unwrap", align 8, !dbg !6512, !tbaa !269, !alias.scope !6547, !noalias !6550
  %73 = fadd fast double %72, %70, !dbg !6512
  store double %73, double addrspace(13)* %"'ipg45_unwrap", align 8, !dbg !6512, !tbaa !269, !alias.scope !6547, !noalias !6550
  %74 = load i64, i64* %"iv'ac", align 8
  %75 = icmp eq i64 %74, 0
  %76 = xor i1 %75, true
  br i1 %75, label %invertL187.lr.ph, label %incinvertL187

incinvertL187:                                    ; preds = %invertL187
  %77 = load i64, i64* %"iv'ac", align 8
  %78 = add nsw i64 %77, -1
  store i64 %78, i64* %"iv'ac", align 8
  br label %invertL187

invertL203.loopexit:                              ; preds = %invertL203
  %_unwrap51 = add nsw i64 %arraylen, -1
  br label %mergeinvertL187_L203.loopexit

mergeinvertL187_L203.loopexit:                    ; preds = %invertL203.loopexit
  store i64 %_unwrap51, i64* %"iv'ac", align 8
  br label %invertL187

invertL203:                                       ; preds = %invertL235
  br i1 %.not114, label %invertL137, label %invertL203.loopexit

invertL235:                                       ; preds = %L235
  br label %invertL203

staging:                                          ; preds = %invertL112
  br i1 %.not123.not_unwrap, label %invertL107, label %invertL99

staging29:                                        ; preds = %invertL137
  br i1 %.not122.not_unwrap, label %invertL132, label %invertL124
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc double @preprocess_julia___1991([1 x {} addrspace(10)*] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2) unnamed_addr #68 !dbg !6593 {
top:
  %3 = call {}*** @julia.get_pgcstack() #69
  %ptls_field15 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field15 to i64***
  %ptls_load1617 = load i64**, i64*** %4, align 8, !tbaa !69
  %5 = getelementptr inbounds i64*, i64** %ptls_load1617, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #69, !dbg !6594
  fence syncscope("singlethread") seq_cst
  %getfield_addr = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %0, i64 0, i64 0, !dbg !6595
  %getfield = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %getfield_addr unordered, align 8, !dbg !6595, !tbaa !73, !invariant.load !68, !alias.scope !96, !noalias !97, !nonnull !68, !dereferenceable !453, !align !454
  %6 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !6598
  %arraysize_ptr18 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %6, i64 4, !dbg !6598
  %7 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr18 to i64 addrspace(10)*, !dbg !6598
  %8 = addrspacecast i64 addrspace(10)* %7 to i64 addrspace(11)*, !dbg !6598
  %arraysize = load i64, i64 addrspace(11)* %8, align 8, !dbg !6598, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  %9 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize) #70, !dbg !6602
  %10 = call fastcc nonnull {} addrspace(10)* @julia_gemv__1994({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %9, i32 noundef zeroext 1409286144, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield) #69, !dbg !6606
  %11 = bitcast {} addrspace(10)* %10 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6609
  %12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6609
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %12, i64 0, i32 1, !dbg !6609
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6609, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %13 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6609
  %14 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %13 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6609
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %14, i64 0, i32 1, !dbg !6609
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !6609, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not = icmp eq i64 %arraylen, %arraylen7, !dbg !6613
  br i1 %.not, label %L33, label %L39, !dbg !6614

L33:                                              ; preds = %top
  %15 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %10, {} addrspace(10)* nonnull %2) #69, !dbg !6615
  %16 = addrspacecast {} addrspace(10)* %10 to {} addrspace(11)*, !dbg !6616
  %17 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %16) #71, !dbg !6616
  %18 = bitcast {}* %17 to double**, !dbg !6616
  %arrayptr19 = load double*, double** %18, align 8, !dbg !6616, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %19 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !6616
  %20 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %19) #71, !dbg !6616
  %21 = bitcast {}* %20 to double**, !dbg !6616
  %arrayptr920 = load double*, double** %21, align 8, !dbg !6616, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %.not31 = icmp eq i64 %arraylen, 0, !dbg !6620
  br i1 %.not31, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !6620

.preheader.preheader:                             ; preds = %L33
  br label %.preheader, !dbg !6620

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !6620
  %22 = phi i64 [ %35, %.preheader ], [ 0, %.preheader.preheader ], !dbg !6620
  %23 = phi i64 [ %34, %.preheader ], [ 0, %.preheader.preheader ], !dbg !6620
  %24 = phi double [ %33, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !6620
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6620
  %25 = shl i64 %23, 32, !dbg !6620
  %26 = ashr exact i64 %25, 32, !dbg !6620
  %27 = getelementptr inbounds double, double* %arrayptr19, i64 %26, !dbg !6620
  %28 = load double, double* %27, align 8, !dbg !6620, !tbaa !1731
  %29 = shl i64 %22, 32, !dbg !6620
  %30 = ashr exact i64 %29, 32, !dbg !6620
  %31 = getelementptr inbounds double, double* %arrayptr920, i64 %30, !dbg !6620
  %32 = load double, double* %31, align 8, !dbg !6620, !tbaa !1731
  %33 = call double @llvm.fmuladd.f64(double %28, double %32, double %24) #69, !dbg !6620
  %34 = add nsw i64 %26, 1, !dbg !6620
  %35 = add nsw i64 %30, 1, !dbg !6620
  %36 = icmp eq i64 %iv.next, %arraylen, !dbg !6620
  br i1 %36, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !6620, !llvm.loop !6621

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !6615

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L33
  %37 = phi double [ 0.000000e+00, %L33 ], [ %33, %cblas_ddot64_.exit.loopexit ], !dbg !6620
  call void @llvm.julia.gc_preserve_end(token %15) #69, !dbg !6615
  ret double %37, !dbg !6594

L39:                                              ; preds = %top
  %current_task1021 = getelementptr inbounds {}**, {}*** %3, i64 -14, !dbg !6622
  %current_task10 = bitcast {}*** %current_task1021 to {}**, !dbg !6622
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #72, !dbg !6622
  %38 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !6622
  %39 = addrspacecast {} addrspace(10)* addrspace(10)* %38 to {} addrspace(10)* addrspace(11)*, !dbg !6622
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %39, align 8, !dbg !6622, !tbaa !307, !alias.scope !117, !noalias !6623
  %40 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %39, i64 1, !dbg !6622
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %40, align 8, !dbg !6622, !tbaa !307, !alias.scope !117, !noalias !6623
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #72, !dbg !6622
  %41 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !6622
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %41, i64 0, i32 0, !dbg !6622
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269529280 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !6622, !tbaa !113, !alias.scope !117, !noalias !6623
  %.repack23 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %41, i64 0, i32 1, !dbg !6622
  store i64 %arraylen, i64 addrspace(10)* %.repack23, align 8, !dbg !6622, !tbaa !113, !alias.scope !117, !noalias !6623
  %.repack25 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %41, i64 0, i32 2, !dbg !6622
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269529248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack25, align 8, !dbg !6622, !tbaa !113, !alias.scope !117, !noalias !6623
  %.repack27 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %41, i64 0, i32 3, !dbg !6622
  store i64 %arraylen7, i64 addrspace(10)* %.repack27, align 8, !dbg !6622, !tbaa !113, !alias.scope !117, !noalias !6623
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %39 release, align 8, !dbg !6622, !tbaa !307, !alias.scope !117, !noalias !6623
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #73, !dbg !6622
  %42 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !6622
  %43 = addrspacecast i8 addrspace(10)* %42 to i8 addrspace(11)*, !dbg !6622
  %44 = getelementptr inbounds i8, i8 addrspace(11)* %43, i64 8, !dbg !6622
  %45 = bitcast i8 addrspace(11)* %44 to {} addrspace(10)* addrspace(11)*, !dbg !6622
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %45 release, align 8, !dbg !6622, !tbaa !307, !alias.scope !117, !noalias !6623
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #72, !dbg !6614
  %46 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !6614
  %47 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %46, i64 0, i64 0, !dbg !6614
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %47, align 8, !dbg !6614, !tbaa !113, !alias.scope !117, !noalias !6623
  %48 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !6614
  call void @ijl_throw({} addrspace(12)* %48) #69, !dbg !6614
  unreachable, !dbg !6614
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double } @augmented_julia___1991([1 x {} addrspace(10)*] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %0, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") unnamed_addr #68 !dbg !6626 {
top:
  %3 = alloca { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }, align 8
  %4 = getelementptr inbounds { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }, { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }* %3, i32 0, i32 0
  %5 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %10 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %10, align 8
  %11 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %11, align 8
  %12 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %12, align 8
  %13 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %13, align 8
  %14 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %14, align 8
  %"iv'ac" = alloca i64, align 8
  %_cache = alloca i64*, align 8
  %_cache8 = alloca double*, align 8
  %_cache10 = alloca i64*, align 8
  %_cache12 = alloca double*, align 8
  %15 = call {}*** @julia.get_pgcstack() #69
  %ptls_field15 = getelementptr inbounds {}**, {}*** %15, i64 2
  %16 = bitcast {}*** %ptls_field15 to i64***
  %ptls_load1617 = load i64**, i64*** %16, align 8, !tbaa !69, !alias.scope !6627, !noalias !6630
  %17 = getelementptr inbounds i64*, i64** %ptls_load1617, i64 2
  %safepoint = load i64*, i64** %17, align 8, !tbaa !73, !invariant.load !68, !alias.scope !6632, !noalias !6635
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #69, !dbg !6637
  fence syncscope("singlethread") seq_cst
  %"getfield_addr'ipg" = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %"'", i64 0, i64 0, !dbg !6638
  %getfield_addr = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %0, i64 0, i64 0, !dbg !6638
  %"getfield'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"getfield_addr'ipg" unordered, align 8, !dbg !6638, !tbaa !73, !alias.scope !6641, !noalias !6644, !nonnull !68, !dereferenceable !453
  %18 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 5, !dbg !6638
  store {} addrspace(10)* %"getfield'ipl", {} addrspace(10)** %18, align 8, !dbg !6638
  %getfield = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %getfield_addr unordered, align 8, !dbg !6638, !tbaa !73, !invariant.load !68, !alias.scope !6646, !noalias !6647, !nonnull !68, !dereferenceable !453, !align !454
  %19 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 8, !dbg !6648
  store {} addrspace(10)* %getfield, {} addrspace(10)** %19, align 8, !dbg !6648
  %20 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !6648
  %arraysize_ptr18 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %20, i64 4, !dbg !6648
  %21 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr18 to i64 addrspace(10)*, !dbg !6648
  %22 = addrspacecast i64 addrspace(10)* %21 to i64 addrspace(11)*, !dbg !6648
  %arraysize = load i64, i64 addrspace(11)* %22, align 8, !dbg !6648, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !6652, !noalias !6655
  %23 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 9, !dbg !6657
  store i64 %arraysize, i64* %23, align 8, !dbg !6657
  %24 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize), !dbg !6657
  %25 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 3, !dbg !6657
  store {} addrspace(10)* %24, {} addrspace(10)** %25, align 8, !dbg !6657
  %26 = mul i64 %arraysize, 8, !dbg !6657
  %27 = bitcast {} addrspace(10)* %24 to i8 addrspace(13)* addrspace(10)*, !dbg !6657
  %28 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %27, align 8, !dbg !6657
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %28, i8 0, i64 %26, i1 false), !dbg !6657
  %29 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize) #70, !dbg !6657
  %30 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 4, !dbg !6661
  store {} addrspace(10)* %29, {} addrspace(10)** %30, align 8, !dbg !6661
  %_augmented = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1994({} addrspace(10)* align 16 %29, {} addrspace(10)* align 16 %24, i32 zeroext 1409286144, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %getfield, {} addrspace(10)* align 16 %"getfield'ipl"), !dbg !6661
  %subcache = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 0, !dbg !6661
  %31 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 0, !dbg !6661
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %31, align 8, !dbg !6661
  %32 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 1, !dbg !6661
  %33 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 1, !dbg !6661
  store {} addrspace(10)* %32, {} addrspace(10)** %33, align 8, !dbg !6661
  %"'ac" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 2, !dbg !6661
  %34 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 2, !dbg !6664
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %34, align 8, !dbg !6664
  %35 = bitcast {} addrspace(10)* %32 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6664
  %36 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %35 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6664
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %36, i64 0, i32 1, !dbg !6664
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6664, !tbaa !332, !range !87, !alias.scope !6668, !noalias !6671
  %37 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 10, !dbg !6664
  store i64 %arraylen, i64* %37, align 8, !dbg !6664
  %38 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6664
  %39 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %38 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6664
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %39, i64 0, i32 1, !dbg !6664
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !6664, !tbaa !332, !range !87, !alias.scope !6673, !noalias !6676
  %.not = icmp eq i64 %arraylen, %arraylen7, !dbg !6678
  br i1 %.not, label %L33, label %L39, !dbg !6679

L33:                                              ; preds = %top
  %40 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %32, {} addrspace(10)* %"'ac", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !6680
  %"'ipc7" = addrspacecast {} addrspace(10)* %"'ac" to {} addrspace(11)*, !dbg !6681
  %41 = addrspacecast {} addrspace(10)* %32 to {} addrspace(11)*, !dbg !6681
  %42 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc7"), !dbg !6681
  %43 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %41) #71, !dbg !6681
  %"'ipc6" = bitcast {}* %42 to double**, !dbg !6681
  %44 = bitcast {}* %43 to double**, !dbg !6681
  %"arrayptr19'ipl" = load double*, double** %"'ipc6", align 8, !dbg !6681, !tbaa !382, !alias.scope !6685, !noalias !6686, !nonnull !68
  %45 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 7, !dbg !6681
  store double* %"arrayptr19'ipl", double** %45, align 8, !dbg !6681
  %arrayptr19 = load double*, double** %44, align 8, !dbg !6681, !tbaa !382, !alias.scope !6668, !noalias !6671, !nonnull !68
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !6681
  %46 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !6681
  %47 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !6681
  %48 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %46) #71, !dbg !6681
  %"'ipc" = bitcast {}* %47 to double**, !dbg !6681
  %49 = bitcast {}* %48 to double**, !dbg !6681
  %"arrayptr920'ipl" = load double*, double** %"'ipc", align 8, !dbg !6681, !tbaa !382, !alias.scope !6687, !noalias !6688, !nonnull !68
  %50 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 6, !dbg !6681
  store double* %"arrayptr920'ipl", double** %50, align 8, !dbg !6681
  %arrayptr920 = load double*, double** %49, align 8, !dbg !6681, !tbaa !382, !alias.scope !6673, !noalias !6676, !nonnull !68
  %.not31 = icmp eq i64 %arraylen, 0, !dbg !6689
  br i1 %.not31, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !6689

.preheader.preheader:                             ; preds = %L33
  %51 = add nsw i64 %arraylen, -1, !dbg !6689
  %52 = add nuw i64 %51, 1, !dbg !6689
  %53 = mul nuw i64 %52, 8, !dbg !6689
  %54 = call noalias nonnull i8* @malloc(i64 %53), !dbg !6689
  %_malloccache = bitcast i8* %54 to i64*, !dbg !6689
  %55 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 11, !dbg !6689
  store i64* %_malloccache, i64** %55, align 8, !dbg !6689
  store i64* %_malloccache, i64** %_cache, align 8, !dbg !6689, !invariant.group !6690
  %56 = mul nuw i64 %52, 8, !dbg !6689
  %57 = call noalias nonnull i8* @malloc(i64 %56), !dbg !6689
  %_malloccache9 = bitcast i8* %57 to double*, !dbg !6689
  %58 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 12, !dbg !6689
  store double* %_malloccache9, double** %58, align 8, !dbg !6689
  store double* %_malloccache9, double** %_cache8, align 8, !dbg !6689, !invariant.group !6691
  %59 = mul nuw i64 %52, 8, !dbg !6689
  %60 = call noalias nonnull i8* @malloc(i64 %59), !dbg !6689
  %_malloccache11 = bitcast i8* %60 to i64*, !dbg !6689
  %61 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 13, !dbg !6689
  store i64* %_malloccache11, i64** %61, align 8, !dbg !6689
  store i64* %_malloccache11, i64** %_cache10, align 8, !dbg !6689, !invariant.group !6692
  %62 = mul nuw i64 %52, 8, !dbg !6689
  %63 = call noalias nonnull i8* @malloc(i64 %62), !dbg !6689
  %_malloccache13 = bitcast i8* %63 to double*, !dbg !6689
  %64 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 14, !dbg !6689
  store double* %_malloccache13, double** %64, align 8, !dbg !6689
  store double* %_malloccache13, double** %_cache12, align 8, !dbg !6689, !invariant.group !6693
  br label %.preheader, !dbg !6689

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !6689
  %65 = phi i64 [ %86, %.preheader ], [ 0, %.preheader.preheader ], !dbg !6689
  %66 = phi i64 [ %85, %.preheader ], [ 0, %.preheader.preheader ], !dbg !6689
  %67 = phi double [ %84, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !6689
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6689
  %68 = shl i64 %66, 32, !dbg !6689
  %69 = ashr exact i64 %68, 32, !dbg !6689
  %70 = load i64*, i64** %_cache, align 8, !dbg !6689, !dereferenceable !306, !invariant.group !6690
  %71 = getelementptr inbounds i64, i64* %70, i64 %iv, !dbg !6689
  store i64 %69, i64* %71, align 8, !dbg !6689, !invariant.group !6694
  %72 = getelementptr inbounds double, double* %arrayptr19, i64 %69, !dbg !6689
  %73 = load double, double* %72, align 8, !dbg !6689, !tbaa !1731, !alias.scope !6695, !noalias !6698
  %74 = load double*, double** %_cache8, align 8, !dbg !6689, !dereferenceable !306, !invariant.group !6691
  %75 = getelementptr inbounds double, double* %74, i64 %iv, !dbg !6689
  store double %73, double* %75, align 8, !dbg !6689, !tbaa !1731, !invariant.group !6700
  %76 = shl i64 %65, 32, !dbg !6689
  %77 = ashr exact i64 %76, 32, !dbg !6689
  %78 = load i64*, i64** %_cache10, align 8, !dbg !6689, !dereferenceable !306, !invariant.group !6692
  %79 = getelementptr inbounds i64, i64* %78, i64 %iv, !dbg !6689
  store i64 %77, i64* %79, align 8, !dbg !6689, !invariant.group !6701
  %80 = getelementptr inbounds double, double* %arrayptr920, i64 %77, !dbg !6689
  %81 = load double, double* %80, align 8, !dbg !6689, !tbaa !1731, !alias.scope !6702, !noalias !6705
  %82 = load double*, double** %_cache12, align 8, !dbg !6689, !dereferenceable !306, !invariant.group !6693
  %83 = getelementptr inbounds double, double* %82, i64 %iv, !dbg !6689
  store double %81, double* %83, align 8, !dbg !6689, !tbaa !1731, !invariant.group !6707
  %84 = call double @llvm.fmuladd.f64(double %73, double %81, double %67) #69, !dbg !6689
  %85 = add nsw i64 %69, 1, !dbg !6689
  %86 = add nsw i64 %77, 1, !dbg !6689
  %87 = icmp eq i64 %iv.next, %arraylen, !dbg !6689
  br i1 %87, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !6689, !llvm.loop !6708

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !6680

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L33
  %88 = phi double [ 0.000000e+00, %L33 ], [ %84, %cblas_ddot64_.exit.loopexit ], !dbg !6689
  call void @llvm.julia.gc_preserve_end(token %40) #69, !dbg !6680
  %89 = getelementptr inbounds { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }, { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }* %3, i32 0, i32 1, !dbg !6637
  store double %88, double* %89, align 8, !dbg !6637
  %90 = load { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }, { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double }* %3, align 8, !dbg !6637
  ret { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double } %90, !dbg !6637

L39:                                              ; preds = %top
  %current_task1021 = getelementptr inbounds {}**, {}*** %15, i64 -14, !dbg !6709
  %current_task10 = bitcast {}*** %current_task1021 to {}**, !dbg !6709
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #72, !dbg !6709
  %91 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !6709
  %92 = addrspacecast {} addrspace(10)* addrspace(10)* %91 to {} addrspace(10)* addrspace(11)*, !dbg !6709
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %92, align 8, !dbg !6709, !tbaa !307, !alias.scope !117, !noalias !6710
  %93 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %92, i64 1, !dbg !6709
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %93, align 8, !dbg !6709, !tbaa !307, !alias.scope !117, !noalias !6710
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #72, !dbg !6709
  %94 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !6709
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %94, i64 0, i32 0, !dbg !6709
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269529280 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !6709, !tbaa !113, !alias.scope !117, !noalias !6710
  %.repack23 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %94, i64 0, i32 1, !dbg !6709
  store i64 %arraylen, i64 addrspace(10)* %.repack23, align 8, !dbg !6709, !tbaa !113, !alias.scope !117, !noalias !6710
  %.repack25 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %94, i64 0, i32 2, !dbg !6709
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269529248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack25, align 8, !dbg !6709, !tbaa !113, !alias.scope !117, !noalias !6710
  %.repack27 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %94, i64 0, i32 3, !dbg !6709
  store i64 %arraylen7, i64 addrspace(10)* %.repack27, align 8, !dbg !6709, !tbaa !113, !alias.scope !117, !noalias !6710
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %92 release, align 8, !dbg !6709, !tbaa !307, !alias.scope !117, !noalias !6710
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #73, !dbg !6709
  %95 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !6709
  %96 = addrspacecast i8 addrspace(10)* %95 to i8 addrspace(11)*, !dbg !6709
  %97 = getelementptr inbounds i8, i8 addrspace(11)* %96, i64 8, !dbg !6709
  %98 = bitcast i8 addrspace(11)* %97 to {} addrspace(10)* addrspace(11)*, !dbg !6709
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %98 release, align 8, !dbg !6709, !tbaa !307, !alias.scope !117, !noalias !6710
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #72, !dbg !6679
  %99 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !6679
  %100 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %99, i64 0, i64 0, !dbg !6679
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %100, align 8, !dbg !6679, !tbaa !113, !alias.scope !117, !noalias !6710
  %101 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !6679
  call void @ijl_throw({} addrspace(12)* %101) #69, !dbg !6679
  unreachable, !dbg !6679
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia___1991([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 dereferenceable(8) %0, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", double %differeturn, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg) unnamed_addr #68 !dbg !6713 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %3 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"'de24" = alloca double, align 8
  %4 = getelementptr double, double* %"'de24", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache = alloca double*, align 8
  %"'de25" = alloca double, align 8
  %5 = getelementptr double, double* %"'de25", i64 0
  store double 0.000000e+00, double* %5, align 8
  %_cache26 = alloca double*, align 8
  %"'de29" = alloca double, align 8
  %6 = getelementptr double, double* %"'de29", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"'de30" = alloca double, align 8
  %7 = getelementptr double, double* %"'de30", i64 0
  store double 0.000000e+00, double* %7, align 8
  %_cache31 = alloca i64*, align 8
  %_cache37 = alloca i64*, align 8
  %8 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 12
  %mdyncache_fromtape_cache = alloca double*, align 8
  store double* %8, double** %mdyncache_fromtape_cache, align 8
  %9 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 13
  %mdyncache_fromtape_cache59 = alloca i64*, align 8
  store i64* %9, i64** %mdyncache_fromtape_cache59, align 8
  %10 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 14
  %mdyncache_fromtape_cache61 = alloca double*, align 8
  store double* %10, double** %mdyncache_fromtape_cache61, align 8
  %11 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 11
  %mdyncache_fromtape_cache63 = alloca i64*, align 8
  store i64* %11, i64** %mdyncache_fromtape_cache63, align 8
  %12 = call {}*** @julia.get_pgcstack() #69
  %"getfield'il_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 5, !dbg !6714
  %getfield = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 8, !dbg !6718
  %arraysize = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 9, !dbg !6722
  %13 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 3, !dbg !6722
  %14 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 4, !dbg !6722
  %tapeArg8 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 0, !dbg !6726
  %15 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 1, !dbg !6726
  %"'ip_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 2, !dbg !6726
  %arraylen = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 10, !dbg !6729
  br i1 true, label %L33, label %L39, !dbg !6733

L33:                                              ; preds = %top
  %16 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %15, {} addrspace(10)* %"'ip_phi", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !6734
  %"'ipc18" = addrspacecast {} addrspace(10)* %"'ip_phi" to {} addrspace(11)*, !dbg !6735
  %17 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc18"), !dbg !6735
  %"arrayptr19'il_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 7, !dbg !6735
  %"'ipc" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !6735
  %18 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !6735
  %"arrayptr920'il_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 6, !dbg !6735
  %.not31 = icmp eq i64 %arraylen, 0, !dbg !6739
  br i1 %.not31, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !6739

.preheader.preheader:                             ; preds = %L33
  %19 = add nsw i64 %arraylen, -1, !dbg !6739
  %20 = add nuw i64 %19, 1, !dbg !6739
  %21 = mul nuw i64 %20, 8, !dbg !6739
  %22 = mul nuw i64 %20, 8, !dbg !6739
  %23 = mul nuw i64 %20, 8, !dbg !6739
  %24 = mul nuw i64 %20, 8, !dbg !6739
  br label %.preheader, !dbg !6739

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !6739
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6739
  %25 = load i64*, i64** %mdyncache_fromtape_cache63, align 8, !dbg !6739, !dereferenceable !306, !invariant.group !6740
  %26 = getelementptr inbounds i64, i64* %25, i64 %iv, !dbg !6739
  %27 = load i64, i64* %26, align 8, !dbg !6739, !invariant.group !6741
  %"'ipg36" = getelementptr inbounds double, double* %"arrayptr19'il_phi", i64 %27, !dbg !6739
  %28 = load double*, double** %mdyncache_fromtape_cache, align 8, !dbg !6739, !dereferenceable !306, !invariant.group !6742
  %29 = getelementptr inbounds double, double* %28, i64 %iv, !dbg !6739
  %30 = load double, double* %29, align 8, !dbg !6739, !invariant.group !6743
  %31 = load i64*, i64** %mdyncache_fromtape_cache59, align 8, !dbg !6739, !dereferenceable !306, !invariant.group !6744
  %32 = getelementptr inbounds i64, i64* %31, i64 %iv, !dbg !6739
  %33 = load i64, i64* %32, align 8, !dbg !6739, !invariant.group !6745
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr920'il_phi", i64 %33, !dbg !6739
  %34 = load double*, double** %mdyncache_fromtape_cache61, align 8, !dbg !6739, !dereferenceable !306, !invariant.group !6746
  %35 = getelementptr inbounds double, double* %34, i64 %iv, !dbg !6739
  %36 = load double, double* %35, align 8, !dbg !6739, !invariant.group !6747
  %37 = icmp eq i64 %iv.next, %arraylen, !dbg !6739
  br i1 %37, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !6739, !llvm.loop !6748

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !6734

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L33
  call void @llvm.julia.gc_preserve_end(token %16) #69, !dbg !6734
  br label %invertcblas_ddot64_.exit, !dbg !6717

L39:                                              ; preds = %top
  unreachable

inverttop:                                        ; preds = %invertL33
  call fastcc void @diffejulia_gemv__1994({} addrspace(10)* align 16 %14, {} addrspace(10)* align 16 %13, i32 zeroext 1409286144, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %getfield, {} addrspace(10)* align 16 %"getfield'il_phi", { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg8), !dbg !6726
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL33:                                        ; preds = %invertcblas_ddot64_.exit, %invert.preheader.preheader
  call void @llvm.julia.gc_preserve_end(token %95), !dbg !6734
  br label %inverttop

invert.preheader.preheader:                       ; preds = %invert.preheader
  %38 = load i64, i64* %"iv'ac", align 8
  %39 = load i64, i64* %"iv'ac", align 8
  %40 = load i64, i64* %"iv'ac", align 8
  %41 = load i64, i64* %"iv'ac", align 8
  %42 = load i64, i64* %"iv'ac", align 8
  %forfree58 = load double*, double** %mdyncache_fromtape_cache, align 8, !dereferenceable !306, !invariant.group !6742
  %43 = bitcast double* %forfree58 to i8*
  call void @free(i8* nonnull %43), !dbg !6749
  %44 = load i64, i64* %"iv'ac", align 8
  %forfree60 = load i64*, i64** %mdyncache_fromtape_cache59, align 8, !dereferenceable !306, !invariant.group !6744
  %45 = bitcast i64* %forfree60 to i8*
  call void @free(i8* nonnull %45), !dbg !6749
  %46 = load i64, i64* %"iv'ac", align 8
  %forfree62 = load double*, double** %mdyncache_fromtape_cache61, align 8, !dereferenceable !306, !invariant.group !6746
  %47 = bitcast double* %forfree62 to i8*
  call void @free(i8* nonnull %47), !dbg !6749
  %48 = load i64, i64* %"iv'ac", align 8
  %forfree = load i64*, i64** %mdyncache_fromtape_cache63, align 8, !dereferenceable !306, !invariant.group !6740
  %49 = bitcast i64* %forfree to i8*
  call void @free(i8* nonnull %49), !dbg !6749
  br label %invertL33

invert.preheader:                                 ; preds = %mergeinvert.preheader_cblas_ddot64_.exit.loopexit, %incinvert.preheader
  %50 = load double, double* %"'de24", align 8, !dbg !6739
  store double 0.000000e+00, double* %"'de24", align 8, !dbg !6739
  %51 = load i64, i64* %"iv'ac", align 8, !dbg !6739
  %arraylen_unwrap = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 10, !dbg !6739
  %_unwrap = add nsw i64 %arraylen_unwrap, -1, !dbg !6739
  %52 = add nuw i64 %_unwrap, 1, !dbg !6739
  %53 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 14, !dbg !6739
  %54 = getelementptr inbounds double, double* %53, i64 %51, !dbg !6739
  %55 = load double, double* %54, align 8, !dbg !6739, !tbaa !1731, !invariant.group !6750
  %56 = fmul fast double %50, %55, !dbg !6739
  %57 = load double, double* %"'de25", align 8, !dbg !6739
  %58 = fadd fast double %57, %56, !dbg !6739
  store double %58, double* %"'de25", align 8, !dbg !6739
  %59 = load i64, i64* %"iv'ac", align 8, !dbg !6739
  %60 = add nuw i64 %_unwrap, 1, !dbg !6739
  %61 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 12, !dbg !6739
  %62 = getelementptr inbounds double, double* %61, i64 %59, !dbg !6739
  %63 = load double, double* %62, align 8, !dbg !6739, !tbaa !1731, !invariant.group !6751
  %64 = fmul fast double %50, %63, !dbg !6739
  %65 = load double, double* %"'de29", align 8, !dbg !6739
  %66 = fadd fast double %65, %64, !dbg !6739
  store double %66, double* %"'de29", align 8, !dbg !6739
  %67 = load double, double* %"'de30", align 8, !dbg !6739
  %68 = fadd fast double %67, %50, !dbg !6739
  store double %68, double* %"'de30", align 8, !dbg !6739
  %69 = load double, double* %"'de29", align 8, !dbg !6739
  store double 0.000000e+00, double* %"'de29", align 8, !dbg !6739
  %70 = load i64, i64* %"iv'ac", align 8, !dbg !6739
  %71 = add nuw i64 %_unwrap, 1, !dbg !6739
  %72 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 13, !dbg !6739
  %73 = getelementptr inbounds i64, i64* %72, i64 %70, !dbg !6739
  %74 = load i64, i64* %73, align 8, !dbg !6739, !invariant.group !6752
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr920'il_phi", i64 %74, !dbg !6739
  %75 = load double, double* %"'ipg_unwrap", align 8, !dbg !6739, !tbaa !1731, !alias.scope !6753, !noalias !6756
  %76 = fadd fast double %75, %69, !dbg !6739
  store double %76, double* %"'ipg_unwrap", align 8, !dbg !6739, !tbaa !1731, !alias.scope !6753, !noalias !6756
  %77 = load double, double* %"'de25", align 8, !dbg !6739
  store double 0.000000e+00, double* %"'de25", align 8, !dbg !6739
  %78 = load i64, i64* %"iv'ac", align 8, !dbg !6739
  %79 = add nuw i64 %_unwrap, 1, !dbg !6739
  %80 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 11, !dbg !6739
  %81 = getelementptr inbounds i64, i64* %80, i64 %78, !dbg !6739
  %82 = load i64, i64* %81, align 8, !dbg !6739, !invariant.group !6758
  %"'ipg36_unwrap" = getelementptr inbounds double, double* %"arrayptr19'il_phi", i64 %82, !dbg !6739
  %83 = load double, double* %"'ipg36_unwrap", align 8, !dbg !6739, !tbaa !1731, !alias.scope !6759, !noalias !6762
  %84 = fadd fast double %83, %77, !dbg !6739
  store double %84, double* %"'ipg36_unwrap", align 8, !dbg !6739, !tbaa !1731, !alias.scope !6759, !noalias !6762
  %85 = load double, double* %"'de30", align 8
  store double 0.000000e+00, double* %"'de30", align 8
  %86 = load i64, i64* %"iv'ac", align 8
  %87 = icmp eq i64 %86, 0
  %88 = xor i1 %87, true
  %89 = select fast i1 %88, double %85, double 0.000000e+00
  %90 = load double, double* %"'de24", align 8
  %91 = fadd fast double %90, %85
  %92 = select fast i1 %87, double %90, double %91
  store double %92, double* %"'de24", align 8
  br i1 %87, label %invert.preheader.preheader, label %incinvert.preheader

incinvert.preheader:                              ; preds = %invert.preheader
  %93 = load i64, i64* %"iv'ac", align 8
  %94 = add nsw i64 %93, -1
  store i64 %94, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit.loopexit:                ; preds = %invertcblas_ddot64_.exit
  %_unwrap45 = add nsw i64 %arraylen, -1
  br label %mergeinvert.preheader_cblas_ddot64_.exit.loopexit

mergeinvert.preheader_cblas_ddot64_.exit.loopexit: ; preds = %invertcblas_ddot64_.exit.loopexit
  store i64 %_unwrap45, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit:                         ; preds = %cblas_ddot64_.exit
  store double %differeturn, double* %"'de", align 8
  %95 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %15, {} addrspace(10)* %"'ip_phi", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !6734
  %96 = load double, double* %"'de", align 8
  store double 0.000000e+00, double* %"'de", align 8
  %97 = xor i1 %.not31, true
  %98 = select fast i1 %97, double %96, double 0.000000e+00
  %99 = load double, double* %"'de24", align 8
  %100 = fadd fast double %99, %96
  %101 = select fast i1 %.not31, double %99, double %100
  store double %101, double* %"'de24", align 8
  br i1 %.not31, label %invertL33, label %invertcblas_ddot64_.exit.loopexit
}

; Function Attrs: mustprogress willreturn
define internal fastcc { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } @augmented_julia__unsafe_setindex__2077.347({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", [1 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) "enzyme_inactive" %2, i64 signext "enzyme_inactive" %3) unnamed_addr #59 !dbg !6796 {
top:
  %4 = alloca { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, align 8
  %5 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %"iv'ac" = alloca i64, align 8
  %loopLimit_cache = alloca i64, align 8
  %newstruct35 = alloca [2 x i64], i64 1, align 8
  %7 = bitcast [2 x i64]* %newstruct35 to i8*
  %_cache = alloca i64*, align 8
  %8 = bitcast i8* %7 to [2 x i64]*, !enzyme_caststack !68
  %9 = call {}*** @julia.get_pgcstack() #69
  %memcpy_refined_src = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]] addrspace(11)* %2, i64 0, i64 0, i64 0
  %10 = load i64, i64 addrspace(11)* %memcpy_refined_src, align 8, !tbaa !73, !invariant.load !68, !alias.scope !6797, !noalias !6800
  %11 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i32 0, i32 2
  store i64 %10, i64* %11, align 8
  %ptls_field40 = getelementptr inbounds {}**, {}*** %9, i64 2
  %12 = bitcast {}*** %ptls_field40 to i64***
  %ptls_load4142 = load i64**, i64*** %12, align 8, !tbaa !69, !alias.scope !6802, !noalias !6805
  %13 = getelementptr inbounds i64*, i64** %ptls_load4142, i64 2
  %safepoint = load i64*, i64** %13, align 8, !tbaa !73, !invariant.load !68, !alias.scope !6807, !noalias !6810
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #69, !dbg !6812
  fence syncscope("singlethread") seq_cst
  %14 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !6813
  %15 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %14) #70, !dbg !6813
  %16 = bitcast {}* %15 to i8**, !dbg !6813
  %arrayptr = load i8*, i8** %16, align 8, !dbg !6813, !tbaa !73, !invariant.load !68, !alias.scope !6819, !noalias !6822, !nonnull !68
  %17 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !6813
  %18 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %17) #70, !dbg !6813
  %19 = bitcast {}* %18 to i8**, !dbg !6813
  %arrayptr3 = load i8*, i8** %19, align 8, !dbg !6813, !tbaa !382, !alias.scope !6824, !noalias !6827, !nonnull !68
  %.not.not = icmp eq i8* %arrayptr, %arrayptr3, !dbg !6829
  %20 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i32 0, i32 3, !dbg !6817
  store i1 %.not.not, i1* %20, align 1, !dbg !6817
  br i1 %.not.not, label %L9, label %L12, !dbg !6817

L9:                                               ; preds = %top
  %21 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'1"), !dbg !6832
  %22 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i32 0, i32 0, !dbg !6832
  store {} addrspace(10)* %21, {} addrspace(10)** %22, align 8, !dbg !6832
  %23 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !6832
  %24 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %23, i32 0, i32 3, !dbg !6832
  %25 = load i16, i16 addrspace(10)* %24, align 2, !dbg !6832
  %26 = zext i16 %25 to i64, !dbg !6832
  %27 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !6832
  %28 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %27, i32 0, i32 1, !dbg !6832
  %29 = load i64, i64 addrspace(10)* %28, align 8, !dbg !6832
  %30 = mul i64 %29, %26, !dbg !6832
  %31 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !6832
  %32 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %31, align 8, !dbg !6832
  %33 = bitcast {} addrspace(10)* %21 to i8 addrspace(13)* addrspace(10)*, !dbg !6832
  %34 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %33, align 8, !dbg !6832
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %34, i8 0, i64 %30, i1 false), !dbg !6832
  %35 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %1) #69, !dbg !6832
  %36 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i32 0, i32 1, !dbg !6817
  store {} addrspace(10)* %35, {} addrspace(10)** %36, align 8, !dbg !6817
  br label %L12, !dbg !6817

L12:                                              ; preds = %L9, %top
  %37 = phi {} addrspace(10)* [ %21, %L9 ], [ %"'1", %top ]
  %value_phi = phi {} addrspace(10)* [ %35, %L9 ], [ %1, %top ]
  %38 = bitcast {} addrspace(10)* %value_phi to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6834
  %39 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %38 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6834
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %39, i64 0, i32 1, !dbg !6834
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6834, !tbaa !332, !range !87, !alias.scope !6837, !noalias !6840
  %.not = icmp eq i64 %arraylen, %10, !dbg !6842
  br i1 %.not, label %L25, label %L22, !dbg !6835

L22:                                              ; preds = %L12
  %memcpy_refined_dst37 = getelementptr inbounds [2 x i64], [2 x i64]* %8, i64 0, i64 0, !dbg !6835
  store i64 %10, i64* %memcpy_refined_dst37, align 8, !dbg !6835, !tbaa !133, !alias.scope !135, !noalias !6843
  %memcpy_refined_dst38 = getelementptr inbounds [2 x i64], [2 x i64]* %8, i64 0, i64 1, !dbg !6835
  store i64 1, i64* %memcpy_refined_dst38, align 8, !dbg !6835, !tbaa !133, !alias.scope !135, !noalias !6843
  %40 = addrspacecast [2 x i64]* %8 to [2 x i64] addrspace(11)*, !dbg !6835
  call fastcc void @julia_throw_setindex_mismatch_2080({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %value_phi, [2 x i64] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %40) #71, !dbg !6835
  unreachable, !dbg !6835

L25:                                              ; preds = %L12
  %.not43 = icmp eq i64 %10, 0, !dbg !6846
  br i1 %.not43, label %L92, label %L42, !dbg !6848

L42:                                              ; preds = %L25
  %"'ipc5" = bitcast {} addrspace(10)* %37 to double addrspace(13)* addrspace(10)*, !dbg !6851
  %41 = bitcast {} addrspace(10)* %value_phi to double addrspace(13)* addrspace(10)*, !dbg !6851
  %"'ipc6" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc5" to double addrspace(13)* addrspace(11)*, !dbg !6851
  %42 = addrspacecast double addrspace(13)* addrspace(10)* %41 to double addrspace(13)* addrspace(11)*, !dbg !6851
  %"arrayptr744'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc6", align 8, !dbg !6851, !tbaa !382, !alias.scope !6852, !noalias !6855, !nonnull !68
  %arrayptr744 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %42, align 8, !dbg !6851, !tbaa !382, !alias.scope !6856, !noalias !6840, !nonnull !68
  %arrayref = load double, double addrspace(13)* %arrayptr744, align 8, !dbg !6851, !tbaa !269, !alias.scope !6857, !noalias !6860
  %43 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*
  %44 = addrspacecast {} addrspace(10)* addrspace(10)* %43 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %44, i64 3
  %45 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*
  %arraysize = load i64, i64 addrspace(11)* %45, align 8, !alias.scope !6862, !noalias !6863
  %46 = add i64 %3, -1
  %47 = mul i64 %arraysize, %46
  %"'ipc" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*
  %48 = bitcast {} addrspace(10)* %0 to double addrspace(13)* addrspace(10)*
  %"'ipc4" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %49 = addrspacecast double addrspace(13)* addrspace(10)* %48 to double addrspace(13)* addrspace(11)*
  %"arrayptr2246'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc4", align 16, !alias.scope !6863, !noalias !6862
  %arrayptr2246 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %49, align 16, !alias.scope !6862, !noalias !6863
  %50 = add i64 %47, -1
  %51 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i32 0, i32 4, !dbg !6864
  store i64 %50, i64* %51, align 8, !dbg !6864
  store i64* null, i64** %_cache, align 8, !dbg !6864
  br label %L54, !dbg !6864

L54:                                              ; preds = %L74, %L42
  %iv = phi i64 [ %iv.next, %L74 ], [ 0, %L42 ]
  %value_phi15.off0 = phi i1 [ false, %L42 ], [ %76, %L74 ]
  %value_phi16 = phi double [ %arrayref, %L42 ], [ %value_phi30, %L74 ]
  %value_phi17 = phi i64 [ 2, %L42 ], [ %value_phi29, %L74 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6866
  %52 = load i64*, i64** %_cache, align 8, !dbg !6866
  %53 = bitcast i64* %52 to i8*, !dbg !6866
  %54 = and i64 %iv.next, 1, !dbg !6866
  %55 = icmp ne i64 %54, 0, !dbg !6866
  %56 = call i64 @llvm.ctpop.i64(i64 %iv.next), !dbg !6866
  %57 = icmp ult i64 %56, 3, !dbg !6866
  %58 = and i1 %57, %55, !dbg !6866
  br i1 %58, label %grow.i, label %__enzyme_exponentialallocationzero.exit, !dbg !6866

grow.i:                                           ; preds = %L54
  %59 = call i64 @llvm.ctlz.i64(i64 %iv.next, i1 true), !dbg !6866
  %60 = sub nuw nsw i64 64, %59, !dbg !6866
  %61 = shl i64 8, %60, !dbg !6866
  %62 = icmp eq i64 %iv.next, 1, !dbg !6866
  %63 = lshr i64 %61, 1, !dbg !6866
  %64 = select i1 %62, i64 0, i64 %63, !dbg !6866
  %65 = call i8* @realloc(i8* %53, i64 %61) #72, !dbg !6866
  %66 = sub i64 %61, %64, !dbg !6866
  %67 = getelementptr inbounds i8, i8* %65, i64 %64, !dbg !6866
  call void @llvm.memset.p0i8.i64(i8* %67, i8 0, i64 %66, i1 false), !dbg !6866
  br label %__enzyme_exponentialallocationzero.exit, !dbg !6866

__enzyme_exponentialallocationzero.exit:          ; preds = %L54, %grow.i
  %68 = phi i8* [ %65, %grow.i ], [ %53, %L54 ], !dbg !6866
  %69 = bitcast i8* %68 to i64*, !dbg !6866
  %70 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, i32 0, i32 5, !dbg !6866
  store i64* %69, i64** %70, align 8, !dbg !6866
  store i64* %69, i64** %_cache, align 8, !dbg !6866
  br i1 %value_phi15.off0, label %L92.loopexit, label %L61, !dbg !6866

L61:                                              ; preds = %__enzyme_exponentialallocationzero.exit
  %71 = add i64 %50, %iv.next, !dbg !6868
  %72 = getelementptr inbounds double, double addrspace(13)* %arrayptr2246, i64 %71, !dbg !6868
  store double %value_phi16, double addrspace(13)* %72, align 8, !dbg !6868, !tbaa !269, !alias.scope !6870, !noalias !6873
  %73 = add i64 %value_phi17, -1, !dbg !6875
  %74 = load i64*, i64** %_cache, align 8, !dbg !6879, !dereferenceable !306, !invariant.group !6881
  %75 = getelementptr inbounds i64, i64* %74, i64 %iv, !dbg !6879
  store i64 %73, i64* %75, align 8, !dbg !6879, !invariant.group !6882
  %76 = icmp uge i64 %73, %10, !dbg !6879
  br i1 %76, label %L74, label %L70, !dbg !6877

L70:                                              ; preds = %L61
  %77 = getelementptr inbounds double, double addrspace(13)* %arrayptr744, i64 %73, !dbg !6883
  %arrayref27 = load double, double addrspace(13)* %77, align 8, !dbg !6883, !tbaa !269, !alias.scope !6857, !noalias !6860
  %78 = add i64 %value_phi17, 1, !dbg !6884
  br label %L74, !dbg !6848

L74:                                              ; preds = %L70, %L61
  %value_phi29 = phi i64 [ %78, %L70 ], [ undef, %L61 ]
  %value_phi30 = phi double [ %arrayref27, %L70 ], [ undef, %L61 ]
  %.not48 = icmp eq i64 %iv.next, %10, !dbg !6885
  br i1 %.not48, label %L92.loopexit, label %L54, !dbg !6888

L92.loopexit:                                     ; preds = %L74, %__enzyme_exponentialallocationzero.exit
  %79 = phi i64 [ %iv, %L74 ], [ %iv, %__enzyme_exponentialallocationzero.exit ], !dbg !6889
  store i64 %79, i64* %loopLimit_cache, align 8, !dbg !6889, !invariant.group !6890
  br label %L92, !dbg !6889

L92:                                              ; preds = %L92.loopexit, %L25
  %80 = load { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }* %4, align 8, !dbg !6889
  ret { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %80, !dbg !6889
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia__unsafe_setindex__2077.348({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", [1 x [1 x i64]] addrspace(11)* nocapture readonly align 8 dereferenceable(8) "enzyme_inactive" %2, i64 signext "enzyme_inactive" %3, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg) unnamed_addr #59 !dbg !6891 {
top:
  %"iv'ac" = alloca i64, align 8
  %loopLimit_cache = alloca i64, align 8
  %"arrayref'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %"value_phi16'de" = alloca double, align 8
  %5 = getelementptr double, double* %"value_phi16'de", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"value_phi30'de" = alloca double, align 8
  %6 = getelementptr double, double* %"value_phi30'de", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"arrayref27'de" = alloca double, align 8
  %7 = getelementptr double, double* %"arrayref27'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %_cache33 = alloca i64*, align 8
  %8 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 5
  %mdyncache_fromtape_cache = alloca i64*, align 8
  store i64* %8, i64** %mdyncache_fromtape_cache, align 8
  %9 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %10 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %9, i32 0, i32 3
  %11 = load i16, i16 addrspace(10)* %10, align 2
  %12 = zext i16 %11 to i64
  %13 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %14 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %13, i32 0, i32 1
  %15 = load i64, i64 addrspace(10)* %14, align 8
  %16 = mul i64 %15, %12
  %17 = call {}*** @julia.get_pgcstack() #69
  %18 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 2
  %.not.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 3, !dbg !6892
  br i1 %.not.not, label %L9, label %L12, !dbg !6892

L9:                                               ; preds = %top
  %"'ip_phi3" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 0, !dbg !6894
  %19 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 1, !dbg !6894
  br label %L12, !dbg !6892

L12:                                              ; preds = %L9, %top
  %20 = phi {} addrspace(10)* [ %"'ip_phi3", %L9 ], [ %"'1", %top ]
  br i1 true, label %L25, label %L22, !dbg !6896

L22:                                              ; preds = %L12
  unreachable

L25:                                              ; preds = %L12
  %.not43 = icmp eq i64 %18, 0, !dbg !6898
  br i1 %.not43, label %L92, label %L42, !dbg !6900

L42:                                              ; preds = %L25
  %"'ipc23" = bitcast {} addrspace(10)* %20 to double addrspace(13)* addrspace(10)*, !dbg !6903
  %"'ipc24" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc23" to double addrspace(13)* addrspace(11)*, !dbg !6903
  %"arrayptr744'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc24", align 8, !dbg !6903, !tbaa !382, !alias.scope !6904, !noalias !6907, !nonnull !68, !invariant.group !6909
  %"'ipc" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*
  %"'ipc15" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr2246'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc15", align 16, !alias.scope !6910, !noalias !6913, !invariant.group !6915
  %21 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 4, !dbg !6916
  br label %L54, !dbg !6916

L54:                                              ; preds = %L74, %L42
  %iv = phi i64 [ %iv.next, %L74 ], [ 0, %L42 ]
  %value_phi15.off0 = phi i1 [ false, %L42 ], [ %27, %L74 ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !6918
  %22 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 5, !dbg !6918
  br i1 %value_phi15.off0, label %L92.loopexit, label %L61, !dbg !6918

L61:                                              ; preds = %L54
  %23 = add i64 %21, %iv.next, !dbg !6920
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr2246'ipl", i64 %23, !dbg !6920
  %24 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dbg !6922, !dereferenceable !306, !invariant.group !6926
  %25 = getelementptr inbounds i64, i64* %24, i64 %iv, !dbg !6922
  %26 = load i64, i64* %25, align 8, !dbg !6922, !invariant.group !6927
  %27 = icmp uge i64 %26, %18, !dbg !6922
  br i1 %27, label %L74, label %L70, !dbg !6924

L70:                                              ; preds = %L61
  %"'ipg30" = getelementptr inbounds double, double addrspace(13)* %"arrayptr744'ipl", i64 %26, !dbg !6928
  br label %L74, !dbg !6900

L74:                                              ; preds = %L70, %L61
  %.not48 = icmp eq i64 %iv.next, %18, !dbg !6929
  br i1 %.not48, label %L92.loopexit, label %L54, !dbg !6932

L92.loopexit:                                     ; preds = %L74, %L54
  %"value_phi15.off0!manual_lcssa" = phi i1 [ %value_phi15.off0, %L74 ], [ %value_phi15.off0, %L54 ], !dbg !6933
  %28 = phi i64 [ %iv, %L74 ], [ %iv, %L54 ], !dbg !6933
  store i64 %28, i64* %loopLimit_cache, align 8, !dbg !6933, !invariant.group !6934
  br label %L92, !dbg !6933

L92:                                              ; preds = %L92.loopexit, %L25
  br label %invertL92, !dbg !6933

inverttop:                                        ; preds = %invertL12, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL9:                                         ; preds = %invertL12
  %29 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 0, !dbg !6894
  %30 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !6894
  %31 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %30, align 8, !dbg !6894
  %32 = bitcast {} addrspace(10)* %29 to i8 addrspace(13)* addrspace(10)*, !dbg !6894
  %33 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %32, align 8, !dbg !6894
  %34 = bitcast i8 addrspace(13)* %33 to double addrspace(13)*, !dbg !6894
  %35 = bitcast i8 addrspace(13)* %31 to double addrspace(13)*, !dbg !6894
  %36 = udiv i64 %16, 8, !dbg !6894
  %37 = icmp eq i64 %36, 0, !dbg !6894
  br i1 %37, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !6894

for.body.i:                                       ; preds = %for.body.i, %invertL9
  %idx.i = phi i64 [ 0, %invertL9 ], [ %idx.next.i, %for.body.i ], !dbg !6894
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %34, i64 %idx.i, !dbg !6894
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !6894
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !6894
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %35, i64 %idx.i, !dbg !6894
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !6894
  %38 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !6894
  store double %38, double addrspace(13)* %src.i.i, align 1, !dbg !6894
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !6894
  %39 = icmp eq i64 %36, %idx.next.i, !dbg !6894
  br i1 %39, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !6894

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL9, %for.body.i
  br label %inverttop

invertL12:                                        ; preds = %invertL25
  br i1 %.not.not, label %invertL9, label %inverttop

invertL25:                                        ; preds = %invertL92, %invertL42
  br label %invertL12

invertL42:                                        ; preds = %invertL54
  %40 = load double, double* %"arrayref'de", align 8, !dbg !6903
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !6903
  %"'ipc23_unwrap" = bitcast {} addrspace(10)* %20 to double addrspace(13)* addrspace(10)*, !dbg !6903
  %"'ipc24_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc23_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !6903
  %"arrayptr744'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc24_unwrap", align 8, !dbg !6903, !tbaa !382, !alias.scope !6904, !noalias !6907, !nonnull !68
  %41 = load double, double addrspace(13)* %"arrayptr744'il_phi_unwrap", align 8, !dbg !6903, !tbaa !269, !alias.scope !6935, !noalias !6938
  %42 = fadd fast double %41, %40, !dbg !6903
  store double %42, double addrspace(13)* %"arrayptr744'il_phi_unwrap", align 8, !dbg !6903, !tbaa !269, !alias.scope !6935, !noalias !6938
  %43 = load i64, i64* %"iv'ac", align 8
  %44 = load i64, i64* %"iv'ac", align 8
  %forfree40 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dereferenceable !306, !invariant.group !6926
  %45 = bitcast i64* %forfree40 to i8*
  call void @free(i8* nonnull %45), !dbg !6940
  br label %invertL25

invertL54:                                        ; preds = %mergeinvertL54_L92.loopexit37, %invertL61
  %46 = load double, double* %"value_phi16'de", align 8
  store double 0.000000e+00, double* %"value_phi16'de", align 8
  %47 = load i64, i64* %"iv'ac", align 8
  %48 = icmp eq i64 %47, 0
  %49 = xor i1 %48, true
  %50 = select fast i1 %49, double %46, double 0.000000e+00
  %51 = load double, double* %"value_phi30'de", align 8
  %52 = fadd fast double %51, %46
  %53 = select fast i1 %48, double %51, double %52
  store double %53, double* %"value_phi30'de", align 8
  %54 = select fast i1 %48, double %46, double 0.000000e+00
  %55 = load double, double* %"arrayref'de", align 8
  %56 = fadd fast double %55, %46
  %57 = select fast i1 %48, double %56, double %55
  store double %57, double* %"arrayref'de", align 8
  br i1 %48, label %invertL42, label %incinvertL54

incinvertL54:                                     ; preds = %invertL54
  %58 = load i64, i64* %"iv'ac", align 8
  %59 = add nsw i64 %58, -1
  store i64 %59, i64* %"iv'ac", align 8
  br label %invertL74

invertL61:                                        ; preds = %invertL74, %invertL70
  %60 = load i64, i64* %"iv'ac", align 8, !dbg !6920
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*, !dbg !6920
  %"'ipc15_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !6920
  %"arrayptr2246'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc15_unwrap", align 16, !alias.scope !6910, !noalias !6913, !invariant.group !6915
  %_unwrap41 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 4, !dbg !6920
  %iv.next_unwrap = add nuw nsw i64 %60, 1, !dbg !6920
  %_unwrap = add i64 %_unwrap41, %iv.next_unwrap, !dbg !6920
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr2246'ipl_unwrap", i64 %_unwrap, !dbg !6920
  %61 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !6920, !tbaa !269, !alias.scope !6941, !noalias !6944
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !6920, !tbaa !269, !alias.scope !6941, !noalias !6944
  %62 = load double, double* %"value_phi16'de", align 8, !dbg !6920
  %63 = fadd fast double %62, %61, !dbg !6920
  store double %63, double* %"value_phi16'de", align 8, !dbg !6920
  br label %invertL54

invertL70:                                        ; preds = %invertL74
  %64 = load double, double* %"arrayref27'de", align 8, !dbg !6928
  store double 0.000000e+00, double* %"arrayref27'de", align 8, !dbg !6928
  %65 = load i64, i64* %"iv'ac", align 8, !dbg !6928
  %"'ipc23_unwrap31" = bitcast {} addrspace(10)* %20 to double addrspace(13)* addrspace(10)*, !dbg !6928
  %"'ipc24_unwrap32" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc23_unwrap31" to double addrspace(13)* addrspace(11)*, !dbg !6928
  %"arrayptr744'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc24_unwrap32", align 8, !dbg !6903, !tbaa !382, !alias.scope !6904, !noalias !6907, !nonnull !68, !invariant.group !6909
  %66 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 5, !dbg !6928
  %67 = getelementptr inbounds i64, i64* %66, i64 %65, !dbg !6928
  %68 = load i64, i64* %67, align 8, !dbg !6928, !invariant.group !6946
  %"'ipg30_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr744'ipl_unwrap", i64 %68, !dbg !6928
  %69 = load double, double addrspace(13)* %"'ipg30_unwrap", align 8, !dbg !6928, !tbaa !269, !alias.scope !6935, !noalias !6938
  %70 = fadd fast double %69, %64, !dbg !6928
  store double %70, double addrspace(13)* %"'ipg30_unwrap", align 8, !dbg !6928, !tbaa !269, !alias.scope !6935, !noalias !6938
  br label %invertL61

invertL74:                                        ; preds = %mergeinvertL54_L92.loopexit, %incinvertL54
  %71 = load double, double* %"value_phi30'de", align 8
  store double 0.000000e+00, double* %"value_phi30'de", align 8
  %72 = load i64, i64* %"iv'ac", align 8
  %73 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 5
  %74 = getelementptr inbounds i64, i64* %73, i64 %72
  %75 = load i64, i64* %74, align 8, !invariant.group !6946
  %_unwrap36 = icmp uge i64 %75, %18
  %76 = xor i1 %_unwrap36, true
  %77 = select fast i1 %76, double %71, double 0.000000e+00
  %78 = load double, double* %"arrayref27'de", align 8
  %79 = fadd fast double %78, %71
  %80 = select fast i1 %_unwrap36, double %78, double %79
  store double %80, double* %"arrayref27'de", align 8
  br i1 %_unwrap36, label %invertL61, label %invertL70

invertL92.loopexit:                               ; preds = %invertL92
  %81 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !6934
  %82 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !6934
  %83 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !6934
  %84 = icmp ne i64 %83, 0
  br i1 %84, label %invertL92.loopexit_phirc, label %invertL92.loopexit_phirc39

invertL92.loopexit_phirc:                         ; preds = %invertL92.loopexit
  %85 = sub nuw i64 %83, 1
  %86 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %tapeArg, 5
  %87 = getelementptr inbounds i64, i64* %86, i64 %85
  %88 = load i64, i64* %87, align 8, !invariant.group !6946
  %_unwrap38 = icmp uge i64 %88, %18
  br label %invertL92.loopexit_phimerge

invertL92.loopexit_phirc39:                       ; preds = %invertL92.loopexit
  br label %invertL92.loopexit_phimerge

invertL92.loopexit_phimerge:                      ; preds = %invertL92.loopexit_phirc39, %invertL92.loopexit_phirc
  %89 = phi i1 [ %_unwrap38, %invertL92.loopexit_phirc ], [ false, %invertL92.loopexit_phirc39 ]
  br i1 %89, label %mergeinvertL54_L92.loopexit37, label %mergeinvertL54_L92.loopexit

mergeinvertL54_L92.loopexit37:                    ; preds = %invertL92.loopexit_phimerge
  store i64 %82, i64* %"iv'ac", align 8
  br label %invertL54

mergeinvertL54_L92.loopexit:                      ; preds = %invertL92.loopexit_phimerge
  store i64 %81, i64* %"iv'ac", align 8
  br label %invertL74

invertL92:                                        ; preds = %L92
  br i1 %.not43, label %invertL25, label %invertL92.loopexit
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia_compute_energy_2128([3 x double]* noalias nocapture nofree noundef nonnull writeonly sret([3 x double]) align 8 dereferenceable(24) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2) unnamed_addr #69 !dbg !6978 {
top:
  %3 = call {}*** @julia.get_pgcstack()
  %4 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !306
  %newstruct12 = bitcast i8* %4 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %5 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !306
  %newstruct2 = bitcast i8* %5 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %6 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !306
  %newstruct16 = bitcast i8* %6 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %7 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !306
  %newstruct = bitcast i8* %7 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %8 = bitcast {}*** %3 to {}**
  %9 = getelementptr inbounds {}*, {}** %8, i64 -14
  %10 = getelementptr inbounds {}*, {}** %9, i64 16
  %11 = bitcast {}** %10 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) {} addrspace(10)* @julia.gc_alloc_obj({}** %9, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !enzyme_fromstack !306
  call void @zeroType.353({} addrspace(10)* %13, i8 0, i64 8), !enzyme_zerostack !68
  %14 = bitcast {} addrspace(10)* %13 to [1 x {} addrspace(10)*] addrspace(10)*, !enzyme_caststack !68
  %15 = call {}*** @julia.get_pgcstack() #70
  %ptls_field31 = getelementptr inbounds {}**, {}*** %15, i64 2
  %16 = bitcast {}*** %ptls_field31 to i64***
  %ptls_load3233 = load i64**, i64*** %16, align 8, !tbaa !69
  %17 = getelementptr inbounds i64*, i64** %ptls_load3233, i64 2
  %safepoint = load i64*, i64** %17, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #70, !dbg !6979
  fence syncscope("singlethread") seq_cst
  %18 = bitcast [1 x [2 x i64]]* %newstruct to i8*, !dbg !6980
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %18, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const13 to i8*), i64 noundef 16, i1 noundef false) #70, !dbg !6980, !tbaa !86, !alias.scope !1749, !noalias !6983
  %19 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !6986
  %20 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %19 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !6986
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %20, i64 0, i32 1, !dbg !6986
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6986, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %21 = icmp ult i64 %arraylen, 6, !dbg !6992
  br i1 %21, label %L19, label %L22, !dbg !6991

L19:                                              ; preds = %top
  %22 = addrspacecast [1 x [2 x i64]]* %newstruct to [1 x [2 x i64]] addrspace(11)*, !dbg !6991
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %22) #71, !dbg !6991
  unreachable, !dbg !6991

L22:                                              ; preds = %top
  %23 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #72, !dbg !6995
  call fastcc void @julia__copyto_impl__2143({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %23, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, i64 noundef signext 4) #70, !dbg !7000
  %24 = bitcast [1 x [2 x i64]]* %newstruct2 to i8*, !dbg !6980
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %24, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const13 to i8*), i64 noundef 16, i1 noundef false) #70, !dbg !6980, !tbaa !86, !alias.scope !1749, !noalias !6983
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !6986, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %25 = icmp ult i64 %arraylen4, 6, !dbg !6992
  br i1 %25, label %L51, label %L54, !dbg !6991

L51:                                              ; preds = %L22
  %26 = addrspacecast [1 x [2 x i64]]* %newstruct2 to [1 x [2 x i64]] addrspace(11)*, !dbg !6991
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %26) #71, !dbg !6991
  unreachable, !dbg !6991

L54:                                              ; preds = %L22
  %27 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #72, !dbg !6995
  call fastcc void @julia__copyto_impl__2143({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %27, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, i64 noundef signext 4) #70, !dbg !7000
  %28 = bitcast {} addrspace(10)* %23 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7002
  %29 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %28 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7002
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %29, i64 0, i32 1, !dbg !7002
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !7002, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %30 = bitcast {} addrspace(10)* %27 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7002
  %31 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %30 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7002
  %arraylen_ptr8 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %31, i64 0, i32 1, !dbg !7002
  %arraylen9 = load i64, i64 addrspace(11)* %arraylen_ptr8, align 8, !dbg !7002, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not = icmp eq i64 %arraylen7, %arraylen9, !dbg !7006
  br i1 %.not, label %L69, label %L75, !dbg !7007

L69:                                              ; preds = %L54
  %32 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %23, {} addrspace(10)* nonnull %27) #70, !dbg !7008
  %33 = addrspacecast {} addrspace(10)* %23 to {} addrspace(11)*, !dbg !7009
  %34 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %33) #73, !dbg !7009
  %35 = bitcast {}* %34 to double**, !dbg !7009
  %arrayptr34 = load double*, double** %35, align 8, !dbg !7009, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %36 = addrspacecast {} addrspace(10)* %27 to {} addrspace(11)*, !dbg !7009
  %37 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %36) #73, !dbg !7009
  %38 = bitcast {}* %37 to double**, !dbg !7009
  %arrayptr1135 = load double*, double** %38, align 8, !dbg !7009, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %.not58 = icmp eq i64 %arraylen7, 0, !dbg !7013
  br i1 %.not58, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !7013

.preheader.preheader:                             ; preds = %L69
  br label %.preheader, !dbg !7013

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !7013
  %39 = phi i64 [ %52, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7013
  %40 = phi i64 [ %51, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7013
  %41 = phi double [ %50, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !7013
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7013
  %42 = shl i64 %40, 32, !dbg !7013
  %43 = ashr exact i64 %42, 32, !dbg !7013
  %44 = getelementptr inbounds double, double* %arrayptr34, i64 %43, !dbg !7013
  %45 = load double, double* %44, align 8, !dbg !7013, !tbaa !1731
  %46 = shl i64 %39, 32, !dbg !7013
  %47 = ashr exact i64 %46, 32, !dbg !7013
  %48 = getelementptr inbounds double, double* %arrayptr1135, i64 %47, !dbg !7013
  %49 = load double, double* %48, align 8, !dbg !7013, !tbaa !1731
  %50 = call double @llvm.fmuladd.f64(double %45, double %49, double %41) #70, !dbg !7013
  %51 = add nsw i64 %43, 1, !dbg !7013
  %52 = add nsw i64 %47, 1, !dbg !7013
  %53 = icmp eq i64 %iv.next, %arraylen7, !dbg !7013
  br i1 %53, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !7013, !llvm.loop !7014

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  %phi.bo = fmul double %50, 5.000000e-01, !dbg !7008
  br label %cblas_ddot64_.exit, !dbg !7008

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L69
  %54 = phi double [ 0.000000e+00, %L69 ], [ %phi.bo, %cblas_ddot64_.exit.loopexit ]
  call void @llvm.julia.gc_preserve_end(token %32) #70, !dbg !7008
  %55 = bitcast [1 x [2 x i64]]* %newstruct12 to i8*, !dbg !7015
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %55, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const14 to i8*), i64 noundef 16, i1 noundef false) #70, !dbg !7015, !tbaa !86, !alias.scope !1749, !noalias !6983
  %arraylen14 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7018, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %56 = icmp ult i64 %arraylen14, 3, !dbg !7024
  br i1 %56, label %L101, label %L104, !dbg !7023

L75:                                              ; preds = %L54
  %current_task2236 = getelementptr inbounds {}**, {}*** %15, i64 -14, !dbg !7027
  %current_task22 = bitcast {}*** %current_task2236 to {}**, !dbg !7027
  %newstruct23 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #74, !dbg !7027
  %57 = bitcast {} addrspace(10)* %newstruct23 to {} addrspace(10)* addrspace(10)*, !dbg !7027
  %58 = addrspacecast {} addrspace(10)* addrspace(10)* %57 to {} addrspace(10)* addrspace(11)*, !dbg !7027
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %58, align 8, !dbg !7027, !tbaa !307, !alias.scope !117, !noalias !7028
  %59 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %58, i64 1, !dbg !7027
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %59, align 8, !dbg !7027, !tbaa !307, !alias.scope !117, !noalias !7028
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #74, !dbg !7027
  %60 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !7027
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %60, i64 0, i32 0, !dbg !7027
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269529280 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !7027, !tbaa !113, !alias.scope !117, !noalias !7028
  %.repack38 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %60, i64 0, i32 1, !dbg !7027
  store i64 %arraylen7, i64 addrspace(10)* %.repack38, align 8, !dbg !7027, !tbaa !113, !alias.scope !117, !noalias !7028
  %.repack40 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %60, i64 0, i32 2, !dbg !7027
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269529248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack40, align 8, !dbg !7027, !tbaa !113, !alias.scope !117, !noalias !7028
  %.repack42 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %60, i64 0, i32 3, !dbg !7027
  store i64 %arraylen9, i64 addrspace(10)* %.repack42, align 8, !dbg !7027, !tbaa !113, !alias.scope !117, !noalias !7028
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %58 release, align 8, !dbg !7027, !tbaa !307, !alias.scope !117, !noalias !7028
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct23, {} addrspace(10)* nofree nonnull %box) #75, !dbg !7027
  %61 = bitcast {} addrspace(10)* %newstruct23 to i8 addrspace(10)*, !dbg !7027
  %62 = addrspacecast i8 addrspace(10)* %61 to i8 addrspace(11)*, !dbg !7027
  %63 = getelementptr inbounds i8, i8 addrspace(11)* %62, i64 8, !dbg !7027
  %64 = bitcast i8 addrspace(11)* %63 to {} addrspace(10)* addrspace(11)*, !dbg !7027
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %64 release, align 8, !dbg !7027, !tbaa !307, !alias.scope !117, !noalias !7028
  %box26 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #74, !dbg !7007
  %65 = bitcast {} addrspace(10)* %box26 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !7007
  %66 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %65, i64 0, i64 0, !dbg !7007
  store {} addrspace(10)* %newstruct23, {} addrspace(10)* addrspace(10)* %66, align 8, !dbg !7007, !tbaa !113, !alias.scope !117, !noalias !7028
  %67 = addrspacecast {} addrspace(10)* %box26 to {} addrspace(12)*, !dbg !7007
  call void @ijl_throw({} addrspace(12)* %67) #71, !dbg !7007
  unreachable, !dbg !7007

L101:                                             ; preds = %cblas_ddot64_.exit
  %68 = addrspacecast [1 x [2 x i64]]* %newstruct12 to [1 x [2 x i64]] addrspace(11)*, !dbg !7023
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %68) #71, !dbg !7023
  unreachable, !dbg !7023

L104:                                             ; preds = %cblas_ddot64_.exit
  %69 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #72, !dbg !7029
  call fastcc void @julia__copyto_impl__2143({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %69, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, i64 noundef signext 1) #70, !dbg !7034
  %70 = call fastcc nonnull {} addrspace(10)* @julia___2136({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %69) #70, !dbg !7036
  %71 = bitcast [1 x [2 x i64]]* %newstruct16 to i8*, !dbg !7015
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %71, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const14 to i8*), i64 noundef 16, i1 noundef false) #70, !dbg !7015, !tbaa !86, !alias.scope !1749, !noalias !6983
  %arraylen18 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7018, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %72 = icmp ult i64 %arraylen18, 3, !dbg !7024
  br i1 %72, label %L135, label %L138, !dbg !7023

L135:                                             ; preds = %L104
  %73 = addrspacecast [1 x [2 x i64]]* %newstruct16 to [1 x [2 x i64]] addrspace(11)*, !dbg !7023
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %73) #71, !dbg !7023
  unreachable, !dbg !7023

L138:                                             ; preds = %L104
  %74 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #72, !dbg !7029
  call fastcc void @julia__copyto_impl__2143({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %74, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, i64 noundef signext 1) #70, !dbg !7034
  %75 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %14, i64 0, i64 0, !dbg !7017
  store {} addrspace(10)* %70, {} addrspace(10)* addrspace(10)* %75, align 8, !dbg !7017, !noalias !7037
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %13, {} addrspace(10)* %70), !dbg !7017
  %76 = addrspacecast [1 x {} addrspace(10)*] addrspace(10)* %14 to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !7017
  %77 = call fastcc double @julia___1991([1 x {} addrspace(10)*] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %76, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %74) #70, !dbg !7017
  %78 = fmul double %77, 5.000000e-01, !dbg !7038
  %79 = fadd double %54, %78, !dbg !7039
  %newstruct20.sroa.0.0..sroa_idx = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 0, !dbg !7040
  store double %54, double* %newstruct20.sroa.0.0..sroa_idx, align 8, !dbg !7040, !noalias !7037
  %newstruct20.sroa.2.0..sroa_idx45 = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 1, !dbg !7040
  store double %78, double* %newstruct20.sroa.2.0..sroa_idx45, align 8, !dbg !7040, !noalias !7037
  %newstruct20.sroa.3.0..sroa_idx46 = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 2, !dbg !7040
  store double %79, double* %newstruct20.sroa.3.0..sroa_idx46, align 8, !dbg !7040, !noalias !7037
  ret void, !dbg !7040
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia__copyto_impl__2143({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, i64 noundef signext "enzyme_inactive" %2) unnamed_addr #70 !dbg !7119 {
top:
  %3 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !306
  %newstruct2 = bitcast i8* %3 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %4 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !306
  %newstruct5 = bitcast i8* %4 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %5 = call {}*** @julia.get_pgcstack() #71
  %ptls_field15 = getelementptr inbounds {}**, {}*** %5, i64 2
  %6 = bitcast {}*** %ptls_field15 to i64***
  %ptls_load1617 = load i64**, i64*** %6, align 8, !tbaa !69
  %7 = getelementptr inbounds i64*, i64** %ptls_load1617, i64 2
  %safepoint = load i64*, i64** %7, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #71, !dbg !7120
  fence syncscope("singlethread") seq_cst
  %newstruct.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct2, i64 0, i64 0, i64 0, !dbg !7121
  store i64 1, i64* %newstruct.sroa.0.0..sroa_idx, align 8, !dbg !7121, !tbaa !133, !alias.scope !135, !noalias !7123
  %newstruct.sroa.2.0..sroa_idx22 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct2, i64 0, i64 0, i64 1, !dbg !7121
  store i64 3, i64* %newstruct.sroa.2.0..sroa_idx22, align 8, !dbg !7121, !tbaa !133, !alias.scope !135, !noalias !7123
  %8 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7126
  %9 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %8 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7126
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %9, i64 0, i32 1, !dbg !7126
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7126, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %10 = icmp ugt i64 %arraylen, 2, !dbg !7132
  br i1 %10, label %L40, label %L36, !dbg !7131

L36:                                              ; preds = %top
  %11 = addrspacecast [1 x [2 x i64]]* %newstruct2 to [1 x [2 x i64]] addrspace(11)*, !dbg !7131
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %11) #72, !dbg !7131
  unreachable, !dbg !7131

L40:                                              ; preds = %top
  %12 = add i64 %2, -1, !dbg !7135
  %13 = add i64 %2, 2, !dbg !7137
  %.not19 = icmp sgt i64 %2, 9223372036854775805, !dbg !7138
  %value_phi3 = select i1 %.not19, i64 %12, i64 %13, !dbg !7140
  %newstruct4.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct5, i64 0, i64 0, i64 0, !dbg !7143
  store i64 %2, i64* %newstruct4.sroa.0.0..sroa_idx, align 8, !dbg !7143, !tbaa !133, !alias.scope !135, !noalias !7123
  %newstruct4.sroa.2.0..sroa_idx21 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct5, i64 0, i64 0, i64 1, !dbg !7143
  store i64 %value_phi3, i64* %newstruct4.sroa.2.0..sroa_idx21, align 8, !dbg !7143, !tbaa !133, !alias.scope !135, !noalias !7123
  %14 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7144
  %15 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %14 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7144
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %15, i64 0, i32 1, !dbg !7144
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !7144, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %16 = icmp slt i64 %value_phi3, %2, !dbg !7150
  %17 = icmp ult i64 %12, %arraylen7, !dbg !7154
  %18 = add i64 %value_phi3, -1, !dbg !7156
  %19 = icmp ult i64 %18, %arraylen7, !dbg !7154
  %20 = and i1 %17, %19, !dbg !7157
  %21 = or i1 %16, %20, !dbg !7158
  br i1 %21, label %L71, label %L68, !dbg !7149

L68:                                              ; preds = %L40
  %22 = addrspacecast [1 x [2 x i64]]* %newstruct5 to [1 x [2 x i64]] addrspace(11)*, !dbg !7149
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %22) #72, !dbg !7149
  unreachable, !dbg !7149

L71:                                              ; preds = %L40
  %23 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %0) #71, !dbg !7159
  %24 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %1) #71, !dbg !7161
  %25 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !7162
  %26 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %25) #73, !dbg !7162
  %27 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !7165
  %28 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %27) #73, !dbg !7165
  %29 = bitcast {}* %28 to i8**, !dbg !7165
  %arrayptr10 = load i8*, i8** %29, align 8, !dbg !7165, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %30 = shl i64 %2, 3, !dbg !7168
  %31 = add i64 %30, -8, !dbg !7168
  %32 = getelementptr i8, i8* %arrayptr10, i64 %31, !dbg !7170
  %33 = bitcast {}* %26 to i8**, !dbg !7162
  %arrayptr = load i8*, i8** %33, align 8, !dbg !7162, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(24) %arrayptr, i8* noundef nonnull align 1 dereferenceable(24) %32, i64 noundef 24, i1 noundef false) #71, !dbg !7171, !noalias !7173
  call void @llvm.julia.gc_preserve_end(token %24) #71, !dbg !7174
  call void @llvm.julia.gc_preserve_end(token %23) #71, !dbg !7175
  ret void, !dbg !7176
}

; Function Attrs: mustprogress willreturn
define internal fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", i64 noundef signext "enzyme_inactive" %2) unnamed_addr #70 !dbg !7177 {
top:
  %3 = alloca { i8*, i8* }, align 8
  %newstruct5 = alloca [1 x [2 x i64]], i64 1, align 8
  %4 = bitcast [1 x [2 x i64]]* %newstruct5 to i8*
  %newstruct2 = alloca [1 x [2 x i64]], i64 1, align 8
  %5 = bitcast [1 x [2 x i64]]* %newstruct2 to i8*
  %6 = bitcast i8* %5 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %7 = bitcast i8* %4 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %8 = call {}*** @julia.get_pgcstack() #71
  %ptls_field15 = getelementptr inbounds {}**, {}*** %8, i64 2
  %9 = bitcast {}*** %ptls_field15 to i64***
  %ptls_load1617 = load i64**, i64*** %9, align 8, !tbaa !69, !alias.scope !7178, !noalias !7181
  %10 = getelementptr inbounds i64*, i64** %ptls_load1617, i64 2
  %safepoint = load i64*, i64** %10, align 8, !tbaa !73, !invariant.load !68, !alias.scope !7183, !noalias !7186
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #71, !dbg !7188
  fence syncscope("singlethread") seq_cst
  %newstruct.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %6, i64 0, i64 0, i64 0, !dbg !7189
  store i64 1, i64* %newstruct.sroa.0.0..sroa_idx, align 8, !dbg !7189, !tbaa !133, !alias.scope !135, !noalias !7191
  %newstruct.sroa.2.0..sroa_idx22 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %6, i64 0, i64 0, i64 1, !dbg !7189
  store i64 3, i64* %newstruct.sroa.2.0..sroa_idx22, align 8, !dbg !7189, !tbaa !133, !alias.scope !135, !noalias !7191
  %11 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7194
  %12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7194
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %12, i64 0, i32 1, !dbg !7194
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7194, !tbaa !332, !range !87, !alias.scope !7200, !noalias !7203
  %13 = icmp ugt i64 %arraylen, 2, !dbg !7205
  br i1 %13, label %L40, label %L36, !dbg !7199

L36:                                              ; preds = %top
  %14 = addrspacecast [1 x [2 x i64]]* %6 to [1 x [2 x i64]] addrspace(11)*, !dbg !7199
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %14) #72, !dbg !7199
  unreachable, !dbg !7199

L40:                                              ; preds = %top
  %15 = add i64 %2, -1, !dbg !7208
  %16 = add i64 %2, 2, !dbg !7210
  %.not19 = icmp sgt i64 %2, 9223372036854775805, !dbg !7211
  %value_phi3 = select i1 %.not19, i64 %15, i64 %16, !dbg !7213
  %newstruct4.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %7, i64 0, i64 0, i64 0, !dbg !7216
  store i64 %2, i64* %newstruct4.sroa.0.0..sroa_idx, align 8, !dbg !7216, !tbaa !133, !alias.scope !135, !noalias !7191
  %newstruct4.sroa.2.0..sroa_idx21 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %7, i64 0, i64 0, i64 1, !dbg !7216
  store i64 %value_phi3, i64* %newstruct4.sroa.2.0..sroa_idx21, align 8, !dbg !7216, !tbaa !133, !alias.scope !135, !noalias !7191
  %17 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7217
  %18 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7217
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %18, i64 0, i32 1, !dbg !7217
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !7217, !tbaa !332, !range !87, !alias.scope !7223, !noalias !7226
  %19 = icmp slt i64 %value_phi3, %2, !dbg !7228
  %20 = icmp ult i64 %15, %arraylen7, !dbg !7232
  %21 = add i64 %value_phi3, -1, !dbg !7234
  %22 = icmp ult i64 %21, %arraylen7, !dbg !7232
  %23 = and i1 %20, %22, !dbg !7235
  %24 = or i1 %19, %23, !dbg !7236
  br i1 %24, label %L71, label %L68, !dbg !7222

L68:                                              ; preds = %L40
  %25 = addrspacecast [1 x [2 x i64]]* %7 to [1 x [2 x i64]] addrspace(11)*, !dbg !7222
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %25) #72, !dbg !7222
  unreachable, !dbg !7222

L71:                                              ; preds = %L40
  %26 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !7237
  %27 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !7239
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !7240
  %28 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !7240
  %29 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !7240
  %30 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %28) #73, !dbg !7240
  %"'ipc4" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !7243
  %31 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !7243
  %32 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc4"), !dbg !7243
  %33 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %31) #73, !dbg !7243
  %"'ipc3" = bitcast {}* %32 to i8**, !dbg !7243
  %34 = bitcast {}* %33 to i8**, !dbg !7243
  %"arrayptr10'ipl" = load i8*, i8** %"'ipc3", align 8, !dbg !7243, !tbaa !382, !alias.scope !7246, !noalias !7247, !nonnull !68
  %35 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %3, i32 0, i32 1, !dbg !7243
  store i8* %"arrayptr10'ipl", i8** %35, align 8, !dbg !7243
  %arrayptr10 = load i8*, i8** %34, align 8, !dbg !7243, !tbaa !382, !alias.scope !7223, !noalias !7226, !nonnull !68
  %36 = shl i64 %2, 3, !dbg !7248
  %37 = add i64 %36, -8, !dbg !7248
  %"'ipg" = getelementptr i8, i8* %"arrayptr10'ipl", i64 %37, !dbg !7250
  %38 = getelementptr i8, i8* %arrayptr10, i64 %37, !dbg !7250
  %"'ipc" = bitcast {}* %29 to i8**, !dbg !7240
  %39 = bitcast {}* %30 to i8**, !dbg !7240
  %"arrayptr'ipl" = load i8*, i8** %"'ipc", align 8, !dbg !7240, !tbaa !382, !alias.scope !7251, !noalias !7252, !nonnull !68
  %40 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %3, i32 0, i32 0, !dbg !7240
  store i8* %"arrayptr'ipl", i8** %40, align 8, !dbg !7240
  %arrayptr = load i8*, i8** %39, align 8, !dbg !7240, !tbaa !382, !alias.scope !7200, !noalias !7203, !nonnull !68
  call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(24) %arrayptr, i8* noundef nonnull align 1 dereferenceable(24) %38, i64 noundef 24, i1 noundef false) #71, !dbg !7253, !noalias !7255
  call void @llvm.julia.gc_preserve_end(token %27) #71, !dbg !7256
  call void @llvm.julia.gc_preserve_end(token %26) #71, !dbg !7257
  %41 = load { i8*, i8* }, { i8*, i8* }* %3, align 8, !dbg !7258
  ret { i8*, i8* } %41, !dbg !7258
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc nonnull {} addrspace(10)* @preprocess_julia___2136({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0) unnamed_addr #71 !dbg !7283 {
top:
  %1 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) i8* @malloc(i64 8), !enzyme_fromstack !306
  %newstruct2 = bitcast i8* %1 to [1 x [1 x i64]]*, !enzyme_caststack !68
  %2 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) i8* @malloc(i64 8), !enzyme_fromstack !306
  %newstruct27 = bitcast i8* %2 to [1 x [1 x i64]]*, !enzyme_caststack !68
  %3 = call {}*** @julia.get_pgcstack() #72
  %ptls_field30 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field30 to i64***
  %ptls_load3132 = load i64**, i64*** %4, align 8, !tbaa !69
  %5 = getelementptr inbounds i64*, i64** %ptls_load3132, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !73, !invariant.load !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #72, !dbg !7284
  fence syncscope("singlethread") seq_cst
  %6 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7285
  %7 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %6 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7285
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %7, i64 0, i32 1, !dbg !7285
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7285, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %memcpy_refined_dst = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct2, i64 0, i64 0, i64 0, !dbg !7291
  store i64 %arraylen, i64* %memcpy_refined_dst, align 8, !dbg !7291, !tbaa !133, !alias.scope !135, !noalias !7292
  %8 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraylen) #73, !dbg !7295
  %9 = bitcast {} addrspace(10)* %8 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7303
  %10 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %9 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7303
  %arraylen_ptr3 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %10, i64 0, i32 1, !dbg !7303
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr3, align 8, !dbg !7303, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  %.not = icmp eq i64 %arraylen4, %arraylen, !dbg !7307
  br i1 %.not, label %L18, label %L87, !dbg !7305

L18:                                              ; preds = %top
  %11 = addrspacecast {} addrspace(10)* %8 to {} addrspace(11)*, !dbg !7311
  %12 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !7311
  %.not33 = icmp eq {} addrspace(11)* %11, %12, !dbg !7311
  br i1 %.not33, label %L34, label %L21, !dbg !7311

L21:                                              ; preds = %L18
  %13 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %11) #74, !dbg !7316
  %14 = bitcast {}* %13 to i8**, !dbg !7316
  %arrayptr19 = load i8*, i8** %14, align 8, !dbg !7316, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %15 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %12) #74, !dbg !7316
  %16 = bitcast {}* %15 to i8**, !dbg !7316
  %arrayptr21 = load i8*, i8** %16, align 8, !dbg !7316, !tbaa !382, !alias.scope !335, !noalias !336, !nonnull !68
  %.not39.not = icmp eq i8* %arrayptr19, %arrayptr21, !dbg !7321
  br i1 %.not39.not, label %L29, label %L34, !dbg !7320

L29:                                              ; preds = %L21
  %17 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %0) #72, !dbg !7324
  %.phi.trans.insert = bitcast {} addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert45 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr7.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert45, i64 0, i32 1
  %arraylen8.pre = load i64, i64 addrspace(11)* %arraylen_ptr7.phi.trans.insert, align 8, !dbg !7326, !tbaa !332, !range !87, !alias.scope !335, !noalias !336
  br label %L34, !dbg !7320

L34:                                              ; preds = %L29, %L21, %L18
  %arraylen8 = phi i64 [ %arraylen8.pre, %L29 ], [ %arraylen, %L18 ], [ %arraylen, %L21 ], !dbg !7326
  %value_phi6 = phi {} addrspace(10)* [ %17, %L29 ], [ %0, %L18 ], [ %0, %L21 ]
  %.not36 = icmp eq i64 %arraylen8, 1, !dbg !7330
  %.not34 = icmp eq i64 %arraylen, 0, !dbg !7334
  br i1 %.not34, label %L98, label %L81.lr.ph, !dbg !7335

L81.lr.ph:                                        ; preds = %L34
  %18 = bitcast {} addrspace(10)* %value_phi6 to double addrspace(13)* addrspace(10)*
  %19 = addrspacecast double addrspace(13)* addrspace(10)* %18 to double addrspace(13)* addrspace(11)*
  %arrayptr37 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %19, align 8, !tbaa !382, !alias.scope !7337, !noalias !336, !nonnull !68
  %20 = bitcast {} addrspace(10)* %8 to double addrspace(13)* addrspace(10)*
  %21 = addrspacecast double addrspace(13)* addrspace(10)* %20 to double addrspace(13)* addrspace(11)*
  %arrayptr1538 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %21, align 8, !tbaa !382, !alias.scope !7337, !noalias !336, !nonnull !68
  br label %L81, !dbg !7338

L81:                                              ; preds = %L81, %L81.lr.ph
  %iv = phi i64 [ %iv.next, %L81 ], [ 0, %L81.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7339
  %22 = select i1 %.not36, i64 0, i64 %iv, !dbg !7339
  %23 = getelementptr inbounds double, double addrspace(13)* %arrayptr37, i64 %22, !dbg !7339
  %arrayref = load double, double addrspace(13)* %23, align 8, !dbg !7339, !tbaa !269, !alias.scope !117, !noalias !271
  %24 = fneg double %arrayref, !dbg !7346
  %25 = getelementptr inbounds double, double addrspace(13)* %arrayptr1538, i64 %iv, !dbg !7349
  store double %24, double addrspace(13)* %25, align 8, !dbg !7349, !tbaa !269, !alias.scope !117, !noalias !7350
  %exitcond.not = icmp eq i64 %iv.next, %arraylen, !dbg !7351
  br i1 %exitcond.not, label %L98.loopexit, label %L81, !dbg !7338, !llvm.loop !7352

L87:                                              ; preds = %top
  %26 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct27, i64 0, i64 0, i64 0, !dbg !7353
  store i64 %arraylen4, i64* %26, align 8, !dbg !7353, !tbaa !133, !alias.scope !135, !noalias !7292
  %27 = addrspacecast [1 x [1 x i64]]* %newstruct27 to [1 x [1 x i64]] addrspace(11)*, !dbg !7305
  %28 = addrspacecast [1 x [1 x i64]]* %newstruct2 to [1 x [1 x i64]] addrspace(11)*, !dbg !7305
  call fastcc void @julia_throwdm_1978([1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %27, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %28) #75, !dbg !7305
  unreachable, !dbg !7305

L98.loopexit:                                     ; preds = %L81
  br label %L98, !dbg !7284

L98:                                              ; preds = %L98.loopexit, %L34
  ret {} addrspace(10)* %8, !dbg !7284
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2136({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'") unnamed_addr #71 !dbg !7357 {
top:
  %1 = alloca { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %2 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %1, i32 0, i32 0
  %3 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %3, align 8
  %4 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %"iv'ac" = alloca i64, align 8
  %newstruct27 = alloca [1 x [1 x i64]], i64 1, align 8
  %7 = bitcast [1 x [1 x i64]]* %newstruct27 to i8*
  %newstruct2 = alloca [1 x [1 x i64]], i64 1, align 8
  %8 = bitcast [1 x [1 x i64]]* %newstruct2 to i8*
  %9 = bitcast i8* %8 to [1 x [1 x i64]]*, !enzyme_caststack !68
  %10 = bitcast i8* %7 to [1 x [1 x i64]]*, !enzyme_caststack !68
  %11 = call {}*** @julia.get_pgcstack() #72
  %ptls_field30 = getelementptr inbounds {}**, {}*** %11, i64 2
  %12 = bitcast {}*** %ptls_field30 to i64***
  %ptls_load3132 = load i64**, i64*** %12, align 8, !tbaa !69, !alias.scope !7358, !noalias !7361
  %13 = getelementptr inbounds i64*, i64** %ptls_load3132, i64 2
  %safepoint = load i64*, i64** %13, align 8, !tbaa !73, !invariant.load !68, !alias.scope !7363, !noalias !7366
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #72, !dbg !7368
  fence syncscope("singlethread") seq_cst
  %14 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7369
  %15 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %14 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7369
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %15, i64 0, i32 1, !dbg !7369
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7369, !tbaa !332, !range !87, !alias.scope !7375, !noalias !7378
  %16 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 4, !dbg !7380
  store i64 %arraylen, i64* %16, align 8, !dbg !7380
  %memcpy_refined_dst = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %9, i64 0, i64 0, i64 0, !dbg !7380
  store i64 %arraylen, i64* %memcpy_refined_dst, align 8, !dbg !7380, !tbaa !133, !alias.scope !135, !noalias !7381
  %17 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraylen), !dbg !7384
  %18 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 0, !dbg !7384
  store {} addrspace(10)* %17, {} addrspace(10)** %18, align 8, !dbg !7384
  %19 = mul i64 %arraylen, 8, !dbg !7384
  %20 = bitcast {} addrspace(10)* %17 to i8 addrspace(13)* addrspace(10)*, !dbg !7384
  %21 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %20, align 8, !dbg !7384
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %21, i8 0, i64 %19, i1 false), !dbg !7384
  %22 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraylen) #73, !dbg !7384
  %23 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 1, !dbg !7392
  store {} addrspace(10)* %22, {} addrspace(10)** %23, align 8, !dbg !7392
  %24 = bitcast {} addrspace(10)* %22 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7392
  %25 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %24 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7392
  %arraylen_ptr3 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %25, i64 0, i32 1, !dbg !7392
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr3, align 8, !dbg !7392, !tbaa !332, !range !87, !alias.scope !7396, !noalias !7399
  %.not = icmp eq i64 %arraylen4, %arraylen, !dbg !7401
  br i1 %.not, label %L18, label %L87, !dbg !7394

L18:                                              ; preds = %top
  %26 = addrspacecast {} addrspace(10)* %22 to {} addrspace(11)*, !dbg !7405
  %27 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !7405
  %.not33 = icmp eq {} addrspace(11)* %26, %27, !dbg !7405
  br i1 %.not33, label %L34, label %L21, !dbg !7405

L21:                                              ; preds = %L18
  %28 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %26) #74, !dbg !7410
  %29 = bitcast {}* %28 to i8**, !dbg !7410
  %arrayptr19 = load i8*, i8** %29, align 8, !dbg !7410, !tbaa !382, !alias.scope !7396, !noalias !7399, !nonnull !68
  %30 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %27) #74, !dbg !7410
  %31 = bitcast {}* %30 to i8**, !dbg !7410
  %arrayptr21 = load i8*, i8** %31, align 8, !dbg !7410, !tbaa !382, !alias.scope !7375, !noalias !7378, !nonnull !68
  %.not39.not = icmp eq i8* %arrayptr19, %arrayptr21, !dbg !7415
  %32 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 5, !dbg !7414
  store i1 %.not39.not, i1* %32, align 1, !dbg !7414
  br i1 %.not39.not, label %L29, label %L34, !dbg !7414

L29:                                              ; preds = %L21
  %33 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'"), !dbg !7418
  %34 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 2, !dbg !7418
  store {} addrspace(10)* %33, {} addrspace(10)** %34, align 8, !dbg !7418
  %35 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !7418
  %36 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %35, i32 0, i32 3, !dbg !7418
  %37 = load i16, i16 addrspace(10)* %36, align 2, !dbg !7418
  %38 = zext i16 %37 to i64, !dbg !7418
  %39 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !7418
  %40 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %39, i32 0, i32 1, !dbg !7418
  %41 = load i64, i64 addrspace(10)* %40, align 8, !dbg !7418
  %42 = mul i64 %41, %38, !dbg !7418
  %43 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !7418
  %44 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %43, align 8, !dbg !7418
  %45 = bitcast {} addrspace(10)* %33 to i8 addrspace(13)* addrspace(10)*, !dbg !7418
  %46 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %45, align 8, !dbg !7418
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %46, i8 0, i64 %42, i1 false), !dbg !7418
  %47 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %0) #72, !dbg !7418
  %48 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 3
  store {} addrspace(10)* %47, {} addrspace(10)** %48, align 8
  %.phi.trans.insert = bitcast {} addrspace(10)* %47 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert45 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr7.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert45, i64 0, i32 1
  %arraylen8.pre = load i64, i64 addrspace(11)* %arraylen_ptr7.phi.trans.insert, align 8, !dbg !7420, !tbaa !332, !range !87, !alias.scope !7424, !noalias !7427
  br label %L34, !dbg !7414

L34:                                              ; preds = %L29, %L21, %L18
  %arraylen8 = phi i64 [ %arraylen8.pre, %L29 ], [ %arraylen, %L18 ], [ %arraylen, %L21 ], !dbg !7420
  %49 = phi {} addrspace(10)* [ %33, %L29 ], [ %"'", %L18 ], [ %"'", %L21 ]
  %value_phi6 = phi {} addrspace(10)* [ %47, %L29 ], [ %0, %L18 ], [ %0, %L21 ]
  %.not36 = icmp eq i64 %arraylen8, 1, !dbg !7429
  %50 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %2, i32 0, i32 6, !dbg !7433
  store i1 %.not36, i1* %50, align 1, !dbg !7433
  %.not34 = icmp eq i64 %arraylen, 0, !dbg !7433
  br i1 %.not34, label %L98, label %L81.lr.ph, !dbg !7434

L81.lr.ph:                                        ; preds = %L34
  %"'ipc4" = bitcast {} addrspace(10)* %49 to double addrspace(13)* addrspace(10)*
  %51 = bitcast {} addrspace(10)* %value_phi6 to double addrspace(13)* addrspace(10)*
  %"'ipc5" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc4" to double addrspace(13)* addrspace(11)*
  %52 = addrspacecast double addrspace(13)* addrspace(10)* %51 to double addrspace(13)* addrspace(11)*
  %"arrayptr37'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc5", align 8, !tbaa !382, !alias.scope !7436, !noalias !7441, !nonnull !68
  %arrayptr37 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %52, align 8, !tbaa !382, !alias.scope !7443, !noalias !7444, !nonnull !68
  %"'ipc" = bitcast {} addrspace(10)* %17 to double addrspace(13)* addrspace(10)*
  %53 = bitcast {} addrspace(10)* %22 to double addrspace(13)* addrspace(10)*
  %"'ipc3" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %54 = addrspacecast double addrspace(13)* addrspace(10)* %53 to double addrspace(13)* addrspace(11)*
  %"arrayptr1538'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc3", align 8, !tbaa !382, !alias.scope !7445, !noalias !7446, !nonnull !68
  %arrayptr1538 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %54, align 8, !tbaa !382, !alias.scope !7447, !noalias !7399, !nonnull !68
  %55 = add nsw i64 %arraylen, -1, !dbg !7448
  br label %L81, !dbg !7448

L81:                                              ; preds = %L81, %L81.lr.ph
  %iv = phi i64 [ %iv.next, %L81 ], [ 0, %L81.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7449
  %56 = select i1 %.not36, i64 0, i64 %iv, !dbg !7449
  %57 = getelementptr inbounds double, double addrspace(13)* %arrayptr37, i64 %56, !dbg !7449
  %arrayref = load double, double addrspace(13)* %57, align 8, !dbg !7449, !tbaa !269, !alias.scope !7456, !noalias !7459
  %58 = fneg double %arrayref, !dbg !7461
  %59 = getelementptr inbounds double, double addrspace(13)* %arrayptr1538, i64 %iv, !dbg !7464
  store double %58, double addrspace(13)* %59, align 8, !dbg !7464, !tbaa !269, !alias.scope !7465, !noalias !7468
  %exitcond.not = icmp eq i64 %iv.next, %arraylen, !dbg !7470
  br i1 %exitcond.not, label %L98.loopexit, label %L81, !dbg !7448, !llvm.loop !7471

L87:                                              ; preds = %top
  %60 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %10, i64 0, i64 0, i64 0, !dbg !7472
  store i64 %arraylen4, i64* %60, align 8, !dbg !7472, !tbaa !133, !alias.scope !135, !noalias !7381
  %61 = addrspacecast [1 x [1 x i64]]* %10 to [1 x [1 x i64]] addrspace(11)*, !dbg !7394
  %62 = addrspacecast [1 x [1 x i64]]* %9 to [1 x [1 x i64]] addrspace(11)*, !dbg !7394
  call fastcc void @julia_throwdm_1978([1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %61, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %62) #75, !dbg !7394
  unreachable, !dbg !7394

L98.loopexit:                                     ; preds = %L81
  br label %L98, !dbg !7368

L98:                                              ; preds = %L98.loopexit, %L34
  %63 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %1, i32 0, i32 1, !dbg !7368
  store {} addrspace(10)* %22, {} addrspace(10)** %63, align 8, !dbg !7368
  %64 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %1, i32 0, i32 2, !dbg !7368
  store {} addrspace(10)* %17, {} addrspace(10)** %64, align 8, !dbg !7368
  %65 = load { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %1, align 8, !dbg !7368
  ret { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %65, !dbg !7368
}

; Function Attrs: mustprogress willreturn
define internal fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143.354({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", i64 noundef signext "enzyme_inactive" %2) unnamed_addr #70 !dbg !7476 {
top:
  %3 = alloca { i8*, i8* }, align 8
  %newstruct5 = alloca [1 x [2 x i64]], i64 1, align 8
  %4 = bitcast [1 x [2 x i64]]* %newstruct5 to i8*
  %newstruct2 = alloca [1 x [2 x i64]], i64 1, align 8
  %5 = bitcast [1 x [2 x i64]]* %newstruct2 to i8*
  %6 = bitcast i8* %5 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %7 = bitcast i8* %4 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %8 = call {}*** @julia.get_pgcstack() #72
  %ptls_field15 = getelementptr inbounds {}**, {}*** %8, i64 2
  %9 = bitcast {}*** %ptls_field15 to i64***
  %ptls_load1617 = load i64**, i64*** %9, align 8, !tbaa !69, !alias.scope !7477, !noalias !7480
  %10 = getelementptr inbounds i64*, i64** %ptls_load1617, i64 2
  %safepoint = load i64*, i64** %10, align 8, !tbaa !73, !invariant.load !68, !alias.scope !7482, !noalias !7485
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #72, !dbg !7487
  fence syncscope("singlethread") seq_cst
  %newstruct.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %6, i64 0, i64 0, i64 0, !dbg !7488
  store i64 1, i64* %newstruct.sroa.0.0..sroa_idx, align 8, !dbg !7488, !tbaa !133, !alias.scope !135, !noalias !7490
  %newstruct.sroa.2.0..sroa_idx22 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %6, i64 0, i64 0, i64 1, !dbg !7488
  store i64 3, i64* %newstruct.sroa.2.0..sroa_idx22, align 8, !dbg !7488, !tbaa !133, !alias.scope !135, !noalias !7490
  %11 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7493
  %12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7493
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %12, i64 0, i32 1, !dbg !7493
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7493, !tbaa !332, !range !87, !alias.scope !7499, !noalias !7502
  %13 = icmp ugt i64 %arraylen, 2, !dbg !7504
  br i1 %13, label %L40, label %L36, !dbg !7498

L36:                                              ; preds = %top
  %14 = addrspacecast [1 x [2 x i64]]* %6 to [1 x [2 x i64]] addrspace(11)*, !dbg !7498
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %14) #73, !dbg !7498
  unreachable, !dbg !7498

L40:                                              ; preds = %top
  %15 = add i64 %2, -1, !dbg !7507
  %16 = add i64 %2, 2, !dbg !7509
  %.not19 = icmp sgt i64 %2, 9223372036854775805, !dbg !7510
  %value_phi3 = select i1 %.not19, i64 %15, i64 %16, !dbg !7512
  %newstruct4.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %7, i64 0, i64 0, i64 0, !dbg !7515
  store i64 %2, i64* %newstruct4.sroa.0.0..sroa_idx, align 8, !dbg !7515, !tbaa !133, !alias.scope !135, !noalias !7490
  %newstruct4.sroa.2.0..sroa_idx21 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %7, i64 0, i64 0, i64 1, !dbg !7515
  store i64 %value_phi3, i64* %newstruct4.sroa.2.0..sroa_idx21, align 8, !dbg !7515, !tbaa !133, !alias.scope !135, !noalias !7490
  %17 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7516
  %18 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7516
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %18, i64 0, i32 1, !dbg !7516
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !7516, !tbaa !332, !range !87, !alias.scope !7522, !noalias !7525
  %19 = icmp slt i64 %value_phi3, %2, !dbg !7527
  %20 = icmp ult i64 %15, %arraylen7, !dbg !7531
  %21 = add i64 %value_phi3, -1, !dbg !7533
  %22 = icmp ult i64 %21, %arraylen7, !dbg !7531
  %23 = and i1 %20, %22, !dbg !7534
  %24 = or i1 %19, %23, !dbg !7535
  br i1 %24, label %L71, label %L68, !dbg !7521

L68:                                              ; preds = %L40
  %25 = addrspacecast [1 x [2 x i64]]* %7 to [1 x [2 x i64]] addrspace(11)*, !dbg !7521
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %25) #73, !dbg !7521
  unreachable, !dbg !7521

L71:                                              ; preds = %L40
  %26 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !7536
  %27 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !7538
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !7539
  %28 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !7539
  %29 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !7539
  %30 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %28) #74, !dbg !7539
  %"'ipc4" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !7542
  %31 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !7542
  %32 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc4"), !dbg !7542
  %33 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %31) #74, !dbg !7542
  %"'ipc3" = bitcast {}* %32 to i8**, !dbg !7542
  %34 = bitcast {}* %33 to i8**, !dbg !7542
  %"arrayptr10'ipl" = load i8*, i8** %"'ipc3", align 8, !dbg !7542, !tbaa !382, !alias.scope !7545, !noalias !7546, !nonnull !68
  %35 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %3, i32 0, i32 1, !dbg !7542
  store i8* %"arrayptr10'ipl", i8** %35, align 8, !dbg !7542
  %arrayptr10 = load i8*, i8** %34, align 8, !dbg !7542, !tbaa !382, !alias.scope !7522, !noalias !7525, !nonnull !68
  %36 = shl i64 %2, 3, !dbg !7547
  %37 = add i64 %36, -8, !dbg !7547
  %"'ipg" = getelementptr i8, i8* %"arrayptr10'ipl", i64 %37, !dbg !7549
  %38 = getelementptr i8, i8* %arrayptr10, i64 %37, !dbg !7549
  %"'ipc" = bitcast {}* %29 to i8**, !dbg !7539
  %39 = bitcast {}* %30 to i8**, !dbg !7539
  %"arrayptr'ipl" = load i8*, i8** %"'ipc", align 8, !dbg !7539, !tbaa !382, !alias.scope !7550, !noalias !7551, !nonnull !68
  %40 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %3, i32 0, i32 0, !dbg !7539
  store i8* %"arrayptr'ipl", i8** %40, align 8, !dbg !7539
  %arrayptr = load i8*, i8** %39, align 8, !dbg !7539, !tbaa !382, !alias.scope !7499, !noalias !7502, !nonnull !68
  call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(24) %arrayptr, i8* noundef nonnull align 1 dereferenceable(24) %38, i64 noundef 24, i1 noundef false) #72, !dbg !7552, !noalias !7554
  call void @llvm.julia.gc_preserve_end(token %27) #72, !dbg !7555
  call void @llvm.julia.gc_preserve_end(token %26) #72, !dbg !7556
  %41 = load { i8*, i8* }, { i8*, i8* }* %3, align 8, !dbg !7557
  ret { i8*, i8* } %41, !dbg !7557
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } @augmented_julia___1991.355([1 x {} addrspace(10)*] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(8) %0, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") unnamed_addr #68 !dbg !7563 {
top:
  %3 = alloca { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }, align 8
  %4 = getelementptr inbounds { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }, { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }* %3, i32 0, i32 0
  %5 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %10 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %10, align 8
  %11 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %11, align 8
  %12 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i64 0, i32 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %12, align 8
  %"iv'ac" = alloca i64, align 8
  %_cache = alloca i64*, align 8
  %_cache8 = alloca double*, align 8
  %_cache10 = alloca i64*, align 8
  %_cache12 = alloca double*, align 8
  %13 = call {}*** @julia.get_pgcstack() #72
  %ptls_field15 = getelementptr inbounds {}**, {}*** %13, i64 2
  %14 = bitcast {}*** %ptls_field15 to i64***
  %ptls_load1617 = load i64**, i64*** %14, align 8, !tbaa !69, !alias.scope !7564, !noalias !7567
  %15 = getelementptr inbounds i64*, i64** %ptls_load1617, i64 2
  %safepoint = load i64*, i64** %15, align 8, !tbaa !73, !invariant.load !68, !alias.scope !7569, !noalias !7572
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #72, !dbg !7574
  fence syncscope("singlethread") seq_cst
  %"getfield_addr'ipg" = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %"'", i64 0, i64 0, !dbg !7575
  %getfield_addr = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %0, i64 0, i64 0, !dbg !7575
  %"getfield'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"getfield_addr'ipg" unordered, align 8, !dbg !7575, !tbaa !73, !alias.scope !7578, !noalias !7581, !nonnull !68, !dereferenceable !453
  %getfield = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %getfield_addr unordered, align 8, !dbg !7575, !tbaa !73, !invariant.load !68, !alias.scope !7583, !noalias !7584, !nonnull !68, !dereferenceable !453, !align !454
  %16 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !7585
  %arraysize_ptr18 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %16, i64 4, !dbg !7585
  %17 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr18 to i64 addrspace(10)*, !dbg !7585
  %18 = addrspacecast i64 addrspace(10)* %17 to i64 addrspace(11)*, !dbg !7585
  %arraysize = load i64, i64 addrspace(11)* %18, align 8, !dbg !7585, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !7589, !noalias !7592
  %19 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 7, !dbg !7594
  store i64 %arraysize, i64* %19, align 8, !dbg !7594
  %20 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize), !dbg !7594
  %21 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 3, !dbg !7594
  store {} addrspace(10)* %20, {} addrspace(10)** %21, align 8, !dbg !7594
  %22 = mul i64 %arraysize, 8, !dbg !7594
  %23 = bitcast {} addrspace(10)* %20 to i8 addrspace(13)* addrspace(10)*, !dbg !7594
  %24 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %23, align 8, !dbg !7594
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %24, i8 0, i64 %22, i1 false), !dbg !7594
  %25 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize) #73, !dbg !7594
  %26 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 4, !dbg !7598
  store {} addrspace(10)* %25, {} addrspace(10)** %26, align 8, !dbg !7598
  %_augmented = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1994({} addrspace(10)* align 16 %25, {} addrspace(10)* align 16 %20, i32 zeroext 1409286144, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %getfield, {} addrspace(10)* align 16 %"getfield'ipl"), !dbg !7598
  %subcache = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 0, !dbg !7598
  %27 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 0, !dbg !7598
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }* %27, align 8, !dbg !7598
  %28 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 1, !dbg !7598
  %29 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 1, !dbg !7598
  store {} addrspace(10)* %28, {} addrspace(10)** %29, align 8, !dbg !7598
  %"'ac" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented, 2, !dbg !7598
  %30 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 2, !dbg !7601
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %30, align 8, !dbg !7601
  %31 = bitcast {} addrspace(10)* %28 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7601
  %32 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %31 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7601
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %32, i64 0, i32 1, !dbg !7601
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7601, !tbaa !332, !range !87, !alias.scope !7605, !noalias !7608
  %33 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 8, !dbg !7601
  store i64 %arraylen, i64* %33, align 8, !dbg !7601
  %34 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7601
  %35 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %34 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7601
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %35, i64 0, i32 1, !dbg !7601
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !7601, !tbaa !332, !range !87, !alias.scope !7610, !noalias !7613
  %.not = icmp eq i64 %arraylen, %arraylen7, !dbg !7615
  br i1 %.not, label %L33, label %L39, !dbg !7616

L33:                                              ; preds = %top
  %36 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %28, {} addrspace(10)* %"'ac", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !7617
  %"'ipc7" = addrspacecast {} addrspace(10)* %"'ac" to {} addrspace(11)*, !dbg !7618
  %37 = addrspacecast {} addrspace(10)* %28 to {} addrspace(11)*, !dbg !7618
  %38 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc7"), !dbg !7618
  %39 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %37) #74, !dbg !7618
  %"'ipc6" = bitcast {}* %38 to double**, !dbg !7618
  %40 = bitcast {}* %39 to double**, !dbg !7618
  %"arrayptr19'ipl" = load double*, double** %"'ipc6", align 8, !dbg !7618, !tbaa !382, !alias.scope !7622, !noalias !7623, !nonnull !68
  %41 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 6, !dbg !7618
  store double* %"arrayptr19'ipl", double** %41, align 8, !dbg !7618
  %arrayptr19 = load double*, double** %40, align 8, !dbg !7618, !tbaa !382, !alias.scope !7605, !noalias !7608, !nonnull !68
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !7618
  %42 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !7618
  %43 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !7618
  %44 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %42) #74, !dbg !7618
  %"'ipc" = bitcast {}* %43 to double**, !dbg !7618
  %45 = bitcast {}* %44 to double**, !dbg !7618
  %"arrayptr920'ipl" = load double*, double** %"'ipc", align 8, !dbg !7618, !tbaa !382, !alias.scope !7624, !noalias !7625, !nonnull !68
  %46 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 5, !dbg !7618
  store double* %"arrayptr920'ipl", double** %46, align 8, !dbg !7618
  %arrayptr920 = load double*, double** %45, align 8, !dbg !7618, !tbaa !382, !alias.scope !7610, !noalias !7613, !nonnull !68
  %.not31 = icmp eq i64 %arraylen, 0, !dbg !7626
  br i1 %.not31, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !7626

.preheader.preheader:                             ; preds = %L33
  %47 = add nsw i64 %arraylen, -1, !dbg !7626
  %48 = add nuw i64 %47, 1, !dbg !7626
  %49 = mul nuw i64 %48, 8, !dbg !7626
  %50 = call noalias nonnull i8* @malloc(i64 %49), !dbg !7626
  %_malloccache = bitcast i8* %50 to i64*, !dbg !7626
  %51 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 9, !dbg !7626
  store i64* %_malloccache, i64** %51, align 8, !dbg !7626
  store i64* %_malloccache, i64** %_cache, align 8, !dbg !7626, !invariant.group !7627
  %52 = mul nuw i64 %48, 8, !dbg !7626
  %53 = call noalias nonnull i8* @malloc(i64 %52), !dbg !7626
  %_malloccache9 = bitcast i8* %53 to double*, !dbg !7626
  %54 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 10, !dbg !7626
  store double* %_malloccache9, double** %54, align 8, !dbg !7626
  store double* %_malloccache9, double** %_cache8, align 8, !dbg !7626, !invariant.group !7628
  %55 = mul nuw i64 %48, 8, !dbg !7626
  %56 = call noalias nonnull i8* @malloc(i64 %55), !dbg !7626
  %_malloccache11 = bitcast i8* %56 to i64*, !dbg !7626
  %57 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 11, !dbg !7626
  store i64* %_malloccache11, i64** %57, align 8, !dbg !7626
  store i64* %_malloccache11, i64** %_cache10, align 8, !dbg !7626, !invariant.group !7629
  %58 = mul nuw i64 %48, 8, !dbg !7626
  %59 = call noalias nonnull i8* @malloc(i64 %58), !dbg !7626
  %_malloccache13 = bitcast i8* %59 to double*, !dbg !7626
  %60 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %4, i32 0, i32 12, !dbg !7626
  store double* %_malloccache13, double** %60, align 8, !dbg !7626
  store double* %_malloccache13, double** %_cache12, align 8, !dbg !7626, !invariant.group !7630
  br label %.preheader, !dbg !7626

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !7626
  %61 = phi i64 [ %82, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7626
  %62 = phi i64 [ %81, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7626
  %63 = phi double [ %80, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !7626
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7626
  %64 = shl i64 %62, 32, !dbg !7626
  %65 = ashr exact i64 %64, 32, !dbg !7626
  %66 = load i64*, i64** %_cache, align 8, !dbg !7626, !dereferenceable !306, !invariant.group !7627
  %67 = getelementptr inbounds i64, i64* %66, i64 %iv, !dbg !7626
  store i64 %65, i64* %67, align 8, !dbg !7626, !invariant.group !7631
  %68 = getelementptr inbounds double, double* %arrayptr19, i64 %65, !dbg !7626
  %69 = load double, double* %68, align 8, !dbg !7626, !tbaa !1731, !alias.scope !7632, !noalias !7635
  %70 = load double*, double** %_cache8, align 8, !dbg !7626, !dereferenceable !306, !invariant.group !7628
  %71 = getelementptr inbounds double, double* %70, i64 %iv, !dbg !7626
  store double %69, double* %71, align 8, !dbg !7626, !tbaa !1731, !invariant.group !7637
  %72 = shl i64 %61, 32, !dbg !7626
  %73 = ashr exact i64 %72, 32, !dbg !7626
  %74 = load i64*, i64** %_cache10, align 8, !dbg !7626, !dereferenceable !306, !invariant.group !7629
  %75 = getelementptr inbounds i64, i64* %74, i64 %iv, !dbg !7626
  store i64 %73, i64* %75, align 8, !dbg !7626, !invariant.group !7638
  %76 = getelementptr inbounds double, double* %arrayptr920, i64 %73, !dbg !7626
  %77 = load double, double* %76, align 8, !dbg !7626, !tbaa !1731, !alias.scope !7639, !noalias !7642
  %78 = load double*, double** %_cache12, align 8, !dbg !7626, !dereferenceable !306, !invariant.group !7630
  %79 = getelementptr inbounds double, double* %78, i64 %iv, !dbg !7626
  store double %77, double* %79, align 8, !dbg !7626, !tbaa !1731, !invariant.group !7644
  %80 = call double @llvm.fmuladd.f64(double %69, double %77, double %63) #72, !dbg !7626
  %81 = add nsw i64 %65, 1, !dbg !7626
  %82 = add nsw i64 %73, 1, !dbg !7626
  %83 = icmp eq i64 %iv.next, %arraylen, !dbg !7626
  br i1 %83, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !7626, !llvm.loop !7645

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !7617

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L33
  %84 = phi double [ 0.000000e+00, %L33 ], [ %80, %cblas_ddot64_.exit.loopexit ], !dbg !7626
  call void @llvm.julia.gc_preserve_end(token %36) #72, !dbg !7617
  %85 = getelementptr inbounds { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }, { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }* %3, i32 0, i32 1, !dbg !7574
  store double %84, double* %85, align 8, !dbg !7574
  %86 = load { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }, { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double }* %3, align 8, !dbg !7574
  ret { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } %86, !dbg !7574

L39:                                              ; preds = %top
  %current_task1021 = getelementptr inbounds {}**, {}*** %13, i64 -14, !dbg !7646
  %current_task10 = bitcast {}*** %current_task1021 to {}**, !dbg !7646
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #75, !dbg !7646
  %87 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !7646
  %88 = addrspacecast {} addrspace(10)* addrspace(10)* %87 to {} addrspace(10)* addrspace(11)*, !dbg !7646
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %88, align 8, !dbg !7646, !tbaa !307, !alias.scope !117, !noalias !7647
  %89 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %88, i64 1, !dbg !7646
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %89, align 8, !dbg !7646, !tbaa !307, !alias.scope !117, !noalias !7647
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #75, !dbg !7646
  %90 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !7646
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %90, i64 0, i32 0, !dbg !7646
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269529280 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !7646, !tbaa !113, !alias.scope !117, !noalias !7647
  %.repack23 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %90, i64 0, i32 1, !dbg !7646
  store i64 %arraylen, i64 addrspace(10)* %.repack23, align 8, !dbg !7646, !tbaa !113, !alias.scope !117, !noalias !7647
  %.repack25 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %90, i64 0, i32 2, !dbg !7646
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269529248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack25, align 8, !dbg !7646, !tbaa !113, !alias.scope !117, !noalias !7647
  %.repack27 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %90, i64 0, i32 3, !dbg !7646
  store i64 %arraylen7, i64 addrspace(10)* %.repack27, align 8, !dbg !7646, !tbaa !113, !alias.scope !117, !noalias !7647
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %88 release, align 8, !dbg !7646, !tbaa !307, !alias.scope !117, !noalias !7647
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nonnull %newstruct, {} addrspace(10)* nonnull %box) #76, !dbg !7646
  %91 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !7646
  %92 = addrspacecast i8 addrspace(10)* %91 to i8 addrspace(11)*, !dbg !7646
  %93 = getelementptr inbounds i8, i8 addrspace(11)* %92, i64 8, !dbg !7646
  %94 = bitcast i8 addrspace(11)* %93 to {} addrspace(10)* addrspace(11)*, !dbg !7646
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %94 release, align 8, !dbg !7646, !tbaa !307, !alias.scope !117, !noalias !7647
  %box13 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task10, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #75, !dbg !7616
  %95 = bitcast {} addrspace(10)* %box13 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !7616
  %96 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %95, i64 0, i64 0, !dbg !7616
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %96, align 8, !dbg !7616, !tbaa !113, !alias.scope !117, !noalias !7647
  %97 = addrspacecast {} addrspace(10)* %box13 to {} addrspace(12)*, !dbg !7616
  call void @ijl_throw({} addrspace(12)* %97) #72, !dbg !7616
  unreachable, !dbg !7616
}

; Function Attrs: mustprogress willreturn
define internal fastcc { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } @augmented_julia_compute_energy_2128([3 x double]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) "enzyme_sret" %0, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") unnamed_addr #69 !dbg !7543 {
top:
  %3 = alloca { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, align 8
  %4 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 6
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 10
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %10 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 12
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %10, align 8
  %11 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 13
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %11, align 8
  %12 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 16
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %12, align 8
  %13 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 17
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %13, align 8
  %14 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %14, align 8
  %15 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %15, align 8
  %16 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %16, align 8
  %17 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %17, align 8
  %18 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %18, align 8
  %19 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %19, align 8
  %20 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %20, align 8
  %21 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %21, align 8
  %22 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %22, align 8
  %23 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %23, align 8
  %24 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %24, align 8
  %25 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %25, align 8
  %"iv'ac" = alloca i64, align 8
  %newstruct = alloca [1 x [2 x i64]], i64 1, align 8
  %26 = bitcast [1 x [2 x i64]]* %newstruct to i8*
  %newstruct16 = alloca [1 x [2 x i64]], i64 1, align 8
  %27 = bitcast [1 x [2 x i64]]* %newstruct16 to i8*
  %newstruct2 = alloca [1 x [2 x i64]], i64 1, align 8
  %28 = bitcast [1 x [2 x i64]]* %newstruct2 to i8*
  %newstruct12 = alloca [1 x [2 x i64]], i64 1, align 8
  %29 = bitcast [1 x [2 x i64]]* %newstruct12 to i8*
  %_cache = alloca i64*, align 8
  %_cache24 = alloca double*, align 8
  %_cache26 = alloca i64*, align 8
  %_cache28 = alloca double*, align 8
  %30 = call {}*** @julia.get_pgcstack()
  %31 = bitcast i8* %29 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %32 = bitcast i8* %28 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %33 = bitcast i8* %27 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %34 = bitcast i8* %26 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %35 = bitcast {}*** %30 to {}**
  %36 = getelementptr inbounds {}*, {}** %35, i64 -14
  %"'ai" = alloca [1 x {} addrspace(10)*], i64 1, align 8
  %37 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %38 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %39 = bitcast {}* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull dereferenceable(8) dereferenceable_or_null(8) %39, i8 0, i64 8, i1 false)
  %40 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) {} addrspace(10)* @julia.gc_alloc_obj({}** %36, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !enzyme_fromstack !306
  %41 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 0
  store {} addrspace(10)* %40, {} addrspace(10)** %41, align 8
  %42 = bitcast {} addrspace(10)* %40 to [1 x {} addrspace(10)*] addrspace(10)*
  br label %loop.i

loop.i:                                           ; preds = %loop.i, %top
  %43 = phi i64 [ 0, %top ], [ %44, %loop.i ]
  %44 = add i64 %43, 1
  %45 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %42, i64 %43, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %45, align 8
  %46 = icmp eq i64 %44, 1
  br i1 %46, label %zeroType.353.exit, label %loop.i

zeroType.353.exit:                                ; preds = %loop.i
  %47 = addrspacecast {}* %37 to {} addrspace(10)*
  %"'ipc19" = bitcast {}* %37 to [1 x {} addrspace(10)*]*
  %48 = bitcast {} addrspace(10)* %40 to [1 x {} addrspace(10)*] addrspace(10)*, !enzyme_caststack !68
  %49 = call {}*** @julia.get_pgcstack() #72
  %ptls_field31 = getelementptr inbounds {}**, {}*** %49, i64 2
  %50 = bitcast {}*** %ptls_field31 to i64***
  %ptls_load3233 = load i64**, i64*** %50, align 8, !tbaa !69, !alias.scope !7544, !noalias !7547
  %51 = getelementptr inbounds i64*, i64** %ptls_load3233, i64 2
  %safepoint = load i64*, i64** %51, align 8, !tbaa !73, !invariant.load !68, !alias.scope !7549, !noalias !7552
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #72, !dbg !7554
  fence syncscope("singlethread") seq_cst
  %52 = bitcast [1 x [2 x i64]]* %34 to i8*, !dbg !7555
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %52, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const13 to i8*), i64 noundef 16, i1 noundef false) #72, !dbg !7555, !tbaa !86, !alias.scope !1749, !noalias !7558
  %53 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7561
  %54 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %53 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7561
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %54, i64 0, i32 1, !dbg !7561
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7561, !tbaa !332, !range !87, !alias.scope !7567, !noalias !7570
  %55 = icmp ult i64 %arraylen, 6, !dbg !7572
  br i1 %55, label %L19, label %L22, !dbg !7566

L19:                                              ; preds = %zeroType.353.exit
  %56 = addrspacecast [1 x [2 x i64]]* %34 to [1 x [2 x i64]] addrspace(11)*, !dbg !7566
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %56) #73, !dbg !7566
  unreachable, !dbg !7566

L22:                                              ; preds = %zeroType.353.exit
  %57 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 3), !dbg !7575
  %58 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 2, !dbg !7575
  store {} addrspace(10)* %57, {} addrspace(10)** %58, align 8, !dbg !7575
  %59 = bitcast {} addrspace(10)* %57 to i8 addrspace(13)* addrspace(10)*, !dbg !7575
  %60 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %59, align 8, !dbg !7575
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %60, i8 0, i64 24, i1 false), !dbg !7575
  %61 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #74, !dbg !7575
  %62 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 3, !dbg !7580
  store {} addrspace(10)* %61, {} addrspace(10)** %62, align 8, !dbg !7580
  %_augmented = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143({} addrspace(10)* align 16 %61, {} addrspace(10)* align 16 %57, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4), !dbg !7580
  %63 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 1, !dbg !7555
  store { i8*, i8* } %_augmented, { i8*, i8* }* %63, align 8, !dbg !7555
  %64 = bitcast [1 x [2 x i64]]* %32 to i8*, !dbg !7555
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %64, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const13 to i8*), i64 noundef 16, i1 noundef false) #72, !dbg !7555, !tbaa !86, !alias.scope !1749, !noalias !7558
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7561, !tbaa !332, !range !87, !alias.scope !7567, !noalias !7570
  %65 = icmp ult i64 %arraylen4, 6, !dbg !7572
  br i1 %65, label %L51, label %L54, !dbg !7566

L51:                                              ; preds = %L22
  %66 = addrspacecast [1 x [2 x i64]]* %32 to [1 x [2 x i64]] addrspace(11)*, !dbg !7566
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %66) #73, !dbg !7566
  unreachable, !dbg !7566

L54:                                              ; preds = %L22
  %67 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 3), !dbg !7575
  %68 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 5, !dbg !7575
  store {} addrspace(10)* %67, {} addrspace(10)** %68, align 8, !dbg !7575
  %69 = bitcast {} addrspace(10)* %67 to i8 addrspace(13)* addrspace(10)*, !dbg !7575
  %70 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %69, align 8, !dbg !7575
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %70, i8 0, i64 24, i1 false), !dbg !7575
  %71 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #74, !dbg !7575
  %72 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 6, !dbg !7580
  store {} addrspace(10)* %71, {} addrspace(10)** %72, align 8, !dbg !7580
  %_augmented13 = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143({} addrspace(10)* align 16 %71, {} addrspace(10)* align 16 %67, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4), !dbg !7580
  %73 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 4, !dbg !7582
  store { i8*, i8* } %_augmented13, { i8*, i8* }* %73, align 8, !dbg !7582
  %74 = bitcast {} addrspace(10)* %61 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7582
  %75 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %74 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7582
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %75, i64 0, i32 1, !dbg !7582
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !7582, !tbaa !332, !range !87, !alias.scope !7586, !noalias !7589
  %76 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 18, !dbg !7582
  store i64 %arraylen7, i64* %76, align 8, !dbg !7582
  %77 = bitcast {} addrspace(10)* %71 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7582
  %78 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %77 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7582
  %arraylen_ptr8 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %78, i64 0, i32 1, !dbg !7582
  %arraylen9 = load i64, i64 addrspace(11)* %arraylen_ptr8, align 8, !dbg !7582, !tbaa !332, !range !87, !alias.scope !7591, !noalias !7594
  %.not = icmp eq i64 %arraylen7, %arraylen9, !dbg !7596
  br i1 %.not, label %L69, label %L75, !dbg !7597

L69:                                              ; preds = %L54
  %79 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %61, {} addrspace(10)* %57, {} addrspace(10)* %71, {} addrspace(10)* %67), !dbg !7598
  %"'ipc16" = addrspacecast {} addrspace(10)* %57 to {} addrspace(11)*, !dbg !7599
  %80 = addrspacecast {} addrspace(10)* %61 to {} addrspace(11)*, !dbg !7599
  %81 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc16"), !dbg !7599
  %82 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %80) #75, !dbg !7599
  %"'ipc15" = bitcast {}* %81 to double**, !dbg !7599
  %83 = bitcast {}* %82 to double**, !dbg !7599
  %"arrayptr34'ipl" = load double*, double** %"'ipc15", align 8, !dbg !7599, !tbaa !382, !alias.scope !7603, !noalias !7604, !nonnull !68
  %84 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 8, !dbg !7599
  store double* %"arrayptr34'ipl", double** %84, align 8, !dbg !7599
  %arrayptr34 = load double*, double** %83, align 8, !dbg !7599, !tbaa !382, !alias.scope !7586, !noalias !7589, !nonnull !68
  %"'ipc14" = addrspacecast {} addrspace(10)* %67 to {} addrspace(11)*, !dbg !7599
  %85 = addrspacecast {} addrspace(10)* %71 to {} addrspace(11)*, !dbg !7599
  %86 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc14"), !dbg !7599
  %87 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %85) #75, !dbg !7599
  %"'ipc" = bitcast {}* %86 to double**, !dbg !7599
  %88 = bitcast {}* %87 to double**, !dbg !7599
  %"arrayptr1135'ipl" = load double*, double** %"'ipc", align 8, !dbg !7599, !tbaa !382, !alias.scope !7605, !noalias !7606, !nonnull !68
  %89 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 7, !dbg !7599
  store double* %"arrayptr1135'ipl", double** %89, align 8, !dbg !7599
  %arrayptr1135 = load double*, double** %88, align 8, !dbg !7599, !tbaa !382, !alias.scope !7591, !noalias !7594, !nonnull !68
  %.not58 = icmp eq i64 %arraylen7, 0, !dbg !7607
  br i1 %.not58, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !7607

.preheader.preheader:                             ; preds = %L69
  %90 = add nsw i64 %arraylen7, -1, !dbg !7607
  %91 = add nuw i64 %90, 1, !dbg !7607
  %92 = mul nuw i64 %91, 8, !dbg !7607
  %93 = call noalias nonnull i8* @malloc(i64 %92), !dbg !7607
  %_malloccache = bitcast i8* %93 to i64*, !dbg !7607
  %94 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 19, !dbg !7607
  store i64* %_malloccache, i64** %94, align 8, !dbg !7607
  store i64* %_malloccache, i64** %_cache, align 8, !dbg !7607, !invariant.group !7608
  %95 = mul nuw i64 %91, 8, !dbg !7607
  %96 = call noalias nonnull i8* @malloc(i64 %95), !dbg !7607
  %_malloccache25 = bitcast i8* %96 to double*, !dbg !7607
  %97 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 20, !dbg !7607
  store double* %_malloccache25, double** %97, align 8, !dbg !7607
  store double* %_malloccache25, double** %_cache24, align 8, !dbg !7607, !invariant.group !7609
  %98 = mul nuw i64 %91, 8, !dbg !7607
  %99 = call noalias nonnull i8* @malloc(i64 %98), !dbg !7607
  %_malloccache27 = bitcast i8* %99 to i64*, !dbg !7607
  %100 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 21, !dbg !7607
  store i64* %_malloccache27, i64** %100, align 8, !dbg !7607
  store i64* %_malloccache27, i64** %_cache26, align 8, !dbg !7607, !invariant.group !7610
  %101 = mul nuw i64 %91, 8, !dbg !7607
  %102 = call noalias nonnull i8* @malloc(i64 %101), !dbg !7607
  %_malloccache29 = bitcast i8* %102 to double*, !dbg !7607
  %103 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 22, !dbg !7607
  store double* %_malloccache29, double** %103, align 8, !dbg !7607
  store double* %_malloccache29, double** %_cache28, align 8, !dbg !7607, !invariant.group !7611
  br label %.preheader, !dbg !7607

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !7607
  %104 = phi i64 [ %125, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7607
  %105 = phi i64 [ %124, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7607
  %106 = phi double [ %123, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !7607
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7607
  %107 = shl i64 %105, 32, !dbg !7607
  %108 = ashr exact i64 %107, 32, !dbg !7607
  %109 = load i64*, i64** %_cache, align 8, !dbg !7607, !dereferenceable !306, !invariant.group !7608
  %110 = getelementptr inbounds i64, i64* %109, i64 %iv, !dbg !7607
  store i64 %108, i64* %110, align 8, !dbg !7607, !invariant.group !7612
  %111 = getelementptr inbounds double, double* %arrayptr34, i64 %108, !dbg !7607
  %112 = load double, double* %111, align 8, !dbg !7607, !tbaa !1731, !alias.scope !7613, !noalias !7616
  %113 = load double*, double** %_cache24, align 8, !dbg !7607, !dereferenceable !306, !invariant.group !7609
  %114 = getelementptr inbounds double, double* %113, i64 %iv, !dbg !7607
  store double %112, double* %114, align 8, !dbg !7607, !tbaa !1731, !invariant.group !7618
  %115 = shl i64 %104, 32, !dbg !7607
  %116 = ashr exact i64 %115, 32, !dbg !7607
  %117 = load i64*, i64** %_cache26, align 8, !dbg !7607, !dereferenceable !306, !invariant.group !7610
  %118 = getelementptr inbounds i64, i64* %117, i64 %iv, !dbg !7607
  store i64 %116, i64* %118, align 8, !dbg !7607, !invariant.group !7619
  %119 = getelementptr inbounds double, double* %arrayptr1135, i64 %116, !dbg !7607
  %120 = load double, double* %119, align 8, !dbg !7607, !tbaa !1731, !alias.scope !7620, !noalias !7623
  %121 = load double*, double** %_cache28, align 8, !dbg !7607, !dereferenceable !306, !invariant.group !7611
  %122 = getelementptr inbounds double, double* %121, i64 %iv, !dbg !7607
  store double %120, double* %122, align 8, !dbg !7607, !tbaa !1731, !invariant.group !7625
  %123 = call double @llvm.fmuladd.f64(double %112, double %120, double %106) #72, !dbg !7607
  %124 = add nsw i64 %108, 1, !dbg !7607
  %125 = add nsw i64 %116, 1, !dbg !7607
  %126 = icmp eq i64 %iv.next, %arraylen7, !dbg !7607
  br i1 %126, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !7607, !llvm.loop !7626

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  %phi.bo = fmul double %123, 5.000000e-01, !dbg !7598
  br label %cblas_ddot64_.exit, !dbg !7598

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L69
  %127 = phi double [ 0.000000e+00, %L69 ], [ %phi.bo, %cblas_ddot64_.exit.loopexit ]
  call void @llvm.julia.gc_preserve_end(token %79) #72, !dbg !7598
  %128 = bitcast [1 x [2 x i64]]* %31 to i8*, !dbg !7627
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %128, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const14 to i8*), i64 noundef 16, i1 noundef false) #72, !dbg !7627, !tbaa !86, !alias.scope !1749, !noalias !7558
  %arraylen14 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7630, !tbaa !332, !range !87, !alias.scope !7567, !noalias !7570
  %129 = icmp ult i64 %arraylen14, 3, !dbg !7636
  br i1 %129, label %L101, label %L104, !dbg !7635

L75:                                              ; preds = %L54
  %current_task2236 = getelementptr inbounds {}**, {}*** %49, i64 -14, !dbg !7639
  %current_task22 = bitcast {}*** %current_task2236 to {}**, !dbg !7639
  %newstruct23 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #76, !dbg !7639
  %130 = bitcast {} addrspace(10)* %newstruct23 to {} addrspace(10)* addrspace(10)*, !dbg !7639
  %131 = addrspacecast {} addrspace(10)* addrspace(10)* %130 to {} addrspace(10)* addrspace(11)*, !dbg !7639
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %131, align 8, !dbg !7639, !tbaa !307, !alias.scope !117, !noalias !7640
  %132 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %131, i64 1, !dbg !7639
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %132, align 8, !dbg !7639, !tbaa !307, !alias.scope !117, !noalias !7640
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #76, !dbg !7639
  %133 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !7639
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 0, !dbg !7639
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269529280 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !7639, !tbaa !113, !alias.scope !117, !noalias !7640
  %.repack38 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 1, !dbg !7639
  store i64 %arraylen7, i64 addrspace(10)* %.repack38, align 8, !dbg !7639, !tbaa !113, !alias.scope !117, !noalias !7640
  %.repack40 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 2, !dbg !7639
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269529248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack40, align 8, !dbg !7639, !tbaa !113, !alias.scope !117, !noalias !7640
  %.repack42 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 3, !dbg !7639
  store i64 %arraylen9, i64 addrspace(10)* %.repack42, align 8, !dbg !7639, !tbaa !113, !alias.scope !117, !noalias !7640
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %131 release, align 8, !dbg !7639, !tbaa !307, !alias.scope !117, !noalias !7640
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct23, {} addrspace(10)* nofree nonnull %box) #77, !dbg !7639
  %134 = bitcast {} addrspace(10)* %newstruct23 to i8 addrspace(10)*, !dbg !7639
  %135 = addrspacecast i8 addrspace(10)* %134 to i8 addrspace(11)*, !dbg !7639
  %136 = getelementptr inbounds i8, i8 addrspace(11)* %135, i64 8, !dbg !7639
  %137 = bitcast i8 addrspace(11)* %136 to {} addrspace(10)* addrspace(11)*, !dbg !7639
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %137 release, align 8, !dbg !7639, !tbaa !307, !alias.scope !117, !noalias !7640
  %box26 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #76, !dbg !7597
  %138 = bitcast {} addrspace(10)* %box26 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !7597
  %139 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %138, i64 0, i64 0, !dbg !7597
  store {} addrspace(10)* %newstruct23, {} addrspace(10)* addrspace(10)* %139, align 8, !dbg !7597, !tbaa !113, !alias.scope !117, !noalias !7640
  %140 = addrspacecast {} addrspace(10)* %box26 to {} addrspace(12)*, !dbg !7597
  call void @ijl_throw({} addrspace(12)* %140) #73, !dbg !7597
  unreachable, !dbg !7597

L101:                                             ; preds = %cblas_ddot64_.exit
  %141 = addrspacecast [1 x [2 x i64]]* %31 to [1 x [2 x i64]] addrspace(11)*, !dbg !7635
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %141) #73, !dbg !7635
  unreachable, !dbg !7635

L104:                                             ; preds = %cblas_ddot64_.exit
  %142 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 3), !dbg !7641
  %143 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 12, !dbg !7641
  store {} addrspace(10)* %142, {} addrspace(10)** %143, align 8, !dbg !7641
  %144 = bitcast {} addrspace(10)* %142 to i8 addrspace(13)* addrspace(10)*, !dbg !7641
  %145 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %144, align 8, !dbg !7641
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %145, i8 0, i64 24, i1 false), !dbg !7641
  %146 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #74, !dbg !7641
  %147 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 13, !dbg !7646
  store {} addrspace(10)* %146, {} addrspace(10)** %147, align 8, !dbg !7646
  %_augmented18 = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143.354({} addrspace(10)* align 16 %146, {} addrspace(10)* align 16 %142, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1), !dbg !7646
  %148 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 11, !dbg !7648
  store { i8*, i8* } %_augmented18, { i8*, i8* }* %148, align 8, !dbg !7648
  %_augmented17 = call fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2136({} addrspace(10)* align 16 %146, {} addrspace(10)* align 16 %142), !dbg !7648
  %subcache = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented17, 0, !dbg !7648
  %149 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 9, !dbg !7648
  store { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %subcache, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %149, align 8, !dbg !7648
  %150 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented17, 1, !dbg !7648
  %"'ac" = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented17, 2, !dbg !7648
  %151 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 10, !dbg !7627
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %151, align 8, !dbg !7627
  %152 = bitcast [1 x [2 x i64]]* %33 to i8*, !dbg !7627
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %152, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const14 to i8*), i64 noundef 16, i1 noundef false) #72, !dbg !7627, !tbaa !86, !alias.scope !1749, !noalias !7558
  %arraylen18 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7630, !tbaa !332, !range !87, !alias.scope !7567, !noalias !7570
  %153 = icmp ult i64 %arraylen18, 3, !dbg !7636
  br i1 %153, label %L135, label %L138, !dbg !7635

L135:                                             ; preds = %L104
  %154 = addrspacecast [1 x [2 x i64]]* %33 to [1 x [2 x i64]] addrspace(11)*, !dbg !7635
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %154) #73, !dbg !7635
  unreachable, !dbg !7635

L138:                                             ; preds = %L104
  %155 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 3), !dbg !7641
  %156 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 16, !dbg !7641
  store {} addrspace(10)* %155, {} addrspace(10)** %156, align 8, !dbg !7641
  %157 = bitcast {} addrspace(10)* %155 to i8 addrspace(13)* addrspace(10)*, !dbg !7641
  %158 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %157, align 8, !dbg !7641
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %158, i8 0, i64 24, i1 false), !dbg !7641
  %159 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #74, !dbg !7641
  %160 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 17, !dbg !7646
  store {} addrspace(10)* %159, {} addrspace(10)** %160, align 8, !dbg !7646
  %_augmented23 = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143.354({} addrspace(10)* align 16 %159, {} addrspace(10)* align 16 %155, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1), !dbg !7646
  %161 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 15, !dbg !7629
  store { i8*, i8* } %_augmented23, { i8*, i8* }* %161, align 8, !dbg !7629
  %"'ipg" = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %"'ipc19", i64 0, i64 0, !dbg !7629
  %162 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %48, i64 0, i64 0, !dbg !7629
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %"'ipg", align 8, !dbg !7629, !alias.scope !7649, !noalias !7652
  store {} addrspace(10)* %150, {} addrspace(10)* addrspace(10)* %162, align 8, !dbg !7629, !alias.scope !7656, !noalias !7657
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %40, {} addrspace(10)* %150), !dbg !7629
  %"'ipc20" = addrspacecast [1 x {} addrspace(10)*]* %"'ipc19" to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !7629
  %163 = addrspacecast [1 x {} addrspace(10)*] addrspace(10)* %48 to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !7629
  %_augmented21 = call fastcc { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } @augmented_julia___1991.355([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %163, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc20", {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %159, {} addrspace(10)* align 16 %155), !dbg !7629
  %subcache22 = extractvalue { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } %_augmented21, 0, !dbg !7629
  %164 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 14, !dbg !7629
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %subcache22, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %164, align 8, !dbg !7629
  %165 = extractvalue { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } %_augmented21, 1, !dbg !7629
  %166 = fmul double %165, 5.000000e-01, !dbg !7658
  %167 = fadd double %127, %166, !dbg !7659
  %newstruct20.sroa.0.0..sroa_idx = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 0, !dbg !7660
  store double %127, double* %newstruct20.sroa.0.0..sroa_idx, align 8, !dbg !7660, !alias.scope !7661, !noalias !7664
  %newstruct20.sroa.2.0..sroa_idx45 = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 1, !dbg !7660
  store double %166, double* %newstruct20.sroa.2.0..sroa_idx45, align 8, !dbg !7660, !alias.scope !7661, !noalias !7664
  %newstruct20.sroa.3.0..sroa_idx46 = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 2, !dbg !7660
  store double %167, double* %newstruct20.sroa.3.0..sroa_idx46, align 8, !dbg !7660, !alias.scope !7661, !noalias !7664
  %168 = load { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, align 8, !dbg !7660
  ret { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %168, !dbg !7660
}

warning: didn't implement memmove, using memcpy as fallback which can result in errors
; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia__copyto_impl__2143({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", i64 signext "enzyme_inactive" %2, { i8*, i8* } %tapeArg) unnamed_addr #70 !dbg !7728 {
top:
  %3 = call {}*** @julia.get_pgcstack() #72
  br i1 true, label %L40, label %L36, !dbg !7729

L36:                                              ; preds = %top
  unreachable

L40:                                              ; preds = %top
  br i1 true, label %L71, label %L68, !dbg !7731

L68:                                              ; preds = %L40
  unreachable

L71:                                              ; preds = %L40
  %4 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !7733
  %5 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !7735
  %"'ipc27" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !7736
  %6 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc27"), !dbg !7736
  %"'ipc" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !7739
  %7 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !7739
  %"arrayptr10'il_phi" = extractvalue { i8*, i8* } %tapeArg, 1, !dbg !7739
  %8 = shl i64 %2, 3, !dbg !7742
  %9 = add i64 %8, -8, !dbg !7742
  %"'ipg" = getelementptr i8, i8* %"arrayptr10'il_phi", i64 %9, !dbg !7744
  %"arrayptr'il_phi" = extractvalue { i8*, i8* } %tapeArg, 0, !dbg !7736
  call void @llvm.julia.gc_preserve_end(token %5) #72, !dbg !7745
  call void @llvm.julia.gc_preserve_end(token %4) #72, !dbg !7746
  br label %invertL71, !dbg !7747

inverttop:                                        ; preds = %invertL40
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL40:                                        ; preds = %__enzyme_memcpyadd_doubleda1sa1.exit
  br label %inverttop

invertL71:                                        ; preds = %L71
  %10 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !7746
  %11 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !7745
  %12 = bitcast i8* %"arrayptr'il_phi" to double*, !dbg !7748
  %13 = bitcast i8* %"'ipg" to double*, !dbg !7748
  br label %for.body.i, !dbg !7748

for.body.i:                                       ; preds = %for.body.i, %invertL71
  %idx.i = phi i64 [ 0, %invertL71 ], [ %idx.next.i, %for.body.i ], !dbg !7748
  %dst.i.i = getelementptr inbounds double, double* %12, i64 %idx.i, !dbg !7748
  %dst.i.l.i = load double, double* %dst.i.i, align 1, !dbg !7748
  store double 0.000000e+00, double* %dst.i.i, align 1, !dbg !7748
  %src.i.i = getelementptr inbounds double, double* %13, i64 %idx.i, !dbg !7748
  %src.i.l.i = load double, double* %src.i.i, align 1, !dbg !7748
  %14 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !7748
  store double %14, double* %src.i.i, align 1, !dbg !7748
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !7748
  %15 = icmp eq i64 3, %idx.next.i, !dbg !7748
  br i1 %15, label %__enzyme_memcpyadd_doubleda1sa1.exit, label %for.body.i, !dbg !7748

__enzyme_memcpyadd_doubleda1sa1.exit:             ; preds = %for.body.i
  call void @llvm.julia.gc_preserve_end(token %11), !dbg !7735
  call void @llvm.julia.gc_preserve_end(token %10), !dbg !7733
  br label %invertL40
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia___2136({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg) unnamed_addr #71 !dbg !7780 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %1 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %1, align 8
  %"arrayref'de" = alloca double, align 8
  %2 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %3 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %4 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %3, i32 0, i32 3
  %5 = load i16, i16 addrspace(10)* %4, align 2
  %6 = zext i16 %5 to i64
  %7 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %8 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %7, i32 0, i32 1
  %9 = load i64, i64 addrspace(10)* %8, align 8
  %10 = mul i64 %9, %6
  %11 = call {}*** @julia.get_pgcstack() #72
  %arraylen = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 4, !dbg !7781
  %12 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 0, !dbg !7788
  %13 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 1, !dbg !7788
  br i1 true, label %L18, label %L87, !dbg !7796

L18:                                              ; preds = %top
  %14 = addrspacecast {} addrspace(10)* %13 to {} addrspace(11)*, !dbg !7798
  %15 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !7798
  %.not33 = icmp eq {} addrspace(11)* %14, %15, !dbg !7798
  br i1 %.not33, label %L34, label %L21, !dbg !7798

L21:                                              ; preds = %L18
  %.not39.not = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 5, !dbg !7803
  br i1 %.not39.not, label %L29, label %L34, !dbg !7803

L29:                                              ; preds = %L21
  %"'ip_phi2" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 2, !dbg !7804
  %16 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 3, !dbg !7804
  br label %L34, !dbg !7803

L34:                                              ; preds = %L29, %L21, %L18
  %17 = phi {} addrspace(10)* [ %"'ip_phi2", %L29 ], [ %"'", %L18 ], [ %"'", %L21 ]
  %.not36 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 6, !dbg !7806
  %.not34 = icmp eq i64 %arraylen, 0, !dbg !7806
  br i1 %.not34, label %L98, label %L81.lr.ph, !dbg !7807

L81.lr.ph:                                        ; preds = %L34
  %"'ipc17" = bitcast {} addrspace(10)* %17 to double addrspace(13)* addrspace(10)*
  %"'ipc18" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc17" to double addrspace(13)* addrspace(11)*
  %"arrayptr37'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc18", align 8, !tbaa !382, !alias.scope !7809, !noalias !7812, !nonnull !68, !invariant.group !7814
  %"'ipc" = bitcast {} addrspace(10)* %12 to double addrspace(13)* addrspace(10)*
  %"'ipc14" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr1538'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc14", align 8, !tbaa !382, !alias.scope !7815, !noalias !7818, !nonnull !68, !invariant.group !7820
  %18 = add nsw i64 %arraylen, -1, !dbg !7821
  br label %L81, !dbg !7821

L81:                                              ; preds = %L81, %L81.lr.ph
  %iv = phi i64 [ %iv.next, %L81 ], [ 0, %L81.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7822
  %19 = select i1 %.not36, i64 0, i64 %iv, !dbg !7822
  %"'ipg23" = getelementptr inbounds double, double addrspace(13)* %"arrayptr37'ipl", i64 %19, !dbg !7822
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr1538'ipl", i64 %iv, !dbg !7829
  %exitcond.not = icmp eq i64 %iv.next, %arraylen, !dbg !7830
  br i1 %exitcond.not, label %L98.loopexit, label %L81, !dbg !7821, !llvm.loop !7831

L87:                                              ; preds = %top
  unreachable

L98.loopexit:                                     ; preds = %L81
  br label %L98, !dbg !7787

L98:                                              ; preds = %L98.loopexit, %L34
  br label %invertL98, !dbg !7787

inverttop:                                        ; preds = %invertL18
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL18:                                        ; preds = %invertL34, %invertL21
  br label %inverttop

invertL21:                                        ; preds = %staging, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  br label %invertL18

invertL29:                                        ; preds = %staging
  %20 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 2, !dbg !7804
  %21 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !7804
  %22 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %21, align 8, !dbg !7804
  %23 = bitcast {} addrspace(10)* %20 to i8 addrspace(13)* addrspace(10)*, !dbg !7804
  %24 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %23, align 8, !dbg !7804
  %25 = bitcast i8 addrspace(13)* %24 to double addrspace(13)*, !dbg !7804
  %26 = bitcast i8 addrspace(13)* %22 to double addrspace(13)*, !dbg !7804
  %27 = udiv i64 %10, 8, !dbg !7804
  %28 = icmp eq i64 %27, 0, !dbg !7804
  br i1 %28, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !7804

for.body.i:                                       ; preds = %for.body.i, %invertL29
  %idx.i = phi i64 [ 0, %invertL29 ], [ %idx.next.i, %for.body.i ], !dbg !7804
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %25, i64 %idx.i, !dbg !7804
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !7804
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !7804
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %26, i64 %idx.i, !dbg !7804
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !7804
  %29 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !7804
  store double %29, double addrspace(13)* %src.i.i, align 1, !dbg !7804
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !7804
  %30 = icmp eq i64 %27, %idx.next.i, !dbg !7804
  br i1 %30, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !7804

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL29, %for.body.i
  br label %invertL21

invertL34:                                        ; preds = %invertL98, %invertL81.lr.ph
  %.not39.not_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg, 5
  br i1 %.not33, label %invertL18, label %staging

invertL81.lr.ph:                                  ; preds = %invertL81
  br label %invertL34

invertL81:                                        ; preds = %mergeinvertL81_L98.loopexit, %incinvertL81
  %31 = load i64, i64* %"iv'ac", align 8, !dbg !7829
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %12 to double addrspace(13)* addrspace(10)*, !dbg !7829
  %"'ipc14_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !7829
  %"arrayptr1538'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc14_unwrap", align 8, !tbaa !382, !alias.scope !7815, !noalias !7818, !nonnull !68, !invariant.group !7820
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr1538'ipl_unwrap", i64 %31, !dbg !7829
  %32 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !7829, !tbaa !269, !alias.scope !7832, !noalias !7835
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !7829, !tbaa !269, !alias.scope !7832, !noalias !7835
  %33 = load double, double* %"'de", align 8, !dbg !7829
  %34 = fadd fast double %33, %32, !dbg !7829
  store double %34, double* %"'de", align 8, !dbg !7829
  %35 = load double, double* %"'de", align 8, !dbg !7837
  store double 0.000000e+00, double* %"'de", align 8, !dbg !7837
  %36 = fneg fast double %35, !dbg !7837
  %37 = load double, double* %"arrayref'de", align 8, !dbg !7837
  %38 = fadd fast double %37, %36, !dbg !7837
  store double %38, double* %"arrayref'de", align 8, !dbg !7837
  %39 = load double, double* %"arrayref'de", align 8, !dbg !7822
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !7822
  %40 = load i64, i64* %"iv'ac", align 8, !dbg !7822
  %"'ipc17_unwrap" = bitcast {} addrspace(10)* %17 to double addrspace(13)* addrspace(10)*, !dbg !7822
  %"'ipc18_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc17_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !7822
  %"arrayptr37'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc18_unwrap", align 8, !tbaa !382, !alias.scope !7809, !noalias !7812, !nonnull !68, !invariant.group !7814
  %_unwrap = select i1 %.not36, i64 0, i64 %40, !dbg !7822
  %"'ipg23_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr37'ipl_unwrap", i64 %_unwrap, !dbg !7822
  %41 = load double, double addrspace(13)* %"'ipg23_unwrap", align 8, !dbg !7822, !tbaa !269, !alias.scope !7840, !noalias !7843
  %42 = fadd fast double %41, %39, !dbg !7822
  store double %42, double addrspace(13)* %"'ipg23_unwrap", align 8, !dbg !7822, !tbaa !269, !alias.scope !7840, !noalias !7843
  %43 = load i64, i64* %"iv'ac", align 8
  %44 = icmp eq i64 %43, 0
  %45 = xor i1 %44, true
  br i1 %44, label %invertL81.lr.ph, label %incinvertL81

incinvertL81:                                     ; preds = %invertL81
  %46 = load i64, i64* %"iv'ac", align 8
  %47 = add nsw i64 %46, -1
  store i64 %47, i64* %"iv'ac", align 8
  br label %invertL81

invertL98.loopexit:                               ; preds = %invertL98
  %_unwrap28 = add nsw i64 %arraylen, -1
  br label %mergeinvertL81_L98.loopexit

mergeinvertL81_L98.loopexit:                      ; preds = %invertL98.loopexit
  store i64 %_unwrap28, i64* %"iv'ac", align 8
  br label %invertL81

invertL98:                                        ; preds = %L98
  br i1 %.not34, label %invertL34, label %invertL98.loopexit

staging:                                          ; preds = %invertL34
  br i1 %.not39.not_unwrap, label %invertL29, label %invertL21
}

warning: didn't implement memmove, using memcpy as fallback which can result in errors
; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia__copyto_impl__2143.356({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", i64 signext "enzyme_inactive" %2, { i8*, i8* } %tapeArg) unnamed_addr #70 !dbg !7845 {
top:
  %3 = call {}*** @julia.get_pgcstack() #72
  br i1 true, label %L40, label %L36, !dbg !7846

L36:                                              ; preds = %top
  unreachable

L40:                                              ; preds = %top
  br i1 true, label %L71, label %L68, !dbg !7848

L68:                                              ; preds = %L40
  unreachable

L71:                                              ; preds = %L40
  %4 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !7850
  %5 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !7852
  %"'ipc27" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !7853
  %6 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc27"), !dbg !7853
  %"'ipc" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !7856
  %7 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !7856
  %"arrayptr10'il_phi" = extractvalue { i8*, i8* } %tapeArg, 1, !dbg !7856
  %8 = shl i64 %2, 3, !dbg !7859
  %9 = add i64 %8, -8, !dbg !7859
  %"'ipg" = getelementptr i8, i8* %"arrayptr10'il_phi", i64 %9, !dbg !7861
  %"arrayptr'il_phi" = extractvalue { i8*, i8* } %tapeArg, 0, !dbg !7853
  call void @llvm.julia.gc_preserve_end(token %5) #72, !dbg !7862
  call void @llvm.julia.gc_preserve_end(token %4) #72, !dbg !7863
  br label %invertL71, !dbg !7864

inverttop:                                        ; preds = %invertL40
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL40:                                        ; preds = %__enzyme_memcpyadd_doubleda1sa1.exit
  br label %inverttop

invertL71:                                        ; preds = %L71
  %10 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !7863
  %11 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !7862
  %12 = bitcast i8* %"arrayptr'il_phi" to double*, !dbg !7865
  %13 = bitcast i8* %"'ipg" to double*, !dbg !7865
  br label %for.body.i, !dbg !7865

for.body.i:                                       ; preds = %for.body.i, %invertL71
  %idx.i = phi i64 [ 0, %invertL71 ], [ %idx.next.i, %for.body.i ], !dbg !7865
  %dst.i.i = getelementptr inbounds double, double* %12, i64 %idx.i, !dbg !7865
  %dst.i.l.i = load double, double* %dst.i.i, align 1, !dbg !7865
  store double 0.000000e+00, double* %dst.i.i, align 1, !dbg !7865
  %src.i.i = getelementptr inbounds double, double* %13, i64 %idx.i, !dbg !7865
  %src.i.l.i = load double, double* %src.i.i, align 1, !dbg !7865
  %14 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !7865
  store double %14, double* %src.i.i, align 1, !dbg !7865
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !7865
  %15 = icmp eq i64 3, %idx.next.i, !dbg !7865
  br i1 %15, label %__enzyme_memcpyadd_doubleda1sa1.exit, label %for.body.i, !dbg !7865

__enzyme_memcpyadd_doubleda1sa1.exit:             ; preds = %for.body.i
  call void @llvm.julia.gc_preserve_end(token %11), !dbg !7852
  call void @llvm.julia.gc_preserve_end(token %10), !dbg !7850
  br label %invertL40
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia___1991.357([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 dereferenceable(8) %0, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", double %differeturn, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg) unnamed_addr #68 !dbg !7872 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %3 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"'de24" = alloca double, align 8
  %4 = getelementptr double, double* %"'de24", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache = alloca double*, align 8
  %"'de25" = alloca double, align 8
  %5 = getelementptr double, double* %"'de25", i64 0
  store double 0.000000e+00, double* %5, align 8
  %_cache26 = alloca double*, align 8
  %"'de29" = alloca double, align 8
  %6 = getelementptr double, double* %"'de29", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"'de30" = alloca double, align 8
  %7 = getelementptr double, double* %"'de30", i64 0
  store double 0.000000e+00, double* %7, align 8
  %_cache31 = alloca i64*, align 8
  %_cache37 = alloca i64*, align 8
  %8 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 10
  %mdyncache_fromtape_cache = alloca double*, align 8
  store double* %8, double** %mdyncache_fromtape_cache, align 8
  %9 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 11
  %mdyncache_fromtape_cache59 = alloca i64*, align 8
  store i64* %9, i64** %mdyncache_fromtape_cache59, align 8
  %10 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 12
  %mdyncache_fromtape_cache61 = alloca double*, align 8
  store double* %10, double** %mdyncache_fromtape_cache61, align 8
  %11 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 9
  %mdyncache_fromtape_cache63 = alloca i64*, align 8
  store i64* %11, i64** %mdyncache_fromtape_cache63, align 8
  %12 = call {}*** @julia.get_pgcstack() #72
  %"getfield_addr'ipg" = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %"'", i64 0, i64 0, !dbg !7873
  %getfield_addr = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(11)* %0, i64 0, i64 0, !dbg !7873
  %"getfield'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"getfield_addr'ipg" unordered, align 8, !dbg !7873, !tbaa !73, !alias.scope !7877, !noalias !7880, !nonnull !68, !dereferenceable !453
  %getfield = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %getfield_addr unordered, align 8, !dbg !7873, !tbaa !73, !invariant.load !68, !alias.scope !7882, !noalias !7883, !nonnull !68, !dereferenceable !453, !align !454
  %arraysize = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 7, !dbg !7884
  %13 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 3, !dbg !7884
  %14 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 4, !dbg !7884
  %tapeArg8 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 0, !dbg !7889
  %15 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 1, !dbg !7889
  %"'ip_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 2, !dbg !7889
  %arraylen = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 8, !dbg !7892
  br i1 true, label %L33, label %L39, !dbg !7896

L33:                                              ; preds = %top
  %16 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %15, {} addrspace(10)* %"'ip_phi", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !7897
  %"'ipc18" = addrspacecast {} addrspace(10)* %"'ip_phi" to {} addrspace(11)*, !dbg !7898
  %17 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc18"), !dbg !7898
  %"arrayptr19'il_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 6, !dbg !7898
  %"'ipc" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !7898
  %18 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !7898
  %"arrayptr920'il_phi" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 5, !dbg !7898
  %.not31 = icmp eq i64 %arraylen, 0, !dbg !7902
  br i1 %.not31, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !7902

.preheader.preheader:                             ; preds = %L33
  %19 = add nsw i64 %arraylen, -1, !dbg !7902
  %20 = add nuw i64 %19, 1, !dbg !7902
  %21 = mul nuw i64 %20, 8, !dbg !7902
  %22 = mul nuw i64 %20, 8, !dbg !7902
  %23 = mul nuw i64 %20, 8, !dbg !7902
  %24 = mul nuw i64 %20, 8, !dbg !7902
  br label %.preheader, !dbg !7902

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !7902
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7902
  %25 = load i64*, i64** %mdyncache_fromtape_cache63, align 8, !dbg !7902, !dereferenceable !306, !invariant.group !7903
  %26 = getelementptr inbounds i64, i64* %25, i64 %iv, !dbg !7902
  %27 = load i64, i64* %26, align 8, !dbg !7902, !invariant.group !7904
  %"'ipg36" = getelementptr inbounds double, double* %"arrayptr19'il_phi", i64 %27, !dbg !7902
  %28 = load double*, double** %mdyncache_fromtape_cache, align 8, !dbg !7902, !dereferenceable !306, !invariant.group !7905
  %29 = getelementptr inbounds double, double* %28, i64 %iv, !dbg !7902
  %30 = load double, double* %29, align 8, !dbg !7902, !invariant.group !7906
  %31 = load i64*, i64** %mdyncache_fromtape_cache59, align 8, !dbg !7902, !dereferenceable !306, !invariant.group !7907
  %32 = getelementptr inbounds i64, i64* %31, i64 %iv, !dbg !7902
  %33 = load i64, i64* %32, align 8, !dbg !7902, !invariant.group !7908
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr920'il_phi", i64 %33, !dbg !7902
  %34 = load double*, double** %mdyncache_fromtape_cache61, align 8, !dbg !7902, !dereferenceable !306, !invariant.group !7909
  %35 = getelementptr inbounds double, double* %34, i64 %iv, !dbg !7902
  %36 = load double, double* %35, align 8, !dbg !7902, !invariant.group !7910
  %37 = icmp eq i64 %iv.next, %arraylen, !dbg !7902
  br i1 %37, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !7902, !llvm.loop !7911

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !7897

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L33
  call void @llvm.julia.gc_preserve_end(token %16) #72, !dbg !7897
  br label %invertcblas_ddot64_.exit, !dbg !7876

L39:                                              ; preds = %top
  unreachable

inverttop:                                        ; preds = %invertL33
  call fastcc void @diffejulia_gemv__1994({} addrspace(10)* align 16 %14, {} addrspace(10)* align 16 %13, i32 zeroext 1409286144, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %getfield, {} addrspace(10)* align 16 %"getfield'ipl", { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %tapeArg8), !dbg !7889
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL33:                                        ; preds = %invertcblas_ddot64_.exit, %invert.preheader.preheader
  call void @llvm.julia.gc_preserve_end(token %95), !dbg !7897
  br label %inverttop

invert.preheader.preheader:                       ; preds = %invert.preheader
  %38 = load i64, i64* %"iv'ac", align 8
  %39 = load i64, i64* %"iv'ac", align 8
  %40 = load i64, i64* %"iv'ac", align 8
  %41 = load i64, i64* %"iv'ac", align 8
  %42 = load i64, i64* %"iv'ac", align 8
  %forfree58 = load double*, double** %mdyncache_fromtape_cache, align 8, !dereferenceable !306, !invariant.group !7905
  %43 = bitcast double* %forfree58 to i8*
  call void @free(i8* nonnull %43), !dbg !7912
  %44 = load i64, i64* %"iv'ac", align 8
  %forfree60 = load i64*, i64** %mdyncache_fromtape_cache59, align 8, !dereferenceable !306, !invariant.group !7907
  %45 = bitcast i64* %forfree60 to i8*
  call void @free(i8* nonnull %45), !dbg !7912
  %46 = load i64, i64* %"iv'ac", align 8
  %forfree62 = load double*, double** %mdyncache_fromtape_cache61, align 8, !dereferenceable !306, !invariant.group !7909
  %47 = bitcast double* %forfree62 to i8*
  call void @free(i8* nonnull %47), !dbg !7912
  %48 = load i64, i64* %"iv'ac", align 8
  %forfree = load i64*, i64** %mdyncache_fromtape_cache63, align 8, !dereferenceable !306, !invariant.group !7903
  %49 = bitcast i64* %forfree to i8*
  call void @free(i8* nonnull %49), !dbg !7912
  br label %invertL33

invert.preheader:                                 ; preds = %mergeinvert.preheader_cblas_ddot64_.exit.loopexit, %incinvert.preheader
  %50 = load double, double* %"'de24", align 8, !dbg !7902
  store double 0.000000e+00, double* %"'de24", align 8, !dbg !7902
  %51 = load i64, i64* %"iv'ac", align 8, !dbg !7902
  %arraylen_unwrap = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 8, !dbg !7902
  %_unwrap = add nsw i64 %arraylen_unwrap, -1, !dbg !7902
  %52 = add nuw i64 %_unwrap, 1, !dbg !7902
  %53 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 12, !dbg !7902
  %54 = getelementptr inbounds double, double* %53, i64 %51, !dbg !7902
  %55 = load double, double* %54, align 8, !dbg !7902, !tbaa !1731, !invariant.group !7913
  %56 = fmul fast double %50, %55, !dbg !7902
  %57 = load double, double* %"'de25", align 8, !dbg !7902
  %58 = fadd fast double %57, %56, !dbg !7902
  store double %58, double* %"'de25", align 8, !dbg !7902
  %59 = load i64, i64* %"iv'ac", align 8, !dbg !7902
  %60 = add nuw i64 %_unwrap, 1, !dbg !7902
  %61 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 10, !dbg !7902
  %62 = getelementptr inbounds double, double* %61, i64 %59, !dbg !7902
  %63 = load double, double* %62, align 8, !dbg !7902, !tbaa !1731, !invariant.group !7914
  %64 = fmul fast double %50, %63, !dbg !7902
  %65 = load double, double* %"'de29", align 8, !dbg !7902
  %66 = fadd fast double %65, %64, !dbg !7902
  store double %66, double* %"'de29", align 8, !dbg !7902
  %67 = load double, double* %"'de30", align 8, !dbg !7902
  %68 = fadd fast double %67, %50, !dbg !7902
  store double %68, double* %"'de30", align 8, !dbg !7902
  %69 = load double, double* %"'de29", align 8, !dbg !7902
  store double 0.000000e+00, double* %"'de29", align 8, !dbg !7902
  %70 = load i64, i64* %"iv'ac", align 8, !dbg !7902
  %71 = add nuw i64 %_unwrap, 1, !dbg !7902
  %72 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 11, !dbg !7902
  %73 = getelementptr inbounds i64, i64* %72, i64 %70, !dbg !7902
  %74 = load i64, i64* %73, align 8, !dbg !7902, !invariant.group !7915
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr920'il_phi", i64 %74, !dbg !7902
  %75 = load double, double* %"'ipg_unwrap", align 8, !dbg !7902, !tbaa !1731, !alias.scope !7916, !noalias !7919
  %76 = fadd fast double %75, %69, !dbg !7902
  store double %76, double* %"'ipg_unwrap", align 8, !dbg !7902, !tbaa !1731, !alias.scope !7916, !noalias !7919
  %77 = load double, double* %"'de25", align 8, !dbg !7902
  store double 0.000000e+00, double* %"'de25", align 8, !dbg !7902
  %78 = load i64, i64* %"iv'ac", align 8, !dbg !7902
  %79 = add nuw i64 %_unwrap, 1, !dbg !7902
  %80 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg, 9, !dbg !7902
  %81 = getelementptr inbounds i64, i64* %80, i64 %78, !dbg !7902
  %82 = load i64, i64* %81, align 8, !dbg !7902, !invariant.group !7921
  %"'ipg36_unwrap" = getelementptr inbounds double, double* %"arrayptr19'il_phi", i64 %82, !dbg !7902
  %83 = load double, double* %"'ipg36_unwrap", align 8, !dbg !7902, !tbaa !1731, !alias.scope !7922, !noalias !7925
  %84 = fadd fast double %83, %77, !dbg !7902
  store double %84, double* %"'ipg36_unwrap", align 8, !dbg !7902, !tbaa !1731, !alias.scope !7922, !noalias !7925
  %85 = load double, double* %"'de30", align 8
  store double 0.000000e+00, double* %"'de30", align 8
  %86 = load i64, i64* %"iv'ac", align 8
  %87 = icmp eq i64 %86, 0
  %88 = xor i1 %87, true
  %89 = select fast i1 %88, double %85, double 0.000000e+00
  %90 = load double, double* %"'de24", align 8
  %91 = fadd fast double %90, %85
  %92 = select fast i1 %87, double %90, double %91
  store double %92, double* %"'de24", align 8
  br i1 %87, label %invert.preheader.preheader, label %incinvert.preheader

incinvert.preheader:                              ; preds = %invert.preheader
  %93 = load i64, i64* %"iv'ac", align 8
  %94 = add nsw i64 %93, -1
  store i64 %94, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit.loopexit:                ; preds = %invertcblas_ddot64_.exit
  %_unwrap45 = add nsw i64 %arraylen, -1
  br label %mergeinvert.preheader_cblas_ddot64_.exit.loopexit

mergeinvert.preheader_cblas_ddot64_.exit.loopexit: ; preds = %invertcblas_ddot64_.exit.loopexit
  store i64 %_unwrap45, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit:                         ; preds = %cblas_ddot64_.exit
  store double %differeturn, double* %"'de", align 8
  %95 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %15, {} addrspace(10)* %"'ip_phi", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !7897
  %96 = load double, double* %"'de", align 8
  store double 0.000000e+00, double* %"'de", align 8
  %97 = xor i1 %.not31, true
  %98 = select fast i1 %97, double %96, double 0.000000e+00
  %99 = load double, double* %"'de24", align 8
  %100 = fadd fast double %99, %96
  %101 = select fast i1 %.not31, double %99, double %100
  store double %101, double* %"'de24", align 8
  br i1 %.not31, label %invertL33, label %invertcblas_ddot64_.exit.loopexit
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_compute_energy_2128([3 x double]* noalias nocapture nofree writeonly align 8 dereferenceable(24) "enzyme_sret" %0, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg) unnamed_addr #69 !dbg !7666 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %3 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %_cache = alloca double*, align 8
  %"'de43" = alloca double, align 8
  %4 = getelementptr double, double* %"'de43", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache44 = alloca double*, align 8
  %"'de47" = alloca double, align 8
  %5 = getelementptr double, double* %"'de47", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"'de48" = alloca double, align 8
  %6 = getelementptr double, double* %"'de48", i64 0
  store double 0.000000e+00, double* %6, align 8
  %_cache49 = alloca i64*, align 8
  %_cache55 = alloca i64*, align 8
  %"phi.bo'de" = alloca double, align 8
  %7 = getelementptr double, double* %"phi.bo'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %"'de67" = alloca double, align 8
  %8 = getelementptr double, double* %"'de67", i64 0
  store double 0.000000e+00, double* %8, align 8
  %"'de86" = alloca double, align 8
  %9 = getelementptr double, double* %"'de86", i64 0
  store double 0.000000e+00, double* %9, align 8
  %"'de87" = alloca double, align 8
  %10 = getelementptr double, double* %"'de87", i64 0
  store double 0.000000e+00, double* %10, align 8
  %"'de90" = alloca double, align 8
  %11 = getelementptr double, double* %"'de90", i64 0
  store double 0.000000e+00, double* %11, align 8
  %12 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 19
  %mdyncache_fromtape_cache = alloca i64*, align 8
  store i64* %12, i64** %mdyncache_fromtape_cache, align 8
  %13 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 20
  %mdyncache_fromtape_cache99 = alloca double*, align 8
  store double* %13, double** %mdyncache_fromtape_cache99, align 8
  %14 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 21
  %mdyncache_fromtape_cache101 = alloca i64*, align 8
  store i64* %14, i64** %mdyncache_fromtape_cache101, align 8
  %15 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 22
  %mdyncache_fromtape_cache103 = alloca double*, align 8
  store double* %15, double** %mdyncache_fromtape_cache103, align 8
  %16 = call {}*** @julia.get_pgcstack()
  %17 = bitcast {}*** %16 to {}**
  %18 = getelementptr inbounds {}*, {}** %17, i64 -14
  %"'ai" = alloca [1 x {} addrspace(10)*], i64 1, align 8
  %19 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %20 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %21 = bitcast {}* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull dereferenceable(8) dereferenceable_or_null(8) %21, i8 0, i64 8, i1 false)
  %22 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 0
  %"'ipc91" = bitcast {}* %19 to [1 x {} addrspace(10)*]*
  %23 = bitcast {} addrspace(10)* %22 to [1 x {} addrspace(10)*] addrspace(10)*, !enzyme_caststack !68
  %24 = call {}*** @julia.get_pgcstack() #72
  br i1 false, label %L19, label %L22, !dbg !7667

L19:                                              ; preds = %top
  unreachable

L22:                                              ; preds = %top
  %25 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 2, !dbg !7670
  %26 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 3, !dbg !7670
  %tapeArg26 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 1, !dbg !7675
  br i1 false, label %L51, label %L54, !dbg !7667

L51:                                              ; preds = %L22
  unreachable

L54:                                              ; preds = %L22
  %27 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 5, !dbg !7670
  %28 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 6, !dbg !7670
  %tapeArg32 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 4, !dbg !7675
  %arraylen7 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 18, !dbg !7677
  br i1 true, label %L69, label %L75, !dbg !7681

L69:                                              ; preds = %L54
  %29 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %26, {} addrspace(10)* %25, {} addrspace(10)* %28, {} addrspace(10)* %27), !dbg !7682
  %"'ipc37" = addrspacecast {} addrspace(10)* %25 to {} addrspace(11)*, !dbg !7683
  %30 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc37"), !dbg !7683
  %"arrayptr34'il_phi" = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 8, !dbg !7683
  %"'ipc" = addrspacecast {} addrspace(10)* %27 to {} addrspace(11)*, !dbg !7683
  %31 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !7683
  %"arrayptr1135'il_phi" = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 7, !dbg !7683
  %.not58 = icmp eq i64 %arraylen7, 0, !dbg !7687
  br i1 %.not58, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !7687

.preheader.preheader:                             ; preds = %L69
  %32 = add nsw i64 %arraylen7, -1, !dbg !7687
  %33 = add nuw i64 %32, 1, !dbg !7687
  %34 = mul nuw i64 %33, 8, !dbg !7687
  %35 = mul nuw i64 %33, 8, !dbg !7687
  %36 = mul nuw i64 %33, 8, !dbg !7687
  %37 = mul nuw i64 %33, 8, !dbg !7687
  br label %.preheader, !dbg !7687

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !7687
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7687
  %38 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dbg !7687, !dereferenceable !306, !invariant.group !7688
  %39 = getelementptr inbounds i64, i64* %38, i64 %iv, !dbg !7687
  %40 = load i64, i64* %39, align 8, !dbg !7687, !invariant.group !7689
  %"'ipg54" = getelementptr inbounds double, double* %"arrayptr34'il_phi", i64 %40, !dbg !7687
  %41 = load double*, double** %mdyncache_fromtape_cache99, align 8, !dbg !7687, !dereferenceable !306, !invariant.group !7690
  %42 = getelementptr inbounds double, double* %41, i64 %iv, !dbg !7687
  %43 = load double, double* %42, align 8, !dbg !7687, !invariant.group !7691
  %44 = load i64*, i64** %mdyncache_fromtape_cache101, align 8, !dbg !7687, !dereferenceable !306, !invariant.group !7692
  %45 = getelementptr inbounds i64, i64* %44, i64 %iv, !dbg !7687
  %46 = load i64, i64* %45, align 8, !dbg !7687, !invariant.group !7693
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr1135'il_phi", i64 %46, !dbg !7687
  %47 = load double*, double** %mdyncache_fromtape_cache103, align 8, !dbg !7687, !dereferenceable !306, !invariant.group !7694
  %48 = getelementptr inbounds double, double* %47, i64 %iv, !dbg !7687
  %49 = load double, double* %48, align 8, !dbg !7687, !invariant.group !7695
  %50 = icmp eq i64 %iv.next, %arraylen7, !dbg !7687
  br i1 %50, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !7687, !llvm.loop !7696

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !7682

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L69
  call void @llvm.julia.gc_preserve_end(token %29) #72, !dbg !7682
  br i1 false, label %L101, label %L104, !dbg !7697

L75:                                              ; preds = %L54
  unreachable

L101:                                             ; preds = %cblas_ddot64_.exit
  unreachable

L104:                                             ; preds = %cblas_ddot64_.exit
  %51 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 12, !dbg !7700
  %52 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 13, !dbg !7700
  %tapeArg84 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 11, !dbg !7705
  %tapeArg82 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 9, !dbg !7707
  %"'ip_phi8" = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 10, !dbg !7707
  br i1 false, label %L135, label %L138, !dbg !7697

L135:                                             ; preds = %L104
  unreachable

L138:                                             ; preds = %L104
  %53 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 16, !dbg !7700
  %54 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 17, !dbg !7700
  %tapeArg97 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 15, !dbg !7705
  %"'ipg95" = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %"'ipc91", i64 0, i64 0, !dbg !7699
  store {} addrspace(10)* %"'ip_phi8", {} addrspace(10)** %"'ipg95", align 8, !dbg !7699, !alias.scope !7708, !noalias !7711
  %"'ipc92" = addrspacecast [1 x {} addrspace(10)*]* %"'ipc91" to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !7699
  %55 = addrspacecast [1 x {} addrspace(10)*] addrspace(10)* %23 to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !7699
  %tapeArg93 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 14, !dbg !7699
  %"newstruct20.sroa.0.0..sroa_idx'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'", i64 0, i64 0, !dbg !7713
  %"newstruct20.sroa.2.0..sroa_idx45'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'", i64 0, i64 1, !dbg !7713
  %"newstruct20.sroa.3.0..sroa_idx46'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'", i64 0, i64 2, !dbg !7713
  br label %invertL138, !dbg !7713

inverttop:                                        ; preds = %invertL22
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL22:                                        ; preds = %invertL54
  call fastcc void @diffejulia__copyto_impl__2143({} addrspace(10)* align 16 %26, {} addrspace(10)* align 16 %25, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4, { i8*, i8* } %tapeArg26), !dbg !7675
  br label %inverttop

invertL54:                                        ; preds = %invertL69
  call fastcc void @diffejulia__copyto_impl__2143({} addrspace(10)* align 16 %28, {} addrspace(10)* align 16 %27, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4, { i8*, i8* } %tapeArg32), !dbg !7675
  br label %invertL22

invertL69:                                        ; preds = %invertcblas_ddot64_.exit, %invert.preheader.preheader
  call void @llvm.julia.gc_preserve_end(token %117), !dbg !7682
  br label %invertL54

invert.preheader.preheader:                       ; preds = %invert.preheader
  %56 = load i64, i64* %"iv'ac", align 8
  %57 = load i64, i64* %"iv'ac", align 8
  %58 = load i64, i64* %"iv'ac", align 8
  %59 = load i64, i64* %"iv'ac", align 8
  %60 = load i64, i64* %"iv'ac", align 8
  %forfree98 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dereferenceable !306, !invariant.group !7688
  %61 = bitcast i64* %forfree98 to i8*
  call void @free(i8* nonnull %61), !dbg !7714
  %62 = load i64, i64* %"iv'ac", align 8
  %forfree100 = load double*, double** %mdyncache_fromtape_cache99, align 8, !dereferenceable !306, !invariant.group !7690
  %63 = bitcast double* %forfree100 to i8*
  call void @free(i8* nonnull %63), !dbg !7714
  %64 = load i64, i64* %"iv'ac", align 8
  %forfree102 = load i64*, i64** %mdyncache_fromtape_cache101, align 8, !dereferenceable !306, !invariant.group !7692
  %65 = bitcast i64* %forfree102 to i8*
  call void @free(i8* nonnull %65), !dbg !7714
  %66 = load i64, i64* %"iv'ac", align 8
  %forfree104 = load double*, double** %mdyncache_fromtape_cache103, align 8, !dereferenceable !306, !invariant.group !7694
  %67 = bitcast double* %forfree104 to i8*
  call void @free(i8* nonnull %67), !dbg !7714
  br label %invertL69

invert.preheader:                                 ; preds = %mergeinvert.preheader_cblas_ddot64_.exit.loopexit, %incinvert.preheader
  %68 = load double, double* %"'de", align 8, !dbg !7687
  store double 0.000000e+00, double* %"'de", align 8, !dbg !7687
  %69 = load i64, i64* %"iv'ac", align 8, !dbg !7687
  %arraylen7_unwrap = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 18, !dbg !7687
  %_unwrap = add nsw i64 %arraylen7_unwrap, -1, !dbg !7687
  %70 = add nuw i64 %_unwrap, 1, !dbg !7687
  %71 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 22, !dbg !7687
  %72 = getelementptr inbounds double, double* %71, i64 %69, !dbg !7687
  %73 = load double, double* %72, align 8, !dbg !7687, !tbaa !1731, !invariant.group !7715
  %74 = fmul fast double %68, %73, !dbg !7687
  %75 = load double, double* %"'de43", align 8, !dbg !7687
  %76 = fadd fast double %75, %74, !dbg !7687
  store double %76, double* %"'de43", align 8, !dbg !7687
  %77 = load i64, i64* %"iv'ac", align 8, !dbg !7687
  %78 = add nuw i64 %_unwrap, 1, !dbg !7687
  %79 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 20, !dbg !7687
  %80 = getelementptr inbounds double, double* %79, i64 %77, !dbg !7687
  %81 = load double, double* %80, align 8, !dbg !7687, !tbaa !1731, !invariant.group !7716
  %82 = fmul fast double %68, %81, !dbg !7687
  %83 = load double, double* %"'de47", align 8, !dbg !7687
  %84 = fadd fast double %83, %82, !dbg !7687
  store double %84, double* %"'de47", align 8, !dbg !7687
  %85 = load double, double* %"'de48", align 8, !dbg !7687
  %86 = fadd fast double %85, %68, !dbg !7687
  store double %86, double* %"'de48", align 8, !dbg !7687
  %87 = load double, double* %"'de47", align 8, !dbg !7687
  store double 0.000000e+00, double* %"'de47", align 8, !dbg !7687
  %88 = load i64, i64* %"iv'ac", align 8, !dbg !7687
  %89 = add nuw i64 %_unwrap, 1, !dbg !7687
  %90 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 21, !dbg !7687
  %91 = getelementptr inbounds i64, i64* %90, i64 %88, !dbg !7687
  %92 = load i64, i64* %91, align 8, !dbg !7687, !invariant.group !7717
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr1135'il_phi", i64 %92, !dbg !7687
  %93 = load double, double* %"'ipg_unwrap", align 8, !dbg !7687, !tbaa !1731, !alias.scope !7718, !noalias !7721
  %94 = fadd fast double %93, %87, !dbg !7687
  store double %94, double* %"'ipg_unwrap", align 8, !dbg !7687, !tbaa !1731, !alias.scope !7718, !noalias !7721
  %95 = load double, double* %"'de43", align 8, !dbg !7687
  store double 0.000000e+00, double* %"'de43", align 8, !dbg !7687
  %96 = load i64, i64* %"iv'ac", align 8, !dbg !7687
  %97 = add nuw i64 %_unwrap, 1, !dbg !7687
  %98 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 19, !dbg !7687
  %99 = getelementptr inbounds i64, i64* %98, i64 %96, !dbg !7687
  %100 = load i64, i64* %99, align 8, !dbg !7687, !invariant.group !7723
  %"'ipg54_unwrap" = getelementptr inbounds double, double* %"arrayptr34'il_phi", i64 %100, !dbg !7687
  %101 = load double, double* %"'ipg54_unwrap", align 8, !dbg !7687, !tbaa !1731, !alias.scope !7724, !noalias !7727
  %102 = fadd fast double %101, %95, !dbg !7687
  store double %102, double* %"'ipg54_unwrap", align 8, !dbg !7687, !tbaa !1731, !alias.scope !7724, !noalias !7727
  %103 = load double, double* %"'de48", align 8
  store double 0.000000e+00, double* %"'de48", align 8
  %104 = load i64, i64* %"iv'ac", align 8
  %105 = icmp eq i64 %104, 0
  %106 = xor i1 %105, true
  %107 = select fast i1 %106, double %103, double 0.000000e+00
  %108 = load double, double* %"'de", align 8
  %109 = fadd fast double %108, %103
  %110 = select fast i1 %105, double %108, double %109
  store double %110, double* %"'de", align 8
  br i1 %105, label %invert.preheader.preheader, label %incinvert.preheader

incinvert.preheader:                              ; preds = %invert.preheader
  %111 = load i64, i64* %"iv'ac", align 8
  %112 = add nsw i64 %111, -1
  store i64 %112, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit.loopexit:                ; preds = %invertcblas_ddot64_.exit
  %113 = load double, double* %"phi.bo'de", align 8, !dbg !7682
  store double 0.000000e+00, double* %"phi.bo'de", align 8, !dbg !7682
  %114 = fmul fast double %113, 5.000000e-01, !dbg !7682
  %115 = load double, double* %"'de", align 8, !dbg !7682
  %116 = fadd fast double %115, %114, !dbg !7682
  store double %116, double* %"'de", align 8, !dbg !7682
  %_unwrap63 = add nsw i64 %arraylen7, -1
  br label %mergeinvert.preheader_cblas_ddot64_.exit.loopexit

mergeinvert.preheader_cblas_ddot64_.exit.loopexit: ; preds = %invertcblas_ddot64_.exit.loopexit
  store i64 %_unwrap63, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit:                         ; preds = %invertL104
  %117 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %26, {} addrspace(10)* %25, {} addrspace(10)* %28, {} addrspace(10)* %27), !dbg !7682
  %118 = load double, double* %"'de67", align 8
  store double 0.000000e+00, double* %"'de67", align 8
  %119 = xor i1 %.not58, true
  %120 = select fast i1 %119, double %118, double 0.000000e+00
  %121 = load double, double* %"phi.bo'de", align 8
  %122 = fadd fast double %121, %118
  %123 = select fast i1 %.not58, double %121, double %122
  store double %123, double* %"phi.bo'de", align 8
  br i1 %.not58, label %invertL69, label %invertcblas_ddot64_.exit.loopexit

invertL104:                                       ; preds = %invertL138
  call fastcc void @diffejulia___2136({} addrspace(10)* align 16 %52, {} addrspace(10)* align 16 %51, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg82), !dbg !7707
  call fastcc void @diffejulia__copyto_impl__2143.356({} addrspace(10)* align 16 %52, {} addrspace(10)* align 16 %51, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1, { i8*, i8* } %tapeArg84), !dbg !7705
  br label %invertcblas_ddot64_.exit

invertL138:                                       ; preds = %L138
  %124 = load double, double* %"newstruct20.sroa.3.0..sroa_idx46'ipg", align 8, !dbg !7713, !alias.scope !7729, !noalias !7732
  store double 0.000000e+00, double* %"newstruct20.sroa.3.0..sroa_idx46'ipg", align 8, !dbg !7713, !alias.scope !7729, !noalias !7732
  %125 = load double, double* %"'de86", align 8, !dbg !7713
  %126 = fadd fast double %125, %124, !dbg !7713
  store double %126, double* %"'de86", align 8, !dbg !7713
  %127 = load double, double* %"newstruct20.sroa.2.0..sroa_idx45'ipg", align 8, !dbg !7713, !alias.scope !7729, !noalias !7732
  store double 0.000000e+00, double* %"newstruct20.sroa.2.0..sroa_idx45'ipg", align 8, !dbg !7713, !alias.scope !7729, !noalias !7732
  %128 = load double, double* %"'de87", align 8, !dbg !7713
  %129 = fadd fast double %128, %127, !dbg !7713
  store double %129, double* %"'de87", align 8, !dbg !7713
  %130 = load double, double* %"newstruct20.sroa.0.0..sroa_idx'ipg", align 8, !dbg !7713, !alias.scope !7729, !noalias !7732
  store double 0.000000e+00, double* %"newstruct20.sroa.0.0..sroa_idx'ipg", align 8, !dbg !7713, !alias.scope !7729, !noalias !7732
  %131 = load double, double* %"'de67", align 8, !dbg !7713
  %132 = fadd fast double %131, %130, !dbg !7713
  store double %132, double* %"'de67", align 8, !dbg !7713
  %133 = load double, double* %"'de86", align 8, !dbg !7734
  store double 0.000000e+00, double* %"'de86", align 8, !dbg !7734
  %134 = load double, double* %"'de67", align 8, !dbg !7734
  %135 = fadd fast double %134, %133, !dbg !7734
  store double %135, double* %"'de67", align 8, !dbg !7734
  %136 = load double, double* %"'de87", align 8, !dbg !7734
  %137 = fadd fast double %136, %133, !dbg !7734
  store double %137, double* %"'de87", align 8, !dbg !7734
  %138 = load double, double* %"'de87", align 8, !dbg !7735
  store double 0.000000e+00, double* %"'de87", align 8, !dbg !7735
  %139 = fmul fast double %138, 5.000000e-01, !dbg !7735
  %140 = load double, double* %"'de90", align 8, !dbg !7735
  %141 = fadd fast double %140, %139, !dbg !7735
  store double %141, double* %"'de90", align 8, !dbg !7735
  %142 = load double, double* %"'de90", align 8, !dbg !7699
  call fastcc void @diffejulia___1991.357([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %55, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc92", {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %54, {} addrspace(10)* align 16 %53, double %142, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg93), !dbg !7699
  store double 0.000000e+00, double* %"'de90", align 8, !dbg !7699
  call fastcc void @diffejulia__copyto_impl__2143.356({} addrspace(10)* align 16 %54, {} addrspace(10)* align 16 %53, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1, { i8*, i8* } %tapeArg97), !dbg !7705
  br label %invertL104
}

; Function Attrs: mustprogress willreturn
define internal fastcc { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } @augmented_julia_compute_energy_2128.359([3 x double]* noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) "enzyme_sret" %0, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") unnamed_addr #69 !dbg !7929 {
top:
  %3 = alloca { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, align 8
  %4 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 6
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 10
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %10 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 12
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %10, align 8
  %11 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 13
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %11, align 8
  %12 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 16
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %12, align 8
  %13 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 17
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %13, align 8
  %14 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %14, align 8
  %15 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %15, align 8
  %16 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %16, align 8
  %17 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 9, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %17, align 8
  %18 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %18, align 8
  %19 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %19, align 8
  %20 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %20, align 8
  %21 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %21, align 8
  %22 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %22, align 8
  %23 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %23, align 8
  %24 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %24, align 8
  %25 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i64 0, i32 14, i32 0, i32 5
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %25, align 8
  %"iv'ac" = alloca i64, align 8
  %newstruct = alloca [1 x [2 x i64]], i64 1, align 8
  %26 = bitcast [1 x [2 x i64]]* %newstruct to i8*
  %newstruct16 = alloca [1 x [2 x i64]], i64 1, align 8
  %27 = bitcast [1 x [2 x i64]]* %newstruct16 to i8*
  %newstruct2 = alloca [1 x [2 x i64]], i64 1, align 8
  %28 = bitcast [1 x [2 x i64]]* %newstruct2 to i8*
  %newstruct12 = alloca [1 x [2 x i64]], i64 1, align 8
  %29 = bitcast [1 x [2 x i64]]* %newstruct12 to i8*
  %_cache = alloca i64*, align 8
  %_cache24 = alloca double*, align 8
  %_cache26 = alloca i64*, align 8
  %_cache28 = alloca double*, align 8
  %30 = call {}*** @julia.get_pgcstack()
  %31 = bitcast i8* %29 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %32 = bitcast i8* %28 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %33 = bitcast i8* %27 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %34 = bitcast i8* %26 to [1 x [2 x i64]]*, !enzyme_caststack !68
  %35 = bitcast {}*** %30 to {}**
  %36 = getelementptr inbounds {}*, {}** %35, i64 -14
  %"'ai" = alloca [1 x {} addrspace(10)*], i64 1, align 8
  %37 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %38 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %39 = bitcast {}* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull dereferenceable(8) dereferenceable_or_null(8) %39, i8 0, i64 8, i1 false)
  %40 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) {} addrspace(10)* @julia.gc_alloc_obj({}** %36, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !enzyme_fromstack !306
  %41 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 0
  store {} addrspace(10)* %40, {} addrspace(10)** %41, align 8
  %42 = bitcast {} addrspace(10)* %40 to [1 x {} addrspace(10)*] addrspace(10)*
  br label %loop.i

loop.i:                                           ; preds = %loop.i, %top
  %43 = phi i64 [ 0, %top ], [ %44, %loop.i ]
  %44 = add i64 %43, 1
  %45 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %42, i64 %43, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %45, align 8
  %46 = icmp eq i64 %44, 1
  br i1 %46, label %zeroType.353.exit, label %loop.i

zeroType.353.exit:                                ; preds = %loop.i
  %47 = addrspacecast {}* %37 to {} addrspace(10)*
  %"'ipc19" = bitcast {}* %37 to [1 x {} addrspace(10)*]*
  %48 = bitcast {} addrspace(10)* %40 to [1 x {} addrspace(10)*] addrspace(10)*, !enzyme_caststack !68
  %49 = call {}*** @julia.get_pgcstack() #72
  %ptls_field31 = getelementptr inbounds {}**, {}*** %49, i64 2
  %50 = bitcast {}*** %ptls_field31 to i64***
  %ptls_load3233 = load i64**, i64*** %50, align 8, !tbaa !69, !alias.scope !7930, !noalias !7933
  %51 = getelementptr inbounds i64*, i64** %ptls_load3233, i64 2
  %safepoint = load i64*, i64** %51, align 8, !tbaa !73, !invariant.load !68, !alias.scope !7935, !noalias !7938
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #72, !dbg !7940
  fence syncscope("singlethread") seq_cst
  %52 = bitcast [1 x [2 x i64]]* %34 to i8*, !dbg !7941
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %52, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const13 to i8*), i64 noundef 16, i1 noundef false) #72, !dbg !7941, !tbaa !86, !alias.scope !1749, !noalias !7944
  %53 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7947
  %54 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %53 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7947
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %54, i64 0, i32 1, !dbg !7947
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7947, !tbaa !332, !range !87, !alias.scope !7953, !noalias !7956
  %55 = icmp ult i64 %arraylen, 6, !dbg !7958
  br i1 %55, label %L19, label %L22, !dbg !7952

L19:                                              ; preds = %zeroType.353.exit
  %56 = addrspacecast [1 x [2 x i64]]* %34 to [1 x [2 x i64]] addrspace(11)*, !dbg !7952
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %56) #73, !dbg !7952
  unreachable, !dbg !7952

L22:                                              ; preds = %zeroType.353.exit
  %57 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 3), !dbg !7961
  %58 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 2, !dbg !7961
  store {} addrspace(10)* %57, {} addrspace(10)** %58, align 8, !dbg !7961
  %59 = bitcast {} addrspace(10)* %57 to i8 addrspace(13)* addrspace(10)*, !dbg !7961
  %60 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %59, align 8, !dbg !7961
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %60, i8 0, i64 24, i1 false), !dbg !7961
  %61 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #74, !dbg !7961
  %62 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 3, !dbg !7966
  store {} addrspace(10)* %61, {} addrspace(10)** %62, align 8, !dbg !7966
  %_augmented = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143({} addrspace(10)* align 16 %61, {} addrspace(10)* align 16 %57, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4), !dbg !7966
  %63 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 1, !dbg !7941
  store { i8*, i8* } %_augmented, { i8*, i8* }* %63, align 8, !dbg !7941
  %64 = bitcast [1 x [2 x i64]]* %32 to i8*, !dbg !7941
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %64, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const13 to i8*), i64 noundef 16, i1 noundef false) #72, !dbg !7941, !tbaa !86, !alias.scope !1749, !noalias !7944
  %arraylen4 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !7947, !tbaa !332, !range !87, !alias.scope !7953, !noalias !7956
  %65 = icmp ult i64 %arraylen4, 6, !dbg !7958
  br i1 %65, label %L51, label %L54, !dbg !7952

L51:                                              ; preds = %L22
  %66 = addrspacecast [1 x [2 x i64]]* %32 to [1 x [2 x i64]] addrspace(11)*, !dbg !7952
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %66) #73, !dbg !7952
  unreachable, !dbg !7952

L54:                                              ; preds = %L22
  %67 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 3), !dbg !7961
  %68 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 5, !dbg !7961
  store {} addrspace(10)* %67, {} addrspace(10)** %68, align 8, !dbg !7961
  %69 = bitcast {} addrspace(10)* %67 to i8 addrspace(13)* addrspace(10)*, !dbg !7961
  %70 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %69, align 8, !dbg !7961
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %70, i8 0, i64 24, i1 false), !dbg !7961
  %71 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #74, !dbg !7961
  %72 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 6, !dbg !7966
  store {} addrspace(10)* %71, {} addrspace(10)** %72, align 8, !dbg !7966
  %_augmented13 = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143({} addrspace(10)* align 16 %71, {} addrspace(10)* align 16 %67, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4), !dbg !7966
  %73 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 4, !dbg !7968
  store { i8*, i8* } %_augmented13, { i8*, i8* }* %73, align 8, !dbg !7968
  %74 = bitcast {} addrspace(10)* %61 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7968
  %75 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %74 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7968
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %75, i64 0, i32 1, !dbg !7968
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !7968, !tbaa !332, !range !87, !alias.scope !7972, !noalias !7975
  %76 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 18, !dbg !7968
  store i64 %arraylen7, i64* %76, align 8, !dbg !7968
  %77 = bitcast {} addrspace(10)* %71 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !7968
  %78 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %77 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !7968
  %arraylen_ptr8 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %78, i64 0, i32 1, !dbg !7968
  %arraylen9 = load i64, i64 addrspace(11)* %arraylen_ptr8, align 8, !dbg !7968, !tbaa !332, !range !87, !alias.scope !7977, !noalias !7980
  %.not = icmp eq i64 %arraylen7, %arraylen9, !dbg !7982
  br i1 %.not, label %L69, label %L75, !dbg !7983

L69:                                              ; preds = %L54
  %79 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %61, {} addrspace(10)* %57, {} addrspace(10)* %71, {} addrspace(10)* %67), !dbg !7984
  %"'ipc16" = addrspacecast {} addrspace(10)* %57 to {} addrspace(11)*, !dbg !7985
  %80 = addrspacecast {} addrspace(10)* %61 to {} addrspace(11)*, !dbg !7985
  %81 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc16"), !dbg !7985
  %82 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %80) #75, !dbg !7985
  %"'ipc15" = bitcast {}* %81 to double**, !dbg !7985
  %83 = bitcast {}* %82 to double**, !dbg !7985
  %"arrayptr34'ipl" = load double*, double** %"'ipc15", align 8, !dbg !7985, !tbaa !382, !alias.scope !7989, !noalias !7990, !nonnull !68
  %84 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 8, !dbg !7985
  store double* %"arrayptr34'ipl", double** %84, align 8, !dbg !7985
  %arrayptr34 = load double*, double** %83, align 8, !dbg !7985, !tbaa !382, !alias.scope !7972, !noalias !7975, !nonnull !68
  %"'ipc14" = addrspacecast {} addrspace(10)* %67 to {} addrspace(11)*, !dbg !7985
  %85 = addrspacecast {} addrspace(10)* %71 to {} addrspace(11)*, !dbg !7985
  %86 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc14"), !dbg !7985
  %87 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %85) #75, !dbg !7985
  %"'ipc" = bitcast {}* %86 to double**, !dbg !7985
  %88 = bitcast {}* %87 to double**, !dbg !7985
  %"arrayptr1135'ipl" = load double*, double** %"'ipc", align 8, !dbg !7985, !tbaa !382, !alias.scope !7991, !noalias !7992, !nonnull !68
  %89 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 7, !dbg !7985
  store double* %"arrayptr1135'ipl", double** %89, align 8, !dbg !7985
  %arrayptr1135 = load double*, double** %88, align 8, !dbg !7985, !tbaa !382, !alias.scope !7977, !noalias !7980, !nonnull !68
  %.not58 = icmp eq i64 %arraylen7, 0, !dbg !7993
  br i1 %.not58, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !7993

.preheader.preheader:                             ; preds = %L69
  %90 = add nsw i64 %arraylen7, -1, !dbg !7993
  %91 = add nuw i64 %90, 1, !dbg !7993
  %92 = mul nuw i64 %91, 8, !dbg !7993
  %93 = call noalias nonnull i8* @malloc(i64 %92), !dbg !7993
  %_malloccache = bitcast i8* %93 to i64*, !dbg !7993
  %94 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 19, !dbg !7993
  store i64* %_malloccache, i64** %94, align 8, !dbg !7993
  store i64* %_malloccache, i64** %_cache, align 8, !dbg !7993, !invariant.group !7994
  %95 = mul nuw i64 %91, 8, !dbg !7993
  %96 = call noalias nonnull i8* @malloc(i64 %95), !dbg !7993
  %_malloccache25 = bitcast i8* %96 to double*, !dbg !7993
  %97 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 20, !dbg !7993
  store double* %_malloccache25, double** %97, align 8, !dbg !7993
  store double* %_malloccache25, double** %_cache24, align 8, !dbg !7993, !invariant.group !7995
  %98 = mul nuw i64 %91, 8, !dbg !7993
  %99 = call noalias nonnull i8* @malloc(i64 %98), !dbg !7993
  %_malloccache27 = bitcast i8* %99 to i64*, !dbg !7993
  %100 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 21, !dbg !7993
  store i64* %_malloccache27, i64** %100, align 8, !dbg !7993
  store i64* %_malloccache27, i64** %_cache26, align 8, !dbg !7993, !invariant.group !7996
  %101 = mul nuw i64 %91, 8, !dbg !7993
  %102 = call noalias nonnull i8* @malloc(i64 %101), !dbg !7993
  %_malloccache29 = bitcast i8* %102 to double*, !dbg !7993
  %103 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 22, !dbg !7993
  store double* %_malloccache29, double** %103, align 8, !dbg !7993
  store double* %_malloccache29, double** %_cache28, align 8, !dbg !7993, !invariant.group !7997
  br label %.preheader, !dbg !7993

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !7993
  %104 = phi i64 [ %125, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7993
  %105 = phi i64 [ %124, %.preheader ], [ 0, %.preheader.preheader ], !dbg !7993
  %106 = phi double [ %123, %.preheader ], [ 0.000000e+00, %.preheader.preheader ], !dbg !7993
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !7993
  %107 = shl i64 %105, 32, !dbg !7993
  %108 = ashr exact i64 %107, 32, !dbg !7993
  %109 = load i64*, i64** %_cache, align 8, !dbg !7993, !dereferenceable !306, !invariant.group !7994
  %110 = getelementptr inbounds i64, i64* %109, i64 %iv, !dbg !7993
  store i64 %108, i64* %110, align 8, !dbg !7993, !invariant.group !7998
  %111 = getelementptr inbounds double, double* %arrayptr34, i64 %108, !dbg !7993
  %112 = load double, double* %111, align 8, !dbg !7993, !tbaa !1731, !alias.scope !7999, !noalias !8002
  %113 = load double*, double** %_cache24, align 8, !dbg !7993, !dereferenceable !306, !invariant.group !7995
  %114 = getelementptr inbounds double, double* %113, i64 %iv, !dbg !7993
  store double %112, double* %114, align 8, !dbg !7993, !tbaa !1731, !invariant.group !8004
  %115 = shl i64 %104, 32, !dbg !7993
  %116 = ashr exact i64 %115, 32, !dbg !7993
  %117 = load i64*, i64** %_cache26, align 8, !dbg !7993, !dereferenceable !306, !invariant.group !7996
  %118 = getelementptr inbounds i64, i64* %117, i64 %iv, !dbg !7993
  store i64 %116, i64* %118, align 8, !dbg !7993, !invariant.group !8005
  %119 = getelementptr inbounds double, double* %arrayptr1135, i64 %116, !dbg !7993
  %120 = load double, double* %119, align 8, !dbg !7993, !tbaa !1731, !alias.scope !8006, !noalias !8009
  %121 = load double*, double** %_cache28, align 8, !dbg !7993, !dereferenceable !306, !invariant.group !7997
  %122 = getelementptr inbounds double, double* %121, i64 %iv, !dbg !7993
  store double %120, double* %122, align 8, !dbg !7993, !tbaa !1731, !invariant.group !8011
  %123 = call double @llvm.fmuladd.f64(double %112, double %120, double %106) #72, !dbg !7993
  %124 = add nsw i64 %108, 1, !dbg !7993
  %125 = add nsw i64 %116, 1, !dbg !7993
  %126 = icmp eq i64 %iv.next, %arraylen7, !dbg !7993
  br i1 %126, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !7993, !llvm.loop !8012

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  %phi.bo = fmul double %123, 5.000000e-01, !dbg !7984
  br label %cblas_ddot64_.exit, !dbg !7984

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L69
  %127 = phi double [ 0.000000e+00, %L69 ], [ %phi.bo, %cblas_ddot64_.exit.loopexit ]
  call void @llvm.julia.gc_preserve_end(token %79) #72, !dbg !7984
  %128 = bitcast [1 x [2 x i64]]* %31 to i8*, !dbg !8013
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %128, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const14 to i8*), i64 noundef 16, i1 noundef false) #72, !dbg !8013, !tbaa !86, !alias.scope !1749, !noalias !7944
  %arraylen14 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !8016, !tbaa !332, !range !87, !alias.scope !7953, !noalias !7956
  %129 = icmp ult i64 %arraylen14, 3, !dbg !8022
  br i1 %129, label %L101, label %L104, !dbg !8021

L75:                                              ; preds = %L54
  %current_task2236 = getelementptr inbounds {}**, {}*** %49, i64 -14, !dbg !8025
  %current_task22 = bitcast {}*** %current_task2236 to {}**, !dbg !8025
  %newstruct23 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #76, !dbg !8025
  %130 = bitcast {} addrspace(10)* %newstruct23 to {} addrspace(10)* addrspace(10)*, !dbg !8025
  %131 = addrspacecast {} addrspace(10)* addrspace(10)* %130 to {} addrspace(10)* addrspace(11)*, !dbg !8025
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %131, align 8, !dbg !8025, !tbaa !307, !alias.scope !117, !noalias !8026
  %132 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %131, i64 1, !dbg !8025
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %132, align 8, !dbg !8025, !tbaa !307, !alias.scope !117, !noalias !8026
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #76, !dbg !8025
  %133 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !8025
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 0, !dbg !8025
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269529280 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !8025, !tbaa !113, !alias.scope !117, !noalias !8026
  %.repack38 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 1, !dbg !8025
  store i64 %arraylen7, i64 addrspace(10)* %.repack38, align 8, !dbg !8025, !tbaa !113, !alias.scope !117, !noalias !8026
  %.repack40 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 2, !dbg !8025
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269529248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack40, align 8, !dbg !8025, !tbaa !113, !alias.scope !117, !noalias !8026
  %.repack42 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %133, i64 0, i32 3, !dbg !8025
  store i64 %arraylen9, i64 addrspace(10)* %.repack42, align 8, !dbg !8025, !tbaa !113, !alias.scope !117, !noalias !8026
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %131 release, align 8, !dbg !8025, !tbaa !307, !alias.scope !117, !noalias !8026
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct23, {} addrspace(10)* nofree nonnull %box) #77, !dbg !8025
  %134 = bitcast {} addrspace(10)* %newstruct23 to i8 addrspace(10)*, !dbg !8025
  %135 = addrspacecast i8 addrspace(10)* %134 to i8 addrspace(11)*, !dbg !8025
  %136 = getelementptr inbounds i8, i8 addrspace(11)* %135, i64 8, !dbg !8025
  %137 = bitcast i8 addrspace(11)* %136 to {} addrspace(10)* addrspace(11)*, !dbg !8025
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %137 release, align 8, !dbg !8025, !tbaa !307, !alias.scope !117, !noalias !8026
  %box26 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task22, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #76, !dbg !7983
  %138 = bitcast {} addrspace(10)* %box26 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !7983
  %139 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %138, i64 0, i64 0, !dbg !7983
  store {} addrspace(10)* %newstruct23, {} addrspace(10)* addrspace(10)* %139, align 8, !dbg !7983, !tbaa !113, !alias.scope !117, !noalias !8026
  %140 = addrspacecast {} addrspace(10)* %box26 to {} addrspace(12)*, !dbg !7983
  call void @ijl_throw({} addrspace(12)* %140) #73, !dbg !7983
  unreachable, !dbg !7983

L101:                                             ; preds = %cblas_ddot64_.exit
  %141 = addrspacecast [1 x [2 x i64]]* %31 to [1 x [2 x i64]] addrspace(11)*, !dbg !8021
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %141) #73, !dbg !8021
  unreachable, !dbg !8021

L104:                                             ; preds = %cblas_ddot64_.exit
  %142 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 3), !dbg !8027
  %143 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 12, !dbg !8027
  store {} addrspace(10)* %142, {} addrspace(10)** %143, align 8, !dbg !8027
  %144 = bitcast {} addrspace(10)* %142 to i8 addrspace(13)* addrspace(10)*, !dbg !8027
  %145 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %144, align 8, !dbg !8027
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %145, i8 0, i64 24, i1 false), !dbg !8027
  %146 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #74, !dbg !8027
  %147 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 13, !dbg !8032
  store {} addrspace(10)* %146, {} addrspace(10)** %147, align 8, !dbg !8032
  %_augmented18 = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143.354({} addrspace(10)* align 16 %146, {} addrspace(10)* align 16 %142, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1), !dbg !8032
  %148 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 11, !dbg !8034
  store { i8*, i8* } %_augmented18, { i8*, i8* }* %148, align 8, !dbg !8034
  %_augmented17 = call fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2136({} addrspace(10)* align 16 %146, {} addrspace(10)* align 16 %142), !dbg !8034
  %subcache = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented17, 0, !dbg !8034
  %149 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 9, !dbg !8034
  store { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %subcache, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }* %149, align 8, !dbg !8034
  %150 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented17, 1, !dbg !8034
  %"'ac" = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented17, 2, !dbg !8034
  %151 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 10, !dbg !8013
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %151, align 8, !dbg !8013
  %152 = bitcast [1 x [2 x i64]]* %33 to i8*, !dbg !8013
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %152, i8* noundef nonnull align 8 dereferenceable(16) bitcast ([2 x i64]* @_j_const14 to i8*), i64 noundef 16, i1 noundef false) #72, !dbg !8013, !tbaa !86, !alias.scope !1749, !noalias !7944
  %arraylen18 = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !8016, !tbaa !332, !range !87, !alias.scope !7953, !noalias !7956
  %153 = icmp ult i64 %arraylen18, 3, !dbg !8022
  br i1 %153, label %L135, label %L138, !dbg !8021

L135:                                             ; preds = %L104
  %154 = addrspacecast [1 x [2 x i64]]* %33 to [1 x [2 x i64]] addrspace(11)*, !dbg !8021
  call fastcc void @julia_throw_boundserror_2134({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %154) #73, !dbg !8021
  unreachable, !dbg !8021

L138:                                             ; preds = %L104
  %155 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 3), !dbg !8027
  %156 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 16, !dbg !8027
  store {} addrspace(10)* %155, {} addrspace(10)** %156, align 8, !dbg !8027
  %157 = bitcast {} addrspace(10)* %155 to i8 addrspace(13)* addrspace(10)*, !dbg !8027
  %158 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %157, align 8, !dbg !8027
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %158, i8 0, i64 24, i1 false), !dbg !8027
  %159 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #74, !dbg !8027
  %160 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 17, !dbg !8032
  store {} addrspace(10)* %159, {} addrspace(10)** %160, align 8, !dbg !8032
  %_augmented23 = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__2143.354({} addrspace(10)* align 16 %159, {} addrspace(10)* align 16 %155, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1), !dbg !8032
  %161 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 15, !dbg !8015
  store { i8*, i8* } %_augmented23, { i8*, i8* }* %161, align 8, !dbg !8015
  %"'ipg" = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %"'ipc19", i64 0, i64 0, !dbg !8015
  %162 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %48, i64 0, i64 0, !dbg !8015
  store {} addrspace(10)* %"'ac", {} addrspace(10)** %"'ipg", align 8, !dbg !8015, !alias.scope !8035, !noalias !8038
  store {} addrspace(10)* %150, {} addrspace(10)* addrspace(10)* %162, align 8, !dbg !8015, !alias.scope !8042, !noalias !8043
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %40, {} addrspace(10)* %150), !dbg !8015
  %"'ipc20" = addrspacecast [1 x {} addrspace(10)*]* %"'ipc19" to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !8015
  %163 = addrspacecast [1 x {} addrspace(10)*] addrspace(10)* %48 to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !8015
  %_augmented21 = call fastcc { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } @augmented_julia___1991.355([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %163, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc20", {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %159, {} addrspace(10)* align 16 %155), !dbg !8015
  %subcache22 = extractvalue { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } %_augmented21, 0, !dbg !8015
  %164 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, i32 0, i32 14, !dbg !8015
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %subcache22, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }* %164, align 8, !dbg !8015
  %165 = extractvalue { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, double } %_augmented21, 1, !dbg !8015
  %166 = fmul double %165, 5.000000e-01, !dbg !8044
  %167 = fadd double %127, %166, !dbg !8045
  %newstruct20.sroa.0.0..sroa_idx = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 0, !dbg !8046
  store double %127, double* %newstruct20.sroa.0.0..sroa_idx, align 8, !dbg !8046, !alias.scope !8047, !noalias !8050
  %newstruct20.sroa.2.0..sroa_idx45 = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 1, !dbg !8046
  store double %166, double* %newstruct20.sroa.2.0..sroa_idx45, align 8, !dbg !8046, !alias.scope !8047, !noalias !8050
  %newstruct20.sroa.3.0..sroa_idx46 = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, i64 2, !dbg !8046
  store double %167, double* %newstruct20.sroa.3.0..sroa_idx46, align 8, !dbg !8046, !alias.scope !8047, !noalias !8050
  %168 = load { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }* %3, align 8, !dbg !8046
  ret { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %168, !dbg !8046
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_compute_energy_2128.360([3 x double]* noalias nocapture nofree writeonly align 8 dereferenceable(24) "enzyme_sret" %0, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg) unnamed_addr #69 !dbg !8052 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %3 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %_cache = alloca double*, align 8
  %"'de43" = alloca double, align 8
  %4 = getelementptr double, double* %"'de43", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache44 = alloca double*, align 8
  %"'de47" = alloca double, align 8
  %5 = getelementptr double, double* %"'de47", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"'de48" = alloca double, align 8
  %6 = getelementptr double, double* %"'de48", i64 0
  store double 0.000000e+00, double* %6, align 8
  %_cache49 = alloca i64*, align 8
  %_cache55 = alloca i64*, align 8
  %"phi.bo'de" = alloca double, align 8
  %7 = getelementptr double, double* %"phi.bo'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %"'de67" = alloca double, align 8
  %8 = getelementptr double, double* %"'de67", i64 0
  store double 0.000000e+00, double* %8, align 8
  %"'de86" = alloca double, align 8
  %9 = getelementptr double, double* %"'de86", i64 0
  store double 0.000000e+00, double* %9, align 8
  %"'de87" = alloca double, align 8
  %10 = getelementptr double, double* %"'de87", i64 0
  store double 0.000000e+00, double* %10, align 8
  %"'de90" = alloca double, align 8
  %11 = getelementptr double, double* %"'de90", i64 0
  store double 0.000000e+00, double* %11, align 8
  %12 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 19
  %mdyncache_fromtape_cache = alloca i64*, align 8
  store i64* %12, i64** %mdyncache_fromtape_cache, align 8
  %13 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 20
  %mdyncache_fromtape_cache99 = alloca double*, align 8
  store double* %13, double** %mdyncache_fromtape_cache99, align 8
  %14 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 21
  %mdyncache_fromtape_cache101 = alloca i64*, align 8
  store i64* %14, i64** %mdyncache_fromtape_cache101, align 8
  %15 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 22
  %mdyncache_fromtape_cache103 = alloca double*, align 8
  store double* %15, double** %mdyncache_fromtape_cache103, align 8
  %16 = call {}*** @julia.get_pgcstack()
  %17 = bitcast {}*** %16 to {}**
  %18 = getelementptr inbounds {}*, {}** %17, i64 -14
  %"'ai" = alloca [1 x {} addrspace(10)*], i64 1, align 8
  %19 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %20 = bitcast [1 x {} addrspace(10)*]* %"'ai" to {}*
  %21 = bitcast {}* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull dereferenceable(8) dereferenceable_or_null(8) %21, i8 0, i64 8, i1 false)
  %22 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 0
  %"'ipc91" = bitcast {}* %19 to [1 x {} addrspace(10)*]*
  %23 = bitcast {} addrspace(10)* %22 to [1 x {} addrspace(10)*] addrspace(10)*, !enzyme_caststack !68
  %24 = call {}*** @julia.get_pgcstack() #72
  br i1 false, label %L19, label %L22, !dbg !8053

L19:                                              ; preds = %top
  unreachable

L22:                                              ; preds = %top
  %25 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 2, !dbg !8056
  %26 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 3, !dbg !8056
  %tapeArg26 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 1, !dbg !8061
  br i1 false, label %L51, label %L54, !dbg !8053

L51:                                              ; preds = %L22
  unreachable

L54:                                              ; preds = %L22
  %27 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 5, !dbg !8056
  %28 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 6, !dbg !8056
  %tapeArg32 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 4, !dbg !8061
  %arraylen7 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 18, !dbg !8063
  br i1 true, label %L69, label %L75, !dbg !8067

L69:                                              ; preds = %L54
  %29 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %26, {} addrspace(10)* %25, {} addrspace(10)* %28, {} addrspace(10)* %27), !dbg !8068
  %"'ipc37" = addrspacecast {} addrspace(10)* %25 to {} addrspace(11)*, !dbg !8069
  %30 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc37"), !dbg !8069
  %"arrayptr34'il_phi" = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 8, !dbg !8069
  %"'ipc" = addrspacecast {} addrspace(10)* %27 to {} addrspace(11)*, !dbg !8069
  %31 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !8069
  %"arrayptr1135'il_phi" = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 7, !dbg !8069
  %.not58 = icmp eq i64 %arraylen7, 0, !dbg !8073
  br i1 %.not58, label %cblas_ddot64_.exit, label %.preheader.preheader, !dbg !8073

.preheader.preheader:                             ; preds = %L69
  %32 = add nsw i64 %arraylen7, -1, !dbg !8073
  %33 = add nuw i64 %32, 1, !dbg !8073
  %34 = mul nuw i64 %33, 8, !dbg !8073
  %35 = mul nuw i64 %33, 8, !dbg !8073
  %36 = mul nuw i64 %33, 8, !dbg !8073
  %37 = mul nuw i64 %33, 8, !dbg !8073
  br label %.preheader, !dbg !8073

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %iv = phi i64 [ 0, %.preheader.preheader ], [ %iv.next, %.preheader ], !dbg !8073
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !8073
  %38 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dbg !8073, !dereferenceable !306, !invariant.group !8074
  %39 = getelementptr inbounds i64, i64* %38, i64 %iv, !dbg !8073
  %40 = load i64, i64* %39, align 8, !dbg !8073, !invariant.group !8075
  %"'ipg54" = getelementptr inbounds double, double* %"arrayptr34'il_phi", i64 %40, !dbg !8073
  %41 = load double*, double** %mdyncache_fromtape_cache99, align 8, !dbg !8073, !dereferenceable !306, !invariant.group !8076
  %42 = getelementptr inbounds double, double* %41, i64 %iv, !dbg !8073
  %43 = load double, double* %42, align 8, !dbg !8073, !invariant.group !8077
  %44 = load i64*, i64** %mdyncache_fromtape_cache101, align 8, !dbg !8073, !dereferenceable !306, !invariant.group !8078
  %45 = getelementptr inbounds i64, i64* %44, i64 %iv, !dbg !8073
  %46 = load i64, i64* %45, align 8, !dbg !8073, !invariant.group !8079
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr1135'il_phi", i64 %46, !dbg !8073
  %47 = load double*, double** %mdyncache_fromtape_cache103, align 8, !dbg !8073, !dereferenceable !306, !invariant.group !8080
  %48 = getelementptr inbounds double, double* %47, i64 %iv, !dbg !8073
  %49 = load double, double* %48, align 8, !dbg !8073, !invariant.group !8081
  %50 = icmp eq i64 %iv.next, %arraylen7, !dbg !8073
  br i1 %50, label %cblas_ddot64_.exit.loopexit, label %.preheader, !dbg !8073, !llvm.loop !8082

cblas_ddot64_.exit.loopexit:                      ; preds = %.preheader
  br label %cblas_ddot64_.exit, !dbg !8068

cblas_ddot64_.exit:                               ; preds = %cblas_ddot64_.exit.loopexit, %L69
  call void @llvm.julia.gc_preserve_end(token %29) #72, !dbg !8068
  br i1 false, label %L101, label %L104, !dbg !8083

L75:                                              ; preds = %L54
  unreachable

L101:                                             ; preds = %cblas_ddot64_.exit
  unreachable

L104:                                             ; preds = %cblas_ddot64_.exit
  %51 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 12, !dbg !8086
  %52 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 13, !dbg !8086
  %tapeArg84 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 11, !dbg !8091
  %tapeArg82 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 9, !dbg !8093
  %"'ip_phi8" = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 10, !dbg !8093
  br i1 false, label %L135, label %L138, !dbg !8083

L135:                                             ; preds = %L104
  unreachable

L138:                                             ; preds = %L104
  %53 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 16, !dbg !8086
  %54 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 17, !dbg !8086
  %tapeArg97 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 15, !dbg !8091
  %"'ipg95" = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %"'ipc91", i64 0, i64 0, !dbg !8085
  store {} addrspace(10)* %"'ip_phi8", {} addrspace(10)** %"'ipg95", align 8, !dbg !8085, !alias.scope !8094, !noalias !8097
  %"'ipc92" = addrspacecast [1 x {} addrspace(10)*]* %"'ipc91" to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !8085
  %55 = addrspacecast [1 x {} addrspace(10)*] addrspace(10)* %23 to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !8085
  %tapeArg93 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 14, !dbg !8085
  %"newstruct20.sroa.0.0..sroa_idx'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'", i64 0, i64 0, !dbg !8099
  %"newstruct20.sroa.2.0..sroa_idx45'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'", i64 0, i64 1, !dbg !8099
  %"newstruct20.sroa.3.0..sroa_idx46'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'", i64 0, i64 2, !dbg !8099
  br label %invertL138, !dbg !8099

inverttop:                                        ; preds = %invertL22
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL22:                                        ; preds = %invertL54
  call fastcc void @diffejulia__copyto_impl__2143({} addrspace(10)* align 16 %26, {} addrspace(10)* align 16 %25, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4, { i8*, i8* } %tapeArg26), !dbg !8061
  br label %inverttop

invertL54:                                        ; preds = %invertL69
  call fastcc void @diffejulia__copyto_impl__2143({} addrspace(10)* align 16 %28, {} addrspace(10)* align 16 %27, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 4, { i8*, i8* } %tapeArg32), !dbg !8061
  br label %invertL22

invertL69:                                        ; preds = %invertcblas_ddot64_.exit, %invert.preheader.preheader
  call void @llvm.julia.gc_preserve_end(token %117), !dbg !8068
  br label %invertL54

invert.preheader.preheader:                       ; preds = %invert.preheader
  %56 = load i64, i64* %"iv'ac", align 8
  %57 = load i64, i64* %"iv'ac", align 8
  %58 = load i64, i64* %"iv'ac", align 8
  %59 = load i64, i64* %"iv'ac", align 8
  %60 = load i64, i64* %"iv'ac", align 8
  %forfree98 = load i64*, i64** %mdyncache_fromtape_cache, align 8, !dereferenceable !306, !invariant.group !8074
  %61 = bitcast i64* %forfree98 to i8*
  call void @free(i8* nonnull %61), !dbg !8100
  %62 = load i64, i64* %"iv'ac", align 8
  %forfree100 = load double*, double** %mdyncache_fromtape_cache99, align 8, !dereferenceable !306, !invariant.group !8076
  %63 = bitcast double* %forfree100 to i8*
  call void @free(i8* nonnull %63), !dbg !8100
  %64 = load i64, i64* %"iv'ac", align 8
  %forfree102 = load i64*, i64** %mdyncache_fromtape_cache101, align 8, !dereferenceable !306, !invariant.group !8078
  %65 = bitcast i64* %forfree102 to i8*
  call void @free(i8* nonnull %65), !dbg !8100
  %66 = load i64, i64* %"iv'ac", align 8
  %forfree104 = load double*, double** %mdyncache_fromtape_cache103, align 8, !dereferenceable !306, !invariant.group !8080
  %67 = bitcast double* %forfree104 to i8*
  call void @free(i8* nonnull %67), !dbg !8100
  br label %invertL69

invert.preheader:                                 ; preds = %mergeinvert.preheader_cblas_ddot64_.exit.loopexit, %incinvert.preheader
  %68 = load double, double* %"'de", align 8, !dbg !8073
  store double 0.000000e+00, double* %"'de", align 8, !dbg !8073
  %69 = load i64, i64* %"iv'ac", align 8, !dbg !8073
  %arraylen7_unwrap = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 18, !dbg !8073
  %_unwrap = add nsw i64 %arraylen7_unwrap, -1, !dbg !8073
  %70 = add nuw i64 %_unwrap, 1, !dbg !8073
  %71 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 22, !dbg !8073
  %72 = getelementptr inbounds double, double* %71, i64 %69, !dbg !8073
  %73 = load double, double* %72, align 8, !dbg !8073, !tbaa !1731, !invariant.group !8101
  %74 = fmul fast double %68, %73, !dbg !8073
  %75 = load double, double* %"'de43", align 8, !dbg !8073
  %76 = fadd fast double %75, %74, !dbg !8073
  store double %76, double* %"'de43", align 8, !dbg !8073
  %77 = load i64, i64* %"iv'ac", align 8, !dbg !8073
  %78 = add nuw i64 %_unwrap, 1, !dbg !8073
  %79 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 20, !dbg !8073
  %80 = getelementptr inbounds double, double* %79, i64 %77, !dbg !8073
  %81 = load double, double* %80, align 8, !dbg !8073, !tbaa !1731, !invariant.group !8102
  %82 = fmul fast double %68, %81, !dbg !8073
  %83 = load double, double* %"'de47", align 8, !dbg !8073
  %84 = fadd fast double %83, %82, !dbg !8073
  store double %84, double* %"'de47", align 8, !dbg !8073
  %85 = load double, double* %"'de48", align 8, !dbg !8073
  %86 = fadd fast double %85, %68, !dbg !8073
  store double %86, double* %"'de48", align 8, !dbg !8073
  %87 = load double, double* %"'de47", align 8, !dbg !8073
  store double 0.000000e+00, double* %"'de47", align 8, !dbg !8073
  %88 = load i64, i64* %"iv'ac", align 8, !dbg !8073
  %89 = add nuw i64 %_unwrap, 1, !dbg !8073
  %90 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 21, !dbg !8073
  %91 = getelementptr inbounds i64, i64* %90, i64 %88, !dbg !8073
  %92 = load i64, i64* %91, align 8, !dbg !8073, !invariant.group !8103
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr1135'il_phi", i64 %92, !dbg !8073
  %93 = load double, double* %"'ipg_unwrap", align 8, !dbg !8073, !tbaa !1731, !alias.scope !8104, !noalias !8107
  %94 = fadd fast double %93, %87, !dbg !8073
  store double %94, double* %"'ipg_unwrap", align 8, !dbg !8073, !tbaa !1731, !alias.scope !8104, !noalias !8107
  %95 = load double, double* %"'de43", align 8, !dbg !8073
  store double 0.000000e+00, double* %"'de43", align 8, !dbg !8073
  %96 = load i64, i64* %"iv'ac", align 8, !dbg !8073
  %97 = add nuw i64 %_unwrap, 1, !dbg !8073
  %98 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %tapeArg, 19, !dbg !8073
  %99 = getelementptr inbounds i64, i64* %98, i64 %96, !dbg !8073
  %100 = load i64, i64* %99, align 8, !dbg !8073, !invariant.group !8109
  %"'ipg54_unwrap" = getelementptr inbounds double, double* %"arrayptr34'il_phi", i64 %100, !dbg !8073
  %101 = load double, double* %"'ipg54_unwrap", align 8, !dbg !8073, !tbaa !1731, !alias.scope !8110, !noalias !8113
  %102 = fadd fast double %101, %95, !dbg !8073
  store double %102, double* %"'ipg54_unwrap", align 8, !dbg !8073, !tbaa !1731, !alias.scope !8110, !noalias !8113
  %103 = load double, double* %"'de48", align 8
  store double 0.000000e+00, double* %"'de48", align 8
  %104 = load i64, i64* %"iv'ac", align 8
  %105 = icmp eq i64 %104, 0
  %106 = xor i1 %105, true
  %107 = select fast i1 %106, double %103, double 0.000000e+00
  %108 = load double, double* %"'de", align 8
  %109 = fadd fast double %108, %103
  %110 = select fast i1 %105, double %108, double %109
  store double %110, double* %"'de", align 8
  br i1 %105, label %invert.preheader.preheader, label %incinvert.preheader

incinvert.preheader:                              ; preds = %invert.preheader
  %111 = load i64, i64* %"iv'ac", align 8
  %112 = add nsw i64 %111, -1
  store i64 %112, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit.loopexit:                ; preds = %invertcblas_ddot64_.exit
  %113 = load double, double* %"phi.bo'de", align 8, !dbg !8068
  store double 0.000000e+00, double* %"phi.bo'de", align 8, !dbg !8068
  %114 = fmul fast double %113, 5.000000e-01, !dbg !8068
  %115 = load double, double* %"'de", align 8, !dbg !8068
  %116 = fadd fast double %115, %114, !dbg !8068
  store double %116, double* %"'de", align 8, !dbg !8068
  %_unwrap63 = add nsw i64 %arraylen7, -1
  br label %mergeinvert.preheader_cblas_ddot64_.exit.loopexit

mergeinvert.preheader_cblas_ddot64_.exit.loopexit: ; preds = %invertcblas_ddot64_.exit.loopexit
  store i64 %_unwrap63, i64* %"iv'ac", align 8
  br label %invert.preheader

invertcblas_ddot64_.exit:                         ; preds = %invertL104
  %117 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %26, {} addrspace(10)* %25, {} addrspace(10)* %28, {} addrspace(10)* %27), !dbg !8068
  %118 = load double, double* %"'de67", align 8
  store double 0.000000e+00, double* %"'de67", align 8
  %119 = xor i1 %.not58, true
  %120 = select fast i1 %119, double %118, double 0.000000e+00
  %121 = load double, double* %"phi.bo'de", align 8
  %122 = fadd fast double %121, %118
  %123 = select fast i1 %.not58, double %121, double %122
  store double %123, double* %"phi.bo'de", align 8
  br i1 %.not58, label %invertL69, label %invertcblas_ddot64_.exit.loopexit

invertL104:                                       ; preds = %invertL138
  call fastcc void @diffejulia___2136({} addrspace(10)* align 16 %52, {} addrspace(10)* align 16 %51, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %tapeArg82), !dbg !8093
  call fastcc void @diffejulia__copyto_impl__2143.356({} addrspace(10)* align 16 %52, {} addrspace(10)* align 16 %51, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1, { i8*, i8* } %tapeArg84), !dbg !8091
  br label %invertcblas_ddot64_.exit

invertL138:                                       ; preds = %L138
  %124 = load double, double* %"newstruct20.sroa.3.0..sroa_idx46'ipg", align 8, !dbg !8099, !alias.scope !8115, !noalias !8118
  store double 0.000000e+00, double* %"newstruct20.sroa.3.0..sroa_idx46'ipg", align 8, !dbg !8099, !alias.scope !8115, !noalias !8118
  %125 = load double, double* %"'de86", align 8, !dbg !8099
  %126 = fadd fast double %125, %124, !dbg !8099
  store double %126, double* %"'de86", align 8, !dbg !8099
  %127 = load double, double* %"newstruct20.sroa.2.0..sroa_idx45'ipg", align 8, !dbg !8099, !alias.scope !8115, !noalias !8118
  store double 0.000000e+00, double* %"newstruct20.sroa.2.0..sroa_idx45'ipg", align 8, !dbg !8099, !alias.scope !8115, !noalias !8118
  %128 = load double, double* %"'de87", align 8, !dbg !8099
  %129 = fadd fast double %128, %127, !dbg !8099
  store double %129, double* %"'de87", align 8, !dbg !8099
  %130 = load double, double* %"newstruct20.sroa.0.0..sroa_idx'ipg", align 8, !dbg !8099, !alias.scope !8115, !noalias !8118
  store double 0.000000e+00, double* %"newstruct20.sroa.0.0..sroa_idx'ipg", align 8, !dbg !8099, !alias.scope !8115, !noalias !8118
  %131 = load double, double* %"'de67", align 8, !dbg !8099
  %132 = fadd fast double %131, %130, !dbg !8099
  store double %132, double* %"'de67", align 8, !dbg !8099
  %133 = load double, double* %"'de86", align 8, !dbg !8120
  store double 0.000000e+00, double* %"'de86", align 8, !dbg !8120
  %134 = load double, double* %"'de67", align 8, !dbg !8120
  %135 = fadd fast double %134, %133, !dbg !8120
  store double %135, double* %"'de67", align 8, !dbg !8120
  %136 = load double, double* %"'de87", align 8, !dbg !8120
  %137 = fadd fast double %136, %133, !dbg !8120
  store double %137, double* %"'de87", align 8, !dbg !8120
  %138 = load double, double* %"'de87", align 8, !dbg !8121
  store double 0.000000e+00, double* %"'de87", align 8, !dbg !8121
  %139 = fmul fast double %138, 5.000000e-01, !dbg !8121
  %140 = load double, double* %"'de90", align 8, !dbg !8121
  %141 = fadd fast double %140, %139, !dbg !8121
  store double %141, double* %"'de90", align 8, !dbg !8121
  %142 = load double, double* %"'de90", align 8, !dbg !8085
  call fastcc void @diffejulia___1991.357([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %55, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc92", {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %54, {} addrspace(10)* align 16 %53, double %142, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %tapeArg93), !dbg !8085
  store double 0.000000e+00, double* %"'de90", align 8, !dbg !8085
  call fastcc void @diffejulia__copyto_impl__2143.356({} addrspace(10)* align 16 %54, {} addrspace(10)* align 16 %53, {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", i64 signext 1, { i8*, i8* } %tapeArg97), !dbg !8091
  br label %invertL104
}

; Function Attrs: mustprogress willreturn
define internal void @diffejulia_integrate1_1954({} addrspace(10)* noundef nonnull align 8 dereferenceable(192) %0, {} addrspace(10)* align 8 %"'") local_unnamed_addr #55 !dbg !3005 {
top:
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %loopLimit_cache = alloca i64, align 8
  %"iv3'ac" = alloca i64, align 8
  %"iv5'ac" = alloca i64, align 8
  %"iv7'ac" = alloca i64, align 8
  %"iv9'ac" = alloca i64, align 8
  %"iv11'ac" = alloca i64, align 8
  %loopLimit_cache24 = alloca i64*, align 8
  %"iv13'ac" = alloca i64, align 8
  %"iv15'ac" = alloca i64, align 8
  %"iv17'ac" = alloca i64, align 8
  %loopLimit_cache45 = alloca i64*, align 8
  %"iv19'ac" = alloca i64, align 8
  %loopLimit_cache57 = alloca i64*, align 8
  %"'de" = alloca double, align 8
  %1 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %1, align 8
  %"'de81" = alloca double, align 8
  %2 = getelementptr double, double* %"'de81", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"'de90" = alloca double, align 8
  %3 = getelementptr double, double* %"'de90", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"'ip_phi2_cache" = alloca {} addrspace(10)*, align 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %"'ip_phi2_cache", align 8
  %.not933.not_cache = alloca i1, align 1
  %_cache = alloca {} addrspace(10)*, align 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %_cache, align 8
  %_cache106 = alloca {} addrspace(10)*, align 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %_cache106, align 8
  %_augmented_cache = alloca i64, align 8
  %"'ip_phi5_cache" = alloca {} addrspace(10)*, align 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %"'ip_phi5_cache", align 8
  %.not943.not_cache = alloca i1, align 1
  %"arrayref774'de" = alloca double, align 8
  %4 = getelementptr double, double* %"arrayref774'de", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache115 = alloca {} addrspace(10)*, align 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %_cache115, align 8
  %.not946_cache = alloca i1, align 1
  %_cache119 = alloca i8, align 1
  %value_phi79_cache = alloca i64*, align 8
  %"arrayref743'de" = alloca double, align 8
  %5 = getelementptr double, double* %"arrayref743'de", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"'ip_phi14_cache" = alloca {} addrspace(10)*, align 8
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %"'ip_phi14_cache", align 8
  %"'de152" = alloca double, align 8
  %6 = getelementptr double, double* %"'de152", i64 0
  store double 0.000000e+00, double* %6, align 8
  %arrayref_cache = alloca double*, align 8
  %"arrayref'de" = alloca double, align 8
  %7 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %_cache171 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache178 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi20_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache182 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache189 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi19_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %value_phi372_cache = alloca double*, align 8
  %subcache198_cache = alloca { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, align 8
  %"value_phi372'de" = alloca double, align 8
  %8 = getelementptr double, double* %"value_phi372'de", i64 0
  store double 0.000000e+00, double* %8, align 8
  %_cache202 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi17_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache207_cache = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, align 8
  %"'de210" = alloca double, align 8
  %9 = getelementptr double, double* %"'de210", i64 0
  store double 0.000000e+00, double* %9, align 8
  %_cache211 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %value_phi414_cache = alloca i64**, align 8
  %"arrayref710'de" = alloca double, align 8
  %10 = getelementptr double, double* %"arrayref710'de", i64 0
  store double 0.000000e+00, double* %10, align 8
  %arraysize385_cache = alloca i64, align 8
  %_cache238 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache246 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_augmented206_cache = alloca { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, align 8
  %_cache250 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache257 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi27_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache261 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi26_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache265 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache269_cache = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, align 8
  %_cache272 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %box_cache = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"box'mi_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache282 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"newstruct430'mi_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache298 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache301 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache313 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache322 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache326 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi33_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi36_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache342 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache345 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %.not908.not_cache = alloca i1*, align 8
  %_cache361 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache365 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_augmented369_cache = alloca { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)*, align 8
  %"'ip_phi39_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %.not918.not_cache = alloca i1*, align 8
  %"arrayref689'de" = alloca double, align 8
  %11 = getelementptr double, double* %"arrayref689'de", i64 0
  store double 0.000000e+00, double* %11, align 8
  %_cache393 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %.not921_cache = alloca i1*, align 8
  %_cache400 = alloca i8*, align 8
  %_cache405 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi41_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache411_cache = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, align 8
  %"'de414" = alloca double, align 8
  %12 = getelementptr double, double* %"'de414", i64 0
  store double 0.000000e+00, double* %12, align 8
  %.not8851018_cache = alloca i1*, align 8
  %_cache419 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %value_phi523_cache = alloca i64**, align 8
  %"arrayref650'de" = alloca double, align 8
  %13 = getelementptr double, double* %"arrayref650'de", i64 0
  store double 0.000000e+00, double* %13, align 8
  %arraysize494_cache = alloca i64, align 8
  %_cache446 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache450 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi53_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache455_cache = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, align 8
  %_cache458 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_augmented410_cache = alloca { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, align 8
  %_cache462 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi50_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache467_cache = alloca { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, align 8
  %_cache470 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi49_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache474 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache478_cache = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, align 8
  %value_phi579_cache = alloca i64**, align 8
  %"arrayref634'de" = alloca double, align 8
  %14 = getelementptr double, double* %"arrayref634'de", i64 0
  store double 0.000000e+00, double* %14, align 8
  %"'de507" = alloca double, align 8
  %15 = getelementptr double, double* %"'de507", i64 0
  store double 0.000000e+00, double* %15, align 8
  %"'de508" = alloca double, align 8
  %16 = getelementptr double, double* %"'de508", i64 0
  store double 0.000000e+00, double* %16, align 8
  %_cache512 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi63_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache518_cache = alloca { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)*, align 8
  %_cache521 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_augmented454_cache = alloca { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, align 8
  %_cache525 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'ip_phi62_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache530_cache = alloca { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, align 8
  %_cache533 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi61_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_cache537 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %subcache541_cache = alloca { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, align 8
  %_cache546 = alloca {} addrspace(10)* addrspace(10)*, align 8
  %"'mi69_cache" = alloca {} addrspace(10)* addrspace(10)*, align 8
  %_augmented553_cache = alloca { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)*, align 8
  %"'de559" = alloca double, align 8
  %17 = getelementptr double, double* %"'de559", i64 0
  store double 0.000000e+00, double* %17, align 8
  %"'de560" = alloca double, align 8
  %18 = getelementptr double, double* %"'de560", i64 0
  store double 0.000000e+00, double* %18, align 8
  %"'de561" = alloca double, align 8
  %19 = getelementptr double, double* %"'de561", i64 0
  store double 0.000000e+00, double* %19, align 8
  %"'de569" = alloca double, align 8
  %20 = getelementptr double, double* %"'de569", i64 0
  store double 0.000000e+00, double* %20, align 8
  %"'de572" = alloca double, align 8
  %21 = getelementptr double, double* %"'de572", i64 0
  store double 0.000000e+00, double* %21, align 8
  %"'de578" = alloca double, align 8
  %22 = getelementptr double, double* %"'de578", i64 0
  store double 0.000000e+00, double* %22, align 8
  %"'de586" = alloca double, align 8
  %23 = getelementptr double, double* %"'de586", i64 0
  store double 0.000000e+00, double* %23, align 8
  %"'de587" = alloca double, align 8
  %24 = getelementptr double, double* %"'de587", i64 0
  store double 0.000000e+00, double* %24, align 8
  %"'de588" = alloca double, align 8
  %25 = getelementptr double, double* %"'de588", i64 0
  store double 0.000000e+00, double* %25, align 8
  %_augmented590_cache = alloca { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)*, align 8
  %_cache592 = alloca i8*, align 8
  %26 = call {}*** @julia.get_pgcstack()
  %27 = call {}*** @julia.get_pgcstack()
  %28 = call {}*** @julia.get_pgcstack()
  %29 = call {}*** @julia.get_pgcstack()
  %30 = call {}*** @julia.get_pgcstack()
  %31 = call {}*** @julia.get_pgcstack()
  %32 = call {}*** @julia.get_pgcstack()
  %33 = call {}*** @julia.get_pgcstack()
  %34 = call {}*** @julia.get_pgcstack()
  %35 = call {}*** @julia.get_pgcstack()
  %36 = call {}*** @julia.get_pgcstack()
  %37 = call {}*** @julia.get_pgcstack()
  %38 = call {}*** @julia.get_pgcstack()
  %39 = call {}*** @julia.get_pgcstack()
  %40 = call {}*** @julia.get_pgcstack()
  %41 = call {}*** @julia.get_pgcstack()
  %42 = call {}*** @julia.get_pgcstack()
  %43 = call {}*** @julia.get_pgcstack()
  %44 = call {}*** @julia.get_pgcstack()
  %45 = call {}*** @julia.get_pgcstack()
  %46 = call {}*** @julia.get_pgcstack()
  %47 = call {}*** @julia.get_pgcstack()
  %48 = call {}*** @julia.get_pgcstack()
  %49 = call {}*** @julia.get_pgcstack()
  %50 = call {}*** @julia.get_pgcstack()
  %51 = call {}*** @julia.get_pgcstack()
  %52 = call {}*** @julia.get_pgcstack()
  %53 = call {}*** @julia.get_pgcstack()
  %54 = call {}*** @julia.get_pgcstack()
  %55 = call {}*** @julia.get_pgcstack()
  %56 = call {}*** @julia.get_pgcstack()
  %57 = call {}*** @julia.get_pgcstack()
  %58 = call {}*** @julia.get_pgcstack()
  %59 = call {}*** @julia.get_pgcstack()
  %60 = call {}*** @julia.get_pgcstack()
  %61 = call {}*** @julia.get_pgcstack()
  %62 = call {}*** @julia.get_pgcstack()
  %63 = call {}*** @julia.get_pgcstack()
  %64 = call {}*** @julia.get_pgcstack()
  %65 = call {}*** @julia.get_pgcstack()
  %66 = call {}*** @julia.get_pgcstack()
  %67 = call {}*** @julia.get_pgcstack()
  %68 = call {}*** @julia.get_pgcstack()
  %69 = call {}*** @julia.get_pgcstack()
  %70 = call {}*** @julia.get_pgcstack()
  %71 = call {}*** @julia.get_pgcstack()
  %72 = call {}*** @julia.get_pgcstack()
  %73 = call {}*** @julia.get_pgcstack()
  %74 = call {}*** @julia.get_pgcstack()
  %75 = call {}*** @julia.get_pgcstack()
  %76 = call {}*** @julia.get_pgcstack()
  %77 = call {}*** @julia.get_pgcstack()
  %78 = call {}*** @julia.get_pgcstack()
  %79 = call {}*** @julia.get_pgcstack()
  %80 = call {}*** @julia.get_pgcstack()
  %81 = call {}*** @julia.get_pgcstack()
  %82 = call {}*** @julia.get_pgcstack()
  %83 = call {}*** @julia.get_pgcstack()
  %84 = call {}*** @julia.get_pgcstack()
  %85 = call {}*** @julia.get_pgcstack()
  %86 = call {}*** @julia.get_pgcstack()
  %87 = call {}*** @julia.get_pgcstack()
  %88 = call {}*** @julia.get_pgcstack()
  %89 = call {}*** @julia.get_pgcstack()
  %90 = call {}*** @julia.get_pgcstack()
  %91 = call {}*** @julia.get_pgcstack()
  %92 = call {}*** @julia.get_pgcstack()
  %93 = call {}*** @julia.get_pgcstack()
  %94 = call {}*** @julia.get_pgcstack()
  %95 = call {}*** @julia.get_pgcstack()
  %96 = call {}*** @julia.get_pgcstack()
  %97 = call {}*** @julia.get_pgcstack()
  %98 = call {}*** @julia.get_pgcstack()
  %99 = call {}*** @julia.get_pgcstack()
  %100 = call {}*** @julia.get_pgcstack()
  %101 = call {}*** @julia.get_pgcstack()
  %102 = call {}*** @julia.get_pgcstack()
  %103 = call {}*** @julia.get_pgcstack()
  %104 = call {}*** @julia.get_pgcstack()
  %105 = call {}*** @julia.get_pgcstack()
  %106 = call {}*** @julia.get_pgcstack()
  %107 = call {}*** @julia.get_pgcstack()
  %108 = call {}*** @julia.get_pgcstack()
  %109 = call {}*** @julia.get_pgcstack()
  %110 = call {}*** @julia.get_pgcstack()
  %111 = call {}*** @julia.get_pgcstack()
  %112 = call {}*** @julia.get_pgcstack()
  %113 = call {}*** @julia.get_pgcstack()
  %114 = call {}*** @julia.get_pgcstack()
  %115 = call {}*** @julia.get_pgcstack()
  %116 = call {}*** @julia.get_pgcstack()
  %117 = call {}*** @julia.get_pgcstack()
  %118 = call {}*** @julia.get_pgcstack()
  %119 = call {}*** @julia.get_pgcstack()
  %120 = call {}*** @julia.get_pgcstack()
  %121 = call {}*** @julia.get_pgcstack()
  %122 = call {}*** @julia.get_pgcstack()
  %123 = call {}*** @julia.get_pgcstack()
  %124 = call {}*** @julia.get_pgcstack()
  %125 = call {}*** @julia.get_pgcstack()
  %126 = call {}*** @julia.get_pgcstack()
  %127 = call {}*** @julia.get_pgcstack()
  %128 = call {}*** @julia.get_pgcstack()
  %129 = call {}*** @julia.get_pgcstack()
  %130 = call {}*** @julia.get_pgcstack()
  %131 = call {}*** @julia.get_pgcstack()
  %132 = call {}*** @julia.get_pgcstack()
  %133 = call {}*** @julia.get_pgcstack()
  %134 = call {}*** @julia.get_pgcstack()
  %135 = call {}*** @julia.get_pgcstack()
  %136 = call {}*** @julia.get_pgcstack()
  %137 = call {}*** @julia.get_pgcstack()
  %138 = call {}*** @julia.get_pgcstack()
  %139 = call {}*** @julia.get_pgcstack()
  %140 = call {}*** @julia.get_pgcstack()
  %141 = call {}*** @julia.get_pgcstack()
  %142 = call {}*** @julia.get_pgcstack()
  %143 = call {}*** @julia.get_pgcstack()
  %144 = call {}*** @julia.get_pgcstack()
  %145 = call {}*** @julia.get_pgcstack()
  %146 = call {}*** @julia.get_pgcstack()
  %147 = call {}*** @julia.get_pgcstack()
  %148 = call {}*** @julia.get_pgcstack()
  %149 = call {}*** @julia.get_pgcstack()
  %150 = call {}*** @julia.get_pgcstack()
  %151 = call {}*** @julia.get_pgcstack()
  %152 = call {}*** @julia.get_pgcstack()
  %153 = call {}*** @julia.get_pgcstack()
  %154 = call {}*** @julia.get_pgcstack()
  %155 = call {}*** @julia.get_pgcstack()
  %156 = call {}*** @julia.get_pgcstack()
  %157 = call {}*** @julia.get_pgcstack()
  %158 = call {}*** @julia.get_pgcstack()
  %159 = call {}*** @julia.get_pgcstack()
  %160 = call {}*** @julia.get_pgcstack()
  %161 = call {}*** @julia.get_pgcstack()
  %162 = call {}*** @julia.get_pgcstack()
  %163 = call {}*** @julia.get_pgcstack()
  %164 = call {}*** @julia.get_pgcstack()
  %165 = call {}*** @julia.get_pgcstack()
  %166 = call {}*** @julia.get_pgcstack()
  %167 = call {}*** @julia.get_pgcstack()
  %168 = call {}*** @julia.get_pgcstack()
  %169 = call {}*** @julia.get_pgcstack()
  %170 = call {}*** @julia.get_pgcstack()
  %171 = call {}*** @julia.get_pgcstack()
  %172 = call {}*** @julia.get_pgcstack()
  %173 = call {}*** @julia.get_pgcstack()
  %174 = call {}*** @julia.get_pgcstack()
  %175 = call {}*** @julia.get_pgcstack()
  %176 = call {}*** @julia.get_pgcstack()
  %177 = call {}*** @julia.get_pgcstack()
  %178 = call {}*** @julia.get_pgcstack()
  %179 = call {}*** @julia.get_pgcstack()
  %180 = call {}*** @julia.get_pgcstack()
  %181 = call {}*** @julia.get_pgcstack()
  %182 = call {}*** @julia.get_pgcstack()
  %183 = call {}*** @julia.get_pgcstack()
  %184 = call {}*** @julia.get_pgcstack()
  %185 = call {}*** @julia.get_pgcstack()
  %186 = call {}*** @julia.get_pgcstack()
  %187 = call {}*** @julia.get_pgcstack()
  %188 = call {}*** @julia.get_pgcstack()
  %189 = call {}*** @julia.get_pgcstack()
  %190 = call {}*** @julia.get_pgcstack()
  %191 = call {}*** @julia.get_pgcstack()
  %192 = call {}*** @julia.get_pgcstack()
  %193 = call {}*** @julia.get_pgcstack()
  %194 = call {}*** @julia.get_pgcstack()
  %195 = call {}*** @julia.get_pgcstack()
  %196 = call {}*** @julia.get_pgcstack()
  %197 = call {}*** @julia.get_pgcstack()
  %198 = call {}*** @julia.get_pgcstack()
  %199 = call {}*** @julia.get_pgcstack()
  %200 = call {}*** @julia.get_pgcstack()
  %201 = call {}*** @julia.get_pgcstack()
  %202 = call {}*** @julia.get_pgcstack()
  %203 = call {}*** @julia.get_pgcstack()
  %204 = call {}*** @julia.get_pgcstack()
  %205 = call {}*** @julia.get_pgcstack()
  %206 = call {}*** @julia.get_pgcstack()
  %207 = call {}*** @julia.get_pgcstack()
  %208 = call {}*** @julia.get_pgcstack()
  %209 = call {}*** @julia.get_pgcstack()
  %210 = call {}*** @julia.get_pgcstack()
  %211 = call {}*** @julia.get_pgcstack()
  %212 = call {}*** @julia.get_pgcstack()
  %213 = call {}*** @julia.get_pgcstack()
  %214 = call {}*** @julia.get_pgcstack()
  %215 = call {}*** @julia.get_pgcstack()
  %216 = call {}*** @julia.get_pgcstack()
  %217 = call {}*** @julia.get_pgcstack()
  %218 = call {}*** @julia.get_pgcstack()
  %219 = call {}*** @julia.get_pgcstack()
  %220 = call {}*** @julia.get_pgcstack()
  %221 = call {}*** @julia.get_pgcstack()
  %222 = call {}*** @julia.get_pgcstack()
  %223 = call {}*** @julia.get_pgcstack()
  %224 = call {}*** @julia.get_pgcstack()
  %225 = call {}*** @julia.get_pgcstack()
  %226 = call {}*** @julia.get_pgcstack()
  %227 = call {}*** @julia.get_pgcstack()
  %228 = call {}*** @julia.get_pgcstack()
  %229 = call {}*** @julia.get_pgcstack()
  %230 = call {}*** @julia.get_pgcstack()
  %231 = call {}*** @julia.get_pgcstack()
  %232 = call {}*** @julia.get_pgcstack()
  %233 = call {}*** @julia.get_pgcstack()
  %234 = call {}*** @julia.get_pgcstack()
  %235 = call {}*** @julia.get_pgcstack()
  %236 = call {}*** @julia.get_pgcstack()
  %237 = call {}*** @julia.get_pgcstack()
  %238 = call {}*** @julia.get_pgcstack()
  %239 = call {}*** @julia.get_pgcstack()
  %240 = call {}*** @julia.get_pgcstack()
  %241 = call {}*** @julia.get_pgcstack()
  %242 = call {}*** @julia.get_pgcstack()
  %243 = call {}*** @julia.get_pgcstack()
  %244 = call {}*** @julia.get_pgcstack()
  %245 = call {}*** @julia.get_pgcstack()
  %246 = call {}*** @julia.get_pgcstack()
  %247 = call {}*** @julia.get_pgcstack()
  %248 = call {}*** @julia.get_pgcstack()
  %249 = call {}*** @julia.get_pgcstack()
  %250 = call {}*** @julia.get_pgcstack()
  %251 = call {}*** @julia.get_pgcstack()
  %252 = call {}*** @julia.get_pgcstack()
  %253 = call {}*** @julia.get_pgcstack()
  %254 = call {}*** @julia.get_pgcstack()
  %255 = call {}*** @julia.get_pgcstack()
  %256 = call {}*** @julia.get_pgcstack()
  %257 = call {}*** @julia.get_pgcstack()
  %258 = call {}*** @julia.get_pgcstack()
  %259 = call {}*** @julia.get_pgcstack()
  %260 = call {}*** @julia.get_pgcstack()
  %261 = call {}*** @julia.get_pgcstack()
  %262 = call {}*** @julia.get_pgcstack()
  %263 = call {}*** @julia.get_pgcstack()
  %264 = call {}*** @julia.get_pgcstack()
  %265 = call {}*** @julia.get_pgcstack()
  %266 = call {}*** @julia.get_pgcstack()
  %267 = call {}*** @julia.get_pgcstack()
  %268 = call {}*** @julia.get_pgcstack()
  %269 = call {}*** @julia.get_pgcstack()
  %270 = call {}*** @julia.get_pgcstack()
  %271 = call {}*** @julia.get_pgcstack()
  %272 = call {}*** @julia.get_pgcstack()
  %273 = call {}*** @julia.get_pgcstack()
  %274 = call {}*** @julia.get_pgcstack()
  %275 = call {}*** @julia.get_pgcstack()
  %276 = call {}*** @julia.get_pgcstack()
  %277 = call {}*** @julia.get_pgcstack()
  %278 = call {}*** @julia.get_pgcstack()
  %279 = call {}*** @julia.get_pgcstack()
  %280 = call {}*** @julia.get_pgcstack()
  %281 = call {}*** @julia.get_pgcstack()
  %282 = call {}*** @julia.get_pgcstack()
  %283 = call {}*** @julia.get_pgcstack()
  %284 = call {}*** @julia.get_pgcstack()
  %285 = call {}*** @julia.get_pgcstack()
  %286 = call {}*** @julia.get_pgcstack()
  %287 = call {}*** @julia.get_pgcstack()
  %288 = call {}*** @julia.get_pgcstack()
  %289 = call {}*** @julia.get_pgcstack()
  %290 = call {}*** @julia.get_pgcstack()
  %291 = call {}*** @julia.get_pgcstack()
  %292 = call {}*** @julia.get_pgcstack()
  %293 = call {}*** @julia.get_pgcstack()
  %294 = call {}*** @julia.get_pgcstack()
  %295 = call {}*** @julia.get_pgcstack()
  %296 = call {}*** @julia.get_pgcstack()
  %297 = call {}*** @julia.get_pgcstack()
  %298 = call {}*** @julia.get_pgcstack()
  %299 = call {}*** @julia.get_pgcstack()
  %300 = call {}*** @julia.get_pgcstack()
  %301 = call {}*** @julia.get_pgcstack()
  %302 = call {}*** @julia.get_pgcstack()
  %303 = call {}*** @julia.get_pgcstack()
  %304 = call {}*** @julia.get_pgcstack()
  %305 = call {}*** @julia.get_pgcstack()
  %306 = call {}*** @julia.get_pgcstack()
  %307 = call {}*** @julia.get_pgcstack()
  %308 = call {}*** @julia.get_pgcstack()
  %309 = call {}*** @julia.get_pgcstack()
  %310 = call {}*** @julia.get_pgcstack()
  %311 = call {}*** @julia.get_pgcstack()
  %312 = call {}*** @julia.get_pgcstack()
  %313 = call {}*** @julia.get_pgcstack()
  %314 = call {}*** @julia.get_pgcstack()
  %315 = call {}*** @julia.get_pgcstack()
  %316 = call {}*** @julia.get_pgcstack()
  %317 = call {}*** @julia.get_pgcstack()
  %318 = call {}*** @julia.get_pgcstack()
  %319 = call {}*** @julia.get_pgcstack()
  %320 = call {}*** @julia.get_pgcstack()
  %321 = call {}*** @julia.get_pgcstack()
  %322 = call {}*** @julia.get_pgcstack()
  %323 = call {}*** @julia.get_pgcstack()
  %324 = call {}*** @julia.get_pgcstack()
  %325 = call {}*** @julia.get_pgcstack()
  %326 = call {}*** @julia.get_pgcstack()
  %327 = call {}*** @julia.get_pgcstack()
  %328 = call {}*** @julia.get_pgcstack()
  %329 = call {}*** @julia.get_pgcstack()
  %330 = call {}*** @julia.get_pgcstack()
  %331 = call {}*** @julia.get_pgcstack()
  %332 = call {}*** @julia.get_pgcstack()
  %333 = call {}*** @julia.get_pgcstack()
  %334 = call {}*** @julia.get_pgcstack()
  %335 = call {}*** @julia.get_pgcstack()
  %336 = call {}*** @julia.get_pgcstack()
  %337 = call {}*** @julia.get_pgcstack()
  %338 = call {}*** @julia.get_pgcstack()
  %339 = call {}*** @julia.get_pgcstack()
  %340 = call {}*** @julia.get_pgcstack()
  %341 = call {}*** @julia.get_pgcstack()
  %342 = call {}*** @julia.get_pgcstack()
  %newstruct23 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct62 = alloca [1 x [1 x i64]], align 8
  %"'ipa564" = alloca [3 x double], align 8
  store [3 x double] zeroinitializer, [3 x double]* %"'ipa564", align 8
  %343 = alloca [3 x double], align 8
  %newstruct102 = alloca [1 x [1 x i64]], align 8
  %newstruct103 = alloca { [1 x [1 x i64]], i64 }, align 8
  %"'ipa136" = alloca { i64, {} addrspace(10)* }, align 8
  store { i64, {} addrspace(10)* } zeroinitializer, { i64, {} addrspace(10)* }* %"'ipa136", align 8
  %344 = alloca { i64, {} addrspace(10)* }, align 8
  %newstruct309 = alloca [2 x [1 x i64]], align 8
  %"'ipa194" = alloca [1 x {} addrspace(10)*], align 8
  store [1 x {} addrspace(10)*] zeroinitializer, [1 x {} addrspace(10)*]* %"'ipa194", align 8
  %345 = alloca [1 x {} addrspace(10)*], align 8
  %newstruct391 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct397 = alloca [1 x [1 x i64]], align 8
  %newstruct444 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct500 = alloca { [1 x [1 x i64]], i64 }, align 8
  %newstruct506 = alloca [1 x [1 x i64]], align 8
  %newstruct562 = alloca [1 x [1 x i64]], align 8
  %"'ipa510" = alloca [1 x {} addrspace(10)*], align 8
  store [1 x {} addrspace(10)*] zeroinitializer, [1 x {} addrspace(10)*]* %"'ipa510", align 8
  %346 = alloca [1 x {} addrspace(10)*], align 8
  %"'ipa589" = alloca [3 x double], align 8
  store [3 x double] zeroinitializer, [3 x double]* %"'ipa589", align 8
  %347 = alloca [3 x double], align 8
  %newstruct618 = alloca [1 x [1 x i64]], align 8
  %newstruct619 = alloca { [1 x [1 x i64]], i64 }, align 8
  %348 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %349 = alloca [1 x {} addrspace(10)*], align 8
  %"'ipa357" = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  store { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } zeroinitializer, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa357", align 8
  %350 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %newstruct734 = alloca [2 x [1 x i64]], align 8
  %351 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %352 = alloca [1 x {} addrspace(10)*], align 8
  %"'ipa" = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  store { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } zeroinitializer, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa", align 8
  %353 = alloca { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, align 8
  %354 = call {}*** @julia.get_pgcstack() #72
  %ptls_field792 = getelementptr inbounds {}**, {}*** %354, i64 2
  %355 = bitcast {}*** %ptls_field792 to i64***
  %ptls_load793794 = load i64**, i64*** %355, align 8, !tbaa !69, !alias.scope !3006, !noalias !3009
  %356 = getelementptr inbounds i64*, i64** %ptls_load793794, i64 2
  %safepoint = load i64*, i64** %356, align 8, !tbaa !73, !invariant.load !68, !alias.scope !3011, !noalias !3014
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #72, !dbg !3016
  fence syncscope("singlethread") seq_cst
  %"'ipc" = bitcast {} addrspace(10)* %"'" to i8 addrspace(10)*, !dbg !3017
  %357 = bitcast {} addrspace(10)* %0 to i8 addrspace(10)*, !dbg !3017
  %"getfield_addr795'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 120, !dbg !3017
  %getfield_addr795 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 120, !dbg !3017
  %"'ipc102" = bitcast i8 addrspace(10)* %"getfield_addr795'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %358 = bitcast i8 addrspace(10)* %getfield_addr795 to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %"'ipc103" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc102" to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %359 = addrspacecast {} addrspace(10)* addrspace(10)* %358 to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %"getfield'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc103" unordered, align 8, !dbg !3017, !tbaa !307, !alias.scope !3021, !noalias !3024, !nonnull !68, !dereferenceable !453
  %getfield = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %359 unordered, align 8, !dbg !3017, !tbaa !307, !alias.scope !3026, !noalias !3027, !nonnull !68, !dereferenceable !453, !align !454
  %"getfield_addr2796'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 128, !dbg !3017
  %getfield_addr2796 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 128, !dbg !3017
  %"'ipc100" = bitcast i8 addrspace(10)* %"getfield_addr2796'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %360 = bitcast i8 addrspace(10)* %getfield_addr2796 to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %"'ipc101" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc100" to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %361 = addrspacecast {} addrspace(10)* addrspace(10)* %360 to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %"getfield3'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc101" unordered, align 8, !dbg !3017, !tbaa !307, !alias.scope !3021, !noalias !3024, !nonnull !68, !dereferenceable !453
  %getfield3 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %361 unordered, align 8, !dbg !3017, !tbaa !307, !alias.scope !3026, !noalias !3027, !nonnull !68, !dereferenceable !453, !align !454
  %"getfield_addr4797'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 136, !dbg !3017
  %getfield_addr4797 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 136, !dbg !3017
  %"'ipc98" = bitcast i8 addrspace(10)* %"getfield_addr4797'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %362 = bitcast i8 addrspace(10)* %getfield_addr4797 to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %"'ipc99" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc98" to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %363 = addrspacecast {} addrspace(10)* addrspace(10)* %362 to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %"getfield5'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc99" unordered, align 8, !dbg !3017, !tbaa !307, !alias.scope !3021, !noalias !3024, !nonnull !68, !dereferenceable !453
  %getfield5 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %363 unordered, align 8, !dbg !3017, !tbaa !307, !alias.scope !3026, !noalias !3027, !nonnull !68, !dereferenceable !453, !align !454
  %"getfield_addr6798'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 168, !dbg !3017
  %getfield_addr6798 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 168, !dbg !3017
  %"'ipc96" = bitcast i8 addrspace(10)* %"getfield_addr6798'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %364 = bitcast i8 addrspace(10)* %getfield_addr6798 to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %"'ipc97" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc96" to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %365 = addrspacecast {} addrspace(10)* addrspace(10)* %364 to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %"getfield7'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc97" unordered, align 8, !dbg !3017, !tbaa !307, !alias.scope !3021, !noalias !3024, !nonnull !68, !dereferenceable !453
  %getfield7 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %365 unordered, align 8, !dbg !3017, !tbaa !307, !alias.scope !3026, !noalias !3027, !nonnull !68, !dereferenceable !453, !align !454
  %"getfield_addr8799'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 184, !dbg !3017
  %getfield_addr8799 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 184, !dbg !3017
  %"'ipc94" = bitcast i8 addrspace(10)* %"getfield_addr8799'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %366 = bitcast i8 addrspace(10)* %getfield_addr8799 to {} addrspace(10)* addrspace(10)*, !dbg !3017
  %"'ipc95" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc94" to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %367 = addrspacecast {} addrspace(10)* addrspace(10)* %366 to {} addrspace(10)* addrspace(11)*, !dbg !3017
  %"getfield9'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc95" unordered, align 8, !dbg !3017, !tbaa !307, !alias.scope !3021, !noalias !3024, !nonnull !68, !dereferenceable !453
  %getfield9 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %367 unordered, align 8, !dbg !3017, !tbaa !307, !alias.scope !3026, !noalias !3027, !nonnull !68, !dereferenceable !453, !align !454
  %"'ipg91" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 56, !dbg !3028
  %368 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 56, !dbg !3028
  %"'ipc92" = bitcast i8 addrspace(10)* %"'ipg91" to double addrspace(10)*, !dbg !3028
  %369 = bitcast i8 addrspace(10)* %368 to double addrspace(10)*, !dbg !3028
  %"'ipc93" = addrspacecast double addrspace(10)* %"'ipc92" to double addrspace(11)*, !dbg !3028
  %370 = addrspacecast double addrspace(10)* %369 to double addrspace(11)*, !dbg !3028
  %371 = load double, double addrspace(11)* %370, align 8, !dbg !3028, !tbaa !307, !alias.scope !3026, !noalias !3027
  %"'ipc87" = bitcast {} addrspace(10)* %"'" to i64 addrspace(10)*, !dbg !3032
  %372 = bitcast {} addrspace(10)* %0 to i64 addrspace(10)*, !dbg !3032
  %373 = addrspacecast i64 addrspace(10)* %372 to i64 addrspace(11)*, !dbg !3032
  %374 = load i64, i64 addrspace(11)* %373, align 8, !dbg !3032, !tbaa !307, !alias.scope !3026, !noalias !3027
  %"getfield_addr10800'ipg" = getelementptr inbounds i64, i64 addrspace(10)* %"'ipc87", i64 3, !dbg !3032
  %getfield_addr10800 = getelementptr inbounds i64, i64 addrspace(10)* %372, i64 3, !dbg !3032
  %"'ipc88" = bitcast i64 addrspace(10)* %"getfield_addr10800'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %375 = bitcast i64 addrspace(10)* %getfield_addr10800 to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %"'ipc89" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc88" to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %376 = addrspacecast {} addrspace(10)* addrspace(10)* %375 to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %"getfield11'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc89" unordered, align 8, !dbg !3032, !tbaa !307, !alias.scope !3021, !noalias !3024, !nonnull !68, !dereferenceable !453
  %getfield11 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %376 unordered, align 8, !dbg !3032, !tbaa !307, !alias.scope !3026, !noalias !3027, !nonnull !68, !dereferenceable !453, !align !454
  %377 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3032
  %378 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %377, i32 0, i32 3, !dbg !3032
  %379 = load i16, i16 addrspace(10)* %378, align 2, !dbg !3032
  %380 = zext i16 %379 to i64, !dbg !3032
  %381 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3032
  %382 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %381, i32 0, i32 1, !dbg !3032
  %383 = load i64, i64 addrspace(10)* %382, align 8, !dbg !3032
  %384 = mul i64 %383, %380, !dbg !3032
  %385 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3032
  %386 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %385, i32 0, i32 3, !dbg !3032
  %387 = load i16, i16 addrspace(10)* %386, align 2, !dbg !3032
  %388 = zext i16 %387 to i64, !dbg !3032
  %389 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3032
  %390 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %389, i32 0, i32 1, !dbg !3032
  %391 = load i64, i64 addrspace(10)* %390, align 8, !dbg !3032
  %392 = mul i64 %391, %388, !dbg !3032
  %393 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3032
  %394 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %393, i32 0, i32 3, !dbg !3032
  %395 = load i16, i16 addrspace(10)* %394, align 2, !dbg !3032
  %396 = zext i16 %395 to i64, !dbg !3032
  %397 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3032
  %398 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %397, i32 0, i32 1, !dbg !3032
  %399 = load i64, i64 addrspace(10)* %398, align 8, !dbg !3032
  %400 = mul i64 %399, %396, !dbg !3032
  %"getfield_addr12801'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 32, !dbg !3032
  %getfield_addr12801 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 32, !dbg !3032
  %"'ipc85" = bitcast i8 addrspace(10)* %"getfield_addr12801'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %401 = bitcast i8 addrspace(10)* %getfield_addr12801 to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %"'ipc86" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc85" to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %402 = addrspacecast {} addrspace(10)* addrspace(10)* %401 to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %"getfield13'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc86" unordered, align 8, !dbg !3032, !tbaa !307, !alias.scope !3021, !noalias !3024, !nonnull !68, !dereferenceable !453
  %getfield13 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %402 unordered, align 8, !dbg !3032, !tbaa !307, !alias.scope !3026, !noalias !3027, !nonnull !68, !dereferenceable !453, !align !454
  %"'ipg82" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 16, !dbg !3032
  %403 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 16, !dbg !3032
  %"'ipc83" = bitcast i8 addrspace(10)* %"'ipg82" to double addrspace(10)*, !dbg !3032
  %404 = bitcast i8 addrspace(10)* %403 to double addrspace(10)*, !dbg !3032
  %"'ipc84" = addrspacecast double addrspace(10)* %"'ipc83" to double addrspace(11)*, !dbg !3032
  %405 = addrspacecast double addrspace(10)* %404 to double addrspace(11)*, !dbg !3032
  %406 = load double, double addrspace(11)* %405, align 8, !dbg !3032, !tbaa !307, !alias.scope !3026, !noalias !3027
  %"getfield_addr14802'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 96, !dbg !3032
  %getfield_addr14802 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 96, !dbg !3032
  %"'ipc79" = bitcast i8 addrspace(10)* %"getfield_addr14802'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %407 = bitcast i8 addrspace(10)* %getfield_addr14802 to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %"'ipc80" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc79" to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %408 = addrspacecast {} addrspace(10)* addrspace(10)* %407 to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %"getfield15'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc80" unordered, align 8, !dbg !3032, !tbaa !307, !alias.scope !3021, !noalias !3024, !nonnull !68, !dereferenceable !453
  %getfield15 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %408 unordered, align 8, !dbg !3032, !tbaa !307, !alias.scope !3026, !noalias !3027, !nonnull !68, !dereferenceable !453, !align !454
  %"getfield_addr16803'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 88, !dbg !3032
  %getfield_addr16803 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 88, !dbg !3032
  %"'ipc77" = bitcast i8 addrspace(10)* %"getfield_addr16803'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %409 = bitcast i8 addrspace(10)* %getfield_addr16803 to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %"'ipc78" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc77" to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %410 = addrspacecast {} addrspace(10)* addrspace(10)* %409 to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %"getfield17'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc78" unordered, align 8, !dbg !3032, !tbaa !307, !alias.scope !3021, !noalias !3024, !nonnull !68, !dereferenceable !453
  %getfield17 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %410 unordered, align 8, !dbg !3032, !tbaa !307, !alias.scope !3026, !noalias !3027, !nonnull !68, !dereferenceable !453, !align !454
  %"getfield_addr18804'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 104, !dbg !3032
  %getfield_addr18804 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 104, !dbg !3032
  %"'ipc75" = bitcast i8 addrspace(10)* %"getfield_addr18804'ipg" to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %411 = bitcast i8 addrspace(10)* %getfield_addr18804 to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %"'ipc76" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc75" to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %412 = addrspacecast {} addrspace(10)* addrspace(10)* %411 to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %"getfield19'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc76" unordered, align 8, !dbg !3032, !tbaa !307, !alias.scope !3021, !noalias !3024, !nonnull !68, !dereferenceable !453
  %getfield19 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %412 unordered, align 8, !dbg !3032, !tbaa !307, !alias.scope !3026, !noalias !3027, !nonnull !68, !dereferenceable !453, !align !454
  %"'ipg72" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 64, !dbg !3032
  %413 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 64, !dbg !3032
  %"'ipc73" = bitcast i8 addrspace(10)* %"'ipg72" to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %414 = bitcast i8 addrspace(10)* %413 to {} addrspace(10)* addrspace(10)*, !dbg !3032
  %"'ipc74" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc73" to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %415 = addrspacecast {} addrspace(10)* addrspace(10)* %414 to {} addrspace(10)* addrspace(11)*, !dbg !3032
  %".unpack.unpack'ipl" = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"'ipc74", align 8, !dbg !3032, !tbaa !307, !alias.scope !3021, !noalias !3024
  %.unpack.unpack = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %415, align 8, !dbg !3032, !tbaa !307, !alias.scope !3026, !noalias !3027
  %getfield_addr20806 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 80, !dbg !3036
  %416 = bitcast i8 addrspace(10)* %getfield_addr20806 to {} addrspace(10)* addrspace(10)*, !dbg !3036
  %417 = addrspacecast {} addrspace(10)* addrspace(10)* %416 to {} addrspace(10)* addrspace(11)*, !dbg !3036
  %getfield21 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %417 unordered, align 8, !dbg !3036, !tbaa !307, !alias.scope !3026, !noalias !3027, !nonnull !68, !dereferenceable !453, !align !454
  %"'ipg" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 48, !dbg !3040
  %418 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 48, !dbg !3040
  %"'ipc70" = bitcast i8 addrspace(10)* %"'ipg" to double addrspace(10)*, !dbg !3040
  %419 = bitcast i8 addrspace(10)* %418 to double addrspace(10)*, !dbg !3040
  %"'ipc71" = addrspacecast double addrspace(10)* %"'ipc70" to double addrspace(11)*, !dbg !3040
  %420 = addrspacecast double addrspace(10)* %419 to double addrspace(11)*, !dbg !3040
  %421 = load double, double addrspace(11)* %420, align 8, !dbg !3040, !tbaa !307, !alias.scope !3026, !noalias !3027
  %422 = bitcast {} addrspace(10)* %getfield15 to {} addrspace(10)* addrspace(10)*, !dbg !3042
  %423 = addrspacecast {} addrspace(10)* addrspace(10)* %422 to {} addrspace(10)* addrspace(11)*, !dbg !3042
  %arraysize_ptr = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %423, i64 3, !dbg !3042
  %424 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr to i64 addrspace(11)*, !dbg !3042
  %arraysize = load i64, i64 addrspace(11)* %424, align 8, !dbg !3042, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !3049, !noalias !3052
  %memcpy_refined_dst25 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct23, i64 0, i32 0, i64 0, i64 0, !dbg !3054
  store i64 %arraysize, i64* %memcpy_refined_dst25, align 8, !dbg !3054, !tbaa !133, !alias.scope !135, !noalias !3056
  %memcpy_refined_dst26 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct23, i64 0, i32 1, !dbg !3054
  store i64 1, i64* %memcpy_refined_dst26, align 8, !dbg !3054, !tbaa !133, !alias.scope !135, !noalias !3056
  %arraysize_ptr27 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %423, i64 4, !dbg !3059
  %425 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr27 to i64 addrspace(11)*, !dbg !3059
  %arraysize28 = load i64, i64 addrspace(11)* %425, align 16, !dbg !3059, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !3049, !noalias !3052
  %.not = icmp eq i64 %arraysize28, 0, !dbg !3063
  br i1 %.not, label %L33, label %L36, !dbg !3062

L33:                                              ; preds = %top
  %426 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct23 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !3062
  call fastcc void @julia_throw_boundserror_1989({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield15, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %426) #73, !dbg !3062
  unreachable

L36:                                              ; preds = %top
  %427 = bitcast {} addrspace(10)* %getfield11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3067
  %428 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %427 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3067
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %428, i64 0, i32 1, !dbg !3067
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !3067, !tbaa !332, !range !87, !alias.scope !3073, !noalias !3076
  %429 = icmp eq i64 %arraysize, %arraylen, !dbg !3078
  %430 = icmp eq i64 %arraylen, 1, !dbg !3080
  %value_phi.in = or i1 %429, %430, !dbg !3080
  br i1 %value_phi.in, label %L75, label %L60, !dbg !3081

L60:                                              ; preds = %L36
  %431 = call fastcc [1 x {} addrspace(10)*] @julia_DimensionMismatch_1976() #72, !dbg !3081
  %current_task786949 = getelementptr inbounds {}**, {}*** %354, i64 -14, !dbg !3081
  %current_task786 = bitcast {}*** %current_task786949 to {}**, !dbg !3081
  %box787 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task786, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #74, !dbg !3081
  %432 = bitcast {} addrspace(10)* %box787 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !3081
  %433 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %432, i64 0, i64 0, !dbg !3081
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267317456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %433, align 8, !dbg !3081, !tbaa !113, !alias.scope !117, !noalias !3082
  %434 = addrspacecast {} addrspace(10)* %box787 to {} addrspace(12)*, !dbg !3081
  call void @ijl_throw({} addrspace(12)* %434) #73, !dbg !3081
  unreachable

L75:                                              ; preds = %L36
  br i1 %429, label %L86, label %L105, !dbg !3083

L86:                                              ; preds = %L75
  %.not813 = icmp eq i64 %arraysize, 0, !dbg !3085
  store i8 0, i8* %_cache119, align 1, !dbg !3087, !invariant.group !3089
  br i1 %.not813, label %L209, label %L90, !dbg !3087

L90:                                              ; preds = %L86
  %435 = addrspacecast {} addrspace(10)* %getfield15 to {} addrspace(11)*, !dbg !3090
  %436 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %435) #75, !dbg !3090
  %437 = bitcast {}* %436 to i8**, !dbg !3090
  %arrayptr755 = load i8*, i8** %437, align 8, !dbg !3090, !tbaa !73, !invariant.load !68, !alias.scope !3049, !noalias !3052, !nonnull !68
  %438 = addrspacecast {} addrspace(10)* %getfield11 to {} addrspace(11)*, !dbg !3097
  %439 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %438) #75, !dbg !3097
  %440 = bitcast {}* %439 to i8**, !dbg !3097
  %arrayptr757 = load i8*, i8** %440, align 8, !dbg !3097, !tbaa !382, !alias.scope !3073, !noalias !3076, !nonnull !68
  %.not933.not = icmp eq i8* %arrayptr755, %arrayptr757, !dbg !3100
  store i1 %.not933.not, i1* %.not933.not_cache, align 1, !dbg !3095, !invariant.group !3103
  br i1 %.not933.not, label %L98, label %L101, !dbg !3095

L98:                                              ; preds = %L90
  %441 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"getfield11'ipl"), !dbg !3104
  %442 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3104
  %443 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %442, i32 0, i32 3, !dbg !3104
  %444 = load i16, i16 addrspace(10)* %443, align 2, !dbg !3104
  %445 = zext i16 %444 to i64, !dbg !3104
  %446 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3104
  %447 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %446, i32 0, i32 1, !dbg !3104
  %448 = load i64, i64 addrspace(10)* %447, align 8, !dbg !3104
  %449 = mul i64 %448, %445, !dbg !3104
  %450 = bitcast {} addrspace(10)* %"getfield11'ipl" to i8 addrspace(13)* addrspace(10)*, !dbg !3104
  %451 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %450, align 8, !dbg !3104
  %452 = bitcast {} addrspace(10)* %441 to i8 addrspace(13)* addrspace(10)*, !dbg !3104
  %453 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %452, align 8, !dbg !3104
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %453, i8 0, i64 %449, i1 false), !dbg !3104
  %454 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %getfield11) #72, !dbg !3104
  store {} addrspace(10)* %454, {} addrspace(10)** %_cache, align 8, !dbg !3106, !invariant.group !3114
  store {} addrspace(10)* %441, {} addrspace(10)** %_cache106, align 8, !dbg !3106, !invariant.group !3115
  store {} addrspace(10)* %441, {} addrspace(10)** %"'ip_phi2_cache", align 8, !dbg !3106, !invariant.group !3116
  br label %L101, !dbg !3106

L101:                                             ; preds = %L98, %L90
  %455 = phi {} addrspace(10)* [ %441, %L98 ], [ %"getfield11'ipl", %L90 ]
  %value_phi758 = phi {} addrspace(10)* [ %454, %L98 ], [ %getfield11, %L90 ]
  %".repack934'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa", i64 0, i32 0, !dbg !3117
  %.repack934 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %353, i64 0, i32 0, !dbg !3117
  store {} addrspace(10)* %"getfield15'ipl", {} addrspace(10)** %".repack934'ipg", align 8, !dbg !3117, !alias.scope !3118, !noalias !3121
  store {} addrspace(10)* %getfield15, {} addrspace(10)** %.repack934, align 8, !dbg !3117, !alias.scope !3123, !noalias !3124
  %"'ipg108" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa", i64 0, i32 1, i32 0, i64 0, i64 0, !dbg !3117
  %456 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %353, i64 0, i32 1, i32 0, i64 0, i64 0, !dbg !3117
  store i64 %arraysize, i64* %"'ipg108", align 8, !dbg !3117, !alias.scope !3118, !noalias !3121
  store i64 %arraysize, i64* %456, align 8, !dbg !3117, !alias.scope !3123, !noalias !3124
  %".repack935.repack941'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa", i64 0, i32 1, i32 1, !dbg !3117
  %.repack935.repack941 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %353, i64 0, i32 1, i32 1, !dbg !3117
  store i64 1, i64* %".repack935.repack941'ipg", align 8, !dbg !3117, !alias.scope !3118, !noalias !3121
  store i64 1, i64* %.repack935.repack941, align 8, !dbg !3117, !alias.scope !3123, !noalias !3124
  %".repack937'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa", i64 0, i32 2, !dbg !3117
  %.repack937 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %353, i64 0, i32 2, !dbg !3117
  store i64 0, i64* %".repack937'ipg", align 8, !dbg !3117, !alias.scope !3118, !noalias !3121
  store i64 0, i64* %.repack937, align 8, !dbg !3117, !alias.scope !3123, !noalias !3124
  %".repack939'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa", i64 0, i32 3, !dbg !3117
  %.repack939 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %353, i64 0, i32 3, !dbg !3117
  store i64 1, i64* %".repack939'ipg", align 8, !dbg !3117, !alias.scope !3118, !noalias !3121
  store i64 1, i64* %.repack939, align 8, !dbg !3117, !alias.scope !3123, !noalias !3124
  %"'ipc104" = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa" to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !3117
  %457 = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %353 to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !3117
  %_augmented = call fastcc i64 @augmented_julia_copyto_unaliased__1984({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* nocapture nofree writeonly align 8 "enzyme_sret" %351, [1 x {} addrspace(10)*]* nocapture nofree writeonly align 8 "enzymejl_returnRoots" %352, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree readonly align 8 %457, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'ipc104", {} addrspace(10)* nocapture readonly align 16 %value_phi758, {} addrspace(10)* nocapture align 16 %455), !dbg !3117
  store i64 %_augmented, i64* %_augmented_cache, align 8, !dbg !3117, !invariant.group !3125
  store i8 1, i8* %_cache119, align 1, !dbg !3117, !invariant.group !3089
  br label %L209, !dbg !3117

L105:                                             ; preds = %L75
  %458 = addrspacecast {} addrspace(10)* %getfield15 to {} addrspace(11)*, !dbg !3126
  %459 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %458) #75, !dbg !3126
  %460 = bitcast {}* %459 to i8**, !dbg !3126
  %arrayptr760 = load i8*, i8** %460, align 8, !dbg !3126, !tbaa !73, !invariant.load !68, !alias.scope !3049, !noalias !3052, !nonnull !68
  %461 = addrspacecast {} addrspace(10)* %getfield11 to {} addrspace(11)*, !dbg !3137
  %462 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %461) #75, !dbg !3137
  %463 = bitcast {}* %462 to i8**, !dbg !3137
  %arrayptr762 = load i8*, i8** %463, align 8, !dbg !3137, !tbaa !382, !alias.scope !3073, !noalias !3076, !nonnull !68
  %.not943.not = icmp eq i8* %arrayptr760, %arrayptr762, !dbg !3140
  store i1 %.not943.not, i1* %.not943.not_cache, align 1, !dbg !3131, !invariant.group !3143
  br i1 %.not943.not, label %L113, label %L118, !dbg !3131

L113:                                             ; preds = %L105
  %464 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"getfield11'ipl"), !dbg !3144
  %465 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3144
  %466 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %465, i32 0, i32 3, !dbg !3144
  %467 = load i16, i16 addrspace(10)* %466, align 2, !dbg !3144
  %468 = zext i16 %467 to i64, !dbg !3144
  %469 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3144
  %470 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %469, i32 0, i32 1, !dbg !3144
  %471 = load i64, i64 addrspace(10)* %470, align 8, !dbg !3144
  %472 = mul i64 %471, %468, !dbg !3144
  %473 = bitcast {} addrspace(10)* %"getfield11'ipl" to i8 addrspace(13)* addrspace(10)*, !dbg !3144
  %474 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %473, align 8, !dbg !3144
  %475 = bitcast {} addrspace(10)* %464 to i8 addrspace(13)* addrspace(10)*, !dbg !3144
  %476 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %475, align 8, !dbg !3144
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %476, i8 0, i64 %472, i1 false), !dbg !3144
  %477 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %getfield11) #72, !dbg !3144
  store {} addrspace(10)* %464, {} addrspace(10)** %"'ip_phi5_cache", align 8, !invariant.group !3146
  store {} addrspace(10)* %464, {} addrspace(10)** %_cache115, align 8, !invariant.group !3147
  %.phi.trans.insert = bitcast {} addrspace(10)* %477 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert961 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr764.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert961, i64 0, i32 1
  %arraylen765.pre = load i64, i64 addrspace(11)* %arraylen_ptr764.phi.trans.insert, align 8, !dbg !3148, !tbaa !332, !range !87, !alias.scope !3152, !noalias !3155
  br label %L118, !dbg !3106

L118:                                             ; preds = %L113, %L105
  %arraylen765 = phi i64 [ %arraylen765.pre, %L113 ], [ %arraylen, %L105 ], !dbg !3148
  %478 = phi {} addrspace(10)* [ %464, %L113 ], [ %"getfield11'ipl", %L105 ]
  %value_phi763 = phi {} addrspace(10)* [ %477, %L113 ], [ %getfield11, %L105 ]
  %.not946 = icmp eq i64 %arraylen765, 1, !dbg !3157
  store i1 %.not946, i1* %.not946_cache, align 1, !dbg !3161, !invariant.group !3164
  %.not944 = icmp eq i64 %arraysize, 0, !dbg !3161
  store i8 3, i8* %_cache119, align 1, !dbg !3162, !invariant.group !3089
  br i1 %.not944, label %L209, label %L160.lr.ph, !dbg !3162

L160.lr.ph:                                       ; preds = %L118
  %"'ipc111" = bitcast {} addrspace(10)* %478 to double addrspace(13)* addrspace(10)*
  %479 = bitcast {} addrspace(10)* %value_phi763 to double addrspace(13)* addrspace(10)*
  %"'ipc112" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc111" to double addrspace(13)* addrspace(11)*
  %480 = addrspacecast double addrspace(13)* addrspace(10)* %479 to double addrspace(13)* addrspace(11)*
  %"arrayptr773947'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc112", align 8, !tbaa !382, !alias.scope !3165, !noalias !3168, !nonnull !68, !invariant.group !3170
  %arrayptr773947 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %480, align 8, !tbaa !382, !alias.scope !3171, !noalias !3172, !nonnull !68
  %"'ipc109" = bitcast {} addrspace(10)* %"getfield15'ipl" to double addrspace(13)* addrspace(10)*
  %481 = bitcast {} addrspace(10)* %getfield15 to double addrspace(13)* addrspace(10)*
  %"'ipc110" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc109" to double addrspace(13)* addrspace(11)*
  %482 = addrspacecast double addrspace(13)* addrspace(10)* %481 to double addrspace(13)* addrspace(11)*
  %"arrayptr777948'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc110", align 16, !tbaa !73, !alias.scope !3173, !noalias !3174, !nonnull !68, !invariant.group !3175
  %arrayptr777948 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %482, align 16, !tbaa !73, !invariant.load !68, !alias.scope !3176, !noalias !3052, !nonnull !68
  %483 = add nsw i64 %arraysize, -1, !dbg !3177
  br label %L160, !dbg !3177

L160:                                             ; preds = %L160, %L160.lr.ph
  %iv = phi i64 [ %iv.next, %L160 ], [ 0, %L160.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !3178
  %484 = select i1 %.not946, i64 0, i64 %iv, !dbg !3178
  %"'ipg114" = getelementptr inbounds double, double addrspace(13)* %"arrayptr773947'ipl", i64 %484, !dbg !3178
  %485 = getelementptr inbounds double, double addrspace(13)* %arrayptr773947, i64 %484, !dbg !3178
  %arrayref774 = load double, double addrspace(13)* %485, align 8, !dbg !3178, !tbaa !269, !alias.scope !3185, !noalias !3188
  %"'ipg113" = getelementptr inbounds double, double addrspace(13)* %"arrayptr777948'ipl", i64 %iv, !dbg !3190
  %486 = getelementptr inbounds double, double addrspace(13)* %arrayptr777948, i64 %iv, !dbg !3190
  store double %arrayref774, double addrspace(13)* %486, align 8, !dbg !3190, !tbaa !269, !alias.scope !3192, !noalias !3195
  %exitcond1044.not = icmp eq i64 %iv.next, %arraysize, !dbg !3197
  br i1 %exitcond1044.not, label %L209.loopexit, label %L160, !dbg !3177, !llvm.loop !3198

L209.loopexit:                                    ; preds = %L160
  store i8 2, i8* %_cache119, align 1, !dbg !3199, !invariant.group !3089
  br label %L209, !dbg !3199

L209:                                             ; preds = %L209.loopexit, %L118, %L101, %L86
  %memcpy_refined_dst64 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct62, i64 0, i64 0, i64 0, !dbg !3199
  store i64 %arraysize, i64* %memcpy_refined_dst64, align 8, !dbg !3199, !tbaa !133, !alias.scope !135, !noalias !3056
  %487 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize), !dbg !3202
  %488 = mul i64 %arraysize, 8, !dbg !3202
  %489 = bitcast {} addrspace(10)* %487 to i8 addrspace(13)* addrspace(10)*, !dbg !3202
  %490 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %489, align 8, !dbg !3202
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %490, i8 0, i64 %488, i1 false), !dbg !3202
  %491 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize) #76, !dbg !3202
  %492 = bitcast {} addrspace(10)* %491 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3207
  %493 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %492 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3207
  %arraylen_ptr65 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %493, i64 0, i32 1, !dbg !3207
  %arraylen66 = load i64, i64 addrspace(11)* %arraylen_ptr65, align 8, !dbg !3207, !tbaa !332, !range !87, !alias.scope !3210, !noalias !3213
  %.not815 = icmp eq i64 %arraylen66, %arraysize, !dbg !3215
  br i1 %.not815, label %L222, label %L275, !dbg !3209

L222:                                             ; preds = %L209
  %.not816 = icmp eq i64 %arraysize, 0, !dbg !3218
  br i1 %.not816, label %pass.2, label %L243.preheader, !dbg !3223

L243.preheader:                                   ; preds = %L222
  %"'ipc120" = bitcast {} addrspace(10)* %"getfield15'ipl" to double addrspace(13)* addrspace(10)*
  %494 = bitcast {} addrspace(10)* %getfield15 to double addrspace(13)* addrspace(10)*
  %"'ipc121" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc120" to double addrspace(13)* addrspace(11)*
  %495 = addrspacecast double addrspace(13)* addrspace(10)* %494 to double addrspace(13)* addrspace(11)*
  %"arrayptr742930'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc121", align 16, !alias.scope !3224, !noalias !3225, !invariant.group !3226
  %arrayptr742930 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %495, align 16, !alias.scope !3225, !noalias !3224
  %"'ipc123" = bitcast {} addrspace(10)* %487 to double addrspace(13)* addrspace(10)*
  %496 = bitcast {} addrspace(10)* %491 to double addrspace(13)* addrspace(10)*
  %"'ipc124" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc123" to double addrspace(13)* addrspace(11)*
  %497 = addrspacecast double addrspace(13)* addrspace(10)* %496 to double addrspace(13)* addrspace(11)*
  store i64* null, i64** %value_phi79_cache, align 8, !dbg !3227
  br label %L243, !dbg !3227

L243:                                             ; preds = %L250, %L243.preheader
  %iv1 = phi i64 [ %iv.next2, %L250 ], [ 0, %L243.preheader ]
  %value_phi78.off0 = phi i1 [ %522, %L250 ], [ false, %L243.preheader ]
  %value_phi79 = phi i64 [ %value_phi748, %L250 ], [ 1, %L243.preheader ]
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !3227
  %498 = load i64*, i64** %value_phi79_cache, align 8, !dbg !3227
  %499 = bitcast i64* %498 to i8*, !dbg !3227
  %500 = and i64 %iv.next2, 1, !dbg !3227
  %501 = icmp ne i64 %500, 0, !dbg !3227
  %502 = call i64 @llvm.ctpop.i64(i64 %iv.next2), !dbg !3227
  %503 = icmp ult i64 %502, 3, !dbg !3227
  %504 = and i1 %503, %501, !dbg !3227
  br i1 %504, label %grow.i, label %__enzyme_exponentialallocationzero.exit, !dbg !3227

grow.i:                                           ; preds = %L243
  %505 = call i64 @llvm.ctlz.i64(i64 %iv.next2, i1 true), !dbg !3227
  %506 = sub nuw nsw i64 64, %505, !dbg !3227
  %507 = shl i64 8, %506, !dbg !3227
  %508 = icmp eq i64 %iv.next2, 1, !dbg !3227
  %509 = lshr i64 %507, 1, !dbg !3227
  %510 = select i1 %508, i64 0, i64 %509, !dbg !3227
  %511 = call i8* @realloc(i8* %499, i64 %507) #77, !dbg !3227
  %512 = sub i64 %507, %510, !dbg !3227
  %513 = getelementptr inbounds i8, i8* %511, i64 %510, !dbg !3227
  call void @llvm.memset.p0i8.i64(i8* %513, i8 0, i64 %512, i1 false), !dbg !3227
  br label %__enzyme_exponentialallocationzero.exit, !dbg !3227

__enzyme_exponentialallocationzero.exit:          ; preds = %L243, %grow.i
  %514 = phi i8* [ %511, %grow.i ], [ %499, %L243 ], !dbg !3227
  %515 = bitcast i8* %514 to i64*, !dbg !3227
  store i64* %515, i64** %value_phi79_cache, align 8, !dbg !3227
  %516 = load i64*, i64** %value_phi79_cache, align 8, !dbg !3227, !dereferenceable !306, !invariant.group !3229
  %517 = getelementptr inbounds i64, i64* %516, i64 %iv1, !dbg !3227
  store i64 %value_phi79, i64* %517, align 8, !dbg !3227, !invariant.group !3230
  br i1 %value_phi78.off0, label %pass.2.loopexit, label %L250, !dbg !3227

L250:                                             ; preds = %__enzyme_exponentialallocationzero.exit
  %518 = add nsw i64 %iv.next2, -1, !dbg !3231
  %"'ipg127" = getelementptr inbounds double, double addrspace(13)* %"arrayptr742930'ipl", i64 %518, !dbg !3231
  %519 = getelementptr inbounds double, double addrspace(13)* %arrayptr742930, i64 %518, !dbg !3231
  %arrayref743 = load double, double addrspace(13)* %519, align 8, !dbg !3231, !tbaa !269, !alias.scope !3233, !noalias !3236
  %520 = add i64 %value_phi79, -1, !dbg !3238
  %"arrayptr745931'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc124", align 8, !dbg !3238, !tbaa !382, !alias.scope !3239, !noalias !3240, !nonnull !68
  %arrayptr745931 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %497, align 8, !dbg !3238, !tbaa !382, !alias.scope !3241, !noalias !3213, !nonnull !68
  %"'ipg122" = getelementptr inbounds double, double addrspace(13)* %"arrayptr745931'ipl", i64 %520, !dbg !3238
  %521 = getelementptr inbounds double, double addrspace(13)* %arrayptr745931, i64 %520, !dbg !3238
  store double %arrayref743, double addrspace(13)* %521, align 8, !dbg !3238, !tbaa !269, !alias.scope !3242, !noalias !3245
  %522 = icmp eq i64 %value_phi79, %arraysize, !dbg !3247
  %523 = add i64 %value_phi79, 1, !dbg !3248
  %value_phi748 = select i1 %522, i64 undef, i64 %523, !dbg !3248
  %.not932 = icmp eq i64 %iv.next2, %arraysize, !dbg !3250
  br i1 %.not932, label %pass.2.loopexit, label %L243, !dbg !3108

L275:                                             ; preds = %L209
  %524 = addrspacecast [1 x [1 x i64]]* %newstruct62 to [1 x [1 x i64]] addrspace(11)*, !dbg !3209
  call fastcc void @julia_throw_checksize_error_1987({} addrspace(10)* nocapture noundef nonnull readonly align 16 dereferenceable(40) %491, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %524) #73, !dbg !3209
  unreachable

L322:                                             ; preds = %pass.2
  %525 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct103 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !3251
  call fastcc void @julia_throw_boundserror_1989({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield19, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %525) #73, !dbg !3251
  unreachable

L325:                                             ; preds = %pass.2
  %526 = addrspacecast [1 x [1 x i64]]* %newstruct102 to [1 x [1 x i64]] addrspace(11)*, !dbg !3255
  %_augmented129 = call fastcc { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } @augmented_julia__unsafe_setindex__2077({} addrspace(10)* align 16 %getfield19, {} addrspace(10)* align 16 %"getfield19'ipl", {} addrspace(10)* align 16 %2486, {} addrspace(10)* align 16 %2483, [1 x [1 x i64]] addrspace(11)* nocapture readonly align 8 %526, i64 signext 1), !dbg !3255
  %527 = call {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6189285392 to {}*) to {} addrspace(10)*), i64 6, i64 6), !dbg !3256
  %528 = bitcast {} addrspace(10)* %527 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3256
  %529 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %528, i32 0, i32 1, !dbg !3256
  %530 = load i64, i64 addrspace(10)* %529, align 8, !dbg !3256
  %531 = mul i64 %530, 8, !dbg !3256
  %532 = bitcast {} addrspace(10)* %527 to i8 addrspace(13)* addrspace(10)*, !dbg !3256
  %533 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %532, align 8, !dbg !3256
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %533, i8 0, i64 %531, i1 false), !dbg !3256
  %534 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 6189285392 to {}*) to {} addrspace(10)*), i64 noundef 6, i64 noundef 6) #76, !dbg !3256
  %535 = bitcast {} addrspace(10)* %534 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3262
  %536 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %535, i32 0, i32 3, !dbg !3262
  %537 = load i16, i16 addrspace(10)* %536, align 2, !dbg !3262
  %538 = zext i16 %537 to i64, !dbg !3262
  %539 = bitcast {} addrspace(10)* %534 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3262
  %540 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %539, i32 0, i32 1, !dbg !3262
  %541 = load i64, i64 addrspace(10)* %540, align 8, !dbg !3262
  %542 = mul i64 %541, %538, !dbg !3262
  %543 = bitcast {} addrspace(10)* %534 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3262
  %544 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %543 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3262
  %arraylen_ptr110 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %544, i64 0, i32 1, !dbg !3262
  %arraylen111 = load i64, i64 addrspace(11)* %arraylen_ptr110, align 8, !dbg !3262, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !3267, !noalias !3270
  %.not822 = icmp eq i64 %arraylen111, 0, !dbg !3272
  br i1 %.not822, label %L359, label %L325.L341_crit_edge, !dbg !3265

L325.L341_crit_edge:                              ; preds = %L325
  %"'ipc131" = bitcast {} addrspace(10)* %527 to i8 addrspace(13)* addrspace(10)*, !dbg !3276
  %545 = bitcast {} addrspace(10)* %534 to i8 addrspace(13)* addrspace(10)*, !dbg !3276
  %"'ipc132" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc131" to i8 addrspace(13)* addrspace(11)*, !dbg !3276
  %546 = addrspacecast i8 addrspace(13)* addrspace(10)* %545 to i8 addrspace(13)* addrspace(11)*, !dbg !3276
  %"arrayptr119823.pre1025'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc132", align 8, !dbg !3276, !tbaa !73, !alias.scope !3278, !noalias !3279
  %arrayptr119823.pre1025 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %546, align 8, !dbg !3276, !tbaa !73, !invariant.load !68, !alias.scope !3280, !noalias !3270
  %547 = shl nuw i64 %arraylen111, 3, !dbg !3265
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr119823.pre1025, i8 0, i64 %547, i1 false) #72, !dbg !3276, !tbaa !269, !alias.scope !117, !noalias !3082
  br label %L359, !dbg !3281

L359:                                             ; preds = %L325.L341_crit_edge, %L325
  %548 = bitcast {} addrspace(10)* %534 to {} addrspace(10)* addrspace(10)*, !dbg !3281
  %549 = addrspacecast {} addrspace(10)* addrspace(10)* %548 to {} addrspace(10)* addrspace(11)*, !dbg !3281
  %arraysize_ptr124 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %549, i64 3, !dbg !3281
  %550 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr124 to i64 addrspace(11)*, !dbg !3281
  %arraysize125 = load i64, i64 addrspace(11)* %550, align 8, !dbg !3281, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !3267, !noalias !3270, !invariant.group !3283
  %inbounds.not = icmp eq i64 %arraysize125, 0, !dbg !3281
  br i1 %inbounds.not, label %oob, label %ib, !dbg !3281

L394:                                             ; preds = %idxend284.L394_crit_edge, %L394
  %iv3 = phi i64 [ 0, %idxend284.L394_crit_edge ], [ %iv.next4, %L394 ]
  %iv.next4 = add nuw nsw i64 %iv3, 1, !dbg !3284
  %551 = add nsw i64 %iv.next4, -1, !dbg !3284
  %"memcpy_refined_dst297'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr296852.pre'ipl", i64 %551, !dbg !3284
  %memcpy_refined_dst297 = getelementptr inbounds double, double addrspace(13)* %arrayptr296852.pre, i64 %551, !dbg !3284
  store double 1.000000e+00, double addrspace(13)* %memcpy_refined_dst297, align 8, !dbg !3284, !tbaa !269, !alias.scope !3290, !noalias !3293
  %.not853 = icmp eq i64 %iv.next4, %arraylen288, !dbg !3295
  br i1 %.not853, label %L412.loopexit, label %L394, !dbg !3297

L412.loopexit:                                    ; preds = %L394
  br label %L412, !dbg !3298

L412:                                             ; preds = %idxend258, %L412.loopexit
  %".repack'ipg" = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* }* %"'ipa136", i64 0, i32 0, !dbg !3298
  %.repack = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* }* %344, i64 0, i32 0, !dbg !3298
  store i64 0, i64* %".repack'ipg", align 8, !dbg !3298, !alias.scope !3300, !noalias !3303
  store i64 0, i64* %.repack, align 8, !dbg !3298, !alias.scope !3305, !noalias !3306
  %".repack854'ipg" = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* }* %"'ipa136", i64 0, i32 1, !dbg !3298
  %.repack854 = getelementptr inbounds { i64, {} addrspace(10)* }, { i64, {} addrspace(10)* }* %344, i64 0, i32 1, !dbg !3298
  store {} addrspace(10)* %2539, {} addrspace(10)** %".repack854'ipg", align 8, !dbg !3298, !alias.scope !3300, !noalias !3303
  store {} addrspace(10)* %2542, {} addrspace(10)** %.repack854, align 8, !dbg !3298, !alias.scope !3305, !noalias !3306
  %"'ipc137" = addrspacecast { i64, {} addrspace(10)* }* %"'ipa136" to { i64, {} addrspace(10)* } addrspace(11)*, !dbg !3298
  %552 = addrspacecast { i64, {} addrspace(10)* }* %344 to { i64, {} addrspace(10)* } addrspace(11)*, !dbg !3298
  %_augmented138 = call fastcc { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia__diagm_2062({ i64, {} addrspace(10)* } addrspace(11)* nocapture readonly align 8 %552, { i64, {} addrspace(10)* } addrspace(11)* nocapture align 8 %"'ipc137"), !dbg !3298
  %subcache = extractvalue { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented138, 0, !dbg !3298
  %553 = extractvalue { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented138, 1, !dbg !3298
  %"'ac" = extractvalue { { {} addrspace(10)*, i64, i8*, i64, i64 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented138, 2, !dbg !3298
  %554 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct309, i64 0, i64 1, i64 0, !dbg !3307
  store i64 %arraysize127, i64* %554, align 8, !dbg !3307, !tbaa !133, !alias.scope !135, !noalias !3056
  %memcpy_refined_dst311 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct309, i64 0, i64 0, i64 0, !dbg !3315
  store i64 %arraysize125, i64* %memcpy_refined_dst311, align 8, !dbg !3315, !tbaa !133, !alias.scope !135, !noalias !3056
  %555 = call {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6189285392 to {}*) to {} addrspace(10)*), i64 %arraysize125, i64 %arraysize127), !dbg !3317
  %556 = bitcast {} addrspace(10)* %555 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3317
  %557 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %556, i32 0, i32 1, !dbg !3317
  %558 = load i64, i64 addrspace(10)* %557, align 8, !dbg !3317
  %559 = mul i64 %558, 8, !dbg !3317
  %560 = bitcast {} addrspace(10)* %555 to i8 addrspace(13)* addrspace(10)*, !dbg !3317
  %561 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %560, align 8, !dbg !3317
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %561, i8 0, i64 %559, i1 false), !dbg !3317
  %562 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_2d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 6189285392 to {}*) to {} addrspace(10)*), i64 %arraysize125, i64 %arraysize127) #76, !dbg !3317
  %563 = bitcast {} addrspace(10)* %562 to {} addrspace(10)* addrspace(10)*, !dbg !3325
  %564 = addrspacecast {} addrspace(10)* addrspace(10)* %563 to {} addrspace(10)* addrspace(11)*, !dbg !3325
  %arraysize_ptr320 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %564, i64 3, !dbg !3325
  %565 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr320 to i64 addrspace(11)*, !dbg !3325
  %arraysize321 = load i64, i64 addrspace(11)* %565, align 8, !dbg !3325, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !3329, !noalias !3332
  %.not856 = icmp eq i64 %arraysize321, %arraysize125, !dbg !3334
  br i1 %.not856, label %L457, label %L446.L584_crit_edge, !dbg !3338

L446.L584_crit_edge:                              ; preds = %L412
  %arraysize_ptr728.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %564, i64 4
  %.phi.trans.insert967 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr728.phi.trans.insert to i64 addrspace(11)*
  %arraysize729.pre = load i64, i64 addrspace(11)* %.phi.trans.insert967, align 8, !dbg !3325, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !96, !noalias !97
  unreachable

L457:                                             ; preds = %L412
  %arraysize_ptr322 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %564, i64 4, !dbg !3325
  %566 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr322 to i64 addrspace(11)*, !dbg !3325
  %arraysize323 = load i64, i64 addrspace(11)* %566, align 8, !dbg !3325, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !3329, !noalias !3332
  %.not929 = icmp eq i64 %arraysize323, %arraysize127, !dbg !3339
  br i1 %.not929, label %L467, label %L584, !dbg !3327

L467:                                             ; preds = %L457
  %567 = addrspacecast {} addrspace(10)* %562 to {} addrspace(11)*, !dbg !3343
  %568 = addrspacecast {} addrspace(10)* %534 to {} addrspace(11)*, !dbg !3343
  %.not857 = icmp eq {} addrspace(11)* %567, %568, !dbg !3343
  %"'ipc144" = bitcast double addrspace(13)* addrspace(10)* %"'ipc142" to {} addrspace(10)*, !dbg !3343
  %569 = bitcast double addrspace(13)* addrspace(10)* %2498 to {} addrspace(10)*, !dbg !3343
  br i1 %.not857, label %L483, label %L470, !dbg !3343

L470:                                             ; preds = %L467
  %570 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %567) #75, !dbg !3349
  %571 = bitcast {}* %570 to i8**, !dbg !3349
  %arrayptr722 = load i8*, i8** %571, align 8, !dbg !3349, !tbaa !73, !invariant.load !68, !alias.scope !3329, !noalias !3332, !nonnull !68, !invariant.group !3354
  %572 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %568) #75, !dbg !3349
  %573 = bitcast {}* %572 to i8**, !dbg !3349
  %arrayptr724 = load i8*, i8** %573, align 8, !dbg !3349, !tbaa !73, !invariant.load !68, !alias.scope !3267, !noalias !3270, !nonnull !68, !invariant.group !3355
  %.not928.not = icmp eq i8* %arrayptr722, %arrayptr724, !dbg !3356
  %"'ipc143" = bitcast double addrspace(13)* addrspace(10)* %"'ipc142" to {} addrspace(10)*, !dbg !3353
  %574 = bitcast double addrspace(13)* addrspace(10)* %2498 to {} addrspace(10)*, !dbg !3353
  br i1 %.not928.not, label %L478, label %L483, !dbg !3353

L478:                                             ; preds = %L470
  %575 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %527), !dbg !3359
  %576 = bitcast {} addrspace(10)* %534 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3359
  %577 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %576, i32 0, i32 3, !dbg !3359
  %578 = load i16, i16 addrspace(10)* %577, align 2, !dbg !3359
  %579 = zext i16 %578 to i64, !dbg !3359
  %580 = bitcast {} addrspace(10)* %534 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3359
  %581 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %580, i32 0, i32 1, !dbg !3359
  %582 = load i64, i64 addrspace(10)* %581, align 8, !dbg !3359
  %583 = mul i64 %582, %579, !dbg !3359
  %584 = bitcast {} addrspace(10)* %527 to i8 addrspace(13)* addrspace(10)*, !dbg !3359
  %585 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %584, align 8, !dbg !3359
  %586 = bitcast {} addrspace(10)* %575 to i8 addrspace(13)* addrspace(10)*, !dbg !3359
  %587 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %586, align 8, !dbg !3359
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %587, i8 0, i64 %583, i1 false), !dbg !3359
  %588 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %534) #72, !dbg !3359
  store {} addrspace(10)* %575, {} addrspace(10)** %"'ip_phi14_cache", align 8, !invariant.group !3361
  %.phi.trans.insert969 = bitcast {} addrspace(10)* %588 to {} addrspace(10)* addrspace(10)*
  %.phi.trans.insert970 = addrspacecast {} addrspace(10)* addrspace(10)* %.phi.trans.insert969 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr328.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert970, i64 3
  %.phi.trans.insert971 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr328.phi.trans.insert to i64 addrspace(11)*
  %arraysize329.pre = load i64, i64 addrspace(11)* %.phi.trans.insert971, align 8, !dbg !3362, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !3366, !noalias !3369
  %arraysize_ptr330.phi.trans.insert = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %.phi.trans.insert970, i64 4
  %.phi.trans.insert973 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr330.phi.trans.insert to i64 addrspace(11)*
  %arraysize331.pre = load i64, i64 addrspace(11)* %.phi.trans.insert973, align 8, !dbg !3362, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !3366, !noalias !3369
  %".pre'ipc" = bitcast {} addrspace(10)* %575 to double addrspace(13)* addrspace(10)*
  %.pre = bitcast {} addrspace(10)* %588 to double addrspace(13)* addrspace(10)*
  %"'ipc141" = bitcast double addrspace(13)* addrspace(10)* %".pre'ipc" to {} addrspace(10)*, !dbg !3371
  %589 = bitcast double addrspace(13)* addrspace(10)* %.pre to {} addrspace(10)*, !dbg !3371
  br label %L483, !dbg !3371

L483:                                             ; preds = %L478, %L470, %L467
  %590 = phi {} addrspace(10)* [ %"'ipc141", %L478 ], [ %"'ipc143", %L470 ], [ %"'ipc144", %L467 ]
  %nodecayed.arrayptr353863.pre = phi {} addrspace(10)* [ %589, %L478 ], [ %574, %L470 ], [ %569, %L467 ]
  %arraysize331 = phi i64 [ %arraysize331.pre, %L478 ], [ %arraysize127, %L470 ], [ %arraysize127, %L467 ], !dbg !3362
  %arraysize350 = phi i64 [ %arraysize329.pre, %L478 ], [ %arraysize125, %L470 ], [ %arraysize125, %L467 ], !dbg !3362
  %"'ipc145" = bitcast {} addrspace(10)* %590 to double addrspace(13)* addrspace(10)*, !dbg !3379
  %591 = bitcast {} addrspace(10)* %nodecayed.arrayptr353863.pre to double addrspace(13)* addrspace(10)*, !dbg !3379
  %"'ipc146" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc145" to double addrspace(13)* addrspace(11)*, !dbg !3379
  %592 = addrspacecast double addrspace(13)* addrspace(10)* %591 to double addrspace(13)* addrspace(11)*, !dbg !3379
  %"'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc146", align 8, !dbg !3379, !alias.scope !3384, !noalias !3387
  %593 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %592, align 8, !dbg !3379, !alias.scope !3387, !noalias !3384
  %.not862 = icmp eq i64 %arraysize331, 1, !dbg !3379
  %.not861 = icmp eq i64 %arraysize350, 1, !dbg !3389
  %"'ipc139" = bitcast {} addrspace(10)* %555 to double addrspace(13)* addrspace(10)*
  %594 = bitcast {} addrspace(10)* %562 to double addrspace(13)* addrspace(10)*
  %"'ipc140" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc139" to double addrspace(13)* addrspace(11)*
  %595 = addrspacecast double addrspace(13)* addrspace(10)* %594 to double addrspace(13)* addrspace(11)*
  %umax1042 = call i64 @llvm.umax.i64(i64 %arraysize125, i64 1) #72, !dbg !3392
  %"arrayptr358864.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc140", align 8, !tbaa !73, !alias.scope !3394, !noalias !3395
  %arrayptr358864.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %595, align 8, !tbaa !73, !invariant.load !68, !alias.scope !3396, !noalias !3332
  %umax1078 = call i64 @llvm.umax.i64(i64 %arraysize127, i64 1) #72, !dbg !3392
  %596 = add nsw i64 %umax1078, -1, !dbg !3392
  %597 = add nsw i64 %umax1042, -1, !dbg !3392
  %598 = add nuw i64 %596, 1, !dbg !3392
  %599 = add nuw i64 %597, 1, !dbg !3392
  %600 = mul nuw nsw i64 %599, %598, !dbg !3392
  %601 = mul nuw i64 %600, 8, !dbg !3392
  %602 = call noalias nonnull i8* @malloc(i64 %601), !dbg !3392, !enzyme_cache_alloc !3397
  %arrayref_malloccache = bitcast i8* %602 to double*, !dbg !3392
  store double* %arrayref_malloccache, double** %arrayref_cache, align 8, !dbg !3392, !invariant.group !3399
  br label %L558.lr.ph, !dbg !3392

L558.lr.ph:                                       ; preds = %L562, %L483
  %iv5 = phi i64 [ %iv.next6, %L562 ], [ 0, %L483 ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  %value_phi341.op = add nsw i64 %iv.next6, -1
  %603 = select i1 %.not862, i64 0, i64 %value_phi341.op
  %604 = mul i64 %603, %arraysize350
  %605 = mul i64 %value_phi341.op, %arraysize125
  br label %L558, !dbg !3400

L558:                                             ; preds = %L558, %L558.lr.ph
  %iv7 = phi i64 [ %iv.next8, %L558 ], [ 0, %L558.lr.ph ]
  %iv.next8 = add nuw nsw i64 %iv7, 1, !dbg !3401
  %606 = select i1 %.not861, i64 0, i64 %iv7, !dbg !3401
  %607 = add i64 %606, %604, !dbg !3401
  %"'ipg160" = getelementptr inbounds double, double addrspace(13)* %"'ipl", i64 %607, !dbg !3401
  %608 = getelementptr inbounds double, double addrspace(13)* %593, i64 %607, !dbg !3401
  %arrayref = load double, double addrspace(13)* %608, align 8, !dbg !3401, !tbaa !269, !alias.scope !3410, !noalias !3413
  %609 = fmul double %406, %arrayref, !dbg !3415
  %610 = add i64 %iv7, %605, !dbg !3418
  %"'ipg149" = getelementptr inbounds double, double addrspace(13)* %"arrayptr358864.pre'ipl", i64 %610, !dbg !3418
  %611 = getelementptr inbounds double, double addrspace(13)* %arrayptr358864.pre, i64 %610, !dbg !3418
  store double %609, double addrspace(13)* %611, align 8, !dbg !3418, !tbaa !269, !alias.scope !3420, !noalias !3423
  %612 = load double*, double** %arrayref_cache, align 8, !dbg !3425, !dereferenceable !306, !invariant.group !3399
  %613 = mul nuw nsw i64 %599, %598, !dbg !3425
  %614 = mul nuw nsw i64 %iv5, %599, !dbg !3425
  %615 = add nuw nsw i64 %iv7, %614, !dbg !3425
  %616 = getelementptr inbounds double, double* %612, i64 %615, !dbg !3425
  store double %arrayref, double* %616, align 8, !dbg !3425, !tbaa !269, !invariant.group !3426
  %exitcond1043.not = icmp eq i64 %iv.next8, %umax1042, !dbg !3425
  br i1 %exitcond1043.not, label %L562, label %L558, !dbg !3400, !llvm.loop !3427

L562:                                             ; preds = %L558
  %exitcond.not1079 = icmp eq i64 %iv.next6, %umax1078, !dbg !3428
  br i1 %exitcond.not1079, label %L598, label %L558.lr.ph, !dbg !3433

L584:                                             ; preds = %L457
  %arraysize729 = phi i64 [ %arraysize323, %L457 ], !dbg !3325
  %617 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct734, i64 0, i64 0, i64 0, !dbg !3434
  store i64 %arraysize321, i64* %617, align 8, !dbg !3434, !tbaa !133, !alias.scope !135, !noalias !3056
  %618 = getelementptr inbounds [2 x [1 x i64]], [2 x [1 x i64]]* %newstruct734, i64 0, i64 1, i64 0, !dbg !3434
  store i64 %arraysize729, i64* %618, align 8, !dbg !3434, !tbaa !133, !alias.scope !135, !noalias !3056
  %619 = addrspacecast [2 x [1 x i64]]* %newstruct734 to [2 x [1 x i64]] addrspace(11)*, !dbg !3327
  %620 = addrspacecast [2 x [1 x i64]]* %newstruct309 to [2 x [1 x i64]] addrspace(11)*, !dbg !3327
  call fastcc void @julia_throwdm_1974([2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %619, [2 x [1 x i64]] addrspace(11)* nocapture noundef nonnull readonly align 8 dereferenceable(16) %620) #73, !dbg !3327
  unreachable

L598:                                             ; preds = %L562
  %_augmented166 = call fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2053({} addrspace(10)* align 16 %553, {} addrspace(10)* align 16 %"'ac", {} addrspace(10)* align 16 %562, {} addrspace(10)* align 16 %555), !dbg !3289
  %subcache167 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented166, 0, !dbg !3289
  %621 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented166, 1, !dbg !3289
  %"'ac168" = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented166, 2, !dbg !3289
  %622 = add i64 %374, 1, !dbg !3438
  %623 = call i64 @llvm.smax.i64(i64 %622, i64 1) #72, !dbg !3440
  %624 = icmp ugt i64 %623, 1, !dbg !3441
  br i1 %624, label %L616.preheader, label %L1354, !dbg !3439

L616.preheader:                                   ; preds = %L598
  %625 = bitcast {} addrspace(10)* %621 to {} addrspace(10)* addrspace(10)*
  %626 = addrspacecast {} addrspace(10)* addrspace(10)* %625 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr382 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %626, i64 3
  %627 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr382 to i64 addrspace(11)*
  %arraysize383 = load i64, i64 addrspace(11)* %627, align 8, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !3445, !noalias !3448
  %"'ipg201" = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %"'ipa194", i64 0, i64 0
  %628 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %345, i64 0, i64 0
  %"'ipc195" = addrspacecast [1 x {} addrspace(10)*]* %"'ipa194" to [1 x {} addrspace(10)*] addrspace(11)*
  %629 = addrspacecast [1 x {} addrspace(10)*]* %345 to [1 x {} addrspace(10)*] addrspace(11)*
  %630 = bitcast {} addrspace(10)* %getfield13 to {} addrspace(10)* addrspace(10)*
  %631 = addrspacecast {} addrspace(10)* addrspace(10)* %630 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr384 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %631, i64 3
  %632 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr384 to i64 addrspace(11)*
  %arraysize385 = load i64, i64 addrspace(11)* %632, align 8, !alias.scope !3450, !noalias !3453
  %memcpy_refined_dst393 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct391, i64 0, i32 0, i64 0, i64 0
  %633 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct391, i64 0, i32 1
  %arraysize_ptr394 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %631, i64 4
  %634 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr394 to i64 addrspace(11)*
  %arraysize395 = load i64, i64 addrspace(11)* %634, align 8, !alias.scope !3450, !noalias !3453
  %memcpy_refined_dst399 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct397, i64 0, i64 0, i64 0
  %.not867 = icmp eq i64 %arraysize385, 0
  %"'ipc215" = bitcast {} addrspace(10)* %"getfield13'ipl" to double addrspace(13)* addrspace(10)*
  %635 = bitcast {} addrspace(10)* %getfield13 to double addrspace(13)* addrspace(10)*
  %"'ipc216" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc215" to double addrspace(13)* addrspace(11)*
  %636 = addrspacecast double addrspace(13)* addrspace(10)* %635 to double addrspace(13)* addrspace(11)*
  %637 = bitcast {} addrspace(10)* %getfield3 to {} addrspace(10)* addrspace(10)*
  %638 = addrspacecast {} addrspace(10)* addrspace(10)* %637 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr427 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %638, i64 3
  %639 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr427 to i64 addrspace(11)*
  %arraysize428 = load i64, i64 addrspace(11)* %639, align 8, !alias.scope !3455, !noalias !3458
  %current_task429870 = getelementptr inbounds {}**, {}*** %354, i64 -14
  %current_task429 = bitcast {}*** %current_task429870 to {}**
  %memcpy_refined_dst446 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct444, i64 0, i32 0, i64 0, i64 0
  %640 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct444, i64 0, i32 1
  %641 = addrspacecast {} addrspace(10)* %getfield15 to {} addrspace(11)*
  %"'ipc169" = bitcast {} addrspace(10)* %"getfield15'ipl" to double addrspace(13)* addrspace(10)*
  %642 = bitcast {} addrspace(10)* %getfield15 to double addrspace(13)* addrspace(10)*
  %"'ipc170" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc169" to double addrspace(13)* addrspace(11)*
  %643 = addrspacecast double addrspace(13)* addrspace(10)* %642 to double addrspace(13)* addrspace(11)*
  %"arrayptr692923'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc170", align 16, !alias.scope !3224, !noalias !3225, !invariant.group !3460
  %arrayptr692923 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %643, align 16, !alias.scope !3225, !noalias !3224
  %".repack909'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa357", i64 0, i32 0
  %.repack909 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %350, i64 0, i32 0
  %"'ipg371" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa357", i64 0, i32 1, i32 0, i64 0, i64 0
  %644 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %350, i64 0, i32 1, i32 0, i64 0, i64 0
  %".repack910.repack916'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa357", i64 0, i32 1, i32 1
  %.repack910.repack916 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %350, i64 0, i32 1, i32 1
  %".repack912'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa357", i64 0, i32 2
  %.repack912 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %350, i64 0, i32 2
  %".repack914'ipg" = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa357", i64 0, i32 3
  %.repack914 = getelementptr inbounds { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %350, i64 0, i32 3
  %"'ipc358" = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa357" to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*
  %645 = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %350 to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*
  %646 = bitcast {} addrspace(10)* %getfield21 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %647 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %646 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr471 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %647, i64 0, i32 1
  %648 = bitcast {} addrspace(10)* %getfield21 to i64 addrspace(13)* addrspace(10)*
  %649 = addrspacecast i64 addrspace(13)* addrspace(10)* %648 to i64 addrspace(13)* addrspace(11)*
  %"'ipg415" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 72
  %650 = getelementptr inbounds i8, i8 addrspace(10)* %357, i64 72
  %"'ipc416" = bitcast i8 addrspace(10)* %"'ipg415" to double addrspace(10)*
  %651 = bitcast i8 addrspace(10)* %650 to double addrspace(10)*
  %"'ipc417" = addrspacecast double addrspace(10)* %"'ipc416" to double addrspace(11)*
  %652 = addrspacecast double addrspace(10)* %651 to double addrspace(11)*
  %653 = bitcast {} addrspace(10)* %getfield5 to {} addrspace(10)* addrspace(10)*
  %654 = addrspacecast {} addrspace(10)* addrspace(10)* %653 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr491 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %654, i64 3
  %655 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr491 to i64 addrspace(11)*
  %arraysize492 = load i64, i64 addrspace(11)* %655, align 8, !alias.scope !3461, !noalias !3464
  %656 = bitcast {} addrspace(10)* %getfield17 to {} addrspace(10)* addrspace(10)*
  %657 = addrspacecast {} addrspace(10)* addrspace(10)* %656 to {} addrspace(10)* addrspace(11)*
  %arraysize_ptr493 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %657, i64 3
  %658 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr493 to i64 addrspace(11)*
  %arraysize494 = load i64, i64 addrspace(11)* %658, align 8, !alias.scope !3466, !noalias !3469
  %memcpy_refined_dst502 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct500, i64 0, i32 0, i64 0, i64 0
  %659 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct500, i64 0, i32 1
  %arraysize_ptr503 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %657, i64 4
  %660 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr503 to i64 addrspace(11)*
  %arraysize504 = load i64, i64 addrspace(11)* %660, align 8, !alias.scope !3466, !noalias !3469
  %memcpy_refined_dst508 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct506, i64 0, i64 0, i64 0
  %.not888 = icmp eq i64 %arraysize494, 0
  %"'ipc423" = bitcast {} addrspace(10)* %"getfield17'ipl" to double addrspace(13)* addrspace(10)*
  %661 = bitcast {} addrspace(10)* %getfield17 to double addrspace(13)* addrspace(10)*
  %"'ipc424" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc423" to double addrspace(13)* addrspace(11)*
  %662 = addrspacecast double addrspace(13)* addrspace(10)* %661 to double addrspace(13)* addrspace(11)*
  %memcpy_refined_dst564 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct562, i64 0, i64 0, i64 0
  %"'ipg520" = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %"'ipa510", i64 0, i64 0
  %663 = getelementptr inbounds [1 x {} addrspace(10)*], [1 x {} addrspace(10)*]* %346, i64 0, i64 0
  %"'ipc511" = addrspacecast [1 x {} addrspace(10)*]* %"'ipa510" to [1 x {} addrspace(10)*] addrspace(11)*
  %664 = addrspacecast [1 x {} addrspace(10)*]* %346 to [1 x {} addrspace(10)*] addrspace(11)*
  %"memcpy_refined_src595'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa589", i64 0, i64 0
  %memcpy_refined_src595 = getelementptr inbounds [3 x double], [3 x double]* %347, i64 0, i64 0
  %"memcpy_refined_src597'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa589", i64 0, i64 1
  %memcpy_refined_src597 = getelementptr inbounds [3 x double], [3 x double]* %347, i64 0, i64 1
  %"memcpy_refined_src599'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa589", i64 0, i64 2
  %memcpy_refined_src599 = getelementptr inbounds [3 x double], [3 x double]* %347, i64 0, i64 2
  %665 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct618, i64 0, i64 0, i64 0
  %memcpy_refined_dst621 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct619, i64 0, i32 0, i64 0, i64 0
  %666 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct619, i64 0, i32 1
  %667 = addrspacecast [1 x [1 x i64]]* %newstruct618 to [1 x [1 x i64]] addrspace(11)*
  %668 = add i64 %arraysize395, 2, !dbg !3440
  %umax = call i64 @llvm.umax.i64(i64 %arraysize28, i64 1) #72, !dbg !3440
  %669 = add nuw nsw i64 %umax, 1, !dbg !3440
  %umax1040 = call i64 @llvm.umax.i64(i64 %arraysize108, i64 1) #72, !dbg !3440
  %670 = add nuw nsw i64 %umax1040, 1, !dbg !3440
  %671 = add nsw i64 %623, -2, !dbg !3440
  %672 = add nuw i64 %671, 1, !dbg !3440
  %673 = mul nuw i64 %672, 8, !dbg !3440
  %674 = call noalias nonnull i8* @malloc(i64 %673), !dbg !3440, !enzyme_cache_alloc !3471
  %loopLimit_malloccache = bitcast i8* %674 to i64*, !dbg !3440
  store i64* %loopLimit_malloccache, i64** %loopLimit_cache24, align 8, !dbg !3440, !invariant.group !3473
  store i64 %arraysize494, i64* %arraysize494_cache, align 8, !dbg !3440, !invariant.group !3474
  store i64 %arraysize385, i64* %arraysize385_cache, align 8, !dbg !3440, !invariant.group !3475
  %675 = add nsw i64 %arraysize, -1, !dbg !3440
  %676 = mul nuw i64 %672, 8, !dbg !3440
  %677 = call noalias nonnull i8* @malloc(i64 %676), !dbg !3440, !enzyme_cache_alloc !3476
  %loopLimit_malloccache46 = bitcast i8* %677 to i64*, !dbg !3440
  store i64* %loopLimit_malloccache46, i64** %loopLimit_cache45, align 8, !dbg !3440, !invariant.group !3478
  %678 = mul nuw i64 %672, 8, !dbg !3440
  %679 = call noalias nonnull i8* @malloc(i64 %678), !dbg !3440, !enzyme_cache_alloc !3479
  %loopLimit_malloccache58 = bitcast i8* %679 to i64*, !dbg !3440
  store i64* %loopLimit_malloccache58, i64** %loopLimit_cache57, align 8, !dbg !3440, !invariant.group !3481
  %680 = mul nuw i64 %672, 8, !dbg !3440
  %681 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %682 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %681, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %683 = bitcast {}*** %341 to {}**, !dbg !3440
  %684 = getelementptr inbounds {}*, {}** %683, i64 -14, !dbg !3440
  %685 = getelementptr inbounds {}*, {}** %684, i64 16, !dbg !3440
  %686 = bitcast {}** %685 to i8**, !dbg !3440
  %687 = load i8*, i8** %686, align 8, !dbg !3440
  %688 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %684, i64 %680, {} addrspace(10)* %682), !dbg !3440
  %689 = bitcast {} addrspace(10)* %688 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i, !dbg !3440

loop.i:                                           ; preds = %loop.i, %L616.preheader
  %690 = phi i64 [ 0, %L616.preheader ], [ %691, %loop.i ], !dbg !3440
  %691 = add i64 %690, 1, !dbg !3440
  %692 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %689, i64 %690, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %692, align 8, !dbg !3440
  %693 = icmp eq i64 %691, %672, !dbg !3440
  br i1 %693, label %zeroType.44.exit, label %loop.i, !dbg !3440

zeroType.44.exit:                                 ; preds = %loop.i
  %_malloccache = bitcast {} addrspace(10)* %688 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache, {} addrspace(10)* addrspace(10)** %_cache171, align 8, !dbg !3440, !invariant.group !3482
  %694 = mul nuw i64 %672, 8, !dbg !3440
  %695 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %696 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %695, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %697 = bitcast {}*** %336 to {}**, !dbg !3440
  %698 = getelementptr inbounds {}*, {}** %697, i64 -14, !dbg !3440
  %699 = getelementptr inbounds {}*, {}** %698, i64 16, !dbg !3440
  %700 = bitcast {}** %699 to i8**, !dbg !3440
  %701 = load i8*, i8** %700, align 8, !dbg !3440
  %702 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %698, i64 %694, {} addrspace(10)* %696), !dbg !3440
  %703 = bitcast {} addrspace(10)* %702 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i595, !dbg !3440

loop.i595:                                        ; preds = %loop.i595, %zeroType.44.exit
  %704 = phi i64 [ 0, %zeroType.44.exit ], [ %705, %loop.i595 ], !dbg !3440
  %705 = add i64 %704, 1, !dbg !3440
  %706 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %703, i64 %704, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %706, align 8, !dbg !3440
  %707 = icmp eq i64 %705, %672, !dbg !3440
  br i1 %707, label %zeroType.48.exit, label %loop.i595, !dbg !3440

zeroType.48.exit:                                 ; preds = %loop.i595
  %_malloccache179 = bitcast {} addrspace(10)* %702 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache179, {} addrspace(10)* addrspace(10)** %_cache178, align 8, !dbg !3440, !invariant.group !3483
  %708 = mul nuw i64 %672, 8, !dbg !3440
  %709 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %710 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %709, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %711 = bitcast {}*** %332 to {}**, !dbg !3440
  %712 = getelementptr inbounds {}*, {}** %711, i64 -14, !dbg !3440
  %713 = getelementptr inbounds {}*, {}** %712, i64 16, !dbg !3440
  %714 = bitcast {}** %713 to i8**, !dbg !3440
  %715 = load i8*, i8** %714, align 8, !dbg !3440
  %716 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %712, i64 %708, {} addrspace(10)* %710), !dbg !3440
  %717 = bitcast {} addrspace(10)* %716 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i596, !dbg !3440

loop.i596:                                        ; preds = %loop.i596, %zeroType.48.exit
  %718 = phi i64 [ 0, %zeroType.48.exit ], [ %719, %loop.i596 ], !dbg !3440
  %719 = add i64 %718, 1, !dbg !3440
  %720 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %717, i64 %718, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %720, align 8, !dbg !3440
  %721 = icmp eq i64 %719, %672, !dbg !3440
  br i1 %721, label %zeroType.52.exit, label %loop.i596, !dbg !3440

zeroType.52.exit:                                 ; preds = %loop.i596
  %"'ip_phi20_malloccache" = bitcast {} addrspace(10)* %716 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'ip_phi20_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi20_cache", align 8, !dbg !3440, !invariant.group !3484
  %722 = mul nuw i64 %672, 8, !dbg !3440
  %723 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %724 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %723, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %725 = bitcast {}*** %328 to {}**, !dbg !3440
  %726 = getelementptr inbounds {}*, {}** %725, i64 -14, !dbg !3440
  %727 = getelementptr inbounds {}*, {}** %726, i64 16, !dbg !3440
  %728 = bitcast {}** %727 to i8**, !dbg !3440
  %729 = load i8*, i8** %728, align 8, !dbg !3440
  %730 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %726, i64 %722, {} addrspace(10)* %724), !dbg !3440
  %731 = bitcast {} addrspace(10)* %730 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i597, !dbg !3440

loop.i597:                                        ; preds = %loop.i597, %zeroType.52.exit
  %732 = phi i64 [ 0, %zeroType.52.exit ], [ %733, %loop.i597 ], !dbg !3440
  %733 = add i64 %732, 1, !dbg !3440
  %734 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %731, i64 %732, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %734, align 8, !dbg !3440
  %735 = icmp eq i64 %733, %672, !dbg !3440
  br i1 %735, label %zeroType.56.exit, label %loop.i597, !dbg !3440

zeroType.56.exit:                                 ; preds = %loop.i597
  %_malloccache183 = bitcast {} addrspace(10)* %730 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache183, {} addrspace(10)* addrspace(10)** %_cache182, align 8, !dbg !3440, !invariant.group !3485
  %736 = mul nuw i64 %672, 8, !dbg !3440
  %737 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %738 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %737, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %739 = bitcast {}*** %323 to {}**, !dbg !3440
  %740 = getelementptr inbounds {}*, {}** %739, i64 -14, !dbg !3440
  %741 = getelementptr inbounds {}*, {}** %740, i64 16, !dbg !3440
  %742 = bitcast {}** %741 to i8**, !dbg !3440
  %743 = load i8*, i8** %742, align 8, !dbg !3440
  %744 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %740, i64 %736, {} addrspace(10)* %738), !dbg !3440
  %745 = bitcast {} addrspace(10)* %744 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i598, !dbg !3440

loop.i598:                                        ; preds = %loop.i598, %zeroType.56.exit
  %746 = phi i64 [ 0, %zeroType.56.exit ], [ %747, %loop.i598 ], !dbg !3440
  %747 = add i64 %746, 1, !dbg !3440
  %748 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %745, i64 %746, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %748, align 8, !dbg !3440
  %749 = icmp eq i64 %747, %672, !dbg !3440
  br i1 %749, label %zeroType.60.exit, label %loop.i598, !dbg !3440

zeroType.60.exit:                                 ; preds = %loop.i598
  %_malloccache190 = bitcast {} addrspace(10)* %744 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache190, {} addrspace(10)* addrspace(10)** %_cache189, align 8, !dbg !3440, !invariant.group !3486
  %750 = mul nuw i64 %672, 8, !dbg !3440
  %751 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %752 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %751, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %753 = bitcast {}*** %319 to {}**, !dbg !3440
  %754 = getelementptr inbounds {}*, {}** %753, i64 -14, !dbg !3440
  %755 = getelementptr inbounds {}*, {}** %754, i64 16, !dbg !3440
  %756 = bitcast {}** %755 to i8**, !dbg !3440
  %757 = load i8*, i8** %756, align 8, !dbg !3440
  %758 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %754, i64 %750, {} addrspace(10)* %752), !dbg !3440
  %759 = bitcast {} addrspace(10)* %758 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i599, !dbg !3440

loop.i599:                                        ; preds = %loop.i599, %zeroType.60.exit
  %760 = phi i64 [ 0, %zeroType.60.exit ], [ %761, %loop.i599 ], !dbg !3440
  %761 = add i64 %760, 1, !dbg !3440
  %762 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %759, i64 %760, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %762, align 8, !dbg !3440
  %763 = icmp eq i64 %761, %672, !dbg !3440
  br i1 %763, label %zeroType.64.exit, label %loop.i599, !dbg !3440

zeroType.64.exit:                                 ; preds = %loop.i599
  %"'ip_phi19_malloccache" = bitcast {} addrspace(10)* %758 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'ip_phi19_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi19_cache", align 8, !dbg !3440, !invariant.group !3487
  %764 = mul nuw i64 %672, 8, !dbg !3440
  %765 = call noalias nonnull i8* @malloc(i64 %764), !dbg !3440, !enzyme_cache_alloc !3488
  %value_phi372_malloccache = bitcast i8* %765 to double*, !dbg !3440
  store double* %value_phi372_malloccache, double** %value_phi372_cache, align 8, !dbg !3440, !invariant.group !3490
  %766 = mul nuw i64 %672, 128, !dbg !3440
  %767 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %768 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %767, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11467962512 to {}*) to {} addrspace(10)*)), !dbg !3440
  %769 = bitcast {}*** %315 to {}**, !dbg !3440
  %770 = getelementptr inbounds {}*, {}** %769, i64 -14, !dbg !3440
  %771 = getelementptr inbounds {}*, {}** %770, i64 16, !dbg !3440
  %772 = bitcast {}** %771 to i8**, !dbg !3440
  %773 = load i8*, i8** %772, align 8, !dbg !3440
  %774 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %770, i64 %766, {} addrspace(10)* %768), !dbg !3440
  %775 = bitcast {} addrspace(10)* %774 to { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3440
  br label %loop.i600, !dbg !3440

loop.i600:                                        ; preds = %loop.i600, %zeroType.64.exit
  %776 = phi i64 [ 0, %zeroType.64.exit ], [ %777, %loop.i600 ], !dbg !3440
  %777 = add i64 %776, 1, !dbg !3440
  %778 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 0, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %778, align 8, !dbg !3440
  %779 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 1, !dbg !3440
  %780 = bitcast {} addrspace(10)* addrspace(10)* addrspace(10)* %779 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %780, align 8, !dbg !3440
  %781 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %781, align 8, !dbg !3440
  %782 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 3, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %782, align 8, !dbg !3440
  %783 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %783, align 8, !dbg !3440
  %784 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %784, align 8, !dbg !3440
  %785 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 6, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %785, align 8, !dbg !3440
  %786 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 7, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %786, align 8, !dbg !3440
  %787 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 8, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %787, align 8, !dbg !3440
  %788 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 9, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %788, align 8, !dbg !3440
  %789 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 10, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %789, align 8, !dbg !3440
  %790 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 11, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %790, align 8, !dbg !3440
  %791 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 12, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %791, align 8, !dbg !3440
  %792 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 13, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %792, align 8, !dbg !3440
  %793 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 14, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %793, align 8, !dbg !3440
  %794 = getelementptr { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %775, i64 %776, i32 15, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %794, align 8, !dbg !3440
  %795 = icmp eq i64 %777, %672, !dbg !3440
  br i1 %795, label %zeroType.68.exit, label %loop.i600, !dbg !3440

zeroType.68.exit:                                 ; preds = %loop.i600
  %subcache198_malloccache = bitcast {} addrspace(10)* %774 to { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3440
  store { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %subcache198_malloccache, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %subcache198_cache, align 8, !dbg !3440, !invariant.group !3491
  %796 = mul nuw i64 %672, 8, !dbg !3440
  %797 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %798 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %797, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %799 = bitcast {}*** %311 to {}**, !dbg !3440
  %800 = getelementptr inbounds {}*, {}** %799, i64 -14, !dbg !3440
  %801 = getelementptr inbounds {}*, {}** %800, i64 16, !dbg !3440
  %802 = bitcast {}** %801 to i8**, !dbg !3440
  %803 = load i8*, i8** %802, align 8, !dbg !3440
  %804 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %800, i64 %796, {} addrspace(10)* %798), !dbg !3440
  %805 = bitcast {} addrspace(10)* %804 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i601, !dbg !3440

loop.i601:                                        ; preds = %loop.i601, %zeroType.68.exit
  %806 = phi i64 [ 0, %zeroType.68.exit ], [ %807, %loop.i601 ], !dbg !3440
  %807 = add i64 %806, 1, !dbg !3440
  %808 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %805, i64 %806, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %808, align 8, !dbg !3440
  %809 = icmp eq i64 %807, %672, !dbg !3440
  br i1 %809, label %zeroType.72.exit, label %loop.i601, !dbg !3440

zeroType.72.exit:                                 ; preds = %loop.i601
  %_malloccache203 = bitcast {} addrspace(10)* %804 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache203, {} addrspace(10)* addrspace(10)** %_cache202, align 8, !dbg !3440, !invariant.group !3492
  %810 = mul nuw i64 %672, 8, !dbg !3440
  %811 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %812 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %811, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %813 = bitcast {}*** %307 to {}**, !dbg !3440
  %814 = getelementptr inbounds {}*, {}** %813, i64 -14, !dbg !3440
  %815 = getelementptr inbounds {}*, {}** %814, i64 16, !dbg !3440
  %816 = bitcast {}** %815 to i8**, !dbg !3440
  %817 = load i8*, i8** %816, align 8, !dbg !3440
  %818 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %814, i64 %810, {} addrspace(10)* %812), !dbg !3440
  %819 = bitcast {} addrspace(10)* %818 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i602, !dbg !3440

loop.i602:                                        ; preds = %loop.i602, %zeroType.72.exit
  %820 = phi i64 [ 0, %zeroType.72.exit ], [ %821, %loop.i602 ], !dbg !3440
  %821 = add i64 %820, 1, !dbg !3440
  %822 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %819, i64 %820, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %822, align 8, !dbg !3440
  %823 = icmp eq i64 %821, %672, !dbg !3440
  br i1 %823, label %zeroType.76.exit, label %loop.i602, !dbg !3440

zeroType.76.exit:                                 ; preds = %loop.i602
  %"'mi17_malloccache" = bitcast {} addrspace(10)* %818 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'mi17_malloccache", {} addrspace(10)* addrspace(10)** %"'mi17_cache", align 8, !dbg !3440, !invariant.group !3493
  %824 = mul nuw i64 %672, 248, !dbg !3440
  %825 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %826 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %825, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6228907280 to {}*) to {} addrspace(10)*)), !dbg !3440
  %827 = bitcast {}*** %303 to {}**, !dbg !3440
  %828 = getelementptr inbounds {}*, {}** %827, i64 -14, !dbg !3440
  %829 = getelementptr inbounds {}*, {}** %828, i64 16, !dbg !3440
  %830 = bitcast {}** %829 to i8**, !dbg !3440
  %831 = load i8*, i8** %830, align 8, !dbg !3440
  %832 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %828, i64 %824, {} addrspace(10)* %826), !dbg !3440
  %833 = bitcast {} addrspace(10)* %832 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3440
  br label %loop.i603, !dbg !3440

loop.i603:                                        ; preds = %loop.i603, %zeroType.76.exit
  %834 = phi i64 [ 0, %zeroType.76.exit ], [ %835, %loop.i603 ], !dbg !3440
  %835 = add i64 %834, 1, !dbg !3440
  %836 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %833, i64 %834, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %836, align 8, !dbg !3440
  %837 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %833, i64 %834, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %837, align 8, !dbg !3440
  %838 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %833, i64 %834, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %838, align 8, !dbg !3440
  %839 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %833, i64 %834, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %839, align 8, !dbg !3440
  %840 = icmp eq i64 %835, %672, !dbg !3440
  br i1 %840, label %zeroType.80.exit, label %loop.i603, !dbg !3440

zeroType.80.exit:                                 ; preds = %loop.i603
  %subcache207_malloccache = bitcast {} addrspace(10)* %832 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3440
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %subcache207_malloccache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache207_cache, align 8, !dbg !3440, !invariant.group !3494
  %841 = mul nuw i64 %672, 8, !dbg !3440
  %842 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %843 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %842, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %844 = bitcast {}*** %299 to {}**, !dbg !3440
  %845 = getelementptr inbounds {}*, {}** %844, i64 -14, !dbg !3440
  %846 = getelementptr inbounds {}*, {}** %845, i64 16, !dbg !3440
  %847 = bitcast {}** %846 to i8**, !dbg !3440
  %848 = load i8*, i8** %847, align 8, !dbg !3440
  %849 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %845, i64 %841, {} addrspace(10)* %843), !dbg !3440
  %850 = bitcast {} addrspace(10)* %849 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i604, !dbg !3440

loop.i604:                                        ; preds = %loop.i604, %zeroType.80.exit
  %851 = phi i64 [ 0, %zeroType.80.exit ], [ %852, %loop.i604 ], !dbg !3440
  %852 = add i64 %851, 1, !dbg !3440
  %853 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %850, i64 %851, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %853, align 8, !dbg !3440
  %854 = icmp eq i64 %852, %672, !dbg !3440
  br i1 %854, label %zeroType.84.exit, label %loop.i604, !dbg !3440

zeroType.84.exit:                                 ; preds = %loop.i604
  %_malloccache212 = bitcast {} addrspace(10)* %849 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache212, {} addrspace(10)* addrspace(10)** %_cache211, align 8, !dbg !3440, !invariant.group !3495
  %855 = mul nuw i64 %672, 8, !dbg !3440
  %856 = call noalias nonnull i8* @malloc(i64 %855), !dbg !3440, !enzyme_cache_alloc !3496
  %value_phi414_malloccache = bitcast i8* %856 to i64**, !dbg !3440
  store i64** %value_phi414_malloccache, i64*** %value_phi414_cache, align 8, !dbg !3440, !invariant.group !3498
  %857 = mul nuw i64 %672, 8, !dbg !3440
  %858 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %859 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %858, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %860 = bitcast {}*** %294 to {}**, !dbg !3440
  %861 = getelementptr inbounds {}*, {}** %860, i64 -14, !dbg !3440
  %862 = getelementptr inbounds {}*, {}** %861, i64 16, !dbg !3440
  %863 = bitcast {}** %862 to i8**, !dbg !3440
  %864 = load i8*, i8** %863, align 8, !dbg !3440
  %865 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %861, i64 %857, {} addrspace(10)* %859), !dbg !3440
  %866 = bitcast {} addrspace(10)* %865 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i605, !dbg !3440

loop.i605:                                        ; preds = %loop.i605, %zeroType.84.exit
  %867 = phi i64 [ 0, %zeroType.84.exit ], [ %868, %loop.i605 ], !dbg !3440
  %868 = add i64 %867, 1, !dbg !3440
  %869 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %866, i64 %867, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %869, align 8, !dbg !3440
  %870 = icmp eq i64 %868, %672, !dbg !3440
  br i1 %870, label %zeroType.89.exit, label %loop.i605, !dbg !3440

zeroType.89.exit:                                 ; preds = %loop.i605
  %_malloccache239 = bitcast {} addrspace(10)* %865 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache239, {} addrspace(10)* addrspace(10)** %_cache238, align 8, !dbg !3440, !invariant.group !3499
  %871 = mul nuw i64 %672, 8, !dbg !3440
  %872 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %873 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %872, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %874 = bitcast {}*** %289 to {}**, !dbg !3440
  %875 = getelementptr inbounds {}*, {}** %874, i64 -14, !dbg !3440
  %876 = getelementptr inbounds {}*, {}** %875, i64 16, !dbg !3440
  %877 = bitcast {}** %876 to i8**, !dbg !3440
  %878 = load i8*, i8** %877, align 8, !dbg !3440
  %879 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %875, i64 %871, {} addrspace(10)* %873), !dbg !3440
  %880 = bitcast {} addrspace(10)* %879 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i606, !dbg !3440

loop.i606:                                        ; preds = %loop.i606, %zeroType.89.exit
  %881 = phi i64 [ 0, %zeroType.89.exit ], [ %882, %loop.i606 ], !dbg !3440
  %882 = add i64 %881, 1, !dbg !3440
  %883 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %880, i64 %881, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %883, align 8, !dbg !3440
  %884 = icmp eq i64 %882, %672, !dbg !3440
  br i1 %884, label %zeroType.93.exit, label %loop.i606, !dbg !3440

zeroType.93.exit:                                 ; preds = %loop.i606
  %_malloccache247 = bitcast {} addrspace(10)* %879 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache247, {} addrspace(10)* addrspace(10)** %_cache246, align 8, !dbg !3440, !invariant.group !3500
  %885 = mul nuw i64 %672, 264, !dbg !3440
  %886 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %887 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %886, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6232407248 to {}*) to {} addrspace(10)*)), !dbg !3440
  %888 = bitcast {}*** %285 to {}**, !dbg !3440
  %889 = getelementptr inbounds {}*, {}** %888, i64 -14, !dbg !3440
  %890 = getelementptr inbounds {}*, {}** %889, i64 16, !dbg !3440
  %891 = bitcast {}** %890 to i8**, !dbg !3440
  %892 = load i8*, i8** %891, align 8, !dbg !3440
  %893 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %889, i64 %885, {} addrspace(10)* %887), !dbg !3440
  %894 = bitcast {} addrspace(10)* %893 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3440
  br label %loop.i607, !dbg !3440

loop.i607:                                        ; preds = %loop.i607, %zeroType.93.exit
  %895 = phi i64 [ 0, %zeroType.93.exit ], [ %896, %loop.i607 ], !dbg !3440
  %896 = add i64 %895, 1, !dbg !3440
  %897 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %894, i64 %895, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %897, align 8, !dbg !3440
  %898 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %894, i64 %895, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %898, align 8, !dbg !3440
  %899 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %894, i64 %895, i32 0, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %899, align 8, !dbg !3440
  %900 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %894, i64 %895, i32 0, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %900, align 8, !dbg !3440
  %901 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %894, i64 %895, i32 0, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %901, align 8, !dbg !3440
  %902 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %894, i64 %895, i32 0, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %902, align 8, !dbg !3440
  %903 = icmp eq i64 %896, %672, !dbg !3440
  br i1 %903, label %zeroType.97.exit, label %loop.i607, !dbg !3440

zeroType.97.exit:                                 ; preds = %loop.i607
  %_augmented206_malloccache = bitcast {} addrspace(10)* %893 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3440
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %_augmented206_malloccache, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented206_cache, align 8, !dbg !3440, !invariant.group !3501
  %904 = mul nuw i64 %672, 8, !dbg !3440
  %905 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %906 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %905, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %907 = bitcast {}*** %281 to {}**, !dbg !3440
  %908 = getelementptr inbounds {}*, {}** %907, i64 -14, !dbg !3440
  %909 = getelementptr inbounds {}*, {}** %908, i64 16, !dbg !3440
  %910 = bitcast {}** %909 to i8**, !dbg !3440
  %911 = load i8*, i8** %910, align 8, !dbg !3440
  %912 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %908, i64 %904, {} addrspace(10)* %906), !dbg !3440
  %913 = bitcast {} addrspace(10)* %912 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i608, !dbg !3440

loop.i608:                                        ; preds = %loop.i608, %zeroType.97.exit
  %914 = phi i64 [ 0, %zeroType.97.exit ], [ %915, %loop.i608 ], !dbg !3440
  %915 = add i64 %914, 1, !dbg !3440
  %916 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %913, i64 %914, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %916, align 8, !dbg !3440
  %917 = icmp eq i64 %915, %672, !dbg !3440
  br i1 %917, label %zeroType.101.exit, label %loop.i608, !dbg !3440

zeroType.101.exit:                                ; preds = %loop.i608
  %_malloccache251 = bitcast {} addrspace(10)* %912 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache251, {} addrspace(10)* addrspace(10)** %_cache250, align 8, !dbg !3440, !invariant.group !3502
  %918 = mul nuw i64 %672, 8, !dbg !3440
  %919 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %920 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %919, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %921 = bitcast {}*** %276 to {}**, !dbg !3440
  %922 = getelementptr inbounds {}*, {}** %921, i64 -14, !dbg !3440
  %923 = getelementptr inbounds {}*, {}** %922, i64 16, !dbg !3440
  %924 = bitcast {}** %923 to i8**, !dbg !3440
  %925 = load i8*, i8** %924, align 8, !dbg !3440
  %926 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %922, i64 %918, {} addrspace(10)* %920), !dbg !3440
  %927 = bitcast {} addrspace(10)* %926 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i609, !dbg !3440

loop.i609:                                        ; preds = %loop.i609, %zeroType.101.exit
  %928 = phi i64 [ 0, %zeroType.101.exit ], [ %929, %loop.i609 ], !dbg !3440
  %929 = add i64 %928, 1, !dbg !3440
  %930 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %927, i64 %928, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %930, align 8, !dbg !3440
  %931 = icmp eq i64 %929, %672, !dbg !3440
  br i1 %931, label %zeroType.106.exit, label %loop.i609, !dbg !3440

zeroType.106.exit:                                ; preds = %loop.i609
  %_malloccache258 = bitcast {} addrspace(10)* %926 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache258, {} addrspace(10)* addrspace(10)** %_cache257, align 8, !dbg !3440, !invariant.group !3503
  %932 = mul nuw i64 %672, 8, !dbg !3440
  %933 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %934 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %933, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %935 = bitcast {}*** %272 to {}**, !dbg !3440
  %936 = getelementptr inbounds {}*, {}** %935, i64 -14, !dbg !3440
  %937 = getelementptr inbounds {}*, {}** %936, i64 16, !dbg !3440
  %938 = bitcast {}** %937 to i8**, !dbg !3440
  %939 = load i8*, i8** %938, align 8, !dbg !3440
  %940 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %936, i64 %932, {} addrspace(10)* %934), !dbg !3440
  %941 = bitcast {} addrspace(10)* %940 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i610, !dbg !3440

loop.i610:                                        ; preds = %loop.i610, %zeroType.106.exit
  %942 = phi i64 [ 0, %zeroType.106.exit ], [ %943, %loop.i610 ], !dbg !3440
  %943 = add i64 %942, 1, !dbg !3440
  %944 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %941, i64 %942, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %944, align 8, !dbg !3440
  %945 = icmp eq i64 %943, %672, !dbg !3440
  br i1 %945, label %zeroType.110.exit, label %loop.i610, !dbg !3440

zeroType.110.exit:                                ; preds = %loop.i610
  %"'ip_phi27_malloccache" = bitcast {} addrspace(10)* %940 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'ip_phi27_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi27_cache", align 8, !dbg !3440, !invariant.group !3504
  %946 = mul nuw i64 %672, 8, !dbg !3440
  %947 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %948 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %947, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %949 = bitcast {}*** %268 to {}**, !dbg !3440
  %950 = getelementptr inbounds {}*, {}** %949, i64 -14, !dbg !3440
  %951 = getelementptr inbounds {}*, {}** %950, i64 16, !dbg !3440
  %952 = bitcast {}** %951 to i8**, !dbg !3440
  %953 = load i8*, i8** %952, align 8, !dbg !3440
  %954 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %950, i64 %946, {} addrspace(10)* %948), !dbg !3440
  %955 = bitcast {} addrspace(10)* %954 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i611, !dbg !3440

loop.i611:                                        ; preds = %loop.i611, %zeroType.110.exit
  %956 = phi i64 [ 0, %zeroType.110.exit ], [ %957, %loop.i611 ], !dbg !3440
  %957 = add i64 %956, 1, !dbg !3440
  %958 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %955, i64 %956, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %958, align 8, !dbg !3440
  %959 = icmp eq i64 %957, %672, !dbg !3440
  br i1 %959, label %zeroType.114.exit, label %loop.i611, !dbg !3440

zeroType.114.exit:                                ; preds = %loop.i611
  %_malloccache262 = bitcast {} addrspace(10)* %954 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache262, {} addrspace(10)* addrspace(10)** %_cache261, align 8, !dbg !3440, !invariant.group !3505
  %960 = mul nuw i64 %672, 8, !dbg !3440
  %961 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %962 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %961, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %963 = bitcast {}*** %264 to {}**, !dbg !3440
  %964 = getelementptr inbounds {}*, {}** %963, i64 -14, !dbg !3440
  %965 = getelementptr inbounds {}*, {}** %964, i64 16, !dbg !3440
  %966 = bitcast {}** %965 to i8**, !dbg !3440
  %967 = load i8*, i8** %966, align 8, !dbg !3440
  %968 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %964, i64 %960, {} addrspace(10)* %962), !dbg !3440
  %969 = bitcast {} addrspace(10)* %968 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i612, !dbg !3440

loop.i612:                                        ; preds = %loop.i612, %zeroType.114.exit
  %970 = phi i64 [ 0, %zeroType.114.exit ], [ %971, %loop.i612 ], !dbg !3440
  %971 = add i64 %970, 1, !dbg !3440
  %972 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %969, i64 %970, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %972, align 8, !dbg !3440
  %973 = icmp eq i64 %971, %672, !dbg !3440
  br i1 %973, label %zeroType.118.exit, label %loop.i612, !dbg !3440

zeroType.118.exit:                                ; preds = %loop.i612
  %"'mi26_malloccache" = bitcast {} addrspace(10)* %968 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'mi26_malloccache", {} addrspace(10)* addrspace(10)** %"'mi26_cache", align 8, !dbg !3440, !invariant.group !3506
  %974 = mul nuw i64 %672, 8, !dbg !3440
  %975 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %976 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %975, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %977 = bitcast {}*** %260 to {}**, !dbg !3440
  %978 = getelementptr inbounds {}*, {}** %977, i64 -14, !dbg !3440
  %979 = getelementptr inbounds {}*, {}** %978, i64 16, !dbg !3440
  %980 = bitcast {}** %979 to i8**, !dbg !3440
  %981 = load i8*, i8** %980, align 8, !dbg !3440
  %982 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %978, i64 %974, {} addrspace(10)* %976), !dbg !3440
  %983 = bitcast {} addrspace(10)* %982 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i613, !dbg !3440

loop.i613:                                        ; preds = %loop.i613, %zeroType.118.exit
  %984 = phi i64 [ 0, %zeroType.118.exit ], [ %985, %loop.i613 ], !dbg !3440
  %985 = add i64 %984, 1, !dbg !3440
  %986 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %983, i64 %984, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %986, align 8, !dbg !3440
  %987 = icmp eq i64 %985, %672, !dbg !3440
  br i1 %987, label %zeroType.122.exit, label %loop.i613, !dbg !3440

zeroType.122.exit:                                ; preds = %loop.i613
  %_malloccache266 = bitcast {} addrspace(10)* %982 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache266, {} addrspace(10)* addrspace(10)** %_cache265, align 8, !dbg !3440, !invariant.group !3507
  %988 = mul nuw i64 %672, 248, !dbg !3440
  %989 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %990 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %989, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6228907280 to {}*) to {} addrspace(10)*)), !dbg !3440
  %991 = bitcast {}*** %255 to {}**, !dbg !3440
  %992 = getelementptr inbounds {}*, {}** %991, i64 -14, !dbg !3440
  %993 = getelementptr inbounds {}*, {}** %992, i64 16, !dbg !3440
  %994 = bitcast {}** %993 to i8**, !dbg !3440
  %995 = load i8*, i8** %994, align 8, !dbg !3440
  %996 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %992, i64 %988, {} addrspace(10)* %990), !dbg !3440
  %997 = bitcast {} addrspace(10)* %996 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3440
  br label %loop.i614, !dbg !3440

loop.i614:                                        ; preds = %loop.i614, %zeroType.122.exit
  %998 = phi i64 [ 0, %zeroType.122.exit ], [ %999, %loop.i614 ], !dbg !3440
  %999 = add i64 %998, 1, !dbg !3440
  %1000 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %997, i64 %998, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1000, align 8, !dbg !3440
  %1001 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %997, i64 %998, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1001, align 8, !dbg !3440
  %1002 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %997, i64 %998, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1002, align 8, !dbg !3440
  %1003 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %997, i64 %998, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1003, align 8, !dbg !3440
  %1004 = icmp eq i64 %999, %672, !dbg !3440
  br i1 %1004, label %zeroType.127.exit, label %loop.i614, !dbg !3440

zeroType.127.exit:                                ; preds = %loop.i614
  %subcache269_malloccache = bitcast {} addrspace(10)* %996 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3440
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %subcache269_malloccache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache269_cache, align 8, !dbg !3440, !invariant.group !3508
  %1005 = mul nuw i64 %672, 8, !dbg !3440
  %1006 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1007 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1006, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1008 = bitcast {}*** %251 to {}**, !dbg !3440
  %1009 = getelementptr inbounds {}*, {}** %1008, i64 -14, !dbg !3440
  %1010 = getelementptr inbounds {}*, {}** %1009, i64 16, !dbg !3440
  %1011 = bitcast {}** %1010 to i8**, !dbg !3440
  %1012 = load i8*, i8** %1011, align 8, !dbg !3440
  %1013 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1009, i64 %1005, {} addrspace(10)* %1007), !dbg !3440
  %1014 = bitcast {} addrspace(10)* %1013 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i615, !dbg !3440

loop.i615:                                        ; preds = %loop.i615, %zeroType.127.exit
  %1015 = phi i64 [ 0, %zeroType.127.exit ], [ %1016, %loop.i615 ], !dbg !3440
  %1016 = add i64 %1015, 1, !dbg !3440
  %1017 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1014, i64 %1015, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1017, align 8, !dbg !3440
  %1018 = icmp eq i64 %1016, %672, !dbg !3440
  br i1 %1018, label %zeroType.131.exit, label %loop.i615, !dbg !3440

zeroType.131.exit:                                ; preds = %loop.i615
  %_malloccache273 = bitcast {} addrspace(10)* %1013 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache273, {} addrspace(10)* addrspace(10)** %_cache272, align 8, !dbg !3440, !invariant.group !3509
  %1019 = mul nuw i64 %672, 8, !dbg !3440
  %1020 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1021 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1020, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1022 = bitcast {}*** %246 to {}**, !dbg !3440
  %1023 = getelementptr inbounds {}*, {}** %1022, i64 -14, !dbg !3440
  %1024 = getelementptr inbounds {}*, {}** %1023, i64 16, !dbg !3440
  %1025 = bitcast {}** %1024 to i8**, !dbg !3440
  %1026 = load i8*, i8** %1025, align 8, !dbg !3440
  %1027 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1023, i64 %1019, {} addrspace(10)* %1021), !dbg !3440
  %1028 = bitcast {} addrspace(10)* %1027 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i616, !dbg !3440

loop.i616:                                        ; preds = %loop.i616, %zeroType.131.exit
  %1029 = phi i64 [ 0, %zeroType.131.exit ], [ %1030, %loop.i616 ], !dbg !3440
  %1030 = add i64 %1029, 1, !dbg !3440
  %1031 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1028, i64 %1029, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1031, align 8, !dbg !3440
  %1032 = icmp eq i64 %1030, %672, !dbg !3440
  br i1 %1032, label %zeroType.135.exit, label %loop.i616, !dbg !3440

zeroType.135.exit:                                ; preds = %loop.i616
  %box_malloccache = bitcast {} addrspace(10)* %1027 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %box_malloccache, {} addrspace(10)* addrspace(10)** %box_cache, align 8, !dbg !3440, !invariant.group !3510
  %1033 = mul nuw i64 %672, 8, !dbg !3440
  %1034 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1035 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1034, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1036 = bitcast {}*** %242 to {}**, !dbg !3440
  %1037 = getelementptr inbounds {}*, {}** %1036, i64 -14, !dbg !3440
  %1038 = getelementptr inbounds {}*, {}** %1037, i64 16, !dbg !3440
  %1039 = bitcast {}** %1038 to i8**, !dbg !3440
  %1040 = load i8*, i8** %1039, align 8, !dbg !3440
  %1041 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1037, i64 %1033, {} addrspace(10)* %1035), !dbg !3440
  %1042 = bitcast {} addrspace(10)* %1041 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i617, !dbg !3440

loop.i617:                                        ; preds = %loop.i617, %zeroType.135.exit
  %1043 = phi i64 [ 0, %zeroType.135.exit ], [ %1044, %loop.i617 ], !dbg !3440
  %1044 = add i64 %1043, 1, !dbg !3440
  %1045 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1042, i64 %1043, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1045, align 8, !dbg !3440
  %1046 = icmp eq i64 %1044, %672, !dbg !3440
  br i1 %1046, label %zeroType.139.exit, label %loop.i617, !dbg !3440

zeroType.139.exit:                                ; preds = %loop.i617
  %"box'mi_malloccache" = bitcast {} addrspace(10)* %1041 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"box'mi_malloccache", {} addrspace(10)* addrspace(10)** %"box'mi_cache", align 8, !dbg !3440, !invariant.group !3511
  %1047 = mul nuw i64 %672, 8, !dbg !3440
  %1048 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1049 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1048, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1050 = bitcast {}*** %238 to {}**, !dbg !3440
  %1051 = getelementptr inbounds {}*, {}** %1050, i64 -14, !dbg !3440
  %1052 = getelementptr inbounds {}*, {}** %1051, i64 16, !dbg !3440
  %1053 = bitcast {}** %1052 to i8**, !dbg !3440
  %1054 = load i8*, i8** %1053, align 8, !dbg !3440
  %1055 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1051, i64 %1047, {} addrspace(10)* %1049), !dbg !3440
  %1056 = bitcast {} addrspace(10)* %1055 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i618, !dbg !3440

loop.i618:                                        ; preds = %loop.i618, %zeroType.139.exit
  %1057 = phi i64 [ 0, %zeroType.139.exit ], [ %1058, %loop.i618 ], !dbg !3440
  %1058 = add i64 %1057, 1, !dbg !3440
  %1059 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1056, i64 %1057, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1059, align 8, !dbg !3440
  %1060 = icmp eq i64 %1058, %672, !dbg !3440
  br i1 %1060, label %zeroType.143.exit, label %loop.i618, !dbg !3440

zeroType.143.exit:                                ; preds = %loop.i618
  %_malloccache283 = bitcast {} addrspace(10)* %1055 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache283, {} addrspace(10)* addrspace(10)** %_cache282, align 8, !dbg !3440, !invariant.group !3512
  %1061 = mul nuw i64 %672, 8, !dbg !3440
  %1062 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1063 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1062, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1064 = bitcast {}*** %233 to {}**, !dbg !3440
  %1065 = getelementptr inbounds {}*, {}** %1064, i64 -14, !dbg !3440
  %1066 = getelementptr inbounds {}*, {}** %1065, i64 16, !dbg !3440
  %1067 = bitcast {}** %1066 to i8**, !dbg !3440
  %1068 = load i8*, i8** %1067, align 8, !dbg !3440
  %1069 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1065, i64 %1061, {} addrspace(10)* %1063), !dbg !3440
  %1070 = bitcast {} addrspace(10)* %1069 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i619, !dbg !3440

loop.i619:                                        ; preds = %loop.i619, %zeroType.143.exit
  %1071 = phi i64 [ 0, %zeroType.143.exit ], [ %1072, %loop.i619 ], !dbg !3440
  %1072 = add i64 %1071, 1, !dbg !3440
  %1073 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1070, i64 %1071, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1073, align 8, !dbg !3440
  %1074 = icmp eq i64 %1072, %672, !dbg !3440
  br i1 %1074, label %zeroType.148.exit, label %loop.i619, !dbg !3440

zeroType.148.exit:                                ; preds = %loop.i619
  %"newstruct430'mi_malloccache" = bitcast {} addrspace(10)* %1069 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"newstruct430'mi_malloccache", {} addrspace(10)* addrspace(10)** %"newstruct430'mi_cache", align 8, !dbg !3440, !invariant.group !3513
  %1075 = mul nuw i64 %672, 8, !dbg !3440
  %1076 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1077 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1076, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1078 = bitcast {}*** %229 to {}**, !dbg !3440
  %1079 = getelementptr inbounds {}*, {}** %1078, i64 -14, !dbg !3440
  %1080 = getelementptr inbounds {}*, {}** %1079, i64 16, !dbg !3440
  %1081 = bitcast {}** %1080 to i8**, !dbg !3440
  %1082 = load i8*, i8** %1081, align 8, !dbg !3440
  %1083 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1079, i64 %1075, {} addrspace(10)* %1077), !dbg !3440
  %1084 = bitcast {} addrspace(10)* %1083 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i620, !dbg !3440

loop.i620:                                        ; preds = %loop.i620, %zeroType.148.exit
  %1085 = phi i64 [ 0, %zeroType.148.exit ], [ %1086, %loop.i620 ], !dbg !3440
  %1086 = add i64 %1085, 1, !dbg !3440
  %1087 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1084, i64 %1085, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1087, align 8, !dbg !3440
  %1088 = icmp eq i64 %1086, %672, !dbg !3440
  br i1 %1088, label %zeroType.152.exit, label %loop.i620, !dbg !3440

zeroType.152.exit:                                ; preds = %loop.i620
  %_malloccache299 = bitcast {} addrspace(10)* %1083 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache299, {} addrspace(10)* addrspace(10)** %_cache298, align 8, !dbg !3440, !invariant.group !3514
  %1089 = mul nuw i64 %672, 8, !dbg !3440
  %1090 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1091 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1090, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1092 = bitcast {}*** %225 to {}**, !dbg !3440
  %1093 = getelementptr inbounds {}*, {}** %1092, i64 -14, !dbg !3440
  %1094 = getelementptr inbounds {}*, {}** %1093, i64 16, !dbg !3440
  %1095 = bitcast {}** %1094 to i8**, !dbg !3440
  %1096 = load i8*, i8** %1095, align 8, !dbg !3440
  %1097 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1093, i64 %1089, {} addrspace(10)* %1091), !dbg !3440
  %1098 = bitcast {} addrspace(10)* %1097 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i621, !dbg !3440

loop.i621:                                        ; preds = %loop.i621, %zeroType.152.exit
  %1099 = phi i64 [ 0, %zeroType.152.exit ], [ %1100, %loop.i621 ], !dbg !3440
  %1100 = add i64 %1099, 1, !dbg !3440
  %1101 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1098, i64 %1099, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1101, align 8, !dbg !3440
  %1102 = icmp eq i64 %1100, %672, !dbg !3440
  br i1 %1102, label %zeroType.156.exit, label %loop.i621, !dbg !3440

zeroType.156.exit:                                ; preds = %loop.i621
  %_malloccache302 = bitcast {} addrspace(10)* %1097 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache302, {} addrspace(10)* addrspace(10)** %_cache301, align 8, !dbg !3440, !invariant.group !3515
  %1103 = mul nuw i64 %672, 8, !dbg !3440
  %1104 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1105 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1104, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1106 = bitcast {}*** %218 to {}**, !dbg !3440
  %1107 = getelementptr inbounds {}*, {}** %1106, i64 -14, !dbg !3440
  %1108 = getelementptr inbounds {}*, {}** %1107, i64 16, !dbg !3440
  %1109 = bitcast {}** %1108 to i8**, !dbg !3440
  %1110 = load i8*, i8** %1109, align 8, !dbg !3440
  %1111 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1107, i64 %1103, {} addrspace(10)* %1105), !dbg !3440
  %1112 = bitcast {} addrspace(10)* %1111 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i622, !dbg !3440

loop.i622:                                        ; preds = %loop.i622, %zeroType.156.exit
  %1113 = phi i64 [ 0, %zeroType.156.exit ], [ %1114, %loop.i622 ], !dbg !3440
  %1114 = add i64 %1113, 1, !dbg !3440
  %1115 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1112, i64 %1113, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1115, align 8, !dbg !3440
  %1116 = icmp eq i64 %1114, %672, !dbg !3440
  br i1 %1116, label %zeroType.162.exit, label %loop.i622, !dbg !3440

zeroType.162.exit:                                ; preds = %loop.i622
  %_malloccache314 = bitcast {} addrspace(10)* %1111 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache314, {} addrspace(10)* addrspace(10)** %_cache313, align 8, !dbg !3440, !invariant.group !3516
  %1117 = mul nuw i64 %672, 8, !dbg !3440
  %1118 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1119 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1118, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1120 = bitcast {}*** %212 to {}**, !dbg !3440
  %1121 = getelementptr inbounds {}*, {}** %1120, i64 -14, !dbg !3440
  %1122 = getelementptr inbounds {}*, {}** %1121, i64 16, !dbg !3440
  %1123 = bitcast {}** %1122 to i8**, !dbg !3440
  %1124 = load i8*, i8** %1123, align 8, !dbg !3440
  %1125 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1121, i64 %1117, {} addrspace(10)* %1119), !dbg !3440
  %1126 = bitcast {} addrspace(10)* %1125 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i623, !dbg !3440

loop.i623:                                        ; preds = %loop.i623, %zeroType.162.exit
  %1127 = phi i64 [ 0, %zeroType.162.exit ], [ %1128, %loop.i623 ], !dbg !3440
  %1128 = add i64 %1127, 1, !dbg !3440
  %1129 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1126, i64 %1127, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1129, align 8, !dbg !3440
  %1130 = icmp eq i64 %1128, %672, !dbg !3440
  br i1 %1130, label %zeroType.167.exit, label %loop.i623, !dbg !3440

zeroType.167.exit:                                ; preds = %loop.i623
  %_malloccache323 = bitcast {} addrspace(10)* %1125 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache323, {} addrspace(10)* addrspace(10)** %_cache322, align 8, !dbg !3440, !invariant.group !3517
  %1131 = mul nuw i64 %672, 8, !dbg !3440
  %1132 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1133 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1132, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1134 = bitcast {}*** %208 to {}**, !dbg !3440
  %1135 = getelementptr inbounds {}*, {}** %1134, i64 -14, !dbg !3440
  %1136 = getelementptr inbounds {}*, {}** %1135, i64 16, !dbg !3440
  %1137 = bitcast {}** %1136 to i8**, !dbg !3440
  %1138 = load i8*, i8** %1137, align 8, !dbg !3440
  %1139 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1135, i64 %1131, {} addrspace(10)* %1133), !dbg !3440
  %1140 = bitcast {} addrspace(10)* %1139 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i624, !dbg !3440

loop.i624:                                        ; preds = %loop.i624, %zeroType.167.exit
  %1141 = phi i64 [ 0, %zeroType.167.exit ], [ %1142, %loop.i624 ], !dbg !3440
  %1142 = add i64 %1141, 1, !dbg !3440
  %1143 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1140, i64 %1141, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1143, align 8, !dbg !3440
  %1144 = icmp eq i64 %1142, %672, !dbg !3440
  br i1 %1144, label %zeroType.171.exit, label %loop.i624, !dbg !3440

zeroType.171.exit:                                ; preds = %loop.i624
  %_malloccache327 = bitcast {} addrspace(10)* %1139 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache327, {} addrspace(10)* addrspace(10)** %_cache326, align 8, !dbg !3440, !invariant.group !3518
  %1145 = mul nuw i64 %672, 8, !dbg !3440
  %1146 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1147 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1146, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1148 = bitcast {}*** %202 to {}**, !dbg !3440
  %1149 = getelementptr inbounds {}*, {}** %1148, i64 -14, !dbg !3440
  %1150 = getelementptr inbounds {}*, {}** %1149, i64 16, !dbg !3440
  %1151 = bitcast {}** %1150 to i8**, !dbg !3440
  %1152 = load i8*, i8** %1151, align 8, !dbg !3440
  %1153 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1149, i64 %1145, {} addrspace(10)* %1147), !dbg !3440
  %1154 = bitcast {} addrspace(10)* %1153 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i625, !dbg !3440

loop.i625:                                        ; preds = %loop.i625, %zeroType.171.exit
  %1155 = phi i64 [ 0, %zeroType.171.exit ], [ %1156, %loop.i625 ], !dbg !3440
  %1156 = add i64 %1155, 1, !dbg !3440
  %1157 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1154, i64 %1155, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1157, align 8, !dbg !3440
  %1158 = icmp eq i64 %1156, %672, !dbg !3440
  br i1 %1158, label %zeroType.177.exit, label %loop.i625, !dbg !3440

zeroType.177.exit:                                ; preds = %loop.i625
  %"'ip_phi33_malloccache" = bitcast {} addrspace(10)* %1153 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'ip_phi33_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi33_cache", align 8, !dbg !3440, !invariant.group !3519
  %1159 = mul nuw i64 %672, 8, !dbg !3440
  %1160 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1161 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1160, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1162 = bitcast {}*** %198 to {}**, !dbg !3440
  %1163 = getelementptr inbounds {}*, {}** %1162, i64 -14, !dbg !3440
  %1164 = getelementptr inbounds {}*, {}** %1163, i64 16, !dbg !3440
  %1165 = bitcast {}** %1164 to i8**, !dbg !3440
  %1166 = load i8*, i8** %1165, align 8, !dbg !3440
  %1167 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1163, i64 %1159, {} addrspace(10)* %1161), !dbg !3440
  %1168 = bitcast {} addrspace(10)* %1167 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i626, !dbg !3440

loop.i626:                                        ; preds = %loop.i626, %zeroType.177.exit
  %1169 = phi i64 [ 0, %zeroType.177.exit ], [ %1170, %loop.i626 ], !dbg !3440
  %1170 = add i64 %1169, 1, !dbg !3440
  %1171 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1168, i64 %1169, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1171, align 8, !dbg !3440
  %1172 = icmp eq i64 %1170, %672, !dbg !3440
  br i1 %1172, label %zeroType.181.exit, label %loop.i626, !dbg !3440

zeroType.181.exit:                                ; preds = %loop.i626
  %"'ip_phi36_malloccache" = bitcast {} addrspace(10)* %1167 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'ip_phi36_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi36_cache", align 8, !dbg !3440, !invariant.group !3520
  %1173 = mul nuw i64 %672, 8, !dbg !3440
  %1174 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1175 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1174, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1176 = bitcast {}*** %194 to {}**, !dbg !3440
  %1177 = getelementptr inbounds {}*, {}** %1176, i64 -14, !dbg !3440
  %1178 = getelementptr inbounds {}*, {}** %1177, i64 16, !dbg !3440
  %1179 = bitcast {}** %1178 to i8**, !dbg !3440
  %1180 = load i8*, i8** %1179, align 8, !dbg !3440
  %1181 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1177, i64 %1173, {} addrspace(10)* %1175), !dbg !3440
  %1182 = bitcast {} addrspace(10)* %1181 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i627, !dbg !3440

loop.i627:                                        ; preds = %loop.i627, %zeroType.181.exit
  %1183 = phi i64 [ 0, %zeroType.181.exit ], [ %1184, %loop.i627 ], !dbg !3440
  %1184 = add i64 %1183, 1, !dbg !3440
  %1185 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1182, i64 %1183, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1185, align 8, !dbg !3440
  %1186 = icmp eq i64 %1184, %672, !dbg !3440
  br i1 %1186, label %zeroType.185.exit, label %loop.i627, !dbg !3440

zeroType.185.exit:                                ; preds = %loop.i627
  %_malloccache343 = bitcast {} addrspace(10)* %1181 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache343, {} addrspace(10)* addrspace(10)** %_cache342, align 8, !dbg !3440, !invariant.group !3521
  %1187 = mul nuw i64 %672, 8, !dbg !3440
  %1188 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1189 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1188, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1190 = bitcast {}*** %190 to {}**, !dbg !3440
  %1191 = getelementptr inbounds {}*, {}** %1190, i64 -14, !dbg !3440
  %1192 = getelementptr inbounds {}*, {}** %1191, i64 16, !dbg !3440
  %1193 = bitcast {}** %1192 to i8**, !dbg !3440
  %1194 = load i8*, i8** %1193, align 8, !dbg !3440
  %1195 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1191, i64 %1187, {} addrspace(10)* %1189), !dbg !3440
  %1196 = bitcast {} addrspace(10)* %1195 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i628, !dbg !3440

loop.i628:                                        ; preds = %loop.i628, %zeroType.185.exit
  %1197 = phi i64 [ 0, %zeroType.185.exit ], [ %1198, %loop.i628 ], !dbg !3440
  %1198 = add i64 %1197, 1, !dbg !3440
  %1199 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1196, i64 %1197, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1199, align 8, !dbg !3440
  %1200 = icmp eq i64 %1198, %672, !dbg !3440
  br i1 %1200, label %zeroType.189.exit, label %loop.i628, !dbg !3440

zeroType.189.exit:                                ; preds = %loop.i628
  %_malloccache346 = bitcast {} addrspace(10)* %1195 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache346, {} addrspace(10)* addrspace(10)** %_cache345, align 8, !dbg !3440, !invariant.group !3522
  %1201 = mul nuw i64 %672, 1, !dbg !3440
  %1202 = call noalias nonnull i8* @malloc(i64 %1201), !dbg !3440, !enzyme_cache_alloc !3523
  %.not908.not_malloccache = bitcast i8* %1202 to i1*, !dbg !3440
  store i1* %.not908.not_malloccache, i1** %.not908.not_cache, align 1, !dbg !3440, !invariant.group !3525
  %1203 = mul nuw i64 %672, 8, !dbg !3440
  %1204 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1205 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1204, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1206 = bitcast {}*** %186 to {}**, !dbg !3440
  %1207 = getelementptr inbounds {}*, {}** %1206, i64 -14, !dbg !3440
  %1208 = getelementptr inbounds {}*, {}** %1207, i64 16, !dbg !3440
  %1209 = bitcast {}** %1208 to i8**, !dbg !3440
  %1210 = load i8*, i8** %1209, align 8, !dbg !3440
  %1211 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1207, i64 %1203, {} addrspace(10)* %1205), !dbg !3440
  %1212 = bitcast {} addrspace(10)* %1211 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i629, !dbg !3440

loop.i629:                                        ; preds = %loop.i629, %zeroType.189.exit
  %1213 = phi i64 [ 0, %zeroType.189.exit ], [ %1214, %loop.i629 ], !dbg !3440
  %1214 = add i64 %1213, 1, !dbg !3440
  %1215 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1212, i64 %1213, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1215, align 8, !dbg !3440
  %1216 = icmp eq i64 %1214, %672, !dbg !3440
  br i1 %1216, label %zeroType.193.exit, label %loop.i629, !dbg !3440

zeroType.193.exit:                                ; preds = %loop.i629
  %_malloccache362 = bitcast {} addrspace(10)* %1211 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache362, {} addrspace(10)* addrspace(10)** %_cache361, align 8, !dbg !3440, !invariant.group !3526
  %1217 = mul nuw i64 %672, 8, !dbg !3440
  %1218 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1219 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1218, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1220 = bitcast {}*** %181 to {}**, !dbg !3440
  %1221 = getelementptr inbounds {}*, {}** %1220, i64 -14, !dbg !3440
  %1222 = getelementptr inbounds {}*, {}** %1221, i64 16, !dbg !3440
  %1223 = bitcast {}** %1222 to i8**, !dbg !3440
  %1224 = load i8*, i8** %1223, align 8, !dbg !3440
  %1225 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1221, i64 %1217, {} addrspace(10)* %1219), !dbg !3440
  %1226 = bitcast {} addrspace(10)* %1225 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i630, !dbg !3440

loop.i630:                                        ; preds = %loop.i630, %zeroType.193.exit
  %1227 = phi i64 [ 0, %zeroType.193.exit ], [ %1228, %loop.i630 ], !dbg !3440
  %1228 = add i64 %1227, 1, !dbg !3440
  %1229 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1226, i64 %1227, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1229, align 8, !dbg !3440
  %1230 = icmp eq i64 %1228, %672, !dbg !3440
  br i1 %1230, label %zeroType.198.exit, label %loop.i630, !dbg !3440

zeroType.198.exit:                                ; preds = %loop.i630
  %_malloccache366 = bitcast {} addrspace(10)* %1225 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache366, {} addrspace(10)* addrspace(10)** %_cache365, align 8, !dbg !3440, !invariant.group !3527
  %1231 = mul nuw i64 %672, 24, !dbg !3440
  %1232 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1233 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1232, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6185358032 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1234 = bitcast {}*** %176 to {}**, !dbg !3440
  %1235 = getelementptr inbounds {}*, {}** %1234, i64 -14, !dbg !3440
  %1236 = getelementptr inbounds {}*, {}** %1235, i64 16, !dbg !3440
  %1237 = bitcast {}** %1236 to i8**, !dbg !3440
  %1238 = load i8*, i8** %1237, align 8, !dbg !3440
  %1239 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1235, i64 %1231, {} addrspace(10)* %1233), !dbg !3440
  %1240 = bitcast {} addrspace(10)* %1239 to { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)*, !dbg !3440
  br label %loop.i631, !dbg !3440

loop.i631:                                        ; preds = %loop.i631, %zeroType.198.exit
  %1241 = phi i64 [ 0, %zeroType.198.exit ], [ %1242, %loop.i631 ], !dbg !3440
  %1242 = add i64 %1241, 1, !dbg !3440
  %1243 = getelementptr { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %1240, i64 %1241, i32 0, !dbg !3440
  %1244 = bitcast double addrspace(13)* addrspace(10)* addrspace(10)* %1243 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1244, align 8, !dbg !3440
  %1245 = icmp eq i64 %1242, %672, !dbg !3440
  br i1 %1245, label %zeroType.205.exit, label %loop.i631, !dbg !3440

zeroType.205.exit:                                ; preds = %loop.i631
  %_augmented369_malloccache = bitcast {} addrspace(10)* %1239 to { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)*, !dbg !3440
  store { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %_augmented369_malloccache, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)** %_augmented369_cache, align 8, !dbg !3440, !invariant.group !3528
  %1246 = mul nuw i64 %672, 8, !dbg !3440
  %1247 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1248 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1247, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1249 = bitcast {}*** %172 to {}**, !dbg !3440
  %1250 = getelementptr inbounds {}*, {}** %1249, i64 -14, !dbg !3440
  %1251 = getelementptr inbounds {}*, {}** %1250, i64 16, !dbg !3440
  %1252 = bitcast {}** %1251 to i8**, !dbg !3440
  %1253 = load i8*, i8** %1252, align 8, !dbg !3440
  %1254 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1250, i64 %1246, {} addrspace(10)* %1248), !dbg !3440
  %1255 = bitcast {} addrspace(10)* %1254 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i632, !dbg !3440

loop.i632:                                        ; preds = %loop.i632, %zeroType.205.exit
  %1256 = phi i64 [ 0, %zeroType.205.exit ], [ %1257, %loop.i632 ], !dbg !3440
  %1257 = add i64 %1256, 1, !dbg !3440
  %1258 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1255, i64 %1256, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1258, align 8, !dbg !3440
  %1259 = icmp eq i64 %1257, %672, !dbg !3440
  br i1 %1259, label %zeroType.209.exit, label %loop.i632, !dbg !3440

zeroType.209.exit:                                ; preds = %loop.i632
  %"'ip_phi39_malloccache" = bitcast {} addrspace(10)* %1254 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'ip_phi39_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi39_cache", align 8, !dbg !3440, !invariant.group !3529
  %1260 = mul nuw i64 %672, 1, !dbg !3440
  %1261 = call noalias nonnull i8* @malloc(i64 %1260), !dbg !3440, !enzyme_cache_alloc !3530
  %.not918.not_malloccache = bitcast i8* %1261 to i1*, !dbg !3440
  store i1* %.not918.not_malloccache, i1** %.not918.not_cache, align 1, !dbg !3440, !invariant.group !3532
  %1262 = mul nuw i64 %672, 8, !dbg !3440
  %1263 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1264 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1263, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1265 = bitcast {}*** %166 to {}**, !dbg !3440
  %1266 = getelementptr inbounds {}*, {}** %1265, i64 -14, !dbg !3440
  %1267 = getelementptr inbounds {}*, {}** %1266, i64 16, !dbg !3440
  %1268 = bitcast {}** %1267 to i8**, !dbg !3440
  %1269 = load i8*, i8** %1268, align 8, !dbg !3440
  %1270 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1266, i64 %1262, {} addrspace(10)* %1264), !dbg !3440
  %1271 = bitcast {} addrspace(10)* %1270 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i633, !dbg !3440

loop.i633:                                        ; preds = %loop.i633, %zeroType.209.exit
  %1272 = phi i64 [ 0, %zeroType.209.exit ], [ %1273, %loop.i633 ], !dbg !3440
  %1273 = add i64 %1272, 1, !dbg !3440
  %1274 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1271, i64 %1272, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1274, align 8, !dbg !3440
  %1275 = icmp eq i64 %1273, %672, !dbg !3440
  br i1 %1275, label %zeroType.215.exit, label %loop.i633, !dbg !3440

zeroType.215.exit:                                ; preds = %loop.i633
  %_malloccache394 = bitcast {} addrspace(10)* %1270 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache394, {} addrspace(10)* addrspace(10)** %_cache393, align 8, !dbg !3440, !invariant.group !3533
  %1276 = mul nuw i64 %672, 1, !dbg !3440
  %1277 = call noalias nonnull i8* @malloc(i64 %1276), !dbg !3440, !enzyme_cache_alloc !3534
  %.not921_malloccache = bitcast i8* %1277 to i1*, !dbg !3440
  store i1* %.not921_malloccache, i1** %.not921_cache, align 1, !dbg !3440, !invariant.group !3536
  %1278 = mul nuw i64 %672, 1, !dbg !3440
  %_malloccache401 = call noalias nonnull i8* @malloc(i64 %1278), !dbg !3440, !enzyme_cache_alloc !3537
  store i8* %_malloccache401, i8** %_cache400, align 1, !dbg !3440, !invariant.group !3539
  %1279 = mul nuw i64 %672, 8, !dbg !3440
  %1280 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1281 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1280, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1282 = bitcast {}*** %161 to {}**, !dbg !3440
  %1283 = getelementptr inbounds {}*, {}** %1282, i64 -14, !dbg !3440
  %1284 = getelementptr inbounds {}*, {}** %1283, i64 16, !dbg !3440
  %1285 = bitcast {}** %1284 to i8**, !dbg !3440
  %1286 = load i8*, i8** %1285, align 8, !dbg !3440
  %1287 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1283, i64 %1279, {} addrspace(10)* %1281), !dbg !3440
  %1288 = bitcast {} addrspace(10)* %1287 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i634, !dbg !3440

loop.i634:                                        ; preds = %loop.i634, %zeroType.215.exit
  %1289 = phi i64 [ 0, %zeroType.215.exit ], [ %1290, %loop.i634 ], !dbg !3440
  %1290 = add i64 %1289, 1, !dbg !3440
  %1291 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1288, i64 %1289, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1291, align 8, !dbg !3440
  %1292 = icmp eq i64 %1290, %672, !dbg !3440
  br i1 %1292, label %zeroType.220.exit, label %loop.i634, !dbg !3440

zeroType.220.exit:                                ; preds = %loop.i634
  %_malloccache406 = bitcast {} addrspace(10)* %1287 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache406, {} addrspace(10)* addrspace(10)** %_cache405, align 8, !dbg !3440, !invariant.group !3540
  %1293 = mul nuw i64 %672, 8, !dbg !3440
  %1294 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1295 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1294, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1296 = bitcast {}*** %157 to {}**, !dbg !3440
  %1297 = getelementptr inbounds {}*, {}** %1296, i64 -14, !dbg !3440
  %1298 = getelementptr inbounds {}*, {}** %1297, i64 16, !dbg !3440
  %1299 = bitcast {}** %1298 to i8**, !dbg !3440
  %1300 = load i8*, i8** %1299, align 8, !dbg !3440
  %1301 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1297, i64 %1293, {} addrspace(10)* %1295), !dbg !3440
  %1302 = bitcast {} addrspace(10)* %1301 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i635, !dbg !3440

loop.i635:                                        ; preds = %loop.i635, %zeroType.220.exit
  %1303 = phi i64 [ 0, %zeroType.220.exit ], [ %1304, %loop.i635 ], !dbg !3440
  %1304 = add i64 %1303, 1, !dbg !3440
  %1305 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1302, i64 %1303, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1305, align 8, !dbg !3440
  %1306 = icmp eq i64 %1304, %672, !dbg !3440
  br i1 %1306, label %zeroType.224.exit, label %loop.i635, !dbg !3440

zeroType.224.exit:                                ; preds = %loop.i635
  %"'mi41_malloccache" = bitcast {} addrspace(10)* %1301 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'mi41_malloccache", {} addrspace(10)* addrspace(10)** %"'mi41_cache", align 8, !dbg !3440, !invariant.group !3541
  %1307 = mul nuw i64 %672, 248, !dbg !3440
  %1308 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1309 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1308, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6228907280 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1310 = bitcast {}*** %153 to {}**, !dbg !3440
  %1311 = getelementptr inbounds {}*, {}** %1310, i64 -14, !dbg !3440
  %1312 = getelementptr inbounds {}*, {}** %1311, i64 16, !dbg !3440
  %1313 = bitcast {}** %1312 to i8**, !dbg !3440
  %1314 = load i8*, i8** %1313, align 8, !dbg !3440
  %1315 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1311, i64 %1307, {} addrspace(10)* %1309), !dbg !3440
  %1316 = bitcast {} addrspace(10)* %1315 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3440
  br label %loop.i636, !dbg !3440

loop.i636:                                        ; preds = %loop.i636, %zeroType.224.exit
  %1317 = phi i64 [ 0, %zeroType.224.exit ], [ %1318, %loop.i636 ], !dbg !3440
  %1318 = add i64 %1317, 1, !dbg !3440
  %1319 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1316, i64 %1317, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1319, align 8, !dbg !3440
  %1320 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1316, i64 %1317, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1320, align 8, !dbg !3440
  %1321 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1316, i64 %1317, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1321, align 8, !dbg !3440
  %1322 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1316, i64 %1317, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1322, align 8, !dbg !3440
  %1323 = icmp eq i64 %1318, %672, !dbg !3440
  br i1 %1323, label %zeroType.228.exit, label %loop.i636, !dbg !3440

zeroType.228.exit:                                ; preds = %loop.i636
  %subcache411_malloccache = bitcast {} addrspace(10)* %1315 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3440
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %subcache411_malloccache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache411_cache, align 8, !dbg !3440, !invariant.group !3542
  %1324 = mul nuw i64 %672, 1, !dbg !3440
  %1325 = call noalias nonnull i8* @malloc(i64 %1324), !dbg !3440, !enzyme_cache_alloc !3543
  %.not8851018_malloccache = bitcast i8* %1325 to i1*, !dbg !3440
  store i1* %.not8851018_malloccache, i1** %.not8851018_cache, align 1, !dbg !3440, !invariant.group !3545
  %1326 = mul nuw i64 %672, 8, !dbg !3440
  %1327 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1328 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1327, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1329 = bitcast {}*** %149 to {}**, !dbg !3440
  %1330 = getelementptr inbounds {}*, {}** %1329, i64 -14, !dbg !3440
  %1331 = getelementptr inbounds {}*, {}** %1330, i64 16, !dbg !3440
  %1332 = bitcast {}** %1331 to i8**, !dbg !3440
  %1333 = load i8*, i8** %1332, align 8, !dbg !3440
  %1334 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1330, i64 %1326, {} addrspace(10)* %1328), !dbg !3440
  %1335 = bitcast {} addrspace(10)* %1334 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i637, !dbg !3440

loop.i637:                                        ; preds = %loop.i637, %zeroType.228.exit
  %1336 = phi i64 [ 0, %zeroType.228.exit ], [ %1337, %loop.i637 ], !dbg !3440
  %1337 = add i64 %1336, 1, !dbg !3440
  %1338 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1335, i64 %1336, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1338, align 8, !dbg !3440
  %1339 = icmp eq i64 %1337, %672, !dbg !3440
  br i1 %1339, label %zeroType.232.exit, label %loop.i637, !dbg !3440

zeroType.232.exit:                                ; preds = %loop.i637
  %_malloccache420 = bitcast {} addrspace(10)* %1334 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache420, {} addrspace(10)* addrspace(10)** %_cache419, align 8, !dbg !3440, !invariant.group !3546
  %1340 = mul nuw i64 %672, 8, !dbg !3440
  %1341 = call noalias nonnull i8* @malloc(i64 %1340), !dbg !3440, !enzyme_cache_alloc !3547
  %value_phi523_malloccache = bitcast i8* %1341 to i64**, !dbg !3440
  store i64** %value_phi523_malloccache, i64*** %value_phi523_cache, align 8, !dbg !3440, !invariant.group !3549
  %1342 = mul nuw i64 %672, 8, !dbg !3440
  %1343 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1344 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1343, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1345 = bitcast {}*** %144 to {}**, !dbg !3440
  %1346 = getelementptr inbounds {}*, {}** %1345, i64 -14, !dbg !3440
  %1347 = getelementptr inbounds {}*, {}** %1346, i64 16, !dbg !3440
  %1348 = bitcast {}** %1347 to i8**, !dbg !3440
  %1349 = load i8*, i8** %1348, align 8, !dbg !3440
  %1350 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1346, i64 %1342, {} addrspace(10)* %1344), !dbg !3440
  %1351 = bitcast {} addrspace(10)* %1350 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i638, !dbg !3440

loop.i638:                                        ; preds = %loop.i638, %zeroType.232.exit
  %1352 = phi i64 [ 0, %zeroType.232.exit ], [ %1353, %loop.i638 ], !dbg !3440
  %1353 = add i64 %1352, 1, !dbg !3440
  %1354 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1351, i64 %1352, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1354, align 8, !dbg !3440
  %1355 = icmp eq i64 %1353, %672, !dbg !3440
  br i1 %1355, label %zeroType.237.exit, label %loop.i638, !dbg !3440

zeroType.237.exit:                                ; preds = %loop.i638
  %_malloccache447 = bitcast {} addrspace(10)* %1350 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache447, {} addrspace(10)* addrspace(10)** %_cache446, align 8, !dbg !3440, !invariant.group !3550
  %1356 = mul nuw i64 %672, 8, !dbg !3440
  %1357 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1358 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1357, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1359 = bitcast {}*** %140 to {}**, !dbg !3440
  %1360 = getelementptr inbounds {}*, {}** %1359, i64 -14, !dbg !3440
  %1361 = getelementptr inbounds {}*, {}** %1360, i64 16, !dbg !3440
  %1362 = bitcast {}** %1361 to i8**, !dbg !3440
  %1363 = load i8*, i8** %1362, align 8, !dbg !3440
  %1364 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1360, i64 %1356, {} addrspace(10)* %1358), !dbg !3440
  %1365 = bitcast {} addrspace(10)* %1364 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i639, !dbg !3440

loop.i639:                                        ; preds = %loop.i639, %zeroType.237.exit
  %1366 = phi i64 [ 0, %zeroType.237.exit ], [ %1367, %loop.i639 ], !dbg !3440
  %1367 = add i64 %1366, 1, !dbg !3440
  %1368 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1365, i64 %1366, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1368, align 8, !dbg !3440
  %1369 = icmp eq i64 %1367, %672, !dbg !3440
  br i1 %1369, label %zeroType.241.exit, label %loop.i639, !dbg !3440

zeroType.241.exit:                                ; preds = %loop.i639
  %_malloccache451 = bitcast {} addrspace(10)* %1364 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache451, {} addrspace(10)* addrspace(10)** %_cache450, align 8, !dbg !3440, !invariant.group !3551
  %1370 = mul nuw i64 %672, 8, !dbg !3440
  %1371 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1372 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1371, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1373 = bitcast {}*** %136 to {}**, !dbg !3440
  %1374 = getelementptr inbounds {}*, {}** %1373, i64 -14, !dbg !3440
  %1375 = getelementptr inbounds {}*, {}** %1374, i64 16, !dbg !3440
  %1376 = bitcast {}** %1375 to i8**, !dbg !3440
  %1377 = load i8*, i8** %1376, align 8, !dbg !3440
  %1378 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1374, i64 %1370, {} addrspace(10)* %1372), !dbg !3440
  %1379 = bitcast {} addrspace(10)* %1378 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i640, !dbg !3440

loop.i640:                                        ; preds = %loop.i640, %zeroType.241.exit
  %1380 = phi i64 [ 0, %zeroType.241.exit ], [ %1381, %loop.i640 ], !dbg !3440
  %1381 = add i64 %1380, 1, !dbg !3440
  %1382 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1379, i64 %1380, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1382, align 8, !dbg !3440
  %1383 = icmp eq i64 %1381, %672, !dbg !3440
  br i1 %1383, label %zeroType.245.exit, label %loop.i640, !dbg !3440

zeroType.245.exit:                                ; preds = %loop.i640
  %"'mi53_malloccache" = bitcast {} addrspace(10)* %1378 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'mi53_malloccache", {} addrspace(10)* addrspace(10)** %"'mi53_cache", align 8, !dbg !3440, !invariant.group !3552
  %1384 = mul nuw i64 %672, 248, !dbg !3440
  %1385 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1386 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1385, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6228907280 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1387 = bitcast {}*** %132 to {}**, !dbg !3440
  %1388 = getelementptr inbounds {}*, {}** %1387, i64 -14, !dbg !3440
  %1389 = getelementptr inbounds {}*, {}** %1388, i64 16, !dbg !3440
  %1390 = bitcast {}** %1389 to i8**, !dbg !3440
  %1391 = load i8*, i8** %1390, align 8, !dbg !3440
  %1392 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1388, i64 %1384, {} addrspace(10)* %1386), !dbg !3440
  %1393 = bitcast {} addrspace(10)* %1392 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3440
  br label %loop.i641, !dbg !3440

loop.i641:                                        ; preds = %loop.i641, %zeroType.245.exit
  %1394 = phi i64 [ 0, %zeroType.245.exit ], [ %1395, %loop.i641 ], !dbg !3440
  %1395 = add i64 %1394, 1, !dbg !3440
  %1396 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1393, i64 %1394, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1396, align 8, !dbg !3440
  %1397 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1393, i64 %1394, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1397, align 8, !dbg !3440
  %1398 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1393, i64 %1394, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1398, align 8, !dbg !3440
  %1399 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1393, i64 %1394, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1399, align 8, !dbg !3440
  %1400 = icmp eq i64 %1395, %672, !dbg !3440
  br i1 %1400, label %zeroType.249.exit, label %loop.i641, !dbg !3440

zeroType.249.exit:                                ; preds = %loop.i641
  %subcache455_malloccache = bitcast {} addrspace(10)* %1392 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3440
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %subcache455_malloccache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache455_cache, align 8, !dbg !3440, !invariant.group !3553
  %1401 = mul nuw i64 %672, 8, !dbg !3440
  %1402 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1403 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1402, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1404 = bitcast {}*** %128 to {}**, !dbg !3440
  %1405 = getelementptr inbounds {}*, {}** %1404, i64 -14, !dbg !3440
  %1406 = getelementptr inbounds {}*, {}** %1405, i64 16, !dbg !3440
  %1407 = bitcast {}** %1406 to i8**, !dbg !3440
  %1408 = load i8*, i8** %1407, align 8, !dbg !3440
  %1409 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1405, i64 %1401, {} addrspace(10)* %1403), !dbg !3440
  %1410 = bitcast {} addrspace(10)* %1409 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i642, !dbg !3440

loop.i642:                                        ; preds = %loop.i642, %zeroType.249.exit
  %1411 = phi i64 [ 0, %zeroType.249.exit ], [ %1412, %loop.i642 ], !dbg !3440
  %1412 = add i64 %1411, 1, !dbg !3440
  %1413 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1410, i64 %1411, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1413, align 8, !dbg !3440
  %1414 = icmp eq i64 %1412, %672, !dbg !3440
  br i1 %1414, label %zeroType.253.exit, label %loop.i642, !dbg !3440

zeroType.253.exit:                                ; preds = %loop.i642
  %_malloccache459 = bitcast {} addrspace(10)* %1409 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache459, {} addrspace(10)* addrspace(10)** %_cache458, align 8, !dbg !3440, !invariant.group !3554
  %1415 = mul nuw i64 %672, 264, !dbg !3440
  %1416 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1417 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1416, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6232407248 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1418 = bitcast {}*** %124 to {}**, !dbg !3440
  %1419 = getelementptr inbounds {}*, {}** %1418, i64 -14, !dbg !3440
  %1420 = getelementptr inbounds {}*, {}** %1419, i64 16, !dbg !3440
  %1421 = bitcast {}** %1420 to i8**, !dbg !3440
  %1422 = load i8*, i8** %1421, align 8, !dbg !3440
  %1423 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1419, i64 %1415, {} addrspace(10)* %1417), !dbg !3440
  %1424 = bitcast {} addrspace(10)* %1423 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3440
  br label %loop.i643, !dbg !3440

loop.i643:                                        ; preds = %loop.i643, %zeroType.253.exit
  %1425 = phi i64 [ 0, %zeroType.253.exit ], [ %1426, %loop.i643 ], !dbg !3440
  %1426 = add i64 %1425, 1, !dbg !3440
  %1427 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1424, i64 %1425, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1427, align 8, !dbg !3440
  %1428 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1424, i64 %1425, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1428, align 8, !dbg !3440
  %1429 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1424, i64 %1425, i32 0, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1429, align 8, !dbg !3440
  %1430 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1424, i64 %1425, i32 0, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1430, align 8, !dbg !3440
  %1431 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1424, i64 %1425, i32 0, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1431, align 8, !dbg !3440
  %1432 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1424, i64 %1425, i32 0, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1432, align 8, !dbg !3440
  %1433 = icmp eq i64 %1426, %672, !dbg !3440
  br i1 %1433, label %zeroType.257.exit, label %loop.i643, !dbg !3440

zeroType.257.exit:                                ; preds = %loop.i643
  %_augmented410_malloccache = bitcast {} addrspace(10)* %1423 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3440
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %_augmented410_malloccache, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented410_cache, align 8, !dbg !3440, !invariant.group !3555
  %1434 = mul nuw i64 %672, 8, !dbg !3440
  %1435 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1436 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1435, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1437 = bitcast {}*** %120 to {}**, !dbg !3440
  %1438 = getelementptr inbounds {}*, {}** %1437, i64 -14, !dbg !3440
  %1439 = getelementptr inbounds {}*, {}** %1438, i64 16, !dbg !3440
  %1440 = bitcast {}** %1439 to i8**, !dbg !3440
  %1441 = load i8*, i8** %1440, align 8, !dbg !3440
  %1442 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1438, i64 %1434, {} addrspace(10)* %1436), !dbg !3440
  %1443 = bitcast {} addrspace(10)* %1442 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i644, !dbg !3440

loop.i644:                                        ; preds = %loop.i644, %zeroType.257.exit
  %1444 = phi i64 [ 0, %zeroType.257.exit ], [ %1445, %loop.i644 ], !dbg !3440
  %1445 = add i64 %1444, 1, !dbg !3440
  %1446 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1443, i64 %1444, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1446, align 8, !dbg !3440
  %1447 = icmp eq i64 %1445, %672, !dbg !3440
  br i1 %1447, label %zeroType.261.exit, label %loop.i644, !dbg !3440

zeroType.261.exit:                                ; preds = %loop.i644
  %_malloccache463 = bitcast {} addrspace(10)* %1442 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache463, {} addrspace(10)* addrspace(10)** %_cache462, align 8, !dbg !3440, !invariant.group !3556
  %1448 = mul nuw i64 %672, 8, !dbg !3440
  %1449 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1450 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1449, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1451 = bitcast {}*** %116 to {}**, !dbg !3440
  %1452 = getelementptr inbounds {}*, {}** %1451, i64 -14, !dbg !3440
  %1453 = getelementptr inbounds {}*, {}** %1452, i64 16, !dbg !3440
  %1454 = bitcast {}** %1453 to i8**, !dbg !3440
  %1455 = load i8*, i8** %1454, align 8, !dbg !3440
  %1456 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1452, i64 %1448, {} addrspace(10)* %1450), !dbg !3440
  %1457 = bitcast {} addrspace(10)* %1456 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i645, !dbg !3440

loop.i645:                                        ; preds = %loop.i645, %zeroType.261.exit
  %1458 = phi i64 [ 0, %zeroType.261.exit ], [ %1459, %loop.i645 ], !dbg !3440
  %1459 = add i64 %1458, 1, !dbg !3440
  %1460 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1457, i64 %1458, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1460, align 8, !dbg !3440
  %1461 = icmp eq i64 %1459, %672, !dbg !3440
  br i1 %1461, label %zeroType.265.exit, label %loop.i645, !dbg !3440

zeroType.265.exit:                                ; preds = %loop.i645
  %"'ip_phi50_malloccache" = bitcast {} addrspace(10)* %1456 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'ip_phi50_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi50_cache", align 8, !dbg !3440, !invariant.group !3557
  %1462 = mul nuw i64 %672, 64, !dbg !3440
  %1463 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1464 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1463, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6187437136 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1465 = bitcast {}*** %112 to {}**, !dbg !3440
  %1466 = getelementptr inbounds {}*, {}** %1465, i64 -14, !dbg !3440
  %1467 = getelementptr inbounds {}*, {}** %1466, i64 16, !dbg !3440
  %1468 = bitcast {}** %1467 to i8**, !dbg !3440
  %1469 = load i8*, i8** %1468, align 8, !dbg !3440
  %1470 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1466, i64 %1462, {} addrspace(10)* %1464), !dbg !3440
  %1471 = bitcast {} addrspace(10)* %1470 to { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, !dbg !3440
  br label %loop.i646, !dbg !3440

loop.i646:                                        ; preds = %loop.i646, %zeroType.265.exit
  %1472 = phi i64 [ 0, %zeroType.265.exit ], [ %1473, %loop.i646 ], !dbg !3440
  %1473 = add i64 %1472, 1, !dbg !3440
  %1474 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1471, i64 %1472, i32 0, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1474, align 8, !dbg !3440
  %1475 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1471, i64 %1472, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1475, align 8, !dbg !3440
  %1476 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1471, i64 %1472, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1476, align 8, !dbg !3440
  %1477 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1471, i64 %1472, i32 3, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1477, align 8, !dbg !3440
  %1478 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1471, i64 %1472, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1478, align 8, !dbg !3440
  %1479 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1471, i64 %1472, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1479, align 8, !dbg !3440
  %1480 = icmp eq i64 %1473, %672, !dbg !3440
  br i1 %1480, label %zeroType.269.exit, label %loop.i646, !dbg !3440

zeroType.269.exit:                                ; preds = %loop.i646
  %subcache467_malloccache = bitcast {} addrspace(10)* %1470 to { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, !dbg !3440
  store { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %subcache467_malloccache, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache467_cache, align 8, !dbg !3440, !invariant.group !3558
  %1481 = mul nuw i64 %672, 8, !dbg !3440
  %1482 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1483 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1482, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1484 = bitcast {}*** %108 to {}**, !dbg !3440
  %1485 = getelementptr inbounds {}*, {}** %1484, i64 -14, !dbg !3440
  %1486 = getelementptr inbounds {}*, {}** %1485, i64 16, !dbg !3440
  %1487 = bitcast {}** %1486 to i8**, !dbg !3440
  %1488 = load i8*, i8** %1487, align 8, !dbg !3440
  %1489 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1485, i64 %1481, {} addrspace(10)* %1483), !dbg !3440
  %1490 = bitcast {} addrspace(10)* %1489 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i647, !dbg !3440

loop.i647:                                        ; preds = %loop.i647, %zeroType.269.exit
  %1491 = phi i64 [ 0, %zeroType.269.exit ], [ %1492, %loop.i647 ], !dbg !3440
  %1492 = add i64 %1491, 1, !dbg !3440
  %1493 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1490, i64 %1491, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1493, align 8, !dbg !3440
  %1494 = icmp eq i64 %1492, %672, !dbg !3440
  br i1 %1494, label %zeroType.273.exit, label %loop.i647, !dbg !3440

zeroType.273.exit:                                ; preds = %loop.i647
  %_malloccache471 = bitcast {} addrspace(10)* %1489 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache471, {} addrspace(10)* addrspace(10)** %_cache470, align 8, !dbg !3440, !invariant.group !3559
  %1495 = mul nuw i64 %672, 8, !dbg !3440
  %1496 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1497 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1496, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1498 = bitcast {}*** %104 to {}**, !dbg !3440
  %1499 = getelementptr inbounds {}*, {}** %1498, i64 -14, !dbg !3440
  %1500 = getelementptr inbounds {}*, {}** %1499, i64 16, !dbg !3440
  %1501 = bitcast {}** %1500 to i8**, !dbg !3440
  %1502 = load i8*, i8** %1501, align 8, !dbg !3440
  %1503 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1499, i64 %1495, {} addrspace(10)* %1497), !dbg !3440
  %1504 = bitcast {} addrspace(10)* %1503 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i648, !dbg !3440

loop.i648:                                        ; preds = %loop.i648, %zeroType.273.exit
  %1505 = phi i64 [ 0, %zeroType.273.exit ], [ %1506, %loop.i648 ], !dbg !3440
  %1506 = add i64 %1505, 1, !dbg !3440
  %1507 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1504, i64 %1505, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1507, align 8, !dbg !3440
  %1508 = icmp eq i64 %1506, %672, !dbg !3440
  br i1 %1508, label %zeroType.277.exit, label %loop.i648, !dbg !3440

zeroType.277.exit:                                ; preds = %loop.i648
  %"'mi49_malloccache" = bitcast {} addrspace(10)* %1503 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'mi49_malloccache", {} addrspace(10)* addrspace(10)** %"'mi49_cache", align 8, !dbg !3440, !invariant.group !3560
  %1509 = mul nuw i64 %672, 8, !dbg !3440
  %1510 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1511 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1510, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1512 = bitcast {}*** %100 to {}**, !dbg !3440
  %1513 = getelementptr inbounds {}*, {}** %1512, i64 -14, !dbg !3440
  %1514 = getelementptr inbounds {}*, {}** %1513, i64 16, !dbg !3440
  %1515 = bitcast {}** %1514 to i8**, !dbg !3440
  %1516 = load i8*, i8** %1515, align 8, !dbg !3440
  %1517 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1513, i64 %1509, {} addrspace(10)* %1511), !dbg !3440
  %1518 = bitcast {} addrspace(10)* %1517 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i649, !dbg !3440

loop.i649:                                        ; preds = %loop.i649, %zeroType.277.exit
  %1519 = phi i64 [ 0, %zeroType.277.exit ], [ %1520, %loop.i649 ], !dbg !3440
  %1520 = add i64 %1519, 1, !dbg !3440
  %1521 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1518, i64 %1519, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1521, align 8, !dbg !3440
  %1522 = icmp eq i64 %1520, %672, !dbg !3440
  br i1 %1522, label %zeroType.281.exit, label %loop.i649, !dbg !3440

zeroType.281.exit:                                ; preds = %loop.i649
  %_malloccache475 = bitcast {} addrspace(10)* %1517 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache475, {} addrspace(10)* addrspace(10)** %_cache474, align 8, !dbg !3440, !invariant.group !3561
  %1523 = mul nuw i64 %672, 248, !dbg !3440
  %1524 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1525 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1524, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6228907280 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1526 = bitcast {}*** %95 to {}**, !dbg !3440
  %1527 = getelementptr inbounds {}*, {}** %1526, i64 -14, !dbg !3440
  %1528 = getelementptr inbounds {}*, {}** %1527, i64 16, !dbg !3440
  %1529 = bitcast {}** %1528 to i8**, !dbg !3440
  %1530 = load i8*, i8** %1529, align 8, !dbg !3440
  %1531 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1527, i64 %1523, {} addrspace(10)* %1525), !dbg !3440
  %1532 = bitcast {} addrspace(10)* %1531 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3440
  br label %loop.i650, !dbg !3440

loop.i650:                                        ; preds = %loop.i650, %zeroType.281.exit
  %1533 = phi i64 [ 0, %zeroType.281.exit ], [ %1534, %loop.i650 ], !dbg !3440
  %1534 = add i64 %1533, 1, !dbg !3440
  %1535 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1532, i64 %1533, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1535, align 8, !dbg !3440
  %1536 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1532, i64 %1533, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1536, align 8, !dbg !3440
  %1537 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1532, i64 %1533, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1537, align 8, !dbg !3440
  %1538 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1532, i64 %1533, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1538, align 8, !dbg !3440
  %1539 = icmp eq i64 %1534, %672, !dbg !3440
  br i1 %1539, label %zeroType.286.exit, label %loop.i650, !dbg !3440

zeroType.286.exit:                                ; preds = %loop.i650
  %subcache478_malloccache = bitcast {} addrspace(10)* %1531 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3440
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %subcache478_malloccache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache478_cache, align 8, !dbg !3440, !invariant.group !3562
  %1540 = mul nuw i64 %672, 8, !dbg !3440
  %1541 = call noalias nonnull i8* @malloc(i64 %1540), !dbg !3440, !enzyme_cache_alloc !3563
  %value_phi579_malloccache = bitcast i8* %1541 to i64**, !dbg !3440
  store i64** %value_phi579_malloccache, i64*** %value_phi579_cache, align 8, !dbg !3440, !invariant.group !3565
  %1542 = mul nuw i64 %672, 8, !dbg !3440
  %1543 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1544 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1543, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1545 = bitcast {}*** %90 to {}**, !dbg !3440
  %1546 = getelementptr inbounds {}*, {}** %1545, i64 -14, !dbg !3440
  %1547 = getelementptr inbounds {}*, {}** %1546, i64 16, !dbg !3440
  %1548 = bitcast {}** %1547 to i8**, !dbg !3440
  %1549 = load i8*, i8** %1548, align 8, !dbg !3440
  %1550 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1546, i64 %1542, {} addrspace(10)* %1544), !dbg !3440
  %1551 = bitcast {} addrspace(10)* %1550 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i651, !dbg !3440

loop.i651:                                        ; preds = %loop.i651, %zeroType.286.exit
  %1552 = phi i64 [ 0, %zeroType.286.exit ], [ %1553, %loop.i651 ], !dbg !3440
  %1553 = add i64 %1552, 1, !dbg !3440
  %1554 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1551, i64 %1552, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1554, align 8, !dbg !3440
  %1555 = icmp eq i64 %1553, %672, !dbg !3440
  br i1 %1555, label %zeroType.291.exit, label %loop.i651, !dbg !3440

zeroType.291.exit:                                ; preds = %loop.i651
  %_malloccache513 = bitcast {} addrspace(10)* %1550 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache513, {} addrspace(10)* addrspace(10)** %_cache512, align 8, !dbg !3440, !invariant.group !3566
  %1556 = mul nuw i64 %672, 8, !dbg !3440
  %1557 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1558 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1557, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1559 = bitcast {}*** %86 to {}**, !dbg !3440
  %1560 = getelementptr inbounds {}*, {}** %1559, i64 -14, !dbg !3440
  %1561 = getelementptr inbounds {}*, {}** %1560, i64 16, !dbg !3440
  %1562 = bitcast {}** %1561 to i8**, !dbg !3440
  %1563 = load i8*, i8** %1562, align 8, !dbg !3440
  %1564 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1560, i64 %1556, {} addrspace(10)* %1558), !dbg !3440
  %1565 = bitcast {} addrspace(10)* %1564 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i652, !dbg !3440

loop.i652:                                        ; preds = %loop.i652, %zeroType.291.exit
  %1566 = phi i64 [ 0, %zeroType.291.exit ], [ %1567, %loop.i652 ], !dbg !3440
  %1567 = add i64 %1566, 1, !dbg !3440
  %1568 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1565, i64 %1566, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1568, align 8, !dbg !3440
  %1569 = icmp eq i64 %1567, %672, !dbg !3440
  br i1 %1569, label %zeroType.295.exit, label %loop.i652, !dbg !3440

zeroType.295.exit:                                ; preds = %loop.i652
  %"'ip_phi63_malloccache" = bitcast {} addrspace(10)* %1564 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'ip_phi63_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi63_cache", align 8, !dbg !3440, !invariant.group !3567
  %1570 = mul nuw i64 %672, 360, !dbg !3440
  %1571 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1572 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1571, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6187972176 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1573 = bitcast {}*** %82 to {}**, !dbg !3440
  %1574 = getelementptr inbounds {}*, {}** %1573, i64 -14, !dbg !3440
  %1575 = getelementptr inbounds {}*, {}** %1574, i64 16, !dbg !3440
  %1576 = bitcast {}** %1575 to i8**, !dbg !3440
  %1577 = load i8*, i8** %1576, align 8, !dbg !3440
  %1578 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1574, i64 %1570, {} addrspace(10)* %1572), !dbg !3440
  %1579 = bitcast {} addrspace(10)* %1578 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)*, !dbg !3440
  br label %loop.i653, !dbg !3440

loop.i653:                                        ; preds = %loop.i653, %zeroType.295.exit
  %1580 = phi i64 [ 0, %zeroType.295.exit ], [ %1581, %loop.i653 ], !dbg !3440
  %1581 = add i64 %1580, 1, !dbg !3440
  %1582 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1579, i64 %1580, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1582, align 8, !dbg !3440
  %1583 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1579, i64 %1580, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1583, align 8, !dbg !3440
  %1584 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1579, i64 %1580, i32 3, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1584, align 8, !dbg !3440
  %1585 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1579, i64 %1580, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1585, align 8, !dbg !3440
  %1586 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1579, i64 %1580, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1586, align 8, !dbg !3440
  %1587 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1579, i64 %1580, i32 8, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1587, align 8, !dbg !3440
  %1588 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1579, i64 %1580, i32 0, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1588, align 8, !dbg !3440
  %1589 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1579, i64 %1580, i32 0, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1589, align 8, !dbg !3440
  %1590 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1579, i64 %1580, i32 0, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1590, align 8, !dbg !3440
  %1591 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %1579, i64 %1580, i32 0, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1591, align 8, !dbg !3440
  %1592 = icmp eq i64 %1581, %672, !dbg !3440
  br i1 %1592, label %zeroType.299.exit, label %loop.i653, !dbg !3440

zeroType.299.exit:                                ; preds = %loop.i653
  %subcache518_malloccache = bitcast {} addrspace(10)* %1578 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)*, !dbg !3440
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %subcache518_malloccache, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)** %subcache518_cache, align 8, !dbg !3440, !invariant.group !3568
  %1593 = mul nuw i64 %672, 8, !dbg !3440
  %1594 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1595 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1594, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1596 = bitcast {}*** %78 to {}**, !dbg !3440
  %1597 = getelementptr inbounds {}*, {}** %1596, i64 -14, !dbg !3440
  %1598 = getelementptr inbounds {}*, {}** %1597, i64 16, !dbg !3440
  %1599 = bitcast {}** %1598 to i8**, !dbg !3440
  %1600 = load i8*, i8** %1599, align 8, !dbg !3440
  %1601 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1597, i64 %1593, {} addrspace(10)* %1595), !dbg !3440
  %1602 = bitcast {} addrspace(10)* %1601 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i654, !dbg !3440

loop.i654:                                        ; preds = %loop.i654, %zeroType.299.exit
  %1603 = phi i64 [ 0, %zeroType.299.exit ], [ %1604, %loop.i654 ], !dbg !3440
  %1604 = add i64 %1603, 1, !dbg !3440
  %1605 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1602, i64 %1603, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1605, align 8, !dbg !3440
  %1606 = icmp eq i64 %1604, %672, !dbg !3440
  br i1 %1606, label %zeroType.303.exit, label %loop.i654, !dbg !3440

zeroType.303.exit:                                ; preds = %loop.i654
  %_malloccache522 = bitcast {} addrspace(10)* %1601 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache522, {} addrspace(10)* addrspace(10)** %_cache521, align 8, !dbg !3440, !invariant.group !3569
  %1607 = mul nuw i64 %672, 264, !dbg !3440
  %1608 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1609 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1608, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6232407248 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1610 = bitcast {}*** %74 to {}**, !dbg !3440
  %1611 = getelementptr inbounds {}*, {}** %1610, i64 -14, !dbg !3440
  %1612 = getelementptr inbounds {}*, {}** %1611, i64 16, !dbg !3440
  %1613 = bitcast {}** %1612 to i8**, !dbg !3440
  %1614 = load i8*, i8** %1613, align 8, !dbg !3440
  %1615 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1611, i64 %1607, {} addrspace(10)* %1609), !dbg !3440
  %1616 = bitcast {} addrspace(10)* %1615 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3440
  br label %loop.i655, !dbg !3440

loop.i655:                                        ; preds = %loop.i655, %zeroType.303.exit
  %1617 = phi i64 [ 0, %zeroType.303.exit ], [ %1618, %loop.i655 ], !dbg !3440
  %1618 = add i64 %1617, 1, !dbg !3440
  %1619 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1616, i64 %1617, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1619, align 8, !dbg !3440
  %1620 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1616, i64 %1617, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1620, align 8, !dbg !3440
  %1621 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1616, i64 %1617, i32 0, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1621, align 8, !dbg !3440
  %1622 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1616, i64 %1617, i32 0, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1622, align 8, !dbg !3440
  %1623 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1616, i64 %1617, i32 0, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1623, align 8, !dbg !3440
  %1624 = getelementptr { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1616, i64 %1617, i32 0, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1624, align 8, !dbg !3440
  %1625 = icmp eq i64 %1618, %672, !dbg !3440
  br i1 %1625, label %zeroType.307.exit, label %loop.i655, !dbg !3440

zeroType.307.exit:                                ; preds = %loop.i655
  %_augmented454_malloccache = bitcast {} addrspace(10)* %1615 to { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, !dbg !3440
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %_augmented454_malloccache, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented454_cache, align 8, !dbg !3440, !invariant.group !3570
  %1626 = mul nuw i64 %672, 8, !dbg !3440
  %1627 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1628 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1627, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1629 = bitcast {}*** %70 to {}**, !dbg !3440
  %1630 = getelementptr inbounds {}*, {}** %1629, i64 -14, !dbg !3440
  %1631 = getelementptr inbounds {}*, {}** %1630, i64 16, !dbg !3440
  %1632 = bitcast {}** %1631 to i8**, !dbg !3440
  %1633 = load i8*, i8** %1632, align 8, !dbg !3440
  %1634 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1630, i64 %1626, {} addrspace(10)* %1628), !dbg !3440
  %1635 = bitcast {} addrspace(10)* %1634 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i656, !dbg !3440

loop.i656:                                        ; preds = %loop.i656, %zeroType.307.exit
  %1636 = phi i64 [ 0, %zeroType.307.exit ], [ %1637, %loop.i656 ], !dbg !3440
  %1637 = add i64 %1636, 1, !dbg !3440
  %1638 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1635, i64 %1636, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1638, align 8, !dbg !3440
  %1639 = icmp eq i64 %1637, %672, !dbg !3440
  br i1 %1639, label %zeroType.311.exit, label %loop.i656, !dbg !3440

zeroType.311.exit:                                ; preds = %loop.i656
  %_malloccache526 = bitcast {} addrspace(10)* %1634 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache526, {} addrspace(10)* addrspace(10)** %_cache525, align 8, !dbg !3440, !invariant.group !3571
  %1640 = mul nuw i64 %672, 8, !dbg !3440
  %1641 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1642 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1641, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1643 = bitcast {}*** %66 to {}**, !dbg !3440
  %1644 = getelementptr inbounds {}*, {}** %1643, i64 -14, !dbg !3440
  %1645 = getelementptr inbounds {}*, {}** %1644, i64 16, !dbg !3440
  %1646 = bitcast {}** %1645 to i8**, !dbg !3440
  %1647 = load i8*, i8** %1646, align 8, !dbg !3440
  %1648 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1644, i64 %1640, {} addrspace(10)* %1642), !dbg !3440
  %1649 = bitcast {} addrspace(10)* %1648 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i657, !dbg !3440

loop.i657:                                        ; preds = %loop.i657, %zeroType.311.exit
  %1650 = phi i64 [ 0, %zeroType.311.exit ], [ %1651, %loop.i657 ], !dbg !3440
  %1651 = add i64 %1650, 1, !dbg !3440
  %1652 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1649, i64 %1650, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1652, align 8, !dbg !3440
  %1653 = icmp eq i64 %1651, %672, !dbg !3440
  br i1 %1653, label %zeroType.315.exit, label %loop.i657, !dbg !3440

zeroType.315.exit:                                ; preds = %loop.i657
  %"'ip_phi62_malloccache" = bitcast {} addrspace(10)* %1648 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'ip_phi62_malloccache", {} addrspace(10)* addrspace(10)** %"'ip_phi62_cache", align 8, !dbg !3440, !invariant.group !3572
  %1654 = mul nuw i64 %672, 64, !dbg !3440
  %1655 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1656 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1655, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6187437136 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1657 = bitcast {}*** %62 to {}**, !dbg !3440
  %1658 = getelementptr inbounds {}*, {}** %1657, i64 -14, !dbg !3440
  %1659 = getelementptr inbounds {}*, {}** %1658, i64 16, !dbg !3440
  %1660 = bitcast {}** %1659 to i8**, !dbg !3440
  %1661 = load i8*, i8** %1660, align 8, !dbg !3440
  %1662 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1658, i64 %1654, {} addrspace(10)* %1656), !dbg !3440
  %1663 = bitcast {} addrspace(10)* %1662 to { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, !dbg !3440
  br label %loop.i658, !dbg !3440

loop.i658:                                        ; preds = %loop.i658, %zeroType.315.exit
  %1664 = phi i64 [ 0, %zeroType.315.exit ], [ %1665, %loop.i658 ], !dbg !3440
  %1665 = add i64 %1664, 1, !dbg !3440
  %1666 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1663, i64 %1664, i32 0, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1666, align 8, !dbg !3440
  %1667 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1663, i64 %1664, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1667, align 8, !dbg !3440
  %1668 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1663, i64 %1664, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1668, align 8, !dbg !3440
  %1669 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1663, i64 %1664, i32 3, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1669, align 8, !dbg !3440
  %1670 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1663, i64 %1664, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1670, align 8, !dbg !3440
  %1671 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %1663, i64 %1664, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1671, align 8, !dbg !3440
  %1672 = icmp eq i64 %1665, %672, !dbg !3440
  br i1 %1672, label %zeroType.319.exit, label %loop.i658, !dbg !3440

zeroType.319.exit:                                ; preds = %loop.i658
  %subcache530_malloccache = bitcast {} addrspace(10)* %1662 to { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, !dbg !3440
  store { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %subcache530_malloccache, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache530_cache, align 8, !dbg !3440, !invariant.group !3573
  %1673 = mul nuw i64 %672, 8, !dbg !3440
  %1674 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1675 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1674, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1676 = bitcast {}*** %58 to {}**, !dbg !3440
  %1677 = getelementptr inbounds {}*, {}** %1676, i64 -14, !dbg !3440
  %1678 = getelementptr inbounds {}*, {}** %1677, i64 16, !dbg !3440
  %1679 = bitcast {}** %1678 to i8**, !dbg !3440
  %1680 = load i8*, i8** %1679, align 8, !dbg !3440
  %1681 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1677, i64 %1673, {} addrspace(10)* %1675), !dbg !3440
  %1682 = bitcast {} addrspace(10)* %1681 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i659, !dbg !3440

loop.i659:                                        ; preds = %loop.i659, %zeroType.319.exit
  %1683 = phi i64 [ 0, %zeroType.319.exit ], [ %1684, %loop.i659 ], !dbg !3440
  %1684 = add i64 %1683, 1, !dbg !3440
  %1685 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1682, i64 %1683, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1685, align 8, !dbg !3440
  %1686 = icmp eq i64 %1684, %672, !dbg !3440
  br i1 %1686, label %zeroType.323.exit, label %loop.i659, !dbg !3440

zeroType.323.exit:                                ; preds = %loop.i659
  %_malloccache534 = bitcast {} addrspace(10)* %1681 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache534, {} addrspace(10)* addrspace(10)** %_cache533, align 8, !dbg !3440, !invariant.group !3574
  %1687 = mul nuw i64 %672, 8, !dbg !3440
  %1688 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1689 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1688, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1690 = bitcast {}*** %54 to {}**, !dbg !3440
  %1691 = getelementptr inbounds {}*, {}** %1690, i64 -14, !dbg !3440
  %1692 = getelementptr inbounds {}*, {}** %1691, i64 16, !dbg !3440
  %1693 = bitcast {}** %1692 to i8**, !dbg !3440
  %1694 = load i8*, i8** %1693, align 8, !dbg !3440
  %1695 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1691, i64 %1687, {} addrspace(10)* %1689), !dbg !3440
  %1696 = bitcast {} addrspace(10)* %1695 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i660, !dbg !3440

loop.i660:                                        ; preds = %loop.i660, %zeroType.323.exit
  %1697 = phi i64 [ 0, %zeroType.323.exit ], [ %1698, %loop.i660 ], !dbg !3440
  %1698 = add i64 %1697, 1, !dbg !3440
  %1699 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1696, i64 %1697, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1699, align 8, !dbg !3440
  %1700 = icmp eq i64 %1698, %672, !dbg !3440
  br i1 %1700, label %zeroType.327.exit, label %loop.i660, !dbg !3440

zeroType.327.exit:                                ; preds = %loop.i660
  %"'mi61_malloccache" = bitcast {} addrspace(10)* %1695 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'mi61_malloccache", {} addrspace(10)* addrspace(10)** %"'mi61_cache", align 8, !dbg !3440, !invariant.group !3575
  %1701 = mul nuw i64 %672, 8, !dbg !3440
  %1702 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1703 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1702, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1704 = bitcast {}*** %50 to {}**, !dbg !3440
  %1705 = getelementptr inbounds {}*, {}** %1704, i64 -14, !dbg !3440
  %1706 = getelementptr inbounds {}*, {}** %1705, i64 16, !dbg !3440
  %1707 = bitcast {}** %1706 to i8**, !dbg !3440
  %1708 = load i8*, i8** %1707, align 8, !dbg !3440
  %1709 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1705, i64 %1701, {} addrspace(10)* %1703), !dbg !3440
  %1710 = bitcast {} addrspace(10)* %1709 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i661, !dbg !3440

loop.i661:                                        ; preds = %loop.i661, %zeroType.327.exit
  %1711 = phi i64 [ 0, %zeroType.327.exit ], [ %1712, %loop.i661 ], !dbg !3440
  %1712 = add i64 %1711, 1, !dbg !3440
  %1713 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1710, i64 %1711, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1713, align 8, !dbg !3440
  %1714 = icmp eq i64 %1712, %672, !dbg !3440
  br i1 %1714, label %zeroType.331.exit, label %loop.i661, !dbg !3440

zeroType.331.exit:                                ; preds = %loop.i661
  %_malloccache538 = bitcast {} addrspace(10)* %1709 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache538, {} addrspace(10)* addrspace(10)** %_cache537, align 8, !dbg !3440, !invariant.group !3576
  %1715 = mul nuw i64 %672, 248, !dbg !3440
  %1716 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1717 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1716, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6228907280 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1718 = bitcast {}*** %45 to {}**, !dbg !3440
  %1719 = getelementptr inbounds {}*, {}** %1718, i64 -14, !dbg !3440
  %1720 = getelementptr inbounds {}*, {}** %1719, i64 16, !dbg !3440
  %1721 = bitcast {}** %1720 to i8**, !dbg !3440
  %1722 = load i8*, i8** %1721, align 8, !dbg !3440
  %1723 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1719, i64 %1715, {} addrspace(10)* %1717), !dbg !3440
  %1724 = bitcast {} addrspace(10)* %1723 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3440
  br label %loop.i662, !dbg !3440

loop.i662:                                        ; preds = %loop.i662, %zeroType.331.exit
  %1725 = phi i64 [ 0, %zeroType.331.exit ], [ %1726, %loop.i662 ], !dbg !3440
  %1726 = add i64 %1725, 1, !dbg !3440
  %1727 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1724, i64 %1725, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1727, align 8, !dbg !3440
  %1728 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1724, i64 %1725, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1728, align 8, !dbg !3440
  %1729 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1724, i64 %1725, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1729, align 8, !dbg !3440
  %1730 = getelementptr { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1724, i64 %1725, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1730, align 8, !dbg !3440
  %1731 = icmp eq i64 %1726, %672, !dbg !3440
  br i1 %1731, label %zeroType.336.exit, label %loop.i662, !dbg !3440

zeroType.336.exit:                                ; preds = %loop.i662
  %subcache541_malloccache = bitcast {} addrspace(10)* %1723 to { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, !dbg !3440
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %subcache541_malloccache, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache541_cache, align 8, !dbg !3440, !invariant.group !3577
  %1732 = mul nuw i64 %672, 8, !dbg !3440
  %1733 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1734 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1733, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1735 = bitcast {}*** %41 to {}**, !dbg !3440
  %1736 = getelementptr inbounds {}*, {}** %1735, i64 -14, !dbg !3440
  %1737 = getelementptr inbounds {}*, {}** %1736, i64 16, !dbg !3440
  %1738 = bitcast {}** %1737 to i8**, !dbg !3440
  %1739 = load i8*, i8** %1738, align 8, !dbg !3440
  %1740 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1736, i64 %1732, {} addrspace(10)* %1734), !dbg !3440
  %1741 = bitcast {} addrspace(10)* %1740 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i663, !dbg !3440

loop.i663:                                        ; preds = %loop.i663, %zeroType.336.exit
  %1742 = phi i64 [ 0, %zeroType.336.exit ], [ %1743, %loop.i663 ], !dbg !3440
  %1743 = add i64 %1742, 1, !dbg !3440
  %1744 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1741, i64 %1742, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1744, align 8, !dbg !3440
  %1745 = icmp eq i64 %1743, %672, !dbg !3440
  br i1 %1745, label %zeroType.340.exit, label %loop.i663, !dbg !3440

zeroType.340.exit:                                ; preds = %loop.i663
  %_malloccache547 = bitcast {} addrspace(10)* %1740 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %_malloccache547, {} addrspace(10)* addrspace(10)** %_cache546, align 8, !dbg !3440, !invariant.group !3578
  %1746 = mul nuw i64 %672, 8, !dbg !3440
  %1747 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1748 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1747, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6159082768 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1749 = bitcast {}*** %37 to {}**, !dbg !3440
  %1750 = getelementptr inbounds {}*, {}** %1749, i64 -14, !dbg !3440
  %1751 = getelementptr inbounds {}*, {}** %1750, i64 16, !dbg !3440
  %1752 = bitcast {}** %1751 to i8**, !dbg !3440
  %1753 = load i8*, i8** %1752, align 8, !dbg !3440
  %1754 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1750, i64 %1746, {} addrspace(10)* %1748), !dbg !3440
  %1755 = bitcast {} addrspace(10)* %1754 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  br label %loop.i664, !dbg !3440

loop.i664:                                        ; preds = %loop.i664, %zeroType.340.exit
  %1756 = phi i64 [ 0, %zeroType.340.exit ], [ %1757, %loop.i664 ], !dbg !3440
  %1757 = add i64 %1756, 1, !dbg !3440
  %1758 = getelementptr {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1755, i64 %1756, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1758, align 8, !dbg !3440
  %1759 = icmp eq i64 %1757, %672, !dbg !3440
  br i1 %1759, label %zeroType.344.exit, label %loop.i664, !dbg !3440

zeroType.344.exit:                                ; preds = %loop.i664
  %"'mi69_malloccache" = bitcast {} addrspace(10)* %1754 to {} addrspace(10)* addrspace(10)*, !dbg !3440
  store {} addrspace(10)* addrspace(10)* %"'mi69_malloccache", {} addrspace(10)* addrspace(10)** %"'mi69_cache", align 8, !dbg !3440, !invariant.group !3579
  %1760 = mul nuw i64 %672, 48, !dbg !3440
  %1761 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1762 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1761, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6189018960 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1763 = bitcast {}*** %33 to {}**, !dbg !3440
  %1764 = getelementptr inbounds {}*, {}** %1763, i64 -14, !dbg !3440
  %1765 = getelementptr inbounds {}*, {}** %1764, i64 16, !dbg !3440
  %1766 = bitcast {}** %1765 to i8**, !dbg !3440
  %1767 = load i8*, i8** %1766, align 8, !dbg !3440
  %1768 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1764, i64 %1760, {} addrspace(10)* %1762), !dbg !3440
  %1769 = bitcast {} addrspace(10)* %1768 to { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)*, !dbg !3440
  br label %loop.i665, !dbg !3440

loop.i665:                                        ; preds = %loop.i665, %zeroType.344.exit
  %1770 = phi i64 [ 0, %zeroType.344.exit ], [ %1771, %loop.i665 ], !dbg !3440
  %1771 = add i64 %1770, 1, !dbg !3440
  %1772 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %1769, i64 %1770, i32 0, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1772, align 8, !dbg !3440
  %1773 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %1769, i64 %1770, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1773, align 8, !dbg !3440
  %1774 = icmp eq i64 %1771, %672, !dbg !3440
  br i1 %1774, label %zeroType.350.exit, label %loop.i665, !dbg !3440

zeroType.350.exit:                                ; preds = %loop.i665
  %_augmented553_malloccache = bitcast {} addrspace(10)* %1768 to { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)*, !dbg !3440
  store { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %_augmented553_malloccache, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)** %_augmented553_cache, align 8, !dbg !3440, !invariant.group !3580
  %1775 = mul nuw i64 %672, 592, !dbg !3440
  %1776 = call {} addrspace(10)* @ijl_box_int64(i64 %672), !dbg !3440
  %1777 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @jl_f_apply_type, {} addrspace(10)* null, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136750240 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1776, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5986893904 to {}*) to {} addrspace(10)*)), !dbg !3440
  %1778 = bitcast {}*** %28 to {}**, !dbg !3440
  %1779 = getelementptr inbounds {}*, {}** %1778, i64 -14, !dbg !3440
  %1780 = getelementptr inbounds {}*, {}** %1779, i64 16, !dbg !3440
  %1781 = bitcast {}** %1780 to i8**, !dbg !3440
  %1782 = load i8*, i8** %1781, align 8, !dbg !3440
  %1783 = call noalias nonnull {} addrspace(10)* @julia.gc_alloc_obj({}** %1779, i64 %1775, {} addrspace(10)* %1777), !dbg !3440
  %1784 = bitcast {} addrspace(10)* %1783 to { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)*, !dbg !3440
  br label %loop.i666, !dbg !3440

loop.i666:                                        ; preds = %loop.i666, %zeroType.350.exit
  %1785 = phi i64 [ 0, %zeroType.350.exit ], [ %1786, %loop.i666 ], !dbg !3440
  %1786 = add i64 %1785, 1, !dbg !3440
  %1787 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 0, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1787, align 8, !dbg !3440
  %1788 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1788, align 8, !dbg !3440
  %1789 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 3, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1789, align 8, !dbg !3440
  %1790 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1790, align 8, !dbg !3440
  %1791 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 6, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1791, align 8, !dbg !3440
  %1792 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 10, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1792, align 8, !dbg !3440
  %1793 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 12, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1793, align 8, !dbg !3440
  %1794 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 13, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1794, align 8, !dbg !3440
  %1795 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 16, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1795, align 8, !dbg !3440
  %1796 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 17, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1796, align 8, !dbg !3440
  %1797 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 9, i32 0, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1797, align 8, !dbg !3440
  %1798 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 9, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1798, align 8, !dbg !3440
  %1799 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 9, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1799, align 8, !dbg !3440
  %1800 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 9, i32 3, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1800, align 8, !dbg !3440
  %1801 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 14, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1801, align 8, !dbg !3440
  %1802 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 14, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1802, align 8, !dbg !3440
  %1803 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 14, i32 3, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1803, align 8, !dbg !3440
  %1804 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 14, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1804, align 8, !dbg !3440
  %1805 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 14, i32 0, i32 1, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1805, align 8, !dbg !3440
  %1806 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 14, i32 0, i32 2, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1806, align 8, !dbg !3440
  %1807 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 14, i32 0, i32 4, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1807, align 8, !dbg !3440
  %1808 = getelementptr { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %1784, i64 %1785, i32 14, i32 0, i32 5, !dbg !3440
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %1808, align 8, !dbg !3440
  %1809 = icmp eq i64 %1786, %672, !dbg !3440
  br i1 %1809, label %zeroType.362.exit, label %loop.i666, !dbg !3440

zeroType.362.exit:                                ; preds = %loop.i666
  %_augmented590_malloccache = bitcast {} addrspace(10)* %1783 to { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)*, !dbg !3440
  store { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %_augmented590_malloccache, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)** %_augmented590_cache, align 8, !dbg !3440, !invariant.group !3581
  %1810 = mul nuw i64 %672, 1, !dbg !3440
  %_malloccache593 = call noalias nonnull i8* @malloc(i64 %1810), !dbg !3440, !enzyme_cache_alloc !3582
  store i8* %_malloccache593, i8** %_cache592, align 1, !dbg !3440, !invariant.group !3584
  br label %L616, !dbg !3440

L616:                                             ; preds = %L1340, %zeroType.362.exit
  %iv9 = phi i64 [ %iv.next10, %L1340 ], [ 0, %zeroType.362.exit ]
  %value_phi372 = phi double [ %2202, %L1340 ], [ 0.000000e+00, %zeroType.362.exit ]
  %iv.next10 = add nuw nsw i64 %iv9, 1, !dbg !3585
  %1811 = add i64 %iv9, 2, !dbg !3585
  %1812 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize383), !dbg !3585
  %1813 = mul i64 %arraysize383, 8, !dbg !3585
  %1814 = bitcast {} addrspace(10)* %1812 to i8 addrspace(13)* addrspace(10)*, !dbg !3585
  %1815 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %1814, align 8, !dbg !3585
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %1815, i8 0, i64 %1813, i1 false), !dbg !3585
  %1816 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize383) #76, !dbg !3585
  %_augmented206 = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1994({} addrspace(10)* align 16 %1816, {} addrspace(10)* align 16 %1812, i32 zeroext 1308622848, {} addrspace(10)* align 16 %621, {} addrspace(10)* align 16 %"'ac168", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl"), !dbg !3590
  %subcache207 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented206, 0, !dbg !3590
  %1817 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented206, 1, !dbg !3590
  %"'ac208" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented206, 2, !dbg !3590
  store {} addrspace(10)* %".unpack.unpack'ipl", {} addrspace(10)** %"'ipg201", align 8, !dbg !3593, !alias.scope !3594, !noalias !3597
  %1818 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented206_cache, align 8, !dbg !3593, !dereferenceable !306, !invariant.group !3501
  %1819 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1818, i64 %iv9, !dbg !3593
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented206, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1819, align 8, !dbg !3593, !invariant.group !3599
  %1820 = bitcast { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1818 to {} addrspace(10)*, !dbg !3593
  %1821 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented206, 0, !dbg !3593
  %1822 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented206, 1, !dbg !3593
  %1823 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented206, 2, !dbg !3593
  %1824 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %1821, 1, !dbg !3593
  %1825 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %1821, 2, !dbg !3593
  %1826 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %1821, 4, !dbg !3593
  %1827 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %1821, 5, !dbg !3593
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1820, {} addrspace(10)* %1822, {} addrspace(10)* %1823, {} addrspace(10)* %1824, {} addrspace(10)* %1825, {} addrspace(10)* %1826, {} addrspace(10)* %1827), !dbg !3593
  %1828 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache246, align 8, !dbg !3593, !dereferenceable !306, !invariant.group !3500
  %1829 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1828, i64 %iv9, !dbg !3593
  store {} addrspace(10)* %1817, {} addrspace(10)* addrspace(10)* %1829, align 8, !dbg !3593, !invariant.group !3600
  %1830 = bitcast {} addrspace(10)* addrspace(10)* %1828 to {} addrspace(10)*, !dbg !3593
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1830, {} addrspace(10)* %1817), !dbg !3593
  %1831 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache207_cache, align 8, !dbg !3593, !dereferenceable !306, !invariant.group !3494
  %1832 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1831, i64 %iv9, !dbg !3593
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache207, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1832, align 8, !dbg !3593, !invariant.group !3601
  %1833 = bitcast { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1831 to {} addrspace(10)*, !dbg !3593
  %1834 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache207, 1, !dbg !3593
  %1835 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache207, 2, !dbg !3593
  %1836 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache207, 4, !dbg !3593
  %1837 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache207, 5, !dbg !3593
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1833, {} addrspace(10)* %1834, {} addrspace(10)* %1835, {} addrspace(10)* %1836, {} addrspace(10)* %1837), !dbg !3593
  %1838 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi17_cache", align 8, !dbg !3593, !dereferenceable !306, !invariant.group !3493
  %1839 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1838, i64 %iv9, !dbg !3593
  store {} addrspace(10)* %1812, {} addrspace(10)* addrspace(10)* %1839, align 8, !dbg !3593, !invariant.group !3602
  %1840 = bitcast {} addrspace(10)* addrspace(10)* %1838 to {} addrspace(10)*, !dbg !3593
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1840, {} addrspace(10)* %1812), !dbg !3593
  %1841 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache202, align 8, !dbg !3593, !dereferenceable !306, !invariant.group !3492
  %1842 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1841, i64 %iv9, !dbg !3593
  store {} addrspace(10)* %1816, {} addrspace(10)* addrspace(10)* %1842, align 8, !dbg !3593, !invariant.group !3603
  %1843 = bitcast {} addrspace(10)* addrspace(10)* %1841 to {} addrspace(10)*, !dbg !3593
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1843, {} addrspace(10)* %1816), !dbg !3593
  store {} addrspace(10)* %.unpack.unpack, {} addrspace(10)** %628, align 8, !dbg !3593, !alias.scope !3604, !noalias !3605
  %1844 = load double*, double** %value_phi372_cache, align 8, !dbg !3593, !dereferenceable !306, !invariant.group !3490
  %1845 = getelementptr inbounds double, double* %1844, i64 %iv9, !dbg !3593
  store double %value_phi372, double* %1845, align 8, !dbg !3593, !invariant.group !3606
  %_augmented197 = call fastcc { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_q_true_2051([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %629, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc195", double %value_phi372), !dbg !3593
  %subcache198 = extractvalue { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented197, 0, !dbg !3593
  %1846 = extractvalue { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented197, 1, !dbg !3593
  %"'ac199" = extractvalue { { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, {} addrspace(10)*, {} addrspace(10)* } %_augmented197, 2, !dbg !3593
  %1847 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5551489632 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11460510992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227532296 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5139467504 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1846, {} addrspace(10)* %"'ac199", {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*)), !dbg !3378
  %1848 = addrspacecast {} addrspace(10)* %1847 to {} addrspace(11)*, !dbg !3378
  %1849 = bitcast {} addrspace(11)* %1848 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3378
  %1850 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %1849, i64 0, i64 1, !dbg !3378
  %1851 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %1850, align 8, !dbg !3378
  %1852 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %1849, i64 0, i64 0, !dbg !3378
  %1853 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %1852, align 8, !dbg !3378
  %1854 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %1849, i64 0, i64 2, !dbg !3378
  %1855 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %1854, align 8, !dbg !3378, !invariant.group !3607
  %1856 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5551489632 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6224791504 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138639312 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %getfield, {} addrspace(10)* %"getfield'ipl", {} addrspace(10)* %1853, {} addrspace(10)* %1851), !dbg !3378
  %1857 = addrspacecast {} addrspace(10)* %1856 to {} addrspace(11)*, !dbg !3378
  %1858 = bitcast {} addrspace(11)* %1857 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3378
  %1859 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %1858, i64 0, i64 1, !dbg !3378
  %1860 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %1859, align 8, !dbg !3378, !invariant.group !3608
  %1861 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %1858, i64 0, i64 0, !dbg !3378
  %1862 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %1861, align 8, !dbg !3378
  %1863 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %1858, i64 0, i64 2, !dbg !3378
  %1864 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %1863, align 8, !dbg !3378, !invariant.group !3609
  %1865 = add nsw i64 %1811, -1, !dbg !3610
  store i64 %arraysize385, i64* %memcpy_refined_dst393, align 8, !dbg !3611, !tbaa !133, !alias.scope !135, !noalias !3056
  %1866 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache250, align 8, !dbg !3611, !dereferenceable !306, !invariant.group !3502
  %1867 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1866, i64 %iv9, !dbg !3611
  store {} addrspace(10)* %1862, {} addrspace(10)* addrspace(10)* %1867, align 8, !dbg !3611, !invariant.group !3613
  %1868 = bitcast {} addrspace(10)* addrspace(10)* %1866 to {} addrspace(10)*, !dbg !3611
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1868, {} addrspace(10)* %1862), !dbg !3611
  %1869 = load { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %subcache198_cache, align 8, !dbg !3611, !dereferenceable !306, !invariant.group !3491
  %1870 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1869, i64 %iv9, !dbg !3611
  store { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1870, align 8, !dbg !3611, !invariant.group !3614
  %1871 = bitcast { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %1869 to {} addrspace(10)*, !dbg !3611
  %1872 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 0, !dbg !3611
  %1873 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 1, !dbg !3611
  %1874 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 2, !dbg !3611
  %1875 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 3, !dbg !3611
  %1876 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 4, !dbg !3611
  %1877 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 5, !dbg !3611
  %1878 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 6, !dbg !3611
  %1879 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 7, !dbg !3611
  %1880 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 8, !dbg !3611
  %1881 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 9, !dbg !3611
  %1882 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 10, !dbg !3611
  %1883 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 11, !dbg !3611
  %1884 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 12, !dbg !3611
  %1885 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 13, !dbg !3611
  %1886 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 14, !dbg !3611
  %1887 = extractvalue { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %subcache198, 15, !dbg !3611
  %1888 = bitcast {} addrspace(10)* addrspace(10)* %1873 to {} addrspace(10)*, !dbg !3611
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1871, {} addrspace(10)* %1872, {} addrspace(10)* %1888, {} addrspace(10)* %1874, {} addrspace(10)* %1875, {} addrspace(10)* %1876, {} addrspace(10)* %1877, {} addrspace(10)* %1878, {} addrspace(10)* %1879, {} addrspace(10)* %1880, {} addrspace(10)* %1881, {} addrspace(10)* %1882, {} addrspace(10)* %1883, {} addrspace(10)* %1884, {} addrspace(10)* %1885, {} addrspace(10)* %1886, {} addrspace(10)* %1887), !dbg !3611
  %1889 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi19_cache", align 8, !dbg !3611, !dereferenceable !306, !invariant.group !3487
  %1890 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1889, i64 %iv9, !dbg !3611
  store {} addrspace(10)* %"'ac199", {} addrspace(10)* addrspace(10)* %1890, align 8, !dbg !3611, !invariant.group !3615
  %1891 = bitcast {} addrspace(10)* addrspace(10)* %1889 to {} addrspace(10)*, !dbg !3611
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1891, {} addrspace(10)* %"'ac199"), !dbg !3611
  %1892 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache189, align 8, !dbg !3611, !dereferenceable !306, !invariant.group !3486
  %1893 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1892, i64 %iv9, !dbg !3611
  store {} addrspace(10)* %1846, {} addrspace(10)* addrspace(10)* %1893, align 8, !dbg !3611, !invariant.group !3616
  %1894 = bitcast {} addrspace(10)* addrspace(10)* %1892 to {} addrspace(10)*, !dbg !3611
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1894, {} addrspace(10)* %1846), !dbg !3611
  %1895 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache182, align 8, !dbg !3611, !dereferenceable !306, !invariant.group !3485
  %1896 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1895, i64 %iv9, !dbg !3611
  store {} addrspace(10)* %1847, {} addrspace(10)* addrspace(10)* %1896, align 8, !dbg !3611, !invariant.group !3617
  %1897 = bitcast {} addrspace(10)* addrspace(10)* %1895 to {} addrspace(10)*, !dbg !3611
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1897, {} addrspace(10)* %1847), !dbg !3611
  %1898 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi20_cache", align 8, !dbg !3611, !dereferenceable !306, !invariant.group !3484
  %1899 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1898, i64 %iv9, !dbg !3611
  store {} addrspace(10)* %1851, {} addrspace(10)* addrspace(10)* %1899, align 8, !dbg !3611, !invariant.group !3618
  %1900 = bitcast {} addrspace(10)* addrspace(10)* %1898 to {} addrspace(10)*, !dbg !3611
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1900, {} addrspace(10)* %1851), !dbg !3611
  %1901 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache178, align 8, !dbg !3611, !dereferenceable !306, !invariant.group !3483
  %1902 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1901, i64 %iv9, !dbg !3611
  store {} addrspace(10)* %1853, {} addrspace(10)* addrspace(10)* %1902, align 8, !dbg !3611, !invariant.group !3619
  %1903 = bitcast {} addrspace(10)* addrspace(10)* %1901 to {} addrspace(10)*, !dbg !3611
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1903, {} addrspace(10)* %1853), !dbg !3611
  %1904 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache171, align 8, !dbg !3611, !dereferenceable !306, !invariant.group !3482
  %1905 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1904, i64 %iv9, !dbg !3611
  store {} addrspace(10)* %1856, {} addrspace(10)* addrspace(10)* %1905, align 8, !dbg !3611, !invariant.group !3620
  %1906 = bitcast {} addrspace(10)* addrspace(10)* %1904 to {} addrspace(10)*, !dbg !3611
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1906, {} addrspace(10)* %1856), !dbg !3611
  store i64 %1865, i64* %633, align 8, !dbg !3611, !tbaa !133, !alias.scope !135, !noalias !3056
  %1907 = add nsw i64 %1811, -2, !dbg !3621
  %exitcond1038.not = icmp eq i64 %1811, %668, !dbg !3627
  br i1 %exitcond1038.not, label %L668, label %L671, !dbg !3626

L668:                                             ; preds = %L616
  %1908 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct391 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !3626
  call fastcc void @julia_throw_boundserror_1989({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield13, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %1908) #73, !dbg !3626
  unreachable

L671:                                             ; preds = %L616
  store i64 %arraysize385, i64* %memcpy_refined_dst399, align 8, !dbg !3628, !tbaa !133, !alias.scope !135, !noalias !3056
  %1909 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize385), !dbg !3631
  %1910 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache211, align 8, !dbg !3631, !dereferenceable !306, !invariant.group !3495
  %1911 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1910, i64 %iv9, !dbg !3631
  store {} addrspace(10)* %1909, {} addrspace(10)* addrspace(10)* %1911, align 8, !dbg !3631, !invariant.group !3636
  %1912 = bitcast {} addrspace(10)* addrspace(10)* %1910 to {} addrspace(10)*, !dbg !3631
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1912, {} addrspace(10)* %1909), !dbg !3631
  %1913 = mul i64 %arraysize385, 8, !dbg !3631
  %1914 = bitcast {} addrspace(10)* %1909 to i8 addrspace(13)* addrspace(10)*, !dbg !3631
  %1915 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %1914, align 8, !dbg !3631
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %1915, i8 0, i64 %1913, i1 false), !dbg !3631
  %1916 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize385) #76, !dbg !3631
  %1917 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache265, align 8, !dbg !3637, !dereferenceable !306, !invariant.group !3507
  %1918 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1917, i64 %iv9, !dbg !3637
  store {} addrspace(10)* %1916, {} addrspace(10)* addrspace(10)* %1918, align 8, !dbg !3637, !invariant.group !3640
  %1919 = bitcast {} addrspace(10)* addrspace(10)* %1917 to {} addrspace(10)*, !dbg !3637
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1919, {} addrspace(10)* %1916), !dbg !3637
  %1920 = bitcast {} addrspace(10)* %1916 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3637
  %1921 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %1920 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3637
  %arraylen_ptr400 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %1921, i64 0, i32 1, !dbg !3637
  %arraylen401 = load i64, i64 addrspace(11)* %arraylen_ptr400, align 8, !dbg !3637, !tbaa !332, !range !87, !alias.scope !3641, !noalias !3644
  %.not866 = icmp eq i64 %arraylen401, %arraysize385, !dbg !3646
  br i1 %.not866, label %L684, label %L737, !dbg !3639

L684:                                             ; preds = %L671
  br i1 %.not867, label %L741.L742_crit_edge, label %L705.preheader, !dbg !3649

L705.preheader:                                   ; preds = %L684
  %1922 = mul i64 %1907, %arraysize385, !dbg !3650
  %1923 = add i64 %1922, -1, !dbg !3650
  %"arrayptr709925'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc216", align 16, !alias.scope !3453, !noalias !3450, !invariant.group !3653
  %arrayptr709925 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %636, align 16, !alias.scope !3450, !noalias !3453
  %"'ipc219" = bitcast {} addrspace(10)* %1909 to double addrspace(13)* addrspace(10)*
  %1924 = bitcast {} addrspace(10)* %1916 to double addrspace(13)* addrspace(10)*
  %"'ipc220" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc219" to double addrspace(13)* addrspace(11)*
  %1925 = addrspacecast double addrspace(13)* addrspace(10)* %1924 to double addrspace(13)* addrspace(11)*
  %1926 = load i64**, i64*** %value_phi414_cache, align 8, !dbg !3654, !invariant.group !3655
  %1927 = getelementptr inbounds i64*, i64** %1926, i64 %iv9, !dbg !3654
  store i64* null, i64** %1927, align 8, !dbg !3654
  br label %L705, !dbg !3654

L705:                                             ; preds = %L712, %L705.preheader
  %iv11 = phi i64 [ %iv.next12, %L712 ], [ 0, %L705.preheader ]
  %value_phi413.off0 = phi i1 [ %1954, %L712 ], [ false, %L705.preheader ]
  %value_phi414 = phi i64 [ %value_phi715, %L712 ], [ 1, %L705.preheader ]
  %iv.next12 = add nuw nsw i64 %iv11, 1, !dbg !3654
  %1928 = load i64*, i64** %1927, align 8, !dbg !3654
  %1929 = bitcast i64* %1928 to i8*, !dbg !3654
  %1930 = and i64 %iv.next12, 1, !dbg !3654
  %1931 = icmp ne i64 %1930, 0, !dbg !3654
  %1932 = call i64 @llvm.ctpop.i64(i64 %iv.next12), !dbg !3654
  %1933 = icmp ult i64 %1932, 3, !dbg !3654
  %1934 = and i1 %1933, %1931, !dbg !3654
  br i1 %1934, label %grow.i667, label %__enzyme_exponentialallocationzero.exit668, !dbg !3654

grow.i667:                                        ; preds = %L705
  %1935 = call i64 @llvm.ctlz.i64(i64 %iv.next12, i1 true), !dbg !3654
  %1936 = sub nuw nsw i64 64, %1935, !dbg !3654
  %1937 = shl i64 8, %1936, !dbg !3654
  %1938 = icmp eq i64 %iv.next12, 1, !dbg !3654
  %1939 = lshr i64 %1937, 1, !dbg !3654
  %1940 = select i1 %1938, i64 0, i64 %1939, !dbg !3654
  %1941 = call i8* @realloc(i8* %1929, i64 %1937) #77, !dbg !3654
  %1942 = sub i64 %1937, %1940, !dbg !3654
  %1943 = getelementptr inbounds i8, i8* %1941, i64 %1940, !dbg !3654
  call void @llvm.memset.p0i8.i64(i8* %1943, i8 0, i64 %1942, i1 false), !dbg !3654
  br label %__enzyme_exponentialallocationzero.exit668, !dbg !3654

__enzyme_exponentialallocationzero.exit668:       ; preds = %L705, %grow.i667
  %1944 = phi i8* [ %1941, %grow.i667 ], [ %1929, %L705 ], !dbg !3654
  %1945 = bitcast i8* %1944 to i64*, !dbg !3654
  store i64* %1945, i64** %1927, align 8, !dbg !3654
  %1946 = load i64**, i64*** %value_phi414_cache, align 8, !dbg !3654, !dereferenceable !306, !invariant.group !3498
  %1947 = getelementptr inbounds i64*, i64** %1946, i64 %iv9, !dbg !3654
  %1948 = load i64*, i64** %1947, align 8, !dbg !3654, !dereferenceable !306, !invariant.group !3656
  %1949 = getelementptr inbounds i64, i64* %1948, i64 %iv11, !dbg !3654
  store i64 %value_phi414, i64* %1949, align 8, !dbg !3654, !invariant.group !3657
  br i1 %value_phi413.off0, label %L741.L742_crit_edge.loopexit, label %L712, !dbg !3654

L712:                                             ; preds = %__enzyme_exponentialallocationzero.exit668
  %1950 = add i64 %1923, %iv.next12, !dbg !3650
  %"'ipg227" = getelementptr inbounds double, double addrspace(13)* %"arrayptr709925'ipl", i64 %1950, !dbg !3650
  %1951 = getelementptr inbounds double, double addrspace(13)* %arrayptr709925, i64 %1950, !dbg !3650
  %arrayref710 = load double, double addrspace(13)* %1951, align 8, !dbg !3650, !tbaa !269, !alias.scope !3658, !noalias !3661
  %1952 = add i64 %value_phi414, -1, !dbg !3663
  %"arrayptr712926'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc220", align 8, !dbg !3663, !tbaa !382, !alias.scope !3664, !noalias !3665, !nonnull !68
  %arrayptr712926 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %1925, align 8, !dbg !3663, !tbaa !382, !alias.scope !3666, !noalias !3644, !nonnull !68
  %"'ipg218" = getelementptr inbounds double, double addrspace(13)* %"arrayptr712926'ipl", i64 %1952, !dbg !3663
  %1953 = getelementptr inbounds double, double addrspace(13)* %arrayptr712926, i64 %1952, !dbg !3663
  store double %arrayref710, double addrspace(13)* %1953, align 8, !dbg !3663, !tbaa !269, !alias.scope !3667, !noalias !3670
  %1954 = icmp eq i64 %value_phi414, %arraysize385, !dbg !3672
  %1955 = add i64 %value_phi414, 1, !dbg !3673
  %value_phi715 = select i1 %1954, i64 undef, i64 %1955, !dbg !3673
  %.not927 = icmp eq i64 %iv.next12, %arraysize385, !dbg !3675
  br i1 %.not927, label %L741.L742_crit_edge.loopexit, label %L705, !dbg !3373

L737:                                             ; preds = %L671
  %1956 = addrspacecast [1 x [1 x i64]]* %newstruct397 to [1 x [1 x i64]] addrspace(11)*, !dbg !3639
  call fastcc void @julia_throw_checksize_error_1987({} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %1916, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %1956) #73, !dbg !3639
  unreachable

L741.L742_crit_edge.loopexit:                     ; preds = %L712, %__enzyme_exponentialallocationzero.exit668
  %"value_phi413.off0!manual_lcssa" = phi i1 [ %value_phi413.off0, %L712 ], [ %value_phi413.off0, %__enzyme_exponentialallocationzero.exit668 ], !dbg !3585
  %1957 = phi i64 [ %iv11, %L712 ], [ %iv11, %__enzyme_exponentialallocationzero.exit668 ], !dbg !3585
  %1958 = load i64*, i64** %loopLimit_cache24, align 8, !dbg !3585, !dereferenceable !306, !invariant.group !3473
  %1959 = getelementptr inbounds i64, i64* %1958, i64 %iv9, !dbg !3585
  store i64 %1957, i64* %1959, align 8, !dbg !3585, !invariant.group !3676
  br label %L741.L742_crit_edge, !dbg !3585

L741.L742_crit_edge:                              ; preds = %L741.L742_crit_edge.loopexit, %L684
  %1960 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize428), !dbg !3585
  %1961 = mul i64 %arraysize428, 8, !dbg !3585
  %1962 = bitcast {} addrspace(10)* %1960 to i8 addrspace(13)* addrspace(10)*, !dbg !3585
  %1963 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %1962, align 8, !dbg !3585
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %1963, i8 0, i64 %1961, i1 false), !dbg !3585
  %1964 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize428) #76, !dbg !3585
  %_augmented268 = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1994({} addrspace(10)* align 16 %1964, {} addrspace(10)* align 16 %1960, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield3, {} addrspace(10)* align 16 %"getfield3'ipl", {} addrspace(10)* align 16 %1916, {} addrspace(10)* align 16 %1909), !dbg !3590
  %subcache269 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented268, 0, !dbg !3590
  %1965 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented268, 1, !dbg !3590
  %"'ac270" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented268, 2, !dbg !3590
  %1966 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5551489632 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6229942608 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227533512 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5140980816 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1817, {} addrspace(10)* %"'ac208", {} addrspace(10)* %1862, {} addrspace(10)* %1860, {} addrspace(10)* %1965, {} addrspace(10)* %"'ac270"), !dbg !3378
  %1967 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache238, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3499
  %1968 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1967, i64 %iv9, !dbg !3378
  store {} addrspace(10)* %1966, {} addrspace(10)* addrspace(10)* %1968, align 8, !dbg !3378, !invariant.group !3677
  %1969 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache269_cache, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3508
  %1970 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1969, i64 %iv9, !dbg !3378
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache269, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1970, align 8, !dbg !3378, !invariant.group !3678
  %1971 = bitcast { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %1969 to {} addrspace(10)*, !dbg !3378
  %1972 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache269, 1, !dbg !3378
  %1973 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache269, 2, !dbg !3378
  %1974 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache269, 4, !dbg !3378
  %1975 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache269, 5, !dbg !3378
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1971, {} addrspace(10)* %1972, {} addrspace(10)* %1973, {} addrspace(10)* %1974, {} addrspace(10)* %1975), !dbg !3378
  %1976 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi26_cache", align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3506
  %1977 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1976, i64 %iv9, !dbg !3378
  store {} addrspace(10)* %1960, {} addrspace(10)* addrspace(10)* %1977, align 8, !dbg !3378, !invariant.group !3679
  %1978 = bitcast {} addrspace(10)* addrspace(10)* %1976 to {} addrspace(10)*, !dbg !3378
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1978, {} addrspace(10)* %1960), !dbg !3378
  %1979 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache261, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3505
  %1980 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1979, i64 %iv9, !dbg !3378
  store {} addrspace(10)* %1964, {} addrspace(10)* addrspace(10)* %1980, align 8, !dbg !3378, !invariant.group !3680
  %1981 = bitcast {} addrspace(10)* addrspace(10)* %1979 to {} addrspace(10)*, !dbg !3378
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1981, {} addrspace(10)* %1964), !dbg !3378
  %1982 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi27_cache", align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3504
  %1983 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1982, i64 %iv9, !dbg !3378
  store {} addrspace(10)* %"'ac270", {} addrspace(10)* addrspace(10)* %1983, align 8, !dbg !3378, !invariant.group !3681
  %1984 = bitcast {} addrspace(10)* addrspace(10)* %1982 to {} addrspace(10)*, !dbg !3378
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1984, {} addrspace(10)* %"'ac270"), !dbg !3378
  %1985 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache257, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3503
  %1986 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1985, i64 %iv9, !dbg !3378
  store {} addrspace(10)* %1965, {} addrspace(10)* addrspace(10)* %1986, align 8, !dbg !3378, !invariant.group !3682
  %1987 = bitcast {} addrspace(10)* addrspace(10)* %1985 to {} addrspace(10)*, !dbg !3378
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1987, {} addrspace(10)* %1965), !dbg !3378
  %1988 = bitcast {} addrspace(10)* addrspace(10)* %1967 to {} addrspace(10)*, !dbg !3378
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1988, {} addrspace(10)* %1966), !dbg !3378
  %1989 = addrspacecast {} addrspace(10)* %1966 to {} addrspace(11)*, !dbg !3378
  %1990 = bitcast {} addrspace(11)* %1989 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3378
  %1991 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %1990, i64 0, i64 1, !dbg !3378
  %1992 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %1991, align 8, !dbg !3378, !invariant.group !3683
  %1993 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %1990, i64 0, i64 0, !dbg !3378
  %1994 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %1993, align 8, !dbg !3378
  %1995 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache282, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3512
  %1996 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %1995, i64 %iv9, !dbg !3378
  store {} addrspace(10)* %1994, {} addrspace(10)* addrspace(10)* %1996, align 8, !dbg !3378, !invariant.group !3684
  %1997 = bitcast {} addrspace(10)* addrspace(10)* %1995 to {} addrspace(10)*, !dbg !3378
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %1997, {} addrspace(10)* %1994), !dbg !3378
  %1998 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %1990, i64 0, i64 2, !dbg !3378
  %1999 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %1998, align 8, !dbg !3378, !invariant.group !3685
  %2000 = call {} addrspace(10)* @julia.typeof({} addrspace(10)* nonnull %1994) #75, !dbg !3378
  %2001 = addrspacecast {} addrspace(10)* %2000 to {} addrspace(11)*, !dbg !3378
  %2002 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %2001) #75, !dbg !3378
  %exactly_isa.not = icmp eq {}* %2002, inttoptr (i64 11208048192 to {}*), !dbg !3378
  br i1 %exactly_isa.not, label %L770, label %L777, !dbg !3378

L770:                                             ; preds = %L741.L742_crit_edge
  %2003 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5206735824 to {}*) to {} addrspace(10)*), i64 32), !dbg !3686
  %2004 = bitcast {} addrspace(10)* %2003 to i8 addrspace(13)* addrspace(10)*, !dbg !3686
  %2005 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2004, align 8, !dbg !3686
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2005, i8 0, i64 256, i1 false), !dbg !3686
  %2006 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5206735824 to {}*) to {} addrspace(10)*), i64 32) #76, !dbg !3686
  %"newstruct430'mi" = call noalias nonnull dereferenceable(24) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task429, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134423536 to {}*) to {} addrspace(10)*)) #74, !dbg !3687
  %2007 = bitcast {} addrspace(10)* %"newstruct430'mi" to i8 addrspace(10)*, !dbg !3687
  call void @llvm.memset.p10i8.i64(i8 addrspace(10)* nonnull dereferenceable(24) dereferenceable_or_null(24) %2007, i8 0, i64 24, i1 false), !dbg !3687
  %newstruct430 = call noalias nonnull dereferenceable(24) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task429, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134423536 to {}*) to {} addrspace(10)*)) #74, !dbg !3687
  %"'ipc295" = bitcast {} addrspace(10)* %"newstruct430'mi" to {} addrspace(10)* addrspace(10)*, !dbg !3687
  %2008 = bitcast {} addrspace(10)* %newstruct430 to {} addrspace(10)* addrspace(10)*, !dbg !3687
  %"'ipc296" = addrspacecast {} addrspace(10)* addrspace(10)* %"'ipc295" to {} addrspace(10)* addrspace(11)*, !dbg !3687
  %2009 = addrspacecast {} addrspace(10)* addrspace(10)* %2008 to {} addrspace(10)* addrspace(11)*, !dbg !3687
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %"'ipc296", align 8, !dbg !3687, !tbaa !307, !alias.scope !3690, !noalias !3693
  %2010 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache298, align 8, !dbg !3687, !dereferenceable !306, !invariant.group !3514
  %2011 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2010, i64 %iv9, !dbg !3687
  store {} addrspace(10)* %2003, {} addrspace(10)* addrspace(10)* %2011, align 8, !dbg !3687, !invariant.group !3695
  %2012 = bitcast {} addrspace(10)* addrspace(10)* %2010 to {} addrspace(10)*, !dbg !3687
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2012, {} addrspace(10)* %2003), !dbg !3687
  %2013 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"newstruct430'mi_cache", align 8, !dbg !3687, !dereferenceable !306, !invariant.group !3513
  %2014 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2013, i64 %iv9, !dbg !3687
  store {} addrspace(10)* %"newstruct430'mi", {} addrspace(10)* addrspace(10)* %2014, align 8, !dbg !3687, !invariant.group !3696
  %2015 = bitcast {} addrspace(10)* addrspace(10)* %2013 to {} addrspace(10)*, !dbg !3687
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2015, {} addrspace(10)* %"newstruct430'mi"), !dbg !3687
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %2009, align 8, !dbg !3687, !tbaa !307, !alias.scope !3697, !noalias !3698
  store atomic {} addrspace(10)* %2003, {} addrspace(10)* addrspace(11)* %"'ipc296" release, align 8, !dbg !3687, !tbaa !307, !alias.scope !3690, !noalias !3693
  store atomic {} addrspace(10)* %2006, {} addrspace(10)* addrspace(11)* %2009 release, align 8, !dbg !3687, !tbaa !307, !alias.scope !3697, !noalias !3698
  %"'ipc292" = bitcast {} addrspace(10)* %"newstruct430'mi" to i8 addrspace(10)*, !dbg !3687
  %2016 = bitcast {} addrspace(10)* %newstruct430 to i8 addrspace(10)*, !dbg !3687
  %"'ipc293" = addrspacecast i8 addrspace(10)* %"'ipc292" to i8 addrspace(11)*, !dbg !3687
  %2017 = addrspacecast i8 addrspace(10)* %2016 to i8 addrspace(11)*, !dbg !3687
  %"'ipg294" = getelementptr inbounds i8, i8 addrspace(11)* %"'ipc293", i64 8, !dbg !3687
  %2018 = getelementptr inbounds i8, i8 addrspace(11)* %2017, i64 8, !dbg !3687
  %"'ipc290" = bitcast {} addrspace(10)* %1992 to [2 x {} addrspace(10)*] addrspace(10)*, !dbg !3699
  %2019 = bitcast {} addrspace(10)* %1994 to [2 x {} addrspace(10)*] addrspace(10)*, !dbg !3699
  %"'ipc291" = addrspacecast [2 x {} addrspace(10)*] addrspace(10)* %"'ipc290" to [2 x {} addrspace(10)*] addrspace(11)*, !dbg !3699
  %2020 = addrspacecast [2 x {} addrspace(10)*] addrspace(10)* %2019 to [2 x {} addrspace(10)*] addrspace(11)*, !dbg !3699
  %"getfield_addr433'ipg" = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(11)* %"'ipc291", i64 0, i64 1, !dbg !3699
  %getfield_addr433 = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(11)* %2020, i64 0, i64 1, !dbg !3699
  call void @llvm.memset.p11i8.i64(i8 addrspace(11)* noundef align 8 dereferenceable(16) %2018, i8 0, i64 16, i1 false) #72, !dbg !3687
  call void @llvm.memset.p11i8.i64(i8 addrspace(11)* noundef align 8 dereferenceable(16) %"'ipg294", i8 0, i64 16, i1 false) #72, !dbg !3687
  %"getfield434'ipl" = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %"getfield_addr433'ipg" unordered, align 8, !dbg !3699, !tbaa !894, !alias.scope !3700, !noalias !3703, !nonnull !68
  %getfield434 = load atomic {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %getfield_addr433 unordered, align 8, !dbg !3699, !tbaa !894, !alias.scope !3705, !noalias !3706, !nonnull !68
  %"box'mi" = call noalias nonnull dereferenceable(16) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task429, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11208048192 to {}*) to {} addrspace(10)*)) #74, !dbg !3707
  %2021 = bitcast {} addrspace(10)* %"box'mi" to i8 addrspace(10)*, !dbg !3707
  call void @llvm.memset.p10i8.i64(i8 addrspace(10)* nonnull dereferenceable(16) dereferenceable_or_null(16) %2021, i8 0, i64 16, i1 false), !dbg !3707
  %box = call noalias nonnull dereferenceable(16) {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task429, i64 16, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11208048192 to {}*) to {} addrspace(10)*)) #74, !dbg !3707
  %"'ipc289" = bitcast {} addrspace(10)* %"box'mi" to [2 x {} addrspace(10)*] addrspace(10)*, !dbg !3707
  %2022 = bitcast {} addrspace(10)* %box to [2 x {} addrspace(10)*] addrspace(10)*, !dbg !3707
  %".repack872'ipg" = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(10)* %"'ipc289", i64 0, i64 0, !dbg !3707
  %.repack872 = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(10)* %2022, i64 0, i64 0, !dbg !3707
  store {} addrspace(10)* %"newstruct430'mi", {} addrspace(10)* addrspace(10)* %".repack872'ipg", align 8, !dbg !3707, !tbaa !113, !alias.scope !3708, !noalias !3711
  store {} addrspace(10)* %newstruct430, {} addrspace(10)* addrspace(10)* %.repack872, align 8, !dbg !3707, !tbaa !113, !alias.scope !3713, !noalias !3714
  %2023 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"box'mi_cache", align 8, !dbg !3707, !dereferenceable !306, !invariant.group !3511
  %2024 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2023, i64 %iv9, !dbg !3707
  store {} addrspace(10)* %"box'mi", {} addrspace(10)* addrspace(10)* %2024, align 8, !dbg !3707, !invariant.group !3715
  %2025 = bitcast {} addrspace(10)* addrspace(10)* %2023 to {} addrspace(10)*, !dbg !3707
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2025, {} addrspace(10)* %"box'mi"), !dbg !3707
  %2026 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %box_cache, align 8, !dbg !3707, !dereferenceable !306, !invariant.group !3510
  %2027 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2026, i64 %iv9, !dbg !3707
  store {} addrspace(10)* %box, {} addrspace(10)* addrspace(10)* %2027, align 8, !dbg !3707, !invariant.group !3716
  %2028 = bitcast {} addrspace(10)* addrspace(10)* %2026 to {} addrspace(10)*, !dbg !3707
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2028, {} addrspace(10)* %box), !dbg !3707
  %".repack873'ipg" = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(10)* %"'ipc289", i64 0, i64 1, !dbg !3707
  %.repack873 = getelementptr inbounds [2 x {} addrspace(10)*], [2 x {} addrspace(10)*] addrspace(10)* %2022, i64 0, i64 1, !dbg !3707
  store {} addrspace(10)* %"getfield434'ipl", {} addrspace(10)* addrspace(10)* %".repack873'ipg", align 8, !dbg !3707, !tbaa !113, !alias.scope !3708, !noalias !3711
  store {} addrspace(10)* %getfield434, {} addrspace(10)* addrspace(10)* %.repack873, align 8, !dbg !3707, !tbaa !113, !alias.scope !3713, !noalias !3714
  %2029 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5551489632 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6250068816 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227533512 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136487904 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134803728 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %box, {} addrspace(10)* %"box'mi", {} addrspace(10)* %1994, {} addrspace(10)* %1992), !dbg !3707
  %2030 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache272, align 8, !dbg !3707, !dereferenceable !306, !invariant.group !3509
  %2031 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2030, i64 %iv9, !dbg !3707
  store {} addrspace(10)* %2029, {} addrspace(10)* addrspace(10)* %2031, align 8, !dbg !3707, !invariant.group !3717
  %2032 = bitcast {} addrspace(10)* addrspace(10)* %2030 to {} addrspace(10)*, !dbg !3707
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2032, {} addrspace(10)* %2029), !dbg !3707
  %2033 = addrspacecast {} addrspace(10)* %2029 to {} addrspace(11)*, !dbg !3707
  %2034 = bitcast {} addrspace(11)* %2033 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3707
  %2035 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2034, i64 0, i64 1, !dbg !3707
  %2036 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2035, align 8, !dbg !3707, !invariant.group !3718
  %2037 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2034, i64 0, i64 0, !dbg !3707
  %2038 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2037, align 8, !dbg !3707
  %2039 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache322, align 8, !dbg !3707, !dereferenceable !306, !invariant.group !3517
  %2040 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2039, i64 %iv9, !dbg !3707
  store {} addrspace(10)* %2038, {} addrspace(10)* addrspace(10)* %2040, align 8, !dbg !3707, !invariant.group !3719
  %2041 = bitcast {} addrspace(10)* addrspace(10)* %2039 to {} addrspace(10)*, !dbg !3707
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2041, {} addrspace(10)* %2038), !dbg !3707
  %2042 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2034, i64 0, i64 2, !dbg !3707
  %2043 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2042, align 8, !dbg !3707, !invariant.group !3720
  br label %L779, !dbg !3721

L777:                                             ; preds = %L741.L742_crit_edge
  %2044 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5551489632 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11465234128 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5140568784 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134803728 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %1994, {} addrspace(10)* %1992), !dbg !3378
  %2045 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache301, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3515
  %2046 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2045, i64 %iv9, !dbg !3378
  store {} addrspace(10)* %2044, {} addrspace(10)* addrspace(10)* %2046, align 8, !dbg !3378, !invariant.group !3727
  %2047 = bitcast {} addrspace(10)* addrspace(10)* %2045 to {} addrspace(10)*, !dbg !3378
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2047, {} addrspace(10)* %2044), !dbg !3378
  %2048 = addrspacecast {} addrspace(10)* %2044 to {} addrspace(11)*, !dbg !3378
  %2049 = bitcast {} addrspace(11)* %2048 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3378
  %2050 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2049, i64 0, i64 1, !dbg !3378
  %2051 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2050, align 8, !dbg !3378, !invariant.group !3728
  %2052 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2049, i64 0, i64 0, !dbg !3378
  %2053 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2052, align 8, !dbg !3378
  %2054 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache326, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3518
  %2055 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2054, i64 %iv9, !dbg !3378
  store {} addrspace(10)* %2053, {} addrspace(10)* addrspace(10)* %2055, align 8, !dbg !3378, !invariant.group !3729
  %2056 = bitcast {} addrspace(10)* addrspace(10)* %2054 to {} addrspace(10)*, !dbg !3378
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2056, {} addrspace(10)* %2053), !dbg !3378
  %2057 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2049, i64 0, i64 2, !dbg !3378
  %2058 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2057, align 8, !dbg !3378, !invariant.group !3730
  br label %L779, !dbg !3721

L779:                                             ; preds = %L777, %L770
  %2059 = phi {} addrspace(10)* [ %2036, %L770 ], [ %2051, %L777 ]
  %value_phi436 = phi {} addrspace(10)* [ %2038, %L770 ], [ %2053, %L777 ]
  %2060 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5551489632 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6224791504 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530944 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138755328 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %getfield11, {} addrspace(10)* %"getfield11'ipl", {} addrspace(10)* %value_phi436, {} addrspace(10)* %2059), !dbg !3378
  %2061 = addrspacecast {} addrspace(10)* %2060 to {} addrspace(11)*, !dbg !3378
  %2062 = bitcast {} addrspace(11)* %2061 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3378
  %2063 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2062, i64 0, i64 1, !dbg !3378
  %2064 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2063, align 8, !dbg !3378
  %2065 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2062, i64 0, i64 0, !dbg !3378
  %2066 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2065, align 8, !dbg !3378
  %2067 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %2062, i64 0, i64 2, !dbg !3378
  %2068 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2067, align 8, !dbg !3378, !invariant.group !3731
  store i64 %arraysize, i64* %memcpy_refined_dst446, align 8, !dbg !3732, !tbaa !133, !alias.scope !135, !noalias !3056
  %2069 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache313, align 8, !dbg !3732, !dereferenceable !306, !invariant.group !3516
  %2070 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2069, i64 %iv9, !dbg !3732
  store {} addrspace(10)* %2060, {} addrspace(10)* addrspace(10)* %2070, align 8, !dbg !3732, !invariant.group !3737
  %2071 = bitcast {} addrspace(10)* addrspace(10)* %2069 to {} addrspace(10)*, !dbg !3732
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2071, {} addrspace(10)* %2060), !dbg !3732
  store i64 %1811, i64* %640, align 8, !dbg !3732, !tbaa !133, !alias.scope !135, !noalias !3056
  %exitcond1039.not = icmp eq i64 %1811, %669, !dbg !3738
  br i1 %exitcond1039.not, label %L799, label %L802, !dbg !3743

L799:                                             ; preds = %L779
  %2072 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct444 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !3743
  call fastcc void @julia_throw_boundserror_1989({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield15, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %2072) #73, !dbg !3743
  unreachable

L802:                                             ; preds = %L779
  %2073 = mul i64 %1865, %arraysize, !dbg !3744
  %2074 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"getfield11'ipl"), !dbg !3754
  %2075 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3754
  %2076 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2075, i32 0, i32 3, !dbg !3754
  %2077 = load i16, i16 addrspace(10)* %2076, align 2, !dbg !3754
  %2078 = zext i16 %2077 to i64, !dbg !3754
  %2079 = bitcast {} addrspace(10)* %getfield11 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3754
  %2080 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2079, i32 0, i32 1, !dbg !3754
  %2081 = load i64, i64 addrspace(10)* %2080, align 8, !dbg !3754
  %2082 = mul i64 %2081, %2078, !dbg !3754
  %2083 = bitcast {} addrspace(10)* %"getfield11'ipl" to i8 addrspace(13)* addrspace(10)*, !dbg !3754
  %2084 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2083, align 8, !dbg !3754
  %2085 = bitcast {} addrspace(10)* %2074 to i8 addrspace(13)* addrspace(10)*, !dbg !3754
  %2086 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2085, align 8, !dbg !3754
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %2086, i8 0, i64 %2082, i1 false), !dbg !3754
  %2087 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %getfield11) #72, !dbg !3754
  %2088 = bitcast {} addrspace(10)* %2087 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3755
  %2089 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2088, i32 0, i32 3, !dbg !3755
  %2090 = load i16, i16 addrspace(10)* %2089, align 2, !dbg !3755, !invariant.group !3761
  %2091 = zext i16 %2090 to i64, !dbg !3755
  %2092 = bitcast {} addrspace(10)* %2087 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3755
  %2093 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2092, i32 0, i32 1, !dbg !3755
  %2094 = load i64, i64 addrspace(10)* %2093, align 8, !dbg !3755, !invariant.group !3762
  %2095 = mul i64 %2094, %2091, !dbg !3755
  %2096 = bitcast {} addrspace(10)* %2087 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3755
  %2097 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2096, i32 0, i32 3, !dbg !3755
  %2098 = load i16, i16 addrspace(10)* %2097, align 2, !dbg !3755, !invariant.group !3763
  %2099 = zext i16 %2098 to i64, !dbg !3755
  %2100 = bitcast {} addrspace(10)* %2087 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3755
  %2101 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2100, i32 0, i32 1, !dbg !3755
  %2102 = load i64, i64 addrspace(10)* %2101, align 8, !dbg !3755, !invariant.group !3764
  %2103 = mul i64 %2102, %2099, !dbg !3755
  %2104 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi33_cache", align 8, !dbg !3755, !dereferenceable !306, !invariant.group !3519
  %2105 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2104, i64 %iv9, !dbg !3755
  store {} addrspace(10)* %2074, {} addrspace(10)* addrspace(10)* %2105, align 8, !dbg !3755, !invariant.group !3765
  %2106 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache345, align 8, !dbg !3755, !dereferenceable !306, !invariant.group !3522
  %2107 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2106, i64 %iv9, !dbg !3755
  store {} addrspace(10)* %2087, {} addrspace(10)* addrspace(10)* %2107, align 8, !dbg !3755, !invariant.group !3766
  %2108 = bitcast {} addrspace(10)* addrspace(10)* %2106 to {} addrspace(10)*, !dbg !3755
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2108, {} addrspace(10)* %2087), !dbg !3755
  %2109 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache342, align 8, !dbg !3755, !dereferenceable !306, !invariant.group !3521
  %2110 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2109, i64 %iv9, !dbg !3755
  store {} addrspace(10)* %2074, {} addrspace(10)* addrspace(10)* %2110, align 8, !dbg !3755, !invariant.group !3767
  %2111 = bitcast {} addrspace(10)* addrspace(10)* %2109 to {} addrspace(10)*, !dbg !3755
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2111, {} addrspace(10)* %2074), !dbg !3755
  %2112 = bitcast {} addrspace(10)* addrspace(10)* %2104 to {} addrspace(10)*, !dbg !3755
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2112, {} addrspace(10)* %2074), !dbg !3755
  %2113 = bitcast {} addrspace(10)* %2087 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3755
  %2114 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %2113 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3755
  %arraylen_ptr460 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %2114, i64 0, i32 1, !dbg !3755
  %arraylen461 = load i64, i64 addrspace(11)* %arraylen_ptr460, align 8, !dbg !3755, !tbaa !332, !range !87, !alias.scope !3768, !noalias !3771
  %2115 = icmp eq i64 %arraysize, %arraylen461, !dbg !3773
  %2116 = icmp eq i64 %arraylen461, 1, !dbg !3775
  %value_phi463.in = or i1 %2115, %2116, !dbg !3775
  br i1 %value_phi463.in, label %L843, label %L828, !dbg !3776

L828:                                             ; preds = %L802
  %2117 = call fastcc [1 x {} addrspace(10)*] @julia_DimensionMismatch_1976() #72, !dbg !3776
  %box702 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task429, i64 8, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #74, !dbg !3776
  %2118 = bitcast {} addrspace(10)* %box702 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !3776
  %2119 = extractvalue [1 x {} addrspace(10)*] %2117, 0, !dbg !3776
  %2120 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %2118, i64 0, i64 0, !dbg !3776
  store {} addrspace(10)* %2119, {} addrspace(10)* addrspace(10)* %2120, align 8, !dbg !3776, !tbaa !113, !alias.scope !117, !noalias !3082
  %2121 = addrspacecast {} addrspace(10)* %box702 to {} addrspace(12)*, !dbg !3776
  call void @ijl_throw({} addrspace(12)* %2121) #72, !dbg !3776
  unreachable

L843:                                             ; preds = %L802
  br i1 %2115, label %L854, label %L873, !dbg !3777

L854:                                             ; preds = %L843
  %2122 = load i8*, i8** %_cache400, align 8, !dbg !3779, !dereferenceable !306, !invariant.group !3539
  %2123 = getelementptr inbounds i8, i8* %2122, i64 %iv9, !dbg !3779
  store i8 0, i8* %2123, align 1, !dbg !3779, !invariant.group !3781
  br i1 %.not816, label %L956, label %L858, !dbg !3779

L858:                                             ; preds = %L854
  %2124 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %641) #75, !dbg !3782
  %2125 = bitcast {}* %2124 to i8**, !dbg !3782
  %arrayptr670 = load i8*, i8** %2125, align 8, !dbg !3782, !tbaa !73, !invariant.load !68, !alias.scope !3049, !noalias !3052, !nonnull !68
  %2126 = addrspacecast {} addrspace(10)* %2087 to {} addrspace(11)*, !dbg !3789
  %2127 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %2126) #75, !dbg !3789
  %2128 = bitcast {}* %2127 to i8**, !dbg !3789
  %arrayptr672 = load i8*, i8** %2128, align 8, !dbg !3789, !tbaa !382, !alias.scope !3768, !noalias !3771, !nonnull !68
  %.not908.not = icmp eq i8* %arrayptr670, %arrayptr672, !dbg !3792
  %2129 = load i1*, i1** %.not908.not_cache, align 8, !dbg !3787, !dereferenceable !306, !invariant.group !3525
  %2130 = getelementptr inbounds i1, i1* %2129, i64 %iv9, !dbg !3787
  store i1 %.not908.not, i1* %2130, align 1, !dbg !3787, !invariant.group !3795
  br i1 %.not908.not, label %L866, label %L869, !dbg !3787

L866:                                             ; preds = %L858
  %2131 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %2074), !dbg !3796
  %2132 = bitcast {} addrspace(10)* %2087 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3796
  %2133 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2132, i32 0, i32 3, !dbg !3796
  %2134 = load i16, i16 addrspace(10)* %2133, align 2, !dbg !3796
  %2135 = zext i16 %2134 to i64, !dbg !3796
  %2136 = bitcast {} addrspace(10)* %2087 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3796
  %2137 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2136, i32 0, i32 1, !dbg !3796
  %2138 = load i64, i64 addrspace(10)* %2137, align 8, !dbg !3796
  %2139 = mul i64 %2138, %2135, !dbg !3796
  %2140 = bitcast {} addrspace(10)* %2074 to i8 addrspace(13)* addrspace(10)*, !dbg !3796
  %2141 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2140, align 8, !dbg !3796
  %2142 = bitcast {} addrspace(10)* %2131 to i8 addrspace(13)* addrspace(10)*, !dbg !3796
  %2143 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2142, align 8, !dbg !3796
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %2143, i8 0, i64 %2139, i1 false), !dbg !3796
  %2144 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %2087) #72, !dbg !3796
  %2145 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi36_cache", align 8, !dbg !3798, !dereferenceable !306, !invariant.group !3520
  %2146 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2145, i64 %iv9, !dbg !3798
  store {} addrspace(10)* %2131, {} addrspace(10)* addrspace(10)* %2146, align 8, !dbg !3798, !invariant.group !3801
  %2147 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache365, align 8, !dbg !3798, !dereferenceable !306, !invariant.group !3527
  %2148 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2147, i64 %iv9, !dbg !3798
  store {} addrspace(10)* %2131, {} addrspace(10)* addrspace(10)* %2148, align 8, !dbg !3798, !invariant.group !3802
  %2149 = bitcast {} addrspace(10)* addrspace(10)* %2147 to {} addrspace(10)*, !dbg !3798
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2149, {} addrspace(10)* %2131), !dbg !3798
  %2150 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache361, align 8, !dbg !3798, !dereferenceable !306, !invariant.group !3526
  %2151 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2150, i64 %iv9, !dbg !3798
  store {} addrspace(10)* %2144, {} addrspace(10)* addrspace(10)* %2151, align 8, !dbg !3798, !invariant.group !3803
  %2152 = bitcast {} addrspace(10)* addrspace(10)* %2150 to {} addrspace(10)*, !dbg !3798
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2152, {} addrspace(10)* %2144), !dbg !3798
  %2153 = bitcast {} addrspace(10)* addrspace(10)* %2145 to {} addrspace(10)*, !dbg !3798
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2153, {} addrspace(10)* %2131), !dbg !3798
  br label %L869, !dbg !3798

L869:                                             ; preds = %L866, %L858
  %2154 = phi {} addrspace(10)* [ %2131, %L866 ], [ %2074, %L858 ]
  %value_phi673 = phi {} addrspace(10)* [ %2144, %L866 ], [ %2087, %L858 ]
  store {} addrspace(10)* %"getfield15'ipl", {} addrspace(10)** %".repack909'ipg", align 8, !dbg !3804, !alias.scope !3805, !noalias !3808
  store {} addrspace(10)* %getfield15, {} addrspace(10)** %.repack909, align 8, !dbg !3804, !alias.scope !3810, !noalias !3811
  store i64 %arraysize, i64* %"'ipg371", align 8, !dbg !3804, !alias.scope !3805, !noalias !3808
  store i64 %arraysize, i64* %644, align 8, !dbg !3804, !alias.scope !3810, !noalias !3811
  store i64 %1811, i64* %".repack910.repack916'ipg", align 8, !dbg !3804, !alias.scope !3805, !noalias !3808
  store i64 %1811, i64* %.repack910.repack916, align 8, !dbg !3804, !alias.scope !3810, !noalias !3811
  store i64 %2073, i64* %".repack912'ipg", align 8, !dbg !3804, !alias.scope !3805, !noalias !3808
  store i64 %2073, i64* %.repack912, align 8, !dbg !3804, !alias.scope !3810, !noalias !3811
  store i64 1, i64* %".repack914'ipg", align 8, !dbg !3804, !alias.scope !3805, !noalias !3808
  store i64 1, i64* %.repack914, align 8, !dbg !3804, !alias.scope !3810, !noalias !3811
  %_augmented369 = call fastcc { double addrspace(13)* addrspace(10)*, i64, i64 } @augmented_julia_copyto_unaliased__1984.202({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* nocapture nofree writeonly align 8 "enzyme_sret" %348, [1 x {} addrspace(10)*]* nocapture nofree writeonly align 8 "enzymejl_returnRoots" %349, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree readonly align 8 %645, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'ipc358", {} addrspace(10)* readonly align 16 %value_phi673, {} addrspace(10)* align 16 %2154), !dbg !3804
  %2155 = load { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)*, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)** %_augmented369_cache, align 8, !dbg !3804, !dereferenceable !306, !invariant.group !3528
  %2156 = getelementptr inbounds { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %2155, i64 %iv9, !dbg !3804
  store { double addrspace(13)* addrspace(10)*, i64, i64 } %_augmented369, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %2156, align 8, !dbg !3804, !invariant.group !3812
  %2157 = bitcast { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %2155 to {} addrspace(10)*, !dbg !3804
  %2158 = extractvalue { double addrspace(13)* addrspace(10)*, i64, i64 } %_augmented369, 0, !dbg !3804
  %2159 = bitcast double addrspace(13)* addrspace(10)* %2158 to {} addrspace(10)*, !dbg !3804
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2157, {} addrspace(10)* %2159), !dbg !3804
  %2160 = load i8*, i8** %_cache400, align 8, !dbg !3804, !dereferenceable !306, !invariant.group !3539
  %2161 = getelementptr inbounds i8, i8* %2160, i64 %iv9, !dbg !3804
  store i8 1, i8* %2161, align 1, !dbg !3804, !invariant.group !3781
  br label %L956, !dbg !3804

L873:                                             ; preds = %L843
  %2162 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %641) #75, !dbg !3813
  %2163 = bitcast {}* %2162 to i8**, !dbg !3813
  %arrayptr675 = load i8*, i8** %2163, align 8, !dbg !3813, !tbaa !73, !invariant.load !68, !alias.scope !3049, !noalias !3052, !nonnull !68
  %2164 = addrspacecast {} addrspace(10)* %2087 to {} addrspace(11)*, !dbg !3824
  %2165 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %2164) #75, !dbg !3824
  %2166 = bitcast {}* %2165 to i8**, !dbg !3824
  %arrayptr677 = load i8*, i8** %2166, align 8, !dbg !3824, !tbaa !382, !alias.scope !3768, !noalias !3771, !nonnull !68
  %.not918.not = icmp eq i8* %arrayptr675, %arrayptr677, !dbg !3827
  %2167 = load i1*, i1** %.not918.not_cache, align 8, !dbg !3818, !dereferenceable !306, !invariant.group !3532
  %2168 = getelementptr inbounds i1, i1* %2167, i64 %iv9, !dbg !3818
  store i1 %.not918.not, i1* %2168, align 1, !dbg !3818, !invariant.group !3830
  br i1 %.not918.not, label %L881, label %L886, !dbg !3818

L881:                                             ; preds = %L873
  %2169 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %2074), !dbg !3831
  %2170 = bitcast {} addrspace(10)* %2087 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3831
  %2171 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2170, i32 0, i32 3, !dbg !3831
  %2172 = load i16, i16 addrspace(10)* %2171, align 2, !dbg !3831
  %2173 = zext i16 %2172 to i64, !dbg !3831
  %2174 = bitcast {} addrspace(10)* %2087 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3831
  %2175 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %2174, i32 0, i32 1, !dbg !3831
  %2176 = load i64, i64 addrspace(10)* %2175, align 8, !dbg !3831
  %2177 = mul i64 %2176, %2173, !dbg !3831
  %2178 = bitcast {} addrspace(10)* %2074 to i8 addrspace(13)* addrspace(10)*, !dbg !3831
  %2179 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2178, align 8, !dbg !3831
  %2180 = bitcast {} addrspace(10)* %2169 to i8 addrspace(13)* addrspace(10)*, !dbg !3831
  %2181 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2180, align 8, !dbg !3831
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %2181, i8 0, i64 %2177, i1 false), !dbg !3831
  %2182 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* nonnull %2087) #72, !dbg !3831
  %2183 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi39_cache", align 8, !dereferenceable !306, !invariant.group !3529
  %2184 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2183, i64 %iv9
  store {} addrspace(10)* %2169, {} addrspace(10)* addrspace(10)* %2184, align 8, !invariant.group !3833
  %2185 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache393, align 8, !dereferenceable !306, !invariant.group !3533
  %2186 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2185, i64 %iv9
  store {} addrspace(10)* %2169, {} addrspace(10)* addrspace(10)* %2186, align 8, !invariant.group !3834
  %2187 = bitcast {} addrspace(10)* addrspace(10)* %2185 to {} addrspace(10)*
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2187, {} addrspace(10)* %2169)
  %2188 = bitcast {} addrspace(10)* addrspace(10)* %2183 to {} addrspace(10)*
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2188, {} addrspace(10)* %2169)
  %.phi.trans.insert976 = bitcast {} addrspace(10)* %2182 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert977 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %.phi.trans.insert976 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr679.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert977, i64 0, i32 1
  %arraylen680.pre = load i64, i64 addrspace(11)* %arraylen_ptr679.phi.trans.insert, align 8, !dbg !3835, !tbaa !332, !range !87, !alias.scope !3839, !noalias !3842
  br label %L886, !dbg !3798

L886:                                             ; preds = %L881, %L873
  %arraylen680 = phi i64 [ %arraylen680.pre, %L881 ], [ %arraylen461, %L873 ], !dbg !3835
  %2189 = phi {} addrspace(10)* [ %2169, %L881 ], [ %2074, %L873 ]
  %value_phi678 = phi {} addrspace(10)* [ %2182, %L881 ], [ %2087, %L873 ]
  %.not921 = icmp eq i64 %arraylen680, 1, !dbg !3844
  %2190 = load i1*, i1** %.not921_cache, align 8, !dbg !3848, !dereferenceable !306, !invariant.group !3536
  %2191 = getelementptr inbounds i1, i1* %2190, i64 %iv9, !dbg !3848
  store i1 %.not921, i1* %2191, align 1, !dbg !3848, !invariant.group !3850
  %2192 = load i8*, i8** %_cache400, align 8, !dbg !3848, !dereferenceable !306, !invariant.group !3539
  %2193 = getelementptr inbounds i8, i8* %2192, i64 %iv9, !dbg !3848
  store i8 2, i8* %2193, align 1, !dbg !3848, !invariant.group !3781
  br i1 %.not816, label %L956, label %L928.lr.ph, !dbg !3848

L928.lr.ph:                                       ; preds = %L886
  %"'ipc384" = bitcast {} addrspace(10)* %2189 to double addrspace(13)* addrspace(10)*
  %2194 = bitcast {} addrspace(10)* %value_phi678 to double addrspace(13)* addrspace(10)*
  %"'ipc385" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc384" to double addrspace(13)* addrspace(11)*
  %2195 = addrspacecast double addrspace(13)* addrspace(10)* %2194 to double addrspace(13)* addrspace(11)*
  %"arrayptr688922'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc385", align 8, !tbaa !382, !alias.scope !3851, !noalias !3854, !nonnull !68, !invariant.group !3856
  %arrayptr688922 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %2195, align 8, !tbaa !382, !alias.scope !3857, !noalias !3858, !nonnull !68
  br label %L928, !dbg !3859

L928:                                             ; preds = %L928, %L928.lr.ph
  %iv13 = phi i64 [ %iv.next14, %L928 ], [ 0, %L928.lr.ph ]
  %iv.next14 = add nuw nsw i64 %iv13, 1, !dbg !3860
  %2196 = select i1 %.not921, i64 0, i64 %iv13, !dbg !3860
  %"'ipg391" = getelementptr inbounds double, double addrspace(13)* %"arrayptr688922'ipl", i64 %2196, !dbg !3860
  %2197 = getelementptr inbounds double, double addrspace(13)* %arrayptr688922, i64 %2196, !dbg !3860
  %arrayref689 = load double, double addrspace(13)* %2197, align 8, !dbg !3860, !tbaa !269, !alias.scope !3867, !noalias !3870
  %2198 = add i64 %iv13, %2073, !dbg !3872
  %"'ipg386" = getelementptr inbounds double, double addrspace(13)* %"arrayptr692923'ipl", i64 %2198, !dbg !3872
  %2199 = getelementptr inbounds double, double addrspace(13)* %arrayptr692923, i64 %2198, !dbg !3872
  store double %arrayref689, double addrspace(13)* %2199, align 8, !dbg !3872, !tbaa !269, !alias.scope !3874, !noalias !3877
  %exitcond.not = icmp eq i64 %iv.next14, %arraysize, !dbg !3879
  br i1 %exitcond.not, label %L956.loopexit, label %L928, !dbg !3859, !llvm.loop !3880

L956.loopexit:                                    ; preds = %L928
  %2200 = load i8*, i8** %_cache400, align 8, !dbg !3881, !dereferenceable !306, !invariant.group !3539
  %2201 = getelementptr inbounds i8, i8* %2200, i64 %iv9, !dbg !3881
  store i8 3, i8* %2201, align 1, !dbg !3881, !invariant.group !3781
  br label %L956, !dbg !3881

L956:                                             ; preds = %L956.loopexit, %L886, %L869, %L854
  %2202 = fadd double %406, %value_phi372, !dbg !3881
  %arraylen472 = load i64, i64 addrspace(11)* %arraylen_ptr471, align 8, !dbg !3883, !tbaa !332, !range !87, !alias.scope !3887, !noalias !3890
  %.not883 = icmp eq i64 %arraylen472, 0, !dbg !3892
  %2203 = load i8*, i8** %_cache592, align 8, !dbg !3884, !dereferenceable !306, !invariant.group !3584
  %2204 = getelementptr inbounds i8, i8* %2203, i64 %iv9, !dbg !3884
  store i8 1, i8* %2204, align 1, !dbg !3884, !invariant.group !3894
  br i1 %.not883, label %pass606.2, label %L973, !dbg !3884

L973:                                             ; preds = %L956
  %arrayptr474884 = load i64 addrspace(13)*, i64 addrspace(13)* addrspace(11)* %649, align 16, !dbg !3895, !tbaa !382, !alias.scope !3896, !noalias !3890, !nonnull !68
  %value_phi4791017 = load i64, i64 addrspace(13)* %arrayptr474884, align 8, !dbg !3897, !tbaa !269, !alias.scope !3898, !noalias !3901
  %.not8851018 = icmp eq i64 %value_phi4791017, %1811, !dbg !3903
  %2205 = load i1*, i1** %.not8851018_cache, align 8, !dbg !3905, !dereferenceable !306, !invariant.group !3545
  %2206 = getelementptr inbounds i1, i1* %2205, i64 %iv9, !dbg !3905
  store i1 %.not8851018, i1* %2206, align 1, !dbg !3905, !invariant.group !3906
  br i1 %.not8851018, label %L1001.critedge, label %L980.lr.ph, !dbg !3905

L980.lr.ph:                                       ; preds = %L973
  %2207 = add nuw nsw i64 %arraylen472, 1, !dbg !3905
  br label %L980, !dbg !3905

L980:                                             ; preds = %L992, %L980.lr.ph
  %iv15 = phi i64 [ %iv.next16, %L992 ], [ 0, %L980.lr.ph ]
  %iv.next16 = add nuw nsw i64 %iv15, 1, !dbg !3907
  %2208 = add i64 %iv15, 2, !dbg !3907
  %exitcond1037.not = icmp eq i64 %2208, %2207, !dbg !3907
  br i1 %exitcond1037.not, label %pass606.2.loopexit, label %L992, !dbg !3798

L992:                                             ; preds = %L980
  %2209 = add nsw i64 %2208, -1, !dbg !3909
  %2210 = getelementptr inbounds i64, i64 addrspace(13)* %arrayptr474884, i64 %2209, !dbg !3911
  %value_phi479 = load i64, i64 addrspace(13)* %2210, align 8, !dbg !3897, !tbaa !269, !alias.scope !3898, !noalias !3901
  %.not885 = icmp eq i64 %value_phi479, %1811, !dbg !3903
  br i1 %.not885, label %L1001.critedge.loopexit, label %L980, !dbg !3905

L1001.critedge.loopexit:                          ; preds = %L992
  br label %L1001.critedge, !dbg !3912

L1001.critedge:                                   ; preds = %L1001.critedge.loopexit, %L973
  %2211 = load double, double addrspace(11)* %652, align 8, !dbg !3912, !tbaa !307, !alias.scope !3026, !noalias !3027
  %2212 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize492), !dbg !3914
  %2213 = mul i64 %arraysize492, 8, !dbg !3914
  %2214 = bitcast {} addrspace(10)* %2212 to i8 addrspace(13)* addrspace(10)*, !dbg !3914
  %2215 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2214, align 8, !dbg !3914
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2215, i8 0, i64 %2213, i1 false), !dbg !3914
  %2216 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize492) #76, !dbg !3914
  %_augmented410 = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1994({} addrspace(10)* align 16 %2216, {} addrspace(10)* align 16 %2212, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl"), !dbg !3919
  %subcache411 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented410, 0, !dbg !3919
  %2217 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented410, 1, !dbg !3919
  %"'ac412" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented410, 2, !dbg !3919
  store i64 %arraysize494, i64* %memcpy_refined_dst502, align 8, !dbg !3922, !tbaa !133, !alias.scope !135, !noalias !3056
  %2218 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented410_cache, align 8, !dbg !3922, !dereferenceable !306, !invariant.group !3555
  %2219 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2218, i64 %iv9, !dbg !3922
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented410, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2219, align 8, !dbg !3922, !invariant.group !3925
  %2220 = bitcast { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2218 to {} addrspace(10)*, !dbg !3922
  %2221 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented410, 0, !dbg !3922
  %2222 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented410, 1, !dbg !3922
  %2223 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented410, 2, !dbg !3922
  %2224 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2221, 1, !dbg !3922
  %2225 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2221, 2, !dbg !3922
  %2226 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2221, 4, !dbg !3922
  %2227 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2221, 5, !dbg !3922
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2220, {} addrspace(10)* %2222, {} addrspace(10)* %2223, {} addrspace(10)* %2224, {} addrspace(10)* %2225, {} addrspace(10)* %2226, {} addrspace(10)* %2227), !dbg !3922
  %2228 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache458, align 8, !dbg !3922, !dereferenceable !306, !invariant.group !3554
  %2229 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2228, i64 %iv9, !dbg !3922
  store {} addrspace(10)* %2217, {} addrspace(10)* addrspace(10)* %2229, align 8, !dbg !3922, !invariant.group !3926
  %2230 = bitcast {} addrspace(10)* addrspace(10)* %2228 to {} addrspace(10)*, !dbg !3922
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2230, {} addrspace(10)* %2217), !dbg !3922
  %2231 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache411_cache, align 8, !dbg !3922, !dereferenceable !306, !invariant.group !3542
  %2232 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2231, i64 %iv9, !dbg !3922
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache411, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2232, align 8, !dbg !3922, !invariant.group !3927
  %2233 = bitcast { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2231 to {} addrspace(10)*, !dbg !3922
  %2234 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache411, 1, !dbg !3922
  %2235 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache411, 2, !dbg !3922
  %2236 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache411, 4, !dbg !3922
  %2237 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache411, 5, !dbg !3922
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2233, {} addrspace(10)* %2234, {} addrspace(10)* %2235, {} addrspace(10)* %2236, {} addrspace(10)* %2237), !dbg !3922
  %2238 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi41_cache", align 8, !dbg !3922, !dereferenceable !306, !invariant.group !3541
  %2239 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2238, i64 %iv9, !dbg !3922
  store {} addrspace(10)* %2212, {} addrspace(10)* addrspace(10)* %2239, align 8, !dbg !3922, !invariant.group !3928
  %2240 = bitcast {} addrspace(10)* addrspace(10)* %2238 to {} addrspace(10)*, !dbg !3922
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2240, {} addrspace(10)* %2212), !dbg !3922
  %2241 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache405, align 8, !dbg !3922, !dereferenceable !306, !invariant.group !3540
  %2242 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2241, i64 %iv9, !dbg !3922
  store {} addrspace(10)* %2216, {} addrspace(10)* addrspace(10)* %2242, align 8, !dbg !3922, !invariant.group !3929
  %2243 = bitcast {} addrspace(10)* addrspace(10)* %2241 to {} addrspace(10)*, !dbg !3922
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2243, {} addrspace(10)* %2216), !dbg !3922
  store i64 %1811, i64* %659, align 8, !dbg !3922, !tbaa !133, !alias.scope !135, !noalias !3056
  %.not886 = icmp ult i64 %1865, %arraysize504, !dbg !3930
  br i1 %.not886, label %L1049, label %L1046, !dbg !3935

L1046:                                            ; preds = %L1001.critedge
  %2244 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct500 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !3935
  call fastcc void @julia_throw_boundserror_1989({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield17, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %2244) #73, !dbg !3935
  unreachable

L1049:                                            ; preds = %L1001.critedge
  store i64 %arraysize494, i64* %memcpy_refined_dst508, align 8, !dbg !3936, !tbaa !133, !alias.scope !135, !noalias !3056
  %2245 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize494), !dbg !3940
  %2246 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache419, align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3546
  %2247 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2246, i64 %iv9, !dbg !3940
  store {} addrspace(10)* %2245, {} addrspace(10)* addrspace(10)* %2247, align 8, !dbg !3940, !invariant.group !3945
  %2248 = bitcast {} addrspace(10)* addrspace(10)* %2246 to {} addrspace(10)*, !dbg !3940
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2248, {} addrspace(10)* %2245), !dbg !3940
  %2249 = mul i64 %arraysize494, 8, !dbg !3940
  %2250 = bitcast {} addrspace(10)* %2245 to i8 addrspace(13)* addrspace(10)*, !dbg !3940
  %2251 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2250, align 8, !dbg !3940
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2251, i8 0, i64 %2249, i1 false), !dbg !3940
  %2252 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize494) #76, !dbg !3940
  %2253 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache474, align 8, !dbg !3946, !dereferenceable !306, !invariant.group !3561
  %2254 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2253, i64 %iv9, !dbg !3946
  store {} addrspace(10)* %2252, {} addrspace(10)* addrspace(10)* %2254, align 8, !dbg !3946, !invariant.group !3949
  %2255 = bitcast {} addrspace(10)* addrspace(10)* %2253 to {} addrspace(10)*, !dbg !3946
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2255, {} addrspace(10)* %2252), !dbg !3946
  %2256 = bitcast {} addrspace(10)* %2252 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3946
  %2257 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %2256 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3946
  %arraylen_ptr509 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %2257, i64 0, i32 1, !dbg !3946
  %arraylen510 = load i64, i64 addrspace(11)* %arraylen_ptr509, align 8, !dbg !3946, !tbaa !332, !range !87, !alias.scope !3950, !noalias !3953
  %.not887 = icmp eq i64 %arraylen510, %arraysize494, !dbg !3955
  br i1 %.not887, label %L1062, label %L1115, !dbg !3948

L1062:                                            ; preds = %L1049
  br i1 %.not888, label %L1119.L1120_crit_edge, label %L1083.preheader, !dbg !3958

L1083.preheader:                                  ; preds = %L1062
  %2258 = mul i64 %1865, %arraysize494, !dbg !3961
  %2259 = add i64 %2258, -1, !dbg !3961
  %"arrayptr649903'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc424", align 16, !alias.scope !3469, !noalias !3466, !invariant.group !3964
  %arrayptr649903 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %662, align 16, !alias.scope !3466, !noalias !3469
  %"'ipc427" = bitcast {} addrspace(10)* %2245 to double addrspace(13)* addrspace(10)*
  %2260 = bitcast {} addrspace(10)* %2252 to double addrspace(13)* addrspace(10)*
  %"'ipc428" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc427" to double addrspace(13)* addrspace(11)*
  %2261 = addrspacecast double addrspace(13)* addrspace(10)* %2260 to double addrspace(13)* addrspace(11)*
  %2262 = load i64**, i64*** %value_phi523_cache, align 8, !dbg !3965, !invariant.group !3966
  %2263 = getelementptr inbounds i64*, i64** %2262, i64 %iv9, !dbg !3965
  store i64* null, i64** %2263, align 8, !dbg !3965
  br label %L1083, !dbg !3965

L1083:                                            ; preds = %L1090, %L1083.preheader
  %iv17 = phi i64 [ %iv.next18, %L1090 ], [ 0, %L1083.preheader ]
  %value_phi522.off0 = phi i1 [ %2290, %L1090 ], [ false, %L1083.preheader ]
  %value_phi523 = phi i64 [ %value_phi655, %L1090 ], [ 1, %L1083.preheader ]
  %iv.next18 = add nuw nsw i64 %iv17, 1, !dbg !3965
  %2264 = load i64*, i64** %2263, align 8, !dbg !3965
  %2265 = bitcast i64* %2264 to i8*, !dbg !3965
  %2266 = and i64 %iv.next18, 1, !dbg !3965
  %2267 = icmp ne i64 %2266, 0, !dbg !3965
  %2268 = call i64 @llvm.ctpop.i64(i64 %iv.next18), !dbg !3965
  %2269 = icmp ult i64 %2268, 3, !dbg !3965
  %2270 = and i1 %2269, %2267, !dbg !3965
  br i1 %2270, label %grow.i669, label %__enzyme_exponentialallocationzero.exit670, !dbg !3965

grow.i669:                                        ; preds = %L1083
  %2271 = call i64 @llvm.ctlz.i64(i64 %iv.next18, i1 true), !dbg !3965
  %2272 = sub nuw nsw i64 64, %2271, !dbg !3965
  %2273 = shl i64 8, %2272, !dbg !3965
  %2274 = icmp eq i64 %iv.next18, 1, !dbg !3965
  %2275 = lshr i64 %2273, 1, !dbg !3965
  %2276 = select i1 %2274, i64 0, i64 %2275, !dbg !3965
  %2277 = call i8* @realloc(i8* %2265, i64 %2273) #77, !dbg !3965
  %2278 = sub i64 %2273, %2276, !dbg !3965
  %2279 = getelementptr inbounds i8, i8* %2277, i64 %2276, !dbg !3965
  call void @llvm.memset.p0i8.i64(i8* %2279, i8 0, i64 %2278, i1 false), !dbg !3965
  br label %__enzyme_exponentialallocationzero.exit670, !dbg !3965

__enzyme_exponentialallocationzero.exit670:       ; preds = %L1083, %grow.i669
  %2280 = phi i8* [ %2277, %grow.i669 ], [ %2265, %L1083 ], !dbg !3965
  %2281 = bitcast i8* %2280 to i64*, !dbg !3965
  store i64* %2281, i64** %2263, align 8, !dbg !3965
  %2282 = load i64**, i64*** %value_phi523_cache, align 8, !dbg !3965, !dereferenceable !306, !invariant.group !3549
  %2283 = getelementptr inbounds i64*, i64** %2282, i64 %iv9, !dbg !3965
  %2284 = load i64*, i64** %2283, align 8, !dbg !3965, !dereferenceable !306, !invariant.group !3967
  %2285 = getelementptr inbounds i64, i64* %2284, i64 %iv17, !dbg !3965
  store i64 %value_phi523, i64* %2285, align 8, !dbg !3965, !invariant.group !3968
  br i1 %value_phi522.off0, label %L1119.L1120_crit_edge.loopexit, label %L1090, !dbg !3965

L1090:                                            ; preds = %__enzyme_exponentialallocationzero.exit670
  %2286 = add i64 %2259, %iv.next18, !dbg !3961
  %"'ipg435" = getelementptr inbounds double, double addrspace(13)* %"arrayptr649903'ipl", i64 %2286, !dbg !3961
  %2287 = getelementptr inbounds double, double addrspace(13)* %arrayptr649903, i64 %2286, !dbg !3961
  %arrayref650 = load double, double addrspace(13)* %2287, align 8, !dbg !3961, !tbaa !269, !alias.scope !3969, !noalias !3972
  %2288 = add i64 %value_phi523, -1, !dbg !3974
  %"arrayptr652904'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc428", align 8, !dbg !3974, !tbaa !382, !alias.scope !3975, !noalias !3976, !nonnull !68
  %arrayptr652904 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %2261, align 8, !dbg !3974, !tbaa !382, !alias.scope !3977, !noalias !3953, !nonnull !68
  %"'ipg426" = getelementptr inbounds double, double addrspace(13)* %"arrayptr652904'ipl", i64 %2288, !dbg !3974
  %2289 = getelementptr inbounds double, double addrspace(13)* %arrayptr652904, i64 %2288, !dbg !3974
  store double %arrayref650, double addrspace(13)* %2289, align 8, !dbg !3974, !tbaa !269, !alias.scope !3978, !noalias !3981
  %2290 = icmp eq i64 %value_phi523, %arraysize494, !dbg !3983
  %2291 = add i64 %value_phi523, 1, !dbg !3984
  %value_phi655 = select i1 %2290, i64 undef, i64 %2291, !dbg !3984
  %.not905 = icmp eq i64 %iv.next18, %arraysize494, !dbg !3986
  br i1 %.not905, label %L1119.L1120_crit_edge.loopexit, label %L1083, !dbg !3989

L1115:                                            ; preds = %L1049
  %2292 = addrspacecast [1 x [1 x i64]]* %newstruct506 to [1 x [1 x i64]] addrspace(11)*, !dbg !3948
  call fastcc void @julia_throw_checksize_error_1987({} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %2252, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %2292) #73, !dbg !3948
  unreachable

L1119.L1120_crit_edge.loopexit:                   ; preds = %L1090, %__enzyme_exponentialallocationzero.exit670
  %"value_phi522.off0!manual_lcssa" = phi i1 [ %value_phi522.off0, %L1090 ], [ %value_phi522.off0, %__enzyme_exponentialallocationzero.exit670 ], !dbg !3914
  %2293 = phi i64 [ %iv17, %L1090 ], [ %iv17, %__enzyme_exponentialallocationzero.exit670 ], !dbg !3914
  %2294 = load i64*, i64** %loopLimit_cache45, align 8, !dbg !3914, !dereferenceable !306, !invariant.group !3478
  %2295 = getelementptr inbounds i64, i64* %2294, i64 %iv9, !dbg !3914
  store i64 %2293, i64* %2295, align 8, !dbg !3914, !invariant.group !3990
  br label %L1119.L1120_crit_edge, !dbg !3914

L1119.L1120_crit_edge:                            ; preds = %L1119.L1120_crit_edge.loopexit, %L1062
  %2296 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize492), !dbg !3914
  %2297 = mul i64 %arraysize492, 8, !dbg !3914
  %2298 = bitcast {} addrspace(10)* %2296 to i8 addrspace(13)* addrspace(10)*, !dbg !3914
  %2299 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2298, align 8, !dbg !3914
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2299, i8 0, i64 %2297, i1 false), !dbg !3914
  %2300 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize492) #76, !dbg !3914
  %_augmented477 = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1994({} addrspace(10)* align 16 %2300, {} addrspace(10)* align 16 %2296, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %2252, {} addrspace(10)* align 16 %2245), !dbg !3919
  %subcache478 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented477, 0, !dbg !3919
  %2301 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented477, 1, !dbg !3919
  %"'ac479" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented477, 2, !dbg !3919
  %_augmented466 = call fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2044({} addrspace(10)* align 16 %2217, {} addrspace(10)* align 16 %"'ac412", {} addrspace(10)* align 16 %2301, {} addrspace(10)* align 16 %"'ac479"), !dbg !3913
  %subcache467 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented466, 0, !dbg !3913
  %2302 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented466, 1, !dbg !3913
  %"'ac468" = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented466, 2, !dbg !3913
  %2303 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize492), !dbg !3914
  %2304 = mul i64 %arraysize492, 8, !dbg !3914
  %2305 = bitcast {} addrspace(10)* %2303 to i8 addrspace(13)* addrspace(10)*, !dbg !3914
  %2306 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2305, align 8, !dbg !3914
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2306, i8 0, i64 %2304, i1 false), !dbg !3914
  %2307 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize492) #76, !dbg !3914
  %_augmented454 = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1994({} addrspace(10)* align 16 %2307, {} addrspace(10)* align 16 %2303, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl"), !dbg !3919
  %subcache455 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented454, 0, !dbg !3919
  %2308 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented454, 1, !dbg !3919
  %"'ac456" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented454, 2, !dbg !3919
  store i64 %arraysize494, i64* %memcpy_refined_dst564, align 8, !dbg !3936, !tbaa !133, !alias.scope !135, !noalias !3056
  %2309 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented454_cache, align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3570
  %2310 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2309, i64 %iv9, !dbg !3940
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented454, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2310, align 8, !dbg !3940, !invariant.group !3991
  %2311 = bitcast { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2309 to {} addrspace(10)*, !dbg !3940
  %2312 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented454, 0, !dbg !3940
  %2313 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented454, 1, !dbg !3940
  %2314 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented454, 2, !dbg !3940
  %2315 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2312, 1, !dbg !3940
  %2316 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2312, 2, !dbg !3940
  %2317 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2312, 4, !dbg !3940
  %2318 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2312, 5, !dbg !3940
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2311, {} addrspace(10)* %2313, {} addrspace(10)* %2314, {} addrspace(10)* %2315, {} addrspace(10)* %2316, {} addrspace(10)* %2317, {} addrspace(10)* %2318), !dbg !3940
  %2319 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache521, align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3569
  %2320 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2319, i64 %iv9, !dbg !3940
  store {} addrspace(10)* %2308, {} addrspace(10)* addrspace(10)* %2320, align 8, !dbg !3940, !invariant.group !3992
  %2321 = bitcast {} addrspace(10)* addrspace(10)* %2319 to {} addrspace(10)*, !dbg !3940
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2321, {} addrspace(10)* %2308), !dbg !3940
  %2322 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache478_cache, align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3562
  %2323 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2322, i64 %iv9, !dbg !3940
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache478, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2323, align 8, !dbg !3940, !invariant.group !3993
  %2324 = bitcast { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2322 to {} addrspace(10)*, !dbg !3940
  %2325 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache478, 1, !dbg !3940
  %2326 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache478, 2, !dbg !3940
  %2327 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache478, 4, !dbg !3940
  %2328 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache478, 5, !dbg !3940
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2324, {} addrspace(10)* %2325, {} addrspace(10)* %2326, {} addrspace(10)* %2327, {} addrspace(10)* %2328), !dbg !3940
  %2329 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi49_cache", align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3560
  %2330 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2329, i64 %iv9, !dbg !3940
  store {} addrspace(10)* %2296, {} addrspace(10)* addrspace(10)* %2330, align 8, !dbg !3940, !invariant.group !3994
  %2331 = bitcast {} addrspace(10)* addrspace(10)* %2329 to {} addrspace(10)*, !dbg !3940
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2331, {} addrspace(10)* %2296), !dbg !3940
  %2332 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache470, align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3559
  %2333 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2332, i64 %iv9, !dbg !3940
  store {} addrspace(10)* %2300, {} addrspace(10)* addrspace(10)* %2333, align 8, !dbg !3940, !invariant.group !3995
  %2334 = bitcast {} addrspace(10)* addrspace(10)* %2332 to {} addrspace(10)*, !dbg !3940
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2334, {} addrspace(10)* %2300), !dbg !3940
  %2335 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache467_cache, align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3558
  %2336 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %2335, i64 %iv9, !dbg !3940
  store { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache467, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %2336, align 8, !dbg !3940, !invariant.group !3996
  %2337 = bitcast { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %2335 to {} addrspace(10)*, !dbg !3940
  %2338 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache467, 0, !dbg !3940
  %2339 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache467, 1, !dbg !3940
  %2340 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache467, 2, !dbg !3940
  %2341 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache467, 3, !dbg !3940
  %2342 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache467, 4, !dbg !3940
  %2343 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache467, 5, !dbg !3940
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2337, {} addrspace(10)* %2338, {} addrspace(10)* %2339, {} addrspace(10)* %2340, {} addrspace(10)* %2341, {} addrspace(10)* %2342, {} addrspace(10)* %2343), !dbg !3940
  %2344 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi50_cache", align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3557
  %2345 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2344, i64 %iv9, !dbg !3940
  store {} addrspace(10)* %"'ac479", {} addrspace(10)* addrspace(10)* %2345, align 8, !dbg !3940, !invariant.group !3997
  %2346 = bitcast {} addrspace(10)* addrspace(10)* %2344 to {} addrspace(10)*, !dbg !3940
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2346, {} addrspace(10)* %"'ac479"), !dbg !3940
  %2347 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache462, align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3556
  %2348 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2347, i64 %iv9, !dbg !3940
  store {} addrspace(10)* %2301, {} addrspace(10)* addrspace(10)* %2348, align 8, !dbg !3940, !invariant.group !3998
  %2349 = bitcast {} addrspace(10)* addrspace(10)* %2347 to {} addrspace(10)*, !dbg !3940
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2349, {} addrspace(10)* %2301), !dbg !3940
  %2350 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache455_cache, align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3553
  %2351 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2350, i64 %iv9, !dbg !3940
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache455, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2351, align 8, !dbg !3940, !invariant.group !3999
  %2352 = bitcast { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2350 to {} addrspace(10)*, !dbg !3940
  %2353 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache455, 1, !dbg !3940
  %2354 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache455, 2, !dbg !3940
  %2355 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache455, 4, !dbg !3940
  %2356 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache455, 5, !dbg !3940
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2352, {} addrspace(10)* %2353, {} addrspace(10)* %2354, {} addrspace(10)* %2355, {} addrspace(10)* %2356), !dbg !3940
  %2357 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi53_cache", align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3552
  %2358 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2357, i64 %iv9, !dbg !3940
  store {} addrspace(10)* %2303, {} addrspace(10)* addrspace(10)* %2358, align 8, !dbg !3940, !invariant.group !4000
  %2359 = bitcast {} addrspace(10)* addrspace(10)* %2357 to {} addrspace(10)*, !dbg !3940
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2359, {} addrspace(10)* %2303), !dbg !3940
  %2360 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache450, align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3551
  %2361 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2360, i64 %iv9, !dbg !3940
  store {} addrspace(10)* %2307, {} addrspace(10)* addrspace(10)* %2361, align 8, !dbg !3940, !invariant.group !4001
  %2362 = bitcast {} addrspace(10)* addrspace(10)* %2360 to {} addrspace(10)*, !dbg !3940
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2362, {} addrspace(10)* %2307), !dbg !3940
  %2363 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize494), !dbg !3940
  %2364 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache446, align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3550
  %2365 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2364, i64 %iv9, !dbg !3940
  store {} addrspace(10)* %2363, {} addrspace(10)* addrspace(10)* %2365, align 8, !dbg !3940, !invariant.group !4002
  %2366 = bitcast {} addrspace(10)* addrspace(10)* %2364 to {} addrspace(10)*, !dbg !3940
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2366, {} addrspace(10)* %2363), !dbg !3940
  %2367 = mul i64 %arraysize494, 8, !dbg !3940
  %2368 = bitcast {} addrspace(10)* %2363 to i8 addrspace(13)* addrspace(10)*, !dbg !3940
  %2369 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2368, align 8, !dbg !3940
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2369, i8 0, i64 %2367, i1 false), !dbg !3940
  %2370 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize494) #76, !dbg !3940
  %2371 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache537, align 8, !dbg !3946, !dereferenceable !306, !invariant.group !3576
  %2372 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2371, i64 %iv9, !dbg !3946
  store {} addrspace(10)* %2370, {} addrspace(10)* addrspace(10)* %2372, align 8, !dbg !3946, !invariant.group !4003
  %2373 = bitcast {} addrspace(10)* addrspace(10)* %2371 to {} addrspace(10)*, !dbg !3946
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2373, {} addrspace(10)* %2370), !dbg !3946
  %2374 = bitcast {} addrspace(10)* %2370 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !3946
  %2375 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %2374 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !3946
  %arraylen_ptr565 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %2375, i64 0, i32 1, !dbg !3946
  %arraylen566 = load i64, i64 addrspace(11)* %arraylen_ptr565, align 8, !dbg !3946, !tbaa !332, !range !87, !alias.scope !4004, !noalias !4007
  %.not892 = icmp eq i64 %arraylen566, %arraysize494, !dbg !3955
  br i1 %.not892, label %L1207, label %L1260, !dbg !3948

L1207:                                            ; preds = %L1119.L1120_crit_edge
  br i1 %.not888, label %L1264.L1265_crit_edge, label %L1228.preheader, !dbg !3958

L1228.preheader:                                  ; preds = %L1207
  %2376 = mul i64 %1865, %arraysize494, !dbg !3961
  %2377 = add i64 %2376, -1, !dbg !3961
  %"arrayptr633900'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc424", align 16, !alias.scope !3469, !noalias !3466, !invariant.group !4009
  %arrayptr633900 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %662, align 16, !alias.scope !3466, !noalias !3469
  %"'ipc483" = bitcast {} addrspace(10)* %2363 to double addrspace(13)* addrspace(10)*
  %2378 = bitcast {} addrspace(10)* %2370 to double addrspace(13)* addrspace(10)*
  %"'ipc484" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc483" to double addrspace(13)* addrspace(11)*
  %2379 = addrspacecast double addrspace(13)* addrspace(10)* %2378 to double addrspace(13)* addrspace(11)*
  %2380 = load i64**, i64*** %value_phi579_cache, align 8, !dbg !3965, !invariant.group !4010
  %2381 = getelementptr inbounds i64*, i64** %2380, i64 %iv9, !dbg !3965
  store i64* null, i64** %2381, align 8, !dbg !3965
  br label %L1228, !dbg !3965

L1228:                                            ; preds = %L1235, %L1228.preheader
  %iv19 = phi i64 [ %iv.next20, %L1235 ], [ 0, %L1228.preheader ]
  %value_phi578.off0 = phi i1 [ %2408, %L1235 ], [ false, %L1228.preheader ]
  %value_phi579 = phi i64 [ %value_phi639, %L1235 ], [ 1, %L1228.preheader ]
  %iv.next20 = add nuw nsw i64 %iv19, 1, !dbg !3965
  %2382 = load i64*, i64** %2381, align 8, !dbg !3965
  %2383 = bitcast i64* %2382 to i8*, !dbg !3965
  %2384 = and i64 %iv.next20, 1, !dbg !3965
  %2385 = icmp ne i64 %2384, 0, !dbg !3965
  %2386 = call i64 @llvm.ctpop.i64(i64 %iv.next20), !dbg !3965
  %2387 = icmp ult i64 %2386, 3, !dbg !3965
  %2388 = and i1 %2387, %2385, !dbg !3965
  br i1 %2388, label %grow.i671, label %__enzyme_exponentialallocationzero.exit672, !dbg !3965

grow.i671:                                        ; preds = %L1228
  %2389 = call i64 @llvm.ctlz.i64(i64 %iv.next20, i1 true), !dbg !3965
  %2390 = sub nuw nsw i64 64, %2389, !dbg !3965
  %2391 = shl i64 8, %2390, !dbg !3965
  %2392 = icmp eq i64 %iv.next20, 1, !dbg !3965
  %2393 = lshr i64 %2391, 1, !dbg !3965
  %2394 = select i1 %2392, i64 0, i64 %2393, !dbg !3965
  %2395 = call i8* @realloc(i8* %2383, i64 %2391) #77, !dbg !3965
  %2396 = sub i64 %2391, %2394, !dbg !3965
  %2397 = getelementptr inbounds i8, i8* %2395, i64 %2394, !dbg !3965
  call void @llvm.memset.p0i8.i64(i8* %2397, i8 0, i64 %2396, i1 false), !dbg !3965
  br label %__enzyme_exponentialallocationzero.exit672, !dbg !3965

__enzyme_exponentialallocationzero.exit672:       ; preds = %L1228, %grow.i671
  %2398 = phi i8* [ %2395, %grow.i671 ], [ %2383, %L1228 ], !dbg !3965
  %2399 = bitcast i8* %2398 to i64*, !dbg !3965
  store i64* %2399, i64** %2381, align 8, !dbg !3965
  %2400 = load i64**, i64*** %value_phi579_cache, align 8, !dbg !3965, !dereferenceable !306, !invariant.group !3565
  %2401 = getelementptr inbounds i64*, i64** %2400, i64 %iv9, !dbg !3965
  %2402 = load i64*, i64** %2401, align 8, !dbg !3965, !dereferenceable !306, !invariant.group !4011
  %2403 = getelementptr inbounds i64, i64* %2402, i64 %iv19, !dbg !3965
  store i64 %value_phi579, i64* %2403, align 8, !dbg !3965, !invariant.group !4012
  br i1 %value_phi578.off0, label %L1264.L1265_crit_edge.loopexit, label %L1235, !dbg !3965

L1235:                                            ; preds = %__enzyme_exponentialallocationzero.exit672
  %2404 = add i64 %2377, %iv.next20, !dbg !3961
  %"'ipg491" = getelementptr inbounds double, double addrspace(13)* %"arrayptr633900'ipl", i64 %2404, !dbg !3961
  %2405 = getelementptr inbounds double, double addrspace(13)* %arrayptr633900, i64 %2404, !dbg !3961
  %arrayref634 = load double, double addrspace(13)* %2405, align 8, !dbg !3961, !tbaa !269, !alias.scope !4013, !noalias !4016
  %2406 = add i64 %value_phi579, -1, !dbg !3974
  %"arrayptr636901'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc484", align 8, !dbg !3974, !tbaa !382, !alias.scope !4018, !noalias !4019, !nonnull !68
  %arrayptr636901 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %2379, align 8, !dbg !3974, !tbaa !382, !alias.scope !4020, !noalias !4007, !nonnull !68
  %"'ipg482" = getelementptr inbounds double, double addrspace(13)* %"arrayptr636901'ipl", i64 %2406, !dbg !3974
  %2407 = getelementptr inbounds double, double addrspace(13)* %arrayptr636901, i64 %2406, !dbg !3974
  store double %arrayref634, double addrspace(13)* %2407, align 8, !dbg !3974, !tbaa !269, !alias.scope !4021, !noalias !4024
  %2408 = icmp eq i64 %value_phi579, %arraysize494, !dbg !3983
  %2409 = add i64 %value_phi579, 1, !dbg !3984
  %value_phi639 = select i1 %2408, i64 undef, i64 %2409, !dbg !3984
  %.not902 = icmp eq i64 %iv.next20, %arraysize494, !dbg !3986
  br i1 %.not902, label %L1264.L1265_crit_edge.loopexit, label %L1228, !dbg !3989

L1260:                                            ; preds = %L1119.L1120_crit_edge
  %2410 = addrspacecast [1 x [1 x i64]]* %newstruct562 to [1 x [1 x i64]] addrspace(11)*, !dbg !3948
  call fastcc void @julia_throw_checksize_error_1987({} addrspace(10)* noundef nonnull readonly align 16 dereferenceable(40) %2370, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %2410) #73, !dbg !3948
  unreachable

L1264.L1265_crit_edge.loopexit:                   ; preds = %L1235, %__enzyme_exponentialallocationzero.exit672
  %"value_phi578.off0!manual_lcssa" = phi i1 [ %value_phi578.off0, %L1235 ], [ %value_phi578.off0, %__enzyme_exponentialallocationzero.exit672 ], !dbg !3914
  %2411 = phi i64 [ %iv19, %L1235 ], [ %iv19, %__enzyme_exponentialallocationzero.exit672 ], !dbg !3914
  %2412 = load i64*, i64** %loopLimit_cache57, align 8, !dbg !3914, !dereferenceable !306, !invariant.group !3481
  %2413 = getelementptr inbounds i64, i64* %2412, i64 %iv9, !dbg !3914
  store i64 %2411, i64* %2413, align 8, !dbg !3914, !invariant.group !4026
  br label %L1264.L1265_crit_edge, !dbg !3914

L1264.L1265_crit_edge:                            ; preds = %L1264.L1265_crit_edge.loopexit, %L1207
  %2414 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize492), !dbg !3914
  %2415 = mul i64 %arraysize492, 8, !dbg !3914
  %2416 = bitcast {} addrspace(10)* %2414 to i8 addrspace(13)* addrspace(10)*, !dbg !3914
  %2417 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2416, align 8, !dbg !3914
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2417, i8 0, i64 %2415, i1 false), !dbg !3914
  %2418 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize492) #76, !dbg !3914
  %_augmented540 = call fastcc { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_gemv__1994({} addrspace(10)* align 16 %2418, {} addrspace(10)* align 16 %2414, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %2370, {} addrspace(10)* align 16 %2363), !dbg !3919
  %subcache541 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented540, 0, !dbg !3919
  %2419 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented540, 1, !dbg !3919
  %"'ac542" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented540, 2, !dbg !3919
  %_augmented529 = call fastcc { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___2044({} addrspace(10)* align 16 %2308, {} addrspace(10)* align 16 %"'ac456", {} addrspace(10)* align 16 %2419, {} addrspace(10)* align 16 %"'ac542"), !dbg !3913
  %subcache530 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented529, 0, !dbg !3913
  %2420 = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented529, 1, !dbg !3913
  %"'ac531" = extractvalue { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %_augmented529, 2, !dbg !3913
  store {} addrspace(10)* %"'ac468", {} addrspace(10)** %"'ipg520", align 8, !dbg !3913, !alias.scope !4027, !noalias !4030
  %2421 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache541_cache, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3577
  %2422 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2421, i64 %iv9, !dbg !3913
  store { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache541, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2422, align 8, !dbg !3913, !invariant.group !4032
  %2423 = bitcast { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2421 to {} addrspace(10)*, !dbg !3913
  %2424 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache541, 1, !dbg !3913
  %2425 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache541, 2, !dbg !3913
  %2426 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache541, 4, !dbg !3913
  %2427 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %subcache541, 5, !dbg !3913
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2423, {} addrspace(10)* %2424, {} addrspace(10)* %2425, {} addrspace(10)* %2426, {} addrspace(10)* %2427), !dbg !3913
  %2428 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi61_cache", align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3575
  %2429 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2428, i64 %iv9, !dbg !3913
  store {} addrspace(10)* %2414, {} addrspace(10)* addrspace(10)* %2429, align 8, !dbg !3913, !invariant.group !4033
  %2430 = bitcast {} addrspace(10)* addrspace(10)* %2428 to {} addrspace(10)*, !dbg !3913
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2430, {} addrspace(10)* %2414), !dbg !3913
  %2431 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache533, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3574
  %2432 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2431, i64 %iv9, !dbg !3913
  store {} addrspace(10)* %2418, {} addrspace(10)* addrspace(10)* %2432, align 8, !dbg !3913, !invariant.group !4034
  %2433 = bitcast {} addrspace(10)* addrspace(10)* %2431 to {} addrspace(10)*, !dbg !3913
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2433, {} addrspace(10)* %2418), !dbg !3913
  %2434 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache530_cache, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3573
  %2435 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %2434, i64 %iv9, !dbg !3913
  store { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache530, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %2435, align 8, !dbg !3913, !invariant.group !4035
  %2436 = bitcast { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %2434 to {} addrspace(10)*, !dbg !3913
  %2437 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache530, 0, !dbg !3913
  %2438 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache530, 1, !dbg !3913
  %2439 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache530, 2, !dbg !3913
  %2440 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache530, 3, !dbg !3913
  %2441 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache530, 4, !dbg !3913
  %2442 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %subcache530, 5, !dbg !3913
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2436, {} addrspace(10)* %2437, {} addrspace(10)* %2438, {} addrspace(10)* %2439, {} addrspace(10)* %2440, {} addrspace(10)* %2441, {} addrspace(10)* %2442), !dbg !3913
  %2443 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi62_cache", align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3572
  %2444 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2443, i64 %iv9, !dbg !3913
  store {} addrspace(10)* %"'ac542", {} addrspace(10)* addrspace(10)* %2444, align 8, !dbg !3913, !invariant.group !4036
  %2445 = bitcast {} addrspace(10)* addrspace(10)* %2443 to {} addrspace(10)*, !dbg !3913
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2445, {} addrspace(10)* %"'ac542"), !dbg !3913
  %2446 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache525, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3571
  %2447 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2446, i64 %iv9, !dbg !3913
  store {} addrspace(10)* %2419, {} addrspace(10)* addrspace(10)* %2447, align 8, !dbg !3913, !invariant.group !4037
  %2448 = bitcast {} addrspace(10)* addrspace(10)* %2446 to {} addrspace(10)*, !dbg !3913
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2448, {} addrspace(10)* %2419), !dbg !3913
  store {} addrspace(10)* %2302, {} addrspace(10)** %663, align 8, !dbg !3913, !alias.scope !4038, !noalias !4039
  %2449 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache512, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3566
  %2450 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2449, i64 %iv9, !dbg !3913
  store {} addrspace(10)* %2420, {} addrspace(10)* addrspace(10)* %2450, align 8, !dbg !3913, !invariant.group !4040
  %2451 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi63_cache", align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3567
  %2452 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2451, i64 %iv9, !dbg !3913
  store {} addrspace(10)* %"'ac531", {} addrspace(10)* addrspace(10)* %2452, align 8, !dbg !3913, !invariant.group !4041
  %2453 = bitcast {} addrspace(10)* addrspace(10)* %2451 to {} addrspace(10)*, !dbg !3913
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2453, {} addrspace(10)* %"'ac531"), !dbg !3913
  %2454 = bitcast {} addrspace(10)* addrspace(10)* %2449 to {} addrspace(10)*, !dbg !3913
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2454, {} addrspace(10)* %2420), !dbg !3913
  %_augmented517 = call fastcc { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double } @augmented_julia___1991([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %664, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc511", {} addrspace(10)* align 16 %getfield7, {} addrspace(10)* align 16 %"getfield7'ipl", {} addrspace(10)* align 16 %2420, {} addrspace(10)* align 16 %"'ac531"), !dbg !3913
  %subcache518 = extractvalue { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double } %_augmented517, 0, !dbg !3913
  %2455 = extractvalue { { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, double } %_augmented517, 1, !dbg !3913
  %2456 = fadd double %2211, %2455, !dbg !4042
  store double %2456, double addrspace(11)* %652, align 8, !dbg !4043, !tbaa !307, !alias.scope !3026, !noalias !4044
  %2457 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)** %subcache518_cache, align 8, !dbg !4043, !dereferenceable !306, !invariant.group !3568
  %2458 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %2457, i64 %iv9, !dbg !4043
  store { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache518, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %2458, align 8, !dbg !4043, !invariant.group !4045
  %2459 = bitcast { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %2457 to {} addrspace(10)*, !dbg !4043
  %2460 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache518, 0, !dbg !4043
  %2461 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache518, 1, !dbg !4043
  %2462 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache518, 2, !dbg !4043
  %2463 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache518, 3, !dbg !4043
  %2464 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache518, 4, !dbg !4043
  %2465 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache518, 5, !dbg !4043
  %2466 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %subcache518, 8, !dbg !4043
  %2467 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2460, 1, !dbg !4043
  %2468 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2460, 2, !dbg !4043
  %2469 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2460, 4, !dbg !4043
  %2470 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2460, 5, !dbg !4043
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2459, {} addrspace(10)* %2461, {} addrspace(10)* %2462, {} addrspace(10)* %2463, {} addrspace(10)* %2464, {} addrspace(10)* %2465, {} addrspace(10)* %2466, {} addrspace(10)* %2467, {} addrspace(10)* %2468, {} addrspace(10)* %2469, {} addrspace(10)* %2470), !dbg !4043
  %2471 = load i8*, i8** %_cache592, align 8, !dbg !4043, !dereferenceable !306, !invariant.group !3584
  %2472 = getelementptr inbounds i8, i8* %2471, i64 %iv9, !dbg !4043
  store i8 2, i8* %2472, align 1, !dbg !4043, !invariant.group !3894
  br label %pass606.2, !dbg !4043

L1337:                                            ; preds = %pass606.2
  %2473 = addrspacecast { [1 x [1 x i64]], i64 }* %newstruct619 to { [1 x [1 x i64]], i64 } addrspace(11)*, !dbg !4046
  call fastcc void @julia_throw_boundserror_1989({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %getfield19, { [1 x [1 x i64]], i64 } addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %2473) #73, !dbg !4046
  unreachable

L1340:                                            ; preds = %pass606.2
  %_augmented553 = call fastcc { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } @augmented_julia__unsafe_setindex__2077.347({} addrspace(10)* align 16 %getfield19, {} addrspace(10)* align 16 %"getfield19'ipl", {} addrspace(10)* align 16 %2554, {} addrspace(10)* align 16 %2551, [1 x [1 x i64]] addrspace(11)* nocapture readonly align 8 %667, i64 signext %1811), !dbg !4050
  %2474 = load { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)** %_augmented553_cache, align 8, !dbg !4051, !dereferenceable !306, !invariant.group !3580
  %2475 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %2474, i64 %iv9, !dbg !4051
  store { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %_augmented553, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %2475, align 8, !dbg !4051, !invariant.group !4054
  %2476 = bitcast { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %2474 to {} addrspace(10)*, !dbg !4051
  %2477 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %_augmented553, 0, !dbg !4051
  %2478 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %_augmented553, 1, !dbg !4051
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2476, {} addrspace(10)* %2477, {} addrspace(10)* %2478), !dbg !4051
  %.not899 = icmp eq i64 %1811, %623, !dbg !4051
  br i1 %.not899, label %L1354.loopexit, label %L616, !dbg !4053

L1354.loopexit:                                   ; preds = %L1340
  br label %L1354, !dbg !4055

L1354:                                            ; preds = %L1354.loopexit, %L598
  br label %invertL1354, !dbg !4055

pass.2.loopexit:                                  ; preds = %L250, %__enzyme_exponentialallocationzero.exit
  %"value_phi78.off0!manual_lcssa" = phi i1 [ %value_phi78.off0, %L250 ], [ %value_phi78.off0, %__enzyme_exponentialallocationzero.exit ], !dbg !3113
  %2479 = phi i64 [ %iv1, %L250 ], [ %iv1, %__enzyme_exponentialallocationzero.exit ], !dbg !3113
  store i64 %2479, i64* %loopLimit_cache, align 8, !dbg !3113, !invariant.group !4056
  br label %pass.2, !dbg !3113

pass.2:                                           ; preds = %pass.2.loopexit, %L222
  %_augmented565 = call fastcc { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } @augmented_julia_compute_energy_2128([3 x double]* nocapture nofree writeonly align 8 "enzyme_sret" %343, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'ipa564", {} addrspace(10)* align 16 %491, {} addrspace(10)* align 16 %487, {} addrspace(10)* align 16 %getfield9, {} addrspace(10)* align 16 %"getfield9'ipl"), !dbg !3113
  %"memcpy_refined_src84'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa564", i64 0, i64 0, !dbg !4057
  %memcpy_refined_src84 = getelementptr inbounds [3 x double], [3 x double]* %343, i64 0, i64 0, !dbg !4057
  %"memcpy_refined_src86'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa564", i64 0, i64 1, !dbg !4058
  %memcpy_refined_src86 = getelementptr inbounds [3 x double], [3 x double]* %343, i64 0, i64 1, !dbg !4058
  %"memcpy_refined_src88'ipg" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa564", i64 0, i64 2, !dbg !4058
  %memcpy_refined_src88 = getelementptr inbounds [3 x double], [3 x double]* %343, i64 0, i64 2, !dbg !4058
  %2480 = load double, double* %memcpy_refined_src84, align 8, !dbg !4059, !tbaa !133, !alias.scope !4060, !noalias !4063
  %2481 = load double, double* %memcpy_refined_src86, align 8, !dbg !4059, !tbaa !133, !alias.scope !4060, !noalias !4063
  %2482 = load double, double* %memcpy_refined_src88, align 8, !dbg !4059, !tbaa !133, !alias.scope !4060, !noalias !4063
  %2483 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 3), !dbg !4065
  %2484 = bitcast {} addrspace(10)* %2483 to i8 addrspace(13)* addrspace(10)*, !dbg !4065
  %2485 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2484, align 8, !dbg !4065
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2485, i8 0, i64 24, i1 false), !dbg !4065
  %2486 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 3) #76, !dbg !4065
  %"'ipc562" = bitcast {} addrspace(10)* %2483 to double addrspace(13)* addrspace(10)*
  %2487 = bitcast {} addrspace(10)* %2486 to double addrspace(13)* addrspace(10)*
  %"'ipc563" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc562" to double addrspace(13)* addrspace(11)*
  %2488 = addrspacecast double addrspace(13)* addrspace(10)* %2487 to double addrspace(13)* addrspace(11)*
  %"arrayptr819'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc563", align 8, !tbaa !382, !alias.scope !4071, !noalias !4074, !nonnull !68
  %arrayptr819 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %2488, align 8, !tbaa !382, !alias.scope !4076, !noalias !4077, !nonnull !68
  store double %2480, double addrspace(13)* %arrayptr819, align 8, !dbg !4078, !tbaa !269, !alias.scope !4079, !noalias !4082
  %"memcpy_refined_dst94.1'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr819'ipl", i64 1, !dbg !4078
  %memcpy_refined_dst94.1 = getelementptr inbounds double, double addrspace(13)* %arrayptr819, i64 1, !dbg !4078
  store double %2481, double addrspace(13)* %memcpy_refined_dst94.1, align 8, !dbg !4078, !tbaa !269, !alias.scope !4079, !noalias !4082
  %"memcpy_refined_dst94.2'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr819'ipl", i64 2, !dbg !4078
  %memcpy_refined_dst94.2 = getelementptr inbounds double, double addrspace(13)* %arrayptr819, i64 2, !dbg !4078
  store double %2482, double addrspace(13)* %memcpy_refined_dst94.2, align 8, !dbg !4078, !tbaa !269, !alias.scope !4079, !noalias !4082
  %2489 = bitcast {} addrspace(10)* %getfield19 to {} addrspace(10)* addrspace(10)*, !dbg !4084
  %2490 = addrspacecast {} addrspace(10)* addrspace(10)* %2489 to {} addrspace(10)* addrspace(11)*, !dbg !4084
  %arraysize_ptr98 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2490, i64 3, !dbg !4084
  %2491 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr98 to i64 addrspace(11)*, !dbg !4084
  %arraysize99 = load i64, i64 addrspace(11)* %2491, align 8, !dbg !4084, !tbaa !86, !range !87, !alias.scope !4087, !noalias !4090
  %2492 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct102, i64 0, i64 0, i64 0, !dbg !4092
  store i64 %arraysize99, i64* %2492, align 8, !dbg !4092, !tbaa !133, !alias.scope !135, !noalias !3056
  %memcpy_refined_dst105 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct103, i64 0, i32 0, i64 0, i64 0, !dbg !4096
  store i64 %arraysize99, i64* %memcpy_refined_dst105, align 8, !dbg !4096, !tbaa !133, !alias.scope !135, !noalias !3056
  %memcpy_refined_dst106 = getelementptr inbounds { [1 x [1 x i64]], i64 }, { [1 x [1 x i64]], i64 }* %newstruct103, i64 0, i32 1, !dbg !4096
  store i64 1, i64* %memcpy_refined_dst106, align 8, !dbg !4096, !tbaa !133, !alias.scope !135, !noalias !3056
  %arraysize_ptr107 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %2490, i64 4, !dbg !4097
  %2493 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr107 to i64 addrspace(11)*, !dbg !4097
  %arraysize108 = load i64, i64 addrspace(11)* %2493, align 16, !dbg !4097, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !4100, !noalias !4101
  %.not821 = icmp eq i64 %arraysize108, 0, !dbg !4102
  br i1 %.not821, label %L322, label %L325, !dbg !3251

ib:                                               ; preds = %L359
  %arraysize_ptr126 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %549, i64 4, !dbg !3281
  %2494 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr126 to i64 addrspace(11)*, !dbg !3281
  %arraysize127 = load i64, i64 addrspace(11)* %2494, align 8, !dbg !3281, !tbaa !73, !range !87, !invariant.load !68, !alias.scope !3267, !noalias !3270, !invariant.group !4106
  %inbounds128 = icmp ugt i64 %arraysize127, 3, !dbg !3281
  br i1 %inbounds128, label %idxend, label %oob, !dbg !3281

oob:                                              ; preds = %ib, %L359
  %errorbox825 = alloca [2 x i64], align 8, !dbg !3281
  %errorbox825.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox825, i64 0, i64 0
  store i64 1, i64* %errorbox825.sub, align 8, !dbg !3281, !noalias !4107
  %2495 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox825, i64 0, i64 1, !dbg !3281
  store i64 4, i64* %2495, align 8, !dbg !3281, !noalias !4107
  %2496 = addrspacecast {} addrspace(10)* %534 to {} addrspace(12)*, !dbg !3281
  call void @ijl_bounds_error_ints({} addrspace(12)* %2496, i64* nonnull align 8 %errorbox825.sub, i64 2) #72, !dbg !3281
  unreachable

idxend:                                           ; preds = %ib
  %2497 = mul i64 %arraysize125, 3, !dbg !3281
  %"'ipc142" = bitcast {} addrspace(10)* %527 to double addrspace(13)* addrspace(10)*, !dbg !3281
  %2498 = bitcast {} addrspace(10)* %534 to double addrspace(13)* addrspace(10)*, !dbg !3281
  %"'ipc567" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc142" to double addrspace(13)* addrspace(11)*, !dbg !3281
  %2499 = addrspacecast double addrspace(13)* addrspace(10)* %2498 to double addrspace(13)* addrspace(11)*, !dbg !3281
  %"arrayptr130826'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc567", align 8, !dbg !3281, !tbaa !73, !alias.scope !3278, !noalias !3279, !nonnull !68
  %arrayptr130826 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %2499, align 8, !dbg !3281, !tbaa !73, !invariant.load !68, !alias.scope !3280, !noalias !3270, !nonnull !68
  %"'ipg566" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130826'ipl", i64 %2497, !dbg !3281
  %2500 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %2497, !dbg !3281
  store double 1.000000e+00, double addrspace(13)* %2500, align 8, !dbg !3281, !tbaa !269, !alias.scope !4108, !noalias !4111
  %inbounds133 = icmp ugt i64 %arraysize125, 1, !dbg !4113
  %inbounds138 = icmp ne i64 %arraysize127, 4, !dbg !4113
  %or.cond = select i1 %inbounds133, i1 %inbounds138, i1 false, !dbg !4113
  br i1 %or.cond, label %idxend141, label %oob139, !dbg !4113

oob139:                                           ; preds = %idxend
  %errorbox140827 = alloca [2 x i64], align 8, !dbg !4113
  %errorbox140827.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox140827, i64 0, i64 0
  store i64 2, i64* %errorbox140827.sub, align 8, !dbg !4113, !noalias !4107
  %2501 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox140827, i64 0, i64 1, !dbg !4113
  store i64 5, i64* %2501, align 8, !dbg !4113, !noalias !4107
  %2502 = addrspacecast {} addrspace(10)* %534 to {} addrspace(12)*, !dbg !4113
  call void @ijl_bounds_error_ints({} addrspace(12)* %2502, i64* nonnull align 8 %errorbox140827.sub, i64 2) #72, !dbg !4113
  unreachable

idxend141:                                        ; preds = %idxend
  %2503 = shl i64 %arraysize125, 2, !dbg !4113
  %2504 = or i64 %2503, 1, !dbg !4113
  %"'ipg568" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130826'ipl", i64 %2504, !dbg !4113
  %2505 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %2504, !dbg !4113
  store double 1.000000e+00, double addrspace(13)* %2505, align 8, !dbg !4113, !tbaa !269, !alias.scope !4108, !noalias !4111
  %inbounds146 = icmp ugt i64 %arraysize125, 2, !dbg !4115
  %inbounds151 = icmp ugt i64 %arraysize127, 5, !dbg !4115
  %or.cond993 = select i1 %inbounds146, i1 %inbounds151, i1 false, !dbg !4115
  br i1 %or.cond993, label %idxend154, label %oob152, !dbg !4115

oob152:                                           ; preds = %idxend141
  %errorbox153829 = alloca [2 x i64], align 8, !dbg !4115
  %errorbox153829.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox153829, i64 0, i64 0
  store i64 3, i64* %errorbox153829.sub, align 8, !dbg !4115, !noalias !4107
  %2506 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox153829, i64 0, i64 1, !dbg !4115
  store i64 6, i64* %2506, align 8, !dbg !4115, !noalias !4107
  %2507 = addrspacecast {} addrspace(10)* %534 to {} addrspace(12)*, !dbg !4115
  call void @ijl_bounds_error_ints({} addrspace(12)* %2507, i64* nonnull align 8 %errorbox153829.sub, i64 2) #72, !dbg !4115
  unreachable

idxend154:                                        ; preds = %idxend141
  %2508 = mul i64 %arraysize125, 5, !dbg !4115
  %2509 = add i64 %2508, 2, !dbg !4115
  %"'ipg570" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130826'ipl", i64 %2509, !dbg !4115
  %2510 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %2509, !dbg !4115
  store double 1.000000e+00, double addrspace(13)* %2510, align 8, !dbg !4115, !tbaa !269, !alias.scope !4108, !noalias !4111
  %2511 = fmul double %421, -2.000000e+00, !dbg !4117
  %inbounds159 = icmp ugt i64 %arraysize125, 3, !dbg !4120
  br i1 %inbounds159, label %idxend180, label %oob165, !dbg !4120

oob165:                                           ; preds = %idxend154
  %errorbox166831 = alloca [2 x i64], align 8, !dbg !4120
  %errorbox166831.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox166831, i64 0, i64 0
  store i64 4, i64* %errorbox166831.sub, align 8, !dbg !4120, !noalias !4107
  %2512 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox166831, i64 0, i64 1, !dbg !4120
  store i64 1, i64* %2512, align 8, !dbg !4120, !noalias !4107
  %2513 = addrspacecast {} addrspace(10)* %534 to {} addrspace(12)*, !dbg !4120
  call void @ijl_bounds_error_ints({} addrspace(12)* %2513, i64* nonnull align 8 %errorbox166831.sub, i64 2) #72, !dbg !4120
  unreachable

idxend180:                                        ; preds = %idxend154
  %"'ipg574" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130826'ipl", i64 3, !dbg !4120
  %2514 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 3, !dbg !4120
  store double %2511, double addrspace(13)* %2514, align 8, !dbg !4120, !tbaa !269, !alias.scope !4108, !noalias !4111
  %2515 = add nuw i64 %arraysize125, 3, !dbg !4121
  %"'ipg573" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130826'ipl", i64 %2515, !dbg !4121
  %2516 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %2515, !dbg !4121
  store double %421, double addrspace(13)* %2516, align 8, !dbg !4121, !tbaa !269, !alias.scope !4108, !noalias !4111
  %2517 = fneg double %371, !dbg !4123
  %2518 = add i64 %2497, 3, !dbg !4125
  %"'ipg571" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130826'ipl", i64 %2518, !dbg !4125
  %2519 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %2518, !dbg !4125
  store double %2517, double addrspace(13)* %2519, align 8, !dbg !4125, !tbaa !269, !alias.scope !4108, !noalias !4111
  %inbounds198.not = icmp eq i64 %arraysize125, 4, !dbg !4126
  br i1 %inbounds198.not, label %oob204, label %idxend232, !dbg !4126

oob204:                                           ; preds = %idxend180
  %errorbox205837 = alloca [2 x i64], align 8, !dbg !4126
  %errorbox205837.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox205837, i64 0, i64 0
  store i64 5, i64* %errorbox205837.sub, align 8, !dbg !4126, !noalias !4107
  %2520 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox205837, i64 0, i64 1, !dbg !4126
  store i64 1, i64* %2520, align 8, !dbg !4126, !noalias !4107
  %2521 = addrspacecast {} addrspace(10)* %534 to {} addrspace(12)*, !dbg !4126
  call void @ijl_bounds_error_ints({} addrspace(12)* %2521, i64* nonnull align 8 %errorbox205837.sub, i64 2) #72, !dbg !4126
  unreachable

idxend232:                                        ; preds = %idxend180
  %"'ipg579" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130826'ipl", i64 4, !dbg !4126
  %2522 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 4, !dbg !4126
  store double %421, double addrspace(13)* %2522, align 8, !dbg !4126, !tbaa !269, !alias.scope !4108, !noalias !4111
  %2523 = fmul double %421, -3.000000e+00, !dbg !4128
  %2524 = add nuw i64 %arraysize125, 4, !dbg !4131
  %"'ipg577" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130826'ipl", i64 %2524, !dbg !4131
  %2525 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %2524, !dbg !4131
  store double %2523, double addrspace(13)* %2525, align 8, !dbg !4131, !tbaa !269, !alias.scope !4108, !noalias !4111
  %2526 = shl nuw i64 %arraysize125, 1, !dbg !4132
  %2527 = add i64 %2526, 4, !dbg !4132
  %"'ipg576" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130826'ipl", i64 %2527, !dbg !4132
  %2528 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %2527, !dbg !4132
  store double %421, double addrspace(13)* %2528, align 8, !dbg !4132, !tbaa !269, !alias.scope !4108, !noalias !4111
  %2529 = add i64 %2503, 4, !dbg !4134
  %"'ipg575" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130826'ipl", i64 %2529, !dbg !4134
  %2530 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %2529, !dbg !4134
  store double %2517, double addrspace(13)* %2530, align 8, !dbg !4134, !tbaa !269, !alias.scope !4108, !noalias !4111
  %inbounds250 = icmp ugt i64 %arraysize125, 5, !dbg !4136
  br i1 %inbounds250, label %idxend258, label %oob256, !dbg !4136

oob256:                                           ; preds = %idxend232
  %errorbox257845 = alloca [2 x i64], align 8, !dbg !4136
  %errorbox257845.sub = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox257845, i64 0, i64 0
  store i64 6, i64* %errorbox257845.sub, align 8, !dbg !4136, !noalias !4107
  %2531 = getelementptr inbounds [2 x i64], [2 x i64]* %errorbox257845, i64 0, i64 1, !dbg !4136
  store i64 2, i64* %2531, align 8, !dbg !4136, !noalias !4107
  %2532 = addrspacecast {} addrspace(10)* %534 to {} addrspace(12)*, !dbg !4136
  call void @ijl_bounds_error_ints({} addrspace(12)* %2532, i64* nonnull align 8 %errorbox257845.sub, i64 2) #72, !dbg !4136
  unreachable

idxend258:                                        ; preds = %idxend232
  %2533 = add nuw i64 %arraysize125, 5, !dbg !4136
  %"'ipg582" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130826'ipl", i64 %2533, !dbg !4136
  %2534 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %2533, !dbg !4136
  store double %421, double addrspace(13)* %2534, align 8, !dbg !4136, !tbaa !269, !alias.scope !4108, !noalias !4111
  %2535 = add i64 %2526, 5, !dbg !4138
  %"'ipg581" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130826'ipl", i64 %2535, !dbg !4138
  %2536 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %2535, !dbg !4138
  store double %2511, double addrspace(13)* %2536, align 8, !dbg !4138, !tbaa !269, !alias.scope !4108, !noalias !4111
  %2537 = add i64 %2508, 5, !dbg !4140
  %"'ipg580" = getelementptr inbounds double, double addrspace(13)* %"arrayptr130826'ipl", i64 %2537, !dbg !4140
  %2538 = getelementptr inbounds double, double addrspace(13)* %arrayptr130826, i64 %2537, !dbg !4140
  store double %2517, double addrspace(13)* %2538, align 8, !dbg !4140, !tbaa !269, !alias.scope !4108, !noalias !4111
  %2539 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 6), !dbg !4142
  %2540 = bitcast {} addrspace(10)* %2539 to i8 addrspace(13)* addrspace(10)*, !dbg !4142
  %2541 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2540, align 8, !dbg !4142
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2541, i8 0, i64 48, i1 false), !dbg !4142
  %2542 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 6) #76, !dbg !4142
  %2543 = bitcast {} addrspace(10)* %2542 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !4145
  %2544 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %2543 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !4145
  %arraylen_ptr287 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %2544, i64 0, i32 1, !dbg !4145
  %arraylen288 = load i64, i64 addrspace(11)* %arraylen_ptr287, align 8, !dbg !4145, !tbaa !332, !range !87, !alias.scope !4150, !noalias !4153
  %.not851 = icmp eq i64 %arraylen288, 0, !dbg !4155
  br i1 %.not851, label %L412, label %idxend284.L394_crit_edge, !dbg !4149

idxend284.L394_crit_edge:                         ; preds = %idxend258
  %".phi.trans.insert965'ipc" = bitcast {} addrspace(10)* %2539 to double addrspace(13)* addrspace(10)*
  %.phi.trans.insert965 = bitcast {} addrspace(10)* %2542 to double addrspace(13)* addrspace(10)*
  %".phi.trans.insert966'ipc" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert965'ipc" to double addrspace(13)* addrspace(11)*
  %.phi.trans.insert966 = addrspacecast double addrspace(13)* addrspace(10)* %.phi.trans.insert965 to double addrspace(13)* addrspace(11)*
  %"arrayptr296852.pre'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert966'ipc", align 8, !dbg !3284, !tbaa !382, !alias.scope !4159, !noalias !4160
  %arrayptr296852.pre = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %.phi.trans.insert966, align 8, !dbg !3284, !tbaa !382, !alias.scope !4161, !noalias !4153
  %2545 = add nsw i64 %arraylen288, -1, !dbg !4149
  br label %L394, !dbg !4149

pass606.2.loopexit:                               ; preds = %L980
  %2546 = load i8*, i8** %_cache592, align 8, !dbg !4162, !dereferenceable !306, !invariant.group !3584
  %2547 = getelementptr inbounds i8, i8* %2546, i64 %iv9, !dbg !4162
  store i8 0, i8* %2547, align 1, !dbg !4162, !invariant.group !3894
  br label %pass606.2, !dbg !4162

pass606.2:                                        ; preds = %pass606.2.loopexit, %L1264.L1265_crit_edge, %L956
  %_augmented590 = call fastcc { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } @augmented_julia_compute_energy_2128.359([3 x double]* nocapture nofree writeonly align 8 "enzyme_sret" %347, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'ipa589", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl", {} addrspace(10)* align 16 %getfield9, {} addrspace(10)* align 16 %"getfield9'ipl"), !dbg !4162
  %2548 = load double, double* %memcpy_refined_src595, align 8, !dbg !4163, !tbaa !133, !alias.scope !4164, !noalias !4167
  %2549 = load double, double* %memcpy_refined_src597, align 8, !dbg !4163, !tbaa !133, !alias.scope !4164, !noalias !4167
  %2550 = load double, double* %memcpy_refined_src599, align 8, !dbg !4163, !tbaa !133, !alias.scope !4164, !noalias !4167
  %2551 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 3), !dbg !4169
  %2552 = bitcast {} addrspace(10)* %2551 to i8 addrspace(13)* addrspace(10)*, !dbg !4169
  %2553 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2552, align 8, !dbg !4169
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %2553, i8 0, i64 24, i1 false), !dbg !4169
  %2554 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 3) #76, !dbg !4169
  %"'ipc583" = bitcast {} addrspace(10)* %2551 to double addrspace(13)* addrspace(10)*
  %2555 = bitcast {} addrspace(10)* %2554 to double addrspace(13)* addrspace(10)*
  %"'ipc584" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc583" to double addrspace(13)* addrspace(11)*
  %2556 = addrspacecast double addrspace(13)* addrspace(10)* %2555 to double addrspace(13)* addrspace(11)*
  %"arrayptr608896'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc584", align 8, !tbaa !382, !alias.scope !4175, !noalias !4178, !nonnull !68
  %arrayptr608896 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %2556, align 8, !tbaa !382, !alias.scope !4180, !noalias !4181, !nonnull !68
  store double %2548, double addrspace(13)* %arrayptr608896, align 8, !dbg !4182, !tbaa !269, !alias.scope !4183, !noalias !4186
  %2557 = load { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)*, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)** %_augmented590_cache, align 8, !dbg !4182, !dereferenceable !306, !invariant.group !3581
  %2558 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2557, i64 %iv9, !dbg !4182
  store { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented590, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2558, align 8, !dbg !4182, !invariant.group !4188
  %2559 = bitcast { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %2557 to {} addrspace(10)*, !dbg !4182
  %2560 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented590, 0, !dbg !4182
  %2561 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented590, 2, !dbg !4182
  %2562 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented590, 3, !dbg !4182
  %2563 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented590, 5, !dbg !4182
  %2564 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented590, 6, !dbg !4182
  %2565 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented590, 9, !dbg !4182
  %2566 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented590, 10, !dbg !4182
  %2567 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented590, 12, !dbg !4182
  %2568 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented590, 13, !dbg !4182
  %2569 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented590, 14, !dbg !4182
  %2570 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented590, 16, !dbg !4182
  %2571 = extractvalue { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented590, 17, !dbg !4182
  %2572 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %2565, 0, !dbg !4182
  %2573 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %2565, 1, !dbg !4182
  %2574 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %2565, 2, !dbg !4182
  %2575 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 } %2565, 3, !dbg !4182
  %2576 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %2569, 0, !dbg !4182
  %2577 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %2569, 1, !dbg !4182
  %2578 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %2569, 2, !dbg !4182
  %2579 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %2569, 3, !dbg !4182
  %2580 = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* } %2569, 4, !dbg !4182
  %2581 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2576, 1, !dbg !4182
  %2582 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2576, 2, !dbg !4182
  %2583 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2576, 4, !dbg !4182
  %2584 = extractvalue { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2576, 5, !dbg !4182
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2559, {} addrspace(10)* %2560, {} addrspace(10)* %2561, {} addrspace(10)* %2562, {} addrspace(10)* %2563, {} addrspace(10)* %2564, {} addrspace(10)* %2566, {} addrspace(10)* %2567, {} addrspace(10)* %2568, {} addrspace(10)* %2570, {} addrspace(10)* %2571, {} addrspace(10)* %2572, {} addrspace(10)* %2573, {} addrspace(10)* %2574, {} addrspace(10)* %2575, {} addrspace(10)* %2577, {} addrspace(10)* %2578, {} addrspace(10)* %2579, {} addrspace(10)* %2580, {} addrspace(10)* %2581, {} addrspace(10)* %2582, {} addrspace(10)* %2583, {} addrspace(10)* %2584), !dbg !4182
  %2585 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi69_cache", align 8, !dbg !4182, !dereferenceable !306, !invariant.group !3579
  %2586 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2585, i64 %iv9, !dbg !4182
  store {} addrspace(10)* %2551, {} addrspace(10)* addrspace(10)* %2586, align 8, !dbg !4182, !invariant.group !4189
  %2587 = bitcast {} addrspace(10)* addrspace(10)* %2585 to {} addrspace(10)*, !dbg !4182
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2587, {} addrspace(10)* %2551), !dbg !4182
  %2588 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache546, align 8, !dbg !4182, !dereferenceable !306, !invariant.group !3578
  %2589 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2588, i64 %iv9, !dbg !4182
  store {} addrspace(10)* %2554, {} addrspace(10)* addrspace(10)* %2589, align 8, !dbg !4182, !invariant.group !4190
  %2590 = bitcast {} addrspace(10)* addrspace(10)* %2588 to {} addrspace(10)*, !dbg !4182
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* %2590, {} addrspace(10)* %2554), !dbg !4182
  %"memcpy_refined_dst610.1'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr608896'ipl", i64 1, !dbg !4182
  %memcpy_refined_dst610.1 = getelementptr inbounds double, double addrspace(13)* %arrayptr608896, i64 1, !dbg !4182
  store double %2549, double addrspace(13)* %memcpy_refined_dst610.1, align 8, !dbg !4182, !tbaa !269, !alias.scope !4183, !noalias !4186
  %"memcpy_refined_dst610.2'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr608896'ipl", i64 2, !dbg !4182
  %memcpy_refined_dst610.2 = getelementptr inbounds double, double addrspace(13)* %arrayptr608896, i64 2, !dbg !4182
  store double %2550, double addrspace(13)* %memcpy_refined_dst610.2, align 8, !dbg !4182, !tbaa !269, !alias.scope !4183, !noalias !4186
  store i64 %arraysize99, i64* %665, align 8, !dbg !4191, !tbaa !133, !alias.scope !135, !noalias !3056
  store i64 %arraysize99, i64* %memcpy_refined_dst621, align 8, !dbg !4197, !tbaa !133, !alias.scope !135, !noalias !3056
  store i64 %1811, i64* %666, align 8, !dbg !4197, !tbaa !133, !alias.scope !135, !noalias !3056
  %exitcond1041.not = icmp eq i64 %1811, %670, !dbg !4198
  br i1 %exitcond1041.not, label %L1337, label %L1340, !dbg !4046

inverttop:                                        ; preds = %invertL36
  %2591 = load double, double* %"'de", align 8, !dbg !3040
  store double 0.000000e+00, double* %"'de", align 8, !dbg !3040
  %2592 = load double, double addrspace(11)* %"'ipc71", align 8, !dbg !3040, !tbaa !307, !alias.scope !3021, !noalias !3024
  %2593 = fadd fast double %2592, %2591, !dbg !3040
  store double %2593, double addrspace(11)* %"'ipc71", align 8, !dbg !3040, !tbaa !307, !alias.scope !3021, !noalias !3024
  %2594 = load double, double* %"'de81", align 8, !dbg !3032
  store double 0.000000e+00, double* %"'de81", align 8, !dbg !3032
  %2595 = load double, double addrspace(11)* %"'ipc84", align 8, !dbg !3032, !tbaa !307, !alias.scope !3021, !noalias !3024
  %2596 = fadd fast double %2595, %2594, !dbg !3032
  store double %2596, double addrspace(11)* %"'ipc84", align 8, !dbg !3032, !tbaa !307, !alias.scope !3021, !noalias !3024
  %2597 = load double, double* %"'de90", align 8, !dbg !3028
  store double 0.000000e+00, double* %"'de90", align 8, !dbg !3028
  %2598 = load double, double addrspace(11)* %"'ipc93", align 8, !dbg !3028, !tbaa !307, !alias.scope !3021, !noalias !3024
  %2599 = fadd fast double %2598, %2597, !dbg !3028
  store double %2599, double addrspace(11)* %"'ipc93", align 8, !dbg !3028, !tbaa !307, !alias.scope !3021, !noalias !3024
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL36:                                        ; preds = %invertL75
  br label %inverttop

invertL75:                                        ; preds = %invertL105, %invertL86
  br label %invertL36

invertL86:                                        ; preds = %invertL209, %invertL90
  br label %invertL75

invertL90:                                        ; preds = %invertL101_phimerge_phimerge, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  br label %invertL86

invertL98:                                        ; preds = %invertL101_phimerge_phimerge
  %2600 = load {} addrspace(10)*, {} addrspace(10)** %"'ip_phi2_cache", align 8, !dbg !3104, !invariant.group !3116
  %2601 = bitcast {} addrspace(10)* %"getfield11'ipl" to i8 addrspace(13)* addrspace(10)*, !dbg !3104
  %2602 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2601, align 8, !dbg !3104
  %2603 = bitcast {} addrspace(10)* %2600 to i8 addrspace(13)* addrspace(10)*, !dbg !3104
  %2604 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2603, align 8, !dbg !3104
  %2605 = bitcast i8 addrspace(13)* %2604 to double addrspace(13)*, !dbg !3104
  %2606 = bitcast i8 addrspace(13)* %2602 to double addrspace(13)*, !dbg !3104
  %2607 = udiv i64 %400, 8, !dbg !3104
  %2608 = icmp eq i64 %2607, 0, !dbg !3104
  br i1 %2608, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !3104

for.body.i:                                       ; preds = %for.body.i, %invertL98
  %idx.i = phi i64 [ 0, %invertL98 ], [ %idx.next.i, %for.body.i ], !dbg !3104
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %2605, i64 %idx.i, !dbg !3104
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !3104
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !3104
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %2606, i64 %idx.i, !dbg !3104
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !3104
  %2609 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !3104
  store double %2609, double addrspace(13)* %src.i.i, align 1, !dbg !3104
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !3104
  %2610 = icmp eq i64 %2607, %idx.next.i, !dbg !3104
  br i1 %2610, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !3104

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL98, %for.body.i
  br label %invertL90

invertL101:                                       ; preds = %invertL209
  %_unwrap = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %353 to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !3117
  %"'ipc104_unwrap" = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa" to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !3117
  %2611 = load i1, i1* %.not933.not_cache, align 1, !dbg !3117, !invariant.group !3103
  br i1 %2611, label %invertL101_phirc, label %invertL101_phirc105, !dbg !3117

invertL101_phirc:                                 ; preds = %invertL101
  %2612 = load {} addrspace(10)*, {} addrspace(10)** %_cache, align 8, !invariant.group !3114
  br label %invertL101_phimerge

invertL101_phirc105:                              ; preds = %invertL101
  br label %invertL101_phimerge

invertL101_phimerge:                              ; preds = %invertL101_phirc105, %invertL101_phirc
  %2613 = phi {} addrspace(10)* [ %2612, %invertL101_phirc ], [ %getfield11, %invertL101_phirc105 ], !dbg !3117
  br i1 %2611, label %invertL101_phimerge_phirc, label %invertL101_phimerge_phirc107, !dbg !3117

invertL101_phimerge_phirc:                        ; preds = %invertL101_phimerge
  %2614 = load {} addrspace(10)*, {} addrspace(10)** %_cache106, align 8, !invariant.group !3115
  br label %invertL101_phimerge_phimerge

invertL101_phimerge_phirc107:                     ; preds = %invertL101_phimerge
  br label %invertL101_phimerge_phimerge

invertL101_phimerge_phimerge:                     ; preds = %invertL101_phimerge_phirc107, %invertL101_phimerge_phirc
  %2615 = phi {} addrspace(10)* [ %2614, %invertL101_phimerge_phirc ], [ %"getfield11'ipl", %invertL101_phimerge_phirc107 ], !dbg !3117
  %2616 = load i64, i64* %_augmented_cache, align 8, !dbg !3117, !invariant.group !3125
  call fastcc void @diffejulia_copyto_unaliased__1984({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* nocapture nofree writeonly align 8 "enzyme_sret" undef, [1 x {} addrspace(10)*]* nocapture nofree writeonly align 8 "enzymejl_returnRoots" undef, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree readonly align 8 %_unwrap, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'ipc104_unwrap", {} addrspace(10)* nocapture readonly align 16 %2613, {} addrspace(10)* nocapture align 16 %2615, i64 %2616), !dbg !3117
  br i1 %2611, label %invertL98, label %invertL90

invertL105:                                       ; preds = %invertL118, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit680
  br label %invertL75

invertL113:                                       ; preds = %invertL118
  %2617 = load {} addrspace(10)*, {} addrspace(10)** %"'ip_phi5_cache", align 8, !dbg !3144, !invariant.group !3146
  %2618 = bitcast {} addrspace(10)* %"getfield11'ipl" to i8 addrspace(13)* addrspace(10)*, !dbg !3144
  %2619 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2618, align 8, !dbg !3144
  %2620 = bitcast {} addrspace(10)* %2617 to i8 addrspace(13)* addrspace(10)*, !dbg !3144
  %2621 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2620, align 8, !dbg !3144
  %2622 = bitcast i8 addrspace(13)* %2621 to double addrspace(13)*, !dbg !3144
  %2623 = bitcast i8 addrspace(13)* %2619 to double addrspace(13)*, !dbg !3144
  %2624 = udiv i64 %392, 8, !dbg !3144
  %2625 = icmp eq i64 %2624, 0, !dbg !3144
  br i1 %2625, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit680, label %for.body.i679, !dbg !3144

for.body.i679:                                    ; preds = %for.body.i679, %invertL113
  %idx.i673 = phi i64 [ 0, %invertL113 ], [ %idx.next.i678, %for.body.i679 ], !dbg !3144
  %dst.i.i674 = getelementptr inbounds double, double addrspace(13)* %2622, i64 %idx.i673, !dbg !3144
  %dst.i.l.i675 = load double, double addrspace(13)* %dst.i.i674, align 1, !dbg !3144
  store double 0.000000e+00, double addrspace(13)* %dst.i.i674, align 1, !dbg !3144
  %src.i.i676 = getelementptr inbounds double, double addrspace(13)* %2623, i64 %idx.i673, !dbg !3144
  %src.i.l.i677 = load double, double addrspace(13)* %src.i.i676, align 1, !dbg !3144
  %2626 = fadd fast double %src.i.l.i677, %dst.i.l.i675, !dbg !3144
  store double %2626, double addrspace(13)* %src.i.i676, align 1, !dbg !3144
  %idx.next.i678 = add nuw i64 %idx.i673, 1, !dbg !3144
  %2627 = icmp eq i64 %2624, %idx.next.i678, !dbg !3144
  br i1 %2627, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit680, label %for.body.i679, !dbg !3144

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit680: ; preds = %invertL113, %for.body.i679
  br label %invertL105

invertL118:                                       ; preds = %invertL209, %invertL160.lr.ph
  %2628 = load i1, i1* %.not943.not_cache, align 1, !invariant.group !3143
  br i1 %2628, label %invertL113, label %invertL105

invertL160.lr.ph:                                 ; preds = %invertL160_phimerge
  br label %invertL118

invertL160:                                       ; preds = %mergeinvertL160_L209.loopexit, %incinvertL160
  %2629 = load i64, i64* %"iv'ac", align 8, !dbg !3190
  %"'ipc109_unwrap" = bitcast {} addrspace(10)* %"getfield15'ipl" to double addrspace(13)* addrspace(10)*, !dbg !3190
  %"'ipc110_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc109_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3190
  %"arrayptr777948'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc110_unwrap", align 16, !tbaa !73, !alias.scope !3173, !noalias !3174, !nonnull !68, !invariant.group !3175
  %"'ipg113_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr777948'ipl_unwrap", i64 %2629, !dbg !3190
  %2630 = load double, double addrspace(13)* %"'ipg113_unwrap", align 8, !dbg !3190, !tbaa !269, !alias.scope !4203, !noalias !4204
  store double 0.000000e+00, double addrspace(13)* %"'ipg113_unwrap", align 8, !dbg !3190, !tbaa !269, !alias.scope !4203, !noalias !4204
  %2631 = load double, double* %"arrayref774'de", align 8, !dbg !3190
  %2632 = fadd fast double %2631, %2630, !dbg !3190
  store double %2632, double* %"arrayref774'de", align 8, !dbg !3190
  %2633 = load double, double* %"arrayref774'de", align 8, !dbg !3178
  store double 0.000000e+00, double* %"arrayref774'de", align 8, !dbg !3178
  %2634 = load i64, i64* %"iv'ac", align 8, !dbg !3178
  %2635 = load i1, i1* %.not943.not_cache, align 1, !dbg !3178, !invariant.group !3143
  br i1 %2635, label %invertL160_phirc, label %invertL160_phirc116, !dbg !3178

invertL160_phirc:                                 ; preds = %invertL160
  %2636 = load {} addrspace(10)*, {} addrspace(10)** %_cache115, align 8, !invariant.group !3147
  br label %invertL160_phimerge

invertL160_phirc116:                              ; preds = %invertL160
  br label %invertL160_phimerge

invertL160_phimerge:                              ; preds = %invertL160_phirc116, %invertL160_phirc
  %2637 = phi {} addrspace(10)* [ %2636, %invertL160_phirc ], [ %"getfield11'ipl", %invertL160_phirc116 ], !dbg !3178
  %"'ipc111_unwrap" = bitcast {} addrspace(10)* %2637 to double addrspace(13)* addrspace(10)*, !dbg !3178
  %"'ipc112_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc111_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3178
  %"arrayptr773947'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc112_unwrap", align 8, !tbaa !382, !alias.scope !3165, !noalias !3168, !nonnull !68, !invariant.group !3170
  %2638 = load i1, i1* %.not946_cache, align 1, !dbg !3178, !invariant.group !3164
  %_unwrap117 = select i1 %2638, i64 0, i64 %2634, !dbg !3178
  %"'ipg114_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr773947'ipl_unwrap", i64 %_unwrap117, !dbg !3178
  %2639 = load double, double addrspace(13)* %"'ipg114_unwrap", align 8, !dbg !3178, !tbaa !269, !alias.scope !4205, !noalias !4206
  %2640 = fadd fast double %2639, %2633, !dbg !3178
  store double %2640, double addrspace(13)* %"'ipg114_unwrap", align 8, !dbg !3178, !tbaa !269, !alias.scope !4205, !noalias !4206
  %2641 = load i64, i64* %"iv'ac", align 8
  %2642 = icmp eq i64 %2641, 0
  %2643 = xor i1 %2642, true
  br i1 %2642, label %invertL160.lr.ph, label %incinvertL160

incinvertL160:                                    ; preds = %invertL160_phimerge
  %2644 = load i64, i64* %"iv'ac", align 8
  %2645 = add nsw i64 %2644, -1
  store i64 %2645, i64* %"iv'ac", align 8
  br label %invertL160

invertL209.loopexit:                              ; preds = %invertL209
  %_unwrap118 = add nsw i64 %arraysize, -1
  br label %mergeinvertL160_L209.loopexit

mergeinvertL160_L209.loopexit:                    ; preds = %invertL209.loopexit
  store i64 %_unwrap118, i64* %"iv'ac", align 8
  br label %invertL160

invertL209:                                       ; preds = %invertL222
  %2646 = load i8, i8* %_cache119, align 1, !invariant.group !3089
  switch i8 %2646, label %invertL118 [
    i8 0, label %invertL86
    i8 1, label %invertL101
    i8 2, label %invertL209.loopexit
  ]

invertL222:                                       ; preds = %invertpass.2, %invertL243.preheader
  br label %invertL209

invertL243.preheader:                             ; preds = %invertL243
  %2647 = load i64, i64* %"iv1'ac", align 8
  %forfree125 = load i64*, i64** %value_phi79_cache, align 8, !dereferenceable !306, !invariant.group !3229
  %2648 = bitcast i64* %forfree125 to i8*
  call void @free(i8* nonnull %2648), !dbg !4207
  br label %invertL222

invertL243:                                       ; preds = %mergeinvertL243_pass.2.loopexit556, %invertL250
  %2649 = load i64, i64* %"iv1'ac", align 8
  %2650 = icmp eq i64 %2649, 0
  %2651 = xor i1 %2650, true
  br i1 %2650, label %invertL243.preheader, label %incinvertL243

incinvertL243:                                    ; preds = %invertL243
  %2652 = load i64, i64* %"iv1'ac", align 8
  %2653 = add nsw i64 %2652, -1
  store i64 %2653, i64* %"iv1'ac", align 8
  br label %invertL250

invertL250:                                       ; preds = %mergeinvertL243_pass.2.loopexit, %incinvertL243
  %2654 = load i64, i64* %"iv1'ac", align 8, !dbg !3238
  %"'ipc123_unwrap" = bitcast {} addrspace(10)* %487 to double addrspace(13)* addrspace(10)*, !dbg !3238
  %"'ipc124_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc123_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3238
  %"arrayptr745931'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc124_unwrap", align 8, !dbg !3238, !tbaa !382, !alias.scope !3239, !noalias !3240, !nonnull !68
  %2655 = load i64*, i64** %value_phi79_cache, align 8, !dbg !3238, !dereferenceable !306, !invariant.group !3229
  %2656 = getelementptr inbounds i64, i64* %2655, i64 %2654, !dbg !3238
  %2657 = load i64, i64* %2656, align 8, !dbg !3238, !invariant.group !3230
  %_unwrap126 = add i64 %2657, -1, !dbg !3238
  %"'ipg122_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr745931'il_phi_unwrap", i64 %_unwrap126, !dbg !3238
  %2658 = load double, double addrspace(13)* %"'ipg122_unwrap", align 8, !dbg !3238, !tbaa !269, !alias.scope !4208, !noalias !4209
  store double 0.000000e+00, double addrspace(13)* %"'ipg122_unwrap", align 8, !dbg !3238, !tbaa !269, !alias.scope !4208, !noalias !4209
  %2659 = load double, double* %"arrayref743'de", align 8, !dbg !3238
  %2660 = fadd fast double %2659, %2658, !dbg !3238
  store double %2660, double* %"arrayref743'de", align 8, !dbg !3238
  %2661 = load double, double* %"arrayref743'de", align 8, !dbg !3231
  store double 0.000000e+00, double* %"arrayref743'de", align 8, !dbg !3231
  %2662 = load i64, i64* %"iv1'ac", align 8, !dbg !3231
  %"'ipc120_unwrap" = bitcast {} addrspace(10)* %"getfield15'ipl" to double addrspace(13)* addrspace(10)*, !dbg !3231
  %"'ipc121_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc120_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3231
  %"arrayptr742930'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc121_unwrap", align 16, !alias.scope !3224, !noalias !3225, !invariant.group !3226
  %iv.next2_unwrap = add nuw nsw i64 %2662, 1, !dbg !3231
  %_unwrap128 = add nsw i64 %iv.next2_unwrap, -1, !dbg !3231
  %"'ipg127_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr742930'ipl_unwrap", i64 %_unwrap128, !dbg !3231
  %2663 = load double, double addrspace(13)* %"'ipg127_unwrap", align 8, !dbg !3231, !tbaa !269, !alias.scope !4210, !noalias !4211
  %2664 = fadd fast double %2663, %2661, !dbg !3231
  store double %2664, double addrspace(13)* %"'ipg127_unwrap", align 8, !dbg !3231, !tbaa !269, !alias.scope !4210, !noalias !4211
  br label %invertL243

invertL325:                                       ; preds = %invertL359, %invertL325.L341_crit_edge
  call fastcc void @diffejulia__unsafe_setindex__2077({} addrspace(10)* align 16 %getfield19, {} addrspace(10)* align 16 %"getfield19'ipl", {} addrspace(10)* align 16 %2486, {} addrspace(10)* align 16 %2483, [1 x [1 x i64]] addrspace(11)* nocapture readonly align 8 %526, i64 signext 1, { {} addrspace(10)*, {} addrspace(10)*, i1, i64, i64* } %_augmented129), !dbg !3255
  br label %invertpass.2

invertL325.L341_crit_edge:                        ; preds = %invertL359
  %_unwrap130 = shl nuw i64 %arraylen111, 3, !dbg !3276
  %"'ipc131_unwrap" = bitcast {} addrspace(10)* %527 to i8 addrspace(13)* addrspace(10)*, !dbg !3276
  %"'ipc132_unwrap" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc131_unwrap" to i8 addrspace(13)* addrspace(11)*, !dbg !3276
  %"arrayptr119823.pre1025'il_phi_unwrap" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc132_unwrap", align 8, !dbg !3276, !tbaa !73, !alias.scope !3278, !noalias !3279
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %"arrayptr119823.pre1025'il_phi_unwrap", i8 0, i64 %_unwrap130, i1 false) #72, !dbg !3276, !tbaa !269, !noalias !2443
  br label %invertL325

invertL359:                                       ; preds = %invertib
  br i1 %.not822, label %invertL325, label %invertL325.L341_crit_edge

invertL394:                                       ; preds = %mergeinvertL394_L412.loopexit, %incinvertL394
  %2665 = load i64, i64* %"iv3'ac", align 8, !dbg !3284
  %".phi.trans.insert965'ipc_unwrap" = bitcast {} addrspace(10)* %2539 to double addrspace(13)* addrspace(10)*, !dbg !3284
  %".phi.trans.insert966'ipc_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %".phi.trans.insert965'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3284
  %"arrayptr296852.pre'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %".phi.trans.insert966'ipc_unwrap", align 8, !dbg !3284, !tbaa !382, !alias.scope !4159, !noalias !4160
  %iv.next4_unwrap = add nuw nsw i64 %2665, 1, !dbg !3284
  %_unwrap134 = add nsw i64 %iv.next4_unwrap, -1, !dbg !3284
  %"memcpy_refined_dst297'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr296852.pre'il_phi_unwrap", i64 %_unwrap134, !dbg !3284
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst297'ipg_unwrap", align 8, !dbg !3284, !tbaa !269, !alias.scope !4212, !noalias !4213
  %2666 = load i64, i64* %"iv3'ac", align 8
  %2667 = icmp eq i64 %2666, 0
  %2668 = xor i1 %2667, true
  br i1 %2667, label %invertidxend284.L394_crit_edge, label %incinvertL394

incinvertL394:                                    ; preds = %invertL394
  %2669 = load i64, i64* %"iv3'ac", align 8
  %2670 = add nsw i64 %2669, -1
  store i64 %2670, i64* %"iv3'ac", align 8
  br label %invertL394

invertL412.loopexit:                              ; preds = %invertL412
  %_unwrap135 = add nsw i64 %arraylen288, -1
  br label %mergeinvertL394_L412.loopexit

mergeinvertL394_L412.loopexit:                    ; preds = %invertL412.loopexit
  store i64 %_unwrap135, i64* %"iv3'ac", align 8
  br label %invertL394

invertL412:                                       ; preds = %invertL457
  call fastcc void @diffejulia__diagm_2062({ i64, {} addrspace(10)* } addrspace(11)* nocapture readonly align 8 %552, { i64, {} addrspace(10)* } addrspace(11)* nocapture align 8 %"'ipc137", { {} addrspace(10)*, i64, i8*, i64, i64 } %subcache), !dbg !3298
  br i1 %.not851, label %invertidxend258, label %invertL412.loopexit

invertL457:                                       ; preds = %invertL467
  br label %invertL412

invertL467:                                       ; preds = %invertL483, %invertL470
  br label %invertL457

invertL470:                                       ; preds = %staging, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit688
  br label %invertL467

invertL478:                                       ; preds = %staging
  %2671 = load {} addrspace(10)*, {} addrspace(10)** %"'ip_phi14_cache", align 8, !dbg !3359, !invariant.group !3361
  %2672 = bitcast {} addrspace(10)* %527 to i8 addrspace(13)* addrspace(10)*, !dbg !3359
  %2673 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2672, align 8, !dbg !3359
  %2674 = bitcast {} addrspace(10)* %2671 to i8 addrspace(13)* addrspace(10)*, !dbg !3359
  %2675 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %2674, align 8, !dbg !3359
  %2676 = bitcast i8 addrspace(13)* %2675 to double addrspace(13)*, !dbg !3359
  %2677 = bitcast i8 addrspace(13)* %2673 to double addrspace(13)*, !dbg !3359
  %2678 = udiv i64 %542, 8, !dbg !3359
  %2679 = icmp eq i64 %2678, 0, !dbg !3359
  br i1 %2679, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit688, label %for.body.i687, !dbg !3359

for.body.i687:                                    ; preds = %for.body.i687, %invertL478
  %idx.i681 = phi i64 [ 0, %invertL478 ], [ %idx.next.i686, %for.body.i687 ], !dbg !3359
  %dst.i.i682 = getelementptr inbounds double, double addrspace(13)* %2676, i64 %idx.i681, !dbg !3359
  %dst.i.l.i683 = load double, double addrspace(13)* %dst.i.i682, align 1, !dbg !3359
  store double 0.000000e+00, double addrspace(13)* %dst.i.i682, align 1, !dbg !3359
  %src.i.i684 = getelementptr inbounds double, double addrspace(13)* %2677, i64 %idx.i681, !dbg !3359
  %src.i.l.i685 = load double, double addrspace(13)* %src.i.i684, align 1, !dbg !3359
  %2680 = fadd fast double %src.i.l.i685, %dst.i.l.i683, !dbg !3359
  store double %2680, double addrspace(13)* %src.i.i684, align 1, !dbg !3359
  %idx.next.i686 = add nuw i64 %idx.i681, 1, !dbg !3359
  %2681 = icmp eq i64 %2678, %idx.next.i686, !dbg !3359
  br i1 %2681, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit688, label %for.body.i687, !dbg !3359

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit688: ; preds = %invertL478, %for.body.i687
  br label %invertL470

invertL483:                                       ; preds = %invertL558.lr.ph
  %2682 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %567) #75, !dbg !3349
  %_unwrap147 = bitcast {}* %2682 to i8**
  %arrayptr722_unwrap = load i8*, i8** %_unwrap147, align 8, !dbg !3349, !tbaa !73, !alias.scope !3329, !noalias !3332, !nonnull !68, !invariant.group !3354
  %2683 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %568) #75, !dbg !3349
  %_unwrap148 = bitcast {}* %2683 to i8**
  %arrayptr724_unwrap = load i8*, i8** %_unwrap148, align 8, !dbg !3349, !tbaa !73, !alias.scope !3267, !noalias !3270, !nonnull !68, !invariant.group !3355
  %.not928.not_unwrap = icmp eq i8* %arrayptr722_unwrap, %arrayptr724_unwrap
  %2684 = load i64, i64* %"iv5'ac", align 8
  %2685 = load i64, i64* %"iv7'ac", align 8
  %forfree153 = load double*, double** %arrayref_cache, align 8, !dereferenceable !306, !invariant.group !3399
  %2686 = bitcast double* %forfree153 to i8*
  call void @free(i8* nonnull %2686), !dbg !4207, !enzyme_cache_free !3397
  br i1 %.not857, label %invertL467, label %staging

invertL558.lr.ph:                                 ; preds = %invertL558
  %2687 = load i64, i64* %"iv5'ac", align 8
  %2688 = icmp eq i64 %2687, 0
  %2689 = xor i1 %2688, true
  br i1 %2688, label %invertL483, label %incinvertL558.lr.ph

incinvertL558.lr.ph:                              ; preds = %invertL558.lr.ph
  %2690 = load i64, i64* %"iv5'ac", align 8
  %2691 = add nsw i64 %2690, -1
  store i64 %2691, i64* %"iv5'ac", align 8
  br label %invertL562

invertL558:                                       ; preds = %mergeinvertL558_L562, %incinvertL558
  %2692 = load i64, i64* %"iv7'ac", align 8, !dbg !3418
  %2693 = load i64, i64* %"iv5'ac", align 8, !dbg !3418
  %iv.next6_unwrap = add nuw nsw i64 %2693, 1, !dbg !3418
  %value_phi341.op_unwrap = add nsw i64 %iv.next6_unwrap, -1, !dbg !3418
  %_unwrap150 = mul i64 %value_phi341.op_unwrap, %arraysize125, !dbg !3418
  %_unwrap151 = add i64 %2692, %_unwrap150, !dbg !3418
  %"'ipg149_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr358864.pre'ipl", i64 %_unwrap151, !dbg !3418
  %2694 = load double, double addrspace(13)* %"'ipg149_unwrap", align 8, !dbg !3418, !tbaa !269, !alias.scope !4214, !noalias !4215
  store double 0.000000e+00, double addrspace(13)* %"'ipg149_unwrap", align 8, !dbg !3418, !tbaa !269, !alias.scope !4214, !noalias !4215
  %2695 = load double, double* %"'de152", align 8, !dbg !3418
  %2696 = fadd fast double %2695, %2694, !dbg !3418
  store double %2696, double* %"'de152", align 8, !dbg !3418
  %2697 = load double, double* %"'de152", align 8, !dbg !3415
  store double 0.000000e+00, double* %"'de152", align 8, !dbg !3415
  %2698 = load i64, i64* %"iv7'ac", align 8, !dbg !3415
  %2699 = load i64, i64* %"iv5'ac", align 8, !dbg !3415
  %_unwrap154 = bitcast {} addrspace(10)* %534 to {} addrspace(10)* addrspace(10)*, !dbg !3415
  %_unwrap155 = addrspacecast {} addrspace(10)* addrspace(10)* %_unwrap154 to {} addrspace(10)* addrspace(11)*, !dbg !3415
  %arraysize_ptr126_unwrap = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap155, i64 4, !dbg !3415
  %_unwrap156 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr126_unwrap to i64 addrspace(11)*, !dbg !3415
  %arraysize127_unwrap = load i64, i64 addrspace(11)* %_unwrap156, align 8, !dbg !3281, !tbaa !73, !range !87, !alias.scope !3267, !noalias !3270, !invariant.group !4106
  %2700 = call i64 @llvm.umax.i64(i64 %arraysize127_unwrap, i64 1) #72, !dbg !3392
  %_unwrap157 = add nsw i64 %2700, -1, !dbg !3415
  %2701 = add nuw i64 %_unwrap157, 1, !dbg !3415
  %arraysize_ptr124_unwrap = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap155, i64 3, !dbg !3415
  %_unwrap158 = bitcast {} addrspace(10)* addrspace(11)* %arraysize_ptr124_unwrap to i64 addrspace(11)*, !dbg !3415
  %arraysize125_unwrap = load i64, i64 addrspace(11)* %_unwrap158, align 8, !dbg !3281, !tbaa !73, !range !87, !alias.scope !3267, !noalias !3270, !invariant.group !3283
  %2702 = call i64 @llvm.umax.i64(i64 %arraysize125_unwrap, i64 1) #72, !dbg !3392
  %_unwrap159 = add nsw i64 %2702, -1, !dbg !3415
  %2703 = add nuw i64 %_unwrap159, 1, !dbg !3415
  %2704 = mul nuw nsw i64 %2703, %2701, !dbg !3415
  %2705 = load double*, double** %arrayref_cache, align 8, !dbg !3415, !dereferenceable !306, !invariant.group !3399
  %2706 = mul nuw nsw i64 %2703, %2701, !dbg !3415
  %2707 = mul nuw nsw i64 %2699, %2703, !dbg !3415
  %2708 = add nuw nsw i64 %2698, %2707, !dbg !3415
  %2709 = getelementptr inbounds double, double* %2705, i64 %2708, !dbg !3415
  %2710 = load double, double* %2709, align 8, !dbg !3401, !tbaa !269, !alias.scope !117, !noalias !271, !invariant.group !3426
  %2711 = fmul fast double %2697, %2710, !dbg !3415
  %2712 = load double, double* %"'de81", align 8, !dbg !3415
  %2713 = fadd fast double %2712, %2711, !dbg !3415
  store double %2713, double* %"'de81", align 8, !dbg !3415
  %2714 = fmul fast double %2697, %406, !dbg !3415
  %2715 = load double, double* %"arrayref'de", align 8, !dbg !3415
  %2716 = fadd fast double %2715, %2714, !dbg !3415
  store double %2716, double* %"arrayref'de", align 8, !dbg !3415
  %2717 = load double, double* %"arrayref'de", align 8, !dbg !3401
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !3401
  %2718 = load i64, i64* %"iv7'ac", align 8, !dbg !3401
  %2719 = load i64, i64* %"iv5'ac", align 8, !dbg !3401
  %_unwrap161 = select i1 %.not861, i64 0, i64 %2718, !dbg !3401
  %_unwrap162 = select i1 %.not862, i64 0, i64 %value_phi341.op_unwrap, !dbg !3401
  %_unwrap163 = mul i64 %_unwrap162, %arraysize350, !dbg !3401
  %_unwrap164 = add i64 %_unwrap161, %_unwrap163, !dbg !3401
  %"'ipg160_unwrap" = getelementptr inbounds double, double addrspace(13)* %"'ipl", i64 %_unwrap164, !dbg !3401
  %2720 = load double, double addrspace(13)* %"'ipg160_unwrap", align 8, !dbg !3401, !tbaa !269, !alias.scope !4216, !noalias !4217
  %2721 = fadd fast double %2720, %2717, !dbg !3401
  store double %2721, double addrspace(13)* %"'ipg160_unwrap", align 8, !dbg !3401, !tbaa !269, !alias.scope !4216, !noalias !4217
  %2722 = load i64, i64* %"iv7'ac", align 8
  %2723 = icmp eq i64 %2722, 0
  %2724 = xor i1 %2723, true
  br i1 %2723, label %invertL558.lr.ph, label %incinvertL558

incinvertL558:                                    ; preds = %invertL558
  %2725 = load i64, i64* %"iv7'ac", align 8
  %2726 = add nsw i64 %2725, -1
  store i64 %2726, i64* %"iv7'ac", align 8
  br label %invertL558

invertL562:                                       ; preds = %mergeinvertL558.lr.ph_L598, %incinvertL558.lr.ph
  br label %mergeinvertL558_L562

mergeinvertL558_L562:                             ; preds = %invertL562
  store i64 %597, i64* %"iv7'ac", align 8
  br label %invertL558

invertL598:                                       ; preds = %invertL1354, %invertL616.preheader
  call fastcc void @diffejulia___2053({} addrspace(10)* align 16 %553, {} addrspace(10)* align 16 %"'ac", {} addrspace(10)* align 16 %562, {} addrspace(10)* align 16 %555, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i64, i1, i1, i64*, i64* } %subcache167), !dbg !3289
  br label %mergeinvertL558.lr.ph_L598

mergeinvertL558.lr.ph_L598:                       ; preds = %invertL598
  store i64 %596, i64* %"iv5'ac", align 8
  br label %invertL562

invertL616.preheader:                             ; preds = %invertL616
  %2727 = load i64, i64* %"iv9'ac", align 8
  %forfree = load i64*, i64** %loopLimit_cache24, align 8, !dereferenceable !306, !invariant.group !3473
  %2728 = bitcast i64* %forfree to i8*
  call void @free(i8* nonnull %2728), !dbg !4207, !enzyme_cache_free !3471
  %2729 = load i64, i64* %"iv9'ac", align 8
  %forfree47 = load i64*, i64** %loopLimit_cache45, align 8, !dereferenceable !306, !invariant.group !3478
  %2730 = bitcast i64* %forfree47 to i8*
  call void @free(i8* nonnull %2730), !dbg !4207, !enzyme_cache_free !3476
  %2731 = load i64, i64* %"iv9'ac", align 8
  %forfree59 = load i64*, i64** %loopLimit_cache57, align 8, !dereferenceable !306, !invariant.group !3481
  %2732 = bitcast i64* %forfree59 to i8*
  call void @free(i8* nonnull %2732), !dbg !4207, !enzyme_cache_free !3479
  %2733 = load i64, i64* %"iv9'ac", align 8
  %forfree172 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache171, align 8, !dereferenceable !306, !invariant.group !3482
  %2734 = load i64, i64* %"iv9'ac", align 8
  %forfree180 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache178, align 8, !dereferenceable !306, !invariant.group !3483
  %2735 = load i64, i64* %"iv9'ac", align 8
  %forfree181 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi20_cache", align 8, !dereferenceable !306, !invariant.group !3484
  %2736 = load i64, i64* %"iv9'ac", align 8
  %forfree184 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache182, align 8, !dereferenceable !306, !invariant.group !3485
  %2737 = load i64, i64* %"iv9'ac", align 8
  %forfree191 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache189, align 8, !dereferenceable !306, !invariant.group !3486
  %2738 = load i64, i64* %"iv9'ac", align 8
  %forfree192 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi19_cache", align 8, !dereferenceable !306, !invariant.group !3487
  %2739 = load i64, i64* %"iv9'ac", align 8
  %forfree196 = load double*, double** %value_phi372_cache, align 8, !dereferenceable !306, !invariant.group !3490
  %2740 = bitcast double* %forfree196 to i8*
  call void @free(i8* nonnull %2740), !dbg !4207, !enzyme_cache_free !3488
  %2741 = load i64, i64* %"iv9'ac", align 8
  %forfree200 = load { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %subcache198_cache, align 8, !dereferenceable !4218, !invariant.group !3491
  %2742 = load i64, i64* %"iv9'ac", align 8
  %forfree204 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache202, align 8, !dereferenceable !306, !invariant.group !3492
  %2743 = load i64, i64* %"iv9'ac", align 8
  %forfree205 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi17_cache", align 8, !dereferenceable !306, !invariant.group !3493
  %2744 = load i64, i64* %"iv9'ac", align 8
  %forfree209 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache207_cache, align 8, !dereferenceable !4219, !invariant.group !3494
  %2745 = load i64, i64* %"iv9'ac", align 8
  %forfree213 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache211, align 8, !dereferenceable !306, !invariant.group !3495
  %2746 = load i64, i64* %"iv9'ac", align 8
  %forfree222 = load i64**, i64*** %value_phi414_cache, align 8, !dereferenceable !306, !invariant.group !3498
  %2747 = bitcast i64** %forfree222 to i8*
  call void @free(i8* nonnull %2747), !dbg !4207, !enzyme_cache_free !3496
  %2748 = load i64, i64* %"iv9'ac", align 8
  %forfree240 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache238, align 8, !dereferenceable !306, !invariant.group !3499
  %2749 = load i64, i64* %"iv9'ac", align 8
  %forfree248 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache246, align 8, !dereferenceable !306, !invariant.group !3500
  %2750 = load i64, i64* %"iv9'ac", align 8
  %forfree249 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented206_cache, align 8, !dereferenceable !4220, !invariant.group !3501
  %2751 = load i64, i64* %"iv9'ac", align 8
  %forfree252 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache250, align 8, !dereferenceable !306, !invariant.group !3502
  %2752 = load i64, i64* %"iv9'ac", align 8
  %forfree259 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache257, align 8, !dereferenceable !306, !invariant.group !3503
  %2753 = load i64, i64* %"iv9'ac", align 8
  %forfree260 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi27_cache", align 8, !dereferenceable !306, !invariant.group !3504
  %2754 = load i64, i64* %"iv9'ac", align 8
  %forfree263 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache261, align 8, !dereferenceable !306, !invariant.group !3505
  %2755 = load i64, i64* %"iv9'ac", align 8
  %forfree264 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi26_cache", align 8, !dereferenceable !306, !invariant.group !3506
  %2756 = load i64, i64* %"iv9'ac", align 8
  %forfree267 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache265, align 8, !dereferenceable !306, !invariant.group !3507
  %2757 = load i64, i64* %"iv9'ac", align 8
  %forfree271 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache269_cache, align 8, !dereferenceable !4219, !invariant.group !3508
  %2758 = load i64, i64* %"iv9'ac", align 8
  %forfree274 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache272, align 8, !dereferenceable !306, !invariant.group !3509
  %2759 = load i64, i64* %"iv9'ac", align 8
  %forfree280 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %box_cache, align 8, !dereferenceable !306, !invariant.group !3510
  %2760 = load i64, i64* %"iv9'ac", align 8
  %forfree281 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"box'mi_cache", align 8, !dereferenceable !306, !invariant.group !3511
  %2761 = load i64, i64* %"iv9'ac", align 8
  %forfree284 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache282, align 8, !dereferenceable !306, !invariant.group !3512
  %2762 = load i64, i64* %"iv9'ac", align 8
  %forfree297 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"newstruct430'mi_cache", align 8, !dereferenceable !306, !invariant.group !3513
  %2763 = load i64, i64* %"iv9'ac", align 8
  %forfree300 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache298, align 8, !dereferenceable !306, !invariant.group !3514
  %2764 = load i64, i64* %"iv9'ac", align 8
  %forfree303 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache301, align 8, !dereferenceable !306, !invariant.group !3515
  %2765 = load i64, i64* %"iv9'ac", align 8
  %forfree315 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache313, align 8, !dereferenceable !306, !invariant.group !3516
  %2766 = load i64, i64* %"iv9'ac", align 8
  %forfree324 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache322, align 8, !dereferenceable !306, !invariant.group !3517
  %2767 = load i64, i64* %"iv9'ac", align 8
  %forfree328 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache326, align 8, !dereferenceable !306, !invariant.group !3518
  %2768 = load i64, i64* %"iv9'ac", align 8
  %forfree338 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi33_cache", align 8, !dereferenceable !306, !invariant.group !3519
  %2769 = load i64, i64* %"iv9'ac", align 8
  %forfree340 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi36_cache", align 8, !dereferenceable !306, !invariant.group !3520
  %2770 = load i64, i64* %"iv9'ac", align 8
  %forfree344 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache342, align 8, !dereferenceable !306, !invariant.group !3521
  %2771 = load i64, i64* %"iv9'ac", align 8
  %forfree347 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache345, align 8, !dereferenceable !306, !invariant.group !3522
  %2772 = load i64, i64* %"iv9'ac", align 8
  %forfree359 = load i1*, i1** %.not908.not_cache, align 8, !dereferenceable !4221, !invariant.group !3525
  %2773 = bitcast i1* %forfree359 to i8*
  call void @free(i8* nonnull %2773), !dbg !4207, !enzyme_cache_free !3523
  %2774 = load i64, i64* %"iv9'ac", align 8
  %forfree363 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache361, align 8, !dereferenceable !306, !invariant.group !3526
  %2775 = load i64, i64* %"iv9'ac", align 8
  %forfree367 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache365, align 8, !dereferenceable !306, !invariant.group !3527
  %2776 = load i64, i64* %"iv9'ac", align 8
  %forfree370 = load { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)*, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)** %_augmented369_cache, align 8, !dereferenceable !4222, !invariant.group !3528
  %2777 = load i64, i64* %"iv9'ac", align 8
  %forfree372 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi39_cache", align 8, !dereferenceable !306, !invariant.group !3529
  %2778 = load i64, i64* %"iv9'ac", align 8
  %forfree382 = load i1*, i1** %.not918.not_cache, align 8, !dereferenceable !4221, !invariant.group !3532
  %2779 = bitcast i1* %forfree382 to i8*
  call void @free(i8* nonnull %2779), !dbg !4207, !enzyme_cache_free !3530
  %2780 = load i64, i64* %"iv9'ac", align 8
  %forfree395 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache393, align 8, !dereferenceable !306, !invariant.group !3533
  %2781 = load i64, i64* %"iv9'ac", align 8
  %forfree397 = load i1*, i1** %.not921_cache, align 8, !dereferenceable !4221, !invariant.group !3536
  %2782 = bitcast i1* %forfree397 to i8*
  call void @free(i8* nonnull %2782), !dbg !4207, !enzyme_cache_free !3534
  %2783 = load i64, i64* %"iv9'ac", align 8
  %forfree402 = load i8*, i8** %_cache400, align 8, !dereferenceable !4221, !invariant.group !3539
  call void @free(i8* nonnull %forfree402), !dbg !4207, !enzyme_cache_free !3537
  %2784 = load i64, i64* %"iv9'ac", align 8
  %forfree407 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache405, align 8, !dereferenceable !306, !invariant.group !3540
  %2785 = load i64, i64* %"iv9'ac", align 8
  %forfree409 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi41_cache", align 8, !dereferenceable !306, !invariant.group !3541
  %2786 = load i64, i64* %"iv9'ac", align 8
  %forfree413 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache411_cache, align 8, !dereferenceable !4219, !invariant.group !3542
  %2787 = load i64, i64* %"iv9'ac", align 8
  %forfree418 = load i1*, i1** %.not8851018_cache, align 8, !dereferenceable !4221, !invariant.group !3545
  %2788 = bitcast i1* %forfree418 to i8*
  call void @free(i8* nonnull %2788), !dbg !4207, !enzyme_cache_free !3543
  %2789 = load i64, i64* %"iv9'ac", align 8
  %forfree421 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache419, align 8, !dereferenceable !306, !invariant.group !3546
  %2790 = load i64, i64* %"iv9'ac", align 8
  %forfree430 = load i64**, i64*** %value_phi523_cache, align 8, !dereferenceable !306, !invariant.group !3549
  %2791 = bitcast i64** %forfree430 to i8*
  call void @free(i8* nonnull %2791), !dbg !4207, !enzyme_cache_free !3547
  %2792 = load i64, i64* %"iv9'ac", align 8
  %forfree448 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache446, align 8, !dereferenceable !306, !invariant.group !3550
  %2793 = load i64, i64* %"iv9'ac", align 8
  %forfree452 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache450, align 8, !dereferenceable !306, !invariant.group !3551
  %2794 = load i64, i64* %"iv9'ac", align 8
  %forfree453 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi53_cache", align 8, !dereferenceable !306, !invariant.group !3552
  %2795 = load i64, i64* %"iv9'ac", align 8
  %forfree457 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache455_cache, align 8, !dereferenceable !4219, !invariant.group !3553
  %2796 = load i64, i64* %"iv9'ac", align 8
  %forfree460 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache458, align 8, !dereferenceable !306, !invariant.group !3554
  %2797 = load i64, i64* %"iv9'ac", align 8
  %forfree461 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented410_cache, align 8, !dereferenceable !4220, !invariant.group !3555
  %2798 = load i64, i64* %"iv9'ac", align 8
  %forfree464 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache462, align 8, !dereferenceable !306, !invariant.group !3556
  %2799 = load i64, i64* %"iv9'ac", align 8
  %forfree465 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi50_cache", align 8, !dereferenceable !306, !invariant.group !3557
  %2800 = load i64, i64* %"iv9'ac", align 8
  %forfree469 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache467_cache, align 8, !dereferenceable !4223, !invariant.group !3558
  %2801 = load i64, i64* %"iv9'ac", align 8
  %forfree472 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache470, align 8, !dereferenceable !306, !invariant.group !3559
  %2802 = load i64, i64* %"iv9'ac", align 8
  %forfree473 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi49_cache", align 8, !dereferenceable !306, !invariant.group !3560
  %2803 = load i64, i64* %"iv9'ac", align 8
  %forfree476 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache474, align 8, !dereferenceable !306, !invariant.group !3561
  %2804 = load i64, i64* %"iv9'ac", align 8
  %forfree480 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache478_cache, align 8, !dereferenceable !4219, !invariant.group !3562
  %2805 = load i64, i64* %"iv9'ac", align 8
  %forfree486 = load i64**, i64*** %value_phi579_cache, align 8, !dereferenceable !306, !invariant.group !3565
  %2806 = bitcast i64** %forfree486 to i8*
  call void @free(i8* nonnull %2806), !dbg !4207, !enzyme_cache_free !3563
  %2807 = load i64, i64* %"iv9'ac", align 8
  %forfree514 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache512, align 8, !dereferenceable !306, !invariant.group !3566
  %2808 = load i64, i64* %"iv9'ac", align 8
  %forfree516 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi63_cache", align 8, !dereferenceable !306, !invariant.group !3567
  %2809 = load i64, i64* %"iv9'ac", align 8
  %forfree519 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)** %subcache518_cache, align 8, !dereferenceable !4224, !invariant.group !3568
  %2810 = load i64, i64* %"iv9'ac", align 8
  %forfree523 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache521, align 8, !dereferenceable !306, !invariant.group !3569
  %2811 = load i64, i64* %"iv9'ac", align 8
  %forfree524 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented454_cache, align 8, !dereferenceable !4220, !invariant.group !3570
  %2812 = load i64, i64* %"iv9'ac", align 8
  %forfree527 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache525, align 8, !dereferenceable !306, !invariant.group !3571
  %2813 = load i64, i64* %"iv9'ac", align 8
  %forfree528 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi62_cache", align 8, !dereferenceable !306, !invariant.group !3572
  %2814 = load i64, i64* %"iv9'ac", align 8
  %forfree532 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache530_cache, align 8, !dereferenceable !4223, !invariant.group !3573
  %2815 = load i64, i64* %"iv9'ac", align 8
  %forfree535 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache533, align 8, !dereferenceable !306, !invariant.group !3574
  %2816 = load i64, i64* %"iv9'ac", align 8
  %forfree536 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi61_cache", align 8, !dereferenceable !306, !invariant.group !3575
  %2817 = load i64, i64* %"iv9'ac", align 8
  %forfree539 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache537, align 8, !dereferenceable !306, !invariant.group !3576
  %2818 = load i64, i64* %"iv9'ac", align 8
  %forfree543 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache541_cache, align 8, !dereferenceable !4219, !invariant.group !3577
  %2819 = load i64, i64* %"iv9'ac", align 8
  %forfree548 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache546, align 8, !dereferenceable !306, !invariant.group !3578
  %2820 = load i64, i64* %"iv9'ac", align 8
  %forfree550 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi69_cache", align 8, !dereferenceable !306, !invariant.group !3579
  %2821 = load i64, i64* %"iv9'ac", align 8
  %forfree554 = load { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)** %_augmented553_cache, align 8, !dereferenceable !4225, !invariant.group !3580
  %2822 = load i64, i64* %"iv9'ac", align 8
  %forfree591 = load { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)*, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)** %_augmented590_cache, align 8, !dereferenceable !4226, !invariant.group !3581
  %2823 = load i64, i64* %"iv9'ac", align 8
  %forfree594 = load i8*, i8** %_cache592, align 8, !dereferenceable !4221, !invariant.group !3584
  call void @free(i8* nonnull %forfree594), !dbg !4207, !enzyme_cache_free !3582
  br label %invertL598

invertL616:                                       ; preds = %invertL671
  %2824 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %_unwrap173 = add nsw i64 %623, -2, !dbg !3378
  %2825 = add nuw i64 %_unwrap173, 1, !dbg !3378
  %2826 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache171, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3482
  %2827 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2826, i64 %2824, !dbg !3378
  %2828 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2827, align 8, !dbg !3378, !invariant.group !3620
  %_unwrap174 = addrspacecast {} addrspace(10)* %2828 to {} addrspace(11)*, !dbg !3378
  %_unwrap175 = bitcast {} addrspace(11)* %_unwrap174 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3378
  %_unwrap176 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap175, i64 0, i64 2, !dbg !3378
  %_unwrap177 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap176, align 8, !dbg !3378, !invariant.group !3609
  %2829 = bitcast {}*** %338 to {}**, !dbg !3378
  %2830 = getelementptr inbounds {}*, {}** %2829, i64 -14, !dbg !3378
  %2831 = getelementptr inbounds {}*, {}** %2830, i64 16, !dbg !3378
  %2832 = bitcast {}** %2831 to i8**, !dbg !3378
  %2833 = load i8*, i8** %2832, align 8, !dbg !3378
  %2834 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %2830, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5985126160 to {}*) to {} addrspace(10)*)), !dbg !3378
  %2835 = addrspacecast {} addrspace(10)* %2834 to {} addrspace(11)*, !dbg !3378
  %2836 = bitcast {} addrspace(11)* %2835 to [3 x i64] addrspace(11)*, !dbg !3378
  %2837 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !3378
  %2838 = ptrtoint {}* %2837 to i64, !dbg !3378
  %2839 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %2836, i64 0, i64 0, !dbg !3378
  store i64 %2838, i64 addrspace(11)* %2839, align 8, !dbg !3378
  %2840 = addrspacecast {} addrspace(10)* %"getfield'ipl" to {} addrspace(11)*, !dbg !3378
  %2841 = call {}* @julia.pointer_from_objref({} addrspace(11)* %2840), !dbg !3378
  %2842 = ptrtoint {}* %2841 to i64, !dbg !3378
  %2843 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %2836, i64 0, i64 1, !dbg !3378
  store i64 %2842, i64 addrspace(11)* %2843, align 8, !dbg !3378
  %2844 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %2845 = add nuw i64 %_unwrap173, 1, !dbg !3378
  %2846 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache178, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3483
  %2847 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2846, i64 %2844, !dbg !3378
  %2848 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2847, align 8, !dbg !3378, !invariant.group !3619
  %2849 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %2850 = add nuw i64 %_unwrap173, 1, !dbg !3378
  %2851 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi20_cache", align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3484
  %2852 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2851, i64 %2849, !dbg !3378
  %2853 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2852, align 8, !dbg !3378, !invariant.group !3618
  %2854 = addrspacecast {} addrspace(10)* %2853 to {} addrspace(11)*, !dbg !3378
  %2855 = call {}* @julia.pointer_from_objref({} addrspace(11)* %2854), !dbg !3378
  %2856 = ptrtoint {}* %2855 to i64, !dbg !3378
  %2857 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %2836, i64 0, i64 2, !dbg !3378
  store i64 %2856, i64 addrspace(11)* %2857, align 8, !dbg !3378
  %2858 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5548675696 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6224791504 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530968 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap177, {} addrspace(10)* %2834, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138639312 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %getfield, {} addrspace(10)* %"getfield'ipl", {} addrspace(10)* %2848, {} addrspace(10)* %2853), !dbg !3378
  %2859 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %2860 = add nuw i64 %_unwrap173, 1, !dbg !3378
  %2861 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache182, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3485
  %2862 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2861, i64 %2859, !dbg !3378
  %2863 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2862, align 8, !dbg !3378, !invariant.group !3617
  %_unwrap185 = addrspacecast {} addrspace(10)* %2863 to {} addrspace(11)*, !dbg !3378
  %_unwrap186 = bitcast {} addrspace(11)* %_unwrap185 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3378
  %_unwrap187 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap186, i64 0, i64 2, !dbg !3378
  %_unwrap188 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap187, align 8, !dbg !3378, !invariant.group !3607
  %2864 = bitcast {}*** %325 to {}**, !dbg !3378
  %2865 = getelementptr inbounds {}*, {}** %2864, i64 -14, !dbg !3378
  %2866 = getelementptr inbounds {}*, {}** %2865, i64 16, !dbg !3378
  %2867 = bitcast {}** %2866 to i8**, !dbg !3378
  %2868 = load i8*, i8** %2867, align 8, !dbg !3378
  %2869 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %2865, i64 56, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11461971664 to {}*) to {} addrspace(10)*)), !dbg !3378
  %2870 = addrspacecast {} addrspace(10)* %2869 to {} addrspace(11)*, !dbg !3378
  %2871 = bitcast {} addrspace(11)* %2870 to [7 x i64] addrspace(11)*, !dbg !3378
  %2872 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !3378
  %2873 = ptrtoint {}* %2872 to i64, !dbg !3378
  %2874 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %2871, i64 0, i64 0, !dbg !3378
  store i64 %2873, i64 addrspace(11)* %2874, align 8, !dbg !3378
  %2875 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %2876 = add nuw i64 %_unwrap173, 1, !dbg !3378
  %2877 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache189, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3486
  %2878 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2877, i64 %2875, !dbg !3378
  %2879 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2878, align 8, !dbg !3378, !invariant.group !3616
  %2880 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %2881 = add nuw i64 %_unwrap173, 1, !dbg !3378
  %2882 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi19_cache", align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3487
  %2883 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2882, i64 %2880, !dbg !3378
  %2884 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2883, align 8, !dbg !3378, !invariant.group !3615
  %2885 = addrspacecast {} addrspace(10)* %2884 to {} addrspace(11)*, !dbg !3378
  %2886 = call {}* @julia.pointer_from_objref({} addrspace(11)* %2885), !dbg !3378
  %2887 = ptrtoint {}* %2886 to i64, !dbg !3378
  %2888 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %2871, i64 0, i64 1, !dbg !3378
  store i64 %2887, i64 addrspace(11)* %2888, align 8, !dbg !3378
  %2889 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !3378
  %2890 = ptrtoint {}* %2889 to i64, !dbg !3378
  %2891 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %2871, i64 0, i64 2, !dbg !3378
  store i64 %2890, i64 addrspace(11)* %2891, align 8, !dbg !3378
  %2892 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !3378
  %2893 = ptrtoint {}* %2892 to i64, !dbg !3378
  %2894 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %2871, i64 0, i64 3, !dbg !3378
  store i64 %2893, i64 addrspace(11)* %2894, align 8, !dbg !3378
  %2895 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !3378
  %2896 = ptrtoint {}* %2895 to i64, !dbg !3378
  %2897 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %2871, i64 0, i64 4, !dbg !3378
  store i64 %2896, i64 addrspace(11)* %2897, align 8, !dbg !3378
  %2898 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !3378
  %2899 = ptrtoint {}* %2898 to i64, !dbg !3378
  %2900 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %2871, i64 0, i64 5, !dbg !3378
  store i64 %2899, i64 addrspace(11)* %2900, align 8, !dbg !3378
  %2901 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !3378
  %2902 = ptrtoint {}* %2901 to i64, !dbg !3378
  %2903 = getelementptr inbounds [7 x i64], [7 x i64] addrspace(11)* %2871, i64 0, i64 6, !dbg !3378
  store i64 %2902, i64 addrspace(11)* %2903, align 8, !dbg !3378
  %2904 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5548675696 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11460510992 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227532296 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap188, {} addrspace(10)* %2869, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5139467504 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %2879, {} addrspace(10)* %2884, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5191131744 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*)), !dbg !3378
  %2905 = load i64, i64* %"iv9'ac", align 8, !dbg !3593
  %_unwrap193 = addrspacecast [1 x {} addrspace(10)*]* %345 to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !3593
  %2906 = load i64, i64* %"iv9'ac", align 8, !dbg !3593
  %"'ipc195_unwrap" = addrspacecast [1 x {} addrspace(10)*]* %"'ipa194" to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !3593
  %2907 = load i64, i64* %"iv9'ac", align 8, !dbg !3593
  %2908 = add nuw i64 %_unwrap173, 1, !dbg !3593
  %2909 = load double*, double** %value_phi372_cache, align 8, !dbg !3593, !dereferenceable !306, !invariant.group !3490
  %2910 = getelementptr inbounds double, double* %2909, i64 %2907, !dbg !3593
  %2911 = load double, double* %2910, align 8, !dbg !3593, !invariant.group !3606
  %2912 = load i64, i64* %"iv9'ac", align 8, !dbg !3593
  %2913 = add nuw i64 %_unwrap173, 1, !dbg !3593
  %2914 = load { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %subcache198_cache, align 8, !dbg !3593, !dereferenceable !306, !invariant.group !3491
  %2915 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2914, i64 %2912, !dbg !3593
  %2916 = load { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %2915, align 8, !dbg !3593, !invariant.group !3614
  %2917 = call fastcc { double } @diffejulia_q_true_2051([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %_unwrap193, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc195_unwrap", double %2911, { {} addrspace(10)*, {} addrspace(10)* addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %2916), !dbg !3593
  %2918 = extractvalue { double } %2917, 0, !dbg !3593
  %2919 = load double, double* %"value_phi372'de", align 8, !dbg !3593
  %2920 = fadd fast double %2919, %2918, !dbg !3593
  store double %2920, double* %"value_phi372'de", align 8, !dbg !3593
  %2921 = load i64, i64* %"iv9'ac", align 8, !dbg !3590
  %2922 = add nuw i64 %_unwrap173, 1, !dbg !3590
  %2923 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache202, align 8, !dbg !3590, !dereferenceable !306, !invariant.group !3492
  %2924 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2923, i64 %2921, !dbg !3590
  %2925 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2924, align 8, !dbg !3590, !invariant.group !3603
  %2926 = load i64, i64* %"iv9'ac", align 8, !dbg !3590
  %2927 = add nuw i64 %_unwrap173, 1, !dbg !3590
  %2928 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi17_cache", align 8, !dbg !3590, !dereferenceable !306, !invariant.group !3493
  %2929 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2928, i64 %2926, !dbg !3590
  %2930 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2929, align 8, !dbg !3590, !invariant.group !3602
  %2931 = load i64, i64* %"iv9'ac", align 8, !dbg !3590
  %2932 = add nuw i64 %_unwrap173, 1, !dbg !3590
  %2933 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache207_cache, align 8, !dbg !3590, !dereferenceable !306, !invariant.group !3494
  %2934 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2933, i64 %2931, !dbg !3590
  %2935 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %2934, align 8, !dbg !3590, !invariant.group !3601
  call fastcc void @diffejulia_gemv__1994({} addrspace(10)* align 16 %2925, {} addrspace(10)* align 16 %2930, i32 zeroext 1308622848, {} addrspace(10)* align 16 %621, {} addrspace(10)* align 16 %"'ac168", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl", { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %2935), !dbg !3590
  %2936 = load double, double* %"value_phi372'de", align 8
  store double 0.000000e+00, double* %"value_phi372'de", align 8
  %2937 = load i64, i64* %"iv9'ac", align 8
  %2938 = icmp eq i64 %2937, 0
  %2939 = xor i1 %2938, true
  %2940 = select fast i1 %2939, double %2936, double 0.000000e+00
  %2941 = load double, double* %"'de210", align 8
  %2942 = fadd fast double %2941, %2936
  %2943 = select fast i1 %2938, double %2941, double %2942
  store double %2943, double* %"'de210", align 8
  br i1 %2938, label %invertL616.preheader, label %incinvertL616

incinvertL616:                                    ; preds = %invertL616
  %2944 = load i64, i64* %"iv9'ac", align 8
  %2945 = add nsw i64 %2944, -1
  store i64 %2945, i64* %"iv9'ac", align 8
  br label %invertL1340

invertL671:                                       ; preds = %invertL684
  %2946 = load i64, i64* %"iv9'ac", align 8, !dbg !3631
  %_unwrap214 = add nsw i64 %623, -2, !dbg !3631
  %2947 = add nuw i64 %_unwrap214, 1, !dbg !3631
  %2948 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache211, align 8, !dbg !3631, !dereferenceable !306, !invariant.group !3495
  %2949 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2948, i64 %2946, !dbg !3631
  %2950 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2949, align 8, !dbg !3631, !invariant.group !3636
  br label %invertL616

invertL684:                                       ; preds = %invertL741.L742_crit_edge, %invertL705.preheader
  br label %invertL671

invertL705.preheader:                             ; preds = %invertL705
  %2951 = load i64, i64* %"iv9'ac", align 8
  %2952 = load i64, i64* %"iv11'ac", align 8
  %_unwrap223 = load i64**, i64*** %value_phi414_cache, align 8, !dbg !3654, !invariant.group !3655
  %_unwrap224 = getelementptr inbounds i64*, i64** %_unwrap223, i64 %2951
  %forfree225 = load i64*, i64** %_unwrap224, align 8, !dereferenceable !306, !invariant.group !3656
  %2953 = bitcast i64* %forfree225 to i8*
  call void @free(i8* nonnull %2953), !dbg !4207
  br label %invertL684

invertL705:                                       ; preds = %mergeinvertL705_L741.L742_crit_edge.loopexit234, %invertL712
  %2954 = load i64, i64* %"iv11'ac", align 8
  %2955 = icmp eq i64 %2954, 0
  %2956 = xor i1 %2955, true
  br i1 %2955, label %invertL705.preheader, label %incinvertL705

incinvertL705:                                    ; preds = %invertL705
  %2957 = load i64, i64* %"iv11'ac", align 8
  %2958 = add nsw i64 %2957, -1
  store i64 %2958, i64* %"iv11'ac", align 8
  br label %invertL712

invertL712:                                       ; preds = %mergeinvertL705_L741.L742_crit_edge.loopexit, %incinvertL705
  %2959 = load i64, i64* %"iv11'ac", align 8, !dbg !3663
  %2960 = load i64, i64* %"iv9'ac", align 8, !dbg !3663
  %_unwrap221 = add nsw i64 %623, -2, !dbg !3663
  %2961 = add nuw i64 %_unwrap221, 1, !dbg !3663
  %2962 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache211, align 8, !dbg !3663, !dereferenceable !306, !invariant.group !3495
  %2963 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2962, i64 %2960, !dbg !3663
  %2964 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %2963, align 8, !dbg !3663, !invariant.group !3636
  %"'ipc219_unwrap" = bitcast {} addrspace(10)* %2964 to double addrspace(13)* addrspace(10)*, !dbg !3663
  %"'ipc220_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc219_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3663
  %"arrayptr712926'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc220_unwrap", align 8, !dbg !3663, !tbaa !382, !alias.scope !3664, !noalias !3665, !nonnull !68
  %2965 = add nuw i64 %_unwrap221, 1, !dbg !3663
  %2966 = load i64**, i64*** %value_phi414_cache, align 8, !dbg !3663, !dereferenceable !306, !invariant.group !3498
  %2967 = getelementptr inbounds i64*, i64** %2966, i64 %2960, !dbg !3663
  %2968 = load i64*, i64** %2967, align 8, !dbg !3663, !dereferenceable !306, !invariant.group !3656
  %2969 = getelementptr inbounds i64, i64* %2968, i64 %2959, !dbg !3663
  %2970 = load i64, i64* %2969, align 8, !dbg !3663, !invariant.group !3657
  %_unwrap226 = add i64 %2970, -1, !dbg !3663
  %"'ipg218_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr712926'il_phi_unwrap", i64 %_unwrap226, !dbg !3663
  %2971 = load double, double addrspace(13)* %"'ipg218_unwrap", align 8, !dbg !3663, !tbaa !269, !alias.scope !4227, !noalias !4228
  store double 0.000000e+00, double addrspace(13)* %"'ipg218_unwrap", align 8, !dbg !3663, !tbaa !269, !alias.scope !4227, !noalias !4228
  %2972 = load double, double* %"arrayref710'de", align 8, !dbg !3663
  %2973 = fadd fast double %2972, %2971, !dbg !3663
  store double %2973, double* %"arrayref710'de", align 8, !dbg !3663
  %2974 = load double, double* %"arrayref710'de", align 8, !dbg !3650
  store double 0.000000e+00, double* %"arrayref710'de", align 8, !dbg !3650
  %2975 = load i64, i64* %"iv11'ac", align 8, !dbg !3650
  %2976 = load i64, i64* %"iv9'ac", align 8, !dbg !3650
  %"'ipc215_unwrap" = bitcast {} addrspace(10)* %"getfield13'ipl" to double addrspace(13)* addrspace(10)*, !dbg !3650
  %"'ipc216_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc215_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3650
  %"arrayptr709925'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc216_unwrap", align 16, !alias.scope !3453, !noalias !3450, !invariant.group !3653
  %_unwrap228 = add i64 %2976, 2, !dbg !3650
  %_unwrap229 = add nsw i64 %_unwrap228, -2, !dbg !3650
  %2977 = load i64, i64* %arraysize385_cache, align 8, !alias.scope !3450, !noalias !3453, !invariant.group !3475
  %_unwrap230 = mul i64 %_unwrap229, %2977, !dbg !3650
  %_unwrap231 = add i64 %_unwrap230, -1, !dbg !3650
  %iv.next12_unwrap = add nuw nsw i64 %2975, 1, !dbg !3650
  %_unwrap232 = add i64 %_unwrap231, %iv.next12_unwrap, !dbg !3650
  %"'ipg227_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr709925'ipl_unwrap", i64 %_unwrap232, !dbg !3650
  %2978 = load double, double addrspace(13)* %"'ipg227_unwrap", align 8, !dbg !3650, !tbaa !269, !alias.scope !4229, !noalias !4230
  %2979 = fadd fast double %2978, %2974, !dbg !3650
  store double %2979, double addrspace(13)* %"'ipg227_unwrap", align 8, !dbg !3650, !tbaa !269, !alias.scope !4229, !noalias !4230
  br label %invertL705

invertL741.L742_crit_edge.loopexit:               ; preds = %invertL741.L742_crit_edge
  %_unwrap233 = add nsw i64 %623, -2
  %2980 = add nuw i64 %_unwrap233, 1
  %2981 = load i64*, i64** %loopLimit_cache24, align 8, !dereferenceable !306, !invariant.group !3473
  %2982 = load i64, i64* %"iv9'ac", align 8
  %2983 = getelementptr inbounds i64, i64* %2981, i64 %2982
  %2984 = load i64, i64* %2983, align 8, !invariant.group !3676
  %2985 = add nuw i64 %_unwrap233, 1
  %2986 = load i64*, i64** %loopLimit_cache24, align 8, !dereferenceable !306, !invariant.group !3473
  %2987 = load i64, i64* %"iv9'ac", align 8
  %2988 = getelementptr inbounds i64, i64* %2986, i64 %2987
  %2989 = load i64, i64* %2988, align 8, !invariant.group !3676
  %2990 = load i64, i64* %"iv9'ac", align 8
  %2991 = add nuw i64 %_unwrap233, 1
  %2992 = load i64*, i64** %loopLimit_cache24, align 8, !dereferenceable !306, !invariant.group !3473
  %2993 = getelementptr inbounds i64, i64* %2992, i64 %2990
  %2994 = load i64, i64* %2993, align 8, !invariant.group !3676
  %2995 = icmp ne i64 %2994, 0
  br i1 %2995, label %invertL741.L742_crit_edge.loopexit_phirc, label %invertL741.L742_crit_edge.loopexit_phirc237

invertL741.L742_crit_edge.loopexit_phirc:         ; preds = %invertL741.L742_crit_edge.loopexit
  %2996 = sub nuw i64 %2994, 1
  %_unwrap235 = add nsw i64 %623, -2
  %2997 = add nuw i64 %_unwrap235, 1
  %2998 = load i64**, i64*** %value_phi414_cache, align 8, !dereferenceable !306, !invariant.group !3498
  %2999 = getelementptr inbounds i64*, i64** %2998, i64 %2990
  %3000 = load i64*, i64** %2999, align 8, !dereferenceable !306, !invariant.group !3656
  %3001 = getelementptr inbounds i64, i64* %3000, i64 %2996
  %3002 = load i64, i64* %3001, align 8, !invariant.group !3657
  %3003 = load i64, i64* %arraysize385_cache, align 8, !alias.scope !3450, !noalias !3453, !invariant.group !3475
  %_unwrap236 = icmp eq i64 %3002, %3003
  br label %invertL741.L742_crit_edge.loopexit_phimerge

invertL741.L742_crit_edge.loopexit_phirc237:      ; preds = %invertL741.L742_crit_edge.loopexit
  br label %invertL741.L742_crit_edge.loopexit_phimerge

invertL741.L742_crit_edge.loopexit_phimerge:      ; preds = %invertL741.L742_crit_edge.loopexit_phirc237, %invertL741.L742_crit_edge.loopexit_phirc
  %3004 = phi i1 [ %_unwrap236, %invertL741.L742_crit_edge.loopexit_phirc ], [ false, %invertL741.L742_crit_edge.loopexit_phirc237 ]
  br i1 %3004, label %mergeinvertL705_L741.L742_crit_edge.loopexit234, label %mergeinvertL705_L741.L742_crit_edge.loopexit

mergeinvertL705_L741.L742_crit_edge.loopexit234:  ; preds = %invertL741.L742_crit_edge.loopexit_phimerge
  store i64 %2989, i64* %"iv11'ac", align 8
  br label %invertL705

mergeinvertL705_L741.L742_crit_edge.loopexit:     ; preds = %invertL741.L742_crit_edge.loopexit_phimerge
  store i64 %2984, i64* %"iv11'ac", align 8
  br label %invertL712

invertL741.L742_crit_edge:                        ; preds = %invertL777, %invertL770
  %3005 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %_unwrap241 = add nsw i64 %623, -2, !dbg !3378
  %3006 = add nuw i64 %_unwrap241, 1, !dbg !3378
  %3007 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache238, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3499
  %3008 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3007, i64 %3005, !dbg !3378
  %3009 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3008, align 8, !dbg !3378, !invariant.group !3677
  %_unwrap242 = addrspacecast {} addrspace(10)* %3009 to {} addrspace(11)*, !dbg !3378
  %_unwrap243 = bitcast {} addrspace(11)* %_unwrap242 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3378
  %_unwrap244 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap243, i64 0, i64 2, !dbg !3378
  %_unwrap245 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap244, align 8, !dbg !3378, !invariant.group !3685
  %3010 = bitcast {}*** %291 to {}**, !dbg !3378
  %3011 = getelementptr inbounds {}*, {}** %3010, i64 -14, !dbg !3378
  %3012 = getelementptr inbounds {}*, {}** %3011, i64 16, !dbg !3378
  %3013 = bitcast {}** %3012 to i8**, !dbg !3378
  %3014 = load i8*, i8** %3013, align 8, !dbg !3378
  %3015 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %3011, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6231767696 to {}*) to {} addrspace(10)*)), !dbg !3378
  %3016 = addrspacecast {} addrspace(10)* %3015 to {} addrspace(11)*, !dbg !3378
  %3017 = bitcast {} addrspace(11)* %3016 to [4 x i64] addrspace(11)*, !dbg !3378
  %3018 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !3378
  %3019 = ptrtoint {}* %3018 to i64, !dbg !3378
  %3020 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3017, i64 0, i64 0, !dbg !3378
  store i64 %3019, i64 addrspace(11)* %3020, align 8, !dbg !3378
  %3021 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %3022 = add nuw i64 %_unwrap241, 1, !dbg !3378
  %3023 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache246, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3500
  %3024 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3023, i64 %3021, !dbg !3378
  %3025 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3024, align 8, !dbg !3378, !invariant.group !3600
  %3026 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %3027 = add nuw i64 %_unwrap241, 1, !dbg !3378
  %3028 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented206_cache, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3501
  %3029 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %3028, i64 %3026, !dbg !3378
  %3030 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %3029, align 8, !dbg !3378, !invariant.group !3599
  %"'ac208_unwrap" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %3030, 2, !dbg !3378
  %3031 = addrspacecast {} addrspace(10)* %"'ac208_unwrap" to {} addrspace(11)*, !dbg !3378
  %3032 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3031), !dbg !3378
  %3033 = ptrtoint {}* %3032 to i64, !dbg !3378
  %3034 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3017, i64 0, i64 1, !dbg !3378
  store i64 %3033, i64 addrspace(11)* %3034, align 8, !dbg !3378
  %3035 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %3036 = add nuw i64 %_unwrap241, 1, !dbg !3378
  %3037 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache250, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3502
  %3038 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3037, i64 %3035, !dbg !3378
  %3039 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3038, align 8, !dbg !3378, !invariant.group !3613
  %3040 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %3041 = add nuw i64 %_unwrap241, 1, !dbg !3378
  %3042 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache171, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3482
  %3043 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3042, i64 %3040, !dbg !3378
  %3044 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3043, align 8, !dbg !3378, !invariant.group !3620
  %_unwrap253 = addrspacecast {} addrspace(10)* %3044 to {} addrspace(11)*, !dbg !3378
  %_unwrap254 = bitcast {} addrspace(11)* %_unwrap253 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3378
  %_unwrap255 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap254, i64 0, i64 1, !dbg !3378
  %_unwrap256 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap255, align 8, !dbg !3378, !invariant.group !3608
  %3045 = addrspacecast {} addrspace(10)* %_unwrap256 to {} addrspace(11)*, !dbg !3378
  %3046 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3045), !dbg !3378
  %3047 = ptrtoint {}* %3046 to i64, !dbg !3378
  %3048 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3017, i64 0, i64 2, !dbg !3378
  store i64 %3047, i64 addrspace(11)* %3048, align 8, !dbg !3378
  %3049 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %3050 = add nuw i64 %_unwrap241, 1, !dbg !3378
  %3051 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache257, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3503
  %3052 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3051, i64 %3049, !dbg !3378
  %3053 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3052, align 8, !dbg !3378, !invariant.group !3682
  %3054 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %3055 = add nuw i64 %_unwrap241, 1, !dbg !3378
  %3056 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi27_cache", align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3504
  %3057 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3056, i64 %3054, !dbg !3378
  %3058 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3057, align 8, !dbg !3378, !invariant.group !3681
  %3059 = addrspacecast {} addrspace(10)* %3058 to {} addrspace(11)*, !dbg !3378
  %3060 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3059), !dbg !3378
  %3061 = ptrtoint {}* %3060 to i64, !dbg !3378
  %3062 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3017, i64 0, i64 3, !dbg !3378
  store i64 %3061, i64 addrspace(11)* %3062, align 8, !dbg !3378
  %3063 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5548675696 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6229942608 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227533512 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap245, {} addrspace(10)* %3015, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5140980816 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %3025, {} addrspace(10)* %"'ac208_unwrap", {} addrspace(10)* %3039, {} addrspace(10)* %_unwrap256, {} addrspace(10)* %3053, {} addrspace(10)* %3058), !dbg !3378
  %3064 = load i64, i64* %"iv9'ac", align 8, !dbg !3590
  %3065 = add nuw i64 %_unwrap241, 1, !dbg !3590
  %3066 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache261, align 8, !dbg !3590, !dereferenceable !306, !invariant.group !3505
  %3067 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3066, i64 %3064, !dbg !3590
  %3068 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3067, align 8, !dbg !3590, !invariant.group !3680
  %3069 = load i64, i64* %"iv9'ac", align 8, !dbg !3590
  %3070 = add nuw i64 %_unwrap241, 1, !dbg !3590
  %3071 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi26_cache", align 8, !dbg !3590, !dereferenceable !306, !invariant.group !3506
  %3072 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3071, i64 %3069, !dbg !3590
  %3073 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3072, align 8, !dbg !3590, !invariant.group !3679
  %3074 = load i64, i64* %"iv9'ac", align 8, !dbg !3590
  %3075 = add nuw i64 %_unwrap241, 1, !dbg !3590
  %3076 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache265, align 8, !dbg !3590, !dereferenceable !306, !invariant.group !3507
  %3077 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3076, i64 %3074, !dbg !3590
  %3078 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3077, align 8, !dbg !3590, !invariant.group !3640
  %3079 = load i64, i64* %"iv9'ac", align 8, !dbg !3590
  %3080 = add nuw i64 %_unwrap241, 1, !dbg !3590
  %3081 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache211, align 8, !dbg !3590, !dereferenceable !306, !invariant.group !3495
  %3082 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3081, i64 %3079, !dbg !3590
  %3083 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3082, align 8, !dbg !3590, !invariant.group !3636
  %3084 = load i64, i64* %"iv9'ac", align 8, !dbg !3590
  %3085 = add nuw i64 %_unwrap241, 1, !dbg !3590
  %3086 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache269_cache, align 8, !dbg !3590, !dereferenceable !306, !invariant.group !3508
  %3087 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3086, i64 %3084, !dbg !3590
  %3088 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3087, align 8, !dbg !3590, !invariant.group !3678
  call fastcc void @diffejulia_gemv__1994({} addrspace(10)* align 16 %3068, {} addrspace(10)* align 16 %3073, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield3, {} addrspace(10)* align 16 %"getfield3'ipl", {} addrspace(10)* align 16 %3078, {} addrspace(10)* align 16 %3083, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %3088), !dbg !3590
  %3089 = load i64, i64* %"iv9'ac", align 8
  %3090 = load i64, i64* %arraysize385_cache, align 8, !alias.scope !3450, !noalias !3453, !invariant.group !3475
  %.not867_unwrap = icmp eq i64 %3090, 0
  br i1 %.not867_unwrap, label %invertL684, label %invertL741.L742_crit_edge.loopexit

invertL770:                                       ; preds = %invertL779_phimerge_phimerge
  %3091 = load i64, i64* %"iv9'ac", align 8, !dbg !3707
  %_unwrap275 = add nsw i64 %623, -2, !dbg !3707
  %3092 = add nuw i64 %_unwrap275, 1, !dbg !3707
  %3093 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache272, align 8, !dbg !3707, !dereferenceable !306, !invariant.group !3509
  %3094 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3093, i64 %3091, !dbg !3707
  %3095 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3094, align 8, !dbg !3707, !invariant.group !3717
  %_unwrap276 = addrspacecast {} addrspace(10)* %3095 to {} addrspace(11)*, !dbg !3707
  %_unwrap277 = bitcast {} addrspace(11)* %_unwrap276 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3707
  %_unwrap278 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap277, i64 0, i64 2, !dbg !3707
  %_unwrap279 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap278, align 8, !dbg !3707, !invariant.group !3720
  %3096 = bitcast {}*** %248 to {}**, !dbg !3707
  %3097 = getelementptr inbounds {}*, {}** %3096, i64 -14, !dbg !3707
  %3098 = getelementptr inbounds {}*, {}** %3097, i64 16, !dbg !3707
  %3099 = bitcast {}** %3098 to i8**, !dbg !3707
  %3100 = load i8*, i8** %3099, align 8, !dbg !3707
  %3101 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %3097, i64 32, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6231767696 to {}*) to {} addrspace(10)*)), !dbg !3707
  %3102 = addrspacecast {} addrspace(10)* %3101 to {} addrspace(11)*, !dbg !3707
  %3103 = bitcast {} addrspace(11)* %3102 to [4 x i64] addrspace(11)*, !dbg !3707
  %3104 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !3707
  %3105 = ptrtoint {}* %3104 to i64, !dbg !3707
  %3106 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3103, i64 0, i64 0, !dbg !3707
  store i64 %3105, i64 addrspace(11)* %3106, align 8, !dbg !3707
  %3107 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !3707
  %3108 = ptrtoint {}* %3107 to i64, !dbg !3707
  %3109 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3103, i64 0, i64 1, !dbg !3707
  store i64 %3108, i64 addrspace(11)* %3109, align 8, !dbg !3707
  %3110 = load i64, i64* %"iv9'ac", align 8, !dbg !3707
  %3111 = add nuw i64 %_unwrap275, 1, !dbg !3707
  %3112 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %box_cache, align 8, !dbg !3707, !dereferenceable !306, !invariant.group !3510
  %3113 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3112, i64 %3110, !dbg !3707
  %3114 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3113, align 8, !dbg !3707, !invariant.group !3716
  %3115 = load i64, i64* %"iv9'ac", align 8, !dbg !3707
  %3116 = add nuw i64 %_unwrap275, 1, !dbg !3707
  %3117 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"box'mi_cache", align 8, !dbg !3707, !dereferenceable !306, !invariant.group !3511
  %3118 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3117, i64 %3115, !dbg !3707
  %3119 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3118, align 8, !dbg !3707, !invariant.group !3715
  %3120 = addrspacecast {} addrspace(10)* %3119 to {} addrspace(11)*, !dbg !3707
  %3121 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3120), !dbg !3707
  %3122 = ptrtoint {}* %3121 to i64, !dbg !3707
  %3123 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3103, i64 0, i64 2, !dbg !3707
  store i64 %3122, i64 addrspace(11)* %3123, align 8, !dbg !3707
  %3124 = load i64, i64* %"iv9'ac", align 8, !dbg !3707
  %3125 = add nuw i64 %_unwrap275, 1, !dbg !3707
  %3126 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache282, align 8, !dbg !3707, !dereferenceable !306, !invariant.group !3512
  %3127 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3126, i64 %3124, !dbg !3707
  %3128 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3127, align 8, !dbg !3378, !invariant.group !3684
  %3129 = load i64, i64* %"iv9'ac", align 8, !dbg !3707
  %3130 = add nuw i64 %_unwrap275, 1, !dbg !3707
  %3131 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache238, align 8, !dbg !3707, !dereferenceable !306, !invariant.group !3499
  %3132 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3131, i64 %3129, !dbg !3707
  %3133 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3132, align 8, !dbg !3707, !invariant.group !3677
  %_unwrap285 = addrspacecast {} addrspace(10)* %3133 to {} addrspace(11)*, !dbg !3707
  %_unwrap286 = bitcast {} addrspace(11)* %_unwrap285 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3707
  %_unwrap287 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap286, i64 0, i64 1, !dbg !3707
  %_unwrap288 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap287, align 8, !dbg !3378, !invariant.group !3683
  %3134 = addrspacecast {} addrspace(10)* %_unwrap288 to {} addrspace(11)*, !dbg !3707
  %3135 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3134), !dbg !3707
  %3136 = ptrtoint {}* %3135 to i64, !dbg !3707
  %3137 = getelementptr inbounds [4 x i64], [4 x i64] addrspace(11)* %3103, i64 0, i64 3, !dbg !3707
  store i64 %3136, i64 addrspace(11)* %3137, align 8, !dbg !3707
  %3138 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5548675696 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6250068816 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227533512 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap279, {} addrspace(10)* %3101, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5136487904 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134803728 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %3114, {} addrspace(10)* %3119, {} addrspace(10)* %3128, {} addrspace(10)* %_unwrap288), !dbg !3707
  %3139 = load i64, i64* %"iv9'ac", align 8, !dbg !3687
  %3140 = add nuw i64 %_unwrap275, 1, !dbg !3687
  %3141 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"newstruct430'mi_cache", align 8, !dbg !3687, !dereferenceable !306, !invariant.group !3513
  %3142 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3141, i64 %3139, !dbg !3687
  %3143 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3142, align 8, !dbg !3687, !invariant.group !3696
  %3144 = load i64, i64* %"iv9'ac", align 8, !dbg !3686
  %3145 = add nuw i64 %_unwrap275, 1, !dbg !3686
  %3146 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache298, align 8, !dbg !3686, !dereferenceable !306, !invariant.group !3514
  %3147 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3146, i64 %3144, !dbg !3686
  %3148 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3147, align 8, !dbg !3686, !invariant.group !3695
  br label %invertL741.L742_crit_edge

invertL777:                                       ; preds = %invertL779_phimerge_phimerge
  %3149 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %_unwrap304 = add nsw i64 %623, -2, !dbg !3378
  %3150 = add nuw i64 %_unwrap304, 1, !dbg !3378
  %3151 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache301, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3515
  %3152 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3151, i64 %3149, !dbg !3378
  %3153 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3152, align 8, !dbg !3378, !invariant.group !3727
  %_unwrap305 = addrspacecast {} addrspace(10)* %3153 to {} addrspace(11)*, !dbg !3378
  %_unwrap306 = bitcast {} addrspace(11)* %_unwrap305 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3378
  %_unwrap307 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap306, i64 0, i64 2, !dbg !3378
  %_unwrap308 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap307, align 8, !dbg !3378, !invariant.group !3730
  %3154 = bitcast {}*** %222 to {}**, !dbg !3378
  %3155 = getelementptr inbounds {}*, {}** %3154, i64 -14, !dbg !3378
  %3156 = getelementptr inbounds {}*, {}** %3155, i64 16, !dbg !3378
  %3157 = bitcast {}** %3156 to i8**, !dbg !3378
  %3158 = load i8*, i8** %3157, align 8, !dbg !3378
  %3159 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %3155, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5985126160 to {}*) to {} addrspace(10)*)), !dbg !3378
  %3160 = addrspacecast {} addrspace(10)* %3159 to {} addrspace(11)*, !dbg !3378
  %3161 = bitcast {} addrspace(11)* %3160 to [3 x i64] addrspace(11)*, !dbg !3378
  %3162 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !3378
  %3163 = ptrtoint {}* %3162 to i64, !dbg !3378
  %3164 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3161, i64 0, i64 0, !dbg !3378
  store i64 %3163, i64 addrspace(11)* %3164, align 8, !dbg !3378
  %3165 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !3378
  %3166 = ptrtoint {}* %3165 to i64, !dbg !3378
  %3167 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3161, i64 0, i64 1, !dbg !3378
  store i64 %3166, i64 addrspace(11)* %3167, align 8, !dbg !3378
  %3168 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %3169 = add nuw i64 %_unwrap304, 1, !dbg !3378
  %3170 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache282, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3512
  %3171 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3170, i64 %3168, !dbg !3378
  %3172 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3171, align 8, !dbg !3378, !invariant.group !3684
  %3173 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %3174 = add nuw i64 %_unwrap304, 1, !dbg !3378
  %3175 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache238, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3499
  %3176 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3175, i64 %3173, !dbg !3378
  %3177 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3176, align 8, !dbg !3378, !invariant.group !3677
  %_unwrap309 = addrspacecast {} addrspace(10)* %3177 to {} addrspace(11)*, !dbg !3378
  %_unwrap310 = bitcast {} addrspace(11)* %_unwrap309 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3378
  %_unwrap311 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap310, i64 0, i64 1, !dbg !3378
  %_unwrap312 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap311, align 8, !dbg !3378, !invariant.group !3683
  %3178 = addrspacecast {} addrspace(10)* %_unwrap312 to {} addrspace(11)*, !dbg !3378
  %3179 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3178), !dbg !3378
  %3180 = ptrtoint {}* %3179 to i64, !dbg !3378
  %3181 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3161, i64 0, i64 2, !dbg !3378
  store i64 %3180, i64 addrspace(11)* %3181, align 8, !dbg !3378
  %3182 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5548675696 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11465234128 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530968 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap308, {} addrspace(10)* %3159, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5140568784 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134803728 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %3172, {} addrspace(10)* %_unwrap312), !dbg !3378
  br label %invertL741.L742_crit_edge

invertL779:                                       ; preds = %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit696
  %3183 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %_unwrap316 = add nsw i64 %623, -2, !dbg !3378
  %3184 = add nuw i64 %_unwrap316, 1, !dbg !3378
  %3185 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache313, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3516
  %3186 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3185, i64 %3183, !dbg !3378
  %3187 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3186, align 8, !dbg !3378, !invariant.group !3737
  %_unwrap317 = addrspacecast {} addrspace(10)* %3187 to {} addrspace(11)*, !dbg !3378
  %_unwrap318 = bitcast {} addrspace(11)* %_unwrap317 to [3 x {} addrspace(10)*] addrspace(11)*, !dbg !3378
  %_unwrap319 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap318, i64 0, i64 2, !dbg !3378
  %_unwrap320 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap319, align 8, !dbg !3378, !invariant.group !3731
  %3188 = bitcast {}*** %215 to {}**, !dbg !3378
  %3189 = getelementptr inbounds {}*, {}** %3188, i64 -14, !dbg !3378
  %3190 = getelementptr inbounds {}*, {}** %3189, i64 16, !dbg !3378
  %3191 = bitcast {}** %3190 to i8**, !dbg !3378
  %3192 = load i8*, i8** %3191, align 8, !dbg !3378
  %3193 = call {} addrspace(10)* @julia.gc_alloc_obj({}** %3189, i64 24, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5985126160 to {}*) to {} addrspace(10)*)), !dbg !3378
  %3194 = addrspacecast {} addrspace(10)* %3193 to {} addrspace(11)*, !dbg !3378
  %3195 = bitcast {} addrspace(11)* %3194 to [3 x i64] addrspace(11)*, !dbg !3378
  %3196 = call {}* @julia.pointer_from_objref({} addrspace(11)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(11)*)), !dbg !3378
  %3197 = ptrtoint {}* %3196 to i64, !dbg !3378
  %3198 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3195, i64 0, i64 0, !dbg !3378
  store i64 %3197, i64 addrspace(11)* %3198, align 8, !dbg !3378
  %3199 = addrspacecast {} addrspace(10)* %"getfield11'ipl" to {} addrspace(11)*, !dbg !3378
  %3200 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3199), !dbg !3378
  %3201 = ptrtoint {}* %3200 to i64, !dbg !3378
  %3202 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3195, i64 0, i64 1, !dbg !3378
  store i64 %3201, i64 addrspace(11)* %3202, align 8, !dbg !3378
  %3203 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  %3204 = add nuw i64 %_unwrap316, 1, !dbg !3378
  %3205 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache282, align 8, !dbg !3378, !dereferenceable !306, !invariant.group !3512
  %3206 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3205, i64 %3203, !dbg !3378
  %3207 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3206, align 8, !dbg !3378, !invariant.group !3684
  %3208 = call {} addrspace(10)* @julia.typeof({} addrspace(10)* nonnull %3207) #75, !dbg !3378
  %_unwrap321 = addrspacecast {} addrspace(10)* %3208 to {} addrspace(11)*, !dbg !3378
  %3209 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %_unwrap321) #75, !dbg !3378
  %exactly_isa.not_unwrap = icmp eq {}* %3209, inttoptr (i64 11208048192 to {}*), !dbg !3378
  br i1 %exactly_isa.not_unwrap, label %invertL779_phirc, label %invertL779_phirc325, !dbg !3378

invertL779_phirc:                                 ; preds = %invertL779
  %3210 = add nuw i64 %_unwrap316, 1
  %3211 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache322, align 8, !dereferenceable !306, !invariant.group !3517
  %3212 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3211, i64 %3203
  %3213 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3212, align 8, !dbg !3707, !invariant.group !3719
  br label %invertL779_phimerge

invertL779_phirc325:                              ; preds = %invertL779
  %3214 = add nuw i64 %_unwrap316, 1
  %3215 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache326, align 8, !dereferenceable !306, !invariant.group !3518
  %3216 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3215, i64 %3203
  %3217 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3216, align 8, !dbg !3378, !invariant.group !3729
  br label %invertL779_phimerge

invertL779_phimerge:                              ; preds = %invertL779_phirc325, %invertL779_phirc
  %3218 = phi {} addrspace(10)* [ %3213, %invertL779_phirc ], [ %3217, %invertL779_phirc325 ], !dbg !3378
  %3219 = load i64, i64* %"iv9'ac", align 8, !dbg !3378
  br i1 %exactly_isa.not_unwrap, label %invertL779_phimerge_phirc, label %invertL779_phimerge_phirc333, !dbg !3378

invertL779_phimerge_phirc:                        ; preds = %invertL779_phimerge
  %3220 = add nuw i64 %_unwrap316, 1
  %3221 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache272, align 8, !dereferenceable !306, !invariant.group !3509
  %3222 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3221, i64 %3219
  %3223 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3222, align 8, !invariant.group !3717
  %_unwrap329 = addrspacecast {} addrspace(10)* %3223 to {} addrspace(11)*
  %_unwrap330 = bitcast {} addrspace(11)* %_unwrap329 to [3 x {} addrspace(10)*] addrspace(11)*
  %_unwrap331 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap330, i64 0, i64 1
  %_unwrap332 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap331, align 8, !dbg !3707, !invariant.group !3718
  br label %invertL779_phimerge_phimerge

invertL779_phimerge_phirc333:                     ; preds = %invertL779_phimerge
  %3224 = add nuw i64 %_unwrap316, 1
  %3225 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache301, align 8, !dereferenceable !306, !invariant.group !3515
  %3226 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3225, i64 %3219
  %3227 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3226, align 8, !invariant.group !3727
  %_unwrap334 = addrspacecast {} addrspace(10)* %3227 to {} addrspace(11)*
  %_unwrap335 = bitcast {} addrspace(11)* %_unwrap334 to [3 x {} addrspace(10)*] addrspace(11)*
  %_unwrap336 = getelementptr inbounds [3 x {} addrspace(10)*], [3 x {} addrspace(10)*] addrspace(11)* %_unwrap335, i64 0, i64 1
  %_unwrap337 = load {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %_unwrap336, align 8, !dbg !3378, !invariant.group !3728
  br label %invertL779_phimerge_phimerge

invertL779_phimerge_phimerge:                     ; preds = %invertL779_phimerge_phirc333, %invertL779_phimerge_phirc
  %3228 = phi {} addrspace(10)* [ %_unwrap332, %invertL779_phimerge_phirc ], [ %_unwrap337, %invertL779_phimerge_phirc333 ], !dbg !3378
  %3229 = addrspacecast {} addrspace(10)* %3228 to {} addrspace(11)*, !dbg !3378
  %3230 = call {}* @julia.pointer_from_objref({} addrspace(11)* %3229), !dbg !3378
  %3231 = ptrtoint {}* %3230 to i64, !dbg !3378
  %3232 = getelementptr inbounds [3 x i64], [3 x i64] addrspace(11)* %3195, i64 0, i64 2, !dbg !3378
  store i64 %3231, i64 addrspace(11)* %3232, align 8, !dbg !3378
  %3233 = call {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)*, {} addrspace(10)*, ...) @julia.call({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32)* @ijl_apply_generic, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5548675696 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 6224791504 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138459248 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 11227530968 to {}*) to {} addrspace(10)*), {} addrspace(10)* %_unwrap320, {} addrspace(10)* %3193, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5138755328 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* %getfield11, {} addrspace(10)* %"getfield11'ipl", {} addrspace(10)* %3218, {} addrspace(10)* %3228), !dbg !3378
  br i1 %exactly_isa.not_unwrap, label %invertL770, label %invertL777

invertL802:                                       ; preds = %invertL843
  %3234 = load i64, i64* %"iv9'ac", align 8, !dbg !3754
  %_unwrap339 = add nsw i64 %623, -2, !dbg !3754
  %3235 = add nuw i64 %_unwrap339, 1, !dbg !3754
  %3236 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi33_cache", align 8, !dbg !3754, !dereferenceable !306, !invariant.group !3519
  %3237 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3236, i64 %3234, !dbg !3754
  %3238 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3237, align 8, !dbg !3754, !invariant.group !3765
  %3239 = bitcast {} addrspace(10)* %"getfield11'ipl" to i8 addrspace(13)* addrspace(10)*, !dbg !3754
  %3240 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %3239, align 8, !dbg !3754
  %3241 = bitcast {} addrspace(10)* %3238 to i8 addrspace(13)* addrspace(10)*, !dbg !3754
  %3242 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %3241, align 8, !dbg !3754
  %3243 = bitcast i8 addrspace(13)* %3242 to double addrspace(13)*, !dbg !3754
  %3244 = bitcast i8 addrspace(13)* %3240 to double addrspace(13)*, !dbg !3754
  %3245 = udiv i64 %384, 8, !dbg !3754
  %3246 = icmp eq i64 %3245, 0, !dbg !3754
  br i1 %3246, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit696, label %for.body.i695, !dbg !3754

for.body.i695:                                    ; preds = %for.body.i695, %invertL802
  %idx.i689 = phi i64 [ 0, %invertL802 ], [ %idx.next.i694, %for.body.i695 ], !dbg !3754
  %dst.i.i690 = getelementptr inbounds double, double addrspace(13)* %3243, i64 %idx.i689, !dbg !3754
  %dst.i.l.i691 = load double, double addrspace(13)* %dst.i.i690, align 1, !dbg !3754
  store double 0.000000e+00, double addrspace(13)* %dst.i.i690, align 1, !dbg !3754
  %src.i.i692 = getelementptr inbounds double, double addrspace(13)* %3244, i64 %idx.i689, !dbg !3754
  %src.i.l.i693 = load double, double addrspace(13)* %src.i.i692, align 1, !dbg !3754
  %3247 = fadd fast double %src.i.l.i693, %dst.i.l.i691, !dbg !3754
  store double %3247, double addrspace(13)* %src.i.i692, align 1, !dbg !3754
  %idx.next.i694 = add nuw i64 %idx.i689, 1, !dbg !3754
  %3248 = icmp eq i64 %3245, %idx.next.i694, !dbg !3754
  br i1 %3248, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit696, label %for.body.i695, !dbg !3754

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit696: ; preds = %invertL802, %for.body.i695
  br label %invertL779

invertL843:                                       ; preds = %invertL873, %invertL854
  br label %invertL802

invertL854:                                       ; preds = %invertL956, %invertL858
  br label %invertL843

invertL858:                                       ; preds = %invertL869_phimerge_phimerge, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit704
  br label %invertL854

invertL866:                                       ; preds = %invertL869_phimerge_phimerge
  %3249 = load i64, i64* %"iv9'ac", align 8, !dbg !3796
  %_unwrap341 = add nsw i64 %623, -2, !dbg !3796
  %3250 = add nuw i64 %_unwrap341, 1, !dbg !3796
  %3251 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi36_cache", align 8, !dbg !3796, !dereferenceable !306, !invariant.group !3520
  %3252 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3251, i64 %3249, !dbg !3796
  %3253 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3252, align 8, !dbg !3796, !invariant.group !3801
  %3254 = load i64, i64* %"iv9'ac", align 8, !dbg !3796
  %3255 = add nuw i64 %_unwrap341, 1, !dbg !3796
  %3256 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache342, align 8, !dbg !3796, !dereferenceable !306, !invariant.group !3521
  %3257 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3256, i64 %3254, !dbg !3796
  %3258 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3257, align 8, !dbg !3796, !invariant.group !3767
  %3259 = bitcast {} addrspace(10)* %3258 to i8 addrspace(13)* addrspace(10)*, !dbg !3796
  %3260 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %3259, align 8, !dbg !3796
  %3261 = bitcast {} addrspace(10)* %3253 to i8 addrspace(13)* addrspace(10)*, !dbg !3796
  %3262 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %3261, align 8, !dbg !3796
  %3263 = bitcast i8 addrspace(13)* %3262 to double addrspace(13)*, !dbg !3796
  %3264 = bitcast i8 addrspace(13)* %3260 to double addrspace(13)*, !dbg !3796
  %3265 = load i64, i64* %"iv9'ac", align 8, !dbg !3796
  %3266 = add nuw i64 %_unwrap341, 1, !dbg !3796
  %3267 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache345, align 8, !dbg !3796, !dereferenceable !306, !invariant.group !3522
  %3268 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3267, i64 %3265, !dbg !3796
  %3269 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3268, align 8, !dbg !3796, !invariant.group !3766
  %_unwrap348 = bitcast {} addrspace(10)* %3269 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3796
  %_unwrap349 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %_unwrap348, i32 0, i32 1, !dbg !3796
  %_unwrap350 = load i64, i64 addrspace(10)* %_unwrap349, align 8, !dbg !3755, !invariant.group !3764
  %_unwrap351 = bitcast {} addrspace(10)* %3269 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3796
  %_unwrap352 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %_unwrap351, i32 0, i32 3, !dbg !3796
  %_unwrap353 = load i16, i16 addrspace(10)* %_unwrap352, align 2, !dbg !3755, !invariant.group !3763
  %_unwrap354 = zext i16 %_unwrap353 to i64, !dbg !3796
  %_unwrap355 = mul i64 %_unwrap350, %_unwrap354, !dbg !3796
  %3270 = udiv i64 %_unwrap355, 8, !dbg !3796
  %3271 = icmp eq i64 %3270, 0, !dbg !3796
  br i1 %3271, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit704, label %for.body.i703, !dbg !3796

for.body.i703:                                    ; preds = %for.body.i703, %invertL866
  %idx.i697 = phi i64 [ 0, %invertL866 ], [ %idx.next.i702, %for.body.i703 ], !dbg !3796
  %dst.i.i698 = getelementptr inbounds double, double addrspace(13)* %3263, i64 %idx.i697, !dbg !3796
  %dst.i.l.i699 = load double, double addrspace(13)* %dst.i.i698, align 1, !dbg !3796
  store double 0.000000e+00, double addrspace(13)* %dst.i.i698, align 1, !dbg !3796
  %src.i.i700 = getelementptr inbounds double, double addrspace(13)* %3264, i64 %idx.i697, !dbg !3796
  %src.i.l.i701 = load double, double addrspace(13)* %src.i.i700, align 1, !dbg !3796
  %3272 = fadd fast double %src.i.l.i701, %dst.i.l.i699, !dbg !3796
  store double %3272, double addrspace(13)* %src.i.i700, align 1, !dbg !3796
  %idx.next.i702 = add nuw i64 %idx.i697, 1, !dbg !3796
  %3273 = icmp eq i64 %3270, %idx.next.i702, !dbg !3796
  br i1 %3273, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit704, label %for.body.i703, !dbg !3796

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit704: ; preds = %invertL866, %for.body.i703
  br label %invertL858

invertL869:                                       ; preds = %invertL956
  %3274 = load i64, i64* %"iv9'ac", align 8, !dbg !3804
  %_unwrap356 = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %350 to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !3804
  %3275 = load i64, i64* %"iv9'ac", align 8, !dbg !3804
  %"'ipc358_unwrap" = addrspacecast { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* %"'ipa357" to { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)*, !dbg !3804
  %3276 = load i64, i64* %"iv9'ac", align 8, !dbg !3804
  %_unwrap360 = add nsw i64 %623, -2, !dbg !3804
  %3277 = add nuw i64 %_unwrap360, 1, !dbg !3804
  %3278 = load i1*, i1** %.not908.not_cache, align 8, !dbg !3804, !dereferenceable !306, !invariant.group !3525
  %3279 = getelementptr inbounds i1, i1* %3278, i64 %3276, !dbg !3804
  %3280 = load i1, i1* %3279, align 1, !dbg !3804, !invariant.group !3795
  br i1 %3280, label %invertL869_phirc, label %invertL869_phirc364, !dbg !3804

invertL869_phirc:                                 ; preds = %invertL869
  %3281 = add nuw i64 %_unwrap360, 1
  %3282 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache361, align 8, !dereferenceable !306, !invariant.group !3526
  %3283 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3282, i64 %3276
  %3284 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3283, align 8, !invariant.group !3803
  br label %invertL869_phimerge

invertL869_phirc364:                              ; preds = %invertL869
  %3285 = add nuw i64 %_unwrap360, 1
  %3286 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache345, align 8, !dereferenceable !306, !invariant.group !3522
  %3287 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3286, i64 %3276
  %3288 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3287, align 8, !invariant.group !3766
  br label %invertL869_phimerge

invertL869_phimerge:                              ; preds = %invertL869_phirc364, %invertL869_phirc
  %3289 = phi {} addrspace(10)* [ %3284, %invertL869_phirc ], [ %3288, %invertL869_phirc364 ], !dbg !3804
  %3290 = load i64, i64* %"iv9'ac", align 8, !dbg !3804
  br i1 %3280, label %invertL869_phimerge_phirc, label %invertL869_phimerge_phirc368, !dbg !3804

invertL869_phimerge_phirc:                        ; preds = %invertL869_phimerge
  %3291 = add nuw i64 %_unwrap360, 1
  %3292 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache365, align 8, !dereferenceable !306, !invariant.group !3527
  %3293 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3292, i64 %3290
  %3294 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3293, align 8, !invariant.group !3802
  br label %invertL869_phimerge_phimerge

invertL869_phimerge_phirc368:                     ; preds = %invertL869_phimerge
  %3295 = add nuw i64 %_unwrap360, 1
  %3296 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache342, align 8, !dereferenceable !306, !invariant.group !3521
  %3297 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3296, i64 %3290
  %3298 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3297, align 8, !invariant.group !3767
  br label %invertL869_phimerge_phimerge

invertL869_phimerge_phimerge:                     ; preds = %invertL869_phimerge_phirc368, %invertL869_phimerge_phirc
  %3299 = phi {} addrspace(10)* [ %3294, %invertL869_phimerge_phirc ], [ %3298, %invertL869_phimerge_phirc368 ], !dbg !3804
  %3300 = load i64, i64* %"iv9'ac", align 8, !dbg !3804
  %3301 = add nuw i64 %_unwrap360, 1, !dbg !3804
  %3302 = load { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)*, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)** %_augmented369_cache, align 8, !dbg !3804, !dereferenceable !306, !invariant.group !3528
  %3303 = getelementptr inbounds { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %3302, i64 %3300, !dbg !3804
  %3304 = load { double addrspace(13)* addrspace(10)*, i64, i64 }, { double addrspace(13)* addrspace(10)*, i64, i64 } addrspace(10)* %3303, align 8, !dbg !3804, !invariant.group !3812
  call fastcc void @diffejulia_copyto_unaliased__1984.203({ {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 }* nocapture nofree writeonly align 8 "enzyme_sret" undef, [1 x {} addrspace(10)*]* nocapture nofree writeonly align 8 "enzymejl_returnRoots" undef, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree readonly align 8 %_unwrap356, { {} addrspace(10)*, { [1 x [1 x i64]], i64 }, i64, i64 } addrspace(11)* nocapture nofree align 8 %"'ipc358_unwrap", {} addrspace(10)* readonly align 16 %3289, {} addrspace(10)* align 16 %3299, { double addrspace(13)* addrspace(10)*, i64, i64 } %3304), !dbg !3804
  br i1 %3280, label %invertL866, label %invertL858

invertL873:                                       ; preds = %invertL886, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit712
  br label %invertL843

invertL881:                                       ; preds = %invertL886
  %3305 = load i64, i64* %"iv9'ac", align 8, !dbg !3831
  %_unwrap373 = add nsw i64 %623, -2, !dbg !3831
  %3306 = add nuw i64 %_unwrap373, 1, !dbg !3831
  %3307 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi39_cache", align 8, !dbg !3831, !dereferenceable !306, !invariant.group !3529
  %3308 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3307, i64 %3305, !dbg !3831
  %3309 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3308, align 8, !dbg !3831, !invariant.group !3833
  %3310 = load i64, i64* %"iv9'ac", align 8, !dbg !3831
  %3311 = add nuw i64 %_unwrap373, 1, !dbg !3831
  %3312 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache342, align 8, !dbg !3831, !dereferenceable !306, !invariant.group !3521
  %3313 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3312, i64 %3310, !dbg !3831
  %3314 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3313, align 8, !dbg !3831, !invariant.group !3767
  %3315 = bitcast {} addrspace(10)* %3314 to i8 addrspace(13)* addrspace(10)*, !dbg !3831
  %3316 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %3315, align 8, !dbg !3831
  %3317 = bitcast {} addrspace(10)* %3309 to i8 addrspace(13)* addrspace(10)*, !dbg !3831
  %3318 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %3317, align 8, !dbg !3831
  %3319 = bitcast i8 addrspace(13)* %3318 to double addrspace(13)*, !dbg !3831
  %3320 = bitcast i8 addrspace(13)* %3316 to double addrspace(13)*, !dbg !3831
  %3321 = load i64, i64* %"iv9'ac", align 8, !dbg !3831
  %3322 = add nuw i64 %_unwrap373, 1, !dbg !3831
  %3323 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache345, align 8, !dbg !3831, !dereferenceable !306, !invariant.group !3522
  %3324 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3323, i64 %3321, !dbg !3831
  %3325 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3324, align 8, !dbg !3831, !invariant.group !3766
  %_unwrap374 = bitcast {} addrspace(10)* %3325 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3831
  %_unwrap375 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %_unwrap374, i32 0, i32 1, !dbg !3831
  %_unwrap376 = load i64, i64 addrspace(10)* %_unwrap375, align 8, !dbg !3755, !invariant.group !3762
  %_unwrap377 = bitcast {} addrspace(10)* %3325 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !3831
  %_unwrap378 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %_unwrap377, i32 0, i32 3, !dbg !3831
  %_unwrap379 = load i16, i16 addrspace(10)* %_unwrap378, align 2, !dbg !3755, !invariant.group !3761
  %_unwrap380 = zext i16 %_unwrap379 to i64, !dbg !3831
  %_unwrap381 = mul i64 %_unwrap376, %_unwrap380, !dbg !3831
  %3326 = udiv i64 %_unwrap381, 8, !dbg !3831
  %3327 = icmp eq i64 %3326, 0, !dbg !3831
  br i1 %3327, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit712, label %for.body.i711, !dbg !3831

for.body.i711:                                    ; preds = %for.body.i711, %invertL881
  %idx.i705 = phi i64 [ 0, %invertL881 ], [ %idx.next.i710, %for.body.i711 ], !dbg !3831
  %dst.i.i706 = getelementptr inbounds double, double addrspace(13)* %3319, i64 %idx.i705, !dbg !3831
  %dst.i.l.i707 = load double, double addrspace(13)* %dst.i.i706, align 1, !dbg !3831
  store double 0.000000e+00, double addrspace(13)* %dst.i.i706, align 1, !dbg !3831
  %src.i.i708 = getelementptr inbounds double, double addrspace(13)* %3320, i64 %idx.i705, !dbg !3831
  %src.i.l.i709 = load double, double addrspace(13)* %src.i.i708, align 1, !dbg !3831
  %3328 = fadd fast double %src.i.l.i709, %dst.i.l.i707, !dbg !3831
  store double %3328, double addrspace(13)* %src.i.i708, align 1, !dbg !3831
  %idx.next.i710 = add nuw i64 %idx.i705, 1, !dbg !3831
  %3329 = icmp eq i64 %3326, %idx.next.i710, !dbg !3831
  br i1 %3329, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit712, label %for.body.i711, !dbg !3831

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit712: ; preds = %invertL881, %for.body.i711
  br label %invertL873

invertL886:                                       ; preds = %invertL956, %invertL928.lr.ph
  %3330 = load i64, i64* %"iv9'ac", align 8
  %_unwrap383 = add nsw i64 %623, -2
  %3331 = add nuw i64 %_unwrap383, 1
  %3332 = load i1*, i1** %.not918.not_cache, align 8, !dereferenceable !306, !invariant.group !3532
  %3333 = getelementptr inbounds i1, i1* %3332, i64 %3330
  %3334 = load i1, i1* %3333, align 1, !invariant.group !3830
  br i1 %3334, label %invertL881, label %invertL873

invertL928.lr.ph:                                 ; preds = %invertL928_phimerge
  br label %invertL886

invertL928:                                       ; preds = %mergeinvertL928_L956.loopexit, %incinvertL928
  %3335 = load i64, i64* %"iv13'ac", align 8, !dbg !3872
  %3336 = load i64, i64* %"iv9'ac", align 8, !dbg !3872
  %"'ipc169_unwrap" = bitcast {} addrspace(10)* %"getfield15'ipl" to double addrspace(13)* addrspace(10)*, !dbg !3872
  %"'ipc170_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc169_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3872
  %"arrayptr692923'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc170_unwrap", align 16, !alias.scope !3224, !noalias !3225, !invariant.group !3460
  %_unwrap387 = add i64 %3336, 2, !dbg !3872
  %_unwrap388 = add nsw i64 %_unwrap387, -1, !dbg !3872
  %_unwrap389 = mul i64 %_unwrap388, %arraysize, !dbg !3872
  %_unwrap390 = add i64 %3335, %_unwrap389, !dbg !3872
  %"'ipg386_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr692923'ipl_unwrap", i64 %_unwrap390, !dbg !3872
  %3337 = load double, double addrspace(13)* %"'ipg386_unwrap", align 8, !dbg !3872, !tbaa !269, !alias.scope !4231, !noalias !4232
  store double 0.000000e+00, double addrspace(13)* %"'ipg386_unwrap", align 8, !dbg !3872, !tbaa !269, !alias.scope !4231, !noalias !4232
  %3338 = load double, double* %"arrayref689'de", align 8, !dbg !3872
  %3339 = fadd fast double %3338, %3337, !dbg !3872
  store double %3339, double* %"arrayref689'de", align 8, !dbg !3872
  %3340 = load double, double* %"arrayref689'de", align 8, !dbg !3860
  store double 0.000000e+00, double* %"arrayref689'de", align 8, !dbg !3860
  %3341 = load i64, i64* %"iv13'ac", align 8, !dbg !3860
  %3342 = load i64, i64* %"iv9'ac", align 8, !dbg !3860
  %_unwrap392 = add nsw i64 %623, -2, !dbg !3860
  %3343 = add nuw i64 %_unwrap392, 1, !dbg !3860
  %3344 = load i1*, i1** %.not918.not_cache, align 8, !dbg !3860, !dereferenceable !306, !invariant.group !3532
  %3345 = getelementptr inbounds i1, i1* %3344, i64 %3342, !dbg !3860
  %3346 = load i1, i1* %3345, align 1, !dbg !3860, !invariant.group !3830
  br i1 %3346, label %invertL928_phirc, label %invertL928_phirc396, !dbg !3860

invertL928_phirc:                                 ; preds = %invertL928
  %3347 = add nuw i64 %_unwrap392, 1
  %3348 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache393, align 8, !dereferenceable !306, !invariant.group !3533
  %3349 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3348, i64 %3342
  %3350 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3349, align 8, !invariant.group !3834
  br label %invertL928_phimerge

invertL928_phirc396:                              ; preds = %invertL928
  %3351 = add nuw i64 %_unwrap392, 1
  %3352 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache342, align 8, !dereferenceable !306, !invariant.group !3521
  %3353 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3352, i64 %3342
  %3354 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3353, align 8, !invariant.group !3767
  br label %invertL928_phimerge

invertL928_phimerge:                              ; preds = %invertL928_phirc396, %invertL928_phirc
  %3355 = phi {} addrspace(10)* [ %3350, %invertL928_phirc ], [ %3354, %invertL928_phirc396 ], !dbg !3860
  %"'ipc384_unwrap" = bitcast {} addrspace(10)* %3355 to double addrspace(13)* addrspace(10)*, !dbg !3860
  %"'ipc385_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc384_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3860
  %"arrayptr688922'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc385_unwrap", align 8, !tbaa !382, !alias.scope !3851, !noalias !3854, !nonnull !68, !invariant.group !3856
  %3356 = add nuw i64 %_unwrap392, 1, !dbg !3860
  %3357 = load i1*, i1** %.not921_cache, align 8, !dbg !3860, !dereferenceable !306, !invariant.group !3536
  %3358 = getelementptr inbounds i1, i1* %3357, i64 %3342, !dbg !3860
  %3359 = load i1, i1* %3358, align 1, !dbg !3860, !invariant.group !3850
  %_unwrap398 = select i1 %3359, i64 0, i64 %3341, !dbg !3860
  %"'ipg391_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr688922'ipl_unwrap", i64 %_unwrap398, !dbg !3860
  %3360 = load double, double addrspace(13)* %"'ipg391_unwrap", align 8, !dbg !3860, !tbaa !269, !alias.scope !4233, !noalias !4234
  %3361 = fadd fast double %3360, %3340, !dbg !3860
  store double %3361, double addrspace(13)* %"'ipg391_unwrap", align 8, !dbg !3860, !tbaa !269, !alias.scope !4233, !noalias !4234
  %3362 = load i64, i64* %"iv13'ac", align 8
  %3363 = icmp eq i64 %3362, 0
  %3364 = xor i1 %3363, true
  br i1 %3363, label %invertL928.lr.ph, label %incinvertL928

incinvertL928:                                    ; preds = %invertL928_phimerge
  %3365 = load i64, i64* %"iv13'ac", align 8
  %3366 = add nsw i64 %3365, -1
  store i64 %3366, i64* %"iv13'ac", align 8
  br label %invertL928

invertL956.loopexit:                              ; preds = %invertL956
  %3367 = load i64, i64* %"iv9'ac", align 8
  %_unwrap399 = add nsw i64 %arraysize, -1
  br label %mergeinvertL928_L956.loopexit

mergeinvertL928_L956.loopexit:                    ; preds = %invertL956.loopexit
  store i64 %_unwrap399, i64* %"iv13'ac", align 8
  br label %invertL928

invertL956:                                       ; preds = %invertpass606.2, %invertL973
  %3368 = load double, double* %"'de210", align 8, !dbg !3881
  store double 0.000000e+00, double* %"'de210", align 8, !dbg !3881
  %3369 = load double, double* %"'de81", align 8, !dbg !3881
  %3370 = fadd fast double %3369, %3368, !dbg !3881
  store double %3370, double* %"'de81", align 8, !dbg !3881
  %3371 = load double, double* %"value_phi372'de", align 8, !dbg !3881
  %3372 = fadd fast double %3371, %3368, !dbg !3881
  store double %3372, double* %"value_phi372'de", align 8, !dbg !3881
  %_unwrap403 = add nsw i64 %623, -2
  %3373 = add nuw i64 %_unwrap403, 1
  %3374 = load i8*, i8** %_cache400, align 8, !dereferenceable !306, !invariant.group !3539
  %3375 = load i64, i64* %"iv9'ac", align 8
  %3376 = getelementptr inbounds i8, i8* %3374, i64 %3375
  %3377 = load i8, i8* %3376, align 1, !invariant.group !3781
  switch i8 %3377, label %invertL956.loopexit [
    i8 0, label %invertL854
    i8 1, label %invertL869
    i8 2, label %invertL886
  ]

invertL973:                                       ; preds = %invertL1001.critedge, %invertL980.lr.ph
  br label %invertL956

invertL980.lr.ph:                                 ; preds = %invertL980
  br label %invertL973

invertL980:                                       ; preds = %mergeinvertL980_pass606.2.loopexit, %invertL992
  %3378 = load i64, i64* %"iv15'ac", align 8
  %3379 = icmp eq i64 %3378, 0
  %3380 = xor i1 %3379, true
  br i1 %3379, label %invertL980.lr.ph, label %incinvertL980

incinvertL980:                                    ; preds = %invertL980
  %3381 = load i64, i64* %"iv15'ac", align 8
  %3382 = add nsw i64 %3381, -1
  store i64 %3382, i64* %"iv15'ac", align 8
  br label %invertL992

invertL992:                                       ; preds = %mergeinvertL980_L1001.critedge.loopexit, %incinvertL980
  br label %invertL980

invertL1001.critedge.loopexit:                    ; preds = %invertL1001.critedge
  br label %mergeinvertL980_L1001.critedge.loopexit

mergeinvertL980_L1001.critedge.loopexit:          ; preds = %invertL1001.critedge.loopexit
  store i64 0, i64* %"iv15'ac", align 8
  br label %invertL992

invertL1001.critedge:                             ; preds = %invertL1049
  %3383 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %_unwrap408 = add nsw i64 %623, -2, !dbg !3919
  %3384 = add nuw i64 %_unwrap408, 1, !dbg !3919
  %3385 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache405, align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3540
  %3386 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3385, i64 %3383, !dbg !3919
  %3387 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3386, align 8, !dbg !3919, !invariant.group !3929
  %3388 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3389 = add nuw i64 %_unwrap408, 1, !dbg !3919
  %3390 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi41_cache", align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3541
  %3391 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3390, i64 %3388, !dbg !3919
  %3392 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3391, align 8, !dbg !3919, !invariant.group !3928
  %3393 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3394 = add nuw i64 %_unwrap408, 1, !dbg !3919
  %3395 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache411_cache, align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3542
  %3396 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3395, i64 %3393, !dbg !3919
  %3397 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3396, align 8, !dbg !3919, !invariant.group !3927
  call fastcc void @diffejulia_gemv__1994({} addrspace(10)* align 16 %3387, {} addrspace(10)* align 16 %3392, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl", { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %3397), !dbg !3919
  %3398 = load double, double* %"'de414", align 8, !dbg !3912
  store double 0.000000e+00, double* %"'de414", align 8, !dbg !3912
  %3399 = load i64, i64* %"iv9'ac", align 8, !dbg !3912
  %"'ipg415_unwrap" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 72, !dbg !3912
  %"'ipc416_unwrap" = bitcast i8 addrspace(10)* %"'ipg415_unwrap" to double addrspace(10)*, !dbg !3912
  %"'ipc417_unwrap" = addrspacecast double addrspace(10)* %"'ipc416_unwrap" to double addrspace(11)*, !dbg !3912
  %3400 = load double, double addrspace(11)* %"'ipc417_unwrap", align 8, !dbg !3912, !tbaa !307, !alias.scope !3021, !noalias !3024
  %3401 = fadd fast double %3400, %3398, !dbg !3912
  store double %3401, double addrspace(11)* %"'ipc417_unwrap", align 8, !dbg !3912, !tbaa !307, !alias.scope !3021, !noalias !3024
  %3402 = load i64, i64* %"iv9'ac", align 8
  %3403 = add nuw i64 %_unwrap408, 1
  %3404 = load i1*, i1** %.not8851018_cache, align 8, !dereferenceable !306, !invariant.group !3545
  %3405 = getelementptr inbounds i1, i1* %3404, i64 %3402
  %3406 = load i1, i1* %3405, align 1, !invariant.group !3906
  br i1 %3406, label %invertL973, label %invertL1001.critedge.loopexit

invertL1049:                                      ; preds = %invertL1062
  %3407 = load i64, i64* %"iv9'ac", align 8, !dbg !3940
  %_unwrap422 = add nsw i64 %623, -2, !dbg !3940
  %3408 = add nuw i64 %_unwrap422, 1, !dbg !3940
  %3409 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache419, align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3546
  %3410 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3409, i64 %3407, !dbg !3940
  %3411 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3410, align 8, !dbg !3940, !invariant.group !3945
  br label %invertL1001.critedge

invertL1062:                                      ; preds = %invertL1119.L1120_crit_edge, %invertL1083.preheader
  br label %invertL1049

invertL1083.preheader:                            ; preds = %invertL1083
  %3412 = load i64, i64* %"iv9'ac", align 8
  %3413 = load i64, i64* %"iv17'ac", align 8
  %_unwrap431 = load i64**, i64*** %value_phi523_cache, align 8, !dbg !3965, !invariant.group !3966
  %_unwrap432 = getelementptr inbounds i64*, i64** %_unwrap431, i64 %3412
  %forfree433 = load i64*, i64** %_unwrap432, align 8, !dereferenceable !306, !invariant.group !3967
  %3414 = bitcast i64* %forfree433 to i8*
  call void @free(i8* nonnull %3414), !dbg !4207
  br label %invertL1062

invertL1083:                                      ; preds = %mergeinvertL1083_L1119.L1120_crit_edge.loopexit442, %invertL1090
  %3415 = load i64, i64* %"iv17'ac", align 8
  %3416 = icmp eq i64 %3415, 0
  %3417 = xor i1 %3416, true
  br i1 %3416, label %invertL1083.preheader, label %incinvertL1083

incinvertL1083:                                   ; preds = %invertL1083
  %3418 = load i64, i64* %"iv17'ac", align 8
  %3419 = add nsw i64 %3418, -1
  store i64 %3419, i64* %"iv17'ac", align 8
  br label %invertL1090

invertL1090:                                      ; preds = %mergeinvertL1083_L1119.L1120_crit_edge.loopexit, %incinvertL1083
  %3420 = load i64, i64* %"iv17'ac", align 8, !dbg !3974
  %3421 = load i64, i64* %"iv9'ac", align 8, !dbg !3974
  %_unwrap429 = add nsw i64 %623, -2, !dbg !3974
  %3422 = add nuw i64 %_unwrap429, 1, !dbg !3974
  %3423 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache419, align 8, !dbg !3974, !dereferenceable !306, !invariant.group !3546
  %3424 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3423, i64 %3421, !dbg !3974
  %3425 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3424, align 8, !dbg !3974, !invariant.group !3945
  %"'ipc427_unwrap" = bitcast {} addrspace(10)* %3425 to double addrspace(13)* addrspace(10)*, !dbg !3974
  %"'ipc428_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc427_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3974
  %"arrayptr652904'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc428_unwrap", align 8, !dbg !3974, !tbaa !382, !alias.scope !3975, !noalias !3976, !nonnull !68
  %3426 = add nuw i64 %_unwrap429, 1, !dbg !3974
  %3427 = load i64**, i64*** %value_phi523_cache, align 8, !dbg !3974, !dereferenceable !306, !invariant.group !3549
  %3428 = getelementptr inbounds i64*, i64** %3427, i64 %3421, !dbg !3974
  %3429 = load i64*, i64** %3428, align 8, !dbg !3974, !dereferenceable !306, !invariant.group !3967
  %3430 = getelementptr inbounds i64, i64* %3429, i64 %3420, !dbg !3974
  %3431 = load i64, i64* %3430, align 8, !dbg !3974, !invariant.group !3968
  %_unwrap434 = add i64 %3431, -1, !dbg !3974
  %"'ipg426_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr652904'il_phi_unwrap", i64 %_unwrap434, !dbg !3974
  %3432 = load double, double addrspace(13)* %"'ipg426_unwrap", align 8, !dbg !3974, !tbaa !269, !alias.scope !4235, !noalias !4236
  store double 0.000000e+00, double addrspace(13)* %"'ipg426_unwrap", align 8, !dbg !3974, !tbaa !269, !alias.scope !4235, !noalias !4236
  %3433 = load double, double* %"arrayref650'de", align 8, !dbg !3974
  %3434 = fadd fast double %3433, %3432, !dbg !3974
  store double %3434, double* %"arrayref650'de", align 8, !dbg !3974
  %3435 = load double, double* %"arrayref650'de", align 8, !dbg !3961
  store double 0.000000e+00, double* %"arrayref650'de", align 8, !dbg !3961
  %3436 = load i64, i64* %"iv17'ac", align 8, !dbg !3961
  %3437 = load i64, i64* %"iv9'ac", align 8, !dbg !3961
  %"'ipc423_unwrap" = bitcast {} addrspace(10)* %"getfield17'ipl" to double addrspace(13)* addrspace(10)*, !dbg !3961
  %"'ipc424_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc423_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3961
  %"arrayptr649903'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc424_unwrap", align 16, !alias.scope !3469, !noalias !3466, !invariant.group !3964
  %_unwrap436 = add i64 %3437, 2, !dbg !3961
  %_unwrap437 = add nsw i64 %_unwrap436, -1, !dbg !3961
  %3438 = load i64, i64* %arraysize494_cache, align 8, !alias.scope !3466, !noalias !3469, !invariant.group !3474
  %_unwrap438 = mul i64 %_unwrap437, %3438, !dbg !3961
  %_unwrap439 = add i64 %_unwrap438, -1, !dbg !3961
  %iv.next18_unwrap = add nuw nsw i64 %3436, 1, !dbg !3961
  %_unwrap440 = add i64 %_unwrap439, %iv.next18_unwrap, !dbg !3961
  %"'ipg435_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr649903'ipl_unwrap", i64 %_unwrap440, !dbg !3961
  %3439 = load double, double addrspace(13)* %"'ipg435_unwrap", align 8, !dbg !3961, !tbaa !269, !alias.scope !4237, !noalias !4238
  %3440 = fadd fast double %3439, %3435, !dbg !3961
  store double %3440, double addrspace(13)* %"'ipg435_unwrap", align 8, !dbg !3961, !tbaa !269, !alias.scope !4237, !noalias !4238
  br label %invertL1083

invertL1119.L1120_crit_edge.loopexit:             ; preds = %invertL1119.L1120_crit_edge
  %_unwrap441 = add nsw i64 %623, -2
  %3441 = add nuw i64 %_unwrap441, 1
  %3442 = load i64*, i64** %loopLimit_cache45, align 8, !dereferenceable !306, !invariant.group !3478
  %3443 = load i64, i64* %"iv9'ac", align 8
  %3444 = getelementptr inbounds i64, i64* %3442, i64 %3443
  %3445 = load i64, i64* %3444, align 8, !invariant.group !3990
  %3446 = add nuw i64 %_unwrap441, 1
  %3447 = load i64*, i64** %loopLimit_cache45, align 8, !dereferenceable !306, !invariant.group !3478
  %3448 = load i64, i64* %"iv9'ac", align 8
  %3449 = getelementptr inbounds i64, i64* %3447, i64 %3448
  %3450 = load i64, i64* %3449, align 8, !invariant.group !3990
  %3451 = load i64, i64* %"iv9'ac", align 8
  %3452 = add nuw i64 %_unwrap441, 1
  %3453 = load i64*, i64** %loopLimit_cache45, align 8, !dereferenceable !306, !invariant.group !3478
  %3454 = getelementptr inbounds i64, i64* %3453, i64 %3451
  %3455 = load i64, i64* %3454, align 8, !invariant.group !3990
  %3456 = icmp ne i64 %3455, 0
  br i1 %3456, label %invertL1119.L1120_crit_edge.loopexit_phirc, label %invertL1119.L1120_crit_edge.loopexit_phirc445

invertL1119.L1120_crit_edge.loopexit_phirc:       ; preds = %invertL1119.L1120_crit_edge.loopexit
  %3457 = sub nuw i64 %3455, 1
  %_unwrap443 = add nsw i64 %623, -2
  %3458 = add nuw i64 %_unwrap443, 1
  %3459 = load i64**, i64*** %value_phi523_cache, align 8, !dereferenceable !306, !invariant.group !3549
  %3460 = getelementptr inbounds i64*, i64** %3459, i64 %3451
  %3461 = load i64*, i64** %3460, align 8, !dereferenceable !306, !invariant.group !3967
  %3462 = getelementptr inbounds i64, i64* %3461, i64 %3457
  %3463 = load i64, i64* %3462, align 8, !invariant.group !3968
  %3464 = load i64, i64* %arraysize494_cache, align 8, !alias.scope !3466, !noalias !3469, !invariant.group !3474
  %_unwrap444 = icmp eq i64 %3463, %3464
  br label %invertL1119.L1120_crit_edge.loopexit_phimerge

invertL1119.L1120_crit_edge.loopexit_phirc445:    ; preds = %invertL1119.L1120_crit_edge.loopexit
  br label %invertL1119.L1120_crit_edge.loopexit_phimerge

invertL1119.L1120_crit_edge.loopexit_phimerge:    ; preds = %invertL1119.L1120_crit_edge.loopexit_phirc445, %invertL1119.L1120_crit_edge.loopexit_phirc
  %3465 = phi i1 [ %_unwrap444, %invertL1119.L1120_crit_edge.loopexit_phirc ], [ false, %invertL1119.L1120_crit_edge.loopexit_phirc445 ]
  br i1 %3465, label %mergeinvertL1083_L1119.L1120_crit_edge.loopexit442, label %mergeinvertL1083_L1119.L1120_crit_edge.loopexit

mergeinvertL1083_L1119.L1120_crit_edge.loopexit442: ; preds = %invertL1119.L1120_crit_edge.loopexit_phimerge
  store i64 %3450, i64* %"iv17'ac", align 8
  br label %invertL1083

mergeinvertL1083_L1119.L1120_crit_edge.loopexit:  ; preds = %invertL1119.L1120_crit_edge.loopexit_phimerge
  store i64 %3445, i64* %"iv17'ac", align 8
  br label %invertL1090

invertL1119.L1120_crit_edge:                      ; preds = %invertL1207
  %3466 = load i64, i64* %"iv9'ac", align 8, !dbg !3940
  %_unwrap449 = add nsw i64 %623, -2, !dbg !3940
  %3467 = add nuw i64 %_unwrap449, 1, !dbg !3940
  %3468 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache446, align 8, !dbg !3940, !dereferenceable !306, !invariant.group !3550
  %3469 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3468, i64 %3466, !dbg !3940
  %3470 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3469, align 8, !dbg !3940, !invariant.group !4002
  %3471 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3472 = add nuw i64 %_unwrap449, 1, !dbg !3919
  %3473 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache450, align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3551
  %3474 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3473, i64 %3471, !dbg !3919
  %3475 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3474, align 8, !dbg !3919, !invariant.group !4001
  %3476 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3477 = add nuw i64 %_unwrap449, 1, !dbg !3919
  %3478 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi53_cache", align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3552
  %3479 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3478, i64 %3476, !dbg !3919
  %3480 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3479, align 8, !dbg !3919, !invariant.group !4000
  %3481 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3482 = add nuw i64 %_unwrap449, 1, !dbg !3919
  %3483 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache455_cache, align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3553
  %3484 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3483, i64 %3481, !dbg !3919
  %3485 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3484, align 8, !dbg !3919, !invariant.group !3999
  call fastcc void @diffejulia_gemv__1994({} addrspace(10)* align 16 %3475, {} addrspace(10)* align 16 %3480, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl", { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %3485), !dbg !3919
  %3486 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %3487 = add nuw i64 %_unwrap449, 1, !dbg !3913
  %3488 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache458, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3554
  %3489 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3488, i64 %3486, !dbg !3913
  %3490 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3489, align 8, !dbg !3913, !invariant.group !3926
  %3491 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %3492 = add nuw i64 %_unwrap449, 1, !dbg !3913
  %3493 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented410_cache, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3555
  %3494 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %3493, i64 %3491, !dbg !3913
  %3495 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %3494, align 8, !dbg !3913, !invariant.group !3925
  %"'ac412_unwrap" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %3495, 2, !dbg !3913
  %3496 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %3497 = add nuw i64 %_unwrap449, 1, !dbg !3913
  %3498 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache462, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3556
  %3499 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3498, i64 %3496, !dbg !3913
  %3500 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3499, align 8, !dbg !3913, !invariant.group !3998
  %3501 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %3502 = add nuw i64 %_unwrap449, 1, !dbg !3913
  %3503 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi50_cache", align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3557
  %3504 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3503, i64 %3501, !dbg !3913
  %3505 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3504, align 8, !dbg !3913, !invariant.group !3997
  %3506 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %3507 = add nuw i64 %_unwrap449, 1, !dbg !3913
  %3508 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache467_cache, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3558
  %3509 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %3508, i64 %3506, !dbg !3913
  %3510 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %3509, align 8, !dbg !3913, !invariant.group !3996
  call fastcc void @diffejulia___2044({} addrspace(10)* align 16 %3490, {} addrspace(10)* align 16 %"'ac412_unwrap", {} addrspace(10)* align 16 %3500, {} addrspace(10)* align 16 %3505, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %3510), !dbg !3913
  %3511 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3512 = add nuw i64 %_unwrap449, 1, !dbg !3919
  %3513 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache470, align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3559
  %3514 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3513, i64 %3511, !dbg !3919
  %3515 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3514, align 8, !dbg !3919, !invariant.group !3995
  %3516 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3517 = add nuw i64 %_unwrap449, 1, !dbg !3919
  %3518 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi49_cache", align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3560
  %3519 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3518, i64 %3516, !dbg !3919
  %3520 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3519, align 8, !dbg !3919, !invariant.group !3994
  %3521 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3522 = add nuw i64 %_unwrap449, 1, !dbg !3919
  %3523 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache474, align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3561
  %3524 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3523, i64 %3521, !dbg !3919
  %3525 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3524, align 8, !dbg !3919, !invariant.group !3949
  %3526 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3527 = add nuw i64 %_unwrap449, 1, !dbg !3919
  %3528 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache419, align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3546
  %3529 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3528, i64 %3526, !dbg !3919
  %3530 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3529, align 8, !dbg !3919, !invariant.group !3945
  %3531 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3532 = add nuw i64 %_unwrap449, 1, !dbg !3919
  %3533 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache478_cache, align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3562
  %3534 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3533, i64 %3531, !dbg !3919
  %3535 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3534, align 8, !dbg !3919, !invariant.group !3993
  call fastcc void @diffejulia_gemv__1994({} addrspace(10)* align 16 %3515, {} addrspace(10)* align 16 %3520, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %3525, {} addrspace(10)* align 16 %3530, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %3535), !dbg !3919
  %3536 = load i64, i64* %"iv9'ac", align 8
  %3537 = load i64, i64* %arraysize494_cache, align 8, !alias.scope !3466, !noalias !3469, !invariant.group !3474
  %.not888_unwrap = icmp eq i64 %3537, 0
  br i1 %.not888_unwrap, label %invertL1062, label %invertL1119.L1120_crit_edge.loopexit

invertL1207:                                      ; preds = %invertL1264.L1265_crit_edge, %invertL1228.preheader
  br label %invertL1119.L1120_crit_edge

invertL1228.preheader:                            ; preds = %invertL1228
  %3538 = load i64, i64* %"iv9'ac", align 8
  %3539 = load i64, i64* %"iv19'ac", align 8
  %_unwrap487 = load i64**, i64*** %value_phi579_cache, align 8, !dbg !3965, !invariant.group !4010
  %_unwrap488 = getelementptr inbounds i64*, i64** %_unwrap487, i64 %3538
  %forfree489 = load i64*, i64** %_unwrap488, align 8, !dereferenceable !306, !invariant.group !4011
  %3540 = bitcast i64* %forfree489 to i8*
  call void @free(i8* nonnull %3540), !dbg !4207
  br label %invertL1207

invertL1228:                                      ; preds = %mergeinvertL1228_L1264.L1265_crit_edge.loopexit500, %invertL1235
  %3541 = load i64, i64* %"iv19'ac", align 8
  %3542 = icmp eq i64 %3541, 0
  %3543 = xor i1 %3542, true
  br i1 %3542, label %invertL1228.preheader, label %incinvertL1228

incinvertL1228:                                   ; preds = %invertL1228
  %3544 = load i64, i64* %"iv19'ac", align 8
  %3545 = add nsw i64 %3544, -1
  store i64 %3545, i64* %"iv19'ac", align 8
  br label %invertL1235

invertL1235:                                      ; preds = %mergeinvertL1228_L1264.L1265_crit_edge.loopexit, %incinvertL1228
  %3546 = load i64, i64* %"iv19'ac", align 8, !dbg !3974
  %3547 = load i64, i64* %"iv9'ac", align 8, !dbg !3974
  %_unwrap485 = add nsw i64 %623, -2, !dbg !3974
  %3548 = add nuw i64 %_unwrap485, 1, !dbg !3974
  %3549 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache446, align 8, !dbg !3974, !dereferenceable !306, !invariant.group !3550
  %3550 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3549, i64 %3547, !dbg !3974
  %3551 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3550, align 8, !dbg !3974, !invariant.group !4002
  %"'ipc483_unwrap" = bitcast {} addrspace(10)* %3551 to double addrspace(13)* addrspace(10)*, !dbg !3974
  %"'ipc484_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc483_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !3974
  %"arrayptr636901'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc484_unwrap", align 8, !dbg !3974, !tbaa !382, !alias.scope !4018, !noalias !4019, !nonnull !68
  %3552 = add nuw i64 %_unwrap485, 1, !dbg !3974
  %3553 = load i64**, i64*** %value_phi579_cache, align 8, !dbg !3974, !dereferenceable !306, !invariant.group !3565
  %3554 = getelementptr inbounds i64*, i64** %3553, i64 %3547, !dbg !3974
  %3555 = load i64*, i64** %3554, align 8, !dbg !3974, !dereferenceable !306, !invariant.group !4011
  %3556 = getelementptr inbounds i64, i64* %3555, i64 %3546, !dbg !3974
  %3557 = load i64, i64* %3556, align 8, !dbg !3974, !invariant.group !4012
  %_unwrap490 = add i64 %3557, -1, !dbg !3974
  %"'ipg482_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr636901'il_phi_unwrap", i64 %_unwrap490, !dbg !3974
  %3558 = load double, double addrspace(13)* %"'ipg482_unwrap", align 8, !dbg !3974, !tbaa !269, !alias.scope !4239, !noalias !4240
  store double 0.000000e+00, double addrspace(13)* %"'ipg482_unwrap", align 8, !dbg !3974, !tbaa !269, !alias.scope !4239, !noalias !4240
  %3559 = load double, double* %"arrayref634'de", align 8, !dbg !3974
  %3560 = fadd fast double %3559, %3558, !dbg !3974
  store double %3560, double* %"arrayref634'de", align 8, !dbg !3974
  %3561 = load double, double* %"arrayref634'de", align 8, !dbg !3961
  store double 0.000000e+00, double* %"arrayref634'de", align 8, !dbg !3961
  %3562 = load i64, i64* %"iv19'ac", align 8, !dbg !3961
  %3563 = load i64, i64* %"iv9'ac", align 8, !dbg !3961
  %"'ipc423_unwrap492" = bitcast {} addrspace(10)* %"getfield17'ipl" to double addrspace(13)* addrspace(10)*, !dbg !3961
  %"'ipc424_unwrap493" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc423_unwrap492" to double addrspace(13)* addrspace(11)*, !dbg !3961
  %"arrayptr633900'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc424_unwrap493", align 16, !alias.scope !3469, !noalias !3466, !invariant.group !4009
  %_unwrap494 = add i64 %3563, 2, !dbg !3961
  %_unwrap495 = add nsw i64 %_unwrap494, -1, !dbg !3961
  %3564 = load i64, i64* %arraysize494_cache, align 8, !alias.scope !3466, !noalias !3469, !invariant.group !3474
  %_unwrap496 = mul i64 %_unwrap495, %3564, !dbg !3961
  %_unwrap497 = add i64 %_unwrap496, -1, !dbg !3961
  %iv.next20_unwrap = add nuw nsw i64 %3562, 1, !dbg !3961
  %_unwrap498 = add i64 %_unwrap497, %iv.next20_unwrap, !dbg !3961
  %"'ipg491_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr633900'ipl_unwrap", i64 %_unwrap498, !dbg !3961
  %3565 = load double, double addrspace(13)* %"'ipg491_unwrap", align 8, !dbg !3961, !tbaa !269, !alias.scope !4241, !noalias !4242
  %3566 = fadd fast double %3565, %3561, !dbg !3961
  store double %3566, double addrspace(13)* %"'ipg491_unwrap", align 8, !dbg !3961, !tbaa !269, !alias.scope !4241, !noalias !4242
  br label %invertL1228

invertL1264.L1265_crit_edge.loopexit:             ; preds = %invertL1264.L1265_crit_edge
  %_unwrap499 = add nsw i64 %623, -2
  %3567 = add nuw i64 %_unwrap499, 1
  %3568 = load i64*, i64** %loopLimit_cache57, align 8, !dereferenceable !306, !invariant.group !3481
  %3569 = load i64, i64* %"iv9'ac", align 8
  %3570 = getelementptr inbounds i64, i64* %3568, i64 %3569
  %3571 = load i64, i64* %3570, align 8, !invariant.group !4026
  %3572 = add nuw i64 %_unwrap499, 1
  %3573 = load i64*, i64** %loopLimit_cache57, align 8, !dereferenceable !306, !invariant.group !3481
  %3574 = load i64, i64* %"iv9'ac", align 8
  %3575 = getelementptr inbounds i64, i64* %3573, i64 %3574
  %3576 = load i64, i64* %3575, align 8, !invariant.group !4026
  %3577 = load i64, i64* %"iv9'ac", align 8
  %3578 = add nuw i64 %_unwrap499, 1
  %3579 = load i64*, i64** %loopLimit_cache57, align 8, !dereferenceable !306, !invariant.group !3481
  %3580 = getelementptr inbounds i64, i64* %3579, i64 %3577
  %3581 = load i64, i64* %3580, align 8, !invariant.group !4026
  %3582 = icmp ne i64 %3581, 0
  br i1 %3582, label %invertL1264.L1265_crit_edge.loopexit_phirc, label %invertL1264.L1265_crit_edge.loopexit_phirc503

invertL1264.L1265_crit_edge.loopexit_phirc:       ; preds = %invertL1264.L1265_crit_edge.loopexit
  %3583 = sub nuw i64 %3581, 1
  %_unwrap501 = add nsw i64 %623, -2
  %3584 = add nuw i64 %_unwrap501, 1
  %3585 = load i64**, i64*** %value_phi579_cache, align 8, !dereferenceable !306, !invariant.group !3565
  %3586 = getelementptr inbounds i64*, i64** %3585, i64 %3577
  %3587 = load i64*, i64** %3586, align 8, !dereferenceable !306, !invariant.group !4011
  %3588 = getelementptr inbounds i64, i64* %3587, i64 %3583
  %3589 = load i64, i64* %3588, align 8, !invariant.group !4012
  %3590 = load i64, i64* %arraysize494_cache, align 8, !alias.scope !3466, !noalias !3469, !invariant.group !3474
  %_unwrap502 = icmp eq i64 %3589, %3590
  br label %invertL1264.L1265_crit_edge.loopexit_phimerge

invertL1264.L1265_crit_edge.loopexit_phirc503:    ; preds = %invertL1264.L1265_crit_edge.loopexit
  br label %invertL1264.L1265_crit_edge.loopexit_phimerge

invertL1264.L1265_crit_edge.loopexit_phimerge:    ; preds = %invertL1264.L1265_crit_edge.loopexit_phirc503, %invertL1264.L1265_crit_edge.loopexit_phirc
  %3591 = phi i1 [ %_unwrap502, %invertL1264.L1265_crit_edge.loopexit_phirc ], [ false, %invertL1264.L1265_crit_edge.loopexit_phirc503 ]
  br i1 %3591, label %mergeinvertL1228_L1264.L1265_crit_edge.loopexit500, label %mergeinvertL1228_L1264.L1265_crit_edge.loopexit

mergeinvertL1228_L1264.L1265_crit_edge.loopexit500: ; preds = %invertL1264.L1265_crit_edge.loopexit_phimerge
  store i64 %3576, i64* %"iv19'ac", align 8
  br label %invertL1228

mergeinvertL1228_L1264.L1265_crit_edge.loopexit:  ; preds = %invertL1264.L1265_crit_edge.loopexit_phimerge
  store i64 %3571, i64* %"iv19'ac", align 8
  br label %invertL1235

invertL1264.L1265_crit_edge:                      ; preds = %invertpass606.2
  %3592 = load i64, i64* %"iv9'ac", align 8, !dbg !4043
  %"'ipg415_unwrap504" = getelementptr inbounds i8, i8 addrspace(10)* %"'ipc", i64 72, !dbg !4043
  %"'ipc416_unwrap505" = bitcast i8 addrspace(10)* %"'ipg415_unwrap504" to double addrspace(10)*, !dbg !4043
  %"'ipc417_unwrap506" = addrspacecast double addrspace(10)* %"'ipc416_unwrap505" to double addrspace(11)*, !dbg !4043
  %3593 = load double, double addrspace(11)* %"'ipc417_unwrap506", align 8, !dbg !4043, !tbaa !307, !alias.scope !3021, !noalias !4243
  store double 0.000000e+00, double addrspace(11)* %"'ipc417_unwrap506", align 8, !dbg !4043, !tbaa !307, !alias.scope !3021, !noalias !4243
  %3594 = load double, double* %"'de507", align 8, !dbg !4043
  %3595 = fadd fast double %3594, %3593, !dbg !4043
  store double %3595, double* %"'de507", align 8, !dbg !4043
  %3596 = load double, double* %"'de507", align 8, !dbg !4042
  store double 0.000000e+00, double* %"'de507", align 8, !dbg !4042
  %3597 = load double, double* %"'de414", align 8, !dbg !4042
  %3598 = fadd fast double %3597, %3596, !dbg !4042
  store double %3598, double* %"'de414", align 8, !dbg !4042
  %3599 = load double, double* %"'de508", align 8, !dbg !4042
  %3600 = fadd fast double %3599, %3596, !dbg !4042
  store double %3600, double* %"'de508", align 8, !dbg !4042
  %3601 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %_unwrap509 = addrspacecast [1 x {} addrspace(10)*]* %346 to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !3913
  %3602 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %"'ipc511_unwrap" = addrspacecast [1 x {} addrspace(10)*]* %"'ipa510" to [1 x {} addrspace(10)*] addrspace(11)*, !dbg !3913
  %3603 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %_unwrap515 = add nsw i64 %623, -2, !dbg !3913
  %3604 = add nuw i64 %_unwrap515, 1, !dbg !3913
  %3605 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache512, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3566
  %3606 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3605, i64 %3603, !dbg !3913
  %3607 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3606, align 8, !dbg !3913, !invariant.group !4040
  %3608 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %3609 = add nuw i64 %_unwrap515, 1, !dbg !3913
  %3610 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi63_cache", align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3567
  %3611 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3610, i64 %3608, !dbg !3913
  %3612 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3611, align 8, !dbg !3913, !invariant.group !4041
  %3613 = load double, double* %"'de508", align 8, !dbg !3913
  %3614 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %3615 = add nuw i64 %_unwrap515, 1, !dbg !3913
  %3616 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)** %subcache518_cache, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3568
  %3617 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %3616, i64 %3614, !dbg !3913
  %3618 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } addrspace(10)* %3617, align 8, !dbg !3913, !invariant.group !4045
  call fastcc void @diffejulia___1991([1 x {} addrspace(10)*] addrspace(11)* nocapture readonly align 8 %_unwrap509, [1 x {} addrspace(10)*] addrspace(11)* nocapture align 8 %"'ipc511_unwrap", {} addrspace(10)* align 16 %getfield7, {} addrspace(10)* align 16 %"getfield7'ipl", {} addrspace(10)* align 16 %3607, {} addrspace(10)* align 16 %3612, double %3613, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, {} addrspace(10)*, i64, i64, i64*, double*, i64*, double* } %3618), !dbg !3913
  store double 0.000000e+00, double* %"'de508", align 8, !dbg !3913
  %3619 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %3620 = add nuw i64 %_unwrap515, 1, !dbg !3913
  %3621 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache521, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3569
  %3622 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3621, i64 %3619, !dbg !3913
  %3623 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3622, align 8, !dbg !3913, !invariant.group !3992
  %3624 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %3625 = add nuw i64 %_unwrap515, 1, !dbg !3913
  %3626 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)** %_augmented454_cache, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3570
  %3627 = getelementptr inbounds { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %3626, i64 %3624, !dbg !3913
  %3628 = load { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } addrspace(10)* %3627, align 8, !dbg !3913, !invariant.group !3991
  %"'ac456_unwrap" = extractvalue { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)* } %3628, 2, !dbg !3913
  %3629 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %3630 = add nuw i64 %_unwrap515, 1, !dbg !3913
  %3631 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache525, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3571
  %3632 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3631, i64 %3629, !dbg !3913
  %3633 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3632, align 8, !dbg !3913, !invariant.group !4037
  %3634 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %3635 = add nuw i64 %_unwrap515, 1, !dbg !3913
  %3636 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'ip_phi62_cache", align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3572
  %3637 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3636, i64 %3634, !dbg !3913
  %3638 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3637, align 8, !dbg !3913, !invariant.group !4036
  %3639 = load i64, i64* %"iv9'ac", align 8, !dbg !3913
  %3640 = add nuw i64 %_unwrap515, 1, !dbg !3913
  %3641 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)** %subcache530_cache, align 8, !dbg !3913, !dereferenceable !306, !invariant.group !3573
  %3642 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %3641, i64 %3639, !dbg !3913
  %3643 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } addrspace(10)* %3642, align 8, !dbg !3913, !invariant.group !4035
  call fastcc void @diffejulia___2044({} addrspace(10)* align 16 %3623, {} addrspace(10)* align 16 %"'ac456_unwrap", {} addrspace(10)* align 16 %3633, {} addrspace(10)* align 16 %3638, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1, i1, i1 } %3643), !dbg !3913
  %3644 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3645 = add nuw i64 %_unwrap515, 1, !dbg !3919
  %3646 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache533, align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3574
  %3647 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3646, i64 %3644, !dbg !3919
  %3648 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3647, align 8, !dbg !3919, !invariant.group !4034
  %3649 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3650 = add nuw i64 %_unwrap515, 1, !dbg !3919
  %3651 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi61_cache", align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3575
  %3652 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3651, i64 %3649, !dbg !3919
  %3653 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3652, align 8, !dbg !3919, !invariant.group !4033
  %3654 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3655 = add nuw i64 %_unwrap515, 1, !dbg !3919
  %3656 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache537, align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3576
  %3657 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3656, i64 %3654, !dbg !3919
  %3658 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3657, align 8, !dbg !3919, !invariant.group !4003
  %3659 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3660 = add nuw i64 %_unwrap515, 1, !dbg !3919
  %3661 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache446, align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3550
  %3662 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3661, i64 %3659, !dbg !3919
  %3663 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3662, align 8, !dbg !3919, !invariant.group !4002
  %3664 = load i64, i64* %"iv9'ac", align 8, !dbg !3919
  %3665 = add nuw i64 %_unwrap515, 1, !dbg !3919
  %3666 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)*, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)** %subcache541_cache, align 8, !dbg !3919, !dereferenceable !306, !invariant.group !3577
  %3667 = getelementptr inbounds { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3666, i64 %3664, !dbg !3919
  %3668 = load { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } addrspace(10)* %3667, align 8, !dbg !3919, !invariant.group !4032
  call fastcc void @diffejulia_gemv__1994({} addrspace(10)* align 16 %3648, {} addrspace(10)* align 16 %3653, i32 zeroext 1308622848, {} addrspace(10)* align 16 %getfield5, {} addrspace(10)* align 16 %"getfield5'ipl", {} addrspace(10)* align 16 %3658, {} addrspace(10)* align 16 %3663, { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 } %3668), !dbg !3919
  %3669 = load i64, i64* %"iv9'ac", align 8
  %3670 = load i64, i64* %arraysize494_cache, align 8, !alias.scope !3466, !noalias !3469, !invariant.group !3474
  %.not888_unwrap544 = icmp eq i64 %3670, 0
  br i1 %.not888_unwrap544, label %invertL1207, label %invertL1264.L1265_crit_edge.loopexit

invertL1340:                                      ; preds = %mergeinvertL616_L1354.loopexit, %incinvertL616
  %3671 = load i64, i64* %"iv9'ac", align 8, !dbg !4050
  %_unwrap549 = add nsw i64 %623, -2, !dbg !4050
  %3672 = add nuw i64 %_unwrap549, 1, !dbg !4050
  %3673 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %_cache546, align 8, !dbg !4050, !dereferenceable !306, !invariant.group !3578
  %3674 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3673, i64 %3671, !dbg !4050
  %3675 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3674, align 8, !dbg !4050, !invariant.group !4190
  %3676 = load i64, i64* %"iv9'ac", align 8, !dbg !4050
  %3677 = add nuw i64 %_unwrap549, 1, !dbg !4050
  %3678 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi69_cache", align 8, !dbg !4050, !dereferenceable !306, !invariant.group !3579
  %3679 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3678, i64 %3676, !dbg !4050
  %3680 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3679, align 8, !dbg !4050, !invariant.group !4189
  %3681 = load i64, i64* %"iv9'ac", align 8, !dbg !4050
  %_unwrap551 = addrspacecast [1 x [1 x i64]]* %newstruct618 to [1 x [1 x i64]] addrspace(11)*, !dbg !4050
  %3682 = load i64, i64* %"iv9'ac", align 8, !dbg !4050
  %_unwrap552 = add i64 %3682, 2, !dbg !4050
  %3683 = load i64, i64* %"iv9'ac", align 8, !dbg !4050
  %3684 = add nuw i64 %_unwrap549, 1, !dbg !4050
  %3685 = load { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)*, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)** %_augmented553_cache, align 8, !dbg !4050, !dereferenceable !306, !invariant.group !3580
  %3686 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %3685, i64 %3683, !dbg !4050
  %3687 = load { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* }, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } addrspace(10)* %3686, align 8, !dbg !4050, !invariant.group !4054
  call fastcc void @diffejulia__unsafe_setindex__2077.348({} addrspace(10)* align 16 %getfield19, {} addrspace(10)* align 16 %"getfield19'ipl", {} addrspace(10)* align 16 %3675, {} addrspace(10)* align 16 %3680, [1 x [1 x i64]] addrspace(11)* nocapture readonly align 8 %_unwrap551, i64 signext %_unwrap552, { {} addrspace(10)*, {} addrspace(10)*, i64, i1, i64, i64* } %3687), !dbg !4050
  br label %invertpass606.2

invertL1354.loopexit:                             ; preds = %invertL1354
  %_unwrap555 = add nsw i64 %623, -2
  br label %mergeinvertL616_L1354.loopexit

mergeinvertL616_L1354.loopexit:                   ; preds = %invertL1354.loopexit
  store i64 %_unwrap555, i64* %"iv9'ac", align 8
  br label %invertL1340

invertL1354:                                      ; preds = %L1354
  br i1 %624, label %invertL1354.loopexit, label %invertL598

invertpass.2.loopexit:                            ; preds = %invertpass.2
  %3688 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !4056
  %3689 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !4056
  %3690 = load i64, i64* %loopLimit_cache, align 8, !invariant.group !4056
  %3691 = icmp ne i64 %3690, 0
  br i1 %3691, label %invertpass.2.loopexit_phirc, label %invertpass.2.loopexit_phirc558

invertpass.2.loopexit_phirc:                      ; preds = %invertpass.2.loopexit
  %3692 = sub nuw i64 %3690, 1
  %3693 = load i64*, i64** %value_phi79_cache, align 8, !dereferenceable !306, !invariant.group !3229
  %3694 = getelementptr inbounds i64, i64* %3693, i64 %3692
  %3695 = load i64, i64* %3694, align 8, !invariant.group !3230
  %_unwrap557 = icmp eq i64 %3695, %arraysize
  br label %invertpass.2.loopexit_phimerge

invertpass.2.loopexit_phirc558:                   ; preds = %invertpass.2.loopexit
  br label %invertpass.2.loopexit_phimerge

invertpass.2.loopexit_phimerge:                   ; preds = %invertpass.2.loopexit_phirc558, %invertpass.2.loopexit_phirc
  %3696 = phi i1 [ %_unwrap557, %invertpass.2.loopexit_phirc ], [ false, %invertpass.2.loopexit_phirc558 ]
  br i1 %3696, label %mergeinvertL243_pass.2.loopexit556, label %mergeinvertL243_pass.2.loopexit

mergeinvertL243_pass.2.loopexit556:               ; preds = %invertpass.2.loopexit_phimerge
  store i64 %3689, i64* %"iv1'ac", align 8
  br label %invertL243

mergeinvertL243_pass.2.loopexit:                  ; preds = %invertpass.2.loopexit_phimerge
  store i64 %3688, i64* %"iv1'ac", align 8
  br label %invertL250

invertpass.2:                                     ; preds = %invertL325
  %3697 = load double, double addrspace(13)* %"memcpy_refined_dst94.2'ipg", align 8, !dbg !4078, !tbaa !269, !alias.scope !4244, !noalias !4245
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst94.2'ipg", align 8, !dbg !4078, !tbaa !269, !alias.scope !4244, !noalias !4245
  %3698 = load double, double* %"'de559", align 8, !dbg !4078
  %3699 = fadd fast double %3698, %3697, !dbg !4078
  store double %3699, double* %"'de559", align 8, !dbg !4078
  %3700 = load double, double addrspace(13)* %"memcpy_refined_dst94.1'ipg", align 8, !dbg !4078, !tbaa !269, !alias.scope !4244, !noalias !4245
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst94.1'ipg", align 8, !dbg !4078, !tbaa !269, !alias.scope !4244, !noalias !4245
  %3701 = load double, double* %"'de560", align 8, !dbg !4078
  %3702 = fadd fast double %3701, %3700, !dbg !4078
  store double %3702, double* %"'de560", align 8, !dbg !4078
  %3703 = load double, double addrspace(13)* %"arrayptr819'ipl", align 8, !dbg !4078, !tbaa !269, !alias.scope !4244, !noalias !4245
  store double 0.000000e+00, double addrspace(13)* %"arrayptr819'ipl", align 8, !dbg !4078, !tbaa !269, !alias.scope !4244, !noalias !4245
  %3704 = load double, double* %"'de561", align 8, !dbg !4078
  %3705 = fadd fast double %3704, %3703, !dbg !4078
  store double %3705, double* %"'de561", align 8, !dbg !4078
  %3706 = load double, double* %"'de559", align 8, !dbg !4059
  store double 0.000000e+00, double* %"'de559", align 8, !dbg !4059
  %3707 = load double, double* %"memcpy_refined_src88'ipg", align 8, !dbg !4059, !tbaa !133, !alias.scope !4246, !noalias !4247
  %3708 = fadd fast double %3707, %3706, !dbg !4059
  store double %3708, double* %"memcpy_refined_src88'ipg", align 8, !dbg !4059, !tbaa !133, !alias.scope !4246, !noalias !4247
  %3709 = load double, double* %"'de560", align 8, !dbg !4059
  store double 0.000000e+00, double* %"'de560", align 8, !dbg !4059
  %3710 = load double, double* %"memcpy_refined_src86'ipg", align 8, !dbg !4059, !tbaa !133, !alias.scope !4246, !noalias !4247
  %3711 = fadd fast double %3710, %3709, !dbg !4059
  store double %3711, double* %"memcpy_refined_src86'ipg", align 8, !dbg !4059, !tbaa !133, !alias.scope !4246, !noalias !4247
  %3712 = load double, double* %"'de561", align 8, !dbg !4059
  store double 0.000000e+00, double* %"'de561", align 8, !dbg !4059
  %3713 = load double, double* %"memcpy_refined_src84'ipg", align 8, !dbg !4059, !tbaa !133, !alias.scope !4246, !noalias !4247
  %3714 = fadd fast double %3713, %3712, !dbg !4059
  store double %3714, double* %"memcpy_refined_src84'ipg", align 8, !dbg !4059, !tbaa !133, !alias.scope !4246, !noalias !4247
  call fastcc void @diffejulia_compute_energy_2128([3 x double]* nocapture nofree writeonly align 8 "enzyme_sret" undef, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'ipa564", {} addrspace(10)* align 16 %491, {} addrspace(10)* align 16 %487, {} addrspace(10)* align 16 %getfield9, {} addrspace(10)* align 16 %"getfield9'ipl", { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %_augmented565), !dbg !3113
  br i1 %.not816, label %invertL222, label %invertpass.2.loopexit

invertib:                                         ; preds = %invertidxend
  br label %invertL359

invertidxend:                                     ; preds = %invertidxend141
  store double 0.000000e+00, double addrspace(13)* %"'ipg566", align 8, !dbg !3281, !tbaa !269, !alias.scope !4248, !noalias !4249
  br label %invertib

invertidxend141:                                  ; preds = %invertidxend154
  store double 0.000000e+00, double addrspace(13)* %"'ipg568", align 8, !dbg !4113, !tbaa !269, !alias.scope !4248, !noalias !4249
  br label %invertidxend

invertidxend154:                                  ; preds = %invertidxend180
  %3715 = load double, double* %"'de569", align 8, !dbg !4117
  store double 0.000000e+00, double* %"'de569", align 8, !dbg !4117
  %3716 = fmul fast double %3715, -2.000000e+00, !dbg !4117
  %3717 = load double, double* %"'de", align 8, !dbg !4117
  %3718 = fadd fast double %3717, %3716, !dbg !4117
  store double %3718, double* %"'de", align 8, !dbg !4117
  store double 0.000000e+00, double addrspace(13)* %"'ipg570", align 8, !dbg !4115, !tbaa !269, !alias.scope !4248, !noalias !4249
  br label %invertidxend141

invertidxend180:                                  ; preds = %invertidxend232
  %3719 = load double, double addrspace(13)* %"'ipg571", align 8, !dbg !4125, !tbaa !269, !alias.scope !4248, !noalias !4249
  store double 0.000000e+00, double addrspace(13)* %"'ipg571", align 8, !dbg !4125, !tbaa !269, !alias.scope !4248, !noalias !4249
  %3720 = load double, double* %"'de572", align 8, !dbg !4125
  %3721 = fadd fast double %3720, %3719, !dbg !4125
  store double %3721, double* %"'de572", align 8, !dbg !4125
  %3722 = load double, double* %"'de572", align 8, !dbg !4123
  store double 0.000000e+00, double* %"'de572", align 8, !dbg !4123
  %3723 = fneg fast double %3722, !dbg !4123
  %3724 = load double, double* %"'de90", align 8, !dbg !4123
  %3725 = fadd fast double %3724, %3723, !dbg !4123
  store double %3725, double* %"'de90", align 8, !dbg !4123
  %3726 = load double, double addrspace(13)* %"'ipg573", align 8, !dbg !4121, !tbaa !269, !alias.scope !4248, !noalias !4249
  store double 0.000000e+00, double addrspace(13)* %"'ipg573", align 8, !dbg !4121, !tbaa !269, !alias.scope !4248, !noalias !4249
  %3727 = load double, double* %"'de", align 8, !dbg !4121
  %3728 = fadd fast double %3727, %3726, !dbg !4121
  store double %3728, double* %"'de", align 8, !dbg !4121
  %3729 = load double, double addrspace(13)* %"'ipg574", align 8, !dbg !4120, !tbaa !269, !alias.scope !4248, !noalias !4249
  store double 0.000000e+00, double addrspace(13)* %"'ipg574", align 8, !dbg !4120, !tbaa !269, !alias.scope !4248, !noalias !4249
  %3730 = load double, double* %"'de569", align 8, !dbg !4120
  %3731 = fadd fast double %3730, %3729, !dbg !4120
  store double %3731, double* %"'de569", align 8, !dbg !4120
  br label %invertidxend154

invertidxend232:                                  ; preds = %invertidxend258
  %3732 = load double, double addrspace(13)* %"'ipg575", align 8, !dbg !4134, !tbaa !269, !alias.scope !4248, !noalias !4249
  store double 0.000000e+00, double addrspace(13)* %"'ipg575", align 8, !dbg !4134, !tbaa !269, !alias.scope !4248, !noalias !4249
  %3733 = load double, double* %"'de572", align 8, !dbg !4134
  %3734 = fadd fast double %3733, %3732, !dbg !4134
  store double %3734, double* %"'de572", align 8, !dbg !4134
  %3735 = load double, double addrspace(13)* %"'ipg576", align 8, !dbg !4132, !tbaa !269, !alias.scope !4248, !noalias !4249
  store double 0.000000e+00, double addrspace(13)* %"'ipg576", align 8, !dbg !4132, !tbaa !269, !alias.scope !4248, !noalias !4249
  %3736 = load double, double* %"'de", align 8, !dbg !4132
  %3737 = fadd fast double %3736, %3735, !dbg !4132
  store double %3737, double* %"'de", align 8, !dbg !4132
  %3738 = load double, double addrspace(13)* %"'ipg577", align 8, !dbg !4131, !tbaa !269, !alias.scope !4248, !noalias !4249
  store double 0.000000e+00, double addrspace(13)* %"'ipg577", align 8, !dbg !4131, !tbaa !269, !alias.scope !4248, !noalias !4249
  %3739 = load double, double* %"'de578", align 8, !dbg !4131
  %3740 = fadd fast double %3739, %3738, !dbg !4131
  store double %3740, double* %"'de578", align 8, !dbg !4131
  %3741 = load double, double* %"'de578", align 8, !dbg !4128
  store double 0.000000e+00, double* %"'de578", align 8, !dbg !4128
  %3742 = fmul fast double %3741, -3.000000e+00, !dbg !4128
  %3743 = load double, double* %"'de", align 8, !dbg !4128
  %3744 = fadd fast double %3743, %3742, !dbg !4128
  store double %3744, double* %"'de", align 8, !dbg !4128
  %3745 = load double, double addrspace(13)* %"'ipg579", align 8, !dbg !4126, !tbaa !269, !alias.scope !4248, !noalias !4249
  store double 0.000000e+00, double addrspace(13)* %"'ipg579", align 8, !dbg !4126, !tbaa !269, !alias.scope !4248, !noalias !4249
  %3746 = load double, double* %"'de", align 8, !dbg !4126
  %3747 = fadd fast double %3746, %3745, !dbg !4126
  store double %3747, double* %"'de", align 8, !dbg !4126
  br label %invertidxend180

invertidxend258:                                  ; preds = %invertidxend284.L394_crit_edge, %invertL412
  %3748 = load double, double addrspace(13)* %"'ipg580", align 8, !dbg !4140, !tbaa !269, !alias.scope !4248, !noalias !4249
  store double 0.000000e+00, double addrspace(13)* %"'ipg580", align 8, !dbg !4140, !tbaa !269, !alias.scope !4248, !noalias !4249
  %3749 = load double, double* %"'de572", align 8, !dbg !4140
  %3750 = fadd fast double %3749, %3748, !dbg !4140
  store double %3750, double* %"'de572", align 8, !dbg !4140
  %3751 = load double, double addrspace(13)* %"'ipg581", align 8, !dbg !4138, !tbaa !269, !alias.scope !4248, !noalias !4249
  store double 0.000000e+00, double addrspace(13)* %"'ipg581", align 8, !dbg !4138, !tbaa !269, !alias.scope !4248, !noalias !4249
  %3752 = load double, double* %"'de569", align 8, !dbg !4138
  %3753 = fadd fast double %3752, %3751, !dbg !4138
  store double %3753, double* %"'de569", align 8, !dbg !4138
  %3754 = load double, double addrspace(13)* %"'ipg582", align 8, !dbg !4136, !tbaa !269, !alias.scope !4248, !noalias !4249
  store double 0.000000e+00, double addrspace(13)* %"'ipg582", align 8, !dbg !4136, !tbaa !269, !alias.scope !4248, !noalias !4249
  %3755 = load double, double* %"'de", align 8, !dbg !4136
  %3756 = fadd fast double %3755, %3754, !dbg !4136
  store double %3756, double* %"'de", align 8, !dbg !4136
  br label %invertidxend232

invertidxend284.L394_crit_edge:                   ; preds = %invertL394
  br label %invertidxend258

invertpass606.2.loopexit:                         ; preds = %invertpass606.2
  br label %mergeinvertL980_pass606.2.loopexit

mergeinvertL980_pass606.2.loopexit:               ; preds = %invertpass606.2.loopexit
  store i64 0, i64* %"iv15'ac", align 8
  br label %invertL980

invertpass606.2:                                  ; preds = %invertL1340
  %3757 = load i64, i64* %"iv9'ac", align 8, !dbg !4182
  %_unwrap585 = add nsw i64 %623, -2, !dbg !4182
  %3758 = add nuw i64 %_unwrap585, 1, !dbg !4182
  %3759 = load {} addrspace(10)* addrspace(10)*, {} addrspace(10)* addrspace(10)** %"'mi69_cache", align 8, !dbg !4182, !dereferenceable !306, !invariant.group !3579
  %3760 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3759, i64 %3757, !dbg !4182
  %3761 = load {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %3760, align 8, !dbg !4182, !invariant.group !4189
  %"'ipc583_unwrap" = bitcast {} addrspace(10)* %3761 to double addrspace(13)* addrspace(10)*, !dbg !4182
  %"'ipc584_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc583_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !4182
  %"arrayptr608896'il_phi_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc584_unwrap", align 8, !tbaa !382, !alias.scope !4175, !noalias !4178, !nonnull !68
  %"memcpy_refined_dst610.2'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr608896'il_phi_unwrap", i64 2, !dbg !4182
  %3762 = load double, double addrspace(13)* %"memcpy_refined_dst610.2'ipg_unwrap", align 8, !dbg !4182, !tbaa !269, !alias.scope !4250, !noalias !4251
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst610.2'ipg_unwrap", align 8, !dbg !4182, !tbaa !269, !alias.scope !4250, !noalias !4251
  %3763 = load double, double* %"'de586", align 8, !dbg !4182
  %3764 = fadd fast double %3763, %3762, !dbg !4182
  store double %3764, double* %"'de586", align 8, !dbg !4182
  %3765 = load i64, i64* %"iv9'ac", align 8, !dbg !4182
  %"memcpy_refined_dst610.1'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr608896'il_phi_unwrap", i64 1, !dbg !4182
  %3766 = load double, double addrspace(13)* %"memcpy_refined_dst610.1'ipg_unwrap", align 8, !dbg !4182, !tbaa !269, !alias.scope !4250, !noalias !4251
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst610.1'ipg_unwrap", align 8, !dbg !4182, !tbaa !269, !alias.scope !4250, !noalias !4251
  %3767 = load double, double* %"'de587", align 8, !dbg !4182
  %3768 = fadd fast double %3767, %3766, !dbg !4182
  store double %3768, double* %"'de587", align 8, !dbg !4182
  %3769 = load double, double addrspace(13)* %"arrayptr608896'il_phi_unwrap", align 8, !dbg !4182, !tbaa !269, !alias.scope !4250, !noalias !4251
  store double 0.000000e+00, double addrspace(13)* %"arrayptr608896'il_phi_unwrap", align 8, !dbg !4182, !tbaa !269, !alias.scope !4250, !noalias !4251
  %3770 = load double, double* %"'de588", align 8, !dbg !4182
  %3771 = fadd fast double %3770, %3769, !dbg !4182
  store double %3771, double* %"'de588", align 8, !dbg !4182
  %3772 = load double, double* %"'de586", align 8, !dbg !4163
  store double 0.000000e+00, double* %"'de586", align 8, !dbg !4163
  %3773 = load i64, i64* %"iv9'ac", align 8, !dbg !4163
  %"memcpy_refined_src599'ipg_unwrap" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa589", i64 0, i64 2, !dbg !4163
  %3774 = load double, double* %"memcpy_refined_src599'ipg_unwrap", align 8, !dbg !4163, !tbaa !133, !alias.scope !4252, !noalias !4253
  %3775 = fadd fast double %3774, %3772, !dbg !4163
  store double %3775, double* %"memcpy_refined_src599'ipg_unwrap", align 8, !dbg !4163, !tbaa !133, !alias.scope !4252, !noalias !4253
  %3776 = load double, double* %"'de587", align 8, !dbg !4163
  store double 0.000000e+00, double* %"'de587", align 8, !dbg !4163
  %3777 = load i64, i64* %"iv9'ac", align 8, !dbg !4163
  %"memcpy_refined_src597'ipg_unwrap" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa589", i64 0, i64 1, !dbg !4163
  %3778 = load double, double* %"memcpy_refined_src597'ipg_unwrap", align 8, !dbg !4163, !tbaa !133, !alias.scope !4252, !noalias !4253
  %3779 = fadd fast double %3778, %3776, !dbg !4163
  store double %3779, double* %"memcpy_refined_src597'ipg_unwrap", align 8, !dbg !4163, !tbaa !133, !alias.scope !4252, !noalias !4253
  %3780 = load double, double* %"'de588", align 8, !dbg !4163
  store double 0.000000e+00, double* %"'de588", align 8, !dbg !4163
  %3781 = load i64, i64* %"iv9'ac", align 8, !dbg !4163
  %"memcpy_refined_src595'ipg_unwrap" = getelementptr inbounds [3 x double], [3 x double]* %"'ipa589", i64 0, i64 0, !dbg !4163
  %3782 = load double, double* %"memcpy_refined_src595'ipg_unwrap", align 8, !dbg !4163, !tbaa !133, !alias.scope !4252, !noalias !4253
  %3783 = fadd fast double %3782, %3780, !dbg !4163
  store double %3783, double* %"memcpy_refined_src595'ipg_unwrap", align 8, !dbg !4163, !tbaa !133, !alias.scope !4252, !noalias !4253
  %3784 = load i64, i64* %"iv9'ac", align 8, !dbg !4162
  %3785 = add nuw i64 %_unwrap585, 1, !dbg !4162
  %3786 = load { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)*, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)** %_augmented590_cache, align 8, !dbg !4162, !dereferenceable !306, !invariant.group !3581
  %3787 = getelementptr inbounds { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %3786, i64 %3784, !dbg !4162
  %3788 = load { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* }, { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } addrspace(10)* %3787, align 8, !dbg !4162, !invariant.group !4188
  call fastcc void @diffejulia_compute_energy_2128.360([3 x double]* nocapture nofree writeonly align 8 "enzyme_sret" undef, [3 x double]* nocapture nofree align 8 "enzyme_sret" %"'ipa589", {} addrspace(10)* align 16 %getfield11, {} addrspace(10)* align 16 %"getfield11'ipl", {} addrspace(10)* align 16 %getfield9, {} addrspace(10)* align 16 %"getfield9'ipl", { {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, double*, double*, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, i1 }, {} addrspace(10)*, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, { { { double*, double*, double*, i64, i8, i32, double*, double*, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, { double*, double*, double*, i64, double*, double*, double**, double**, double**, double, double, double**, double**, double**, double*, double* }, {} addrspace(10)*, {} addrspace(10)*, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, double*, double*, i64, i64, i64*, double*, i64*, double* }, { i8*, i8* }, {} addrspace(10)*, {} addrspace(10)*, i64, i64*, double*, i64*, double* } %3788), !dbg !4162
  %3789 = add nuw i64 %_unwrap585, 1
  %3790 = load i8*, i8** %_cache592, align 8, !dereferenceable !306, !invariant.group !3584
  %3791 = load i64, i64* %"iv9'ac", align 8
  %3792 = getelementptr inbounds i8, i8* %3790, i64 %3791
  %3793 = load i8, i8* %3792, align 1, !invariant.group !3894
  switch i8 %3793, label %invertL1264.L1265_crit_edge [
    i8 0, label %invertpass606.2.loopexit
    i8 1, label %invertL956
  ]

staging:                                          ; preds = %invertL483
  br i1 %.not928.not_unwrap, label %invertL478, label %invertL470
}

after simplification :
; Function Attrs: mustprogress nofree willreturn
define double @preprocess_julia___5621(double %0, double %1) local_unnamed_addr #3 !dbg !15 {
top:
  %2 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %3, align 8, !tbaa !8
  %4 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !16
  fence syncscope("singlethread") seq_cst
  %5 = fdiv double %0, %1, !dbg !16
  ret double %5, !dbg !16
}

; Function Attrs: mustprogress nofree willreturn
define internal double @augmented_julia___5621(double %0, double %1) local_unnamed_addr #3 !dbg !17 {
top:
  %2 = alloca double, align 8
  %3 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %4, align 8, !tbaa !8, !alias.scope !18, !noalias !21
  %5 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !12, !invariant.load !7, !alias.scope !23, !noalias !26
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !28
  fence syncscope("singlethread") seq_cst
  %6 = fdiv double %0, %1, !dbg !28
  store double %6, double* %2, align 8, !dbg !28
  %7 = load double, double* %2, align 8, !dbg !28
  ret double %7, !dbg !28
}

; Function Attrs: mustprogress nofree willreturn
define internal { double } @diffejulia___5621(double %0, double %1, double %differeturn) local_unnamed_addr #3 !dbg !31 {
top:
  %"'de" = alloca double, align 8
  %2 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"'de1" = alloca double, align 8
  %3 = getelementptr double, double* %"'de1", i64 0
  store double 0.000000e+00, double* %3, align 8
  %4 = call {}*** @julia.get_pgcstack() #5
  %5 = fdiv double %0, %1, !dbg !32
  br label %inverttop, !dbg !32

inverttop:                                        ; preds = %top
  store double %differeturn, double* %"'de", align 8
  %6 = load double, double* %"'de", align 8, !dbg !32
  store double 0.000000e+00, double* %"'de", align 8, !dbg !32
  %7 = fdiv fast double %6, %1, !dbg !32
  %8 = fdiv fast double %0, %1, !dbg !32
  %9 = fmul fast double %7, %8, !dbg !32
  %10 = fneg fast double %9, !dbg !32
  %11 = load double, double* %"'de1", align 8, !dbg !32
  %12 = fadd fast double %11, %10, !dbg !32
  store double %12, double* %"'de1", align 8, !dbg !32
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  %13 = load double, double* %"'de1", align 8
  %14 = insertvalue { double } undef, double %13, 0
  ret { double } %14
}

after simplification :
; Function Attrs: mustprogress nofree willreturn
define double @preprocess_julia___5795(double %0, double %1) local_unnamed_addr #3 !dbg !15 {
top:
  %2 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %3, align 8, !tbaa !8
  %4 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !16
  fence syncscope("singlethread") seq_cst
  %5 = fdiv double %0, %1, !dbg !16
  ret double %5, !dbg !16
}

; Function Attrs: mustprogress nofree willreturn
define internal double @augmented_julia___5795(double %0, double %1) local_unnamed_addr #3 !dbg !17 {
top:
  %2 = alloca double, align 8
  %3 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %4, align 8, !tbaa !8, !alias.scope !18, !noalias !21
  %5 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !12, !invariant.load !7, !alias.scope !23, !noalias !26
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !28
  fence syncscope("singlethread") seq_cst
  %6 = fdiv double %0, %1, !dbg !28
  store double %6, double* %2, align 8, !dbg !28
  %7 = load double, double* %2, align 8, !dbg !28
  ret double %7, !dbg !28
}

; Function Attrs: mustprogress nofree willreturn
define internal { double, double } @diffejulia___5795(double %0, double %1, double %differeturn) local_unnamed_addr #3 !dbg !31 {
top:
  %"'de" = alloca double, align 8
  %2 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"'de1" = alloca double, align 8
  %3 = getelementptr double, double* %"'de1", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"'de2" = alloca double, align 8
  %4 = getelementptr double, double* %"'de2", i64 0
  store double 0.000000e+00, double* %4, align 8
  %5 = call {}*** @julia.get_pgcstack() #5
  %6 = fdiv double %0, %1, !dbg !32
  br label %inverttop, !dbg !32

inverttop:                                        ; preds = %top
  store double %differeturn, double* %"'de", align 8
  %7 = load double, double* %"'de", align 8, !dbg !32
  store double 0.000000e+00, double* %"'de", align 8, !dbg !32
  %8 = fdiv fast double %7, %1, !dbg !32
  %9 = load double, double* %"'de1", align 8, !dbg !32
  %10 = fadd fast double %9, %8, !dbg !32
  store double %10, double* %"'de1", align 8, !dbg !32
  %11 = fdiv fast double %7, %1, !dbg !32
  %12 = fdiv fast double %0, %1, !dbg !32
  %13 = fmul fast double %11, %12, !dbg !32
  %14 = fneg fast double %13, !dbg !32
  %15 = load double, double* %"'de2", align 8, !dbg !32
  %16 = fadd fast double %15, %14, !dbg !32
  store double %16, double* %"'de2", align 8, !dbg !32
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  %17 = load double, double* %"'de1", align 8
  %18 = load double, double* %"'de2", align 8
  %19 = insertvalue { double, double } undef, double %17, 0
  %20 = insertvalue { double, double } %19, double %18, 1
  ret { double, double } %20
}

after simplification :
; Function Attrs: mustprogress nosync readnone willreturn
define double @preprocess_julia_cos_5819mustwrap(double %0) local_unnamed_addr #13 {
entry:
  %1 = call double @julia_cos_5819(double %0) #14
  ret double %1
}

; Function Attrs: mustprogress nosync readnone willreturn
define internal double @augmented_julia_cos_5819mustwrap(double %0) local_unnamed_addr #13 {
entry:
  %1 = alloca double, align 8
  %2 = call double @julia_cos_5819(double %0) #14
  store double %2, double* %1, align 8
  %3 = load double, double* %1, align 8
  ret double %3
}

; Function Attrs: mustprogress nosync readnone willreturn
define internal { double } @diffejulia_cos_5819mustwrap(double %0, double %differeturn) local_unnamed_addr #13 {
entry:
  %"'de" = alloca double, align 8
  %1 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %1, align 8
  %"'de1" = alloca double, align 8
  %2 = getelementptr double, double* %"'de1", i64 0
  store double 0.000000e+00, double* %2, align 8
  br label %invertentry

invertentry:                                      ; preds = %entry
  store double %differeturn, double* %"'de", align 8
  %3 = load double, double* %"'de", align 8
  store double 0.000000e+00, double* %"'de", align 8
  %4 = call fast double @llvm.sin.f64(double %0)
  %5 = fneg fast double %4
  %6 = fmul fast double %3, %5
  %7 = load double, double* %"'de1", align 8
  %8 = fadd fast double %7, %6
  store double %8, double* %"'de1", align 8
  %9 = load double, double* %"'de1", align 8
  %10 = insertvalue { double } undef, double %9, 0
  ret { double } %10
}

after simplification :
; Function Attrs: mustprogress nofree willreturn
define double @preprocess_julia___5887(double %0, double %1) local_unnamed_addr #3 !dbg !15 {
top:
  %2 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %3, align 8, !tbaa !8
  %4 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !16
  fence syncscope("singlethread") seq_cst
  %5 = fmul double %0, %1, !dbg !16
  ret double %5, !dbg !16
}

; Function Attrs: mustprogress nofree willreturn
define internal double @augmented_julia___5887(double %0, double %1) local_unnamed_addr #3 !dbg !17 {
top:
  %2 = alloca double, align 8
  %3 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %4, align 8, !tbaa !8, !alias.scope !18, !noalias !21
  %5 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !12, !invariant.load !7, !alias.scope !23, !noalias !26
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !28
  fence syncscope("singlethread") seq_cst
  %6 = fmul double %0, %1, !dbg !28
  store double %6, double* %2, align 8, !dbg !28
  %7 = load double, double* %2, align 8, !dbg !28
  ret double %7, !dbg !28
}

; Function Attrs: mustprogress nofree willreturn
define internal { double } @diffejulia___5887(double %0, double %1, double %differeturn) local_unnamed_addr #3 !dbg !31 {
top:
  %"'de" = alloca double, align 8
  %2 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %"'de1" = alloca double, align 8
  %3 = getelementptr double, double* %"'de1", i64 0
  store double 0.000000e+00, double* %3, align 8
  %4 = call {}*** @julia.get_pgcstack() #5
  br label %inverttop, !dbg !32

inverttop:                                        ; preds = %top
  store double %differeturn, double* %"'de", align 8
  %5 = load double, double* %"'de", align 8, !dbg !32
  store double 0.000000e+00, double* %"'de", align 8, !dbg !32
  %6 = fmul fast double %5, %0, !dbg !32
  %7 = load double, double* %"'de1", align 8, !dbg !32
  %8 = fadd fast double %7, %6, !dbg !32
  store double %8, double* %"'de1", align 8, !dbg !32
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  %9 = load double, double* %"'de1", align 8
  %10 = insertvalue { double } undef, double %9, 0
  ret { double } %10
}

after simplification :
; Function Attrs: mustprogress willreturn
define noalias nonnull {} addrspace(10)* @preprocess_julia_vcat_5919(double %0, double %1, double %2, double %3, double %4, double %5) local_unnamed_addr #4 !dbg !46 {
pass.5:
  %6 = call {}*** @julia.get_pgcstack() #5
  %ptls_field13 = getelementptr inbounds {}**, {}*** %6, i64 2
  %7 = bitcast {}*** %ptls_field13 to i64***
  %ptls_load1415 = load i64**, i64*** %7, align 8, !tbaa !8
  %8 = getelementptr inbounds i64*, i64** %ptls_load1415, i64 2
  %safepoint = load i64*, i64** %8, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #5, !dbg !47
  fence syncscope("singlethread") seq_cst
  %9 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 6) #6, !dbg !48
  %10 = bitcast {} addrspace(10)* %9 to double addrspace(13)* addrspace(10)*
  %11 = addrspacecast double addrspace(13)* addrspace(10)* %10 to double addrspace(13)* addrspace(11)*
  %arrayptr16 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %11, align 8, !tbaa !26, !alias.scope !54, !noalias !34, !nonnull !7
  store double %0, double addrspace(13)* %arrayptr16, align 8, !dbg !57, !tbaa !41, !alias.scope !44, !noalias !58
  %memcpy_refined_dst.1 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 1, !dbg !57
  store double %1, double addrspace(13)* %memcpy_refined_dst.1, align 8, !dbg !57, !tbaa !41, !alias.scope !44, !noalias !58
  %memcpy_refined_dst.2 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 2, !dbg !57
  store double %2, double addrspace(13)* %memcpy_refined_dst.2, align 8, !dbg !57, !tbaa !41, !alias.scope !44, !noalias !58
  %memcpy_refined_dst.3 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 3, !dbg !57
  store double %3, double addrspace(13)* %memcpy_refined_dst.3, align 8, !dbg !57, !tbaa !41, !alias.scope !44, !noalias !58
  %memcpy_refined_dst.4 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 4, !dbg !57
  store double %4, double addrspace(13)* %memcpy_refined_dst.4, align 8, !dbg !57, !tbaa !41, !alias.scope !44, !noalias !58
  %memcpy_refined_dst.5 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 5, !dbg !57
  store double %5, double addrspace(13)* %memcpy_refined_dst.5, align 8, !dbg !57, !tbaa !41, !alias.scope !44, !noalias !58
  ret {} addrspace(10)* %9, !dbg !47
}

; Function Attrs: mustprogress willreturn
define internal { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_vcat_5919(double %0, double %1, double %2, double %3, double %4, double %5) local_unnamed_addr #4 !dbg !59 {
pass.5:
  %6 = alloca { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %7 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %6, i32 0, i32 0
  %8 = getelementptr {} addrspace(10)*, {} addrspace(10)** %7, i64 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = call {}*** @julia.get_pgcstack() #6
  %ptls_field13 = getelementptr inbounds {}**, {}*** %9, i64 2
  %10 = bitcast {}*** %ptls_field13 to i64***
  %ptls_load1415 = load i64**, i64*** %10, align 8, !tbaa !8, !alias.scope !60, !noalias !63
  %11 = getelementptr inbounds i64*, i64** %ptls_load1415, i64 2
  %safepoint = load i64*, i64** %11, align 8, !tbaa !12, !invariant.load !7, !alias.scope !65, !noalias !68
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #6, !dbg !70
  fence syncscope("singlethread") seq_cst
  %12 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 6), !dbg !71
  store {} addrspace(10)* %12, {} addrspace(10)** %7, align 8, !dbg !71
  %13 = bitcast {} addrspace(10)* %12 to i8 addrspace(13)* addrspace(10)*, !dbg !71
  %14 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %13, align 8, !dbg !71
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %14, i8 0, i64 48, i1 false), !dbg !71
  %15 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 noundef 6) #7, !dbg !71
  %"'ipc" = bitcast {} addrspace(10)* %12 to double addrspace(13)* addrspace(10)*
  %16 = bitcast {} addrspace(10)* %15 to double addrspace(13)* addrspace(10)*
  %"'ipc1" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %17 = addrspacecast double addrspace(13)* addrspace(10)* %16 to double addrspace(13)* addrspace(11)*
  %"arrayptr16'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc1", align 8, !tbaa !26, !alias.scope !77, !noalias !82, !nonnull !7
  %arrayptr16 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %17, align 8, !tbaa !26, !alias.scope !84, !noalias !85, !nonnull !7
  store double %0, double addrspace(13)* %arrayptr16, align 8, !dbg !86, !tbaa !41, !alias.scope !87, !noalias !90
  %memcpy_refined_dst.1 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 1, !dbg !86
  store double %1, double addrspace(13)* %memcpy_refined_dst.1, align 8, !dbg !86, !tbaa !41, !alias.scope !87, !noalias !90
  %memcpy_refined_dst.2 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 2, !dbg !86
  store double %2, double addrspace(13)* %memcpy_refined_dst.2, align 8, !dbg !86, !tbaa !41, !alias.scope !87, !noalias !90
  %memcpy_refined_dst.3 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 3, !dbg !86
  store double %3, double addrspace(13)* %memcpy_refined_dst.3, align 8, !dbg !86, !tbaa !41, !alias.scope !87, !noalias !90
  %memcpy_refined_dst.4 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 4, !dbg !86
  store double %4, double addrspace(13)* %memcpy_refined_dst.4, align 8, !dbg !86, !tbaa !41, !alias.scope !87, !noalias !90
  %memcpy_refined_dst.5 = getelementptr inbounds double, double addrspace(13)* %arrayptr16, i64 5, !dbg !86
  store double %5, double addrspace(13)* %memcpy_refined_dst.5, align 8, !dbg !86, !tbaa !41, !alias.scope !87, !noalias !90
  %18 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %6, i32 0, i32 1, !dbg !70
  store {} addrspace(10)* %15, {} addrspace(10)** %18, align 8, !dbg !70
  %19 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %6, i32 0, i32 2, !dbg !70
  store {} addrspace(10)* %12, {} addrspace(10)** %19, align 8, !dbg !70
  %20 = load { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* }* %6, align 8, !dbg !70
  ret { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)* } %20, !dbg !70
}

; Function Attrs: mustprogress willreturn
define internal { double } @diffejulia_vcat_5919(double %0, double %1, double %2, double %3, double %4, double %5, {} addrspace(10)* %6) local_unnamed_addr #4 !dbg !94 {
pass.5:
  %"'de" = alloca double, align 8
  %7 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %8 = call {}*** @julia.get_pgcstack() #7
  %"'ipc" = bitcast {} addrspace(10)* %6 to double addrspace(13)* addrspace(10)*
  %"'ipc1" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr16'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc1", align 8, !tbaa !26, !alias.scope !95, !noalias !98, !nonnull !7
  %"memcpy_refined_dst.1'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr16'ipl", i64 1, !dbg !100
  %"memcpy_refined_dst.2'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr16'ipl", i64 2, !dbg !100
  %"memcpy_refined_dst.3'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr16'ipl", i64 3, !dbg !100
  %"memcpy_refined_dst.4'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr16'ipl", i64 4, !dbg !100
  %"memcpy_refined_dst.5'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr16'ipl", i64 5, !dbg !100
  br label %invertpass.5, !dbg !101

invertpass.5:                                     ; preds = %pass.5
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst.5'ipg", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst.4'ipg", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst.3'ipg", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst.2'ipg", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  store double 0.000000e+00, double addrspace(13)* %"memcpy_refined_dst.1'ipg", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  %9 = load double, double addrspace(13)* %"arrayptr16'ipl", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  store double 0.000000e+00, double addrspace(13)* %"arrayptr16'ipl", align 8, !dbg !100, !tbaa !41, !alias.scope !102, !noalias !105
  %10 = load double, double* %"'de", align 8, !dbg !100
  %11 = fadd fast double %10, %9, !dbg !100
  store double %11, double* %"'de", align 8, !dbg !100
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  %12 = load double, double* %"'de", align 8
  %13 = insertvalue { double } undef, double %12, 0
  ret { double } %13
}

┌ Warning: Using fallback BLAS replacements, performance may be degraded
└ @ Enzyme.Compiler ~/.julia/packages/GPUCompiler/U36Ed/src/utils.jl:59
after simplification :
; Function Attrs: mustprogress willreturn
define noundef nonnull align 16 dereferenceable(40) {} addrspace(10)* @preprocess_julia___6013({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1) local_unnamed_addr #20 !dbg !194 {
top:
  %2 = call {}*** @julia.get_pgcstack() #21
  %ptls_field6 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field6 to i64***
  %ptls_load78 = load i64**, i64*** %3, align 8, !tbaa !29
  %4 = getelementptr inbounds i64*, i64** %ptls_load78, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !33, !invariant.load !28
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #21, !dbg !195
  fence syncscope("singlethread") seq_cst
  %5 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*, !dbg !196
  %arraysize_ptr9 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %5, i64 3, !dbg !196
  %6 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr9 to i64 addrspace(10)*, !dbg !196
  %7 = addrspacecast i64 addrspace(10)* %6 to i64 addrspace(11)*, !dbg !196
  %arraysize = load i64, i64 addrspace(11)* %7, align 8, !dbg !196, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !41, !noalias !44
  %8 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize) #22, !dbg !198
  call fastcc void @julia_gemv__6016({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %8, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1) #21, !dbg !202
  ret {} addrspace(10)* %8, !dbg !197
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia_gemv__6016({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2) unnamed_addr #21 !dbg !216 {
top:
  %3 = call {}*** @julia.get_pgcstack() #22
  %ptls_field159 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field159 to i64***
  %ptls_load160161 = load i64**, i64*** %4, align 8, !tbaa !29
  %5 = getelementptr inbounds i64*, i64** %ptls_load160161, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !33, !invariant.load !28
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #22, !dbg !217
  fence syncscope("singlethread") seq_cst
  %6 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !218
  %arraysize_ptr228 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %6, i64 3, !dbg !218
  %7 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr228 to i64 addrspace(10)*, !dbg !218
  %8 = addrspacecast i64 addrspace(10)* %7 to i64 addrspace(11)*, !dbg !218
  %arraysize = load i64, i64 addrspace(11)* %8, align 8, !dbg !218, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !41, !noalias !44
  %arraysize_ptr11227 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %6, i64 4, !dbg !218
  %9 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr11227 to i64 addrspace(10)*, !dbg !218
  %10 = addrspacecast i64 addrspace(10)* %9 to i64 addrspace(11)*, !dbg !218
  %arraysize12 = load i64, i64 addrspace(11)* %10, align 16, !dbg !218, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !41, !noalias !44
  %11 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !221
  %12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !221
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %12, i64 0, i32 1, !dbg !221
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !221, !tbaa !73, !range !40, !alias.scope !76, !noalias !77
  %.not163 = icmp eq i64 %arraysize12, %arraylen, !dbg !223
  br i1 %.not163, label %L28, label %L22, !dbg !222

L22:                                              ; preds = %top
  %current_task17164 = getelementptr inbounds {}**, {}*** %3, i64 -14, !dbg !225
  %current_task17 = bitcast {}*** %current_task17164 to {}**, !dbg !225
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #23, !dbg !225
  %13 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !225
  %14 = addrspacecast {} addrspace(10)* addrspace(10)* %13 to {} addrspace(10)* addrspace(11)*, !dbg !225
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %14, align 8, !dbg !225, !tbaa !88, !alias.scope !92, !noalias !226
  %15 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %14, i64 1, !dbg !225
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %15, align 8, !dbg !225, !tbaa !88, !alias.scope !92, !noalias !226
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #23, !dbg !225
  %16 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !225
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %16, i64 0, i32 0, !dbg !225
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249126016 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !225, !tbaa !96, !alias.scope !92, !noalias !226
  %.repack166 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %16, i64 0, i32 1, !dbg !225
  store i64 %arraysize12, i64 addrspace(10)* %.repack166, align 8, !dbg !225, !tbaa !96, !alias.scope !92, !noalias !226
  %.repack168 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %16, i64 0, i32 2, !dbg !225
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249125968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack168, align 8, !dbg !225, !tbaa !96, !alias.scope !92, !noalias !226
  %.repack170 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %16, i64 0, i32 3, !dbg !225
  store i64 %arraylen, i64 addrspace(10)* %.repack170, align 8, !dbg !225, !tbaa !96, !alias.scope !92, !noalias !226
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %14 release, align 8, !dbg !225, !tbaa !88, !alias.scope !92, !noalias !226
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct, {} addrspace(10)* nofree nonnull %box) #24, !dbg !225
  %17 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !225
  %18 = addrspacecast i8 addrspace(10)* %17 to i8 addrspace(11)*, !dbg !225
  %19 = getelementptr inbounds i8, i8 addrspace(11)* %18, i64 8, !dbg !225
  %20 = bitcast i8 addrspace(11)* %19 to {} addrspace(10)* addrspace(11)*, !dbg !225
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %20 release, align 8, !dbg !225, !tbaa !88, !alias.scope !92, !noalias !226
  %box20 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #23, !dbg !222
  %21 = bitcast {} addrspace(10)* %box20 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !222
  %22 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %21, i64 0, i64 0, !dbg !222
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %22, align 8, !dbg !222, !tbaa !96, !alias.scope !92, !noalias !226
  %23 = addrspacecast {} addrspace(10)* %box20 to {} addrspace(12)*, !dbg !222
  call void @ijl_throw({} addrspace(12)* %23) #25, !dbg !222
  unreachable, !dbg !222

L28:                                              ; preds = %top
  %24 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !229
  %25 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %24 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !229
  %arraylen_ptr21 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %25, i64 0, i32 1, !dbg !229
  %arraylen22 = load i64, i64 addrspace(11)* %arraylen_ptr21, align 8, !dbg !229, !tbaa !73, !range !40, !alias.scope !76, !noalias !77
  %.not173 = icmp eq i64 %arraysize, %arraylen22, !dbg !231
  br i1 %.not173, label %L38, label %L32, !dbg !230

L32:                                              ; preds = %L28
  %current_task25174 = getelementptr inbounds {}**, {}*** %3, i64 -14, !dbg !233
  %current_task25 = bitcast {}*** %current_task25174 to {}**, !dbg !233
  %newstruct26 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #23, !dbg !233
  %26 = bitcast {} addrspace(10)* %newstruct26 to {} addrspace(10)* addrspace(10)*, !dbg !233
  %27 = addrspacecast {} addrspace(10)* addrspace(10)* %26 to {} addrspace(10)* addrspace(11)*, !dbg !233
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %27, align 8, !dbg !233, !tbaa !88, !alias.scope !92, !noalias !226
  %28 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %27, i64 1, !dbg !233
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %28, align 8, !dbg !233, !tbaa !88, !alias.scope !92, !noalias !226
  %box28 = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #23, !dbg !233
  %29 = bitcast {} addrspace(10)* %box28 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !233
  %.repack176 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %29, i64 0, i32 0, !dbg !233
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249125920 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack176, align 8, !dbg !233, !tbaa !96, !alias.scope !92, !noalias !226
  %.repack177 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %29, i64 0, i32 1, !dbg !233
  store i64 %arraysize, i64 addrspace(10)* %.repack177, align 8, !dbg !233, !tbaa !96, !alias.scope !92, !noalias !226
  %.repack179 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %29, i64 0, i32 2, !dbg !233
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249125872 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack179, align 8, !dbg !233, !tbaa !96, !alias.scope !92, !noalias !226
  %.repack181 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %29, i64 0, i32 3, !dbg !233
  store i64 %arraylen22, i64 addrspace(10)* %.repack181, align 8, !dbg !233, !tbaa !96, !alias.scope !92, !noalias !226
  store atomic {} addrspace(10)* %box28, {} addrspace(10)* addrspace(11)* %27 release, align 8, !dbg !233, !tbaa !88, !alias.scope !92, !noalias !226
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct26, {} addrspace(10)* nofree nonnull %box28) #24, !dbg !233
  %30 = bitcast {} addrspace(10)* %newstruct26 to i8 addrspace(10)*, !dbg !233
  %31 = addrspacecast i8 addrspace(10)* %30 to i8 addrspace(11)*, !dbg !233
  %32 = getelementptr inbounds i8, i8 addrspace(11)* %31, i64 8, !dbg !233
  %33 = bitcast i8 addrspace(11)* %32 to {} addrspace(10)* addrspace(11)*, !dbg !233
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %33 release, align 8, !dbg !233, !tbaa !88, !alias.scope !92, !noalias !226
  %box30 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #23, !dbg !230
  %34 = bitcast {} addrspace(10)* %box30 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !230
  %35 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %34, i64 0, i64 0, !dbg !230
  store {} addrspace(10)* %newstruct26, {} addrspace(10)* addrspace(10)* %35, align 8, !dbg !230, !tbaa !96, !alias.scope !92, !noalias !226
  %36 = addrspacecast {} addrspace(10)* %box30 to {} addrspace(12)*, !dbg !230
  call void @ijl_throw({} addrspace(12)* %36) #25, !dbg !230
  unreachable, !dbg !230

L38:                                              ; preds = %L28
  %.not184 = icmp eq i64 %arraysize, 0, !dbg !234
  br i1 %.not184, label %common.ret, label %L41, !dbg !235

common.ret:                                       ; preds = %L152.critedge, %L49.L61_crit_edge, %L38
  ret void, !dbg !236

L41:                                              ; preds = %L38
  %.not185 = icmp eq i64 %arraysize12, 0, !dbg !237
  br i1 %.not185, label %L49.L61_crit_edge, label %L152.critedge, !dbg !238

L49.L61_crit_edge:                                ; preds = %L41
  %37 = bitcast {} addrspace(10)* %0 to i8 addrspace(13)* addrspace(10)*, !dbg !239
  %38 = addrspacecast i8 addrspace(13)* addrspace(10)* %37 to i8 addrspace(13)* addrspace(11)*, !dbg !239
  %arrayptr189.pre257 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %38, align 16, !dbg !239, !tbaa !106, !alias.scope !242, !noalias !77
  %39 = shl nuw i64 %arraysize, 3, !dbg !243
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr189.pre257, i8 noundef 0, i64 %39, i1 noundef false) #22, !dbg !239, !tbaa !188, !alias.scope !92, !noalias !226
  br label %common.ret, !dbg !236

L152.critedge:                                    ; preds = %L41
  call fastcc void @julia_gemv__6057({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0) #22, !dbg !244
  br label %common.ret
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia_gemv__6057({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2) unnamed_addr #22 !dbg !301 {
top:
  %3 = call {}*** @julia.get_pgcstack() #24
  %ptls_field134 = getelementptr inbounds {}**, {}*** %3, i64 2
  %4 = bitcast {}*** %ptls_field134 to i64***
  %ptls_load135136 = load i64**, i64*** %4, align 8, !tbaa !29
  %5 = getelementptr inbounds i64*, i64** %ptls_load135136, i64 2
  %safepoint = load i64*, i64** %5, align 8, !tbaa !33, !invariant.load !28
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #24, !dbg !302
  fence syncscope("singlethread") seq_cst
  %6 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*, !dbg !303
  %arraysize_ptr137 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %6, i64 3, !dbg !303
  %7 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr137 to i64 addrspace(10)*, !dbg !303
  %8 = addrspacecast i64 addrspace(10)* %7 to i64 addrspace(11)*, !dbg !303
  %arraysize = load i64, i64 addrspace(11)* %8, align 8, !dbg !303, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !41, !noalias !44
  %arraysize_ptr2138 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %6, i64 4, !dbg !303
  %9 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr2138 to i64 addrspace(10)*, !dbg !303
  %10 = addrspacecast i64 addrspace(10)* %9 to i64 addrspace(11)*, !dbg !303
  %arraysize3 = load i64, i64 addrspace(11)* %10, align 16, !dbg !303, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !41, !noalias !44
  %11 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !305
  %12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !305
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %12, i64 0, i32 1, !dbg !305
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !305, !tbaa !73, !range !40, !alias.scope !76, !noalias !77
  %13 = icmp ne i64 %arraylen, %arraysize3, !dbg !307
  %14 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !306
  %15 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %14 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !306
  %arraylen_ptr131 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %15, i64 0, i32 1, !dbg !306
  %arraylen132 = load i64, i64 addrspace(11)* %arraylen_ptr131, align 8, !dbg !306
  %16 = icmp ne i64 %arraylen132, %arraysize, !dbg !306
  %value_phi.in = select i1 %13, i1 true, i1 %16, !dbg !306
  br i1 %value_phi.in, label %L17, label %L69, !dbg !306

L17:                                              ; preds = %top
  %current_task12144 = getelementptr inbounds {}**, {}*** %3, i64 -14, !dbg !309
  %current_task12 = bitcast {}*** %current_task12144 to {}**, !dbg !309
  %newstruct13 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #25, !dbg !309
  %17 = bitcast {} addrspace(10)* %newstruct13 to {} addrspace(10)* addrspace(10)*, !dbg !309
  %18 = addrspacecast {} addrspace(10)* addrspace(10)* %17 to {} addrspace(10)* addrspace(11)*, !dbg !309
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %18, align 8, !dbg !309, !tbaa !88, !alias.scope !92, !noalias !311
  %19 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %18, i64 1, !dbg !309
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %19, align 8, !dbg !309, !tbaa !88, !alias.scope !92, !noalias !311
  %box = call noalias nonnull dereferenceable(56) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 noundef 56, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4374493072 to {}*) to {} addrspace(10)*)) #25, !dbg !309
  %20 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !309
  %.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 0, !dbg !309
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513488 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  %.repack146.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 1, i64 0, !dbg !309
  store i64 %arraysize, i64 addrspace(10)* %.repack146.repack, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  %.repack146.repack156 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 1, i64 1, !dbg !309
  store i64 %arraysize3, i64 addrspace(10)* %.repack146.repack156, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  %.repack148 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 2, !dbg !309
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack148, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  %.repack150 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 3, !dbg !309
  store i64 %arraylen, i64 addrspace(10)* %.repack150, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  %.repack152 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 4, !dbg !309
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513408 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack152, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  %.repack154 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %20, i64 0, i32 5, !dbg !309
  store i64 %arraylen132, i64 addrspace(10)* %.repack154, align 8, !dbg !309, !tbaa !96, !alias.scope !92, !noalias !311
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %18 release, align 8, !dbg !309, !tbaa !88, !alias.scope !92, !noalias !311
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct13, {} addrspace(10)* nofree nonnull %box) #26, !dbg !309
  %21 = bitcast {} addrspace(10)* %newstruct13 to i8 addrspace(10)*, !dbg !309
  %22 = addrspacecast i8 addrspace(10)* %21 to i8 addrspace(11)*, !dbg !309
  %23 = getelementptr inbounds i8, i8 addrspace(11)* %22, i64 8, !dbg !309
  %24 = bitcast i8 addrspace(11)* %23 to {} addrspace(10)* addrspace(11)*, !dbg !309
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %24 release, align 8, !dbg !309, !tbaa !88, !alias.scope !92, !noalias !311
  %box16 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #25, !dbg !310
  %25 = bitcast {} addrspace(10)* %box16 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !310
  %26 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %25, i64 0, i64 0, !dbg !310
  store {} addrspace(10)* %newstruct13, {} addrspace(10)* addrspace(10)* %26, align 8, !dbg !310, !tbaa !96, !alias.scope !92, !noalias !311
  %27 = addrspacecast {} addrspace(10)* %box16 to {} addrspace(12)*, !dbg !310
  call void @ijl_throw({} addrspace(12)* %27) #27, !dbg !310
  unreachable, !dbg !310

L69:                                              ; preds = %top
  %28 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !314
  %29 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %28) #28, !dbg !314
  %30 = bitcast {}* %29 to double**, !dbg !314
  %arrayptr215 = load double*, double** %30, align 8, !dbg !314, !tbaa !106, !alias.scope !76, !noalias !77, !nonnull !28
  %31 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !318
  %32 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %31) #28, !dbg !318
  %33 = bitcast {}* %32 to double**, !dbg !318
  %arrayptr50216 = load double*, double** %33, align 8, !dbg !318, !tbaa !106, !alias.scope !76, !noalias !77, !nonnull !28
  %arrayptr50216274 = bitcast double* %arrayptr50216 to i8*, !dbg !322
  %34 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !322
  %35 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %34) #28, !dbg !322
  %36 = bitcast {}* %35 to double**, !dbg !322
  %arrayptr52218 = load double*, double** %36, align 8, !dbg !322, !tbaa !33, !invariant.load !28, !alias.scope !41, !noalias !44, !nonnull !28
  %.not203 = icmp eq i64 %arraysize, 0, !dbg !325
  %37 = select i1 %.not203, i64 1, i64 %arraysize, !dbg !329
  %38 = call i64 @llvm.smax.i64(i64 %arraysize, i64 %37) #24, !dbg !329
  %39 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %0, {} addrspace(10)* nonnull %1, {} addrspace(10)* nonnull %2) #24, !dbg !330
  %40 = trunc i64 %arraysize to i32, !dbg !330
  %41 = trunc i64 %arraysize3 to i32, !dbg !330
  %42 = trunc i64 %38 to i32, !dbg !330
  %43 = icmp sgt i32 %40, -1, !dbg !330
  %44 = icmp sgt i32 %41, -1, !dbg !330
  %45 = call i32 @llvm.smax.i32(i32 %40, i32 noundef 1) #24, !dbg !330
  %46 = icmp sle i32 %45, %42, !dbg !330
  %47 = select i1 %46, i1 %44, i1 false, !dbg !330
  %48 = select i1 %47, i1 %43, i1 false, !dbg !330
  call void @llvm.assume(i1 %48), !dbg !330
  %49 = icmp eq i32 %40, 0, !dbg !330
  %50 = icmp eq i32 %41, 0, !dbg !330
  %51 = or i1 %49, %50, !dbg !330
  br i1 %51, label %dgemv_64_.exit, label %52, !dbg !330

52:                                               ; preds = %L69
  %53 = icmp sgt i32 %40, 0, !dbg !330
  br i1 %53, label %.preheader, label %.loopexit273, !dbg !330

.preheader:                                       ; preds = %52
  %54 = shl i64 %arraysize, 3, !dbg !330
  %55 = and i64 %54, 34359738360, !dbg !330
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %arrayptr50216274, i8 noundef 0, i64 %55, i1 noundef false) #24, !dbg !330, !tbaa !139, !noalias !331
  br label %.loopexit273, !dbg !330

.loopexit273:                                     ; preds = %52, %.preheader
  %56 = icmp sgt i32 %41, 0, !dbg !330
  br i1 %56, label %57, label %dgemv_64_.exit, !dbg !330

57:                                               ; preds = %.loopexit273
  %58 = icmp sgt i32 %40, 0, !dbg !330
  %sext = shl i64 %38, 32, !dbg !330
  %59 = ashr exact i64 %sext, 32, !dbg !330
  %60 = and i64 %arraysize3, 4294967295, !dbg !330
  %61 = and i64 %arraysize, 4294967295, !dbg !330
  br label %62, !dbg !330

62:                                               ; preds = %.loopexit269, %57
  %iv = phi i64 [ %iv.next, %.loopexit269 ], [ 0, %57 ], !dbg !330
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !330
  %63 = getelementptr inbounds double, double* %arrayptr215, i64 %iv, !dbg !330
  %64 = load double, double* %63, align 8, !dbg !330, !tbaa !139
  br i1 %58, label %65, label %.loopexit269, !dbg !330

65:                                               ; preds = %62
  %66 = mul nsw i64 %iv, %59, !dbg !330
  br label %67, !dbg !330

67:                                               ; preds = %67, %65
  %iv1 = phi i64 [ %iv.next2, %67 ], [ 0, %65 ], !dbg !330
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !330
  %68 = add nsw i64 %iv1, %66, !dbg !330
  %69 = getelementptr inbounds double, double* %arrayptr52218, i64 %68, !dbg !330
  %70 = load double, double* %69, align 8, !dbg !330, !tbaa !139
  %71 = getelementptr inbounds double, double* %arrayptr50216, i64 %iv1, !dbg !330
  %72 = load double, double* %71, align 8, !dbg !330, !tbaa !139
  %73 = call double @llvm.fmuladd.f64(double %64, double %70, double %72) #24, !dbg !330
  store double %73, double* %71, align 8, !dbg !330, !tbaa !139, !noalias !331
  %74 = icmp eq i64 %iv.next2, %61, !dbg !330
  br i1 %74, label %.loopexit269.loopexit, label %67, !dbg !330, !llvm.loop !332

.loopexit269.loopexit:                            ; preds = %67
  br label %.loopexit269, !dbg !330

.loopexit269:                                     ; preds = %.loopexit269.loopexit, %62
  %75 = icmp eq i64 %iv.next, %60, !dbg !330
  br i1 %75, label %dgemv_64_.exit.loopexit, label %62, !dbg !330, !llvm.loop !333

dgemv_64_.exit.loopexit:                          ; preds = %.loopexit269
  br label %dgemv_64_.exit, !dbg !330

dgemv_64_.exit:                                   ; preds = %dgemv_64_.exit.loopexit, %.loopexit273, %L69
  call void @llvm.julia.gc_preserve_end(token %39) #24, !dbg !330
  ret void, !dbg !334
}

; Function Attrs: mustprogress willreturn
define internal fastcc { double*, double*, double*, i64, i64, double*, double* } @augmented_julia_gemv__6057({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") unnamed_addr #22 !dbg !335 {
top:
  %3 = alloca { double*, double*, double*, i64, i64, double*, double* }, align 8
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %_cache = alloca double*, align 8
  %_cache10 = alloca double*, align 8
  %4 = call {}*** @julia.get_pgcstack() #24
  %ptls_field134 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field134 to i64***
  %ptls_load135136 = load i64**, i64*** %5, align 8, !tbaa !29, !alias.scope !336, !noalias !339
  %6 = getelementptr inbounds i64*, i64** %ptls_load135136, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !33, !invariant.load !28, !alias.scope !341, !noalias !344
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #24, !dbg !346
  fence syncscope("singlethread") seq_cst
  %7 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*, !dbg !347
  %arraysize_ptr137 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 3, !dbg !347
  %8 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr137 to i64 addrspace(10)*, !dbg !347
  %9 = addrspacecast i64 addrspace(10)* %8 to i64 addrspace(11)*, !dbg !347
  %arraysize = load i64, i64 addrspace(11)* %9, align 8, !dbg !347, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !349, !noalias !352
  %10 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 3, !dbg !347
  store i64 %arraysize, i64* %10, align 8, !dbg !347
  %arraysize_ptr2138 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 4, !dbg !347
  %11 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr2138 to i64 addrspace(10)*, !dbg !347
  %12 = addrspacecast i64 addrspace(10)* %11 to i64 addrspace(11)*, !dbg !347
  %arraysize3 = load i64, i64 addrspace(11)* %12, align 16, !dbg !347, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !349, !noalias !352
  %13 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 4, !dbg !354
  store i64 %arraysize3, i64* %13, align 8, !dbg !354
  %14 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !354
  %15 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %14 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !354
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %15, i64 0, i32 1, !dbg !354
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !354, !tbaa !73, !range !40, !alias.scope !356, !noalias !359
  %16 = icmp ne i64 %arraylen, %arraysize3, !dbg !361
  %17 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !355
  %18 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !355
  %arraylen_ptr131 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %18, i64 0, i32 1, !dbg !355
  %arraylen132 = load i64, i64 addrspace(11)* %arraylen_ptr131, align 8, !dbg !355, !alias.scope !363, !noalias !366
  %19 = icmp ne i64 %arraylen132, %arraysize, !dbg !355
  %value_phi.in = select i1 %16, i1 true, i1 %19, !dbg !355
  br i1 %value_phi.in, label %L17, label %L69, !dbg !355

L17:                                              ; preds = %top
  %current_task12144 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !368
  %current_task12 = bitcast {}*** %current_task12144 to {}**, !dbg !368
  %newstruct13 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #25, !dbg !368
  %20 = bitcast {} addrspace(10)* %newstruct13 to {} addrspace(10)* addrspace(10)*, !dbg !368
  %21 = addrspacecast {} addrspace(10)* addrspace(10)* %20 to {} addrspace(10)* addrspace(11)*, !dbg !368
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %21, align 8, !dbg !368, !tbaa !88, !alias.scope !92, !noalias !370
  %22 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %21, i64 1, !dbg !368
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %22, align 8, !dbg !368, !tbaa !88, !alias.scope !92, !noalias !370
  %box = call noalias nonnull dereferenceable(56) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 noundef 56, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 4374493072 to {}*) to {} addrspace(10)*)) #25, !dbg !368
  %23 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !368
  %.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 0, !dbg !368
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513488 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  %.repack146.repack = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 1, i64 0, !dbg !368
  store i64 %arraysize, i64 addrspace(10)* %.repack146.repack, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  %.repack146.repack156 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 1, i64 1, !dbg !368
  store i64 %arraysize3, i64 addrspace(10)* %.repack146.repack156, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  %.repack148 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 2, !dbg !368
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack148, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  %.repack150 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 3, !dbg !368
  store i64 %arraylen, i64 addrspace(10)* %.repack150, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  %.repack152 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 4, !dbg !368
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5269513408 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack152, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  %.repack154 = getelementptr inbounds { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, [2 x i64], {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %23, i64 0, i32 5, !dbg !368
  store i64 %arraylen132, i64 addrspace(10)* %.repack154, align 8, !dbg !368, !tbaa !96, !alias.scope !92, !noalias !370
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %21 release, align 8, !dbg !368, !tbaa !88, !alias.scope !92, !noalias !370
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct13, {} addrspace(10)* nofree nonnull %box) #26, !dbg !368
  %24 = bitcast {} addrspace(10)* %newstruct13 to i8 addrspace(10)*, !dbg !368
  %25 = addrspacecast i8 addrspace(10)* %24 to i8 addrspace(11)*, !dbg !368
  %26 = getelementptr inbounds i8, i8 addrspace(11)* %25, i64 8, !dbg !368
  %27 = bitcast i8 addrspace(11)* %26 to {} addrspace(10)* addrspace(11)*, !dbg !368
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %27 release, align 8, !dbg !368, !tbaa !88, !alias.scope !92, !noalias !370
  %box16 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task12, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #25, !dbg !369
  %28 = bitcast {} addrspace(10)* %box16 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !369
  %29 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %28, i64 0, i64 0, !dbg !369
  store {} addrspace(10)* %newstruct13, {} addrspace(10)* addrspace(10)* %29, align 8, !dbg !369, !tbaa !96, !alias.scope !92, !noalias !370
  %30 = addrspacecast {} addrspace(10)* %box16 to {} addrspace(12)*, !dbg !369
  call void @ijl_throw({} addrspace(12)* %30) #27, !dbg !369
  unreachable, !dbg !369

L69:                                              ; preds = %top
  %"'ipc9" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !373
  %31 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !373
  %32 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc9"), !dbg !373
  %33 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %31) #28, !dbg !373
  %"'ipc8" = bitcast {}* %32 to double**, !dbg !373
  %34 = bitcast {}* %33 to double**, !dbg !373
  %"arrayptr215'ipl" = load double*, double** %"'ipc8", align 8, !dbg !373, !tbaa !106, !alias.scope !377, !noalias !378, !nonnull !28
  %35 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 2, !dbg !373
  store double* %"arrayptr215'ipl", double** %35, align 8, !dbg !373
  %arrayptr215 = load double*, double** %34, align 8, !dbg !373, !tbaa !106, !alias.scope !356, !noalias !359, !nonnull !28
  %"'ipc7" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !379
  %36 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !379
  %37 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc7"), !dbg !379
  %38 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %36) #28, !dbg !379
  %"'ipc6" = bitcast {}* %37 to double**, !dbg !379
  %39 = bitcast {}* %38 to double**, !dbg !379
  %"arrayptr50216'ipl" = load double*, double** %"'ipc6", align 8, !dbg !379, !tbaa !106, !alias.scope !383, !noalias !384, !nonnull !28
  %40 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 1, !dbg !379
  store double* %"arrayptr50216'ipl", double** %40, align 8, !dbg !379
  %arrayptr50216 = load double*, double** %39, align 8, !dbg !379, !tbaa !106, !alias.scope !385, !noalias !386, !nonnull !28
  %"arrayptr50216274'ipc" = bitcast double* %"arrayptr50216'ipl" to i8*, !dbg !387
  %arrayptr50216274 = bitcast double* %arrayptr50216 to i8*, !dbg !387
  %"'ipc5" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !387
  %41 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !387
  %42 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc5"), !dbg !387
  %43 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %41) #28, !dbg !387
  %"'ipc" = bitcast {}* %42 to double**, !dbg !387
  %44 = bitcast {}* %43 to double**, !dbg !387
  %"arrayptr52218'ipl" = load double*, double** %"'ipc", align 8, !dbg !387, !tbaa !33, !alias.scope !390, !noalias !391, !nonnull !28
  %45 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 0, !dbg !387
  store double* %"arrayptr52218'ipl", double** %45, align 8, !dbg !387
  %arrayptr52218 = load double*, double** %44, align 8, !dbg !387, !tbaa !33, !invariant.load !28, !alias.scope !349, !noalias !352, !nonnull !28
  %.not203 = icmp eq i64 %arraysize, 0, !dbg !392
  %46 = select i1 %.not203, i64 1, i64 %arraysize, !dbg !396
  %47 = call i64 @llvm.smax.i64(i64 %arraysize, i64 %46) #24, !dbg !396
  %48 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'", {} addrspace(10)* %1, {} addrspace(10)* %"'1", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !397
  %49 = trunc i64 %arraysize to i32, !dbg !397
  %50 = trunc i64 %arraysize3 to i32, !dbg !397
  %51 = trunc i64 %47 to i32, !dbg !397
  %52 = icmp sgt i32 %49, -1, !dbg !397
  %53 = icmp sgt i32 %50, -1, !dbg !397
  %54 = call i32 @llvm.smax.i32(i32 %49, i32 noundef 1) #24, !dbg !397
  %55 = icmp sle i32 %54, %51, !dbg !397
  %56 = select i1 %55, i1 %53, i1 false, !dbg !397
  %57 = select i1 %56, i1 %52, i1 false, !dbg !397
  call void @llvm.assume(i1 %57), !dbg !397
  %58 = icmp eq i32 %49, 0, !dbg !397
  %59 = icmp eq i32 %50, 0, !dbg !397
  %60 = or i1 %58, %59, !dbg !397
  br i1 %60, label %dgemv_64_.exit, label %61, !dbg !397

61:                                               ; preds = %L69
  %62 = icmp sgt i32 %49, 0, !dbg !397
  br i1 %62, label %.preheader, label %.loopexit273, !dbg !397

.preheader:                                       ; preds = %61
  %63 = shl i64 %arraysize, 3, !dbg !397
  %64 = and i64 %63, 34359738360, !dbg !397
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %arrayptr50216274, i8 noundef 0, i64 %64, i1 noundef false) #24, !dbg !397, !tbaa !139, !noalias !398
  br label %.loopexit273, !dbg !397

.loopexit273:                                     ; preds = %.preheader, %61
  %65 = icmp sgt i32 %50, 0, !dbg !397
  br i1 %65, label %66, label %dgemv_64_.exit, !dbg !397

66:                                               ; preds = %.loopexit273
  %67 = icmp sgt i32 %49, 0, !dbg !397
  %sext = shl i64 %47, 32, !dbg !397
  %68 = ashr exact i64 %sext, 32, !dbg !397
  %69 = and i64 %arraysize3, 4294967295, !dbg !397
  %70 = and i64 %arraysize, 4294967295, !dbg !397
  %71 = add nsw i64 %69, -1, !dbg !397
  %72 = add nsw i64 %70, -1, !dbg !397
  %73 = add nuw i64 %71, 1, !dbg !397
  %74 = mul nuw i64 %73, 8, !dbg !397
  %75 = call noalias nonnull i8* @malloc(i64 %74), !dbg !397
  %_malloccache = bitcast i8* %75 to double*, !dbg !397
  %76 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 5, !dbg !397
  store double* %_malloccache, double** %76, align 8, !dbg !397
  store double* %_malloccache, double** %_cache, align 8, !dbg !397, !invariant.group !399
  %77 = add nuw i64 %72, 1, !dbg !397
  %78 = mul nuw nsw i64 %77, %73, !dbg !397
  %79 = mul nuw i64 %78, 8, !dbg !397
  %80 = call noalias nonnull i8* @malloc(i64 %79), !dbg !397
  %_malloccache11 = bitcast i8* %80 to double*, !dbg !397
  %81 = getelementptr inbounds { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, i32 0, i32 6, !dbg !397
  store double* %_malloccache11, double** %81, align 8, !dbg !397
  store double* %_malloccache11, double** %_cache10, align 8, !dbg !397, !invariant.group !400
  br label %82, !dbg !397

82:                                               ; preds = %.loopexit269, %66
  %iv = phi i64 [ %iv.next, %.loopexit269 ], [ 0, %66 ], !dbg !397
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !397
  %83 = getelementptr inbounds double, double* %arrayptr215, i64 %iv, !dbg !397
  %84 = load double, double* %83, align 8, !dbg !397, !tbaa !139, !alias.scope !401, !noalias !404
  %85 = load double*, double** %_cache, align 8, !dbg !397, !dereferenceable !406, !invariant.group !399
  %86 = getelementptr inbounds double, double* %85, i64 %iv, !dbg !397
  store double %84, double* %86, align 8, !dbg !397, !tbaa !139, !invariant.group !407
  br i1 %67, label %87, label %.loopexit269, !dbg !397

87:                                               ; preds = %82
  %88 = mul nsw i64 %iv, %68, !dbg !397
  br label %89, !dbg !397

89:                                               ; preds = %89, %87
  %iv1 = phi i64 [ %iv.next2, %89 ], [ 0, %87 ], !dbg !397
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !397
  %90 = add nsw i64 %iv1, %88, !dbg !397
  %91 = getelementptr inbounds double, double* %arrayptr52218, i64 %90, !dbg !397
  %92 = load double, double* %91, align 8, !dbg !397, !tbaa !139, !alias.scope !408, !noalias !411
  %93 = getelementptr inbounds double, double* %arrayptr50216, i64 %iv1, !dbg !397
  %94 = load double, double* %93, align 8, !dbg !397, !tbaa !139, !alias.scope !413, !noalias !416
  %95 = call double @llvm.fmuladd.f64(double %84, double %92, double %94) #24, !dbg !397
  store double %95, double* %93, align 8, !dbg !397, !tbaa !139, !alias.scope !413, !noalias !418
  %96 = load double*, double** %_cache10, align 8, !dbg !397, !dereferenceable !406, !invariant.group !400
  %97 = mul nuw nsw i64 %77, %73, !dbg !397
  %98 = mul nuw nsw i64 %iv, %77, !dbg !397
  %99 = add nuw nsw i64 %iv1, %98, !dbg !397
  %100 = getelementptr inbounds double, double* %96, i64 %99, !dbg !397
  store double %92, double* %100, align 8, !dbg !397, !tbaa !139, !invariant.group !421
  %101 = icmp eq i64 %iv.next2, %70, !dbg !397
  br i1 %101, label %.loopexit269.loopexit, label %89, !dbg !397, !llvm.loop !422

.loopexit269.loopexit:                            ; preds = %89
  br label %.loopexit269, !dbg !397

.loopexit269:                                     ; preds = %.loopexit269.loopexit, %82
  %102 = icmp eq i64 %iv.next, %69, !dbg !397
  br i1 %102, label %dgemv_64_.exit.loopexit, label %82, !dbg !397, !llvm.loop !423

dgemv_64_.exit.loopexit:                          ; preds = %.loopexit269
  br label %dgemv_64_.exit, !dbg !397

dgemv_64_.exit:                                   ; preds = %dgemv_64_.exit.loopexit, %.loopexit273, %L69
  call void @llvm.julia.gc_preserve_end(token %48) #24, !dbg !397
  %103 = load { double*, double*, double*, i64, i64, double*, double* }, { double*, double*, double*, i64, i64, double*, double* }* %3, align 8, !dbg !424
  ret { double*, double*, double*, i64, i64, double*, double* } %103, !dbg !424
}

; Function Attrs: mustprogress willreturn
define internal fastcc { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } @augmented_julia_gemv__6016({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") unnamed_addr #21 !dbg !369 {
top:
  %3 = alloca { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, align 8
  %4 = call {}*** @julia.get_pgcstack() #24
  %ptls_field159 = getelementptr inbounds {}**, {}*** %4, i64 2
  %5 = bitcast {}*** %ptls_field159 to i64***
  %ptls_load160161 = load i64**, i64*** %5, align 8, !tbaa !29, !alias.scope !370, !noalias !373
  %6 = getelementptr inbounds i64*, i64** %ptls_load160161, i64 2
  %safepoint = load i64*, i64** %6, align 8, !tbaa !33, !invariant.load !28, !alias.scope !375, !noalias !378
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #24, !dbg !380
  fence syncscope("singlethread") seq_cst
  %7 = bitcast {} addrspace(10)* %1 to {} addrspace(10)* addrspace(10)*, !dbg !381
  %arraysize_ptr228 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 3, !dbg !381
  %8 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr228 to i64 addrspace(10)*, !dbg !381
  %9 = addrspacecast i64 addrspace(10)* %8 to i64 addrspace(11)*, !dbg !381
  %arraysize = load i64, i64 addrspace(11)* %9, align 8, !dbg !381, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !384, !noalias !387
  %10 = getelementptr inbounds { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }* %3, i32 0, i32 1, !dbg !381
  store i64 %arraysize, i64* %10, align 8, !dbg !381
  %arraysize_ptr11227 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %7, i64 4, !dbg !381
  %11 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr11227 to i64 addrspace(10)*, !dbg !381
  %12 = addrspacecast i64 addrspace(10)* %11 to i64 addrspace(11)*, !dbg !381
  %arraysize12 = load i64, i64 addrspace(11)* %12, align 16, !dbg !381, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !384, !noalias !387
  %13 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !389
  %14 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %13 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !389
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %14, i64 0, i32 1, !dbg !389
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !389, !tbaa !73, !range !40, !alias.scope !391, !noalias !394
  %.not163 = icmp eq i64 %arraysize12, %arraylen, !dbg !396
  br i1 %.not163, label %L28, label %L22, !dbg !390

L22:                                              ; preds = %top
  %current_task17164 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !398
  %current_task17 = bitcast {}*** %current_task17164 to {}**, !dbg !398
  %newstruct = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #25, !dbg !398
  %15 = bitcast {} addrspace(10)* %newstruct to {} addrspace(10)* addrspace(10)*, !dbg !398
  %16 = addrspacecast {} addrspace(10)* addrspace(10)* %15 to {} addrspace(10)* addrspace(11)*, !dbg !398
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %16, align 8, !dbg !398, !tbaa !88, !alias.scope !92, !noalias !399
  %17 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %16, i64 1, !dbg !398
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %17, align 8, !dbg !398, !tbaa !88, !alias.scope !92, !noalias !399
  %box = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #25, !dbg !398
  %18 = bitcast {} addrspace(10)* %box to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !398
  %.repack = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %18, i64 0, i32 0, !dbg !398
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249126016 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack, align 8, !dbg !398, !tbaa !96, !alias.scope !92, !noalias !399
  %.repack166 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %18, i64 0, i32 1, !dbg !398
  store i64 %arraysize12, i64 addrspace(10)* %.repack166, align 8, !dbg !398, !tbaa !96, !alias.scope !92, !noalias !399
  %.repack168 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %18, i64 0, i32 2, !dbg !398
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249125968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack168, align 8, !dbg !398, !tbaa !96, !alias.scope !92, !noalias !399
  %.repack170 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %18, i64 0, i32 3, !dbg !398
  store i64 %arraylen, i64 addrspace(10)* %.repack170, align 8, !dbg !398, !tbaa !96, !alias.scope !92, !noalias !399
  store atomic {} addrspace(10)* %box, {} addrspace(10)* addrspace(11)* %16 release, align 8, !dbg !398, !tbaa !88, !alias.scope !92, !noalias !399
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct, {} addrspace(10)* nofree nonnull %box) #26, !dbg !398
  %19 = bitcast {} addrspace(10)* %newstruct to i8 addrspace(10)*, !dbg !398
  %20 = addrspacecast i8 addrspace(10)* %19 to i8 addrspace(11)*, !dbg !398
  %21 = getelementptr inbounds i8, i8 addrspace(11)* %20, i64 8, !dbg !398
  %22 = bitcast i8 addrspace(11)* %21 to {} addrspace(10)* addrspace(11)*, !dbg !398
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %22 release, align 8, !dbg !398, !tbaa !88, !alias.scope !92, !noalias !399
  %box20 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task17, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #25, !dbg !390
  %23 = bitcast {} addrspace(10)* %box20 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !390
  %24 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %23, i64 0, i64 0, !dbg !390
  store {} addrspace(10)* %newstruct, {} addrspace(10)* addrspace(10)* %24, align 8, !dbg !390, !tbaa !96, !alias.scope !92, !noalias !399
  %25 = addrspacecast {} addrspace(10)* %box20 to {} addrspace(12)*, !dbg !390
  call void @ijl_throw({} addrspace(12)* %25) #27, !dbg !390
  unreachable, !dbg !390

L28:                                              ; preds = %top
  %26 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !402
  %27 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %26 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !402
  %arraylen_ptr21 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %27, i64 0, i32 1, !dbg !402
  %arraylen22 = load i64, i64 addrspace(11)* %arraylen_ptr21, align 8, !dbg !402, !tbaa !73, !range !40, !alias.scope !404, !noalias !407
  %.not173 = icmp eq i64 %arraysize, %arraylen22, !dbg !409
  br i1 %.not173, label %L38, label %L32, !dbg !403

L32:                                              ; preds = %L28
  %current_task25174 = getelementptr inbounds {}**, {}*** %4, i64 -14, !dbg !411
  %current_task25 = bitcast {}*** %current_task25174 to {}**, !dbg !411
  %newstruct26 = call noalias nonnull dereferenceable(16) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 noundef 16, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5135080256 to {}*) to {} addrspace(10)*)) #25, !dbg !411
  %28 = bitcast {} addrspace(10)* %newstruct26 to {} addrspace(10)* addrspace(10)*, !dbg !411
  %29 = addrspacecast {} addrspace(10)* addrspace(10)* %28 to {} addrspace(10)* addrspace(11)*, !dbg !411
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %29, align 8, !dbg !411, !tbaa !88, !alias.scope !92, !noalias !399
  %30 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(11)* %29, i64 1, !dbg !411
  store {} addrspace(10)* null, {} addrspace(10)* addrspace(11)* %30, align 8, !dbg !411, !tbaa !88, !alias.scope !92, !noalias !399
  %box28 = call noalias nonnull dereferenceable(32) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 noundef 32, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5161876816 to {}*) to {} addrspace(10)*)) #25, !dbg !411
  %31 = bitcast {} addrspace(10)* %box28 to { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)*, !dbg !411
  %.repack176 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %31, i64 0, i32 0, !dbg !411
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249125920 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack176, align 8, !dbg !411, !tbaa !96, !alias.scope !92, !noalias !399
  %.repack177 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %31, i64 0, i32 1, !dbg !411
  store i64 %arraysize, i64 addrspace(10)* %.repack177, align 8, !dbg !411, !tbaa !96, !alias.scope !92, !noalias !399
  %.repack179 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %31, i64 0, i32 2, !dbg !411
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5249125872 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %.repack179, align 8, !dbg !411, !tbaa !96, !alias.scope !92, !noalias !399
  %.repack181 = getelementptr inbounds { {} addrspace(10)*, i64, {} addrspace(10)*, i64 }, { {} addrspace(10)*, i64, {} addrspace(10)*, i64 } addrspace(10)* %31, i64 0, i32 3, !dbg !411
  store i64 %arraylen22, i64 addrspace(10)* %.repack181, align 8, !dbg !411, !tbaa !96, !alias.scope !92, !noalias !399
  store atomic {} addrspace(10)* %box28, {} addrspace(10)* addrspace(11)* %29 release, align 8, !dbg !411, !tbaa !88, !alias.scope !92, !noalias !399
  call void ({} addrspace(10)*, ...) @julia.write_barrier({} addrspace(10)* nofree noundef nonnull %newstruct26, {} addrspace(10)* nofree nonnull %box28) #26, !dbg !411
  %32 = bitcast {} addrspace(10)* %newstruct26 to i8 addrspace(10)*, !dbg !411
  %33 = addrspacecast i8 addrspace(10)* %32 to i8 addrspace(11)*, !dbg !411
  %34 = getelementptr inbounds i8, i8 addrspace(11)* %33, i64 8, !dbg !411
  %35 = bitcast i8 addrspace(11)* %34 to {} addrspace(10)* addrspace(11)*, !dbg !411
  store atomic {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(11)* %35 release, align 8, !dbg !411, !tbaa !88, !alias.scope !92, !noalias !399
  %box30 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task25, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #25, !dbg !403
  %36 = bitcast {} addrspace(10)* %box30 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !403
  %37 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %36, i64 0, i64 0, !dbg !403
  store {} addrspace(10)* %newstruct26, {} addrspace(10)* addrspace(10)* %37, align 8, !dbg !403, !tbaa !96, !alias.scope !92, !noalias !399
  %38 = addrspacecast {} addrspace(10)* %box30 to {} addrspace(12)*, !dbg !403
  call void @ijl_throw({} addrspace(12)* %38) #27, !dbg !403
  unreachable, !dbg !403

L38:                                              ; preds = %L28
  %.not184 = icmp eq i64 %arraysize, 0, !dbg !412
  br i1 %.not184, label %common.ret, label %L41, !dbg !413

common.ret:                                       ; preds = %L152.critedge, %L49.L61_crit_edge, %L38
  %39 = load { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }* %3, align 8, !dbg !414
  ret { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %39, !dbg !414

L41:                                              ; preds = %L38
  %.not185 = icmp eq i64 %arraysize12, 0, !dbg !415
  %40 = getelementptr inbounds { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }* %3, i32 0, i32 2, !dbg !416
  store i1 %.not185, i1* %40, align 1, !dbg !416
  br i1 %.not185, label %L49.L61_crit_edge, label %L152.critedge, !dbg !416

L49.L61_crit_edge:                                ; preds = %L41
  %"'ipc" = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !417
  %41 = bitcast {} addrspace(10)* %0 to i8 addrspace(13)* addrspace(10)*, !dbg !417
  %"'ipc3" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc" to i8 addrspace(13)* addrspace(11)*, !dbg !417
  %42 = addrspacecast i8 addrspace(13)* addrspace(10)* %41 to i8 addrspace(13)* addrspace(11)*, !dbg !417
  %"arrayptr189.pre257'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc3", align 16, !dbg !417, !tbaa !106, !alias.scope !420, !noalias !423
  %arrayptr189.pre257 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %42, align 16, !dbg !417, !tbaa !106, !alias.scope !424, !noalias !407
  %43 = shl nuw i64 %arraysize, 3, !dbg !425
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %arrayptr189.pre257, i8 noundef 0, i64 %43, i1 noundef false) #24, !dbg !417, !tbaa !188, !alias.scope !92, !noalias !399
  br label %common.ret, !dbg !414

L152.critedge:                                    ; preds = %L41
  %_augmented = call fastcc { double*, double*, double*, i64, i64, double*, double* } @augmented_julia_gemv__6057({} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'"), !dbg !426
  %44 = getelementptr inbounds { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }* %3, i32 0, i32 0
  store { double*, double*, double*, i64, i64, double*, double* } %_augmented, { double*, double*, double*, i64, i64, double*, double* }* %44, align 8
  br label %common.ret
}

; Function Attrs: mustprogress willreturn
define internal { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___6013({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1") local_unnamed_addr #20 !dbg !416 {
top:
  %2 = alloca { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %3 = getelementptr inbounds { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 0
  %4 = getelementptr { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }* %3, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }* %3, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = call {}*** @julia.get_pgcstack() #24
  %ptls_field6 = getelementptr inbounds {}**, {}*** %6, i64 2
  %7 = bitcast {}*** %ptls_field6 to i64***
  %ptls_load78 = load i64**, i64*** %7, align 8, !tbaa !29, !alias.scope !417, !noalias !420
  %8 = getelementptr inbounds i64*, i64** %ptls_load78, i64 2
  %safepoint = load i64*, i64** %8, align 8, !tbaa !33, !invariant.load !28, !alias.scope !422, !noalias !425
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #24, !dbg !427
  fence syncscope("singlethread") seq_cst
  %9 = bitcast {} addrspace(10)* %0 to {} addrspace(10)* addrspace(10)*, !dbg !428
  %arraysize_ptr9 = getelementptr inbounds {} addrspace(10)*, {} addrspace(10)* addrspace(10)* %9, i64 3, !dbg !428
  %10 = bitcast {} addrspace(10)* addrspace(10)* %arraysize_ptr9 to i64 addrspace(10)*, !dbg !428
  %11 = addrspacecast i64 addrspace(10)* %10 to i64 addrspace(11)*, !dbg !428
  %arraysize = load i64, i64 addrspace(11)* %11, align 8, !dbg !428, !tbaa !33, !range !40, !invariant.load !28, !alias.scope !430, !noalias !433
  %12 = getelementptr inbounds { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }* %3, i32 0, i32 3, !dbg !435
  store i64 %arraysize, i64* %12, align 8, !dbg !435
  %13 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize), !dbg !435
  %14 = getelementptr inbounds { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }* %3, i32 0, i32 1, !dbg !435
  store {} addrspace(10)* %13, {} addrspace(10)** %14, align 8, !dbg !435
  %15 = mul i64 %arraysize, 8, !dbg !435
  %16 = bitcast {} addrspace(10)* %13 to i8 addrspace(13)* addrspace(10)*, !dbg !435
  %17 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %16, align 8, !dbg !435
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %17, i8 0, i64 %15, i1 false), !dbg !435
  %18 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraysize) #25, !dbg !435
  %19 = getelementptr inbounds { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }* %3, i32 0, i32 2, !dbg !439
  store {} addrspace(10)* %18, {} addrspace(10)** %19, align 8, !dbg !439
  %_augmented = call fastcc { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } @augmented_julia_gemv__6016({} addrspace(10)* align 16 %18, {} addrspace(10)* align 16 %13, {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1"), !dbg !439
  %20 = getelementptr inbounds { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }* %3, i32 0, i32 0, !dbg !429
  store { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %_augmented, { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }* %20, align 8, !dbg !429
  %21 = getelementptr inbounds { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 1, !dbg !429
  store {} addrspace(10)* %18, {} addrspace(10)** %21, align 8, !dbg !429
  %22 = getelementptr inbounds { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 2, !dbg !429
  store {} addrspace(10)* %13, {} addrspace(10)** %22, align 8, !dbg !429
  %23 = load { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }, { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* }* %2, align 8, !dbg !429
  ret { { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 }, {} addrspace(10)*, {} addrspace(10)* } %23, !dbg !429
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_gemv__6057({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", { double*, double*, double*, i64, i64, double*, double* } %tapeArg) unnamed_addr #22 !dbg !490 {
top:
  %"iv'ac" = alloca i64, align 8
  %"iv1'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %3 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"'de54" = alloca double, align 8
  %4 = getelementptr double, double* %"'de54", i64 0
  store double 0.000000e+00, double* %4, align 8
  %_cache = alloca double*, align 8
  %_cache60 = alloca double*, align 8
  %"'de63" = alloca double, align 8
  %5 = getelementptr double, double* %"'de63", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"'de64" = alloca double, align 8
  %6 = getelementptr double, double* %"'de64", i64 0
  store double 0.000000e+00, double* %6, align 8
  %_cache77 = alloca i8, align 1
  %7 = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 5
  %mdyncache_fromtape_cache = alloca double*, align 8
  store double* %7, double** %mdyncache_fromtape_cache, align 8
  %8 = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 6
  %mdyncache_fromtape_cache79 = alloca double*, align 8
  store double* %8, double** %mdyncache_fromtape_cache79, align 8
  %9 = call {}*** @julia.get_pgcstack() #25
  %arraysize = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 3, !dbg !491
  %arraysize3 = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 4, !dbg !493
  br i1 false, label %L17, label %L69, !dbg !494

L17:                                              ; preds = %top
  unreachable

L69:                                              ; preds = %top
  %"'ipc47" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !495
  %10 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc47"), !dbg !495
  %"arrayptr215'il_phi" = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 2, !dbg !495
  %"'ipc43" = addrspacecast {} addrspace(10)* %"'2" to {} addrspace(11)*, !dbg !499
  %11 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc43"), !dbg !499
  %"arrayptr50216'il_phi" = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 1, !dbg !499
  %"arrayptr50216274'ipc" = bitcast double* %"arrayptr50216'il_phi" to i8*, !dbg !503
  %"'ipc" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !503
  %12 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !503
  %"arrayptr52218'il_phi" = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 0, !dbg !503
  %.not203 = icmp eq i64 %arraysize, 0, !dbg !506
  %13 = select i1 %.not203, i64 1, i64 %arraysize, !dbg !510
  %14 = call i64 @llvm.smax.i64(i64 %arraysize, i64 %13) #25, !dbg !510
  %15 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'", {} addrspace(10)* %1, {} addrspace(10)* %"'1", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !511
  %16 = trunc i64 %arraysize to i32, !dbg !511
  %17 = trunc i64 %arraysize3 to i32, !dbg !511
  %18 = icmp eq i32 %16, 0, !dbg !511
  %19 = icmp eq i32 %17, 0, !dbg !511
  %20 = or i1 %18, %19, !dbg !511
  store i8 1, i8* %_cache77, align 1, !dbg !511, !invariant.group !512
  br i1 %20, label %dgemv_64_.exit, label %21, !dbg !511

21:                                               ; preds = %L69
  %22 = icmp sgt i32 %16, 0, !dbg !511
  br i1 %22, label %.preheader, label %.loopexit273, !dbg !511

.preheader:                                       ; preds = %21
  %23 = shl i64 %arraysize, 3, !dbg !511
  %24 = and i64 %23, 34359738360, !dbg !511
  br label %.loopexit273, !dbg !511

.loopexit273:                                     ; preds = %.preheader, %21
  %25 = icmp sgt i32 %17, 0, !dbg !511
  store i8 0, i8* %_cache77, align 1, !dbg !511, !invariant.group !512
  br i1 %25, label %26, label %dgemv_64_.exit, !dbg !511

26:                                               ; preds = %.loopexit273
  %27 = icmp sgt i32 %16, 0, !dbg !511
  %sext = shl i64 %14, 32, !dbg !511
  %28 = ashr exact i64 %sext, 32, !dbg !511
  %29 = and i64 %arraysize3, 4294967295, !dbg !511
  %30 = and i64 %arraysize, 4294967295, !dbg !511
  %31 = add nsw i64 %29, -1, !dbg !511
  %32 = add nsw i64 %30, -1, !dbg !511
  %33 = add nuw i64 %31, 1, !dbg !511
  %34 = add nuw i64 %32, 1, !dbg !511
  %35 = mul nuw nsw i64 %34, %33, !dbg !511
  %36 = mul nuw i64 %35, 8, !dbg !511
  %37 = mul nuw i64 %33, 8, !dbg !511
  br label %38, !dbg !511

38:                                               ; preds = %.loopexit269, %26
  %iv = phi i64 [ %iv.next, %.loopexit269 ], [ 0, %26 ], !dbg !511
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !511
  %"'ipg" = getelementptr inbounds double, double* %"arrayptr215'il_phi", i64 %iv, !dbg !511
  %39 = load double*, double** %mdyncache_fromtape_cache, align 8, !dbg !511, !dereferenceable !339, !invariant.group !513
  %40 = getelementptr inbounds double, double* %39, i64 %iv, !dbg !511
  %41 = load double, double* %40, align 8, !dbg !511, !invariant.group !514
  br i1 %27, label %42, label %.loopexit269, !dbg !511

42:                                               ; preds = %38
  %43 = mul nsw i64 %iv, %28, !dbg !511
  br label %44, !dbg !511

44:                                               ; preds = %44, %42
  %iv1 = phi i64 [ %iv.next2, %44 ], [ 0, %42 ], !dbg !511
  %iv.next2 = add nuw nsw i64 %iv1, 1, !dbg !511
  %45 = add nsw i64 %iv1, %43, !dbg !511
  %"'ipg67" = getelementptr inbounds double, double* %"arrayptr52218'il_phi", i64 %45, !dbg !511
  %46 = load double*, double** %mdyncache_fromtape_cache79, align 8, !dbg !511, !dereferenceable !339, !invariant.group !515
  %47 = mul nuw nsw i64 %34, %33, !dbg !511
  %48 = mul nuw nsw i64 %iv, %34, !dbg !511
  %49 = add nuw nsw i64 %iv1, %48, !dbg !511
  %50 = getelementptr inbounds double, double* %46, i64 %49, !dbg !511
  %51 = load double, double* %50, align 8, !dbg !511, !invariant.group !516
  %52 = mul nuw nsw i64 %34, %33, !dbg !511
  %53 = mul nuw nsw i64 %iv, %34, !dbg !511
  %54 = add nuw nsw i64 %iv1, %53, !dbg !511
  %"'ipg53" = getelementptr inbounds double, double* %"arrayptr50216'il_phi", i64 %iv1, !dbg !511
  %55 = icmp eq i64 %iv.next2, %30, !dbg !511
  br i1 %55, label %.loopexit269.loopexit, label %44, !dbg !511, !llvm.loop !517

.loopexit269.loopexit:                            ; preds = %44
  br label %.loopexit269, !dbg !511

.loopexit269:                                     ; preds = %.loopexit269.loopexit, %38
  %56 = icmp eq i64 %iv.next, %29, !dbg !511
  br i1 %56, label %dgemv_64_.exit.loopexit, label %38, !dbg !511, !llvm.loop !518

dgemv_64_.exit.loopexit:                          ; preds = %.loopexit269
  store i8 2, i8* %_cache77, align 1, !dbg !511, !invariant.group !512
  br label %dgemv_64_.exit, !dbg !511

dgemv_64_.exit:                                   ; preds = %dgemv_64_.exit.loopexit, %.loopexit273, %L69
  call void @llvm.julia.gc_preserve_end(token %15) #25, !dbg !511
  br label %invertdgemv_64_.exit, !dbg !519

inverttop:                                        ; preds = %invertL69
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL69:                                        ; preds = %invertdgemv_64_.exit, %invert
  call void @llvm.julia.gc_preserve_end(token %120), !dbg !511
  br label %inverttop

invert:                                           ; preds = %invert.loopexit273, %invert.preheader
  br label %invertL69

invert.preheader:                                 ; preds = %invert.loopexit273
  %_unwrap = shl i64 %arraysize, 3, !dbg !511
  %_unwrap50 = and i64 %_unwrap, 34359738360, !dbg !511
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %"arrayptr50216274'ipc", i8 noundef 0, i64 %_unwrap50, i1 noundef false) #25, !dbg !511, !tbaa !139, !noalias !264
  br label %invert

invert.loopexit273:                               ; preds = %invertdgemv_64_.exit, %invert3
  %_unwrap51 = icmp sgt i32 %16, 0
  br i1 %_unwrap51, label %invert.preheader, label %invert

invert3:                                          ; preds = %invert4
  %57 = load i64, i64* %"iv'ac", align 8
  %58 = load i64, i64* %"iv1'ac", align 8
  %59 = load i64, i64* %"iv'ac", align 8
  %60 = load i64, i64* %"iv'ac", align 8
  %forfree78 = load double*, double** %mdyncache_fromtape_cache, align 8, !dereferenceable !339, !invariant.group !513
  %61 = bitcast double* %forfree78 to i8*
  call void @free(i8* nonnull %61), !dbg !520
  %62 = load i64, i64* %"iv'ac", align 8
  %63 = load i64, i64* %"iv1'ac", align 8
  %forfree80 = load double*, double** %mdyncache_fromtape_cache79, align 8, !dereferenceable !339, !invariant.group !515
  %64 = bitcast double* %forfree80 to i8*
  call void @free(i8* nonnull %64), !dbg !520
  br label %invert.loopexit273

invert4:                                          ; preds = %invert.loopexit269, %invert5
  %65 = load double, double* %"'de", align 8, !dbg !511
  store double 0.000000e+00, double* %"'de", align 8, !dbg !511
  %66 = load i64, i64* %"iv'ac", align 8, !dbg !511
  %"'ipg_unwrap" = getelementptr inbounds double, double* %"arrayptr215'il_phi", i64 %66, !dbg !511
  %67 = load double, double* %"'ipg_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !521, !noalias !524
  %68 = fadd fast double %67, %65, !dbg !511
  store double %68, double* %"'ipg_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !521, !noalias !524
  %69 = load i64, i64* %"iv'ac", align 8
  %70 = icmp eq i64 %69, 0
  %71 = xor i1 %70, true
  br i1 %70, label %invert3, label %incinvert4

incinvert4:                                       ; preds = %invert4
  %72 = load i64, i64* %"iv'ac", align 8
  %73 = add nsw i64 %72, -1
  store i64 %73, i64* %"iv'ac", align 8
  br label %invert.loopexit269

invert5:                                          ; preds = %invert6
  br label %invert4

invert6:                                          ; preds = %mergeinvert6_.loopexit269.loopexit, %incinvert6
  %74 = load i64, i64* %"iv1'ac", align 8, !dbg !511
  %75 = load i64, i64* %"iv'ac", align 8, !dbg !511
  %"'ipg53_unwrap" = getelementptr inbounds double, double* %"arrayptr50216'il_phi", i64 %74, !dbg !511
  %76 = load double, double* %"'ipg53_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !526, !noalias !529
  store double 0.000000e+00, double* %"'ipg53_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !526, !noalias !529
  %77 = load double, double* %"'de54", align 8, !dbg !511
  %78 = fadd fast double %77, %76, !dbg !511
  store double %78, double* %"'de54", align 8, !dbg !511
  %79 = load double, double* %"'de54", align 8, !dbg !511
  store double 0.000000e+00, double* %"'de54", align 8, !dbg !511
  %80 = load i64, i64* %"iv1'ac", align 8, !dbg !511
  %81 = load i64, i64* %"iv'ac", align 8, !dbg !511
  %arraysize3_unwrap = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 4, !dbg !511
  %_unwrap56 = and i64 %arraysize3_unwrap, 4294967295, !dbg !511
  %_unwrap57 = add nsw i64 %_unwrap56, -1, !dbg !511
  %82 = add nuw i64 %_unwrap57, 1, !dbg !511
  %arraysize_unwrap = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 3, !dbg !511
  %_unwrap58 = and i64 %arraysize_unwrap, 4294967295, !dbg !511
  %_unwrap59 = add nsw i64 %_unwrap58, -1, !dbg !511
  %83 = add nuw i64 %_unwrap59, 1, !dbg !511
  %84 = mul nuw nsw i64 %83, %82, !dbg !511
  %85 = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 6, !dbg !511
  %86 = mul nuw nsw i64 %83, %82, !dbg !511
  %87 = mul nuw nsw i64 %81, %83, !dbg !511
  %88 = add nuw nsw i64 %80, %87, !dbg !511
  %89 = getelementptr inbounds double, double* %85, i64 %88, !dbg !511
  %90 = load double, double* %89, align 8, !dbg !511, !tbaa !139, !invariant.group !531
  %91 = fmul fast double %79, %90, !dbg !511
  %92 = load double, double* %"'de", align 8, !dbg !511
  %93 = fadd fast double %92, %91, !dbg !511
  store double %93, double* %"'de", align 8, !dbg !511
  %94 = load i64, i64* %"iv1'ac", align 8, !dbg !511
  %95 = load i64, i64* %"iv'ac", align 8, !dbg !511
  %96 = add nuw i64 %_unwrap57, 1, !dbg !511
  %97 = extractvalue { double*, double*, double*, i64, i64, double*, double* } %tapeArg, 5, !dbg !511
  %98 = getelementptr inbounds double, double* %97, i64 %95, !dbg !511
  %99 = load double, double* %98, align 8, !dbg !511, !tbaa !139, !alias.scope !524, !noalias !521, !invariant.group !532
  %100 = fmul fast double %79, %99, !dbg !511
  %101 = load double, double* %"'de63", align 8, !dbg !511
  %102 = fadd fast double %101, %100, !dbg !511
  store double %102, double* %"'de63", align 8, !dbg !511
  %103 = load double, double* %"'de64", align 8, !dbg !511
  %104 = fadd fast double %103, %79, !dbg !511
  store double %104, double* %"'de64", align 8, !dbg !511
  %105 = load double, double* %"'de64", align 8, !dbg !511
  store double 0.000000e+00, double* %"'de64", align 8, !dbg !511
  %106 = load double, double* %"'ipg53_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !526, !noalias !533
  %107 = fadd fast double %106, %105, !dbg !511
  store double %107, double* %"'ipg53_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !526, !noalias !533
  %108 = load double, double* %"'de63", align 8, !dbg !511
  store double 0.000000e+00, double* %"'de63", align 8, !dbg !511
  %109 = load i64, i64* %"iv1'ac", align 8, !dbg !511
  %110 = load i64, i64* %"iv'ac", align 8, !dbg !511
  %sext_unwrap = shl i64 %14, 32, !dbg !511
  %_unwrap68 = ashr exact i64 %sext_unwrap, 32, !dbg !511
  %_unwrap69 = mul nsw i64 %110, %_unwrap68, !dbg !511
  %_unwrap70 = add nsw i64 %109, %_unwrap69, !dbg !511
  %"'ipg67_unwrap" = getelementptr inbounds double, double* %"arrayptr52218'il_phi", i64 %_unwrap70, !dbg !511
  %111 = load double, double* %"'ipg67_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !534, !noalias !537
  %112 = fadd fast double %111, %108, !dbg !511
  store double %112, double* %"'ipg67_unwrap", align 8, !dbg !511, !tbaa !139, !alias.scope !534, !noalias !537
  %113 = load i64, i64* %"iv1'ac", align 8
  %114 = icmp eq i64 %113, 0
  %115 = xor i1 %114, true
  br i1 %114, label %invert5, label %incinvert6

incinvert6:                                       ; preds = %invert6
  %116 = load i64, i64* %"iv1'ac", align 8
  %117 = add nsw i64 %116, -1
  store i64 %117, i64* %"iv1'ac", align 8
  br label %invert6

invert.loopexit269.loopexit:                      ; preds = %invert.loopexit269
  %118 = load i64, i64* %"iv'ac", align 8
  %_unwrap72 = and i64 %arraysize, 4294967295
  %_unwrap73 = add nsw i64 %_unwrap72, -1
  br label %mergeinvert6_.loopexit269.loopexit

mergeinvert6_.loopexit269.loopexit:               ; preds = %invert.loopexit269.loopexit
  store i64 %_unwrap73, i64* %"iv1'ac", align 8
  br label %invert6

invert.loopexit269:                               ; preds = %mergeinvert4_dgemv_64_.exit.loopexit, %incinvert4
  %119 = load i64, i64* %"iv'ac", align 8
  %_unwrap74 = icmp sgt i32 %16, 0
  br i1 %_unwrap74, label %invert.loopexit269.loopexit, label %invert4

invertdgemv_64_.exit.loopexit:                    ; preds = %invertdgemv_64_.exit
  %_unwrap75 = and i64 %arraysize3, 4294967295
  %_unwrap76 = add nsw i64 %_unwrap75, -1
  br label %mergeinvert4_dgemv_64_.exit.loopexit

mergeinvert4_dgemv_64_.exit.loopexit:             ; preds = %invertdgemv_64_.exit.loopexit
  store i64 %_unwrap76, i64* %"iv'ac", align 8
  br label %invert.loopexit269

invertdgemv_64_.exit:                             ; preds = %dgemv_64_.exit
  %120 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'", {} addrspace(10)* %1, {} addrspace(10)* %"'1", {} addrspace(10)* %2, {} addrspace(10)* %"'2"), !dbg !511
  %121 = load i8, i8* %_cache77, align 1, !invariant.group !512
  switch i8 %121, label %invertdgemv_64_.exit.loopexit [
    i8 0, label %invert.loopexit273
    i8 1, label %invertL69
  ]
}

; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia_gemv__6016({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg) unnamed_addr #21 !dbg !455 {
top:
  %3 = call {}*** @julia.get_pgcstack() #25
  %arraysize = extractvalue { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg, 1, !dbg !456
  br i1 true, label %L28, label %L22, !dbg !459

L22:                                              ; preds = %top
  unreachable

L28:                                              ; preds = %top
  br i1 true, label %L38, label %L32, !dbg !460

L32:                                              ; preds = %L28
  unreachable

L38:                                              ; preds = %L28
  %.not184 = icmp eq i64 %arraysize, 0, !dbg !461
  br i1 %.not184, label %common.ret, label %L41, !dbg !462

common.ret:                                       ; preds = %L152.critedge, %L49.L61_crit_edge, %L38
  br label %invertcommon.ret, !dbg !463

L41:                                              ; preds = %L38
  %.not185 = extractvalue { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg, 2, !dbg !464
  br i1 %.not185, label %L49.L61_crit_edge, label %L152.critedge, !dbg !464

L49.L61_crit_edge:                                ; preds = %L41
  %"'ipc" = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !465
  %"'ipc35" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc" to i8 addrspace(13)* addrspace(11)*, !dbg !465
  %"arrayptr189.pre257'ipl" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc35", align 16, !dbg !465, !tbaa !106, !alias.scope !468, !noalias !471
  %4 = shl nuw i64 %arraysize, 3, !dbg !473
  br label %common.ret, !dbg !463

L152.critedge:                                    ; preds = %L41
  %tapeArg38 = extractvalue { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg, 0, !dbg !474
  br label %common.ret

inverttop:                                        ; preds = %invertL28
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL28:                                        ; preds = %invertL38
  br label %inverttop

invertL38:                                        ; preds = %invertL41, %invertcommon.ret
  br label %invertL28

invertcommon.ret:                                 ; preds = %common.ret
  %.not185_unwrap = extractvalue { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg, 2
  br i1 %.not184, label %invertL38, label %staging

invertL41:                                        ; preds = %invertL152.critedge, %invertL49.L61_crit_edge
  br label %invertL38

invertL49.L61_crit_edge:                          ; preds = %staging
  %_unwrap = shl nuw i64 %arraysize, 3, !dbg !465
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !465
  %"'ipc35_unwrap" = addrspacecast i8 addrspace(13)* addrspace(10)* %"'ipc_unwrap" to i8 addrspace(13)* addrspace(11)*, !dbg !465
  %"arrayptr189.pre257'il_phi_unwrap" = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(11)* %"'ipc35_unwrap", align 16, !dbg !465, !tbaa !106, !alias.scope !468, !noalias !471
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %"arrayptr189.pre257'il_phi_unwrap", i8 noundef 0, i64 %_unwrap, i1 noundef false) #25, !dbg !465, !tbaa !188, !noalias !215
  br label %invertL41

invertL152.critedge:                              ; preds = %staging
  %tapeArg38_unwrap = extractvalue { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg, 0, !dbg !474
  call fastcc void @diffejulia_gemv__6057({} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 %2, {} addrspace(10)* align 16 %"'2", {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", { double*, double*, double*, i64, i64, double*, double* } %tapeArg38_unwrap), !dbg !474
  br label %invertL41

staging:                                          ; preds = %invertcommon.ret
  br i1 %.not185_unwrap, label %invertL49.L61_crit_edge, label %invertL152.critedge
}

; Function Attrs: mustprogress willreturn
define internal void @diffejulia___6013({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 } %tapeArg) local_unnamed_addr #20 !dbg !444 {
top:
  %2 = call {}*** @julia.get_pgcstack() #25
  %arraysize = extractvalue { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 } %tapeArg, 3, !dbg !445
  %3 = extractvalue { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 } %tapeArg, 1, !dbg !445
  %4 = extractvalue { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 } %tapeArg, 2, !dbg !445
  %tapeArg2 = extractvalue { { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 }, {} addrspace(10)*, {} addrspace(10)*, i64 } %tapeArg, 0, !dbg !450
  br label %inverttop, !dbg !449

inverttop:                                        ; preds = %top
  call fastcc void @diffejulia_gemv__6016({} addrspace(10)* align 16 %4, {} addrspace(10)* align 16 %3, {} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 %1, {} addrspace(10)* align 16 %"'1", { { double*, double*, double*, i64, i64, double*, double* }, i64, i1 } %tapeArg2), !dbg !450
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void
}

after simplification :
; Function Attrs: mustprogress willreturn
define nonnull {} addrspace(10)* @preprocess_julia___6184({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2) local_unnamed_addr #12 !dbg !290 {
top:
  %3 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) i8* @malloc(i64 8), !enzyme_fromstack !291
  %newstruct51 = bitcast i8* %3 to [1 x [1 x i64]]*, !enzyme_caststack !10
  %4 = call noalias nonnull dereferenceable(8) dereferenceable_or_null(8) i8* @malloc(i64 8), !enzyme_fromstack !291
  %newstruct144 = bitcast i8* %4 to [1 x [1 x i64]]*, !enzyme_caststack !10
  %5 = call {}*** @julia.get_pgcstack() #13
  %current_task1211 = getelementptr inbounds {}**, {}*** %5, i64 -14
  %current_task1 = bitcast {}*** %current_task1211 to {}**
  %ptls_field212 = getelementptr inbounds {}**, {}*** %5, i64 2
  %6 = bitcast {}*** %ptls_field212 to i64***
  %ptls_load213214 = load i64**, i64*** %6, align 8, !tbaa !11
  %7 = getelementptr inbounds i64*, i64** %ptls_load213214, i64 2
  %safepoint = load i64*, i64** %7, align 8, !tbaa !15, !invariant.load !10
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #13, !dbg !292
  fence syncscope("singlethread") seq_cst
  %.phi.trans.insert = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*
  %8 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert199 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %8 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert199, i64 0, i32 1
  %arraylen.pre = load i64, i64 addrspace(11)* %arraylen_ptr.phi.trans.insert, align 8, !dbg !293, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %9 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !293
  %10 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %9 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !293
  %arraylen_ptr4235 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %10, i64 0, i32 1, !dbg !293
  %arraylen5236 = load i64, i64 addrspace(11)* %arraylen_ptr4235, align 8, !dbg !293, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %11 = icmp eq i64 %arraylen.pre, %arraylen5236, !dbg !297
  br i1 %11, label %L31.lr.ph, label %L24, !dbg !300

L31.lr.ph:                                        ; preds = %top
  %12 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !301
  %13 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %12 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !293
  %arraylen_ptr4 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %13, i64 0, i32 1, !dbg !293
  %arraylen5 = load i64, i64 addrspace(11)* %arraylen_ptr4, align 8, !dbg !293, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %14 = icmp eq i64 %arraylen.pre, %arraylen5, !dbg !297
  br i1 %14, label %L115, label %L24, !dbg !300

L24:                                              ; preds = %L31.lr.ph, %top
  %arraylen5.lcssa = phi i64 [ %arraylen5236, %top ], [ %arraylen5, %L31.lr.ph ], !dbg !293
  %box = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187409184 to {}*) to {} addrspace(10)*)) #14, !dbg !304
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box to i64 addrspace(10)*, !dbg !304
  store i64 %arraylen.pre, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !304, !tbaa !26, !alias.scope !30, !noalias !305
  %box10 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187409184 to {}*) to {} addrspace(10)*)) #14, !dbg !304
  %memcpy_refined_dst12 = bitcast {} addrspace(10)* %box10 to i64 addrspace(10)*, !dbg !304
  store i64 %arraylen5.lcssa, i64 addrspace(10)* %memcpy_refined_dst12, align 8, !dbg !304, !tbaa !26, !alias.scope !30, !noalias !305
  %15 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5184905104 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5139351968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972800 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972768 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box10, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972736 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346233184 to {}*) to {} addrspace(10)*)) #15, !dbg !304
  %box14 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #14, !dbg !304
  %16 = bitcast {} addrspace(10)* %box14 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !304
  %17 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %16, i64 0, i64 0, !dbg !304
  store {} addrspace(10)* %15, {} addrspace(10)* addrspace(10)* %17, align 8, !dbg !304, !tbaa !26, !alias.scope !30, !noalias !305
  %18 = addrspacecast {} addrspace(10)* %box14 to {} addrspace(12)*, !dbg !304
  call void @ijl_throw({} addrspace(12)* %18) #16, !dbg !304
  unreachable, !dbg !304

L115:                                             ; preds = %L31.lr.ph
  %19 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !308
  %20 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !308
  %memcpy_refined_dst53 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct51, i64 0, i64 0, i64 0, !dbg !316
  store i64 %arraylen.pre, i64* %memcpy_refined_dst53, align 8, !dbg !316, !tbaa !86, !alias.scope !88, !noalias !318
  %21 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraylen.pre) #17, !dbg !319
  %22 = addrspacecast {} addrspace(10)* %21 to {} addrspace(11)*, !dbg !327
  %23 = bitcast {} addrspace(10)* %21 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !327
  %24 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %23 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !327
  %arraylen_ptr63 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %24, i64 0, i32 1, !dbg !327
  %arraylen64 = load i64, i64 addrspace(11)* %arraylen_ptr63, align 8, !dbg !327, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %.not.not = icmp eq i64 %arraylen64, %arraylen.pre, !dbg !331
  br i1 %.not.not, label %L161, label %L287, !dbg !329

L161:                                             ; preds = %L115
  %.not = icmp eq {} addrspace(11)* %22, %.phi.trans.insert, !dbg !335
  br i1 %.not, label %L177, label %L164, !dbg !335

L164:                                             ; preds = %L161
  %25 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %22) #18, !dbg !340
  %26 = bitcast {}* %25 to i8**, !dbg !340
  %arrayptr136 = load i8*, i8** %26, align 8, !dbg !340, !tbaa !133, !alias.scope !51, !noalias !52, !nonnull !10
  %27 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %.phi.trans.insert) #18, !dbg !340
  %28 = bitcast {}* %27 to i8**, !dbg !340
  %arrayptr138 = load i8*, i8** %28, align 8, !dbg !340, !tbaa !133, !alias.scope !51, !noalias !52, !nonnull !10
  %.not226 = icmp eq i8* %arrayptr136, %arrayptr138, !dbg !345
  br i1 %.not226, label %L172, label %L177, !dbg !344

L172:                                             ; preds = %L164
  %29 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %0) #13, !dbg !348
  %30 = bitcast {} addrspace(10)* %29 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert201 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %30 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr68.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert201, i64 0, i32 1
  %arraylen69.pre = load i64, i64 addrspace(11)* %arraylen_ptr68.phi.trans.insert, align 8, !dbg !350, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  br label %L177, !dbg !354

L177:                                             ; preds = %L172, %L164, %L161
  %nodecayed..pre-phi203 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %30, %L172 ], [ %8, %L161 ], [ %8, %L164 ], !dbg !350
  %arraylen69 = phi i64 [ %arraylen69.pre, %L172 ], [ %arraylen.pre, %L161 ], [ %arraylen.pre, %L164 ], !dbg !350
  %31 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi203 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !361
  %32 = icmp eq i64 %arraylen69, 1, !dbg !361
  %.not215 = icmp eq {} addrspace(11)* %22, %19, !dbg !365
  br i1 %.not215, label %L202, label %L189, !dbg !365

L189:                                             ; preds = %L177
  %33 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %22) #18, !dbg !368
  %34 = bitcast {}* %33 to i8**, !dbg !368
  %arrayptr131 = load i8*, i8** %34, align 8, !dbg !368, !tbaa !133, !alias.scope !51, !noalias !52, !nonnull !10
  %35 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %19) #18, !dbg !368
  %36 = bitcast {}* %35 to i8**, !dbg !368
  %arrayptr133 = load i8*, i8** %36, align 8, !dbg !368, !tbaa !133, !alias.scope !51, !noalias !52, !nonnull !10
  %.not225 = icmp eq i8* %arrayptr131, %arrayptr133, !dbg !373
  br i1 %.not225, label %L197, label %L202, !dbg !372

L197:                                             ; preds = %L189
  %37 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %1) #13, !dbg !376
  %38 = bitcast {} addrspace(10)* %37 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !378
  %.pre205 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %38 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !378
  br label %L202, !dbg !354

L202:                                             ; preds = %L197, %L189, %L177
  %nodecayed..pre-phi206 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %38, %L197 ], [ %9, %L189 ], [ %9, %L177 ], !dbg !378
  %39 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi206 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !378
  %arraylen_ptr73 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %39, i64 0, i32 1, !dbg !378
  %arraylen74 = load i64, i64 addrspace(11)* %arraylen_ptr73, align 8, !dbg !378, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %40 = icmp eq i64 %arraylen74, 1, !dbg !382
  %.not216 = icmp eq {} addrspace(11)* %22, %20, !dbg !386
  br i1 %.not216, label %L227, label %L214, !dbg !386

L214:                                             ; preds = %L202
  %41 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %22) #18, !dbg !389
  %42 = bitcast {}* %41 to i8**, !dbg !389
  %arrayptr126 = load i8*, i8** %42, align 8, !dbg !389, !tbaa !133, !alias.scope !51, !noalias !52, !nonnull !10
  %43 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %20) #18, !dbg !389
  %44 = bitcast {}* %43 to i8**, !dbg !389
  %arrayptr128 = load i8*, i8** %44, align 8, !dbg !389, !tbaa !133, !alias.scope !51, !noalias !52, !nonnull !10
  %.not224 = icmp eq i8* %arrayptr126, %arrayptr128, !dbg !394
  br i1 %.not224, label %L222, label %L227, !dbg !393

L222:                                             ; preds = %L214
  %45 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %2) #13, !dbg !397
  %46 = bitcast {} addrspace(10)* %45 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !399
  %.pre209 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %46 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !399
  br label %L227, !dbg !354

L227:                                             ; preds = %L222, %L214, %L202
  %nodecayed..pre-phi210 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %46, %L222 ], [ %12, %L214 ], [ %12, %L202 ], !dbg !399
  %47 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi210 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !399
  %arraylen_ptr79 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %47, i64 0, i32 1, !dbg !399
  %arraylen80 = load i64, i64 addrspace(11)* %arraylen_ptr79, align 8, !dbg !399, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %48 = icmp eq i64 %arraylen80, 1, !dbg !403
  %49 = icmp eq i64 %arraylen.pre, 0, !dbg !407
  br i1 %49, label %L297, label %L249.lr.ph, !dbg !408

L249.lr.ph:                                       ; preds = %L227
  %50 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %31 to double addrspace(13)* addrspace(11)*
  %arrayptr218 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %50, align 8, !tbaa !133, !alias.scope !410, !noalias !52, !nonnull !10
  %51 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %39 to double addrspace(13)* addrspace(11)*
  %arrayptr89219 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %51, align 8, !tbaa !133, !alias.scope !410, !noalias !52, !nonnull !10
  %52 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %47 to double addrspace(13)* addrspace(11)*
  %arrayptr93220 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %52, align 8, !tbaa !133, !alias.scope !410, !noalias !52, !nonnull !10
  %53 = bitcast {} addrspace(10)* %21 to double addrspace(13)* addrspace(10)*
  %54 = addrspacecast double addrspace(13)* addrspace(10)* %53 to double addrspace(13)* addrspace(11)*
  %arrayptr96221 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %54, align 8, !tbaa !133, !alias.scope !410, !noalias !52, !nonnull !10
  br label %L249, !dbg !411

L249:                                             ; preds = %L249, %L249.lr.ph
  %iv = phi i64 [ %iv.next, %L249 ], [ 0, %L249.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !412
  %55 = select i1 %32, i64 0, i64 %iv, !dbg !415
  %56 = getelementptr inbounds double, double addrspace(13)* %arrayptr218, i64 %55, !dbg !415
  %arrayref = load double, double addrspace(13)* %56, align 8, !dbg !415, !tbaa !237, !alias.scope !30, !noalias !239
  %57 = select i1 %40, i64 0, i64 %iv, !dbg !422
  %58 = getelementptr inbounds double, double addrspace(13)* %arrayptr89219, i64 %57, !dbg !422
  %arrayref90 = load double, double addrspace(13)* %58, align 8, !dbg !422, !tbaa !237, !alias.scope !30, !noalias !239
  %59 = select i1 %48, i64 0, i64 %iv, !dbg !425
  %60 = getelementptr inbounds double, double addrspace(13)* %arrayptr93220, i64 %59, !dbg !425
  %arrayref94 = load double, double addrspace(13)* %60, align 8, !dbg !425, !tbaa !237, !alias.scope !30, !noalias !239
  %61 = fadd double %arrayref, %arrayref90, !dbg !428
  %62 = fadd double %61, %arrayref94, !dbg !428
  %63 = getelementptr inbounds double, double addrspace(13)* %arrayptr96221, i64 %iv, !dbg !432
  store double %62, double addrspace(13)* %63, align 8, !dbg !432, !tbaa !237, !alias.scope !30, !noalias !305
  %exitcond.not = icmp eq i64 %iv.next, %arraylen.pre, !dbg !433
  br i1 %exitcond.not, label %L297.loopexit, label %L249, !dbg !411, !llvm.loop !434

L287:                                             ; preds = %L115
  %64 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %newstruct144, i64 0, i64 0, i64 0, !dbg !435
  store i64 %arraylen64, i64* %64, align 8, !dbg !435, !tbaa !86, !alias.scope !88, !noalias !318
  %65 = addrspacecast [1 x [1 x i64]]* %newstruct144 to [1 x [1 x i64]] addrspace(11)*, !dbg !329
  %66 = addrspacecast [1 x [1 x i64]]* %newstruct51 to [1 x [1 x i64]] addrspace(11)*, !dbg !329
  call fastcc void @julia_throwdm_6189([1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %65, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %66) #16, !dbg !329
  unreachable, !dbg !329

L297.loopexit:                                    ; preds = %L249
  br label %L297, !dbg !439

L297:                                             ; preds = %L297.loopexit, %L227
  %arraylen101 = load i64, i64 addrspace(11)* %arraylen_ptr.phi.trans.insert, align 8, !dbg !439, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %arraylen104 = load i64, i64 addrspace(11)* %arraylen_ptr4235, align 8, !dbg !445, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %arraylen107 = load i64, i64 addrspace(11)* %arraylen_ptr4, align 8, !dbg !445, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %67 = icmp eq i64 %arraylen107, %arraylen104, !dbg !448
  %68 = icmp eq i64 %arraylen104, 1, !dbg !450
  %value_phi109 = or i1 %68, %67, !dbg !450
  br i1 %value_phi109, label %L333, label %L314, !dbg !451

L314:                                             ; preds = %L297
  %.not223 = icmp eq i64 %arraylen107, 1, !dbg !450
  br i1 %.not223, label %L333, label %L322, !dbg !451

L322:                                             ; preds = %L314
  %69 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen104) #17, !dbg !451
  %70 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen107) #17, !dbg !451
  %71 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5184092592 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5139351968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5228993744 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %69, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5228993712 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %70) #15, !dbg !451
  %box122 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #14, !dbg !451
  %72 = bitcast {} addrspace(10)* %box122 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !451
  %73 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %72, i64 0, i64 0, !dbg !451
  store {} addrspace(10)* %71, {} addrspace(10)* addrspace(10)* %73, align 8, !dbg !451, !tbaa !26, !alias.scope !30, !noalias !305
  %74 = addrspacecast {} addrspace(10)* %box122 to {} addrspace(12)*, !dbg !451
  call void @ijl_throw({} addrspace(12)* %74) #16, !dbg !451
  unreachable, !dbg !451

L333:                                             ; preds = %L314, %L297
  %value_phi110 = phi i64 [ %arraylen107, %L297 ], [ %arraylen104, %L314 ]
  %75 = icmp eq i64 %value_phi110, %arraylen101, !dbg !454
  %76 = icmp eq i64 %arraylen101, 1, !dbg !456
  %value_phi114 = or i1 %76, %75, !dbg !456
  %.not222 = icmp eq i64 %value_phi110, 1
  %or.cond = or i1 %.not222, %value_phi114, !dbg !457
  br i1 %or.cond, label %L359, label %L349, !dbg !457

L349:                                             ; preds = %L333
  %77 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen101) #17, !dbg !457
  %78 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %value_phi110) #17, !dbg !457
  %79 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5184092592 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5139351968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5228993744 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %77, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5228993712 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %78) #15, !dbg !457
  %box117 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #14, !dbg !457
  %80 = bitcast {} addrspace(10)* %box117 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !457
  %81 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %80, i64 0, i64 0, !dbg !457
  store {} addrspace(10)* %79, {} addrspace(10)* addrspace(10)* %81, align 8, !dbg !457, !tbaa !26, !alias.scope !30, !noalias !305
  %82 = addrspacecast {} addrspace(10)* %box117 to {} addrspace(12)*, !dbg !457
  call void @ijl_throw({} addrspace(12)* %82) #16, !dbg !457
  unreachable, !dbg !457

L359:                                             ; preds = %L333
  ret {} addrspace(10)* %21, !dbg !315
}

; Function Attrs: mustprogress willreturn
define internal { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia___6184({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2") local_unnamed_addr #12 !dbg !460 {
top:
  %3 = alloca { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %4 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 0
  %5 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %5, align 8
  %6 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %7 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 2
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %7, align 8
  %8 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 3
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %8, align 8
  %9 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 4
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %9, align 8
  %10 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 7
  %11 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %10 to {} addrspace(10)**
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %11, align 8
  %12 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 10
  %13 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %12 to {} addrspace(10)**
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %13, align 8
  %14 = getelementptr { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i64 0, i32 13
  %15 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %14 to {} addrspace(10)**
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %15, align 8
  %"iv'ac" = alloca i64, align 8
  %newstruct144 = alloca [1 x [1 x i64]], i64 1, align 8
  %16 = bitcast [1 x [1 x i64]]* %newstruct144 to i8*
  %newstruct51 = alloca [1 x [1 x i64]], i64 1, align 8
  %17 = bitcast [1 x [1 x i64]]* %newstruct51 to i8*
  %18 = bitcast i8* %17 to [1 x [1 x i64]]*, !enzyme_caststack !10
  %19 = bitcast i8* %16 to [1 x [1 x i64]]*, !enzyme_caststack !10
  %20 = call {}*** @julia.get_pgcstack() #14
  %current_task1211 = getelementptr inbounds {}**, {}*** %20, i64 -14
  %current_task1 = bitcast {}*** %current_task1211 to {}**
  %ptls_field212 = getelementptr inbounds {}**, {}*** %20, i64 2
  %21 = bitcast {}*** %ptls_field212 to i64***
  %ptls_load213214 = load i64**, i64*** %21, align 8, !tbaa !11, !alias.scope !461, !noalias !464
  %22 = getelementptr inbounds i64*, i64** %ptls_load213214, i64 2
  %safepoint = load i64*, i64** %22, align 8, !tbaa !15, !invariant.load !10, !alias.scope !466, !noalias !469
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #14, !dbg !471
  fence syncscope("singlethread") seq_cst
  %.phi.trans.insert = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*
  %"'ipc21" = bitcast {} addrspace(10)* %"'" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %23 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert199 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %23 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert199, i64 0, i32 1
  %arraylen.pre = load i64, i64 addrspace(11)* %arraylen_ptr.phi.trans.insert, align 8, !dbg !472, !tbaa !47, !range !50, !alias.scope !476, !noalias !479
  %24 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 5, !dbg !472
  store i64 %arraylen.pre, i64* %24, align 8, !dbg !472
  %"'ipc17" = bitcast {} addrspace(10)* %"'1" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !472
  %25 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !472
  %26 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %25 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !472
  %arraylen_ptr4235 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %26, i64 0, i32 1, !dbg !472
  %arraylen5236 = load i64, i64 addrspace(11)* %arraylen_ptr4235, align 8, !dbg !472, !tbaa !47, !range !50, !alias.scope !481, !noalias !484
  %27 = icmp eq i64 %arraylen.pre, %arraylen5236, !dbg !486
  br i1 %27, label %L31.lr.ph, label %L24, !dbg !489

L31.lr.ph:                                        ; preds = %top
  %"'ipc13" = bitcast {} addrspace(10)* %"'2" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !490
  %28 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !490
  %29 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %28 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !472
  %arraylen_ptr4 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %29, i64 0, i32 1, !dbg !472
  %arraylen5 = load i64, i64 addrspace(11)* %arraylen_ptr4, align 8, !dbg !472, !tbaa !47, !range !50, !alias.scope !493, !noalias !496
  %30 = icmp eq i64 %arraylen.pre, %arraylen5, !dbg !486
  br i1 %30, label %L115, label %L24, !dbg !489

L24:                                              ; preds = %L31.lr.ph, %top
  %arraylen5.lcssa = phi i64 [ %arraylen5236, %top ], [ %arraylen5, %L31.lr.ph ], !dbg !472
  %box = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187409184 to {}*) to {} addrspace(10)*)) #15, !dbg !498
  %memcpy_refined_dst = bitcast {} addrspace(10)* %box to i64 addrspace(10)*, !dbg !498
  store i64 %arraylen.pre, i64 addrspace(10)* %memcpy_refined_dst, align 8, !dbg !498, !tbaa !26, !alias.scope !30, !noalias !499
  %box10 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187409184 to {}*) to {} addrspace(10)*)) #15, !dbg !498
  %memcpy_refined_dst12 = bitcast {} addrspace(10)* %box10 to i64 addrspace(10)*, !dbg !498
  store i64 %arraylen5.lcssa, i64 addrspace(10)* %memcpy_refined_dst12, align 8, !dbg !498, !tbaa !26, !alias.scope !30, !noalias !499
  %31 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5184905104 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5139351968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972800 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972768 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %box10, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267972736 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346233184 to {}*) to {} addrspace(10)*)) #16, !dbg !498
  %box14 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #15, !dbg !498
  %32 = bitcast {} addrspace(10)* %box14 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !498
  %33 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %32, i64 0, i64 0, !dbg !498
  store {} addrspace(10)* %31, {} addrspace(10)* addrspace(10)* %33, align 8, !dbg !498, !tbaa !26, !alias.scope !30, !noalias !499
  %34 = addrspacecast {} addrspace(10)* %box14 to {} addrspace(12)*, !dbg !498
  call void @ijl_throw({} addrspace(12)* %34) #17, !dbg !498
  unreachable, !dbg !498

L115:                                             ; preds = %L31.lr.ph
  %35 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !502
  %36 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !502
  %memcpy_refined_dst53 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %18, i64 0, i64 0, i64 0, !dbg !510
  store i64 %arraylen.pre, i64* %memcpy_refined_dst53, align 8, !dbg !510, !tbaa !86, !alias.scope !88, !noalias !512
  %37 = call {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraylen.pre), !dbg !513
  %38 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 0, !dbg !513
  store {} addrspace(10)* %37, {} addrspace(10)** %38, align 8, !dbg !513
  %39 = mul i64 %arraylen.pre, 8, !dbg !513
  %40 = bitcast {} addrspace(10)* %37 to i8 addrspace(13)* addrspace(10)*, !dbg !513
  %41 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %40, align 8, !dbg !513
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* align 8 %41, i8 0, i64 %39, i1 false), !dbg !513
  %42 = call noalias nonnull {} addrspace(10)* @ijl_alloc_array_1d({} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5134799120 to {}*) to {} addrspace(10)*), i64 %arraylen.pre) #18, !dbg !513
  %43 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 1, !dbg !521
  store {} addrspace(10)* %42, {} addrspace(10)** %43, align 8, !dbg !521
  %44 = addrspacecast {} addrspace(10)* %42 to {} addrspace(11)*, !dbg !521
  %45 = bitcast {} addrspace(10)* %42 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !521
  %46 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %45 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !521
  %arraylen_ptr63 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %46, i64 0, i32 1, !dbg !521
  %arraylen64 = load i64, i64 addrspace(11)* %arraylen_ptr63, align 8, !dbg !521, !tbaa !47, !range !50, !alias.scope !525, !noalias !528
  %.not.not = icmp eq i64 %arraylen64, %arraylen.pre, !dbg !530
  br i1 %.not.not, label %L161, label %L287, !dbg !523

L161:                                             ; preds = %L115
  %.not = icmp eq {} addrspace(11)* %44, %.phi.trans.insert, !dbg !534
  br i1 %.not, label %L177, label %L164, !dbg !534

L164:                                             ; preds = %L161
  %47 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %44) #19, !dbg !539
  %48 = bitcast {}* %47 to i8**, !dbg !539
  %arrayptr136 = load i8*, i8** %48, align 8, !dbg !539, !tbaa !133, !alias.scope !525, !noalias !528, !nonnull !10
  %49 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %.phi.trans.insert) #19, !dbg !539
  %50 = bitcast {}* %49 to i8**, !dbg !539
  %arrayptr138 = load i8*, i8** %50, align 8, !dbg !539, !tbaa !133, !alias.scope !476, !noalias !479, !nonnull !10
  %.not226 = icmp eq i8* %arrayptr136, %arrayptr138, !dbg !544
  %51 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 6, !dbg !543
  store i1 %.not226, i1* %51, align 1, !dbg !543
  br i1 %.not226, label %L172, label %L177, !dbg !543

L172:                                             ; preds = %L164
  %52 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'"), !dbg !547
  %53 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 2, !dbg !547
  store {} addrspace(10)* %52, {} addrspace(10)** %53, align 8, !dbg !547
  %54 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !547
  %55 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %54, i32 0, i32 3, !dbg !547
  %56 = load i16, i16 addrspace(10)* %55, align 2, !dbg !547
  %57 = zext i16 %56 to i64, !dbg !547
  %58 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !547
  %59 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %58, i32 0, i32 1, !dbg !547
  %60 = load i64, i64 addrspace(10)* %59, align 8, !dbg !547
  %61 = mul i64 %60, %57, !dbg !547
  %62 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !547
  %63 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %62, align 8, !dbg !547
  %64 = bitcast {} addrspace(10)* %52 to i8 addrspace(13)* addrspace(10)*, !dbg !547
  %65 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %64, align 8, !dbg !547
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %65, i8 0, i64 %61, i1 false), !dbg !547
  %66 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %0) #14, !dbg !547
  %"'ipc20" = bitcast {} addrspace(10)* %52 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %67 = bitcast {} addrspace(10)* %66 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %68 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 7
  store { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %67, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %68, align 8
  %.phi.trans.insert201 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %67 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr68.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert201, i64 0, i32 1
  %arraylen69.pre = load i64, i64 addrspace(11)* %arraylen_ptr68.phi.trans.insert, align 8, !dbg !549, !tbaa !47, !range !50, !alias.scope !553, !noalias !556
  br label %L177, !dbg !558

L177:                                             ; preds = %L172, %L164, %L161
  %69 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc20", %L172 ], [ %"'ipc21", %L161 ], [ %"'ipc21", %L164 ], !dbg !549
  %nodecayed..pre-phi203 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %67, %L172 ], [ %23, %L161 ], [ %23, %L164 ], !dbg !549
  %arraylen69 = phi i64 [ %arraylen69.pre, %L172 ], [ %arraylen.pre, %L161 ], [ %arraylen.pre, %L164 ], !dbg !549
  %"'ipc22" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %69 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !565
  %70 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi203 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !565
  %71 = icmp eq i64 %arraylen69, 1, !dbg !565
  %72 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 8, !dbg !569
  store i1 %71, i1* %72, align 1, !dbg !569
  %.not215 = icmp eq {} addrspace(11)* %44, %35, !dbg !569
  br i1 %.not215, label %L202, label %L189, !dbg !569

L189:                                             ; preds = %L177
  %73 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %44) #19, !dbg !572
  %74 = bitcast {}* %73 to i8**, !dbg !572
  %arrayptr131 = load i8*, i8** %74, align 8, !dbg !572, !tbaa !133, !alias.scope !525, !noalias !528, !nonnull !10
  %75 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %35) #19, !dbg !572
  %76 = bitcast {}* %75 to i8**, !dbg !572
  %arrayptr133 = load i8*, i8** %76, align 8, !dbg !572, !tbaa !133, !alias.scope !481, !noalias !484, !nonnull !10
  %.not225 = icmp eq i8* %arrayptr131, %arrayptr133, !dbg !577
  %77 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 9, !dbg !576
  store i1 %.not225, i1* %77, align 1, !dbg !576
  br i1 %.not225, label %L197, label %L202, !dbg !576

L197:                                             ; preds = %L189
  %78 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'1"), !dbg !580
  %79 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 3, !dbg !580
  store {} addrspace(10)* %78, {} addrspace(10)** %79, align 8, !dbg !580
  %80 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !580
  %81 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %80, i32 0, i32 3, !dbg !580
  %82 = load i16, i16 addrspace(10)* %81, align 2, !dbg !580
  %83 = zext i16 %82 to i64, !dbg !580
  %84 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !580
  %85 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %84, i32 0, i32 1, !dbg !580
  %86 = load i64, i64 addrspace(10)* %85, align 8, !dbg !580
  %87 = mul i64 %86, %83, !dbg !580
  %88 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !580
  %89 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %88, align 8, !dbg !580
  %90 = bitcast {} addrspace(10)* %78 to i8 addrspace(13)* addrspace(10)*, !dbg !580
  %91 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %90, align 8, !dbg !580
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %91, i8 0, i64 %87, i1 false), !dbg !580
  %92 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %1) #14, !dbg !580
  %"'ipc16" = bitcast {} addrspace(10)* %78 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !582
  %93 = bitcast {} addrspace(10)* %92 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !582
  %94 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 10, !dbg !558
  store { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %93, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %94, align 8, !dbg !558
  br label %L202, !dbg !558

L202:                                             ; preds = %L197, %L189, %L177
  %95 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc16", %L197 ], [ %"'ipc17", %L189 ], [ %"'ipc17", %L177 ], !dbg !582
  %nodecayed..pre-phi206 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %93, %L197 ], [ %25, %L189 ], [ %25, %L177 ], !dbg !582
  %"'ipc18" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %95 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !582
  %96 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi206 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !582
  %arraylen_ptr73 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %96, i64 0, i32 1, !dbg !582
  %arraylen74 = load i64, i64 addrspace(11)* %arraylen_ptr73, align 8, !dbg !582, !tbaa !47, !range !50, !alias.scope !586, !noalias !589
  %97 = icmp eq i64 %arraylen74, 1, !dbg !591
  %98 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 11, !dbg !595
  store i1 %97, i1* %98, align 1, !dbg !595
  %.not216 = icmp eq {} addrspace(11)* %44, %36, !dbg !595
  br i1 %.not216, label %L227, label %L214, !dbg !595

L214:                                             ; preds = %L202
  %99 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %44) #19, !dbg !598
  %100 = bitcast {}* %99 to i8**, !dbg !598
  %arrayptr126 = load i8*, i8** %100, align 8, !dbg !598, !tbaa !133, !alias.scope !525, !noalias !528, !nonnull !10
  %101 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %36) #19, !dbg !598
  %102 = bitcast {}* %101 to i8**, !dbg !598
  %arrayptr128 = load i8*, i8** %102, align 8, !dbg !598, !tbaa !133, !alias.scope !493, !noalias !496, !nonnull !10
  %.not224 = icmp eq i8* %arrayptr126, %arrayptr128, !dbg !603
  %103 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 12, !dbg !602
  store i1 %.not224, i1* %103, align 1, !dbg !602
  br i1 %.not224, label %L222, label %L227, !dbg !602

L222:                                             ; preds = %L214
  %104 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %"'2"), !dbg !606
  %105 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 4, !dbg !606
  store {} addrspace(10)* %104, {} addrspace(10)** %105, align 8, !dbg !606
  %106 = bitcast {} addrspace(10)* %2 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !606
  %107 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %106, i32 0, i32 3, !dbg !606
  %108 = load i16, i16 addrspace(10)* %107, align 2, !dbg !606
  %109 = zext i16 %108 to i64, !dbg !606
  %110 = bitcast {} addrspace(10)* %2 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !606
  %111 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %110, i32 0, i32 1, !dbg !606
  %112 = load i64, i64 addrspace(10)* %111, align 8, !dbg !606
  %113 = mul i64 %112, %109, !dbg !606
  %114 = bitcast {} addrspace(10)* %"'2" to i8 addrspace(13)* addrspace(10)*, !dbg !606
  %115 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %114, align 8, !dbg !606
  %116 = bitcast {} addrspace(10)* %104 to i8 addrspace(13)* addrspace(10)*, !dbg !606
  %117 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %116, align 8, !dbg !606
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %117, i8 0, i64 %113, i1 false), !dbg !606
  %118 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %2) #14, !dbg !606
  %"'ipc12" = bitcast {} addrspace(10)* %104 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !608
  %119 = bitcast {} addrspace(10)* %118 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !608
  %120 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 13, !dbg !558
  store { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %119, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %120, align 8, !dbg !558
  br label %L227, !dbg !558

L227:                                             ; preds = %L222, %L214, %L202
  %121 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc12", %L222 ], [ %"'ipc13", %L214 ], [ %"'ipc13", %L202 ], !dbg !608
  %nodecayed..pre-phi210 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %119, %L222 ], [ %28, %L214 ], [ %28, %L202 ], !dbg !608
  %"'ipc14" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %121 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !608
  %122 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi210 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !608
  %arraylen_ptr79 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %122, i64 0, i32 1, !dbg !608
  %arraylen80 = load i64, i64 addrspace(11)* %arraylen_ptr79, align 8, !dbg !608, !tbaa !47, !range !50, !alias.scope !612, !noalias !615
  %123 = icmp eq i64 %arraylen80, 1, !dbg !617
  %124 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 14, !dbg !621
  store i1 %123, i1* %124, align 1, !dbg !621
  %125 = icmp eq i64 %arraylen.pre, 0, !dbg !621
  br i1 %125, label %L297, label %L249.lr.ph, !dbg !622

L249.lr.ph:                                       ; preds = %L227
  %"'ipc23" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc22" to double addrspace(13)* addrspace(11)*
  %126 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %70 to double addrspace(13)* addrspace(11)*
  %"arrayptr218'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc23", align 8, !tbaa !133, !alias.scope !624, !noalias !629, !nonnull !10
  %arrayptr218 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %126, align 8, !tbaa !133, !alias.scope !631, !noalias !632, !nonnull !10
  %"'ipc19" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc18" to double addrspace(13)* addrspace(11)*
  %127 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %96 to double addrspace(13)* addrspace(11)*
  %"arrayptr89219'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc19", align 8, !tbaa !133, !alias.scope !633, !noalias !634, !nonnull !10
  %arrayptr89219 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %127, align 8, !tbaa !133, !alias.scope !635, !noalias !589, !nonnull !10
  %"'ipc15" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc14" to double addrspace(13)* addrspace(11)*
  %128 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %122 to double addrspace(13)* addrspace(11)*
  %"arrayptr93220'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc15", align 8, !tbaa !133, !alias.scope !636, !noalias !637, !nonnull !10
  %arrayptr93220 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %128, align 8, !tbaa !133, !alias.scope !638, !noalias !615, !nonnull !10
  %"'ipc" = bitcast {} addrspace(10)* %37 to double addrspace(13)* addrspace(10)*
  %129 = bitcast {} addrspace(10)* %42 to double addrspace(13)* addrspace(10)*
  %"'ipc11" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %130 = addrspacecast double addrspace(13)* addrspace(10)* %129 to double addrspace(13)* addrspace(11)*
  %"arrayptr96221'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc11", align 8, !tbaa !133, !alias.scope !639, !noalias !640, !nonnull !10
  %arrayptr96221 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %130, align 8, !tbaa !133, !alias.scope !641, !noalias !528, !nonnull !10
  %131 = add nsw i64 %arraylen.pre, -1, !dbg !642
  br label %L249, !dbg !642

L249:                                             ; preds = %L249, %L249.lr.ph
  %iv = phi i64 [ %iv.next, %L249 ], [ 0, %L249.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !643
  %132 = select i1 %71, i64 0, i64 %iv, !dbg !646
  %133 = getelementptr inbounds double, double addrspace(13)* %arrayptr218, i64 %132, !dbg !646
  %arrayref = load double, double addrspace(13)* %133, align 8, !dbg !646, !tbaa !237, !alias.scope !653, !noalias !656
  %134 = select i1 %97, i64 0, i64 %iv, !dbg !658
  %135 = getelementptr inbounds double, double addrspace(13)* %arrayptr89219, i64 %134, !dbg !658
  %arrayref90 = load double, double addrspace(13)* %135, align 8, !dbg !658, !tbaa !237, !alias.scope !661, !noalias !664
  %136 = select i1 %123, i64 0, i64 %iv, !dbg !666
  %137 = getelementptr inbounds double, double addrspace(13)* %arrayptr93220, i64 %136, !dbg !666
  %arrayref94 = load double, double addrspace(13)* %137, align 8, !dbg !666, !tbaa !237, !alias.scope !669, !noalias !672
  %138 = fadd double %arrayref, %arrayref90, !dbg !674
  %139 = fadd double %138, %arrayref94, !dbg !674
  %140 = getelementptr inbounds double, double addrspace(13)* %arrayptr96221, i64 %iv, !dbg !678
  store double %139, double addrspace(13)* %140, align 8, !dbg !678, !tbaa !237, !alias.scope !679, !noalias !682
  %exitcond.not = icmp eq i64 %iv.next, %arraylen.pre, !dbg !684
  br i1 %exitcond.not, label %L297.loopexit, label %L249, !dbg !642, !llvm.loop !685

L287:                                             ; preds = %L115
  %141 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %19, i64 0, i64 0, i64 0, !dbg !686
  store i64 %arraylen64, i64* %141, align 8, !dbg !686, !tbaa !86, !alias.scope !88, !noalias !512
  %142 = addrspacecast [1 x [1 x i64]]* %19 to [1 x [1 x i64]] addrspace(11)*, !dbg !523
  %143 = addrspacecast [1 x [1 x i64]]* %18 to [1 x [1 x i64]] addrspace(11)*, !dbg !523
  call fastcc void @julia_throwdm_6189([1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %142, [1 x [1 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %143) #17, !dbg !523
  unreachable, !dbg !523

L297.loopexit:                                    ; preds = %L249
  br label %L297, !dbg !690

L297:                                             ; preds = %L297.loopexit, %L227
  %arraylen101 = load i64, i64 addrspace(11)* %arraylen_ptr.phi.trans.insert, align 8, !dbg !690, !tbaa !47, !range !50, !alias.scope !476, !noalias !479
  %arraylen104 = load i64, i64 addrspace(11)* %arraylen_ptr4235, align 8, !dbg !696, !tbaa !47, !range !50, !alias.scope !481, !noalias !484
  %arraylen107 = load i64, i64 addrspace(11)* %arraylen_ptr4, align 8, !dbg !696, !tbaa !47, !range !50, !alias.scope !493, !noalias !496
  %144 = icmp eq i64 %arraylen107, %arraylen104, !dbg !699
  %145 = icmp eq i64 %arraylen104, 1, !dbg !701
  %value_phi109 = or i1 %145, %144, !dbg !701
  %146 = getelementptr inbounds { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }* %4, i32 0, i32 15, !dbg !702
  store i1 %value_phi109, i1* %146, align 1, !dbg !702
  br i1 %value_phi109, label %L333, label %L314, !dbg !702

L314:                                             ; preds = %L297
  %.not223 = icmp eq i64 %arraylen107, 1, !dbg !701
  br i1 %.not223, label %L333, label %L322, !dbg !702

L322:                                             ; preds = %L314
  %147 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen104) #18, !dbg !702
  %148 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen107) #18, !dbg !702
  %149 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5184092592 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5139351968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5228993744 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %147, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5228993712 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %148) #16, !dbg !702
  %box122 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #15, !dbg !702
  %150 = bitcast {} addrspace(10)* %box122 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !702
  %151 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %150, i64 0, i64 0, !dbg !702
  store {} addrspace(10)* %149, {} addrspace(10)* addrspace(10)* %151, align 8, !dbg !702, !tbaa !26, !alias.scope !30, !noalias !499
  %152 = addrspacecast {} addrspace(10)* %box122 to {} addrspace(12)*, !dbg !702
  call void @ijl_throw({} addrspace(12)* %152) #17, !dbg !702
  unreachable, !dbg !702

L333:                                             ; preds = %L314, %L297
  %value_phi110 = phi i64 [ %arraylen107, %L297 ], [ %arraylen104, %L314 ]
  %153 = icmp eq i64 %value_phi110, %arraylen101, !dbg !705
  %154 = icmp eq i64 %arraylen101, 1, !dbg !707
  %value_phi114 = or i1 %154, %153, !dbg !707
  %.not222 = icmp eq i64 %value_phi110, 1
  %or.cond = or i1 %.not222, %value_phi114, !dbg !708
  br i1 %or.cond, label %L359, label %L349, !dbg !708

L349:                                             ; preds = %L333
  %155 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %arraylen101) #18, !dbg !708
  %156 = call noalias nonnull {} addrspace(10)* @ijl_box_int64(i64 signext %value_phi110) #18, !dbg !708
  %157 = call nonnull {} addrspace(10)* ({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)*, {} addrspace(10)*, {} addrspace(10)*, ...) @julia.call2({} addrspace(10)* ({} addrspace(10)*, {} addrspace(10)**, i32, {} addrspace(10)*)* noundef nonnull @ijl_invoke, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5184092592 to {}*) to {} addrspace(10)*), {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5139351968 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5228993744 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %155, {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5228993712 to {}*) to {} addrspace(10)*), {} addrspace(10)* nonnull %156) #16, !dbg !708
  %box117 = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #15, !dbg !708
  %158 = bitcast {} addrspace(10)* %box117 to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !708
  %159 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %158, i64 0, i64 0, !dbg !708
  store {} addrspace(10)* %157, {} addrspace(10)* addrspace(10)* %159, align 8, !dbg !708, !tbaa !26, !alias.scope !30, !noalias !499
  %160 = addrspacecast {} addrspace(10)* %box117 to {} addrspace(12)*, !dbg !708
  call void @ijl_throw({} addrspace(12)* %160) #17, !dbg !708
  unreachable, !dbg !708

L359:                                             ; preds = %L333
  %161 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 1, !dbg !509
  store {} addrspace(10)* %42, {} addrspace(10)** %161, align 8, !dbg !509
  %162 = getelementptr inbounds { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %3, i32 0, i32 2, !dbg !509
  store {} addrspace(10)* %37, {} addrspace(10)** %162, align 8, !dbg !509
  %163 = load { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %3, align 8, !dbg !509
  ret { { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 }, {} addrspace(10)*, {} addrspace(10)* } %163, !dbg !509
}

; Function Attrs: mustprogress willreturn
define internal void @diffejulia___6184({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", {} addrspace(10)* align 16 dereferenceable(40) %2, {} addrspace(10)* align 16 %"'2", { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg) local_unnamed_addr #12 !dbg !713 {
top:
  %"iv'ac" = alloca i64, align 8
  %"'de" = alloca double, align 8
  %3 = getelementptr double, double* %"'de", i64 0
  store double 0.000000e+00, double* %3, align 8
  %"'de64" = alloca double, align 8
  %4 = getelementptr double, double* %"'de64", i64 0
  store double 0.000000e+00, double* %4, align 8
  %"arrayref94'de" = alloca double, align 8
  %5 = getelementptr double, double* %"arrayref94'de", i64 0
  store double 0.000000e+00, double* %5, align 8
  %"arrayref'de" = alloca double, align 8
  %6 = getelementptr double, double* %"arrayref'de", i64 0
  store double 0.000000e+00, double* %6, align 8
  %"arrayref90'de" = alloca double, align 8
  %7 = getelementptr double, double* %"arrayref90'de", i64 0
  store double 0.000000e+00, double* %7, align 8
  %8 = bitcast {} addrspace(10)* %2 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %9 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %8, i32 0, i32 3
  %10 = load i16, i16 addrspace(10)* %9, align 2
  %11 = zext i16 %10 to i64
  %12 = bitcast {} addrspace(10)* %2 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %13 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %12, i32 0, i32 1
  %14 = load i64, i64 addrspace(10)* %13, align 8
  %15 = mul i64 %14, %11
  %16 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %17 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %16, i32 0, i32 3
  %18 = load i16, i16 addrspace(10)* %17, align 2
  %19 = zext i16 %18 to i64
  %20 = bitcast {} addrspace(10)* %1 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %21 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %20, i32 0, i32 1
  %22 = load i64, i64 addrspace(10)* %21, align 8
  %23 = mul i64 %22, %19
  %24 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %25 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %24, i32 0, i32 3
  %26 = load i16, i16 addrspace(10)* %25, align 2
  %27 = zext i16 %26 to i64
  %28 = bitcast {} addrspace(10)* %0 to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %29 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %28, i32 0, i32 1
  %30 = load i64, i64 addrspace(10)* %29, align 8
  %31 = mul i64 %30, %27
  %32 = call {}*** @julia.get_pgcstack() #16
  %.phi.trans.insert = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*
  %"'ipc58" = bitcast {} addrspace(10)* %"'" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %33 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %arraylen.pre = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 5, !dbg !714
  %"'ipc53" = bitcast {} addrspace(10)* %"'1" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !714
  %34 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !714
  br i1 true, label %L31.lr.ph, label %L24, !dbg !718

L31.lr.ph:                                        ; preds = %top
  %"'ipc48" = bitcast {} addrspace(10)* %"'2" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !719
  %35 = bitcast {} addrspace(10)* %2 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !719
  br i1 true, label %L115, label %L24, !dbg !718

L24:                                              ; preds = %L31.lr.ph, %top
  unreachable

L115:                                             ; preds = %L31.lr.ph
  %36 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !722
  %37 = addrspacecast {} addrspace(10)* %2 to {} addrspace(11)*, !dbg !722
  %38 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 0, !dbg !730
  %39 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 1, !dbg !730
  %40 = addrspacecast {} addrspace(10)* %39 to {} addrspace(11)*, !dbg !738
  br i1 true, label %L161, label %L287, !dbg !740

L161:                                             ; preds = %L115
  %.not = icmp eq {} addrspace(11)* %40, %.phi.trans.insert, !dbg !742
  br i1 %.not, label %L177, label %L164, !dbg !742

L164:                                             ; preds = %L161
  %.not226 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 6, !dbg !747
  br i1 %.not226, label %L172, label %L177, !dbg !747

L172:                                             ; preds = %L164
  %"'ip_phi4" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 2, !dbg !748
  %"'ipc57" = bitcast {} addrspace(10)* %"'ip_phi4" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %41 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 7
  br label %L177, !dbg !750

L177:                                             ; preds = %L172, %L164, %L161
  %42 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc57", %L172 ], [ %"'ipc58", %L161 ], [ %"'ipc58", %L164 ], !dbg !757
  %"'ipc59" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %42 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !761
  %43 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 8, !dbg !765
  %.not215 = icmp eq {} addrspace(11)* %40, %36, !dbg !765
  br i1 %.not215, label %L202, label %L189, !dbg !765

L189:                                             ; preds = %L177
  %.not225 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 9, !dbg !768
  br i1 %.not225, label %L197, label %L202, !dbg !768

L197:                                             ; preds = %L189
  %"'ip_phi7" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 3, !dbg !769
  %"'ipc52" = bitcast {} addrspace(10)* %"'ip_phi7" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !771
  %44 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 10, !dbg !771
  br label %L202, !dbg !750

L202:                                             ; preds = %L197, %L189, %L177
  %45 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc52", %L197 ], [ %"'ipc53", %L189 ], [ %"'ipc53", %L177 ], !dbg !771
  %"'ipc54" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %45 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !771
  %46 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 11, !dbg !775
  %.not216 = icmp eq {} addrspace(11)* %40, %37, !dbg !775
  br i1 %.not216, label %L227, label %L214, !dbg !775

L214:                                             ; preds = %L202
  %.not224 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 12, !dbg !778
  br i1 %.not224, label %L222, label %L227, !dbg !778

L222:                                             ; preds = %L214
  %"'ip_phi10" = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 4, !dbg !779
  %"'ipc47" = bitcast {} addrspace(10)* %"'ip_phi10" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !781
  %47 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 13, !dbg !781
  br label %L227, !dbg !750

L227:                                             ; preds = %L222, %L214, %L202
  %48 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc47", %L222 ], [ %"'ipc48", %L214 ], [ %"'ipc48", %L202 ], !dbg !781
  %"'ipc49" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %48 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !781
  %49 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 14, !dbg !785
  %50 = icmp eq i64 %arraylen.pre, 0, !dbg !785
  br i1 %50, label %L297, label %L249.lr.ph, !dbg !786

L249.lr.ph:                                       ; preds = %L227
  %"'ipc60" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc59" to double addrspace(13)* addrspace(11)*
  %"arrayptr218'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc60", align 8, !tbaa !133, !alias.scope !788, !noalias !791, !nonnull !10, !invariant.group !793
  %"'ipc55" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc54" to double addrspace(13)* addrspace(11)*
  %"arrayptr89219'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc55", align 8, !tbaa !133, !alias.scope !794, !noalias !797, !nonnull !10, !invariant.group !799
  %"'ipc50" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc49" to double addrspace(13)* addrspace(11)*
  %"arrayptr93220'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc50", align 8, !tbaa !133, !alias.scope !800, !noalias !803, !nonnull !10, !invariant.group !805
  %"'ipc" = bitcast {} addrspace(10)* %38 to double addrspace(13)* addrspace(10)*
  %"'ipc44" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr96221'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc44", align 8, !tbaa !133, !alias.scope !806, !noalias !809, !nonnull !10, !invariant.group !811
  %51 = add nsw i64 %arraylen.pre, -1, !dbg !812
  br label %L249, !dbg !812

L249:                                             ; preds = %L249, %L249.lr.ph
  %iv = phi i64 [ %iv.next, %L249 ], [ 0, %L249.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !813
  %52 = select i1 %43, i64 0, i64 %iv, !dbg !816
  %"'ipg71" = getelementptr inbounds double, double addrspace(13)* %"arrayptr218'ipl", i64 %52, !dbg !816
  %53 = select i1 %46, i64 0, i64 %iv, !dbg !823
  %"'ipg68" = getelementptr inbounds double, double addrspace(13)* %"arrayptr89219'ipl", i64 %53, !dbg !823
  %54 = select i1 %49, i64 0, i64 %iv, !dbg !826
  %"'ipg66" = getelementptr inbounds double, double addrspace(13)* %"arrayptr93220'ipl", i64 %54, !dbg !826
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr96221'ipl", i64 %iv, !dbg !829
  %exitcond.not = icmp eq i64 %iv.next, %arraylen.pre, !dbg !830
  br i1 %exitcond.not, label %L297.loopexit, label %L249, !dbg !812, !llvm.loop !831

L287:                                             ; preds = %L115
  unreachable

L297.loopexit:                                    ; preds = %L249
  br label %L297, !dbg !832

L297:                                             ; preds = %L297.loopexit, %L227
  %value_phi109 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 15, !dbg !838
  br i1 %value_phi109, label %L333, label %L314, !dbg !838

L314:                                             ; preds = %L297
  br i1 true, label %L333, label %L322, !dbg !838

L322:                                             ; preds = %L314
  unreachable

L333:                                             ; preds = %L314, %L297
  br i1 true, label %L359, label %L349, !dbg !842

L349:                                             ; preds = %L333
  unreachable

L359:                                             ; preds = %L333
  br label %invertL359, !dbg !729

inverttop:                                        ; preds = %invertL31.lr.ph
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL31.lr.ph:                                  ; preds = %invertL115
  br label %inverttop

invertL115:                                       ; preds = %invertL161
  br label %invertL31.lr.ph

invertL161:                                       ; preds = %invertL177, %invertL164
  br label %invertL115

invertL164:                                       ; preds = %staging, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  br label %invertL161

invertL172:                                       ; preds = %staging
  %55 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 2, !dbg !748
  %56 = bitcast {} addrspace(10)* %"'" to i8 addrspace(13)* addrspace(10)*, !dbg !748
  %57 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %56, align 8, !dbg !748
  %58 = bitcast {} addrspace(10)* %55 to i8 addrspace(13)* addrspace(10)*, !dbg !748
  %59 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %58, align 8, !dbg !748
  %60 = bitcast i8 addrspace(13)* %59 to double addrspace(13)*, !dbg !748
  %61 = bitcast i8 addrspace(13)* %57 to double addrspace(13)*, !dbg !748
  %62 = udiv i64 %31, 8, !dbg !748
  %63 = icmp eq i64 %62, 0, !dbg !748
  br i1 %63, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !748

for.body.i:                                       ; preds = %for.body.i, %invertL172
  %idx.i = phi i64 [ 0, %invertL172 ], [ %idx.next.i, %for.body.i ], !dbg !748
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %60, i64 %idx.i, !dbg !748
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !748
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !748
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %61, i64 %idx.i, !dbg !748
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !748
  %64 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !748
  store double %64, double addrspace(13)* %src.i.i, align 1, !dbg !748
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !748
  %65 = icmp eq i64 %62, %idx.next.i, !dbg !748
  br i1 %65, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !748

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL172, %for.body.i
  br label %invertL164

invertL177:                                       ; preds = %invertL202, %invertL189
  %.not226_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 6
  br i1 %.not, label %invertL161, label %staging

invertL189:                                       ; preds = %staging36, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit103
  br label %invertL177

invertL197:                                       ; preds = %staging36
  %66 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 3, !dbg !769
  %67 = bitcast {} addrspace(10)* %"'1" to i8 addrspace(13)* addrspace(10)*, !dbg !769
  %68 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %67, align 8, !dbg !769
  %69 = bitcast {} addrspace(10)* %66 to i8 addrspace(13)* addrspace(10)*, !dbg !769
  %70 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %69, align 8, !dbg !769
  %71 = bitcast i8 addrspace(13)* %70 to double addrspace(13)*, !dbg !769
  %72 = bitcast i8 addrspace(13)* %68 to double addrspace(13)*, !dbg !769
  %73 = udiv i64 %23, 8, !dbg !769
  %74 = icmp eq i64 %73, 0, !dbg !769
  br i1 %74, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit103, label %for.body.i102, !dbg !769

for.body.i102:                                    ; preds = %for.body.i102, %invertL197
  %idx.i96 = phi i64 [ 0, %invertL197 ], [ %idx.next.i101, %for.body.i102 ], !dbg !769
  %dst.i.i97 = getelementptr inbounds double, double addrspace(13)* %71, i64 %idx.i96, !dbg !769
  %dst.i.l.i98 = load double, double addrspace(13)* %dst.i.i97, align 1, !dbg !769
  store double 0.000000e+00, double addrspace(13)* %dst.i.i97, align 1, !dbg !769
  %src.i.i99 = getelementptr inbounds double, double addrspace(13)* %72, i64 %idx.i96, !dbg !769
  %src.i.l.i100 = load double, double addrspace(13)* %src.i.i99, align 1, !dbg !769
  %75 = fadd fast double %src.i.l.i100, %dst.i.l.i98, !dbg !769
  store double %75, double addrspace(13)* %src.i.i99, align 1, !dbg !769
  %idx.next.i101 = add nuw i64 %idx.i96, 1, !dbg !769
  %76 = icmp eq i64 %73, %idx.next.i101, !dbg !769
  br i1 %76, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit103, label %for.body.i102, !dbg !769

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit103: ; preds = %invertL197, %for.body.i102
  br label %invertL189

invertL202:                                       ; preds = %invertL227, %invertL214
  %.not225_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 9
  br i1 %.not215, label %invertL177, label %staging36

invertL214:                                       ; preds = %staging43, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit111
  br label %invertL202

invertL222:                                       ; preds = %staging43
  %77 = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 4, !dbg !779
  %78 = bitcast {} addrspace(10)* %"'2" to i8 addrspace(13)* addrspace(10)*, !dbg !779
  %79 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %78, align 8, !dbg !779
  %80 = bitcast {} addrspace(10)* %77 to i8 addrspace(13)* addrspace(10)*, !dbg !779
  %81 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %80, align 8, !dbg !779
  %82 = bitcast i8 addrspace(13)* %81 to double addrspace(13)*, !dbg !779
  %83 = bitcast i8 addrspace(13)* %79 to double addrspace(13)*, !dbg !779
  %84 = udiv i64 %15, 8, !dbg !779
  %85 = icmp eq i64 %84, 0, !dbg !779
  br i1 %85, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit111, label %for.body.i110, !dbg !779

for.body.i110:                                    ; preds = %for.body.i110, %invertL222
  %idx.i104 = phi i64 [ 0, %invertL222 ], [ %idx.next.i109, %for.body.i110 ], !dbg !779
  %dst.i.i105 = getelementptr inbounds double, double addrspace(13)* %82, i64 %idx.i104, !dbg !779
  %dst.i.l.i106 = load double, double addrspace(13)* %dst.i.i105, align 1, !dbg !779
  store double 0.000000e+00, double addrspace(13)* %dst.i.i105, align 1, !dbg !779
  %src.i.i107 = getelementptr inbounds double, double addrspace(13)* %83, i64 %idx.i104, !dbg !779
  %src.i.l.i108 = load double, double addrspace(13)* %src.i.i107, align 1, !dbg !779
  %86 = fadd fast double %src.i.l.i108, %dst.i.l.i106, !dbg !779
  store double %86, double addrspace(13)* %src.i.i107, align 1, !dbg !779
  %idx.next.i109 = add nuw i64 %idx.i104, 1, !dbg !779
  %87 = icmp eq i64 %84, %idx.next.i109, !dbg !779
  br i1 %87, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit111, label %for.body.i110, !dbg !779

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit111: ; preds = %invertL222, %for.body.i110
  br label %invertL214

invertL227:                                       ; preds = %invertL297, %invertL249.lr.ph
  %.not224_unwrap = extractvalue { {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, {} addrspace(10)*, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1, i1 } %tapeArg, 12
  br i1 %.not216, label %invertL202, label %staging43

invertL249.lr.ph:                                 ; preds = %invertL249
  br label %invertL227

invertL249:                                       ; preds = %mergeinvertL249_L297.loopexit, %incinvertL249
  %88 = load i64, i64* %"iv'ac", align 8, !dbg !829
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %38 to double addrspace(13)* addrspace(10)*, !dbg !829
  %"'ipc44_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !829
  %"arrayptr96221'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc44_unwrap", align 8, !tbaa !133, !alias.scope !806, !noalias !809, !nonnull !10, !invariant.group !811
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr96221'ipl_unwrap", i64 %88, !dbg !829
  %89 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !829, !tbaa !237, !alias.scope !845, !noalias !848
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !829, !tbaa !237, !alias.scope !845, !noalias !848
  %90 = load double, double* %"'de", align 8, !dbg !829
  %91 = fadd fast double %90, %89, !dbg !829
  store double %91, double* %"'de", align 8, !dbg !829
  %92 = load double, double* %"'de", align 8, !dbg !850
  store double 0.000000e+00, double* %"'de", align 8, !dbg !850
  %93 = load double, double* %"'de64", align 8, !dbg !850
  %94 = fadd fast double %93, %92, !dbg !850
  store double %94, double* %"'de64", align 8, !dbg !850
  %95 = load double, double* %"arrayref94'de", align 8, !dbg !850
  %96 = fadd fast double %95, %92, !dbg !850
  store double %96, double* %"arrayref94'de", align 8, !dbg !850
  %97 = load double, double* %"'de64", align 8, !dbg !850
  store double 0.000000e+00, double* %"'de64", align 8, !dbg !850
  %98 = load double, double* %"arrayref'de", align 8, !dbg !850
  %99 = fadd fast double %98, %97, !dbg !850
  store double %99, double* %"arrayref'de", align 8, !dbg !850
  %100 = load double, double* %"arrayref90'de", align 8, !dbg !850
  %101 = fadd fast double %100, %97, !dbg !850
  store double %101, double* %"arrayref90'de", align 8, !dbg !850
  %102 = load double, double* %"arrayref94'de", align 8, !dbg !826
  store double 0.000000e+00, double* %"arrayref94'de", align 8, !dbg !826
  %103 = load i64, i64* %"iv'ac", align 8, !dbg !826
  %"'ipc50_unwrap" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc49" to double addrspace(13)* addrspace(11)*, !dbg !826
  %"arrayptr93220'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc50_unwrap", align 8, !tbaa !133, !alias.scope !800, !noalias !803, !nonnull !10, !invariant.group !805
  %_unwrap = select i1 %49, i64 0, i64 %103, !dbg !826
  %"'ipg66_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr93220'ipl_unwrap", i64 %_unwrap, !dbg !826
  %104 = load double, double addrspace(13)* %"'ipg66_unwrap", align 8, !dbg !826, !tbaa !237, !alias.scope !854, !noalias !857
  %105 = fadd fast double %104, %102, !dbg !826
  store double %105, double addrspace(13)* %"'ipg66_unwrap", align 8, !dbg !826, !tbaa !237, !alias.scope !854, !noalias !857
  %106 = load double, double* %"arrayref90'de", align 8, !dbg !823
  store double 0.000000e+00, double* %"arrayref90'de", align 8, !dbg !823
  %107 = load i64, i64* %"iv'ac", align 8, !dbg !823
  %"'ipc55_unwrap" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc54" to double addrspace(13)* addrspace(11)*, !dbg !823
  %"arrayptr89219'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc55_unwrap", align 8, !tbaa !133, !alias.scope !794, !noalias !797, !nonnull !10, !invariant.group !799
  %_unwrap69 = select i1 %46, i64 0, i64 %107, !dbg !823
  %"'ipg68_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr89219'ipl_unwrap", i64 %_unwrap69, !dbg !823
  %108 = load double, double addrspace(13)* %"'ipg68_unwrap", align 8, !dbg !823, !tbaa !237, !alias.scope !859, !noalias !862
  %109 = fadd fast double %108, %106, !dbg !823
  store double %109, double addrspace(13)* %"'ipg68_unwrap", align 8, !dbg !823, !tbaa !237, !alias.scope !859, !noalias !862
  %110 = load double, double* %"arrayref'de", align 8, !dbg !816
  store double 0.000000e+00, double* %"arrayref'de", align 8, !dbg !816
  %111 = load i64, i64* %"iv'ac", align 8, !dbg !816
  %"'ipc60_unwrap" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc59" to double addrspace(13)* addrspace(11)*, !dbg !816
  %"arrayptr218'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc60_unwrap", align 8, !tbaa !133, !alias.scope !788, !noalias !791, !nonnull !10, !invariant.group !793
  %_unwrap72 = select i1 %43, i64 0, i64 %111, !dbg !816
  %"'ipg71_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr218'ipl_unwrap", i64 %_unwrap72, !dbg !816
  %112 = load double, double addrspace(13)* %"'ipg71_unwrap", align 8, !dbg !816, !tbaa !237, !alias.scope !864, !noalias !867
  %113 = fadd fast double %112, %110, !dbg !816
  store double %113, double addrspace(13)* %"'ipg71_unwrap", align 8, !dbg !816, !tbaa !237, !alias.scope !864, !noalias !867
  %114 = load i64, i64* %"iv'ac", align 8
  %115 = icmp eq i64 %114, 0
  %116 = xor i1 %115, true
  br i1 %115, label %invertL249.lr.ph, label %incinvertL249

incinvertL249:                                    ; preds = %invertL249
  %117 = load i64, i64* %"iv'ac", align 8
  %118 = add nsw i64 %117, -1
  store i64 %118, i64* %"iv'ac", align 8
  br label %invertL249

invertL297.loopexit:                              ; preds = %invertL297
  %_unwrap77 = add nsw i64 %arraylen.pre, -1
  br label %mergeinvertL249_L297.loopexit

mergeinvertL249_L297.loopexit:                    ; preds = %invertL297.loopexit
  store i64 %_unwrap77, i64* %"iv'ac", align 8
  br label %invertL249

invertL297:                                       ; preds = %invertL333, %invertL314
  br i1 %50, label %invertL227, label %invertL297.loopexit

invertL314:                                       ; preds = %invertL333
  br label %invertL297

invertL333:                                       ; preds = %invertL359
  br i1 %value_phi109, label %invertL297, label %invertL314

invertL359:                                       ; preds = %L359
  br label %invertL333

staging:                                          ; preds = %invertL177
  br i1 %.not226_unwrap, label %invertL172, label %invertL164

staging36:                                        ; preds = %invertL202
  br i1 %.not225_unwrap, label %invertL197, label %invertL189

staging43:                                        ; preds = %invertL227
  br i1 %.not224_unwrap, label %invertL222, label %invertL214
}

after simplification :
; Function Attrs: mustprogress nofree willreturn
define { [1 x {} addrspace(10)*] } @preprocess_julia_broadcasted_6324({} addrspace(10)* nofree noundef nonnull align 16 dereferenceable(40) %0) local_unnamed_addr #3 !dbg !21 {
top:
  %1 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %1, i64 2
  %2 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %2, align 8, !tbaa !8
  %3 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %3, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !22
  fence syncscope("singlethread") seq_cst
  %4 = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %0, 0, !dbg !23
  %5 = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %4, 0, !dbg !25
  ret { [1 x {} addrspace(10)*] } %5, !dbg !24
}

; Function Attrs: mustprogress nofree willreturn
define internal { [1 x {} addrspace(10)*] } @augmented_julia_broadcasted_6324({} addrspace(10)* nofree noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* nofree align 16 %"'") local_unnamed_addr #3 !dbg !27 {
top:
  %1 = alloca { [1 x {} addrspace(10)*] }, align 8
  %2 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %3, align 8, !tbaa !8, !alias.scope !28, !noalias !31
  %4 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !12, !invariant.load !7, !alias.scope !33, !noalias !36
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !38
  fence syncscope("singlethread") seq_cst
  %5 = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %0, 0, !dbg !39
  %6 = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %5, 0, !dbg !41
  store { [1 x {} addrspace(10)*] } %6, { [1 x {} addrspace(10)*] }* %1, align 8, !dbg !40
  %7 = load { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] }* %1, align 8, !dbg !40
  ret { [1 x {} addrspace(10)*] } %7, !dbg !40
}

; Function Attrs: mustprogress nofree willreturn
define internal void @diffejulia_broadcasted_6324({} addrspace(10)* nofree align 16 dereferenceable(40) %0, {} addrspace(10)* nofree align 16 %"'", { [1 x {} addrspace(10)*] } %differeturn) local_unnamed_addr #3 !dbg !45 {
top:
  %"'de" = alloca { [1 x {} addrspace(10)*] }, align 8
  %1 = getelementptr { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] }* %"'de", i64 0, i32 0, i32 0
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %1, align 8
  %2 = call {}*** @julia.get_pgcstack() #5
  br label %inverttop, !dbg !46

inverttop:                                        ; preds = %top
  store { [1 x {} addrspace(10)*] } %differeturn, { [1 x {} addrspace(10)*] }* %"'de", align 8
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void
}

after simplification :
; Function Attrs: mustprogress nofree willreturn
define { [1 x {} addrspace(10)*] } @preprocess_julia_broadcasted_6363({} addrspace(10)* nofree noundef nonnull align 16 dereferenceable(40) %0) local_unnamed_addr #3 !dbg !21 {
top:
  %1 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %1, i64 2
  %2 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %2, align 8, !tbaa !8
  %3 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %3, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !22
  fence syncscope("singlethread") seq_cst
  %4 = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %0, 0, !dbg !23
  %5 = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %4, 0, !dbg !25
  ret { [1 x {} addrspace(10)*] } %5, !dbg !24
}

; Function Attrs: mustprogress nofree willreturn
define internal { [1 x {} addrspace(10)*] } @augmented_julia_broadcasted_6363({} addrspace(10)* nofree noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* nofree align 16 %"'") local_unnamed_addr #3 !dbg !27 {
top:
  %1 = alloca { [1 x {} addrspace(10)*] }, align 8
  %2 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %3, align 8, !tbaa !8, !alias.scope !28, !noalias !31
  %4 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !12, !invariant.load !7, !alias.scope !33, !noalias !36
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !38
  fence syncscope("singlethread") seq_cst
  %5 = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %0, 0, !dbg !39
  %6 = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %5, 0, !dbg !41
  store { [1 x {} addrspace(10)*] } %6, { [1 x {} addrspace(10)*] }* %1, align 8, !dbg !40
  %7 = load { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] }* %1, align 8, !dbg !40
  ret { [1 x {} addrspace(10)*] } %7, !dbg !40
}

; Function Attrs: mustprogress nofree willreturn
define internal void @diffejulia_broadcasted_6363({} addrspace(10)* nofree align 16 dereferenceable(40) %0, {} addrspace(10)* nofree align 16 %"'") local_unnamed_addr #3 !dbg !45 {
top:
  %1 = call {}*** @julia.get_pgcstack() #5
  br label %inverttop, !dbg !46

inverttop:                                        ; preds = %top
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void
}

after simplification :
; Function Attrs: mustprogress nofree willreturn
define { [1 x {} addrspace(10)*] } @preprocess_julia_broadcasted_6373({} addrspace(10)* nofree noundef nonnull align 16 dereferenceable(40) %0) local_unnamed_addr #3 !dbg !21 {
top:
  %1 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %1, i64 2
  %2 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %2, align 8, !tbaa !8
  %3 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %3, align 8, !tbaa !12, !invariant.load !7
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !22
  fence syncscope("singlethread") seq_cst
  %4 = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %0, 0, !dbg !23
  %5 = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %4, 0, !dbg !25
  ret { [1 x {} addrspace(10)*] } %5, !dbg !24
}

; Function Attrs: mustprogress nofree willreturn
define internal { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } } @augmented_julia_broadcasted_6373({} addrspace(10)* nofree noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* nofree align 16 %"'") local_unnamed_addr #3 !dbg !27 {
top:
  %1 = alloca { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }, align 8
  %2 = call {}*** @julia.get_pgcstack() #4
  %ptls_field3 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field3 to i64***
  %ptls_load45 = load i64**, i64*** %3, align 8, !tbaa !8, !alias.scope !28, !noalias !31
  %4 = getelementptr inbounds i64*, i64** %ptls_load45, i64 2
  %safepoint = load i64*, i64** %4, align 8, !tbaa !12, !invariant.load !7, !alias.scope !33, !noalias !36
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #4, !dbg !38
  fence syncscope("singlethread") seq_cst
  %"'ipiv" = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %"'", 0, !dbg !39
  %5 = insertvalue [1 x {} addrspace(10)*] zeroinitializer, {} addrspace(10)* %0, 0, !dbg !39
  %"'ipiv1" = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %"'ipiv", 0, !dbg !41
  %6 = insertvalue { [1 x {} addrspace(10)*] } zeroinitializer, [1 x {} addrspace(10)*] %5, 0, !dbg !41
  %7 = getelementptr inbounds { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }, { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }* %1, i32 0, i32 0, !dbg !40
  store { [1 x {} addrspace(10)*] } %6, { [1 x {} addrspace(10)*] }* %7, align 8, !dbg !40
  %8 = getelementptr inbounds { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }, { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }* %1, i32 0, i32 1, !dbg !40
  store { [1 x {} addrspace(10)*] } %"'ipiv1", { [1 x {} addrspace(10)*] }* %8, align 8, !dbg !40
  %9 = load { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }, { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } }* %1, align 8, !dbg !40
  ret { { [1 x {} addrspace(10)*] }, { [1 x {} addrspace(10)*] } } %9, !dbg !40
}

; Function Attrs: mustprogress nofree willreturn
define internal void @diffejulia_broadcasted_6373({} addrspace(10)* nofree align 16 dereferenceable(40) %0, {} addrspace(10)* nofree align 16 %"'") local_unnamed_addr #3 !dbg !45 {
top:
  %1 = call {}*** @julia.get_pgcstack() #5
  br label %inverttop, !dbg !46

inverttop:                                        ; preds = %top
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void
}

after simplification :
; Function Attrs: mustprogress willreturn
define noundef nonnull align 16 dereferenceable(40) {} addrspace(10)* @preprocess_julia_materialize__6424_inner.1({} addrspace(10)* noundef nonnull returned align 16 dereferenceable(40) %0, { [1 x {} addrspace(10)*] } %1) local_unnamed_addr #18 !dbg !271 {
entry:
  %.fca.0.0.extract = extractvalue { [1 x {} addrspace(10)*] } %1, 0, 0, !dbg !272
  %2 = call {}*** @julia.get_pgcstack() #19
  %ptls_field.i18 = getelementptr inbounds {}**, {}*** %2, i64 2
  %3 = bitcast {}*** %ptls_field.i18 to i64***
  %ptls_load.i1920 = load i64**, i64*** %3, align 8, !tbaa !16
  %4 = getelementptr inbounds i64*, i64** %ptls_load.i1920, i64 2
  %safepoint.i = load i64*, i64** %4, align 8, !tbaa !20, !invariant.load !15
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint.i) #19, !dbg !273
  fence syncscope("singlethread") seq_cst
  %5 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !275
  %6 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !275
  %7 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %6 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !275
  %arraylen_ptr.i = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %7, i64 0, i32 1, !dbg !275
  %arraylen.i = load i64, i64 addrspace(11)* %arraylen_ptr.i, align 8, !dbg !275, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %8 = icmp ne {} addrspace(10)* %.fca.0.0.extract, null
  call void @llvm.assume(i1 noundef %8) #19
  %9 = addrspacecast {} addrspace(10)* %.fca.0.0.extract to {} addrspace(11)*, !dbg !279
  %10 = bitcast {} addrspace(10)* %.fca.0.0.extract to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !279
  %11 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %10 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !279
  %arraylen_ptr3.i = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %11, i64 0, i32 1, !dbg !279
  %arraylen4.i = load i64, i64 addrspace(11)* %arraylen_ptr3.i, align 8, !dbg !279, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %12 = icmp eq i64 %arraylen.i, %arraylen4.i, !dbg !283
  %13 = icmp eq i64 %arraylen4.i, 1, !dbg !287
  %value_phi.i = or i1 %12, %13, !dbg !287
  br i1 %value_phi.i, label %L35.i, label %L19.i, !dbg !288

L19.i:                                            ; preds = %entry
  %current_task1.i17 = getelementptr inbounds {}**, {}*** %2, i64 -14
  %current_task1.i = bitcast {}*** %current_task1.i17 to {}**
  call fastcc void @julia_DimensionMismatch_6431() #20, !dbg !288
  %box.i = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1.i, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #21, !dbg !288
  %14 = bitcast {} addrspace(10)* %box.i to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !288
  %15 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %14, i64 0, i64 0, !dbg !288
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267317456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %15, align 8, !dbg !288, !tbaa !71, !alias.scope !75, !noalias !289
  %16 = addrspacecast {} addrspace(10)* %box.i to {} addrspace(12)*, !dbg !288
  call void @ijl_throw({} addrspace(12)* %16) #22, !dbg !288
  unreachable, !dbg !288

L35.i:                                            ; preds = %entry
  br i1 %12, label %L52.i, label %L55.i, !dbg !292

L52.i:                                            ; preds = %L35.i
  call fastcc void @julia__copyto_impl__6439({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %.fca.0.0.extract, i64 signext %arraylen.i) #19, !dbg !294
  br label %julia_materialize__6424_inner.exit, !dbg !297

L55.i:                                            ; preds = %L35.i
  %.not = icmp eq {} addrspace(11)* %5, %9, !dbg !298
  br i1 %.not, label %L72.i, label %L59.i, !dbg !298

L59.i:                                            ; preds = %L55.i
  %17 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %5) #23, !dbg !303
  %18 = bitcast {}* %17 to i8**, !dbg !303
  %arrayptr37.i = load i8*, i8** %18, align 8, !dbg !303, !tbaa !105, !alias.scope !51, !noalias !52, !nonnull !15
  %19 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %9) #23, !dbg !303
  %20 = bitcast {}* %19 to i8**, !dbg !303
  %arrayptr39.i = load i8*, i8** %20, align 8, !dbg !303, !tbaa !105, !alias.scope !51, !noalias !52, !nonnull !15
  %.not25 = icmp eq i8* %arrayptr37.i, %arrayptr39.i, !dbg !309
  br i1 %.not25, label %L67.i, label %L72.i, !dbg !312

L67.i:                                            ; preds = %L59.i
  %21 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %.fca.0.0.extract) #19, !dbg !313
  %22 = bitcast {} addrspace(10)* %21 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %.phi.trans.insert12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %22 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr25.i.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert12, i64 0, i32 1
  %arraylen26.i.pre = load i64, i64 addrspace(11)* %arraylen_ptr25.i.phi.trans.insert, align 8, !dbg !315, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  br label %L72.i, !dbg !312

L72.i:                                            ; preds = %L67.i, %L59.i, %L55.i
  %nodecayed..pre-phi16 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %22, %L67.i ], [ %10, %L59.i ], [ %10, %L55.i ], !dbg !315
  %arraylen26.i = phi i64 [ %arraylen26.i.pre, %L67.i ], [ %arraylen4.i, %L59.i ], [ %arraylen4.i, %L55.i ], !dbg !315
  %23 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi16 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !319
  %24 = icmp eq i64 %arraylen26.i, 1, !dbg !319
  %.not21 = icmp eq i64 %arraylen.i, 0, !dbg !323
  br i1 %.not21, label %julia_materialize__6424_inner.exit, label %L92.i.lr.ph, !dbg !326

L92.i.lr.ph:                                      ; preds = %L72.i
  %25 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %23 to double addrspace(13)* addrspace(11)*
  %arrayptr.i23 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %25, align 8, !tbaa !105, !alias.scope !327, !noalias !52, !nonnull !15
  %26 = bitcast {} addrspace(10)* %0 to double addrspace(13)* addrspace(10)*
  %27 = addrspacecast double addrspace(13)* addrspace(10)* %26 to double addrspace(13)* addrspace(11)*
  %arrayptr33.i24 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %27, align 16, !tbaa !105, !alias.scope !327, !noalias !52, !nonnull !15
  br label %L92.i, !dbg !328

L92.i:                                            ; preds = %L92.i, %L92.i.lr.ph
  %iv = phi i64 [ %iv.next, %L92.i ], [ 0, %L92.i.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !329
  %28 = select i1 %24, i64 0, i64 %iv, !dbg !332
  %29 = getelementptr inbounds double, double addrspace(13)* %arrayptr.i23, i64 %28, !dbg !332
  %arrayref.i = load double, double addrspace(13)* %29, align 8, !dbg !332, !tbaa !158, !alias.scope !75, !noalias !160
  %30 = getelementptr inbounds double, double addrspace(13)* %arrayptr33.i24, i64 %iv, !dbg !339
  store double %arrayref.i, double addrspace(13)* %30, align 8, !dbg !339, !tbaa !158, !alias.scope !75, !noalias !289
  %exitcond.not = icmp eq i64 %iv.next, %arraylen.i, !dbg !340
  br i1 %exitcond.not, label %julia_materialize__6424_inner.exit.loopexit, label %L92.i, !dbg !328, !llvm.loop !342

julia_materialize__6424_inner.exit.loopexit:      ; preds = %L92.i
  br label %julia_materialize__6424_inner.exit, !dbg !272

julia_materialize__6424_inner.exit:               ; preds = %julia_materialize__6424_inner.exit.loopexit, %L72.i, %L52.i
  ret {} addrspace(10)* %0, !dbg !272
}

after simplification :
; Function Attrs: mustprogress willreturn
define internal fastcc void @preprocess_julia__copyto_impl__6439({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, i64 signext "enzyme_inactive" %2) unnamed_addr #19 !dbg !435 {
top:
  %3 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !436
  %newstruct2 = bitcast i8* %3 to [1 x [2 x i64]]*, !enzyme_caststack !15
  %4 = call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16), !enzyme_fromstack !436
  %newstruct5 = bitcast i8* %4 to [1 x [2 x i64]]*, !enzyme_caststack !15
  %5 = call {}*** @julia.get_pgcstack() #20
  %ptls_field25 = getelementptr inbounds {}**, {}*** %5, i64 2
  %6 = bitcast {}*** %ptls_field25 to i64***
  %ptls_load2627 = load i64**, i64*** %6, align 8, !tbaa !16
  %7 = getelementptr inbounds i64*, i64** %ptls_load2627, i64 2
  %safepoint = load i64*, i64** %7, align 8, !tbaa !20, !invariant.load !15
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #20, !dbg !437
  fence syncscope("singlethread") seq_cst
  %.not = icmp eq i64 %2, 0, !dbg !438
  br i1 %.not, label %common.ret, label %L4, !dbg !439

common.ret:                                       ; preds = %L100, %top
  ret void, !dbg !440

L4:                                               ; preds = %top
  %8 = icmp slt i64 %2, 1, !dbg !441
  br i1 %8, label %L108, label %L8, !dbg !443

L8:                                               ; preds = %L4
  %newstruct.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct2, i64 0, i64 0, i64 0, !dbg !444
  store i64 1, i64* %newstruct.sroa.0.0..sroa_idx, align 8, !dbg !444, !tbaa !190, !alias.scope !192, !noalias !446
  %newstruct.sroa.2.0..sroa_idx15 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct2, i64 0, i64 0, i64 1, !dbg !444
  store i64 %2, i64* %newstruct.sroa.2.0..sroa_idx15, align 8, !dbg !444, !tbaa !190, !alias.scope !192, !noalias !446
  %9 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !449
  %10 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !449
  %11 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %10 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !449
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %11, i64 0, i32 1, !dbg !449
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !449, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %12 = add i64 %2, -1, !dbg !455
  %13 = icmp ult i64 %12, %arraylen, !dbg !458
  br i1 %13, label %L40, label %L36, !dbg !454

L36:                                              ; preds = %L8
  %14 = addrspacecast [1 x [2 x i64]]* %newstruct2 to [1 x [2 x i64]] addrspace(11)*, !dbg !454
  call fastcc void @julia_throw_boundserror_6446({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %14) #21, !dbg !454
  unreachable, !dbg !454

L40:                                              ; preds = %L8
  %15 = call i64 @llvm.smax.i64(i64 %2, i64 noundef 0) #20, !dbg !459
  %newstruct4.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct5, i64 0, i64 0, i64 0, !dbg !463
  store i64 1, i64* %newstruct4.sroa.0.0..sroa_idx, align 8, !dbg !463, !tbaa !190, !alias.scope !192, !noalias !446
  %newstruct4.sroa.2.0..sroa_idx14 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %newstruct5, i64 0, i64 0, i64 1, !dbg !463
  store i64 %15, i64* %newstruct4.sroa.2.0..sroa_idx14, align 8, !dbg !463, !tbaa !190, !alias.scope !192, !noalias !446
  %16 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !464
  %17 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %16 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !464
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %17, i64 0, i32 1, !dbg !464
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !464, !tbaa !47, !range !50, !alias.scope !51, !noalias !52
  %18 = icmp slt i64 %2, 1, !dbg !470
  %19 = add nsw i64 %15, -1, !dbg !474
  %20 = icmp ult i64 %19, %arraylen7, !dbg !476
  %21 = or i1 %18, %20, !dbg !477
  br i1 %21, label %L71, label %L68, !dbg !469

L68:                                              ; preds = %L40
  %22 = addrspacecast [1 x [2 x i64]]* %newstruct5 to [1 x [2 x i64]] addrspace(11)*, !dbg !469
  call fastcc void @julia_throw_boundserror_6446({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %22) #21, !dbg !469
  unreachable, !dbg !469

L71:                                              ; preds = %L40
  %23 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !464
  %24 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %0) #20, !dbg !478
  %25 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* nonnull %1) #20, !dbg !480
  %26 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %9) #22, !dbg !481
  %27 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %23) #22, !dbg !484
  %28 = shl i64 %2, 3, !dbg !487
  %29 = and i64 %2, 1152921504606846976, !dbg !489
  %.not30 = icmp eq i64 %29, 0, !dbg !489
  br i1 %.not30, label %L100, label %L92, !dbg !490

L92:                                              ; preds = %L71
  call fastcc void @julia_throw_inexacterror_6448(i64 signext %28) #21, !dbg !490
  unreachable, !dbg !490

L100:                                             ; preds = %L71
  %30 = bitcast {}* %27 to i8**, !dbg !484
  %arrayptr10 = load i8*, i8** %30, align 8, !dbg !484, !tbaa !105, !alias.scope !51, !noalias !52, !nonnull !15
  %31 = bitcast {}* %26 to i8**, !dbg !481
  %arrayptr = load i8*, i8** %31, align 8, !dbg !481, !tbaa !105, !alias.scope !51, !noalias !52, !nonnull !15
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %arrayptr, i8* nonnull align 1 %arrayptr10, i64 %28, i1 noundef false) #20, !dbg !495, !noalias !496
  call void @llvm.julia.gc_preserve_end(token %25) #20, !dbg !497
  call void @llvm.julia.gc_preserve_end(token %24) #20, !dbg !498
  br label %common.ret

L108:                                             ; preds = %L4
  call fastcc void @julia__throw_argerror_6444() #21, !dbg !443
  unreachable, !dbg !443
}

; Function Attrs: mustprogress willreturn
define internal fastcc { i8*, i8* } @augmented_julia__copyto_impl__6439({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", i64 signext "enzyme_inactive" %2) unnamed_addr #19 !dbg !499 {
top:
  %3 = alloca { i8*, i8* }, align 8
  %newstruct5 = alloca [1 x [2 x i64]], i64 1, align 8
  %4 = bitcast [1 x [2 x i64]]* %newstruct5 to i8*
  %newstruct2 = alloca [1 x [2 x i64]], i64 1, align 8
  %5 = bitcast [1 x [2 x i64]]* %newstruct2 to i8*
  %6 = bitcast i8* %5 to [1 x [2 x i64]]*, !enzyme_caststack !15
  %7 = bitcast i8* %4 to [1 x [2 x i64]]*, !enzyme_caststack !15
  %8 = call {}*** @julia.get_pgcstack() #20
  %ptls_field25 = getelementptr inbounds {}**, {}*** %8, i64 2
  %9 = bitcast {}*** %ptls_field25 to i64***
  %ptls_load2627 = load i64**, i64*** %9, align 8, !tbaa !16, !alias.scope !500, !noalias !503
  %10 = getelementptr inbounds i64*, i64** %ptls_load2627, i64 2
  %safepoint = load i64*, i64** %10, align 8, !tbaa !20, !invariant.load !15, !alias.scope !505, !noalias !508
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint) #20, !dbg !510
  fence syncscope("singlethread") seq_cst
  %.not = icmp eq i64 %2, 0, !dbg !511
  br i1 %.not, label %common.ret, label %L4, !dbg !512

common.ret:                                       ; preds = %L100, %top
  %11 = load { i8*, i8* }, { i8*, i8* }* %3, align 8, !dbg !513
  ret { i8*, i8* } %11, !dbg !513

L4:                                               ; preds = %top
  %12 = icmp slt i64 %2, 1, !dbg !514
  br i1 %12, label %L108, label %L8, !dbg !516

L8:                                               ; preds = %L4
  %newstruct.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %6, i64 0, i64 0, i64 0, !dbg !517
  store i64 1, i64* %newstruct.sroa.0.0..sroa_idx, align 8, !dbg !517, !tbaa !190, !alias.scope !192, !noalias !519
  %newstruct.sroa.2.0..sroa_idx15 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %6, i64 0, i64 0, i64 1, !dbg !517
  store i64 %2, i64* %newstruct.sroa.2.0..sroa_idx15, align 8, !dbg !517, !tbaa !190, !alias.scope !192, !noalias !519
  %"'ipc3" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !522
  %13 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !522
  %14 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !522
  %15 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %14 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !522
  %arraylen_ptr = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %15, i64 0, i32 1, !dbg !522
  %arraylen = load i64, i64 addrspace(11)* %arraylen_ptr, align 8, !dbg !522, !tbaa !47, !range !50, !alias.scope !528, !noalias !531
  %16 = add i64 %2, -1, !dbg !533
  %17 = icmp ult i64 %16, %arraylen, !dbg !536
  br i1 %17, label %L40, label %L36, !dbg !527

L36:                                              ; preds = %L8
  %18 = addrspacecast [1 x [2 x i64]]* %6 to [1 x [2 x i64]] addrspace(11)*, !dbg !527
  call fastcc void @julia_throw_boundserror_6446({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %18) #21, !dbg !527
  unreachable, !dbg !527

L40:                                              ; preds = %L8
  %19 = call i64 @llvm.smax.i64(i64 %2, i64 noundef 0) #20, !dbg !537
  %newstruct4.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %7, i64 0, i64 0, i64 0, !dbg !541
  store i64 1, i64* %newstruct4.sroa.0.0..sroa_idx, align 8, !dbg !541, !tbaa !190, !alias.scope !192, !noalias !519
  %newstruct4.sroa.2.0..sroa_idx14 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %7, i64 0, i64 0, i64 1, !dbg !541
  store i64 %19, i64* %newstruct4.sroa.2.0..sroa_idx14, align 8, !dbg !541, !tbaa !190, !alias.scope !192, !noalias !519
  %20 = bitcast {} addrspace(10)* %1 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !542
  %21 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %20 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !542
  %arraylen_ptr6 = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %21, i64 0, i32 1, !dbg !542
  %arraylen7 = load i64, i64 addrspace(11)* %arraylen_ptr6, align 8, !dbg !542, !tbaa !47, !range !50, !alias.scope !548, !noalias !551
  %22 = icmp slt i64 %2, 1, !dbg !553
  %23 = add nsw i64 %19, -1, !dbg !557
  %24 = icmp ult i64 %23, %arraylen7, !dbg !559
  %25 = or i1 %22, %24, !dbg !560
  br i1 %25, label %L71, label %L68, !dbg !547

L68:                                              ; preds = %L40
  %26 = addrspacecast [1 x [2 x i64]]* %7 to [1 x [2 x i64]] addrspace(11)*, !dbg !547
  call fastcc void @julia_throw_boundserror_6446({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %1, [1 x [2 x i64]] addrspace(11)* nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %26) #21, !dbg !547
  unreachable, !dbg !547

L71:                                              ; preds = %L40
  %"'ipc" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !542
  %27 = addrspacecast {} addrspace(10)* %1 to {} addrspace(11)*, !dbg !542
  %28 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !561
  %29 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !563
  %30 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc3"), !dbg !564
  %31 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %13) #22, !dbg !564
  %32 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !567
  %33 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %27) #22, !dbg !567
  %34 = shl i64 %2, 3, !dbg !570
  %35 = and i64 %2, 1152921504606846976, !dbg !572
  %.not30 = icmp eq i64 %35, 0, !dbg !572
  br i1 %.not30, label %L100, label %L92, !dbg !573

L92:                                              ; preds = %L71
  call fastcc void @julia_throw_inexacterror_6448(i64 signext %34) #21, !dbg !573
  unreachable, !dbg !573

L100:                                             ; preds = %L71
  %"'ipc5" = bitcast {}* %32 to i8**, !dbg !567
  %36 = bitcast {}* %33 to i8**, !dbg !567
  %"arrayptr10'ipl" = load i8*, i8** %"'ipc5", align 8, !dbg !567, !tbaa !105, !alias.scope !579, !noalias !580, !nonnull !15
  %37 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %3, i32 0, i32 1, !dbg !567
  store i8* %"arrayptr10'ipl", i8** %37, align 8, !dbg !567
  %arrayptr10 = load i8*, i8** %36, align 8, !dbg !567, !tbaa !105, !alias.scope !548, !noalias !551, !nonnull !15
  %"'ipc4" = bitcast {}* %30 to i8**, !dbg !564
  %38 = bitcast {}* %31 to i8**, !dbg !564
  %"arrayptr'ipl" = load i8*, i8** %"'ipc4", align 8, !dbg !564, !tbaa !105, !alias.scope !581, !noalias !582, !nonnull !15
  %39 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %3, i32 0, i32 0, !dbg !564
  store i8* %"arrayptr'ipl", i8** %39, align 8, !dbg !564
  %arrayptr = load i8*, i8** %38, align 8, !dbg !564, !tbaa !105, !alias.scope !528, !noalias !531, !nonnull !15
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %arrayptr, i8* nonnull align 1 %arrayptr10, i64 %34, i1 noundef false) #20, !dbg !578, !noalias !583
  call void @llvm.julia.gc_preserve_end(token %29) #20, !dbg !584
  call void @llvm.julia.gc_preserve_end(token %28) #20, !dbg !585
  br label %common.ret

L108:                                             ; preds = %L4
  call fastcc void @julia__throw_argerror_6444() #21, !dbg !516
  unreachable, !dbg !516
}

; Function Attrs: mustprogress willreturn
define internal { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* } @augmented_julia_materialize__6424_inner.1({} addrspace(10)* noundef nonnull align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", { [1 x {} addrspace(10)*] } %1, { [1 x {} addrspace(10)*] } %"'1") local_unnamed_addr #18 !dbg !494 {
entry:
  %2 = alloca { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }, align 8
  %3 = getelementptr inbounds { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 0
  %4 = getelementptr { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i64 0, i32 1
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %4, align 8
  %5 = getelementptr { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i64 0, i32 5
  %6 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %5 to {} addrspace(10)**
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 4346085384 to {}*) to {} addrspace(10)*), {} addrspace(10)** %6, align 8
  %"iv'ac" = alloca i64, align 8
  %.fca.0.0.extract = extractvalue { [1 x {} addrspace(10)*] } %1, 0, 0, !dbg !495
  %".fca.0.0.extract'ipev" = extractvalue { [1 x {} addrspace(10)*] } %"'1", 0, 0
  %7 = call {}*** @julia.get_pgcstack() #21
  %ptls_field.i18 = getelementptr inbounds {}**, {}*** %7, i64 2
  %8 = bitcast {}*** %ptls_field.i18 to i64***
  %ptls_load.i1920 = load i64**, i64*** %8, align 8, !tbaa !16, !alias.scope !496, !noalias !499
  %9 = getelementptr inbounds i64*, i64** %ptls_load.i1920, i64 2
  %safepoint.i = load i64*, i64** %9, align 8, !tbaa !20, !invariant.load !15, !alias.scope !501, !noalias !504
  fence syncscope("singlethread") seq_cst
  call void @julia.safepoint(i64* %safepoint.i) #21, !dbg !506
  fence syncscope("singlethread") seq_cst
  %10 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !508
  %11 = bitcast {} addrspace(10)* %0 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !508
  %12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %11 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !508
  %arraylen_ptr.i = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %12, i64 0, i32 1, !dbg !508
  %arraylen.i = load i64, i64 addrspace(11)* %arraylen_ptr.i, align 8, !dbg !508, !tbaa !47, !range !50, !alias.scope !512, !noalias !515
  %13 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 2
  store i64 %arraylen.i, i64* %13, align 8
  %14 = icmp ne {} addrspace(10)* %.fca.0.0.extract, null
  call void @llvm.assume(i1 noundef %14) #21
  %15 = addrspacecast {} addrspace(10)* %.fca.0.0.extract to {} addrspace(11)*, !dbg !517
  %"'ipc6" = bitcast {} addrspace(10)* %".fca.0.0.extract'ipev" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !517
  %16 = bitcast {} addrspace(10)* %.fca.0.0.extract to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !517
  %17 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %16 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !517
  %arraylen_ptr3.i = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %17, i64 0, i32 1, !dbg !517
  %arraylen4.i = load i64, i64 addrspace(11)* %arraylen_ptr3.i, align 8, !dbg !517, !tbaa !47, !range !50, !alias.scope !521, !noalias !524
  %18 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 3, !dbg !526
  store i64 %arraylen4.i, i64* %18, align 8, !dbg !526
  %19 = icmp eq i64 %arraylen.i, %arraylen4.i, !dbg !526
  %20 = icmp eq i64 %arraylen4.i, 1, !dbg !530
  %value_phi.i = or i1 %19, %20, !dbg !530
  br i1 %value_phi.i, label %L35.i, label %L19.i, !dbg !531

L19.i:                                            ; preds = %entry
  %current_task1.i17 = getelementptr inbounds {}**, {}*** %7, i64 -14
  %current_task1.i = bitcast {}*** %current_task1.i17 to {}**
  call fastcc void @julia_DimensionMismatch_6431() #22, !dbg !531
  %box.i = call noalias nonnull dereferenceable(8) "enzyme_inactive" {} addrspace(10)* @julia.gc_alloc_obj({}** nonnull %current_task1.i, i64 noundef 8, {} addrspace(10)* noundef addrspacecast ({}* inttoptr (i64 5187408848 to {}*) to {} addrspace(10)*)) #23, !dbg !531
  %21 = bitcast {} addrspace(10)* %box.i to [1 x {} addrspace(10)*] addrspace(10)*, !dbg !531
  %22 = getelementptr [1 x {} addrspace(10)*], [1 x {} addrspace(10)*] addrspace(10)* %21, i64 0, i64 0, !dbg !531
  store {} addrspace(10)* addrspacecast ({}* inttoptr (i64 5267317456 to {}*) to {} addrspace(10)*), {} addrspace(10)* addrspace(10)* %22, align 8, !dbg !531, !tbaa !71, !alias.scope !75, !noalias !532
  %23 = addrspacecast {} addrspace(10)* %box.i to {} addrspace(12)*, !dbg !531
  call void @ijl_throw({} addrspace(12)* %23) #24, !dbg !531
  unreachable, !dbg !531

L35.i:                                            ; preds = %entry
  br i1 %19, label %L52.i, label %L55.i, !dbg !535

L52.i:                                            ; preds = %L35.i
  %_augmented = call fastcc { i8*, i8* } @augmented_julia__copyto_impl__6439({} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 %.fca.0.0.extract, {} addrspace(10)* align 16 %".fca.0.0.extract'ipev", i64 signext %arraylen.i), !dbg !537
  %24 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 0, !dbg !540
  store { i8*, i8* } %_augmented, { i8*, i8* }* %24, align 8, !dbg !540
  br label %julia_materialize__6424_inner.exit, !dbg !540

L55.i:                                            ; preds = %L35.i
  %.not = icmp eq {} addrspace(11)* %10, %15, !dbg !541
  br i1 %.not, label %L72.i, label %L59.i, !dbg !541

L59.i:                                            ; preds = %L55.i
  %25 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* noundef %10) #25, !dbg !546
  %26 = bitcast {}* %25 to i8**, !dbg !546
  %arrayptr37.i = load i8*, i8** %26, align 8, !dbg !546, !tbaa !105, !alias.scope !512, !noalias !515, !nonnull !15
  %27 = call nonnull {}* @julia.pointer_from_objref({} addrspace(11)* %15) #25, !dbg !546
  %28 = bitcast {}* %27 to i8**, !dbg !546
  %arrayptr39.i = load i8*, i8** %28, align 8, !dbg !546, !tbaa !105, !alias.scope !521, !noalias !524, !nonnull !15
  %.not25 = icmp eq i8* %arrayptr37.i, %arrayptr39.i, !dbg !552
  %29 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 4, !dbg !555
  store i1 %.not25, i1* %29, align 1, !dbg !555
  br i1 %.not25, label %L67.i, label %L72.i, !dbg !555

L67.i:                                            ; preds = %L59.i
  %30 = call {} addrspace(10)* @ijl_array_copy({} addrspace(10)* %".fca.0.0.extract'ipev"), !dbg !556
  %31 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 1, !dbg !556
  store {} addrspace(10)* %30, {} addrspace(10)** %31, align 8, !dbg !556
  %32 = bitcast {} addrspace(10)* %.fca.0.0.extract to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !556
  %33 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %32, i32 0, i32 3, !dbg !556
  %34 = load i16, i16 addrspace(10)* %33, align 2, !dbg !556
  %35 = zext i16 %34 to i64, !dbg !556
  %36 = bitcast {} addrspace(10)* %.fca.0.0.extract to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*, !dbg !556
  %37 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %36, i32 0, i32 1, !dbg !556
  %38 = load i64, i64 addrspace(10)* %37, align 8, !dbg !556
  %39 = mul i64 %38, %35, !dbg !556
  %40 = bitcast {} addrspace(10)* %".fca.0.0.extract'ipev" to i8 addrspace(13)* addrspace(10)*, !dbg !556
  %41 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %40, align 8, !dbg !556
  %42 = bitcast {} addrspace(10)* %30 to i8 addrspace(13)* addrspace(10)*, !dbg !556
  %43 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %42, align 8, !dbg !556
  call void @llvm.memset.p13i8.i64(i8 addrspace(13)* %43, i8 0, i64 %39, i1 false), !dbg !556
  %44 = call noalias nonnull {} addrspace(10)* @ijl_array_copy({} addrspace(10)* noundef nonnull %.fca.0.0.extract) #21, !dbg !556
  %"'ipc5" = bitcast {} addrspace(10)* %30 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %45 = bitcast {} addrspace(10)* %44 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %46 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 5
  store { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %45, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)** %46, align 8
  %.phi.trans.insert12 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %45 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*
  %arraylen_ptr25.i.phi.trans.insert = getelementptr inbounds { i8 addrspace(13)*, i64, i16, i16, i32 }, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %.phi.trans.insert12, i64 0, i32 1
  %arraylen26.i.pre = load i64, i64 addrspace(11)* %arraylen_ptr25.i.phi.trans.insert, align 8, !dbg !558, !tbaa !47, !range !50, !alias.scope !562, !noalias !565
  br label %L72.i, !dbg !555

L72.i:                                            ; preds = %L67.i, %L59.i, %L55.i
  %47 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc5", %L67.i ], [ %"'ipc6", %L59.i ], [ %"'ipc6", %L55.i ], !dbg !558
  %nodecayed..pre-phi16 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %45, %L67.i ], [ %16, %L59.i ], [ %16, %L55.i ], !dbg !558
  %arraylen26.i = phi i64 [ %arraylen26.i.pre, %L67.i ], [ %arraylen4.i, %L59.i ], [ %arraylen4.i, %L55.i ], !dbg !558
  %"'ipc7" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %47 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !567
  %48 = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %nodecayed..pre-phi16 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !567
  %49 = icmp eq i64 %arraylen26.i, 1, !dbg !567
  %50 = getelementptr inbounds { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }* %3, i32 0, i32 6, !dbg !571
  store i1 %49, i1* %50, align 1, !dbg !571
  %.not21 = icmp eq i64 %arraylen.i, 0, !dbg !571
  br i1 %.not21, label %julia_materialize__6424_inner.exit, label %L92.i.lr.ph, !dbg !574

L92.i.lr.ph:                                      ; preds = %L72.i
  %"'ipc8" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc7" to double addrspace(13)* addrspace(11)*
  %51 = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %48 to double addrspace(13)* addrspace(11)*
  %"arrayptr.i23'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc8", align 8, !tbaa !105, !alias.scope !575, !noalias !580, !nonnull !15
  %arrayptr.i23 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %51, align 8, !tbaa !105, !alias.scope !582, !noalias !583, !nonnull !15
  %"'ipc" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*
  %52 = bitcast {} addrspace(10)* %0 to double addrspace(13)* addrspace(10)*
  %"'ipc4" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %53 = addrspacecast double addrspace(13)* addrspace(10)* %52 to double addrspace(13)* addrspace(11)*
  %"arrayptr33.i24'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc4", align 16, !tbaa !105, !alias.scope !584, !noalias !585, !nonnull !15
  %arrayptr33.i24 = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %53, align 16, !tbaa !105, !alias.scope !586, !noalias !515, !nonnull !15
  %54 = add nsw i64 %arraylen.i, -1, !dbg !587
  br label %L92.i, !dbg !587

L92.i:                                            ; preds = %L92.i, %L92.i.lr.ph
  %iv = phi i64 [ %iv.next, %L92.i ], [ 0, %L92.i.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !588
  %55 = select i1 %49, i64 0, i64 %iv, !dbg !591
  %56 = getelementptr inbounds double, double addrspace(13)* %arrayptr.i23, i64 %55, !dbg !591
  %arrayref.i = load double, double addrspace(13)* %56, align 8, !dbg !591, !tbaa !158, !alias.scope !598, !noalias !601
  %57 = getelementptr inbounds double, double addrspace(13)* %arrayptr33.i24, i64 %iv, !dbg !603
  store double %arrayref.i, double addrspace(13)* %57, align 8, !dbg !603, !tbaa !158, !alias.scope !604, !noalias !607
  %exitcond.not = icmp eq i64 %iv.next, %arraylen.i, !dbg !609
  br i1 %exitcond.not, label %julia_materialize__6424_inner.exit.loopexit, label %L92.i, !dbg !587, !llvm.loop !611

julia_materialize__6424_inner.exit.loopexit:      ; preds = %L92.i
  br label %julia_materialize__6424_inner.exit, !dbg !495

julia_materialize__6424_inner.exit:               ; preds = %julia_materialize__6424_inner.exit.loopexit, %L72.i, %L52.i
  %58 = getelementptr inbounds { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 1, !dbg !495
  store {} addrspace(10)* %0, {} addrspace(10)** %58, align 8, !dbg !495
  %59 = getelementptr inbounds { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, i32 0, i32 2, !dbg !495
  store {} addrspace(10)* %"'", {} addrspace(10)** %59, align 8, !dbg !495
  %60 = load { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }, { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* }* %2, align 8, !dbg !495
  ret { { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 }, {} addrspace(10)*, {} addrspace(10)* } %60, !dbg !495
}

warning: didn't implement memmove, using memcpy as fallback which can result in errors
; Function Attrs: mustprogress willreturn
define internal fastcc void @diffejulia__copyto_impl__6439({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 dereferenceable(40) %1, {} addrspace(10)* align 16 %"'1", i64 signext "enzyme_inactive" %2, { i8*, i8* } %tapeArg) unnamed_addr #19 !dbg !695 {
top:
  %3 = call {}*** @julia.get_pgcstack() #23
  %.not = icmp eq i64 %2, 0, !dbg !696
  br i1 %.not, label %common.ret, label %L4, !dbg !697

common.ret:                                       ; preds = %L100, %top
  br label %invertcommon.ret, !dbg !698

L4:                                               ; preds = %top
  br i1 false, label %L108, label %L8, !dbg !699

L8:                                               ; preds = %L4
  %"'ipc24" = addrspacecast {} addrspace(10)* %"'" to {} addrspace(11)*, !dbg !700
  br i1 true, label %L40, label %L36, !dbg !705

L36:                                              ; preds = %L8
  unreachable

L40:                                              ; preds = %L8
  br i1 true, label %L71, label %L68, !dbg !707

L68:                                              ; preds = %L40
  unreachable

L71:                                              ; preds = %L40
  %"'ipc" = addrspacecast {} addrspace(10)* %"'1" to {} addrspace(11)*, !dbg !709
  %4 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !714
  %5 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !716
  %6 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc24"), !dbg !717
  %7 = call {}* @julia.pointer_from_objref({} addrspace(11)* %"'ipc"), !dbg !720
  %8 = shl i64 %2, 3, !dbg !723
  br i1 true, label %L100, label %L92, !dbg !725

L92:                                              ; preds = %L71
  unreachable

L100:                                             ; preds = %L71
  %"arrayptr10'il_phi" = extractvalue { i8*, i8* } %tapeArg, 1, !dbg !720
  %"arrayptr'il_phi" = extractvalue { i8*, i8* } %tapeArg, 0, !dbg !717
  call void @llvm.julia.gc_preserve_end(token %5) #23, !dbg !731
  call void @llvm.julia.gc_preserve_end(token %4) #23, !dbg !732
  br label %common.ret

L108:                                             ; preds = %L4
  unreachable

inverttop:                                        ; preds = %invertL4, %invertcommon.ret
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertcommon.ret:                                 ; preds = %common.ret
  br i1 %.not, label %inverttop, label %invertL100

invertL4:                                         ; preds = %invertL8
  br label %inverttop

invertL8:                                         ; preds = %invertL40
  br label %invertL4

invertL40:                                        ; preds = %invertL71
  br label %invertL8

invertL71:                                        ; preds = %__enzyme_memcpyadd_doubleda1sa1.exit
  call void @llvm.julia.gc_preserve_end(token %10), !dbg !716
  call void @llvm.julia.gc_preserve_end(token %9), !dbg !714
  br label %invertL40

invertL100:                                       ; preds = %invertcommon.ret
  %9 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %0, {} addrspace(10)* %"'"), !dbg !732
  %10 = call token (...) @llvm.julia.gc_preserve_begin({} addrspace(10)* %1, {} addrspace(10)* %"'1"), !dbg !731
  %11 = extractvalue { i8*, i8* } %tapeArg, 0, !dbg !730
  %12 = extractvalue { i8*, i8* } %tapeArg, 1, !dbg !730
  %13 = bitcast i8* %11 to double*, !dbg !730
  %14 = bitcast i8* %12 to double*, !dbg !730
  %_unwrap = shl i64 %2, 3, !dbg !730
  %15 = udiv i64 %_unwrap, 8, !dbg !730
  %16 = icmp eq i64 %15, 0, !dbg !730
  br i1 %16, label %__enzyme_memcpyadd_doubleda1sa1.exit, label %for.body.i, !dbg !730

for.body.i:                                       ; preds = %for.body.i, %invertL100
  %idx.i = phi i64 [ 0, %invertL100 ], [ %idx.next.i, %for.body.i ], !dbg !730
  %dst.i.i = getelementptr inbounds double, double* %13, i64 %idx.i, !dbg !730
  %dst.i.l.i = load double, double* %dst.i.i, align 1, !dbg !730
  store double 0.000000e+00, double* %dst.i.i, align 1, !dbg !730
  %src.i.i = getelementptr inbounds double, double* %14, i64 %idx.i, !dbg !730
  %src.i.l.i = load double, double* %src.i.i, align 1, !dbg !730
  %17 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !730
  store double %17, double* %src.i.i, align 1, !dbg !730
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !730
  %18 = icmp eq i64 %15, %idx.next.i, !dbg !730
  br i1 %18, label %__enzyme_memcpyadd_doubleda1sa1.exit, label %for.body.i, !dbg !730

__enzyme_memcpyadd_doubleda1sa1.exit:             ; preds = %invertL100, %for.body.i
  br label %invertL71
}

; Function Attrs: mustprogress willreturn
define internal void @diffejulia_materialize__6424_inner.1({} addrspace(10)* align 16 dereferenceable(40) %0, {} addrspace(10)* align 16 %"'", { [1 x {} addrspace(10)*] } %1, { [1 x {} addrspace(10)*] } %"'1", { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg) local_unnamed_addr #18 !dbg !614 {
entry:
  %"iv'ac" = alloca i64, align 8
  %"arrayref.i'de" = alloca double, align 8
  %2 = getelementptr double, double* %"arrayref.i'de", i64 0
  store double 0.000000e+00, double* %2, align 8
  %_cache35 = alloca i8, align 1
  %.fca.0.0.extract = extractvalue { [1 x {} addrspace(10)*] } %1, 0, 0, !dbg !615
  %3 = bitcast {} addrspace(10)* %.fca.0.0.extract to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %4 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %3, i32 0, i32 3
  %5 = load i16, i16 addrspace(10)* %4, align 2
  %6 = zext i16 %5 to i64
  %7 = bitcast {} addrspace(10)* %.fca.0.0.extract to <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)*
  %8 = getelementptr inbounds <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }>, <{ i8 addrspace(13)*, i64, i16, i16, i32, i64 }> addrspace(10)* %7, i32 0, i32 1
  %9 = load i64, i64 addrspace(10)* %8, align 8
  %10 = mul i64 %9, %6
  %".fca.0.0.extract'ipev" = extractvalue { [1 x {} addrspace(10)*] } %"'1", 0, 0
  %11 = call {}*** @julia.get_pgcstack() #23
  %12 = addrspacecast {} addrspace(10)* %0 to {} addrspace(11)*, !dbg !616
  %arraylen.i = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 2
  %13 = addrspacecast {} addrspace(10)* %.fca.0.0.extract to {} addrspace(11)*, !dbg !621
  %"'ipc24" = bitcast {} addrspace(10)* %".fca.0.0.extract'ipev" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !621
  %14 = bitcast {} addrspace(10)* %.fca.0.0.extract to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, !dbg !621
  %arraylen4.i = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 3, !dbg !625
  %15 = icmp eq i64 %arraylen.i, %arraylen4.i, !dbg !625
  br i1 true, label %L35.i, label %L19.i, !dbg !629

L19.i:                                            ; preds = %entry
  unreachable

L35.i:                                            ; preds = %entry
  br i1 %15, label %L52.i, label %L55.i, !dbg !630

L52.i:                                            ; preds = %L35.i
  %tapeArg13 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 0, !dbg !632
  store i8 0, i8* %_cache35, align 1, !dbg !635, !invariant.group !636
  br label %julia_materialize__6424_inner.exit, !dbg !635

L55.i:                                            ; preds = %L35.i
  %.not = icmp eq {} addrspace(11)* %12, %13, !dbg !637
  br i1 %.not, label %L72.i, label %L59.i, !dbg !637

L59.i:                                            ; preds = %L55.i
  %.not25 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 4, !dbg !642
  br i1 %.not25, label %L67.i, label %L72.i, !dbg !642

L67.i:                                            ; preds = %L59.i
  %"'ip_phi3" = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 1, !dbg !644
  %"'ipc23" = bitcast {} addrspace(10)* %"'ip_phi3" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  %16 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 5
  br label %L72.i, !dbg !642

L72.i:                                            ; preds = %L67.i, %L59.i, %L55.i
  %17 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc23", %L67.i ], [ %"'ipc24", %L59.i ], [ %"'ipc24", %L55.i ], !dbg !647
  %"'ipc25" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %17 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !651
  %18 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 6, !dbg !655
  %.not21 = icmp eq i64 %arraylen.i, 0, !dbg !655
  store i8 2, i8* %_cache35, align 1, !dbg !658, !invariant.group !636
  br i1 %.not21, label %julia_materialize__6424_inner.exit, label %L92.i.lr.ph, !dbg !658

L92.i.lr.ph:                                      ; preds = %L72.i
  %"'ipc26" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc25" to double addrspace(13)* addrspace(11)*
  %"arrayptr.i23'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc26", align 8, !tbaa !105, !alias.scope !659, !noalias !662, !nonnull !15, !invariant.group !664
  %"'ipc" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*
  %"'ipc20" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc" to double addrspace(13)* addrspace(11)*
  %"arrayptr33.i24'ipl" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc20", align 16, !tbaa !105, !alias.scope !665, !noalias !668, !nonnull !15, !invariant.group !670
  %19 = add nsw i64 %arraylen.i, -1, !dbg !671
  br label %L92.i, !dbg !671

L92.i:                                            ; preds = %L92.i, %L92.i.lr.ph
  %iv = phi i64 [ %iv.next, %L92.i ], [ 0, %L92.i.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1, !dbg !672
  %20 = select i1 %18, i64 0, i64 %iv, !dbg !675
  %"'ipg29" = getelementptr inbounds double, double addrspace(13)* %"arrayptr.i23'ipl", i64 %20, !dbg !675
  %"'ipg" = getelementptr inbounds double, double addrspace(13)* %"arrayptr33.i24'ipl", i64 %iv, !dbg !682
  %exitcond.not = icmp eq i64 %iv.next, %arraylen.i, !dbg !683
  br i1 %exitcond.not, label %julia_materialize__6424_inner.exit.loopexit, label %L92.i, !dbg !671, !llvm.loop !685

julia_materialize__6424_inner.exit.loopexit:      ; preds = %L92.i
  store i8 1, i8* %_cache35, align 1, !dbg !615, !invariant.group !636
  br label %julia_materialize__6424_inner.exit, !dbg !615

julia_materialize__6424_inner.exit:               ; preds = %julia_materialize__6424_inner.exit.loopexit, %L72.i, %L52.i
  br label %invertjulia_materialize__6424_inner.exit, !dbg !615

invertentry:                                      ; preds = %invertL35.i
  fence syncscope("singlethread") seq_cst
  fence syncscope("singlethread") seq_cst
  ret void

invertL35.i:                                      ; preds = %invertL55.i, %invertL52.i
  br label %invertentry

invertL52.i:                                      ; preds = %invertjulia_materialize__6424_inner.exit
  %tapeArg13_unwrap = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 0, !dbg !632
  call fastcc void @diffejulia__copyto_impl__6439({} addrspace(10)* align 16 %0, {} addrspace(10)* align 16 %"'", {} addrspace(10)* align 16 %.fca.0.0.extract, {} addrspace(10)* align 16 %".fca.0.0.extract'ipev", i64 signext %arraylen.i, { i8*, i8* } %tapeArg13_unwrap), !dbg !632
  br label %invertL35.i

invertL55.i:                                      ; preds = %invertL72.i, %invertL59.i
  br label %invertL35.i

invertL59.i:                                      ; preds = %staging, %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit
  br label %invertL55.i

invertL67.i:                                      ; preds = %staging
  %21 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 1, !dbg !644
  %22 = bitcast {} addrspace(10)* %".fca.0.0.extract'ipev" to i8 addrspace(13)* addrspace(10)*, !dbg !644
  %23 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %22, align 8, !dbg !644
  %24 = bitcast {} addrspace(10)* %21 to i8 addrspace(13)* addrspace(10)*, !dbg !644
  %25 = load i8 addrspace(13)*, i8 addrspace(13)* addrspace(10)* %24, align 8, !dbg !644
  %26 = bitcast i8 addrspace(13)* %25 to double addrspace(13)*, !dbg !644
  %27 = bitcast i8 addrspace(13)* %23 to double addrspace(13)*, !dbg !644
  %28 = udiv i64 %10, 8, !dbg !644
  %29 = icmp eq i64 %28, 0, !dbg !644
  br i1 %29, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !644

for.body.i:                                       ; preds = %for.body.i, %invertL67.i
  %idx.i = phi i64 [ 0, %invertL67.i ], [ %idx.next.i, %for.body.i ], !dbg !644
  %dst.i.i = getelementptr inbounds double, double addrspace(13)* %26, i64 %idx.i, !dbg !644
  %dst.i.l.i = load double, double addrspace(13)* %dst.i.i, align 1, !dbg !644
  store double 0.000000e+00, double addrspace(13)* %dst.i.i, align 1, !dbg !644
  %src.i.i = getelementptr inbounds double, double addrspace(13)* %27, i64 %idx.i, !dbg !644
  %src.i.l.i = load double, double addrspace(13)* %src.i.i, align 1, !dbg !644
  %30 = fadd fast double %src.i.l.i, %dst.i.l.i, !dbg !644
  store double %30, double addrspace(13)* %src.i.i, align 1, !dbg !644
  %idx.next.i = add nuw i64 %idx.i, 1, !dbg !644
  %31 = icmp eq i64 %28, %idx.next.i, !dbg !644
  br i1 %31, label %__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit, label %for.body.i, !dbg !644

__enzyme_memcpyadd_doubleda1sa1dadd13sadd13.exit: ; preds = %invertL67.i, %for.body.i
  br label %invertL59.i

invertL72.i:                                      ; preds = %invertjulia_materialize__6424_inner.exit, %invertL92.i.lr.ph
  %.not_unwrap = icmp eq {} addrspace(11)* %12, %13
  %.not25_unwrap38 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 4
  br i1 %.not_unwrap, label %invertL55.i, label %staging

invertL92.i.lr.ph:                                ; preds = %invertL92.i_phimerge
  br label %invertL72.i

invertL92.i:                                      ; preds = %mergeinvertL92.i_julia_materialize__6424_inner.exit.loopexit, %incinvertL92.i
  %32 = load i64, i64* %"iv'ac", align 8, !dbg !682
  %"'ipc_unwrap" = bitcast {} addrspace(10)* %"'" to double addrspace(13)* addrspace(10)*, !dbg !682
  %"'ipc20_unwrap" = addrspacecast double addrspace(13)* addrspace(10)* %"'ipc_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !682
  %"arrayptr33.i24'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc20_unwrap", align 16, !tbaa !105, !alias.scope !665, !noalias !668, !nonnull !15, !invariant.group !670
  %"'ipg_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr33.i24'ipl_unwrap", i64 %32, !dbg !682
  %33 = load double, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !682, !tbaa !158, !alias.scope !686, !noalias !689
  store double 0.000000e+00, double addrspace(13)* %"'ipg_unwrap", align 8, !dbg !682, !tbaa !158, !alias.scope !686, !noalias !689
  %34 = load double, double* %"arrayref.i'de", align 8, !dbg !682
  %35 = fadd fast double %34, %33, !dbg !682
  store double %35, double* %"arrayref.i'de", align 8, !dbg !682
  %36 = load double, double* %"arrayref.i'de", align 8, !dbg !675
  store double 0.000000e+00, double* %"arrayref.i'de", align 8, !dbg !675
  %37 = load i64, i64* %"iv'ac", align 8, !dbg !675
  %.not_unwrap30 = icmp eq {} addrspace(11)* %12, %13, !dbg !675
  %.not25_unwrap = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 4, !dbg !675
  br i1 %.not_unwrap30, label %invertL92.i_phirc32, label %invertL92.i_phisplt, !dbg !675

invertL92.i_phisplt:                              ; preds = %invertL92.i
  br i1 %.not25_unwrap, label %invertL92.i_phirc, label %invertL92.i_phirc31, !dbg !675

invertL92.i_phirc:                                ; preds = %invertL92.i_phisplt
  %"'ip_phi3_unwrap" = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 1
  %"'ipc23_unwrap" = bitcast {} addrspace(10)* %"'ip_phi3_unwrap" to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*
  br label %invertL92.i_phimerge

invertL92.i_phirc31:                              ; preds = %invertL92.i_phisplt
  br label %invertL92.i_phimerge

invertL92.i_phirc32:                              ; preds = %invertL92.i
  br label %invertL92.i_phimerge

invertL92.i_phimerge:                             ; preds = %invertL92.i_phirc32, %invertL92.i_phirc31, %invertL92.i_phirc
  %38 = phi { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* [ %"'ipc23_unwrap", %invertL92.i_phirc ], [ %"'ipc24", %invertL92.i_phirc31 ], [ %"'ipc24", %invertL92.i_phirc32 ], !dbg !675
  %"'ipc25_unwrap" = addrspacecast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)* %38 to { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)*, !dbg !675
  %"'ipc26_unwrap" = bitcast { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(11)* %"'ipc25_unwrap" to double addrspace(13)* addrspace(11)*, !dbg !675
  %"arrayptr.i23'ipl_unwrap" = load double addrspace(13)*, double addrspace(13)* addrspace(11)* %"'ipc26_unwrap", align 8, !tbaa !105, !alias.scope !659, !noalias !662, !nonnull !15, !invariant.group !664
  %_unwrap39 = extractvalue { { i8*, i8* }, {} addrspace(10)*, i64, i64, i1, { i8 addrspace(13)*, i64, i16, i16, i32 } addrspace(10)*, i1 } %tapeArg, 6, !dbg !675
  %_unwrap = select i1 %_unwrap39, i64 0, i64 %37, !dbg !675
  %"'ipg29_unwrap" = getelementptr inbounds double, double addrspace(13)* %"arrayptr.i23'ipl_unwrap", i64 %_unwrap, !dbg !675
  %39 = load double, double addrspace(13)* %"'ipg29_unwrap", align 8, !dbg !675, !tbaa !158, !alias.scope !691, !noalias !694
  %40 = fadd fast double %39, %36, !dbg !675
  store double %40, double addrspace(13)* %"'ipg29_unwrap", align 8, !dbg !675, !tbaa !158, !alias.scope !691, !noalias !694
  %41 = load i64, i64* %"iv'ac", align 8
  %42 = icmp eq i64 %41, 0
  %43 = xor i1 %42, true
  br i1 %42, label %invertL92.i.lr.ph, label %incinvertL92.i

incinvertL92.i:                                   ; preds = %invertL92.i_phimerge
  %44 = load i64, i64* %"iv'ac", align 8
  %45 = add nsw i64 %44, -1
  store i64 %45, i64* %"iv'ac", align 8
  br label %invertL92.i

invertjulia_materialize__6424_inner.exit.loopexit: ; preds = %invertjulia_materialize__6424_inner.exit
  %_unwrap34 = add nsw i64 %arraylen.i, -1
  br label %mergeinvertL92.i_julia_materialize__6424_inner.exit.loopexit

mergeinvertL92.i_julia_materialize__6424_inner.exit.loopexit: ; preds = %invertjulia_materialize__6424_inner.exit.loopexit
  store i64 %_unwrap34, i64* %"iv'ac", align 8
  br label %invertL92.i

invertjulia_materialize__6424_inner.exit:         ; preds = %julia_materialize__6424_inner.exit
  %46 = load i8, i8* %_cache35, align 1, !invariant.group !636
  switch i8 %46, label %invertL72.i [
    i8 0, label %invertL52.i
    i8 1, label %invertjulia_materialize__6424_inner.exit.loopexit
  ]

staging:                                          ; preds = %invertL72.i
  br i1 %.not25_unwrap38, label %invertL67.i, label %invertL59.i
}

ERROR: LoadError: AssertionError: Enzyme Mutability Error
Stacktrace:
  [1] runtime_generic_rev(activity::Type{Val{(false, true, true)}}, width::Val{1}, ModifiedBetween::Val{(true, true, true)}, tape::Enzyme.Compiler.Tape{Nothing, Base.RefValue{Float64}, Float64}, shadow_ptr::Tuple{Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, f::typeof(/), df::Nothing, primal_1::Float64, shadow_1_1::Float64, primal_2::Float64, shadow_2_1::Base.RefValue{Float64})
    @ Enzyme.Compiler ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/rules/jitrules.jl:246
  [2] q_true
    @ ~/Documents/GitHub/data_assimilation_2/three_mass_spring/exp_5_param.jl:345
  [3] q_kf
    @ ~/Documents/GitHub/data_assimilation_2/three_mass_spring/exp_5_param.jl:347 [inlined]
  [4] integrate1
    @ ~/Documents/GitHub/data_assimilation_2/three_mass_spring/exp_5_param.jl:35 [inlined]
  [5] diffejulia_integrate1_1954wrap
    @ ~/Documents/GitHub/data_assimilation_2/three_mass_spring/exp_5_param.jl:0
  [6] macro expansion
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/compiler.jl:5230 [inlined]
  [7] enzyme_call
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/compiler.jl:4908 [inlined]
  [8] CombinedAdjointThunk
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/compiler.jl:4870 [inlined]
  [9] autodiff
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/Enzyme.jl:215 [inlined]
 [10] autodiff
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/Enzyme.jl:238 [inlined]
 [11] autodiff
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/Enzyme.jl:224 [inlined]
 [12] enzyme_check_param(; k_guess::Float64)
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/exp_5_param.jl:431
 [13] enzyme_check_param()
    @ Main.ThreeMassSpring ~/Documents/GitHub/data_assimilation_2/three_mass_spring/exp_5_param.jl:340
 [14] top-level scope
    @ ~/Documents/GitHub/data_assimilation_2/three_mass_spring/debugging3.jl:6
in expression starting at /Users/swilliamson/Documents/GitHub/data_assimilation_2/three_mass_spring/debugging3.jl:6
params_adjoint2 = Main.ThreeMassSpring.mso_params_ops{Main.ThreeMassSpring.var"#q_kf#36"{Main.ThreeMassSpring.var"#q_true#35"}}
  T: Int64 10000
  t: Int64 0
  dt: Float64 0.001
  x: Array{Float64}((6,)) [1.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  u: Array{Float64}((6, 10001)) [0.053789363540378256 -0.034477948177364076 … -0.14986767532029263 0.20624645389996643; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  n: Array{Float64}((6, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  k: Float64 20.0
  r: Float64 0.5
  q: q_kf (function of type Main.ThreeMassSpring.var"#q_kf#36"{Main.ThreeMassSpring.var"#q_true#35"})
  J: Float64 0.0
  data_steps: Array{Int64}((21,)) [3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800  …  5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000]
  data: Array{Float64}((6, 10001)) [0.99990874916679 1.153662067810838 … -0.9571195397042735 -1.100676445843749; -3.174525549058001e-5 1.9232965189829104e-5 … 0.7732345424757039 0.7719635416570036; … ; -0.0001260456441650153 0.020048621447258965 … -1.2843958254226309 -1.3063042728740202; -0.00012361397362475215 -8.813508269354106e-5 … 1.395158739478939 1.323931700479082]
  states: Array{Float64}((6, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  energy: Array{Float64}((3, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  A: Array{Float64}((6, 6)) [1.0 0.0 … 0.0 0.0; 0.0 1.0 … 0.001 0.0; … ; 0.02 -0.06 … 0.9995 0.0; 0.0 0.02 … 0.0 0.9995]
  B: Array{Float64}((6, 6)) [1.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Gamma: Array{Float64}((6, 6)) [1.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  E: Array{Float64}((6, 6)) [1.0 0.0 … 0.0 0.0; 0.0 1.0 … 0.0 0.0; … ; 0.0 0.0 … 1.0 0.0; 0.0 0.0 … 0.0 1.0]
  Q: Array{Float64}((6, 6)) [0.001653213969959386 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Q_inv: Float64 0.0
  R: Array{Float64}((6, 6)) [1.0009134387242822e-8 0.0 … 0.0 0.0; 0.0 1.0009134387242822e-8 … 0.0 0.0; … ; 0.0 0.0 … 1.0009134387242822e-8 0.0; 0.0 0.0 … 0.0 1.0009134387242822e-8]
  R_inv: Array{Float64}((6, 6)) [9.990873948845702e7 0.0 … 0.0 0.0; 0.0 9.990873948845702e7 … 0.0 0.0; … ; 0.0 0.0 … 9.990873948845702e7 0.0; 0.0 0.0 … 0.0 9.990873948845702e7]
  K: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Kc: Array{Float64}((3, 3)) [-40.0 20.0 0.0; 20.0 -60.0 20.0; 0.0 20.0 -40.0]

(i, xi, ty, tup, Base.which(EnzymeCore.make_zero, tup)) = (3, 0.0, Float64, Tuple{Type{Float64}, IdDict{Any, Any}, Float64, Val{false}}, make_zero(::Type{RT}, seen::IdDict, prev::RT, ::Val{copy_if_inactive}) where {copy_if_inactive, RT<:AbstractFloat} @ Enzyme.Compiler ~/Documents/GitHub/data_assimilation_2/three_mass_spring/Enzyme.jl/src/compiler.jl:1216)
dparams_adjoint2 = Main.ThreeMassSpring.mso_params_ops{Main.ThreeMassSpring.var"#q_kf#36"{Main.ThreeMassSpring.var"#q_true#35"}}
  T: Int64 10000
  t: Int64 0
  dt: Float64 0.0
  x: Array{Float64}((6,)) [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  u: Array{Float64}((6, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  n: Array{Float64}((6, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  k: Float64 0.0
  r: Float64 0.0
  q: q_kf (function of type Main.ThreeMassSpring.var"#q_kf#36"{Main.ThreeMassSpring.var"#q_true#35"})
  J: Float64 0.0
  data_steps: Array{Int64}((21,)) [3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800  …  5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000]
  data: Array{Float64}((6, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  states: Array{Float64}((6, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  energy: Array{Float64}((3, 10001)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  A: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  B: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Gamma: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  E: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Q: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Q_inv: Float64 0.0
  R: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  R_inv: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  K: Array{Float64}((6, 6)) [0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]
  Kc: Array{Float64}((3, 3)) [0.0 0.0 0.0; 0.0 0.0 0.0; 0.0 0.0 0.0]

